import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o}from"./app-DIJDtupu.js";const n={};function s(r,e){return o(),i("div",null,e[0]||(e[0]=[a('<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最近看了一篇文章，[如何定位 golang 进程 hang 死的 bug](/articles/11880)，里面有这样一段代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; &quot;io&quot; &quot;log&quot; &quot;net/http&quot; &quot;runtime&quot; &quot;time&quot; ) func main() { runtime.GOMAXPROCS(runtime.NumCPU()) go server() go printNum() var i = 1 for { // will block here, and never go out i++ } fmt.Println(&quot;for loop end&quot;) time.Sleep(time.Second \\* 3600) } func printNum() { i := 0 for { fmt.Println(i) i++ } } func HelloServer(w http.ResponseWriter, req \\*http.Request) { fmt.Println(&quot;hello world&quot;) io.WriteString(w, &quot;hello, world!\\\\n&quot;) } func server() { http.HandleFunc(&quot;/&quot;, HelloServer) err := http.ListenAndServe(&quot;:12345&quot;, nil) if err != nil { log.Fatal(&quot;ListenAndServe: &quot;, err) } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行，会发现打印一会儿数字后停了，我们执行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> curl localhost:12345</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>程序卡死。关于程序挂在哪里借助`dlv`是很好定位的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> dlv debug hang.go</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>进去之后运行程序，打印停止进入卡死状态，我们执行`ctrl C`，`dlv`会显示断开的地方：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> received SIGINT, stopping process (will not forward signal)&gt; main.main() ./hang.go:17 (PC: 0x12dd7c8) 12: func main() { 13: runtime.GOMAXPROCS(runtime.NumCPU()) 14: go server() 15: go printNum() 16: var i = 1 =&gt; 17: for { 18: // will block here, and never go out 19: i++ 20: } 21: fmt.Println(&quot;for loop end&quot;) 22: time.Sleep(time.Second \\* 3600) (dlv)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但是我还是不明白，不明白的地方主要是因为： - 我又看了两篇文章[Goroutine调度实例简要分析](<a href="http://tonybai.com/2017/11/23/the-simple-analysis-of-goroutine-schedule-examples/" target="_blank" rel="noopener noreferrer">http://tonybai.com/2017/11/23/the-simple-analysis-of-goroutine-schedule-examples/</a>)和[也谈goroutine调度器](<a href="http://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/" target="_blank" rel="noopener noreferrer">http://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/</a>)，是同一位作者Tony Bai写的，写得非常好。第二篇文章解释了goroutine的调度和cpu数量的关系（不多加解释，建议大家看看），我的mac是双核四线程（这里不明白的同学自行google cpu 超线程），go版本是1.9，理论上讲可以跑4个goroutine而不用考虑死循环，一个死循环最多把一个cpu打死，上面的代码中只有3个goroutine，而且他们看上去都挂住了。 - 上面说的理论上讲，不是我主观臆测的，我跑了`1`中[第一篇文章](<a href="http://tonybai.com/2017/11/23/the-simple-analysis-of-goroutine-schedule-examples/" target="_blank" rel="noopener noreferrer">http://tonybai.com/2017/11/23/the-simple-analysis-of-goroutine-schedule-examples/</a>)中的一个例子:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; &quot;time&quot; ) func deadloop() { for { } } func main() { go deadloop() for { time.Sleep(time.Second \\* 1) fmt.Println(&quot;I got scheduled!&quot;) } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面代码有两个goroutine，一个是`main goroutine`，一个是`deadloop goroutine`，跑得时候`deadloop gouroutine`不会对`main goroutine`造成影响，打印一直在持续，作者的文章解释了原因。 - [如何定位 golang 进程 hang 死的 bug](/articles/11880)这篇文章提到了`gcwaiting`，然而没有解释。 在[如何定位 golang 进程 hang 死的 bug](/articles/11880)有这样一段话： &gt; 因为在 for 循环中没有函数调用的话，编译器不会插入调度代码，所以这个执行 for 循环的 goroutine 没有办法被调出，而在循环期间碰到 gc，那么就会卡在 gcwaiting 阶段，并且整个进程永远 hang 死在这个循环上。并不再对外响应。 这个其实就是我们的第一段代码卡死的原因，也是我们第二段代码没有卡死的原因，就是在`gc`上！ 我们再看一篇文章，[golang的垃圾回收（GC）机制](<a href="https://studygolang.com/articles/9004" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/9004</a>)，这篇文章很短，但每句话都很重要： &gt; 1. 设置gcwaiting=1，这个在每一个G任务之前会检查一次这个状态，如是，则会将当前M 休眠； &gt; 2. 如果这个M里面正在运行一个长时间的G任务，咋办呢，难道会等待这个G任务自己切换吗？这样的话可要等10ms啊，不能等！坚决不能等！\\ &gt; 所以会主动发出抢占标记（类似于上一篇），让当前G任务中断，再运行下一个G任务的时候，就会走到第1步 那么如果这时候运行的是没有函数调用的死循环呢，gc也发出了抢占标记，但是如果死循环没有函数调用，就没有地方被标记，无法被抢占，那就只能设置`gcwaiting=1`，而**M没有休眠**，`stop the world`卡住了（死锁），`gcwaiting`一直是1，整个程序都卡住了！ 这里其实已经解释了第一份代码的现象，第二份代码为什么没有hang住相信大家也能猜到了：代码里没有触发gc！我们来手动触发一下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; &quot;log&quot; &quot;net/http&quot; \\_ &quot;net/http/pprof&quot; // &quot;runtime&quot; &quot;time&quot; ) func deadloop() { for { } } func main() { go func() { log.Println(http.ListenAndServe(&quot;localhost:6060&quot;, nil)) }() go deadloop() i := 3 for { time.Sleep(time.Second \\* 1) i-- fmt.Println(&quot;I got scheduled!&quot;) if i == 0 { runtime.GC() } } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会发现打印了3行之后，程序也卡死了，bingo? 我们来看看`gcwaiting`是不是等于1:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> $ go build hang2.go $ GODEBUG=&quot;schedtrace=300,scheddetail=1&quot; ./hang2 SCHED 2443ms: gomaxprocs=4 idleprocs=3 threads=7 spinningthreads=0 idlethreads=2 runqueue=0 gcwaiting=0 nmidlelocked=0 stopwait=0 sysmonwait=0 P0: status=1 schedtick=4 syscalltick=5 m=5 runqsize=0 gfreecnt=1 P1: status=0 schedtick=14 syscalltick=0 m=-1 runqsize=0 gfreecnt=0 P2: status=0 schedtick=3 syscalltick=4 m=-1 runqsize=0 gfreecnt=0 ...... SCHED 2751ms: gomaxprocs=4 idleprocs=0 threads=7 spinningthreads=0 idlethreads=2 runqueue=0 gcwaiting=1 nmidlelocked=0 stopwait=1 sysmonwait=0 P0: status=1 schedtick=4 syscalltick=5 m=5 runqsize=0 gfreecnt=1 P1: status=3 schedtick=14 syscalltick=0 m=-1 runqsize=0 gfreecnt=0 P2: status=3 schedtick=3 syscalltick=10 m=-1 runqsize=0 gfreecnt=0 P3: status=3 schedtick=1 syscalltick=26 m=0 runqsize=0 gfreecnt=0 M6: p=-1 curg=-1 mallocing=0 throwing=0 preemptoff= locks=0 dying=0 helpgc=0 spinning=false blocked=false lockedg=-1 M5: p=0 curg=19 mallocing=0 throwing=0 preemptoff= locks=0 dying=0 helpg</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码诚不欺我也！ ## [](#参考资料 &quot;参考资料&quot;)参考资料 - [如何定位 golang 进程 hang 死的 bug](<a href="https://gocn.io/article/441" target="_blank" rel="noopener noreferrer">https://gocn.io/article/441</a>) - [Goroutine调度实例简要分析](<a href="http://tonybai.com/2017/11/23/the-simple-analysis-of-goroutine-schedule-examples/" target="_blank" rel="noopener noreferrer">http://tonybai.com/2017/11/23/the-simple-analysis-of-goroutine-schedule-examples/</a>) - [也谈goroutine调度器](<a href="http://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/" target="_blank" rel="noopener noreferrer">http://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/</a>) - [golang的垃圾回收（GC）机制](<a href="https://studygolang.com/articles/9004" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/9004</a>)</p>',16)]))}const c=t(n,[["render",s],["__file","go语言死循环分析.html.vue"]]),g=JSON.parse('{"path":"/golang/%E5%8E%9F%E7%90%86/theory/go%E8%AF%AD%E8%A8%80%E6%AD%BB%E5%BE%AA%E7%8E%AF%E5%88%86%E6%9E%90.html","title":"go语言死循环分析","lang":"zh-CN","frontmatter":{"title":"go语言死循环分析","source_url":"https://studygolang.com/articles/11881","category":"Go原理教程","description":"最近看了一篇文章，[如何定位 golang 进程 hang 死的 bug](/articles/11880)，里面有这样一段代码： 运行，会发现打印一会儿数字后停了，我们执行 程序卡死。关于程序挂在哪里借助`dlv`是很好定位的： 进去之后运行程序，打印停止进入卡死状态，我们执行`ctrl C`，`dlv`会显示断开的地方： 但是我还是不明白，不明白的...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%8E%9F%E7%90%86/theory/go%E8%AF%AD%E8%A8%80%E6%AD%BB%E5%BE%AA%E7%8E%AF%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"go语言死循环分析"}],["meta",{"property":"og:description","content":"最近看了一篇文章，[如何定位 golang 进程 hang 死的 bug](/articles/11880)，里面有这样一段代码： 运行，会发现打印一会儿数字后停了，我们执行 程序卡死。关于程序挂在哪里借助`dlv`是很好定位的： 进去之后运行程序，打印停止进入卡死状态，我们执行`ctrl C`，`dlv`会显示断开的地方： 但是我还是不明白，不明白的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"go语言死循环分析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":4.53,"words":1358},"filePathRelative":"golang/原理/theory/go语言死循环分析.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span></span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{c as comp,g as data};
