import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as s,o as a}from"./app-DIJDtupu.js";const n={};function o(r,t){return a(),i("div",null,t[0]||(t[0]=[s('<p>欢迎来到 [Golang 系列教程](<a href="https://studygolang.com/subject/2" target="_blank" rel="noopener noreferrer">https://studygolang.com/subject/2</a>)的第 27 篇。 Go 不支持继承，但它支持组合（Composition）。组合一般定义为“合并在一起”。汽车就是一个关于组合的例子：一辆汽车由车轮、引擎和其他各种部件组合在一起。 ## 通过嵌套结构体进行组合 在 Go 中，通过在结构体内嵌套结构体，可以实现组合。 组合的典型例子就是博客帖子。每一个博客的帖子都有标题、内容和作者信息。使用组合可以很好地表示它们。通过学习本教程后面的内容，我们会知道如何实现组合。 我们首先创建一个 `author` 结构体。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) type author struct { firstName string lastName string bio string } func (a author) fullName() string { return fmt.Sprintf(&quot;%s %s&quot;, a.firstName, a.lastName) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在上面的代码片段中，我们创建了一个 `author` 结构体，`author` 的字段有 `firstname`、`lastname` 和 `bio`。我们还添加了一个 `fullName()` 方法，其中 `author` 作为接收者类型，该方法返回了作者的全名。 下一步我们创建 `post` 结构体。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go type post struct { title string content string author } func (p post) details() { fmt.Println(&quot;Title: &quot;, p.title) fmt.Println(&quot;Content: &quot;, p.content) fmt.Println(&quot;Author: &quot;, p.author.fullName()) fmt.Println(&quot;Bio: &quot;, p.author.bio) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>`post` 结构体的字段有 `title` 和 `content`。它还有一个嵌套的匿名字段 `author`。该字段指定 `author` 组成了 `post` 结构体。现在 `post` 可以访问 `author` 结构体的所有字段和方法。我们同样给 `post` 结构体添加了 `details()` 方法，用于打印标题、内容和作者的全名与简介。 一旦结构体内嵌套了一个结构体字段，Go 可以使我们访问其嵌套的字段，好像这些字段属于外部结构体一样。所以上面第 11 行的 `p.author.fullName()` 可以替换为 `p.fullName()`。于是，`details()` 方法可以重写，如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go func (p post) details() { fmt.Println(&quot;Title: &quot;, p.title) fmt.Println(&quot;Content: &quot;, p.content) fmt.Println(&quot;Author: &quot;, p.fullName()) fmt.Println(&quot;Bio: &quot;, p.bio) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>现在，我们的 `author` 和 `post` 结构体都已准备就绪，我们来创建一个博客帖子来完成这个程序。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) type author struct { firstName string lastName string bio string } func (a author) fullName() string { return fmt.Sprintf(&quot;%s %s&quot;, a.firstName, a.lastName) } type post struct { title string content string author } func (p post) details() { fmt.Println(&quot;Title: &quot;, p.title) fmt.Println(&quot;Content: &quot;, p.content) fmt.Println(&quot;Author: &quot;, p.fullName()) fmt.Println(&quot;Bio: &quot;, p.bio) } func main() { author1 := author{ &quot;Naveen&quot;, &quot;Ramanathan&quot;, &quot;Golang Enthusiast&quot;, } post1 := post{ &quot;Inheritance in Go&quot;, &quot;Go supports composition instead of inheritance&quot;, author1, } post1.details() }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在 playground 上运行](<a href="https://play.golang.org/p/sskWaTpJgr" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/sskWaTpJgr</a>) 在上面程序中，main 函数在第 31 行新建了一个 `author` 结构体变量。而在第 36 行，我们通过嵌套 `author1` 来创建一个 `post`。该程序输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>bash Title: Inheritance in Go Content: Go supports composition instead of inheritance Author: Naveen Ramanathan Bio: Golang Enthusiast</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="结构体切片的嵌套-我们可以进一步处理这个示例-使用博客帖子的切片来创建一个网站。-我们首先定义-website-结构体。请在上述代码里的-main-函数中-添加下面的代码-并运行它。" tabindex="-1"><a class="header-anchor" href="#结构体切片的嵌套-我们可以进一步处理这个示例-使用博客帖子的切片来创建一个网站。-我们首先定义-website-结构体。请在上述代码里的-main-函数中-添加下面的代码-并运行它。"><span>结构体切片的嵌套 我们可以进一步处理这个示例，使用博客帖子的切片来创建一个网站。😃 我们首先定义 `website` 结构体。请在上述代码里的 main 函数中，添加下面的代码，并运行它。</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go type website struct { \\[\\]post } func (w website) contents() { fmt.Println(&quot;Contents of Website\\\\n&quot;) for \\_, v := range w.posts { v.details() fmt.Println() } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在你添加上述代码后，当你运行程序时，编译器将会报错，如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>bash main.go:31:9: syntax error: unexpected \\[, expecting field name or embedded type</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这项错误指出了嵌套的结构体切片 `[]post`。错误的原因是结构体不能嵌套一个匿名切片。我们需要一个字段名。所以我们来修复这个错误，让编译器顺利通过。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go type website struct { posts \\[\\]post }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以看到，我给帖子的切片 `[]post` 添加了字段名 `posts`。 现在我们来修改主函数，为我们的新网站创建一些帖子吧。 修改后的完整代码如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) type author struct { firstName string lastName string bio string } func (a author) fullName() string { return fmt.Sprintf(&quot;%s %s&quot;, a.firstName, a.lastName) } type post struct { title string content string author } func (p post) details() { fmt.Println(&quot;Title: &quot;, p.title) fmt.Println(&quot;Content: &quot;, p.content) fmt.Println(&quot;Author: &quot;, p.fullName()) fmt.Println(&quot;Bio: &quot;, p.bio) } type website struct { posts \\[\\]post } func (w website) contents() { fmt.Println(&quot;Contents of Website\\\\n&quot;) for \\_, v := range w.posts { v.details() fmt.Println() } } func main() { author1 := author{ &quot;Naveen&quot;, &quot;Ramanathan&quot;, &quot;Golang Enthusiast&quot;, } post1 := post{ &quot;Inheritance in Go&quot;, &quot;Go supports composition instead of inheritance&quot;, author1, } post2 := post{ &quot;Struct instead of Classes in Go&quot;, &quot;Go does not support classes but methods can be added to structs&quot;, author1, } post3 := post{ &quot;Concurrency&quot;, &quot;Go is a concurrent language and not a parallel one&quot;, author1, } w := website{ posts: \\[\\]post{post1, post2, post3}, } w.contents() }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在 playground 中运行](<a href="https://play.golang.org/p/gKaa0RbeAE" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/gKaa0RbeAE</a>) 在上面的主函数中，我们创建了一个作者 `author1`，以及三个帖子 `post1`、`post2` 和 `post3`。我们最后通过嵌套三个帖子，在第 62 行创建了网站 `w`，并在下一行显示内容。 程序会输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>bash Contents of Website Title: Inheritance in Go Content: Go supports composition instead of inheritance Author: Naveen Ramanathan Bio: Golang Enthusiast Title: Struct instead of Classes in Go Content: Go does not support classes but methods can be added to structs Author: Naveen Ramanathan Bio: Golang Enthusiast Title: Concurrency Content: Go is a concurrent language and not a parallel one Author: Naveen Ramanathan Bio: Golang Enthusiast</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>本教程到此结束。祝你愉快。 **上一教程 - [结构体取代类](<a href="https://studygolang.com/articles/12630" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/12630</a>)** **下一教程 - [多态](<a href="https://studygolang.com/articles/12681" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/12681</a>)**</p>',21)]))}const u=e(n,[["render",o],["__file","27-组合取代继承.html.vue"]]),h=JSON.parse('{"path":"/golang/%E5%9F%BA%E7%A1%80/27-%E7%BB%84%E5%90%88%E5%8F%96%E4%BB%A3%E7%BB%A7%E6%89%BF.html","title":"Go 系列教程 —— 27. 组合取代继承","lang":"zh-CN","frontmatter":{"title":"Go 系列教程 —— 27. 组合取代继承","source_url":"https://studygolang.com/articles/12680","category":"Go系列教程","description":"欢迎来到 [Golang 系列教程](https://studygolang.com/subject/2)的第 27 篇。 Go 不支持继承，但它支持组合（Composition）。组合一般定义为“合并在一起”。汽车就是一个关于组合的例子：一辆汽车由车轮、引擎和其他各种部件组合在一起。 ## 通过嵌套结构体进行组合 在 Go 中，通过在结构体内嵌套结构...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%9F%BA%E7%A1%80/27-%E7%BB%84%E5%90%88%E5%8F%96%E4%BB%A3%E7%BB%A7%E6%89%BF.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"Go 系列教程 —— 27. 组合取代继承"}],["meta",{"property":"og:description","content":"欢迎来到 [Golang 系列教程](https://studygolang.com/subject/2)的第 27 篇。 Go 不支持继承，但它支持组合（Composition）。组合一般定义为“合并在一起”。汽车就是一个关于组合的例子：一辆汽车由车轮、引擎和其他各种部件组合在一起。 ## 通过嵌套结构体进行组合 在 Go 中，通过在结构体内嵌套结构..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 系列教程 —— 27. 组合取代继承\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[{"level":2,"title":"结构体切片的嵌套 我们可以进一步处理这个示例，使用博客帖子的切片来创建一个网站。😃 我们首先定义 `website` 结构体。请在上述代码里的 main 函数中，添加下面的代码，并运行它。","slug":"结构体切片的嵌套-我们可以进一步处理这个示例-使用博客帖子的切片来创建一个网站。-我们首先定义-website-结构体。请在上述代码里的-main-函数中-添加下面的代码-并运行它。","link":"#结构体切片的嵌套-我们可以进一步处理这个示例-使用博客帖子的切片来创建一个网站。-我们首先定义-website-结构体。请在上述代码里的-main-函数中-添加下面的代码-并运行它。","children":[]}],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":4.14,"words":1241},"filePathRelative":"golang/基础/27-组合取代继承.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"<p>欢迎来到 [Golang 系列教程](<a href=\\"https://studygolang.com/subject/2\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://studygolang.com/subject/2</a>)的第 27 篇。 Go 不支持继承，但它支持组合（Composition）。组合一般定义为“合并在一起”。汽车就是一个关于组合的例子：一辆汽车由车轮、引擎和其他各种部件组合在一起。 ## 通过嵌套结构体进行组合 在 Go 中，通过在结构体内嵌套结构体，可以实现组合。 组合的典型例子就是博客帖子。每一个博客的帖子都有标题、内容和作者信息。使用组合可以很好地表示它们。通过学习本教程后面的内容，我们会知道如何实现组合。 我们首先创建一个 `author` 结构体。</p>"}');export{u as comp,h as data};
