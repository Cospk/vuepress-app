import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as t,o as s}from"./app-DIJDtupu.js";const n={};function r(l,e){return s(),i("div",null,e[0]||(e[0]=[t('<p>欢迎来到 [Golang 系列教程](/subject/2)的第 13 个教程。 ## 什么是 map ？ map 是在 Go 中将值（value）与键（key）关联的内置类型。通过相应的键可以获取到值。 ## 如何创建 map ？ 通过向 `make` 函数传入键和值的类型，可以创建 map。`make(map[type of key]type of value)` 是创建 map 的语法。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go personSalary := make(map\\[string\\]int)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面的代码创建了一个名为 `personSalary` 的 map，其中键是 string 类型，而值是 int 类型。 map 的零值是 `nil`。如果你想添加元素到 nil map 中，会触发运行时 panic。因此 map 必须使用 `make` 函数初始化。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { var personSalary map\\[string\\]int if personSalary == nil { fmt.Println(&quot;map is nil. Going to make one.&quot;) personSalary = make(map\\[string\\]int) } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/IwJnXMGc1M" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/IwJnXMGc1M</a>) 上面的程序中，personSalary 是 nil，因此需要使用 make 方法初始化，程序将输出 `map is nil. Going to make one.`。 ## 给 map 添加元素 给 map 添加新元素的语法和数组相同。下面的程序给 `personSalary` map 添加了几个新元素。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { personSalary := make(map\\[string\\]int) personSalary\\[&quot;steve&quot;\\] = 12000 personSalary\\[&quot;jamie&quot;\\] = 15000 personSalary\\[&quot;mike&quot;\\] = 9000 fmt.Println(&quot;personSalary map contents:&quot;, personSalary) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/V1lnQ4Igw1" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/V1lnQ4Igw1</a>) 上面的程序输出：`personSalary map contents: map[steve:12000 jamie:15000 mike:9000]` 你也可以在声明的时候初始化 map。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { personSalary := map\\[string\\]int { &quot;steve&quot;: 12000, &quot;jamie&quot;: 15000, } personSalary\\[&quot;mike&quot;\\] = 9000 fmt.Println(&quot;personSalary map contents:&quot;, personSalary) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/nlH%5C_ADhO9f" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/nlH\\_ADhO9f</a>) 上面的程序声明了 personSalary，并在声明的同时添加两个元素。之后又添加了键 `mike`。程序输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> personSalary map contents: map\\[steve:12000 jamie:15000 mike:9000\\]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>键不一定只能是 string 类型。所有可比较的类型，如 boolean，interger，float，complex，string 等，都可以作为键。关于可比较的类型，如果你想了解更多，请访问 。 ## 获取 map 中的元素 目前我们已经给 map 添加了几个元素，现在学习下如何获取它们。获取 map 元素的语法是 `map[key]` 。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { personSalary := map\\[string\\]int{ &quot;steve&quot;: 12000, &quot;jamie&quot;: 15000, } personSalary\\[&quot;mike&quot;\\] = 9000 employee := &quot;jamie&quot; fmt.Println(&quot;Salary of&quot;, employee, &quot;is&quot;, personSalary\\[employee\\]) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/-TSBac7F1v" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/-TSBac7F1v</a>) 上面的程序很简单。获取并打印员工 `jamie` 的薪资。程序输出 `Salary of jamie is 15000`。 如果获取一个不存在的元素，会发生什么呢？map 会返回该元素类型的零值。在 `personSalary` 这个 map 里，如果我们获取一个不存在的元素，会返回 `int` 类型的零值 `0`。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { personSalary := map\\[string\\]int{ &quot;steve&quot;: 12000, &quot;jamie&quot;: 15000, } personSalary\\[&quot;mike&quot;\\] = 9000 employee := &quot;jamie&quot; fmt.Println(&quot;Salary of&quot;, employee, &quot;is&quot;, personSalary\\[employee\\]) fmt.Println(&quot;Salary of joe is&quot;, personSalary\\[&quot;joe&quot;\\]) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/EhUJhIkYJU" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/EhUJhIkYJU</a>) 上面程序输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> Salary of jamie is 15000 Salary of joe is 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面程序返回 `joe` 的薪资是 0。`personSalary` 中不包含 `joe` 的情况下我们不会获取到任何运行时错误。 如果我们想知道 map 中到底是不是存在这个 `key`，该怎么做：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go value, ok := map\\[key\\]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面就是获取 map 中某个 key 是否存在的语法。如果 `ok` 是 true，表示 key 存在，key 对应的值就是 `value` ，反之表示 key 不存在。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { personSalary := map\\[string\\]int{ &quot;steve&quot;: 12000, &quot;jamie&quot;: 15000, } personSalary\\[&quot;mike&quot;\\] = 9000 newEmp := &quot;joe&quot; value, ok := personSalary\\[newEmp\\] if ok == true { fmt.Println(&quot;Salary of&quot;, newEmp, &quot;is&quot;, value) } else { fmt.Println(newEmp,&quot;not found&quot;) } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/q8fL6MeVZs" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/q8fL6MeVZs</a>) 上面的程序中，第 15 行，`joe` 不存在，所以 `ok` 是 false。程序将输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> joe not found</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>遍历 map 中所有的元素需要用 `for range` 循环。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { personSalary := map\\[string\\]int{ &quot;steve&quot;: 12000, &quot;jamie&quot;: 15000, } personSalary\\[&quot;mike&quot;\\] = 9000 fmt.Println(&quot;All items of a map&quot;) for key, value := range personSalary { fmt.Printf(&quot;personSalary\\[%s\\] = %d\\\\n&quot;, key, value) } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/gq9ZOKsI9b" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/gq9ZOKsI9b</a>) 上面程序输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> All items of a map personSalary\\[mike\\] = 9000 personSalary\\[steve\\] = 12000 personSalary\\[jamie\\] = 15000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>**有一点很重要，当使用 `for range` 遍历 map 时，不保证每次执行程序获取的元素顺序相同。** ## 删除 map 中的元素 删除 `map` 中 `key` 的语法是 [*delete(map, key)*](<a href="https://golang.org/pkg/builtin/#delete" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/builtin/#delete</a>)。这个函数没有返回值。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { personSalary := map\\[string\\]int{ &quot;steve&quot;: 12000, &quot;jamie&quot;: 15000, } personSalary\\[&quot;mike&quot;\\] = 9000 fmt.Println(&quot;map before deletion&quot;, personSalary) delete(personSalary, &quot;steve&quot;) fmt.Println(&quot;map after deletion&quot;, personSalary) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/nroJzeF-a7" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/nroJzeF-a7</a>) 上述程序删除了键 &quot;steve&quot;，输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> map before deletion map\\[steve:12000 jamie:15000 mike:9000\\] map after deletion map\\[mike:9000 jamie:15000\\]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="获取-map-的长度-获取-map-的长度使用-len-https-golang-org-pkg-builtin-len-函数。" tabindex="-1"><a class="header-anchor" href="#获取-map-的长度-获取-map-的长度使用-len-https-golang-org-pkg-builtin-len-函数。"><span>获取 map 的长度 获取 map 的长度使用 [len](<a href="https://golang.org/pkg/builtin/#len" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/builtin/#len</a>) 函数。</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { personSalary := map\\[string\\]int{ &quot;steve&quot;: 12000, &quot;jamie&quot;: 15000, } personSalary\\[&quot;mike&quot;\\] = 9000 fmt.Println(&quot;length is&quot;, len(personSalary)) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/8O1WnKUuDP" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/8O1WnKUuDP</a>) 上述程序中的 *len(personSalary)* 函数获取了 map 的长度。程序输出 `length is 3`。 ## Map 是引用类型 和 [slices](<a href="https://golangbot.com/arrays-and-slices/" target="_blank" rel="noopener noreferrer">https://golangbot.com/arrays-and-slices/</a>) 类似，map 也是引用类型。当 map 被赋值为一个新变量的时候，它们指向同一个内部数据结构。因此，改变其中一个变量，就会影响到另一变量。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { personSalary := map\\[string\\]int{ &quot;steve&quot;: 12000, &quot;jamie&quot;: 15000, } personSalary\\[&quot;mike&quot;\\] = 9000 fmt.Println(&quot;Original person salary&quot;, personSalary) newPersonSalary := personSalary newPersonSalary\\[&quot;mike&quot;\\] = 18000 fmt.Println(&quot;Person salary changed&quot;, personSalary) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/OGFl3addq1" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/OGFl3addq1</a>) 上面程序中的第 14 行，`personSalary` 被赋值给 `newPersonSalary`。下一行 ，`newPersonSalary` 中 `mike` 的薪资变成了 `18000` 。`personSalary` 中 `Mike` 的薪资也会变成 `18000`。程序输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> Original person salary map\\[steve:12000 jamie:15000 mike:9000\\] Person salary changed map\\[steve:12000 jamie:15000 mike:18000\\]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当 map 作为函数参数传递时也会发生同样的情况。函数中对 map 的任何修改，对于外部的调用都是可见的。 ## Map 的相等性 map 之间不能使用 `<mark>` 操作符判断，`</mark>` 只能用来检查 map 是否为 `nil`。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main func main() { map1 := map\\[string\\]int{ &quot;one&quot;: 1, &quot;two&quot;: 2, } map2 := map1 if map1 == map2 { } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/MALqDyWkcT" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/MALqDyWkcT</a>) 上面程序抛出编译错误 **invalid operation: map1 == map2 (map can only be compared to nil)**。 判断两个 map 是否相等的方法是遍历比较两个 map 中的每个元素。我建议你写一段这样的程序实现这个功能 😃。 我在一个程序里实现了我们讨论过的所有概念。你可以从 [github](<a href="https://github.com/golangbot/maps" target="_blank" rel="noopener noreferrer">https://github.com/golangbot/maps</a>) 下载代码。 这就是 map 。谢谢你的阅读。祝好。 **上一教程 - [可变参数函数](<a href="https://studygolang.com/articles/12173" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/12173</a>)** **下一教程 - [字符串](<a href="https://studygolang.com/articles/12261" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/12261</a>)**</p>',39)]))}const d=a(n,[["render",r],["__file","13-Maps.html.vue"]]),g=JSON.parse('{"path":"/golang/%E5%9F%BA%E7%A1%80/13-Maps.html","title":"Go 系列教程 —— 13. Maps","lang":"zh-CN","frontmatter":{"title":"Go 系列教程 —— 13. Maps","source_url":"https://studygolang.com/articles/12251","category":"Go系列教程","description":"欢迎来到 [Golang 系列教程](/subject/2)的第 13 个教程。 ## 什么是 map ？ map 是在 Go 中将值（value）与键（key）关联的内置类型。通过相应的键可以获取到值。 ## 如何创建 map ？ 通过向 `make` 函数传入键和值的类型，可以创建 map。`make(map[type of key]type of...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%9F%BA%E7%A1%80/13-Maps.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"Go 系列教程 —— 13. Maps"}],["meta",{"property":"og:description","content":"欢迎来到 [Golang 系列教程](/subject/2)的第 13 个教程。 ## 什么是 map ？ map 是在 Go 中将值（value）与键（key）关联的内置类型。通过相应的键可以获取到值。 ## 如何创建 map ？ 通过向 `make` 函数传入键和值的类型，可以创建 map。`make(map[type of key]type of..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 系列教程 —— 13. Maps\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[{"level":2,"title":"获取 map 的长度 获取 map 的长度使用 [len](https://golang.org/pkg/builtin/#len) 函数。","slug":"获取-map-的长度-获取-map-的长度使用-len-https-golang-org-pkg-builtin-len-函数。","link":"#获取-map-的长度-获取-map-的长度使用-len-https-golang-org-pkg-builtin-len-函数。","children":[]}],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":5.22,"words":1565},"filePathRelative":"golang/基础/13-Maps.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"<p>欢迎来到 [Golang 系列教程](/subject/2)的第 13 个教程。 ## 什么是 map ？ map 是在 Go 中将值（value）与键（key）关联的内置类型。通过相应的键可以获取到值。 ## 如何创建 map ？ 通过向 `make` 函数传入键和值的类型，可以创建 map。`make(map[type of key]type of value)` 是创建 map 的语法。</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>go personSalary := make(map\\\\[string\\\\]int)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{d as comp,g as data};
