import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o as n}from"./app-DIJDtupu.js";const s={};function r(o,e){return n(),i("div",null,e[0]||(e[0]=[a('<p>欢迎阅读 [Golang 系列教程](/subject/2)第 14 部分。 由于和其他语言相比，字符串在 Go 语言中有着自己特殊的实现，因此在这里需要被特别提出来。 ## 什么是字符串？ Go 语言中的字符串是一个字节切片。把内容放在双引号&quot;&quot;之间，我们可以创建一个字符串。让我们来看一个创建并打印字符串的简单示例。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { name := &quot;Hello World&quot; fmt.Println(name) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/o9OVDgEMU0" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/o9OVDgEMU0</a>) 上面的程序将会输出 `Hello World`。 Go 中的字符串是兼容 Unicode 编码的，并且使用 UTF-8 进行编码。 ## 单独获取字符串的每一个字节 由于字符串是一个字节切片，所以我们可以获取字符串的每一个字节。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func printBytes(s string) { for i:= 0; i &lt; len(s); i++ { fmt.Printf(&quot;%x &quot;, s\\[i\\]) } } func main() { name := &quot;Hello World&quot; printBytes(name) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/XbJO2b0ZDW" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/XbJO2b0ZDW</a>) 上面程序的第 8 行，**`len(s)` 返回字符串中字节的数量**，然后我们用了一个 for 循环以 16 进制的形式打印这些字节。`%x` 格式限定符用于指定 16 进制编码。上面的程序输出 `48 65 6c 6c 6f 20 57 6f 72 6c 64`。这些打印出来的字符是 &quot;Hello World&quot; 以 [Unicode UTF-8 编码](<a href="https://mothereff.in/utf-8#Hello%20World" target="_blank" rel="noopener noreferrer">https://mothereff.in/utf-8#Hello World</a>)的结果。为了更好的理解 go 中的字符串，需要对 Unicode 和 UTF-8 有基础的理解。我推荐阅读一下 来理解一下什么是 Unicode 和 UTF-8。 让我们稍微修改一下上面的程序，让它打印字符串的每一个字符。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func printBytes(s string) { for i:= 0; i &lt; len(s); i++ { fmt.Printf(&quot;%x &quot;, s\\[i\\]) } } func printChars(s string) { for i:= 0; i &lt; len(s); i++ { fmt.Printf(&quot;%c &quot;,s\\[i\\]) } } func main() { name := &quot;Hello World&quot; printBytes(name) fmt.Printf(&quot;\\\\n&quot;) printChars(name) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/Jss0HG1q80" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/Jss0HG1q80</a>) 在 `printChars` 方法(第 16 行中)中，`%c` 格式限定符用于打印字符串的字符。这个程序输出结果是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> 48 65 6c 6c 6f 20 57 6f 72 6c 64 H e l l o W o r l d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面的程序获取字符串的每一个字符，虽然看起来是合法的，但却有一个严重的 bug。让我拆解这个代码来看看我们做错了什么。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func printBytes(s string) { for i:= 0; i &lt; len(s); i++ { fmt.Printf(&quot;%x &quot;, s\\[i\\]) } } func printChars(s string) { for i:= 0; i &lt; len(s); i++ { fmt.Printf(&quot;%c &quot;,s\\[i\\]) } } func main() { name := &quot;Hello World&quot; printBytes(name) fmt.Printf(&quot;\\\\n&quot;) printChars(name) fmt.Printf(&quot;\\\\n&quot;) name = &quot;Señor&quot; printBytes(name) fmt.Printf(&quot;\\\\n&quot;) printChars(name) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/UQOVvRVaFH" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/UQOVvRVaFH</a>) 上面代码输出的结果是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> 48 65 6c 6c 6f 20 57 6f 72 6c 64 H e l l o W o r l d 53 65 c3 b1 6f 72 S e Ã ± o r</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在上面程序的第 28 行，我们尝试输出 **Señor** 的字符，但却输出了错误的 **S e Ã ± o r**。 为什么程序分割 `Hello World` 时表现完美，但分割 `Señor` 就出现了错误呢？这是因为 `ñ` 的 Unicode 代码点（Code Point）是 `U+00F1`。它的 [UTF-8 编码](<a href="https://mothereff.in/utf-8#%C3%B1" target="_blank" rel="noopener noreferrer">https://mothereff.in/utf-8#ñ</a>)占用了 c3 和 b1 两个字节。它的 UTF-8 编码占用了两个字节 c3 和 b1。而我们打印字符时，却假定每个字符的编码只会占用一个字节，这是错误的。在 UTF-8 编码中，一个代码点可能会占用超过一个字节的空间。那么我们该怎么办呢？rune 能帮我们解决这个难题。 ## rune rune 是 Go 语言的内建类型，它也是 int32 的别称。在 Go 语言中，rune 表示一个代码点。代码点无论占用多少个字节，都可以用一个 rune 来表示。让我们修改一下上面的程序，用 rune 来打印字符。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func printBytes(s string) { for i:= 0; i &lt; len(s); i++ { fmt.Printf(&quot;%x &quot;, s\\[i\\]) } } func printChars(s string) { runes := \\[\\]rune(s) for i:= 0; i &lt; len(runes); i++ { fmt.Printf(&quot;%c &quot;,runes\\[i\\]) } } func main() { name := &quot;Hello World&quot; printBytes(name) fmt.Printf(&quot;\\\\n&quot;) printChars(name) fmt.Printf(&quot;\\\\n\\\\n&quot;) name = &quot;Señor&quot; printBytes(name) fmt.Printf(&quot;\\\\n&quot;) printChars(name) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/t4z-f8I-ih" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/t4z-f8I-ih</a>) 在上面代码的第 14 行，字符串被转化为一个 rune 切片。然后我们循环打印字符。程序的输出结果是</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> 48 65 6c 6c 6f 20 57 6f 72 6c 64 H e l l o W o r l d 53 65 c3 b1 6f 72 S e ñ o r</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面的输出结果非常完美，就是我们想要的结果:)。 ## 字符串的 for range 循环 上面的程序是一种遍历字符串的好方法，但是 Go 给我们提供了一种更简单的方法来做到这一点：使用 **for range** 循环。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func printCharsAndBytes(s string) { for index, rune := range s { fmt.Printf(&quot;%c starts at byte %d\\\\n&quot;, rune, index) } } func main() { name := &quot;Señor&quot; printCharsAndBytes(name) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/BPpQ0dZr8W" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/BPpQ0dZr8W</a>) 在上面程序中的第8行，使用 `for range` 循环遍历了字符串。循环返回的是是当前 rune 的字节位置。程序的输出结果为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> S starts at byte 0 e starts at byte 1 ñ starts at byte 2 o starts at byte 4 r starts at byte 5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>从上面的输出中可以清晰的看到 `ñ` 占了两个字节:)。 ## 用字节切片构造字符串</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { byteSlice := \\[\\]byte{0x43, 0x61, 0x66, 0xC3, 0xA9} str := string(byteSlice) fmt.Println(str) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/Vr9pf8X8xO" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/Vr9pf8X8xO</a>) 上面的程序中 `byteSlice` 包含字符串 `Café` 用 UTF-8 编码后的 16 进制字节。程序输出结果是 `Café`。 如果我们把 16 进制换成对应的 10 进制值会怎么样呢？上面的程序还能工作吗？让我们来试一试：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { byteSlice := \\[\\]byte{67, 97, 102, 195, 169}//decimal equivalent of {&#39;\\\\x43&#39;, &#39;\\\\x61&#39;, &#39;\\\\x66&#39;, &#39;\\\\xC3&#39;, &#39;\\\\xA9&#39;} str := string(byteSlice) fmt.Println(str) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/jgsRowW6XN" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/jgsRowW6XN</a>) 上面程序的输出结果也是`Café` ## 用 rune 切片构造字符串</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { runeSlice := \\[\\]rune{0x0053, 0x0065, 0x00f1, 0x006f, 0x0072} str := string(runeSlice) fmt.Println(str) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/m8wTMOpYJP" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/m8wTMOpYJP</a>) 在上面的程序中 `runeSlice` 包含字符串 `Señor`的 16 进制的 Unicode 代码点。这个程序将会输出`Señor`。 ## 字符串的长度 [utf8 package](<a href="https://golang.org/pkg/unicode/utf8/#RuneCountInString" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/unicode/utf8/#RuneCountInString</a>) 包中的 `func RuneCountInString(s string) (n int)` 方法用来获取字符串的长度。这个方法传入一个字符串参数然后返回字符串中的 rune 的数量。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; &quot;unicode/utf8&quot; ) func length(s string) { fmt.Printf(&quot;length of %s is %d\\\\n&quot;, s, utf8.RuneCountInString(s)) } func main() { word1 := &quot;Señor&quot; length(word1) word2 := &quot;Pets&quot; length(word2) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/QGYlHmF7tn" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/QGYlHmF7tn</a>) 上面程序的输出结果是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> length of Señor is 5 length of Pets is 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="字符串是不可变的-go-中的字符串是不可变的。一旦一个字符串被创建-那么它将无法被修改。" tabindex="-1"><a class="header-anchor" href="#字符串是不可变的-go-中的字符串是不可变的。一旦一个字符串被创建-那么它将无法被修改。"><span>字符串是不可变的 Go 中的字符串是不可变的。一旦一个字符串被创建，那么它将无法被修改。</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func mutate(s string)string { s\\[0\\] = &#39;a&#39;//any valid unicode character within single quote is a rune return s } func main() { h := &quot;hello&quot; fmt.Println(mutate(h)) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/bv4SlSd%5C_hp" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/bv4SlSd\\_hp</a>) 在上面程序中的第 8 行，我们试图把这个字符串中的第一个字符修改为 &#39;a&#39;。由于字符串是不可变的，因此这个操作是非法的。所以程序抛出了一个错误 **main.go:8: cannot assign to s\\[0]**。 为了修改字符串，可以把字符串转化为一个 rune 切片。然后这个切片可以进行任何想要的改变，然后再转化为一个字符串。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func mutate(s \\[\\]rune) string { s\\[0\\] = &#39;a&#39; return string(s) } func main() { h := &quot;hello&quot; fmt.Println(mutate(\\[\\]rune(h))) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/GL1cm17IP1" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/GL1cm17IP1</a>) 在上面程序的第 7 行，`mutate` 函数接收一个 rune 切片参数，它将切片的第一个元素修改为 `&#39;a&#39;`，然后将 rune 切片转化为字符串，并返回该字符串。程序的第 13 行调用了该函数。我们把 `h` 转化为一个 rune 切片，并传递给了 `mutate`。这个程序输出 `aello`。 我已经在 github 上创建了一个程序，里面包含所有我们讨论过的内容。你可以在这[下载](<a href="https://github.com/golangbot/stringsexplained" target="_blank" rel="noopener noreferrer">https://github.com/golangbot/stringsexplained</a>)它。 关于字符串的介绍到此为止。祝你愉快。 **上一教程 - [Maps](<a href="https://studygolang.com/articles/12251" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/12251</a>)** **下一教程 - [指针](<a href="https://studygolang.com/articles/12262" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/12262</a>)**</p>',35)]))}const p=t(s,[["render",r],["__file","14-字符串.html.vue"]]),h=JSON.parse('{"path":"/golang/%E5%9F%BA%E7%A1%80/14-%E5%AD%97%E7%AC%A6%E4%B8%B2.html","title":"Go 系列教程 —— 14. 字符串","lang":"zh-CN","frontmatter":{"title":"Go 系列教程 —— 14. 字符串","source_url":"https://studygolang.com/articles/12261","category":"Go系列教程","description":"欢迎阅读 [Golang 系列教程](/subject/2)第 14 部分。 由于和其他语言相比，字符串在 Go 语言中有着自己特殊的实现，因此在这里需要被特别提出来。 ## 什么是字符串？ Go 语言中的字符串是一个字节切片。把内容放在双引号\\"\\"之间，我们可以创建一个字符串。让我们来看一个创建并打印字符串的简单示例。 [在线运行程序](https:/...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%9F%BA%E7%A1%80/14-%E5%AD%97%E7%AC%A6%E4%B8%B2.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"Go 系列教程 —— 14. 字符串"}],["meta",{"property":"og:description","content":"欢迎阅读 [Golang 系列教程](/subject/2)第 14 部分。 由于和其他语言相比，字符串在 Go 语言中有着自己特殊的实现，因此在这里需要被特别提出来。 ## 什么是字符串？ Go 语言中的字符串是一个字节切片。把内容放在双引号\\"\\"之间，我们可以创建一个字符串。让我们来看一个创建并打印字符串的简单示例。 [在线运行程序](https:/..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 系列教程 —— 14. 字符串\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[{"level":2,"title":"字符串是不可变的 Go 中的字符串是不可变的。一旦一个字符串被创建，那么它将无法被修改。","slug":"字符串是不可变的-go-中的字符串是不可变的。一旦一个字符串被创建-那么它将无法被修改。","link":"#字符串是不可变的-go-中的字符串是不可变的。一旦一个字符串被创建-那么它将无法被修改。","children":[]}],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":6.79,"words":2036},"filePathRelative":"golang/基础/14-字符串.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"<p>欢迎阅读 [Golang 系列教程](/subject/2)第 14 部分。 由于和其他语言相比，字符串在 Go 语言中有着自己特殊的实现，因此在这里需要被特别提出来。 ## 什么是字符串？ Go 语言中的字符串是一个字节切片。把内容放在双引号\\"\\"之间，我们可以创建一个字符串。让我们来看一个创建并打印字符串的简单示例。</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>go package main import ( \\"fmt\\" ) func main() { name := \\"Hello World\\" fmt.Println(name) }</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{p as comp,h as data};
