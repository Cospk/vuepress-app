import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as i,o as s}from"./app-DIJDtupu.js";const r={};function l(n,e){return s(),t("div",null,e[0]||(e[0]=[i('<p>欢迎来到 [Golang 系列教程](/subject/2)的第 19 个教程。接口共有两个教程，这是我们第二个教程。如果你还没有阅读前面的教程，请你阅读[接口（一）](<a href="https://studygolang.com/articles/12266" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/12266</a>)。 ### 实现接口：指针接受者与值接受者 在[接口（一）](<a href="https://studygolang.com/articles/12266" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/12266</a>)上的所有示例中，我们都是使用值接受者（Value Receiver）来实现接口的。我们同样可以使用指针接受者（Pointer Receiver）来实现接口。只不过在用指针接受者实现接口时，还有一些细节需要注意。我们通过下面的代码来理解吧。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; type Describer interface { Describe() } type Person struct { name string age int } func (p Person) Describe() { // 使用值接受者实现 fmt.Printf(&quot;%s is %d years old\\\\n&quot;, p.name, p.age) } type Address struct { state string country string } func (a \\*Address) Describe() { // 使用指针接受者实现 fmt.Printf(&quot;State %s Country %s&quot;, a.state, a.country) } func main() { var d1 Describer p1 := Person{&quot;Sam&quot;, 25} d1 = p1 d1.Describe() p2 := Person{&quot;James&quot;, 32} d1 = &amp;p2 d1.Describe() var d2 Describer a := Address{&quot;Washington&quot;, &quot;USA&quot;} /\\* 如果下面一行取消注释会导致编译错误： cannot use a (type Address) as type Describer in assignment: Address does not implement Describer (Describe method has pointer receiver) \\*/ //d2 = a d2 = &amp;a // 这是合法的 // 因为在第 22 行，Address 类型的指针实现了 Describer 接口 d2.Describe() }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/IzspYiAQ82" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/IzspYiAQ82</a>) 在上面程序中的第 13 行，结构体 `Person` 使用值接受者，实现了 `Describer` 接口。 我们在讨论[方法](<a href="https://studygolang.com/articles/12264" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/12264</a>)的时候就已经提到过，使用值接受者声明的方法，既可以用值来调用，也能用指针调用。**不管是一个值，还是一个可以解引用的指针，调用这样的方法都是合法的**。 `p1` 的类型是 `Person`，在第 29 行，`p1` 赋值给了 `d1`。由于 `Person` 实现了接口变量 `d1`，因此在第 30 行，会打印 `Sam is 25 years old`。 接下来在第 32 行，`d1` 又赋值为 `&amp;p2`，在第 33 行同样打印输出了 `James is 32 years old`。棒棒哒。😃 在 22 行，结构体 `Address` 使用指针接受者实现了 `Describer` 接口。 在上面程序里，如果去掉第 45 行的注释，我们会得到编译错误：`main.go:42: cannot use a (type Address) as type Describer in assignment: Address does not implement Describer (Describe method has pointer receiver)`。这是因为在第 22 行，我们使用 `Address` 类型的指针接受者实现了接口 `Describer`，而接下来我们试图用 `a` 来赋值 `d2`。然而 `a` 属于值类型，它并没有实现 `Describer` 接口。你应该会很惊讶，因为我们曾经学习过，使用指针接受者的[方法](<a href="https://studygolang.com/articles/12264" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/12264</a>)，无论指针还是值都可以调用它。那么为什么第 45 行的代码就不管用呢？ **其原因是：对于使用指针接受者的方法，用一个指针或者一个可取得地址的值来调用都是合法的。但接口中存储的具体值（Concrete Value）并不能取到地址，因此在第 45 行，对于编译器无法自动获取 `a` 的地址，于是程序报错**。 第 47 行就可以成功运行，因为我们将 `a` 的地址 `&amp;a` 赋值给了 `d2`。 程序的其他部分不言而喻。该程序会打印：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> Sam is 25 years old James is 32 years old State Washington Country USA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="实现多个接口-类型可以实现多个接口。我们看看下面程序是如何做到的。" tabindex="-1"><a class="header-anchor" href="#实现多个接口-类型可以实现多个接口。我们看看下面程序是如何做到的。"><span>实现多个接口 类型可以实现多个接口。我们看看下面程序是如何做到的。</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) type SalaryCalculator interface { DisplaySalary() } type LeaveCalculator interface { CalculateLeavesLeft() int } type Employee struct { firstName string lastName string basicPay int pf int totalLeaves int leavesTaken int } func (e Employee) DisplaySalary() { fmt.Printf(&quot;%s %s has salary $%d&quot;, e.firstName, e.lastName, (e.basicPay + e.pf)) } func (e Employee) CalculateLeavesLeft() int { return e.totalLeaves - e.leavesTaken } func main() { e := Employee { firstName: &quot;Naveen&quot;, lastName: &quot;Ramanathan&quot;, basicPay: 5000, pf: 200, totalLeaves: 30, leavesTaken: 5, } var s SalaryCalculator = e s.DisplaySalary() var l LeaveCalculator = e fmt.Println(&quot;\\\\nLeaves left =&quot;, l.CalculateLeavesLeft()) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/DJxS5zxBcV" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/DJxS5zxBcV</a>) 上述程序在第 7 行和第 11 行分别声明了两个接口：`SalaryCalculator` 和 `LeaveCalculator`。 第 15 行定义了结构体 `Employee`，它在第 24 行实现了 `SalaryCalculator` 接口的 `DisplaySalary` 方法，接着在第 28 行又实现了 `LeaveCalculator` 接口里的 `CalculateLeavesLeft` 方法。于是 `Employee` 就实现了 `SalaryCalculator` 和 `LeaveCalculator` 两个接口。 第 41 行，我们把 `e` 赋值给了 `SalaryCalculator` 类型的接口变量 ，而在 43 行，我们同样把 `e` 赋值给 `LeaveCalculator` 类型的接口变量 。由于 `e` 的类型 `Employee` 实现了 `SalaryCalculator` 和 `LeaveCalculator` 两个接口，因此这是合法的。 该程序会输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> Naveen Ramanathan has salary $5200 Leaves left = 25</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="接口的嵌套-尽管-go-语言没有提供继承机制-但可以通过嵌套其他的接口-创建一个新接口。-我们来看看这如何实现。" tabindex="-1"><a class="header-anchor" href="#接口的嵌套-尽管-go-语言没有提供继承机制-但可以通过嵌套其他的接口-创建一个新接口。-我们来看看这如何实现。"><span>接口的嵌套 尽管 Go 语言没有提供继承机制，但可以通过嵌套其他的接口，创建一个新接口。 我们来看看这如何实现。</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) type SalaryCalculator interface { DisplaySalary() } type LeaveCalculator interface { CalculateLeavesLeft() int } type EmployeeOperations interface { SalaryCalculator LeaveCalculator } type Employee struct { firstName string lastName string basicPay int pf int totalLeaves int leavesTaken int } func (e Employee) DisplaySalary() { fmt.Printf(&quot;%s %s has salary $%d&quot;, e.firstName, e.lastName, (e.basicPay + e.pf)) } func (e Employee) CalculateLeavesLeft() int { return e.totalLeaves - e.leavesTaken } func main() { e := Employee { firstName: &quot;Naveen&quot;, lastName: &quot;Ramanathan&quot;, basicPay: 5000, pf: 200, totalLeaves: 30, leavesTaken: 5, } var empOp EmployeeOperations = e empOp.DisplaySalary() fmt.Println(&quot;\\\\nLeaves left =&quot;, empOp.CalculateLeavesLeft()) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/Hia7D-WbZp" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/Hia7D-WbZp</a>) 在上述程序的第 15 行，我们创建了一个新的接口 `EmployeeOperations`，它嵌套了两个接口：`SalaryCalculator` 和 `LeaveCalculator`。 如果一个类型定义了 `SalaryCalculator` 和 `LeaveCalculator` 接口里包含的方法，我们就称该类型实现了 `EmployeeOperations` 接口。 在第 29 行和第 33 行，由于 `Employee` 结构体定义了 `DisplaySalary` 和 `CalculateLeavesLeft` 方法，因此它实现了接口 `EmployeeOperations`。 在 46 行，`empOp` 的类型是 `EmployeeOperations`，`e` 的类型是 `Employee`，我们把 `empOp` 赋值为 `e`。接下来的两行，`empOp` 调用了 `DisplaySalary()` 和 `CalculateLeavesLeft()` 方法。 该程序输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> Naveen Ramanathan has salary $5200 Leaves left = 25</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="接口的零值-接口的零值是-nil-。对于值为-nil-的接口-其底层值-underlying-value-和具体类型-concrete-type-都为-nil-。" tabindex="-1"><a class="header-anchor" href="#接口的零值-接口的零值是-nil-。对于值为-nil-的接口-其底层值-underlying-value-和具体类型-concrete-type-都为-nil-。"><span>接口的零值 接口的零值是 `nil`。对于值为 `nil` 的接口，其底层值（Underlying Value）和具体类型（Concrete Type）都为 `nil`。</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; type Describer interface { Describe() } func main() { var d1 Describer if d1 == nil { fmt.Printf(&quot;d1 is nil and has type %T value %v\\\\n&quot;, d1, d1) } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/vwYHC6Y78H" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/vwYHC6Y78H</a>) 上面程序里的 `d1` 等于 `nil`，程序会输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> d1 is nil and has type value</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对于值为 `nil` 的接口，由于没有底层值和具体类型，当我们试图调用它的方法时，程序会产生 `panic` 异常。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main type Describer interface { Describe() } func main() { var d1 Describer d1.Describe() }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/rM-rY0uGTI" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/rM-rY0uGTI</a>) 在上述程序中，`d1` 等于 `nil`，程序产生运行时错误 `panic`： **`panic: runtime error: invalid memory address or nil pointer dereference [signal SIGSEGV: segmentation violation code=0xffffffff addr=0x0 pc=0xc8527]`** 。 接口的介绍到此结束。祝你愉快。 **上一教程 - [接口 - I](<a href="https://studygolang.com/articles/12266" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/12266</a>)** **下一教程 - [并发入门](<a href="https://studygolang.com/articles/12341" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/12341</a>)**</p>',19)]))}const c=a(r,[["render",l],["__file","19-接口.html.vue"]]),d=JSON.parse('{"path":"/golang/%E5%9F%BA%E7%A1%80/19-%E6%8E%A5%E5%8F%A3.html","title":"Go 系列教程 —— 19. 接口（二）","lang":"zh-CN","frontmatter":{"title":"Go 系列教程 —— 19. 接口（二）","source_url":"https://studygolang.com/articles/12325","category":"Go系列教程","description":"欢迎来到 [Golang 系列教程](/subject/2)的第 19 个教程。接口共有两个教程，这是我们第二个教程。如果你还没有阅读前面的教程，请你阅读[接口（一）](https://studygolang.com/articles/12266)。 ### 实现接口：指针接受者与值接受者 在[接口（一）](https://studygolang.co...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%9F%BA%E7%A1%80/19-%E6%8E%A5%E5%8F%A3.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"Go 系列教程 —— 19. 接口（二）"}],["meta",{"property":"og:description","content":"欢迎来到 [Golang 系列教程](/subject/2)的第 19 个教程。接口共有两个教程，这是我们第二个教程。如果你还没有阅读前面的教程，请你阅读[接口（一）](https://studygolang.com/articles/12266)。 ### 实现接口：指针接受者与值接受者 在[接口（一）](https://studygolang.co..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 系列教程 —— 19. 接口（二）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[{"level":3,"title":"实现多个接口 类型可以实现多个接口。我们看看下面程序是如何做到的。","slug":"实现多个接口-类型可以实现多个接口。我们看看下面程序是如何做到的。","link":"#实现多个接口-类型可以实现多个接口。我们看看下面程序是如何做到的。","children":[]},{"level":3,"title":"接口的嵌套 尽管 Go 语言没有提供继承机制，但可以通过嵌套其他的接口，创建一个新接口。 我们来看看这如何实现。","slug":"接口的嵌套-尽管-go-语言没有提供继承机制-但可以通过嵌套其他的接口-创建一个新接口。-我们来看看这如何实现。","link":"#接口的嵌套-尽管-go-语言没有提供继承机制-但可以通过嵌套其他的接口-创建一个新接口。-我们来看看这如何实现。","children":[]},{"level":3,"title":"接口的零值 接口的零值是 `nil`。对于值为 `nil` 的接口，其底层值（Underlying Value）和具体类型（Concrete Type）都为 `nil`。","slug":"接口的零值-接口的零值是-nil-。对于值为-nil-的接口-其底层值-underlying-value-和具体类型-concrete-type-都为-nil-。","link":"#接口的零值-接口的零值是-nil-。对于值为-nil-的接口-其底层值-underlying-value-和具体类型-concrete-type-都为-nil-。","children":[]}],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":5.45,"words":1634},"filePathRelative":"golang/基础/19-接口.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"<p>欢迎来到 [Golang 系列教程](/subject/2)的第 19 个教程。接口共有两个教程，这是我们第二个教程。如果你还没有阅读前面的教程，请你阅读[接口（一）](<a href=\\"https://studygolang.com/articles/12266\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://studygolang.com/articles/12266</a>)。 ### 实现接口：指针接受者与值接受者 在[接口（一）](<a href=\\"https://studygolang.com/articles/12266\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://studygolang.com/articles/12266</a>)上的所有示例中，我们都是使用值接受者（Value Receiver）来实现接口的。我们同样可以使用指针接受者（Pointer Receiver）来实现接口。只不过在用指针接受者实现接口时，还有一些细节需要注意。我们通过下面的代码来理解吧。</p>"}');export{c as comp,d as data};
