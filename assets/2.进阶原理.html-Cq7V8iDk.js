import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as l}from"./app-DnV93lOH.js";const t={};function h(e,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h2 id="面试流程" tabindex="-1"><a class="header-anchor" href="#面试流程"><span>面试流程：</span></a></h2><ol><li>自我介绍</li><li><strong>聊几道基础八股文⭐</strong></li><li><strong>聊聊项目和进阶八股文</strong>🌟</li><li>场景设计题</li><li>写两道代码题</li></ol><p>判断是否有戏：</p><ol><li><p>判断面试时间：若是10来分钟直接写代码了，大概率是不满意不想继续聊了</p></li><li><p>提问：快结束时候，面试官会问有什么想问的？可以提问下面一些问题</p><p>岗位工作内容<br> 进去具体做啥</p><p>用什么技术栈</p><p>若是面试官详细介绍了，或者说招你进去安排哪些工作就很有机会；若是敷衍几句就不用报太大希望了</p></li></ol><h1 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法"><span>基础语法</span></a></h1><blockquote><p>语言特点、数据类型及其特点、类型转换</p></blockquote><h2 id="语言基础" tabindex="-1"><a class="header-anchor" href="#语言基础"><span>语言基础</span></a></h2><ol><li>go语言的特性，对比其他语言有上面优势？</li><li>go开发需要注意什么？</li><li>go的数据类型是怎么样的？</li><li></li></ol><h3 id="与其他语言相比-使用-go-有什么好处" tabindex="-1"><a class="header-anchor" href="#与其他语言相比-使用-go-有什么好处"><span>与其他语⾔相⽐，使⽤ Go 有什么好处？</span></a></h3><ul><li>与其他作为学术实验开始的语⾔不同，Go 代码的设计是务实的。每个功能和语法决策都旨在让程序员的⽣活更轻松</li><li>Golang 针对并发进⾏了优化，并且在规模上运⾏良好</li><li>由于单⼀的标准代码格式，Golang 通常被认为⽐其他语⾔更具可读性。</li><li>⾃动垃圾收集明显⽐ Java 或 Python 更有效，因为它与程序同时执⾏。</li></ul><h3 id="golang开发新手常犯的50个错误" tabindex="-1"><a class="header-anchor" href="#golang开发新手常犯的50个错误"><span>Golang开发新⼿常犯的50个错误</span></a></h3><p>博客地址：<a href="https://blog.csdn.net/gezhonglei2007/article/details/52237582" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/gezhonglei2007/article/details/52237582</a></p><h3 id="golang-使用什么数据类型" tabindex="-1"><a class="header-anchor" href="#golang-使用什么数据类型"><span>Golang 使⽤什么数据类型？</span></a></h3><p>Golang 使⽤以下类型：</p><ul><li>String</li><li>int、float、double</li><li>Boolean</li><li>Array</li><li>Slice</li><li>Map</li><li>Struct</li><li>Channel</li><li>Pointer</li><li>Method</li><li>Function</li><li>Interface</li></ul><h3 id="go-程序中的包是什么" tabindex="-1"><a class="header-anchor" href="#go-程序中的包是什么"><span>Go 程序中的包是什么？</span></a></h3><p>包 ( <strong>pkg</strong> ) 是 Go ⼯作区中包含 Go 源⽂件或其他包的⽬录。源⽂件中的每个函数、变量和类型都存储在链接包中。每个 Go 源⽂件都属于⼀个包，该包在⽂件顶部使⽤以下命令声明：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">packagename</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>您可以使⽤以下⽅法导⼊和导出包以重⽤导出的函数或类型：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">packagename</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="变量大小写的区别" tabindex="-1"><a class="header-anchor" href="#变量大小写的区别"><span>变量大小写的区别</span></a></h3><blockquote><p>变量首字母大写是public，全局访问</p><p>变量首字母小写是private，只能包内访问</p></blockquote><p>注意：</p><p>我们在定义结构体需要映射的时候必须首字母大写，否则得不到反射信息，无法转为我们需要的类型</p><h3 id="go语言中的值类型和引用类型" tabindex="-1"><a class="header-anchor" href="#go语言中的值类型和引用类型"><span>go语言中的值类型和引用类型</span></a></h3><blockquote><p>值类型和引用类型分别有哪些，这个在拷贝赋值有一个深拷贝和浅拷贝问题，初始化方式和使用的问题，数据底层数据结构情况，内存分配。实际使用时候会在new和make函数中需要考虑</p></blockquote><h4 id="值类型" tabindex="-1"><a class="header-anchor" href="#值类型"><span>值类型</span></a></h4><p>一般是一些<strong>基本数据类型</strong>，然后<strong>传递赋值是直接拷贝数据即深拷贝</strong>，原对象和新对象<strong>不是同一个内存地址</strong>，各自独立</p><p>未初始化时总有零值（go默认提供），不存在nil</p><h4 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型"><span>引用类型</span></a></h4><p>数据类型<strong>底层的话都会使用到指针</strong>，如切片，map，chan等等。传递赋值只是<strong>复制引用（指针）即浅拷贝</strong>，<strong>共享底层数据</strong>，修改这个会影响其他引用</p><p>未初始化时为nil，表示无效引用，需要初始化后才能使用</p><table><thead><tr><th style="text-align:center;"><strong>特性</strong></th><th style="text-align:left;"><strong>值类型</strong></th><th style="text-align:left;"><strong>引用类型</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>赋值或传参</strong></td><td style="text-align:left;">数据复制，彼此独立</td><td style="text-align:left;">共享底层数据，互相影响</td></tr><tr><td style="text-align:center;"><strong>内存分配</strong></td><td style="text-align:left;">数据存储在栈或堆上</td><td style="text-align:left;">引用存储在栈上，数据存储在堆上</td></tr><tr><td style="text-align:center;"><strong>常见类型</strong></td><td style="text-align:left;">基本类型（<code>int</code>、<code>float</code> 等）、数组、结构体</td><td style="text-align:left;">切片、映射、通道、接口</td></tr></tbody></table><h2 id="高级语法" tabindex="-1"><a class="header-anchor" href="#高级语法"><span>高级语法</span></a></h2><ol><li>实例对象中，make和new的区别是什么？</li><li>channel使用需要注意什么？</li><li>Map的底层实现</li><li>编程题中的string的一般用法</li></ol><h3 id="new和make有什么区别" tabindex="-1"><a class="header-anchor" href="#new和make有什么区别"><span>new和make有什么区别？</span></a></h3><h4 id="new函数" tabindex="-1"><a class="header-anchor" href="#new函数"><span>new函数</span></a></h4><p>适用所有类型，仅对数据类型<strong>分配内存空间，不进行初始化</strong>；<strong>返回</strong>这个内存的<strong>指针</strong>。</p><p>区别：值类型go默认提供零值可直接使用，引用类型没有初始化返回的指针为nil不能直接使用</p><p>注意：引用类型使用new不能直接使用会报错</p><h4 id="make函数" tabindex="-1"><a class="header-anchor" href="#make函数"><span>make函数</span></a></h4><p>仅用于引用类型，进行<strong>分配内存并完成初始化</strong>操作（初始化底层数据结构），<strong>返回的是</strong>引用类型的<strong>实例</strong></p><p>注意：值类型不能使用make函数编译会报错</p><h3 id="引用类型如切片-nil切片和空切片有什么不一样" tabindex="-1"><a class="header-anchor" href="#引用类型如切片-nil切片和空切片有什么不一样"><span>引用类型如切片，nil切片和空切片有什么不一样？</span></a></h3><p>nil切片和空切片两者指向内存地址是不一样的</p><ul><li>nil切片：引用数组的指针是<strong>nil（无指向任何实际地址，不可用）</strong></li><li>空切片：引用的数组指针地址是有的，且所有的空切片指向的是同一个地址（特殊的共享内存地址）</li></ul><h3 id="channel的使用注意" tabindex="-1"><a class="header-anchor" href="#channel的使用注意"><span>channel的使用注意</span></a></h3><p>说到channel就需要了解设计它是干嘛的？有什么特性？</p><p>go经典一句话：不用共享内存来通信，要通过通信来共享内存。这句话也意味着channel是为了解决协程间的通信问题，类似于管道，channel也是并发安全的（由于它的收发数据都是原子性的）</p><p>特性</p><ol><li><p>无缓冲：发送和接收操作是同步的，两者必须同步进行</p></li><li><p>有缓冲：可指定缓冲大小。缓冲满了，发送操作阻塞；缓冲为空，接收操作阻塞</p></li><li><p>给一个nil的channel发送或接收数据，都会造成永久阻塞，进行关闭操作会直接panic</p></li><li><p>给关闭的channel发送数据，会引起panic</p></li><li><p>从已经关闭的channel读取数据，缓冲区为空返回一个零值，有值则正常返回</p></li></ol><h3 id="map的实现" tabindex="-1"><a class="header-anchor" href="#map的实现"><span>map的实现</span></a></h3><p>map底层是一个散列表，主要是两个结构体hamp和bmap</p><h3 id="处理字符串" tabindex="-1"><a class="header-anchor" href="#处理字符串"><span>处理字符串</span></a></h3><blockquote><p>问题1：字符串转byte数组会发生内存拷贝吗？</p><p>问题2：处理字符串包含中文怎么办？</p></blockquote><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 问题1 ：严格来说发生类型强转都会发生内存拷贝，但是频繁内存拷贝又有性能问题--解决：使用unsafe包转两者的底层数据类型</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// --------------------------------------------------------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 问题2：处理中文需要使用到 rune 关键字（底层是int32），rune表示范围更大</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> reverse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">s</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) []</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rune</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tem</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rune</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  		tem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> 	return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tem</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这个问题直接for range 遍历字符串也是转为[]rune切片，</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="原理部分" tabindex="-1"><a class="header-anchor" href="#原理部分"><span>原理部分</span></a></h1><blockquote><p>垃圾回收（CG的三色标记和读写屏障）、并发模型（协程、waitgroup、context）、GMP模型、常用数据结构底层原理（map、slice）、并发安全、锁</p></blockquote><h2 id="_1、协程" tabindex="-1"><a class="header-anchor" href="#_1、协程"><span>1、🌟协程</span></a></h2><ol><li>协程是什么？</li><li>协程与线程进程区别是什么？</li><li>协程之间的通讯是怎么样的？</li><li>协程调度的GMP模型是怎么样的？</li></ol><h3 id="什么是-goroutine-你如何停止它" tabindex="-1"><a class="header-anchor" href="#什么是-goroutine-你如何停止它"><span>什么是 Goroutine？你如何停⽌它？</span></a></h3><p>一个goroutine是一个函数或者方法，是实现并行计算的核心，通过函数方法前加<code>go</code>关键字启动协程</p><p>协程有自己的寄存器上下文和栈，协程调度切换是有runtime控制的，而且创建和切换成本很低</p><p>goroutine即协程 拥有强大的并发实现是通过GMP调度模型实现的</p><p>需要停止一个协程需要向协程发送一个信号</p><h3 id="协程与线程的区别" tabindex="-1"><a class="header-anchor" href="#协程与线程的区别"><span>协程与线程的区别？</span></a></h3><ul><li>调度 <ul><li>线程由操作系统参与调度，抢占式。</li><li>协程是由go运行时调度，协作式</li></ul></li><li>开销 <ul><li>线程不管在内存、创建还是调度上面开销都是很大的，其中栈的大小通常是1MB，成本是很高的</li><li>协程在上面的开销很低，栈的大小初始只有2KB，可轻松处理上千个协程，结合GMP调度模型使得并发效率更高</li></ul></li><li>通信方式 <ul><li>线程的通信方式是通过共享内存</li><li>协程通过channel进行通信，简洁高效</li></ul></li></ul><p>由于线程的调度和管理高度依赖与操作系统，为此可移植性差，而协程是由go运行时管理，为此go开发就无需关系操作系统实现，可移植性更好</p><h3 id="gmp模型" tabindex="-1"><a class="header-anchor" href="#gmp模型"><span>GMP模型</span></a></h3><figure><img src="https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/GMP_modle.png" alt="GMP" tabindex="0" loading="lazy"><figcaption>GMP</figcaption></figure><p>GMP调度模型三个重要结构G、M、P</p><ul><li>G：代表一个goroutine</li><li>M：代表内核级的线程</li><li>P：运行时的一个调度单位，维护一个G的本地队列用于管理和分配G到M上运行</li></ul><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h4><ul><li><p><code>调度流程</code></p><ul><li><p>当创建一个G，会被放入某一个P的本地队列中，本地队列满了就会放入到全局队列</p></li><li><p>每一个M绑定一个P。M会从P的本地队列获取G来执行</p></li><li><p>M执行完G后，发现P的本地队列为空，优先会从全局队列获取否则从其他P的本地队列窃取一半的G来运行（这种机制叫<strong>工作窃取</strong>，保证负载均衡）</p></li></ul></li><li><p><code>P的数量与M的数量</code></p><ul><li>P的数量由GOMAXPROCS控制，默认会根据CPU核心数决定P和M的数量，可以收到设置runtime.GOMAXPROCS(n)调节并发数量，数量固定的（最大并发度），多个P是为了更好利用多核CPU的性能</li><li>M的数量是动态调整的，根据需要动态调整</li><li>N:M 即使只有少数的M依旧可以处理大量的并发任务</li></ul></li></ul><p>优点</p><ol><li>高效的并发模型：协程+工作窃取，最大限度提高CPU利用率，避免线程切换的开销</li><li>低开销：使用协程，极低的上下文切换成本使得可以处理大量的并发任务</li><li>易于使用：协程+channel提供简易的并发模型</li></ol><p>优化考虑：极端并发场景要合理设置GOMAXPROCS、合理控制协程的数量</p><h2 id="_2、并发" tabindex="-1"><a class="header-anchor" href="#_2、并发"><span>2、🌟并发</span></a></h2><ol><li>常用的三个并发模型是哪些？--channel、waitgroup、context</li></ol><h3 id="channel通知-实现并发控制" tabindex="-1"><a class="header-anchor" href="#channel通知-实现并发控制"><span>Channel通知 实现并发控制</span></a></h3><p>特点：</p><ul><li>可以通过无缓冲的channel 控制并发顺序</li><li>可以通过有缓冲的 channel 限制并发任务的数量</li></ul><p>无缓冲通道也称为同步通道，发送方的协程和接收方的协程必须是同步，可解决两个协程执行先后顺序</p><h3 id="waitgroup-实现并发控制" tabindex="-1"><a class="header-anchor" href="#waitgroup-实现并发控制"><span>WaitGroup 实现并发控制</span></a></h3><p>特点：</p><ul><li>WaitGroup可用于等待一组协程完成任务</li><li><code>Add</code> 增加任务数量，<code>Done</code> 表示任务完成，<code>Wait</code> 阻塞直到所有任务完成。</li></ul><p>可解决控制一组协程同时完成任务，在批量任务的处理应用</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 举例：交替打印奇偶数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> printNum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 定义两个信号量控制循序                       </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    evenCh</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}) </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    oddCh</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  :=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{})</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 定义一个waitgroup控制两个协程完成后一起退出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> wg</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">WaitGroup</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    wg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 1、奇数协程</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    go</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        defer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> wg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> range</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;奇数协程：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                evenCh</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}{}  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 向evenCh传一个空对象，让偶协程执行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">                &lt;-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> oddCh</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              // 向oddCh 读取，阻塞到这里知道，偶协程传递信号过来</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 2、偶数协程</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    go</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        defer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> wg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> range</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                evenCh</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;偶数协程：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                oddCh</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}{}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    wg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>Context</span></a></h3><p>特点：</p><ul><li><code>context.Context</code> 用于管理 goroutines 的生命周期，特别适用于需要取消操作或传递元数据的场景。</li><li>提供了超时控制、取消信号和上下文数据传递功能。</li></ul><p>上面两个可应用在大部分场景下，但是在web并发下不好处理了（每个请求开启一个协程处理，这个协程可能又会开启其他协程，如数据库或rpc服务等等），我们就需要可跟踪的协程的方案</p><p>context上下文可以处理子孙的协程，</p><img src="https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/go_context_Struct.png" alt="image-20250102142501297" style="zoom:50%;"><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在父协程中创建一些协程时候创建一些参数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// WithValue 传递参数：原来的上下文附加上键值对，然后创建新的上下文</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WithValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">parent</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">val</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// WithCancel 设置取消信号</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WithCancel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">parent</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ctx</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">cancel</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CancelFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// WithDeadline 设置cancel时间点</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WithDeadline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">parent</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">d</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CancelFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// WithTimeout 设置超时时间</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WithTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">parent</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">timeout</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CancelFunc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Context 的一些接口也就是我们一般在子协程会根据上下文调用的方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Context</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// Deadline 设置context cancel的时间</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		Deadline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">deadline</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ok</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// Done 关闭或者超时，channel会有一个取消信号</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		Done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">chan</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// Err 执行done方法后返回一个取消原因</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		Err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">error</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// Value 上下文对象携带并发安全的数据</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		Value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 其他框架中的context（如gin会自己实现一个功能更强大的contex）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">比如传递参数会使用锁</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">map实现存储并传递参数到子协程中去使用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、内存" tabindex="-1"><a class="header-anchor" href="#_3、内存"><span>3、⭐内存</span></a></h2><ol><li>内存逃逸是什么？怎么避免内存逃逸？</li><li>垃圾回收机制是怎么样的？（三色标记法）</li><li>性能分析</li><li>内存对齐</li></ol><h3 id="内存逃逸是什么-会有什么影响" tabindex="-1"><a class="header-anchor" href="#内存逃逸是什么-会有什么影响"><span>内存逃逸是什么？会有什么影响？</span></a></h3><p>内存逃逸是指：变量或者对象超出了原本的范围内，导致它被分配在堆内存上了，后面由GC负责回收</p><p>正常的局部变量是分配在栈内存，变量会随着函数执行结束后释放内存</p><p><strong>内存逃逸场景</strong></p><ol><li><p><strong>变量的地址被返回或者传递到外部函数</strong></p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createSlice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() []</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    s</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// s 是局部变量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              // s 的地址被返回，生命周期超出了当前函数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>在闭包场景下</strong></p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        x</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // x 是局部变量</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        f</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 闭包引用了 x</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// x 的生命周期超出了它所在的作用域，因此需要逃逸到堆</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>切片或map作为函数参数</p></li></ol><p>内存逃逸让变量或对象从栈内存变成堆内存，会导致GC的压力增加，降低性能，如是大量的GC会导致CPU毛刺（瞬间飙升很高）</p><h3 id="怎么分析内存逃逸-以及优化" tabindex="-1"><a class="header-anchor" href="#怎么分析内存逃逸-以及优化"><span>怎么分析内存逃逸？以及优化</span></a></h3><p>Go编译器有内制动额逃逸分析器，使用命令进行逃逸分析：<code>go run -gcflags=-m file.go</code>编译器会自动执行并标记哪些变量需要逃逸到堆上，这个命令会给出逃逸分析报告</p><p><strong>怎么才能避免呢？</strong></p><p>本质就是：尽量将变量分配到栈上</p><ol><li><p>尽量避免返回局部变量的地址</p></li><li><p>函数传参：传值会拷贝整个对象，传指针只会拷贝指针地址，可减少值拷贝，但是会导致内存逃逸，增加GC的压力<br> 特别是在对象频繁创建和删除的场景下，传递指针会导致GC开销严重影响性能，</p><p>一般情况下，需要修改对象值，或者占用内存较大的结构体，选择传指针。对于只读的占用内存小的结构体直接传值会更好</p></li></ol><h3 id="gc原理-三色标记-增量式标记清除" tabindex="-1"><a class="header-anchor" href="#gc原理-三色标记-增量式标记清除"><span>GC原理--三色标记+增量式标记清除</span></a></h3><h4 id="三色标记" tabindex="-1"><a class="header-anchor" href="#三色标记"><span>三色标记</span></a></h4><blockquote><p>大致的过程：首先将所有的对象放入白色集合。</p><p>1、从根节点遍历对象，遍历到的放入到灰色集合。（最终是进入黑色，暂时放入黑色是为了查它所有引用的对象）</p><p>2、遍历灰色集合的对象所引用到的白色对象放入到灰色，然后将遍历过的灰色对象放入黑色对象</p><p>3、循环步骤2，直到灰色集合为空</p><p>结束：剩下的白色就是垃圾，进行回收</p></blockquote><p>白色：不可达即垃圾</p><p>灰色：可能是垃圾</p><p>黑色：不是垃圾</p><h4 id="并发标记与增量式标记" tabindex="-1"><a class="header-anchor" href="#并发标记与增量式标记"><span>并发标记与增量式标记</span></a></h4><p>标记和应用程序的执行是并行执行的，有点减少停顿时间，标记工作分成多个小的增量任务避免长时间阻塞</p><p>虽然是通过并发方式但是任然需要stw来暂停程序的执行保证标记的正确性</p><h4 id="分代收集" tabindex="-1"><a class="header-anchor" href="#分代收集"><span>分代收集</span></a></h4><p>Go的垃圾回收器通过分代收集来优化回收过程</p><p>对于年轻代，新分配的对象，这些一般存活时间短，更可能是垃圾</p><p>对于老年代，已经存活一段时间的对象，更可能长时间存在</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>GC的控制方式<br> 被动：环境变量GOGC控制，当栈内存增长到触发的阈值，就会触发，GOGC表示触发频率</p><p>主动：可代码上手动触发runtime.GC() ，但是这样做法不推荐。 （runtime.ReadMemStats()可获取内存使用和GC相关信息）</p></div><h3 id="内存对齐" tabindex="-1"><a class="header-anchor" href="#内存对齐"><span>内存对齐</span></a></h3><blockquote><p>go编译会自动内存对齐，为此结构体类型需要注意内存对齐，合理的顺序可减少内存浪费</p></blockquote><p><strong>CPU访问内存时，并不是逐字节访问，而是以机器字长为单位访问。</strong>（如64位的CPU一次都是读取8字节，还有没有对齐可能会触发总线错误）内存对齐可以提高内存读写性能，也方便实现原子性操作（类型若是被拆开就需要多次读写）</p><p>Go编译器会<strong>自动根据规则进行内存对齐但不进行优化</strong>（即不改变顺序），为此我们只要了解规则进行合理安排类型的顺序即可</p><p>合适的内存对齐可以提高内存访问效率，减少程序运行时间。go编译时候会自动处理内存对齐</p><p>对齐规则（插入填充字节实现空间换时间）：</p><ul><li><p>对齐规则：Go会根据每个类型大小确定对齐方式（大小的倍数）</p><p><code>bool</code>：1字节</p><p><code>int N、uint N、float N</code>：通常按照 N/8 字节对齐</p><p><code>int、map、chan、func、*T</code>：1字（根据<strong>机器字长</strong>）</p><p><code>string</code>：2字（数据长度）</p><p><code>[]T</code>:3字（数据、长度、容量）</p><p><code>interface</code>:2字（类型、值）</p></li><li><p>根据实际机器字长判断：32位最大是4字节、64位是8字节</p></li></ul><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 不进行合理排序：占用 32 个字节</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> person</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	hasMoney</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 1 个字节</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     string</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 16 个字节</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	age</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      int16</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 2 个字节</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 进行合理的排序：占用24字节</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> person</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     string</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 16 个字节</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	age</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      int16</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 2 个字节</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	hasMoney</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 1 个字节</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、锁" tabindex="-1"><a class="header-anchor" href="#_4、锁"><span>4、锁</span></a></h2><ol><li>互斥锁</li><li>读写锁</li><li>sync.map的安全锁</li></ol><h3 id="互斥锁" tabindex="-1"><a class="header-anchor" href="#互斥锁"><span>互斥锁</span></a></h3><p>在Go并发程序对共享资源进行控制访问的手段，如并发操作非并发安全的map就要用mutex加锁</p><p>用法也简单，只提供两个方法：加锁（Lock）和解锁（Unlock）</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 1、声明一个互斥锁</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mu</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Mutex</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	m</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> wg</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">WaitGroup</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		wg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		go</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">			defer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">				wg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			}()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">			mu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 写入前加锁</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">			m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 对 Map 进行并发写入</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">			mu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 写入完成解锁</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		}(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	wg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Map size = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">m</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读写锁" tabindex="-1"><a class="header-anchor" href="#读写锁"><span>读写锁</span></a></h3><p>读写锁是针对读写操作的互斥锁。</p><p>特性及注意：</p><ol><li>持有锁：由<strong>任意数量的读操作或者单个写操作</strong></li><li>唤醒操作：Unlock（写解锁）方法会唤醒<strong>所有要进行读</strong>而被锁定的协程；而RUnlock（读解锁）方法<strong>只会在没有任何读锁的情况下唤醒一个想要写操作</strong>而被阻塞的协程</li><li>解锁：多读操作是不互斥的，为此获得多少读锁，就要等量给多少个读解锁，否则其他写操作就无法获得读写锁了</li></ol><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rwm</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RWMutex</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		go</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">				fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;当前是第</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">个协程 &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">				rwm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">				fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;获得读锁的索引是</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">				time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Second</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// --休眠2秒</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">				fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;进行读解锁的索引是</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">				rwm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUnlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">				fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;锁：</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 已经释放 &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			}(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Second</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;试图获取写锁进行，写操作&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	rwm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;解锁&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sync-map的安全锁" tabindex="-1"><a class="header-anchor" href="#sync-map的安全锁"><span>sync.map的安全锁</span></a></h3><p>sync.map内部不直接使用map结构，而是进行<strong>读写分离</strong>优化后的解决方案：分为两部分的存储结构</p><ul><li>只读的存储区域</li><li>带锁的写入区域</li></ul><p>好处：高并发条件下，大多数读操作是无锁的，只有写入操作才会进行加锁（算是读写锁的应用吧）减少锁的争用提高并发</p><p>使用：sync.map是开箱即用的，直接对外提供对应的操作</p><ol><li><code>Store(key, value)</code>：将 k 和 v 存储到 <code>sync.Map</code> 中</li><li><code>Load(key)</code>：读取指定k的值，有则返回值和true，没有则返回零值和false</li><li><code>LoadOrStore(key, value)</code>：存在就返回值即可，不存在就存储k-v并返回value值</li><li><code>Delete(key)</code>：删除指定的key这项</li><li><code>Range(f func(key, value interface{}) bool)</code>：遍历所有的键值对</li></ol>`,147)]))}const d=s(t,[["render",h],["__file","2.进阶原理.html.vue"]]),r=JSON.parse('{"path":"/golang/%E9%9D%A2%E8%AF%95/2.%E8%BF%9B%E9%98%B6%E5%8E%9F%E7%90%86.html","title":"进阶面试","lang":"zh-CN","frontmatter":{"title":"进阶面试","order":1,"author":"xiaoxie","date":"2020-01-01T00:00:00.000Z","tag":["golang"],"star":true,"description":"面试流程： 自我介绍 聊几道基础八股文⭐ 聊聊项目和进阶八股文🌟 场景设计题 写两道代码题 判断是否有戏： 判断面试时间：若是10来分钟直接写代码了，大概率是不满意不想继续聊了 提问：快结束时候，面试官会问有什么想问的？可以提问下面一些问题 岗位工作内容 进去具体做啥 用什么技术栈 若是面试官详细介绍了，或者说招你进去安排哪些工作就很有机会；若是敷衍...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E9%9D%A2%E8%AF%95/2.%E8%BF%9B%E9%98%B6%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"进阶面试"}],["meta",{"property":"og:description","content":"面试流程： 自我介绍 聊几道基础八股文⭐ 聊聊项目和进阶八股文🌟 场景设计题 写两道代码题 判断是否有戏： 判断面试时间：若是10来分钟直接写代码了，大概率是不满意不想继续聊了 提问：快结束时候，面试官会问有什么想问的？可以提问下面一些问题 岗位工作内容 进去具体做啥 用什么技术栈 若是面试官详细介绍了，或者说招你进去安排哪些工作就很有机会；若是敷衍..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/GMP_modle.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-08T10:44:51.000Z"}],["meta",{"property":"article:author","content":"xiaoxie"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:published_time","content":"2020-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-08T10:44:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进阶面试\\",\\"image\\":[\\"https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/GMP_modle.png\\"],\\"datePublished\\":\\"2020-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-08T10:44:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaoxie\\"}]}"]]},"headers":[{"level":2,"title":"面试流程：","slug":"面试流程","link":"#面试流程","children":[]},{"level":2,"title":"语言基础","slug":"语言基础","link":"#语言基础","children":[{"level":3,"title":"与其他语⾔相⽐，使⽤ Go 有什么好处？","slug":"与其他语言相比-使用-go-有什么好处","link":"#与其他语言相比-使用-go-有什么好处","children":[]},{"level":3,"title":"Golang开发新⼿常犯的50个错误","slug":"golang开发新手常犯的50个错误","link":"#golang开发新手常犯的50个错误","children":[]},{"level":3,"title":"Golang 使⽤什么数据类型？","slug":"golang-使用什么数据类型","link":"#golang-使用什么数据类型","children":[]},{"level":3,"title":"Go 程序中的包是什么？","slug":"go-程序中的包是什么","link":"#go-程序中的包是什么","children":[]},{"level":3,"title":"变量大小写的区别","slug":"变量大小写的区别","link":"#变量大小写的区别","children":[]},{"level":3,"title":"go语言中的值类型和引用类型","slug":"go语言中的值类型和引用类型","link":"#go语言中的值类型和引用类型","children":[]}]},{"level":2,"title":"高级语法","slug":"高级语法","link":"#高级语法","children":[{"level":3,"title":"new和make有什么区别？","slug":"new和make有什么区别","link":"#new和make有什么区别","children":[]},{"level":3,"title":"引用类型如切片，nil切片和空切片有什么不一样？","slug":"引用类型如切片-nil切片和空切片有什么不一样","link":"#引用类型如切片-nil切片和空切片有什么不一样","children":[]},{"level":3,"title":"channel的使用注意","slug":"channel的使用注意","link":"#channel的使用注意","children":[]},{"level":3,"title":"map的实现","slug":"map的实现","link":"#map的实现","children":[]},{"level":3,"title":"处理字符串","slug":"处理字符串","link":"#处理字符串","children":[]}]},{"level":2,"title":"1、🌟协程","slug":"_1、协程","link":"#_1、协程","children":[{"level":3,"title":"什么是 Goroutine？你如何停⽌它？","slug":"什么是-goroutine-你如何停止它","link":"#什么是-goroutine-你如何停止它","children":[]},{"level":3,"title":"协程与线程的区别？","slug":"协程与线程的区别","link":"#协程与线程的区别","children":[]},{"level":3,"title":"GMP模型","slug":"gmp模型","link":"#gmp模型","children":[]}]},{"level":2,"title":"2、🌟并发","slug":"_2、并发","link":"#_2、并发","children":[{"level":3,"title":"Channel通知 实现并发控制","slug":"channel通知-实现并发控制","link":"#channel通知-实现并发控制","children":[]},{"level":3,"title":"WaitGroup 实现并发控制","slug":"waitgroup-实现并发控制","link":"#waitgroup-实现并发控制","children":[]},{"level":3,"title":"Context","slug":"context","link":"#context","children":[]}]},{"level":2,"title":"3、⭐内存","slug":"_3、内存","link":"#_3、内存","children":[{"level":3,"title":"内存逃逸是什么？会有什么影响？","slug":"内存逃逸是什么-会有什么影响","link":"#内存逃逸是什么-会有什么影响","children":[]},{"level":3,"title":"怎么分析内存逃逸？以及优化","slug":"怎么分析内存逃逸-以及优化","link":"#怎么分析内存逃逸-以及优化","children":[]},{"level":3,"title":"GC原理--三色标记+增量式标记清除","slug":"gc原理-三色标记-增量式标记清除","link":"#gc原理-三色标记-增量式标记清除","children":[]},{"level":3,"title":"内存对齐","slug":"内存对齐","link":"#内存对齐","children":[]}]},{"level":2,"title":"4、锁","slug":"_4、锁","link":"#_4、锁","children":[{"level":3,"title":"互斥锁","slug":"互斥锁","link":"#互斥锁","children":[]},{"level":3,"title":"读写锁","slug":"读写锁","link":"#读写锁","children":[]},{"level":3,"title":"sync.map的安全锁","slug":"sync-map的安全锁","link":"#sync-map的安全锁","children":[]}]}],"git":{"createdTime":1734622519000,"updatedTime":1736333091000,"contributors":[{"name":"xiaoxie001","username":"xiaoxie001","email":"xie18115@outlook.com","commits":3,"url":"https://github.com/xiaoxie001"}]},"readingTime":{"minutes":17.69,"words":5308},"filePathRelative":"golang/面试/2.进阶原理.md","localizedDate":"2020年1月1日","autoDesc":true,"excerpt":"<h2>面试流程：</h2>\\n<ol>\\n<li>自我介绍</li>\\n<li><strong>聊几道基础八股文⭐</strong></li>\\n<li><strong>聊聊项目和进阶八股文</strong>🌟</li>\\n<li>场景设计题</li>\\n<li>写两道代码题</li>\\n</ol>\\n<p>判断是否有戏：</p>\\n<ol>\\n<li>\\n<p>判断面试时间：若是10来分钟直接写代码了，大概率是不满意不想继续聊了</p>\\n</li>\\n<li>\\n<p>提问：快结束时候，面试官会问有什么想问的？可以提问下面一些问题</p>\\n<p>岗位工作内容<br>\\n进去具体做啥</p>\\n<p>用什么技术栈</p>\\n<p>若是面试官详细介绍了，或者说招你进去安排哪些工作就很有机会；若是敷衍几句就不用报太大希望了</p>\\n</li>\\n</ol>"}');export{d as comp,r as data};
