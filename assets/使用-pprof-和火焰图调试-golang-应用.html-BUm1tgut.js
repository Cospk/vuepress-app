import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as r,o}from"./app-DIJDtupu.js";const n={};function a(s,e){return o(),t("div",null,e[0]||(e[0]=[r('<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>## 什么是 Profiling?</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Profiling 这个词比较难翻译，一般译成`画像`。比如在案件侦破的时候会对嫌疑人做画像，从犯罪现场的种种证据，找到嫌疑人的各种特征，方便对嫌疑人进行排查；还有就是互联网公司会对用户信息做画像，通过了解用户各个属性（年龄、性别、消费能力等），方便为用户推荐内容或者广告。 在计算机性能调试领域里，profiling 就是对应用的画像，这里画像就是应用使用 CPU 和内存的情况。也就是说应用使用了多少 CPU 资源？都是哪些部分在使用？每个函数使用的比例是多少？有哪些函数在等待 CPU 资源？知道了这些，我们就能对应用进行规划，也能快速定位性能瓶颈。 golang 是一个对性能特别看重的语言，因此语言中自带了 profiling 的库，这篇文章就要讲解怎么在 golang 中做 profiling。 在 go 语言中，主要关注的应用运行情况主要包括以下几种： - CPU profile：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据 - Memory Profile（Heap Profile）：报告程序的内存使用情况 - Block Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈 - Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的 ## 两种收集方式 做 Profiling 第一步就是怎么获取应用程序的运行情况数据。go 语言提供了 `runtime/pprof` 和 `net/http/pprof` 两个库，这部分我们讲讲它们的用法以及使用场景。 ### 工具型应用 如果你的应用是一次性的，运行一段时间就结束。那么最好的办法，就是在应用退出的时候把 profiling 的报告保存到文件中，进行分析。对于这种情况，可以使用 [`runtime/pprof` 库](<a href="https://golang.org/pkg/runtime/pprof/" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/runtime/pprof/</a>)。 `pprof` 封装了很好的接口供我们使用，比如要想进行 CPU Profiling，可以调用 `pprof.StartCPUProfile()` 方法，它会对当前应用程序进行 CPU profiling，并写入到提供的参数中（`w io.Writer`），要停止调用 `StopCPUProfile()` 即可。 去除��误处理只需要三行内容，一般把部分内容写在 `main.go` 文件中，应用程序启动之后就开始执行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> f, err := os.Create(\\*cpuprofile) ... pprof.StartCPUProfile(f) defer pprof.StopCPUProfile()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',3)]))}const g=i(n,[["render",a],["__file","使用-pprof-和火焰图调试-golang-应用.html.vue"]]),d=JSON.parse('{"path":"/golang/%E5%8E%9F%E7%90%86/theory/%E4%BD%BF%E7%94%A8-pprof-%E5%92%8C%E7%81%AB%E7%84%B0%E5%9B%BE%E8%B0%83%E8%AF%95-golang-%E5%BA%94%E7%94%A8.html","title":"使用 pprof 和火焰图调试 golang 应用","lang":"zh-CN","frontmatter":{"title":"使用 pprof 和火焰图调试 golang 应用","source_url":"https://studygolang.com/articles/11006","category":"Go原理教程","description":"Profiling 这个词比较难翻译，一般译成`画像`。比如在案件侦破的时候会对嫌疑人做画像，从犯罪现场的种种证据，找到嫌疑人的各种特征，方便对嫌疑人进行排查；还有就是互联网公司会对用户信息做画像，通过了解用户各个属性（年龄、性别、消费能力等），方便为用户推荐内容或者广告。 在计算机性能调试领域里，profiling 就是对应用的画像，这里画像就是应用...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%8E%9F%E7%90%86/theory/%E4%BD%BF%E7%94%A8-pprof-%E5%92%8C%E7%81%AB%E7%84%B0%E5%9B%BE%E8%B0%83%E8%AF%95-golang-%E5%BA%94%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"使用 pprof 和火焰图调试 golang 应用"}],["meta",{"property":"og:description","content":"Profiling 这个词比较难翻译，一般译成`画像`。比如在案件侦破的时候会对嫌疑人做画像，从犯罪现场的种种证据，找到嫌疑人的各种特征，方便对嫌疑人进行排查；还有就是互联网公司会对用户信息做画像，通过了解用户各个属性（年龄、性别、消费能力等），方便为用户推荐内容或者广告。 在计算机性能调试领域里，profiling 就是对应用的画像，这里画像就是应用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 pprof 和火焰图调试 golang 应用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":2.19,"words":656},"filePathRelative":"golang/原理/theory/使用-pprof-和火焰图调试-golang-应用.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>## 什么是 Profiling?</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{g as comp,d as data};
