import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,o as n}from"./app-DIJDtupu.js";const a={};function r(l,e){return n(),s("div",null,e[0]||(e[0]=[t('<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上一篇提到的关于gc性能的问题，对比slice和map的结构可以看出为了存储数据map用了更多的内存空间，并且可能存在链表，链表的每个节点在gc时都做为一个小对象对待，增加了扫描的时间，因此gc时间相对更长。 ## [](#slice初始化与复制 &quot;slice初始化与复制&quot;)slice初始化与复制 slice通过内部指针和相关属性引用数组片段，来实现变长方案。实现方式和数据结构都类似C++中的vector。它本身是结构体，作为参数传递时传递的是slice本身而不是它引用的底层数组。len()可获得slice长度，cap()可获得slice容量。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go type slice struct { array unsafe.Pointer len int cap int }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>slice可以通过数组初始化，也可以直接make。make时直接使用cap作为new的长度来创建底层数组，返回的是slice结构体。如果通过`new([]int)`来初始化，它返回的是一个指向slice结构体的指针，不能直接对它进行下标操作。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go func makeslice(t \\*slicetype, len64, cap64 int64) slice { p := newarray(t.elem, uintptr(cap)) return slice{p, len, cap} }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>遍历slice时经常用到range操作，range会复制range的对象。下面例子中在循环内部改变slice的属性，最终会作用到slice上导致最后输出`[1 2 101]`。但是并不会导致循环在第三次就结束，因为range s是从s的复本中读取i和n的。s的复本只复制了指针，底层元素仍指向同一片，因此可以在循环内改变slice元素的值并在循环期内可见。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go func main() { s := \\[\\]int{1, 2, 3, 4, 5} for i, n := range s { if i == 0 { s = s\\[:3\\] s\\[2\\] = n + 100 } fmt.Println(i, n) // 输出1 2;2 101;3 4;4 5 } fmt.Println(s)//输出 1 2 101 }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="reslice扩容-reslice扩容-reslice扩容-reslice的增长规则-如果新的size是当前size的2倍以上-则大小增长为新size。如果新的size不到当前size的2倍-则按当前size的不同有不同操作。当前size不超过1024-按每次2倍增长-否则按当前大小的1-4增长。-slice通过append元素使得元素达到cap-就会-重新分配内存-复制内容并接着append-即便指向的数组还有空位。比如这个例子a初始化为长度和容量都是3的slice-再往a中append数据时a将在堆上重新分配空间并复制原始内容-因此这时原始数组的后几位已经看不到了。" tabindex="-1"><a class="header-anchor" href="#reslice扩容-reslice扩容-reslice扩容-reslice的增长规则-如果新的size是当前size的2倍以上-则大小增长为新size。如果新的size不到当前size的2倍-则按当前size的不同有不同操作。当前size不超过1024-按每次2倍增长-否则按当前大小的1-4增长。-slice通过append元素使得元素达到cap-就会-重新分配内存-复制内容并接着append-即便指向的数组还有空位。比如这个例子a初始化为长度和容量都是3的slice-再往a中append数据时a将在堆上重新分配空间并复制原始内容-因此这时原始数组的后几位已经看不到了。"><span>[](#reslice扩容 &quot;reslice扩容&quot;)reslice扩容 &gt; reslice的增长规则：如果新的size是当前size的2倍以上，则大小增长为新size。如果新的size不到当前size的2倍，则按当前size的不同有不同操作。当前size不超过1024，按每次2倍增长，否则按当前大小的1/4增长。 slice通过append元素使得元素达到cap，就会[重新分配内存，复制内容并接着append]()，即便指向的数组还有空位。比如这个例子a初始化为长度和容量都是3的slice，再往a中append数据时a将在堆上重新分配空间并复制原始内容，因此这时原始数组的后几位已经看不到了。</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go func main() { data := \\[6\\]int{0, 1, 2, 3, 4, 5} a := data\\[:3\\] a = append(a, 100) // output \\[0 1 2 100\\] }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果slice作为函数的入参，通常希望对slice的操作可以影响到底层数据，但是如果在函数内部append数据超过了cap，导致重新分配底层数组，这时[入参a指向的底层数组跟调用方实参指向的不再是同一个]()。如下面的例子这样因为扩容导致与代码**实现**原意相违背，因此通常不建议在函数内部对slice有append操作，若有需要则显示的返回这个slice。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go func main() { a := \\[\\]int{1} // afeter initialization len=1 cap=1 test(a) // call test to append slice, but a is \\[1\\], not \\[1 2\\] } func test(a \\[\\]int) { a = append(a, 2) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="string内存分布和复制-string内存分布和复制-string内存分布和复制-string的结构和c-stl实现的string类似。都是由指向固定地址的str指针和len组成的结构体。对string的复制只是对指针和len的复制-作为函数参数时入参只不过是指向同一个底层数据的相同指针。-通常string常量是编译器分配到-只读段-的-rodata-对应的数据地址不可写入。-fmt-sprintf-生成的字符串-分配在堆-上-对应数据地址可修改。" tabindex="-1"><a class="header-anchor" href="#string内存分布和复制-string内存分布和复制-string内存分布和复制-string的结构和c-stl实现的string类似。都是由指向固定地址的str指针和len组成的结构体。对string的复制只是对指针和len的复制-作为函数参数时入参只不过是指向同一个底层数据的相同指针。-通常string常量是编译器分配到-只读段-的-rodata-对应的数据地址不可写入。-fmt-sprintf-生成的字符串-分配在堆-上-对应数据地址可修改。"><span>[](#string内存分布和复制 &quot;string内存分布和复制&quot;)string内存分布和复制 string的结构和C++STL实现的string类似。都是由指向固定地址的str指针和len组成的结构体。对string的复制只是对指针和len的复制，作为函数参数时入参只不过是指向同一个底层数据的相同指针。 &gt; 通常string常量是编译器分配到**只读段**的(.rodata)，对应的数据地址不可写入。`fmt.Sprintf`生成的字符串**分配在堆**上，对应数据地址可修改。</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go struct string { byte\\* str; intgo len; }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="string与-byte转化-string与-byte转化-string与-byte转化-平常使用中经常将两者互相转化-每次相互转化时都会发生底层数据的复制。如果是动态生成的字符串可以通过以下对指针的操作来直接转化数据-而不需要拷贝-性能好接近4倍。" tabindex="-1"><a class="header-anchor" href="#string与-byte转化-string与-byte转化-string与-byte转化-平常使用中经常将两者互相转化-每次相互转化时都会发生底层数据的复制。如果是动态生成的字符串可以通过以下对指针的操作来直接转化数据-而不需要拷贝-性能好接近4倍。"><span>[](#string与-byte转化 &quot;string与[]byte转化&quot;)string与\\[]byte转化 平常使用中经常将两者互相转化，每次相互转化时都会发生底层数据的复制。如果是动态生成的字符串可以通过以下对指针的操作来直接转化数据，而不需要拷贝，性能好接近4倍。</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go //return GoString&#39;s buffer slice(enable modify string) func StringBytes(s string) Bytes { return \\*(\\*Bytes)(unsafe.Pointer(&amp;s)) } // convert b to string without copy func BytesString(b \\[\\]byte) String { return \\*(\\*String)(unsafe.Pointer(&amp;b)) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>参考博客：</p>',16)]))}const p=i(a,[["render",r],["__file","Go-Slice与String内存布局和实现.html.vue"]]),g=JSON.parse('{"path":"/golang/%E5%8E%9F%E7%90%86/theory/Go-Slice%E4%B8%8EString%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%92%8C%E5%AE%9E%E7%8E%B0.html","title":"Go Slice与String内存布局和实现","lang":"zh-CN","frontmatter":{"title":"Go Slice与String内存布局和实现","source_url":"https://studygolang.com/articles/11980","category":"Go原理教程","description":"上一篇提到的关于gc性能的问题，对比slice和map的结构可以看出为了存储数据map用了更多的内存空间，并且可能存在链表，链表的每个节点在gc时都做为一个小对象对待，增加了扫描的时间，因此gc时间相对更长。 ## [](#slice初始化与复制 \\"slice初始化与复制\\")slice初始化与复制 slice通过内部指针和相关属性引用数组片段，来实现变...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%8E%9F%E7%90%86/theory/Go-Slice%E4%B8%8EString%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E5%92%8C%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"Go Slice与String内存布局和实现"}],["meta",{"property":"og:description","content":"上一篇提到的关于gc性能的问题，对比slice和map的结构可以看出为了存储数据map用了更多的内存空间，并且可能存在链表，链表的每个节点在gc时都做为一个小对象对待，增加了扫描的时间，因此gc时间相对更长。 ## [](#slice初始化与复制 \\"slice初始化与复制\\")slice初始化与复制 slice通过内部指针和相关属性引用数组片段，来实现变..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go Slice与String内存布局和实现\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[{"level":2,"title":"[](#reslice扩容 \\"reslice扩容\\")reslice扩容 > reslice的增长规则：如果新的size是当前size的2倍以上，则大小增长为新size。如果新的size不到当前size的2倍，则按当前size的不同有不同操作。当前size不超过1024，按每次2倍增长，否则按当前大小的1/4增长。 slice通过append元素使得元素达到cap，就会[重新分配内存，复制内容并接着append]()，即便指向的数组还有空位。比如这个例子a初始化为长度和容量都是3的slice，再往a中append数据时a将在堆上重新分配空间并复制原始内容，因此这时原始数组的后几位已经看不到了。","slug":"reslice扩容-reslice扩容-reslice扩容-reslice的增长规则-如果新的size是当前size的2倍以上-则大小增长为新size。如果新的size不到当前size的2倍-则按当前size的不同有不同操作。当前size不超过1024-按每次2倍增长-否则按当前大小的1-4增长。-slice通过append元素使得元素达到cap-就会-重新分配内存-复制内容并接着append-即便指向的数组还有空位。比如这个例子a初始化为长度和容量都是3的slice-再往a中append数据时a将在堆上重新分配空间并复制原始内容-因此这时原始数组的后几位已经看不到了。","link":"#reslice扩容-reslice扩容-reslice扩容-reslice的增长规则-如果新的size是当前size的2倍以上-则大小增长为新size。如果新的size不到当前size的2倍-则按当前size的不同有不同操作。当前size不超过1024-按每次2倍增长-否则按当前大小的1-4增长。-slice通过append元素使得元素达到cap-就会-重新分配内存-复制内容并接着append-即便指向的数组还有空位。比如这个例子a初始化为长度和容量都是3的slice-再往a中append数据时a将在堆上重新分配空间并复制原始内容-因此这时原始数组的后几位已经看不到了。","children":[]},{"level":2,"title":"[](#string内存分布和复制 \\"string内存分布和复制\\")string内存分布和复制 string的结构和C++STL实现的string类似。都是由指向固定地址的str指针和len组成的结构体。对string的复制只是对指针和len的复制，作为函数参数时入参只不过是指向同一个底层数据的相同指针。 > 通常string常量是编译器分配到**只读段**的(.rodata)，对应的数据地址不可写入。`fmt.Sprintf`生成的字符串**分配在堆**上，对应数据地址可修改。","slug":"string内存分布和复制-string内存分布和复制-string内存分布和复制-string的结构和c-stl实现的string类似。都是由指向固定地址的str指针和len组成的结构体。对string的复制只是对指针和len的复制-作为函数参数时入参只不过是指向同一个底层数据的相同指针。-通常string常量是编译器分配到-只读段-的-rodata-对应的数据地址不可写入。-fmt-sprintf-生成的字符串-分配在堆-上-对应数据地址可修改。","link":"#string内存分布和复制-string内存分布和复制-string内存分布和复制-string的结构和c-stl实现的string类似。都是由指向固定地址的str指针和len组成的结构体。对string的复制只是对指针和len的复制-作为函数参数时入参只不过是指向同一个底层数据的相同指针。-通常string常量是编译器分配到-只读段-的-rodata-对应的数据地址不可写入。-fmt-sprintf-生成的字符串-分配在堆-上-对应数据地址可修改。","children":[]},{"level":2,"title":"[](#string与-byte转化 \\"string与[]byte转化\\")string与\\\\[]byte转化 平常使用中经常将两者互相转化，每次相互转化时都会发生底层数据的复制。如果是动态生成的字符串可以通过以下对指针的操作来直接转化数据，而不需要拷贝，性能好接近4倍。","slug":"string与-byte转化-string与-byte转化-string与-byte转化-平常使用中经常将两者互相转化-每次相互转化时都会发生底层数据的复制。如果是动态生成的字符串可以通过以下对指针的操作来直接转化数据-而不需要拷贝-性能好接近4倍。","link":"#string与-byte转化-string与-byte转化-string与-byte转化-平常使用中经常将两者互相转化-每次相互转化时都会发生底层数据的复制。如果是动态生成的字符串可以通过以下对指针的操作来直接转化数据-而不需要拷贝-性能好接近4倍。","children":[]}],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":3.92,"words":1176},"filePathRelative":"golang/原理/theory/Go-Slice与String内存布局和实现.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span></span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{p as comp,g as data};
