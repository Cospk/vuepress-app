import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as i}from"./app-DIJDtupu.js";const l={};function t(p,e){return i(),a("div",null,e[0]||(e[0]=[n(`<h1 id="用-godebug-看调度跟踪" tabindex="-1"><a class="header-anchor" href="#用-godebug-看调度跟踪"><span><a href="#%E7%94%A8-godebug-%E7%9C%8B%E8%B0%83%E5%BA%A6%E8%B7%9F%E8%B8%AA"></a>用 GODEBUG 看调度跟踪</span></a></h1><figure><a href="https://camo.githubusercontent.com/ce67c5cf76e24c9f6554b61224adb7d2e521aabb/68747470733a2f2f696d6167652e65646479636a792e636f6d2f62303163326365323565333466383064343939663034383864303334623030622e706e67" target="_blank" rel="noopener noreferrer"><img src="https://camo.githubusercontent.com/ce67c5cf76e24c9f6554b61224adb7d2e521aabb/68747470733a2f2f696d6167652e65646479636a792e636f6d2f62303163326365323565333466383064343939663034383864303334623030622e706e67" alt="image" tabindex="0" loading="lazy"></a><figcaption>image</figcaption></figure><p>让 Go 更强大的原因之一莫过于它的 GODEBUG 工具，GODEBUG 的设置可以让 Go 程序在运行时输出调试信息，可以根据你的要求很直观的看到你想要的调度器或垃圾回收等详细信息，并且还不需要加装其它的插件，非常方便，今天我们将先讲解 GODEBUG 的调度器相关内容，希望对你有所帮助。</p><p>不过在开始前，没接触过的小伙伴得先补补如下前置知识，便于更好的了解调试器输出的信息内容。</p><h2 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识"><span><a href="#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86"></a>前置知识</span></a></h2><p>Go scheduler 的主要功能是针对在处理器上运行的 OS 线程分发可运行的 Goroutine，而我们一提到调度器，就离不开三个经常被提到的缩写，分别是：</p><ul><li>G：Goroutine，实际上我们每次调用 <code>go func</code> 就是生成了一个 G。</li><li>P：处理器，一般为处理器的核数，可以通过 <code>GOMAXPROCS</code> 进行修改。</li><li>M：OS 线程</li></ul><p>这三者交互实际来源于 Go 的 M: N 调度模型，也就是 M 必须与 P 进行绑定，然后不断地在 M 上循环寻找可运行的 G 来执行相应的任务，如果想具体了解可以详细阅读 <a href="https://speakerdeck.com/retervision/go-runtime-scheduler" target="_blank" rel="noopener noreferrer">《Go Runtime Scheduler》</a>，我们抽其中的工作流程图进行简单分析，如下:</p><figure><a href="https://camo.githubusercontent.com/04277afe74654c584501831307d6a3b5e4f659f0/68747470733a2f2f696d6167652e65646479636a792e636f6d2f66623463366339326339336166336263326466633466313364633136376364662e706e67" target="_blank" rel="noopener noreferrer"><img src="https://camo.githubusercontent.com/04277afe74654c584501831307d6a3b5e4f659f0/68747470733a2f2f696d6167652e65646479636a792e636f6d2f66623463366339326339336166336263326466633466313364633136376364662e706e67" alt="image" tabindex="0" loading="lazy"></a><figcaption>image</figcaption></figure><ol><li>当我们执行 <code>go func()</code> 时，实际上就是创建一个全新的 Goroutine，我们称它为 G。</li><li>新创建的 G 会被放入 P 的本地队列（Local Queue）或全局队列（Global Queue）中，准备下一步的动作。</li><li>唤醒或创建 M 以便执行 G。</li><li>不断地进行事件循环</li><li>寻找在可用状态下的 G 进行执行任务</li><li>清除后，重新进入事件循环</li></ol><p>而在描述中有提到全局和本地这两类队列，其实在功能上来讲都是用于存放正在等待运行的 G，但是不同点在于，本地队列有数量限制，不允许超过 256 个。并且在新建 G 时，会优先选择 P 的本地队列，如果本地队列满了，则将 P 的本地队列的一半的 G 移动到全局队列，这其实可以理解为调度资源的共享和再平衡。</p><p>另外我们可以看到图上有 steal 行为，这是用来做什么的呢，我们都知道当你创建新的 G 或者 G 变成可运行状态时，它会被推送加入到当前 P 的本地队列中。但其实当 P 执行 G 完毕后，它也会 “干活”，它会将其从本地队列中弹出 G，同时会检查当前本地队列是否为空，如果为空会随机的从其他 P 的本地队列中尝试窃取一半可运行的 G 到自己的名下。例子如下：</p><figure><a href="https://camo.githubusercontent.com/d917159b924ee3c276def927d8471903794bb260/68747470733a2f2f696d6167652e65646479636a792e636f6d2f65376361386632313234363664386331356563306636306236396131636534642e706e67" target="_blank" rel="noopener noreferrer"><img src="https://camo.githubusercontent.com/d917159b924ee3c276def927d8471903794bb260/68747470733a2f2f696d6167652e65646479636a792e636f6d2f65376361386632313234363664386331356563306636306236396131636534642e706e67" alt="image" tabindex="0" loading="lazy"></a><figcaption>image</figcaption></figure><p>在这个例子中，P2 在本地队列中找不到可以运行的 G，它会执行 <code>work-stealing</code> 调度算法，随机选择其它的处理器 P1，并从 P1 的本地队列中窃取了三个 G 到它自己的本地队列中去。至此，P1、P2 都拥有了可运行的 G，P1 多余的 G 也不会被浪费，调度资源将会更加平均的在多个处理器中流转。</p><h2 id="godebug" tabindex="-1"><a class="header-anchor" href="#godebug"><span><a href="#godebug"></a>GODEBUG</span></a></h2><p>GODEBUG 变量可以控制运行时内的调试变量，参数以逗号分隔，格��为：<code>name=val</code>。本文着重点在调度器观察上，将会使用如下两个参��：</p><ul><li>schedtrace：设置 <code>schedtrace=X</code> 参数可以使运行时在每 X 毫秒发出一行调度器的摘要信息到标准 err 输出中。</li><li>scheddetail：设置 <code>schedtrace=X</code> 和 <code>scheddetail=1</code> 可以使运行时在每 X 毫秒发出一次详细的多行信息，信息内容主要包括调度程序、处理器、OS 线程 和 Goroutine 的状态。</li></ul><h3 id="演示代码" tabindex="-1"><a class="header-anchor" href="#演示代码"><span><a href="#%E6%BC%94%E7%A4%BA%E4%BB%A3%E7%A0%81"></a>演示代码</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>func main() {</span></span>
<span class="line"><span>	wg := sync.WaitGroup{}</span></span>
<span class="line"><span>	wg.Add(10)</span></span>
<span class="line"><span>	for i := 0; i &lt; 10; i++ {</span></span>
<span class="line"><span>		go func(wg *sync.WaitGroup) {</span></span>
<span class="line"><span>			var counter int</span></span>
<span class="line"><span>			for i := 0; i &lt; 1e10; i++ {</span></span>
<span class="line"><span>				counter++</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>			wg.Done()</span></span>
<span class="line"><span>		}(&amp;wg)</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	wg.Wait()</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="schedtrace" tabindex="-1"><a class="header-anchor" href="#schedtrace"><span><a href="#schedtrace"></a>schedtrace</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ GODEBUG=schedtrace=1000 ./awesomeProject </span></span>
<span class="line"><span>SCHED 0ms: gomaxprocs=4 idleprocs=1 threads=5 spinningthreads=1 idlethreads=0 runqueue=0 [0 0 0 0]</span></span>
<span class="line"><span>SCHED 1000ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=0 [1 2 2 1]</span></span>
<span class="line"><span>SCHED 2000ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=0 [1 2 2 1]</span></span>
<span class="line"><span>SCHED 3001ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=0 [1 2 2 1]</span></span>
<span class="line"><span>SCHED 4010ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=0 [1 2 2 1]</span></span>
<span class="line"><span>SCHED 5011ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=0 [1 2 2 1]</span></span>
<span class="line"><span>SCHED 6012ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=0 [1 2 2 1]</span></span>
<span class="line"><span>SCHED 7021ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=4 [0 1 1 0]</span></span>
<span class="line"><span>SCHED 8023ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=4 [0 1 1 0]</span></span>
<span class="line"><span>SCHED 9031ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=4 [0 1 1 0]</span></span>
<span class="line"><span>SCHED 10033ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=4 [0 1 1 0]</span></span>
<span class="line"><span>SCHED 11038ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=4 [0 1 1 0]</span></span>
<span class="line"><span>SCHED 12044ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=4 [0 1 1 0]</span></span>
<span class="line"><span>SCHED 13051ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=4 [0 1 1 0]</span></span>
<span class="line"><span>SCHED 14052ms: gomaxprocs=4 idleprocs=2 threads=5 </span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>sched：每一行都代表调度器的调试信息，后面提示的毫秒数表示启动到现在的运行时间，输出的时间间隔受 <code>schedtrace</code> 的值影响。</li><li>gomaxprocs：当前的 CPU 核心数（GOMAXPROCS 的当前值）。</li><li>idleprocs：空闲的处理器数量，后面的数字表示当前的空闲数量。</li><li>threads：OS 线程数量，后面的数字表示当前正在运行的线程数量。</li><li>spinningthreads：自旋状态的 OS 线程数量。</li><li>idlethreads：空闲的线程数量。</li><li>runqueue：全局队列中中的 Goroutine 数量，而后面的 [0 0 1 1] 则分别代表这 4 个 P 的本地队列正在运行的 Goroutine 数量。</li></ul><p>在上面我们有提到 “自旋线程” 这个概念，如果你之前没有了解过相关概念，一听 “自旋” 肯定会比较懵，我们引用 《Head First of Golang Scheduler》 的内容来说明：</p><blockquote><p>自旋线程的这个说法，是因为 Go Scheduler 的设计者在考虑了 “OS 的资源利用率” 以及 “频繁的线程抢占给 OS 带来的负载” 之后，提出了 “Spinning Thread” 的概念。也就是当 “自旋线程” 没有找到可供其调度执行的 Goroutine 时，并不会销毁该线程 ，而是采取 “自旋” 的操作保存了下来。虽然看起来这是浪费了一些资源，但是考虑一下 syscall 的情景就可以知道，比起 “自旋&quot;，线程间频繁的抢占以及频繁的创建和销毁操作可能带来的危害会更大。</p></blockquote><h3 id="scheddetail" tabindex="-1"><a class="header-anchor" href="#scheddetail"><span><a href="#scheddetail"></a>scheddetail</span></a></h3><p>如果我们想要更详细的看到调度器的完整信息时，我们可以增加 <code>scheddetail</code> 参数，就能够更进一步的查看调度的细节逻辑，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ GODEBUG=scheddetail=1,schedtrace=1000 ./awesomeProject</span></span>
<span class="line"><span>SCHED 1000ms: gomaxprocs=4 idleprocs=0 threads=5 spinningthreads=0 idlethreads=0 runqueue=0 gcwaiting=0 nmidlelocked=0 stopwait=0 sysmonwait=0</span></span>
<span class="line"><span>  P0: status=1 schedtick=2 syscalltick=0 m=3 runqsize=3 gfreecnt=0</span></span>
<span class="line"><span>  P1: status=1 schedtick=2 syscalltick=0 m=4 runqsize=1 gfreecnt=0</span></span>
<span class="line"><span>  P2: status=1 schedtick=2 syscalltick=0 m=0 runqsize=1 gfreecnt=0</span></span>
<span class="line"><span>  P3: status=1 schedtick=1 syscalltick=0 m=2 runqsize=1 gfreecnt=0</span></span>
<span class="line"><span>  M4: p=1 curg=18 mallocing=0 throwing=0 preemptoff= locks=0 dying=0 spinning=false blocked=false lockedg=-1</span></span>
<span class="line"><span>  M3: p=0 curg=22 mallocing=0 throwing=0 preemptoff= locks=0 dying=0 spinning=false blocked=false lockedg=-1</span></span>
<span class="line"><span>  M2: p=3 curg=24 mallocing=0 throwing=0 preemptoff= locks=0 dying=0 spinning=false blocked=false lockedg=-1</span></span>
<span class="line"><span>  M1: p=-1 curg=-1 mallocing=0 throwing=0 preemptoff= locks=1 dying=0 spinning=false blocked=false lockedg=-1</span></span>
<span class="line"><span>  M0: p=2 curg=26 mallocing=0 throwing=0 preemptoff= locks=0 dying=0 spinning=false blocked=false lockedg=-1</span></span>
<span class="line"><span>  G1: status=4(semacquire) m=-1 lockedm=-1</span></span>
<span class="line"><span>  G2: status=4(force gc (idle)) m=-1 lockedm=-1</span></span>
<span class="line"><span>  G3: status=4(GC sweep wait) m=-1 lockedm=-1</span></span>
<span class="line"><span>  G17: status=1() m=-1 lockedm=-1</span></span>
<span class="line"><span>  G18: status=2() m=4 lockedm=-1</span></span>
<span class="line"><span>  G19: status=1() m=-1 lockedm=-1</span></span>
<span class="line"><span>  G20: status=1() m=-1 lockedm=-1</span></span>
<span class="line"><span>  G21: status=1() m=-1 lockedm=-1</span></span>
<span class="line"><span>  G22: status=2() m=3 lockedm=-1</span></span>
<span class="line"><span>  G23: status=1() m=-1 lockedm=-1</span></span>
<span class="line"><span>  G24: status=2() m=2 lockedm=-1</span></span>
<span class="line"><span>  G25: status=1() m=-1 lockedm=-1</span></span>
<span class="line"><span>  G26: status=2() m=0 lockedm=-1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里我们抽取了 1000ms 时的调试信息来查看，信息量比较大，我们先从每一个字段开始了解。如下：</p><h4 id="g" tabindex="-1"><a class="header-anchor" href="#g"><span><a href="#g"></a>G</span></a></h4><ul><li>status：G 的运行状态。</li><li>m：隶属哪一个 M。</li><li>lockedm：是否有锁定 M。</li></ul><p>在第一点中我们有提到 G 的运行状态，这对于分析内部流转非常的有用，共涉及如下 9 种状态：</p><p>状态</p><p>值</p><p>含义</p><p>_Gidle</p><p>0</p><p>刚刚被分配，还没有进行初始化。</p><p>_Grunnable</p><p>1</p><p>已经在运行队列中，还没有执行用户代码。</p><p>_Grunning</p><p>2</p><p>不在运行队列里中，已经可以执行用户代码，此时已经分配了 M 和 P。</p><p>_Gsyscall</p><p>3</p><p>正在执行系统调用，此时分配了 M。</p><p>_Gwaiting</p><p>4</p><p>在运行时被阻止，没有执行用户代码，也不在运行队列中，此时它正在某处阻塞等待中。</p><p>_Gmoribund_unused</p><p>5</p><p>尚未使用，但是在 gdb 中进行了硬编码。</p><p>_Gdead</p><p>6</p><p>尚未使用，这个状态可能是刚退出或是刚被初始化，此时它并没有执行用户代码，有可能有也有可能没有分配堆栈。</p><p>_Genqueue_unused</p><p>7</p><p>尚未使用。</p><p>_Gcopystack</p><p>8</p><p>正在复制堆栈，并没有执行用户代码，也不在运行队列中。</p><p>在理解了各类的状态的意思后，我们结合上述案例看看，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>G1: status=4(semacquire) m=-1 lockedm=-1</span></span>
<span class="line"><span>G2: status=4(force gc (idle)) m=-1 lockedm=-1</span></span>
<span class="line"><span>G3: status=4(GC sweep wait) m=-1 lockedm=-1</span></span>
<span class="line"><span>G17: status=1() m=-1 lockedm=-1</span></span>
<span class="line"><span>G18: status=2() m=4 lockedm=-1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个片段中，G1 的运行状态为 <code>_Gwaiting</code>，并没有分配 M 和锁定。这时候你可能好奇在片段中括号里的是什么东西呢，其实是因为该 <code>status=4</code> 是表示 <code>Goroutine</code> 在<strong>运行时时被阻止</strong>，而阻止它的事件就是 <code>semacquire</code> 事件，是因为 <code>semacquire</code> 会检查信号量的情况，在合适的时机就调用 <code>goparkunlock</code> 函数，把当前 <code>Goroutine</code> 放进等待队列，并把它设为 <code>_Gwaiting</code> 状态。</p><p>那么在实际运行中还有什么原因会导致这种现象呢，我们一起看看，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>	waitReasonZero                                    // &quot;&quot;</span></span>
<span class="line"><span>	waitReasonGCAssistMarking                         // &quot;GC assist marking&quot;</span></span>
<span class="line"><span>	waitReasonIOWait                                  // &quot;IO wait&quot;</span></span>
<span class="line"><span>	waitReasonChanReceiveNilChan                      // &quot;chan receive (nil chan)&quot;</span></span>
<span class="line"><span>	waitReasonChanSendNilChan                         // &quot;chan send (nil chan)&quot;</span></span>
<span class="line"><span>	waitReasonDumpingHeap                             // &quot;dumping heap&quot;</span></span>
<span class="line"><span>	waitReasonGarbageCollection                       // &quot;garbage collection&quot;</span></span>
<span class="line"><span>	waitReasonGarbageCollectionScan                   // &quot;garbage collection scan&quot;</span></span>
<span class="line"><span>	waitReasonPanicWait                               // &quot;panicwait&quot;</span></span>
<span class="line"><span>	waitReasonSelect                                  // &quot;select&quot;</span></span>
<span class="line"><span>	waitReasonSelectNoCases                           // &quot;select (no cases)&quot;</span></span>
<span class="line"><span>	waitReasonGCAssistWait                            // &quot;GC assist wait&quot;</span></span>
<span class="line"><span>	waitReasonGCSweepWait                             // &quot;GC sweep wait&quot;</span></span>
<span class="line"><span>	waitReasonChanReceive                             // &quot;chan receive&quot;</span></span>
<span class="line"><span>	waitReasonChanSend                                // &quot;chan send&quot;</span></span>
<span class="line"><span>	waitReasonFinalizerWait                           // &quot;finalizer wait&quot;</span></span>
<span class="line"><span>	waitReasonForceGGIdle                             // &quot;force gc (idle)&quot;</span></span>
<span class="line"><span>	waitReasonSemacquire                              // &quot;semacquire&quot;</span></span>
<span class="line"><span>	waitReasonSleep                                   // &quot;sleep&quot;</span></span>
<span class="line"><span>	waitReasonSyncCondWait                            // &quot;sync.Cond.Wait&quot;</span></span>
<span class="line"><span>	waitReasonTimerGoroutineIdle                      // &quot;timer goroutine (idle)&quot;</span></span>
<span class="line"><span>	waitReasonTraceReaderBlocked                      // &quot;trace reader (blocked)&quot;</span></span>
<span class="line"><span>	waitReasonWaitForGCCycle                          // &quot;wait for GC cycle&quot;</span></span>
<span class="line"><span>	waitReasonGCWorkerIdle                            // &quot;GC worker (idle)&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过以上 <code>waitReason</code> 可以了解到 <code>Goroutine</code> 会被暂停运行的原因要素，也就是会出现在括号中的事件。</p><h4 id="m" tabindex="-1"><a class="header-anchor" href="#m"><span><a href="#m"></a>M</span></a></h4><ul><li>p：隶属哪一个 P。</li><li>curg：当前正在使用哪个 G。</li><li>runqsize：运行队列中的 G 数量。</li><li>gfreecnt：可用的G（状态为 Gdead）。</li><li>mallocing：是否正在分配内存。</li><li>throwing：是否抛出异常。</li><li>preemptoff：不等于空字符串的话，保持 curg 在这个 m 上运行。</li></ul><h4 id="p" tabindex="-1"><a class="header-anchor" href="#p"><span><a href="#p"></a>P</span></a></h4><ul><li>status：P 的运行状态。</li><li>schedtick：P 的调度次数。</li><li>syscalltick：P 的系统调用次数。</li><li>m：隶属哪一个 M。</li><li>runqsize：运行队列中的 G 数量。</li><li>gfreecnt：可用的G（状态为 Gdead）。</li></ul><p>状态</p><p>值</p><p>含义</p><p>_Pidle</p><p>0</p><p>刚刚被分配，还没有进行进行初始化。</p><p>_Prunning</p><p>1</p><p>当 M 与 P 绑定调用 acquirep 时，P 的状态会改变为 _Prunning。</p><p>_Psyscall</p><p>2</p><p>正在执行系统调用。</p><p>_Pgcstop</p><p>3</p><p>暂停运行，此时系统正在进行 GC，直至 GC 结束后才会转变到下一个状态阶段。</p><p>_Pdead</p><p>4</p><p>废弃，不再使用。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><a href="#%E6%80%BB%E7%BB%93"></a>总结</span></a></h2><p>通过本文我们学习到了调度的一些基础知识，再通过神奇的 GODEBUG 掌握了观察调度器的方式方法，你想想，是不是可以和我上一篇文章的 <code>go tool trace</code> 来结合使用呢，在实际的使用中，类似的办法有很多，组合巧用是重点。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span><a href="#%E5%8F%82%E8%80%83"></a>参考</span></a></h2><ul><li><a href="https://software.intel.com/en-us/blogs/2014/05/10/debugging-performance-issues-in-go-programs" target="_blank" rel="noopener noreferrer">Debugging performance issues in Go programs</a></li><li><a href="https://dave.cheney.net/tag/godebug" target="_blank" rel="noopener noreferrer">A whirlwind tour of Go’s runtime environment variables</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg3MTA0NDQ1OQ==&amp;mid=2247483907&amp;idx=2&amp;sn=c955372683bc0078e14227702ab0a35e&amp;chksm=ce85c607f9f24f116158043f63f7ca11dc88cd519393ba182261f0d7fc328c7b6a94fef4e416&amp;scene=38#wechat_redirect" target="_blank" rel="noopener noreferrer">Go调度器系列（2）宏观看调度器</a></li><li><a href="https://rakyll.org/scheduler/" target="_blank" rel="noopener noreferrer">Go&#39;s work-stealing scheduler</a></li><li><a href="https://www.ardanlabs.com/blog/2015/02/scheduler-tracing-in-go.html" target="_blank" rel="noopener noreferrer">Scheduler Tracing In Go</a></li><li><a href="https://zhuanlan.zhihu.com/p/42057783" target="_blank" rel="noopener noreferrer">Head First of Golang Scheduler</a></li><li><a href="http://xargin.com/state-of-goroutine/" target="_blank" rel="noopener noreferrer">goroutine 的状态切换</a></li><li><a href="https://golang.org/pkg/runtime/#hdr-Environment_Variables" target="_blank" rel="noopener noreferrer">Environment_Variables</a></li></ul><hr><p>有疑问加站长微信联系（非本文作者）</p><figure><img src="https://static.golangjob.cn/static/img/footer.png?imageView2/2/w/280" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,96)]))}const d=s(l,[["render",t],["__file","用-GODEBUG-看调度跟踪.html.vue"]]),o=JSON.parse('{"path":"/golang/%E5%8E%9F%E7%90%86/theory/%E7%94%A8-GODEBUG-%E7%9C%8B%E8%B0%83%E5%BA%A6%E8%B7%9F%E8%B8%AA.html","title":"用 GODEBUG 看调度跟踪","lang":"zh-CN","frontmatter":{"title":"用 GODEBUG 看调度跟踪","source_url":"https://studygolang.com/articles/22859","category":"Go原理教程","description":"用 GODEBUG 看调度跟踪 imageimage 让 Go 更强大的原因之一莫过于它的 GODEBUG 工具，GODEBUG 的设置可以让 Go 程序在运行时输出调试信息，可以根据你的要求很直观的看到你想要的调度器或垃圾回收等详细信息，并且还不需要加装其它的插件，非常方便，今天我们将先讲解 GODEBUG 的调度器相关内容，希望对你有所帮助。 不过...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%8E%9F%E7%90%86/theory/%E7%94%A8-GODEBUG-%E7%9C%8B%E8%B0%83%E5%BA%A6%E8%B7%9F%E8%B8%AA.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"用 GODEBUG 看调度跟踪"}],["meta",{"property":"og:description","content":"用 GODEBUG 看调度跟踪 imageimage 让 Go 更强大的原因之一莫过于它的 GODEBUG 工具，GODEBUG 的设置可以让 Go 程序在运行时输出调试信息，可以根据你的要求很直观的看到你想要的调度器或垃圾回收等详细信息，并且还不需要加装其它的插件，非常方便，今天我们将先讲解 GODEBUG 的调度器相关内容，希望对你有所帮助。 不过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://camo.githubusercontent.com/ce67c5cf76e24c9f6554b61224adb7d2e521aabb/68747470733a2f2f696d6167652e65646479636a792e636f6d2f62303163326365323565333466383064343939663034383864303334623030622e706e67"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"用 GODEBUG 看调度跟踪\\",\\"image\\":[\\"https://camo.githubusercontent.com/ce67c5cf76e24c9f6554b61224adb7d2e521aabb/68747470733a2f2f696d6167652e65646479636a792e636f6d2f62303163326365323565333466383064343939663034383864303334623030622e706e67\\",\\"https://camo.githubusercontent.com/04277afe74654c584501831307d6a3b5e4f659f0/68747470733a2f2f696d6167652e65646479636a792e636f6d2f66623463366339326339336166336263326466633466313364633136376364662e706e67\\",\\"https://camo.githubusercontent.com/d917159b924ee3c276def927d8471903794bb260/68747470733a2f2f696d6167652e65646479636a792e636f6d2f65376361386632313234363664386331356563306636306236396131636534642e706e67\\",\\"https://static.golangjob.cn/static/img/footer.png?imageView2/2/w/280\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[{"level":2,"title":"前置知识","slug":"前置知识","link":"#前置知识","children":[]},{"level":2,"title":"GODEBUG","slug":"godebug","link":"#godebug","children":[{"level":3,"title":"演示代码","slug":"演示代码","link":"#演示代码","children":[]},{"level":3,"title":"schedtrace","slug":"schedtrace","link":"#schedtrace","children":[]},{"level":3,"title":"scheddetail","slug":"scheddetail","link":"#scheddetail","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":10.54,"words":3162},"filePathRelative":"golang/原理/theory/用-GODEBUG-看调度跟踪.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"\\n<figure><a href=\\"https://camo.githubusercontent.com/ce67c5cf76e24c9f6554b61224adb7d2e521aabb/68747470733a2f2f696d6167652e65646479636a792e636f6d2f62303163326365323565333466383064343939663034383864303334623030622e706e67\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src=\\"https://camo.githubusercontent.com/ce67c5cf76e24c9f6554b61224adb7d2e521aabb/68747470733a2f2f696d6167652e65646479636a792e636f6d2f62303163326365323565333466383064343939663034383864303334623030622e706e67\\" alt=\\"image\\" tabindex=\\"0\\" loading=\\"lazy\\"></a><figcaption>image</figcaption></figure>"}');export{d as comp,o as data};
