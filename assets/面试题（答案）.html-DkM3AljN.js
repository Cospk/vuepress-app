import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as l}from"./app-CG6bgqhH.js";const h={};function k(p,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="腾讯一面" tabindex="-1"><a class="header-anchor" href="#腾讯一面"><span>腾讯一面</span></a></h2><ol><li>协程池的作用?</li><li>内存逃逸分析?</li><li>go的内存回收什么条件会触发? go的GC能够手动触发吗?</li><li>channel的底层实现? 有缓冲的,无缓冲的channel, 如果管道已经关闭了, 读取会不会发生错误?</li><li>切片使用的时候需要注意什么?</li><li>go中的参数传递是值传递还是引用传递?</li><li>defer的执行顺序?</li><li>100G的文件, 统计出所有英文字母, 按照字母表顺序输出</li><li>linux如何分割文件?</li><li>接口性能如何优化?</li><li>什么情况会全表扫描?</li><li>主丛同步的原理? mysql还有什么相关的log文件?</li><li>分布式锁的原理?</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 协程池的作用?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程池主要用于控制和复用大量的轻量级线程（协程），从而减少频繁创建和销毁协程的开销。协程池限制了同时运行的协程数量，并根据任务的数量动态调整，防止协程数量过多导致系统资源（如内存）过度消耗。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">作用：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">资源管理：避免创建过多协程消耗系统资源。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">任务调度：将任务按需分配到协程池中的协程中执行，增加并发度。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">性能优化：通过复用协程，减少协程创建和销毁的开销。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 内存逃逸分析?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">内存逃逸分析是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 编译器在编译时进行的一项优化技术。它用于分析变量的生命周期，判断一个变量是否逃逸到堆上。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">逃逸到堆：当一个变量的引用被返回到函数外部，或者存在多线程的共享情况时，变量会逃逸到堆上，不能使用栈空间进行管理。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">优化：通过逃逸分析，Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 编译器可以决定将某些变量分配到栈上而不是堆上，从而减少</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的负担，提高性能。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的内存回收触发条件及手动触发</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GC</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">内存回收触发条件：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的垃圾回收（GC）基于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 标记-清除</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 算法，主要依赖于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 堆内存的分配量</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可达对象的数量。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">当堆内存达到一定的阈值时（即触发垃圾回收），Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会启动</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 过程。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">另外，GC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 还会在内存分配的增量超过一个特定比例时触发。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">手动触发</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GC：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可以通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> runtime.GC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">来手动触发垃圾回收，通常不推荐这么做，除非有特殊需求（比如在内存泄漏怀疑时排查）。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Channel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的底层实现?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 有缓冲的、无缓冲的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Channel，管道关闭后的读取行为</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">底层实现：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> channel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 环形缓冲区</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来实现的。对于无缓冲的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> channel（同步</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> channel），发送操作会阻塞直到另一个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 进行接收；而对于有缓冲的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> channel，发送操作只有在缓冲区已满时才会阻塞。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">管道关闭后的读取行为：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">无缓冲</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> channel：如果管道已关闭且所有数据已被读取，后续的接收操作会返回零值，并且不会阻塞。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">有缓冲</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> channel：如果管道已关闭且缓冲区中的数据被消费完，后续接收会返回零值，并且不会阻塞。若缓冲区中仍有数据，接收操作会继续读取数据直到缓冲区为空。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 切片使用时需要注意什么?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">容量问题：切片有容量和长度的区别，修改切片的长度时，如果超过了容量，会导致新的切片分配内存。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">切片扩容：切片扩容时，会分配新的内存，并可能导致指向旧切片的引用失效。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">切片的共享内存：切片底层数组是共享的，修改切片元素时可能会影响到其他切片（指向同一底层数组的切片）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">避免内存泄漏：切片扩大时，旧的切片如果不再使用，容易造成内存泄漏。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中的参数传递是值传递还是引用传递?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">值传递：Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的函数参数默认是值传递，即传递的是变量的副本。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">引用传递：如果传递的是指针，实质上是引用传递，函数内部修改指针所指向的值会影响原始数据。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的执行顺序?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">执行顺序：defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 语句的执行顺序是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 后进先出（LIFO）</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的。即当函数执行结束时，所有的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 语句会按照定义的顺序逆序执行。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">例如：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fmt.Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;first&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fmt.Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;second&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">执行时会先输出</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> second，再输出</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> first。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 100G</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的文件，统计出所有英文字母，按照字母表顺序输出</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">思路：逐行读取文件，统计每个字母的出现频次，然后按照字母表顺序输出结果。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    &quot;fmt&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    &quot;os&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    &quot;bufio&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    &quot;strings&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    file,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> _</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> os.Open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;bigfile.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file.Close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    counts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map[rune]int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    scanner</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bufio.NewScanner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> scanner.Scan() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        line</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> scanner.Text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _, char := range line {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;a&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;z&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                counts[char]++</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> err</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> scanner.Err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">err</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> !=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nil</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        fmt.Println(err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> letter := </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">letter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;z&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">letter++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        fmt.Printf(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;%c: %d\\n&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> letter,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> counts[letter]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Linux</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 如何分割文件?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> split</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 命令来分割大文件。例如：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 10M</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> largefile.txt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> part_</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">这将把</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> largefile.txt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 按</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 10MB</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 大小分割成多个文件，前缀为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> part_。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 接口性能如何优化?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">避免频繁的类型断言：类型断言的性能较差，尽量避免在性能关键路径中频繁使用。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">接口缓存：尽量避免在接口类型的集合中进行频繁的类型转换操作。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">具体类型替代接口：在性能敏感的地方，考虑使用具体类型而非接口，以避免接口的额外开销。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">11.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 什么情况会全表扫描?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">没有索引：查询条件没有对应的索引，数据库只能扫描整个表。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">不使用索引：查询条件虽然有索引，但由于查询条件设计不合理（比如范围查询），数据库无法利用索引。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">强制全表扫描：有时为了避免不合理的索引使用，数据库可能强制执行全表扫描。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 主从同步的原理?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 还有什么相关的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 文件?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">主从同步原理：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">主服务器将修改写入到二进制日志（binlog），然后从服务器读取</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> binlog</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 并执行相应的操作以保持数据一致性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">相关</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 文件：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">binlog：记录所有对数据库的修改操作（INSERT、UPDATE、DELETE）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">relay</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log：从服务器读取并执行的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> binlog</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 内容。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log：记录</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 启动、停止以及错误信息。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slow</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> query</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log：记录执行时间较长的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查询。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">13.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分布式锁的原理?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">原理：分布式锁用于在多个分布式系统中确保同一时刻只有一个系统或服务能够访问某资源。常见的实现方式包括：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">基于数据库的锁：通过数据库表记录锁状态，其他节点通过查询锁表来竞争资源。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">基于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的锁：使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SETNX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 命令或者</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redlock</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 算法来实现分布式锁。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">基于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Zookeeper</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的锁：通过创建临时有序节点来实现分布式锁。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="腾讯二面" tabindex="-1"><a class="header-anchor" href="#腾讯二面"><span>腾讯二面</span></a></h2><p><strong>项目拷打15分钟</strong></p><ol><li>Kafka的消息丢失和消息重复消费。</li><li>Kafka和Rabbitmq的区别在哪？（架构、推和拉）</li><li>拉的模式有什么好处（控制消费速度）</li><li>使用分布式锁的过程中应用挂了？</li><li>优雅启停+defer</li><li>使用过期时间+自动续期</li><li>对象存储和文件存储的主要区别是什么？</li><li>分片上传是怎么实现的（文件合并hash一致性校验，引出文件秒传）</li><li>邮箱验证码功能怎么实现的。（redis+邮箱组件）</li><li>jwt的格式。加密算法、内容、过期时间</li><li>讲一下defer的原理</li><li>讲一下map的底层结构</li><li>map中hash冲突怎么解决（链表、红黑树）</li><li>讲一下go性能调优的案例（pprof，线程日志）</li><li>通过线程日志延伸出，怎么看一个线程在线程日志里是卡在循环还是事件等待？</li><li>线程日志上面会有标记。</li><li>讲一下mysql的事务隔离级别？</li><li>解释一下什么是可重复读？</li><li>事务实现的底层原理？</li><li>Redis持久化机制（RDB，AOF）</li><li>为什么持久化的时候是fork子进程处理</li><li>讲一下docker实现容器的基本原理</li><li>用过其他容器运行时吗</li><li>K8s有哪些组件？</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka的消息丢失和消息重复消费</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消息丢失：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">生产者端丢失：可能发生在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的生产者在消息成功发送前失败，且没有开启足够的重试机制（如设置</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> acks=all）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消费者端丢失：消费者读取了消息并处理完，但处理未完成时发生故障，且未提交消费进度。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决方案：开启生产者的重试机制，使用合适的消费者提交策略（例如“手动提交”偏移量）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消息重复消费：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消费者多次消费同一条消息。发生的原因包括消费者重复读取已提交的消息、偏移量的回退或系统重启。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决方案：使用“幂等生产者”特性和“精确一次”语义，消费者记录偏移量并保证幂等消费。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka和RabbitMQ的区别（架构、推和拉）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Kafka：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">架构：Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是分布式流平台，支持高吞吐量的日志存储和消息传递。数据是以日志的形式存储到磁盘上的，消费者按需读取。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">拉模式：消费者定期从</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中拉取消息。适合高吞吐量的场景。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">顺序消费：消息顺序保证在单个分区内。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RabbitMQ：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">架构：RabbitMQ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是传统的消息队列系统，基于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> AMQP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 协议，支持消息的路由、发布-订阅和工作队列模式。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">推模式：消费者从</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RabbitMQ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中推送消息。适合需要实时消息传递的场景。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消息路由：支持复杂的路由规则，适合多种消息传递模式。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 拉模式的好处（控制消费速度）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">控制消费速度：消费者控制从消息队列拉取消息的频率和速度，而不是被推送控制。可以根据系统负载调整消费速率，避免消息堆积。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">高效利用资源：拉模式让消费者可以主动请求数据，控制资源的分配，避免系统过载。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用分布式锁的过程中应用挂了？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">问题：应用崩溃或挂起时，分布式锁可能未释放，导致其他服务无法获取锁，出现死锁。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决方案：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">超时设置：为分布式锁设置过期时间，确保在应用崩溃时锁会自动释放。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">看门狗机制：应用持有锁时，定期刷新锁的有效期。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 优雅启停+defer</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">优雅启动：确保服务初始化完成后再开始处理请求，通常需要等待外部依赖（如数据库、缓存等）就绪。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">优雅停机：确保正在处理的请求完成后再关闭服务，避免中断。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 关闭资源、解除注册服务等清理工作：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cleanup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    startServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用过期时间+自动续期</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">过期时间：对于缓存或锁，设置过期时间防止资源无限占用。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">自动续期：在资源还需要占用时，自动延长过期时间。常用于分布式锁，避免在操作过程中锁被释放。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">实现方法：定时器定期检查并延长过期时间，或者采用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> expire</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 命令。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 对象存储和文件存储的主要区别是什么？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">文件存储：传统的文件系统（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NFS、SAN），文件存储以目录树的结构组织，适合存储大量的小文件。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">对象存储：对象存储（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> AWS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> S3）是以对象的形式存储数据，没有目录结构。每个对象有一个唯一的标识符，适合存储大文件，具有高扩展性和持久性。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分片上传是怎么实现的（文件合并、hash一致性校验，引出文件秒传）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">分片上传：大文件分成多个小块（片段），每个片段单独上传，上传完毕后服务器将这些片段合并为一个完整的文件。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">哈希一致性校验：上传每个分片时，计算哈希值并校验数据一致性，确保文件没有丢失或损坏。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">文件秒传：通过文件的哈希值，检测文件是否已经上传过，如果上传过则跳过上传过程，直接返回。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 邮箱验证码功能怎么实现的（Redis+邮箱组件）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">流程：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">生成验证码并发送到用户邮箱。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">将验证码存储到</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis，并设置过期时间（如</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分钟）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">用户提交验证码时，先从</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中获取验证，并与用户输入的验证码进行对比。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 邮件发送组件（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SendGrid,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SMTP）发送验证码邮件，Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 缓存验证码用于快速验证。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JWT的格式。加密算法、内容、过期时间</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">格式：JWT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 由三部分组成：头部（header）、载荷（payload）、签名（signature）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">头部：通常包含</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alg（加密算法）和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> typ（token</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 类型）信息。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">载荷：包含声明（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sub、exp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">签名：用密钥对头部和载荷进行加密，确保数据未被篡改。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">加密算法：通常使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HS256（HMAC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SHA-256）或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RS256（RSA）等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">过期时间：通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 字段设置</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JWT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的过期时间。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">11.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 讲一下defer的原理</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">原理：defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 语句会延迟函数调用直到外围函数返回时执行，且会按照</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LIFO（后进先出）顺序执行。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在调用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 时，传入的参数会在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 执行时计算（而不是在声明时计算）。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 讲一下map的底层结构</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">底层实现：Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是基于哈希表实现的。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">哈希表的桶（bucket）存储数据，使用哈希函数将键映射到桶中。桶内的数据以链表的形式存储，若有多个相同哈希值的数据，会出现哈希冲突。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">13.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map中hash冲突怎么解决（链表、红黑树）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">链表：传统的哈希冲突解决方式，通过在同一个桶中使用链表来存储多个具有相同哈希值的元素。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">红黑树：Go</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.18</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 版本以后，当一个桶中的元素过多时，哈希冲突会通过红黑树进行解决，以减少查找时间复杂度。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">14.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 讲一下go性能调优的案例（pprof，线程日志）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pprof：使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pprof</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 包来收集和分析性能数据，如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU、内存、goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例：go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tool</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pprof</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 用于分析</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和内存的性能瓶颈。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程日志：查看</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 在某时刻的状态，可以帮助定位死锁、卡住的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等问题。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">15.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 通过线程日志延伸出，怎么看一个线程在线程日志里是卡在循环还是事件等待？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">卡在循环：线程日志中，看到</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 一直在执行某一函数的相同代码行，且没有其他阻塞操作。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">事件等待：线程日志中，goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会显示在某个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> select</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> chan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 操作上，表明它正在等待事件。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">16.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 线程日志上面会有标记</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程日志中的标记通常指示每个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的状态，常见的标记包括</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> running、waiting、sleeping</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等，用于帮助分析线程的行为。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">17.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 讲一下</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的事务隔离级别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">隔离级别：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">READ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> UNCOMMITTED：允许脏读（读取未提交事务的数据）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">READ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> COMMITTED：不允许脏读，但可能出现不可重复读。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">REPEATABLE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> READ：不允许脏读和不可重复读，但可能出现幻读。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="腾讯一面-校招" tabindex="-1"><a class="header-anchor" href="#腾讯一面-校招"><span>腾讯一面（校招）</span></a></h2><ol><li>map怎么去做并发安全</li><li>外层的协程能捕获子协程的panic吗？</li><li>panic都会被捕获吗？哪些panic不会捕获？</li><li>slice和数组的区别？底层结构？</li><li>go哪些内置类型是并发安全的？</li><li>go的结构体可以嵌套组合吗？</li><li>两个结构体可以等值比较吗？</li><li>你如何理解interface类型</li><li>1.18版本后interface有什么增强？</li><li>interface可以进行等值比较吗？</li><li>说说逃逸分析</li><li>channel有缓冲和无缓冲的区别</li><li>map并发访问会怎么样?这个异常可以捕获吗？</li><li>GMP模型</li><li>GMP模型中什么时候把G放全局队列？</li><li>go的gc</li><li>gc扫描是并发的吗？</li><li>gc中的根对象是什么？</li><li>项目中etcd用来干什么的？</li><li>mysql索引B＋T</li><li>索引的优缺点</li><li>redis用来做什么的?</li><li>用户信息怎么存的？都走缓存吗？</li><li>redis过期淘汰策略</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map怎么做并发安全</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 原生的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是不并发安全的，在多个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中并发读写会导致程序崩溃或不确定行为。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决方案：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync.Mutex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync.RWMutex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来加锁同步访问。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync.Map，Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 提供的并发安全的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map，适合在多个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中共享。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">代码示例：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mu</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync.Mutex</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map[string]int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> safeMapAccess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">key</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    mu.Lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mu.Unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> m[key]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 外层的协程能捕获子协程的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> panic</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">外层协程无法捕获子协程的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> panic。Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> panic</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是局部的，只在发生</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> panic</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中生效。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果你想捕获子协程的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> panic，需要在子协程内使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> recover</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来处理。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> recover</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> !=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nil</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            fmt.Println(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Recovered from panic:&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    panic(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Something went wrong!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> panic都会被捕获吗？哪些panic不会捕获？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">panic</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会在程序的调用栈中逐层向上冒泡，直到有</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> recover</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 捕获到为止。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">不能捕获的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> panic：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 函数中发生的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> panic，并且没有</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 捕获，程序会直接退出。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果在协程外层没有</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或者</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> recover，则也无法捕获。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> panic</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 发生在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 启动过程中，外层的主线程无法捕获。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> slice和数组的区别？底层结构？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数组是固定长度的类型，一旦定义后长度不可改变，大小为编译时已知，不能动态扩展。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">切片</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (slice) 是对数组的抽象，提供了动态扩展的能力，底层是一个指向数组的指针，切片的长度和容量是可以动态变化的。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">底层结构：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数组：连续的内存块，长度固定。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">切片：包含指针（指向底层数组）、长度和容量。切片指向的是数组的一部分，可以动态增长。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go哪些内置类型是并发安全的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sync.Map：Go</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.9</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 引入，专为并发设计的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 类型，适合并发读写。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">atomic</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 包中的原子操作：如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> atomic.Int32、atomic.Int64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Channel（只要操作是同步的，无论有无缓冲，channel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 在单个操作时是并发安全的）。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go的结构体可以嵌套组合吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可以，Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 支持结构体的嵌套（组合），允许一个结构体作为另一个结构体的字段。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例：</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Address</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> struct</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Street</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    City</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   string</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Person</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> struct</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    string</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Address</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 匿名字段，自动嵌套</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 两个结构体可以等值比较吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可以，Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 支持结构体的比较，只要结构体中的所有字段都可以比较。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">不能比较的情况：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">包含无法比较的类型（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> func、map、slice）的结构体不能比较。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例：</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Person</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> struct</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Age</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  int</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">p1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Person{Name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Alice&quot;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Age:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">p2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Person{Name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Alice&quot;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Age:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fmt.Println(p1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> p2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  // true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 你如何理解interface类型</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">接口（interface）是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中的一个类型，代表一组方法的集合。类型可以实现接口，而不需要显式声明。接口是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的核心特性之一，它使得</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 支持多态。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例：</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Speaker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> interface</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Speak</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() string</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Person</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> struct</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (p </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Speak</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() string { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, &quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> p.Name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Speaker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Person{&quot;Alice&quot;}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 隐式实现</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fmt.Println(s.Speak(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))  // 输出 &quot;Hello, Alice&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1.18版本后interface有什么增强？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.18</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 引入了类型参数（泛型），使得接口支持类型参数化。这允许你在接口中使用泛型类型，提高了灵活性和可复用性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">另外，type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> parameters</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可以用于接口中作为类型约束。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例：</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Adder[T</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> any]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> interface</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Add(a,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) T</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> interface可以进行等值比较吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可以，但有一些限制：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">接口值是比较的对象时，接口内部的类型和值都必须相同。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">接口值为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nil</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的时候需要特别注意，nil</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 接口与非</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nil</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 接口是不同的。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">11.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 说说逃逸分析</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">逃逸分析是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 编译器的一项优化，用来确定一个变量是否需要分配到堆上。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">栈分配：如果一个变量仅在函数内部使用并且不逃逸到函数外部，则可以分配到栈上。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">堆分配：如果一个变量的地址会在函数外部使用，或者在多个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中共享，则需要分配到堆上。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> channel有缓冲和无缓冲的区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">无缓冲</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> channel：发送操作会阻塞，直到接收方准备好接收数据。适用于同步任务。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">有缓冲</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> channel：有固定大小的缓冲区，发送方只有在缓冲区满时才会阻塞，接收方只有在缓冲区为空时才会阻塞。适用于解耦任务。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">13.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map并发访问会怎么样?这个异常可以捕获吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果多个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 同时读写一个普通的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map，会导致程序崩溃。Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 本身没有提供机制来捕获这类错误，因此必须通过加锁来保证并发安全。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">14.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GMP模型</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GMP（Goroutine、Scheduler、Processor）是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的运行时调度模型。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">G：goroutine，是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中的轻量级线程。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">M：机器线程，实际执行任务的操作系统线程。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">P：处理器，是执行</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的上下文。每个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> P</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可以处理多个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> G。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GMP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 调度的目标是提高性能，避免过多的线程创建开销。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">15.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GMP模型中什么时候把G放全局队列？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果当前</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> P</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 上没有可执行的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> G（goroutine），则</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> G</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会被放到全局队列（Gqueue）等待分配到其它</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> P</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 上去执行。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">16.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go的GC</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 标记-清除算法进行垃圾回收。GC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会在后台自动进行，通过标记活动对象并清除不再引用的对象来回收内存。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1.5+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 引入了并发</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GC，通过分代收集和并发标记/清除来减少停顿时间。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">17.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GC扫描是并发的吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">是的，Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是并发的。它在后台并发地进行垃圾回收，尽量避免长时间停顿应用。GC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 三色标记算法，并结合</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 并发标记</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来提高回收效率。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">18.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GC中的根对象是什么？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">根对象是垃圾回收的起始点，包括：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">活跃的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 栈</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">全局变量</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">本地变量（如果它们在堆上分配）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">19.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 项目中etcd用来干什么的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">etcd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是一个分布式的键值存储系统，通常用于存储配置数据、服务发现、分布式锁等。它的强一致性和高可用性使其成为分布式系统中常用的基础设施组件。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">20.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL索引B＋T</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">B+树是一种平衡的树数据结构，是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 默认的索引结构。它有以下特点：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">所有值都在叶子节点，叶子节点形成一个链表。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">内部节点只存储键，用于索引查找。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">21.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 索引的优缺点</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">优点：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">提高查询效率，特别是对于范围查询和排序。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可以加速数据的检索操作。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">缺点：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">占用更多的内存。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">插入、更新、删除操作较慢，因为需要更新索引。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">22.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis用来做什么的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是一个高性能的键值对存储系统，通常用来做缓存、消息队列、会话存储、排行榜等。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">23.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 用户信息怎么存的？都走缓存吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">通常用户信息存储在数据库中，缓存用于存储常用数据和提高访问速度。大部分场景下，缓存优先，通过缓存减少数据库负载。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">24.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis过期淘汰策略</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">LRU：最近最少使用淘汰。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TTL：设置过期时间，时间到期自动删除。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">LFU：最不常用淘汰策略。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="腾讯二面-校招" tabindex="-1"><a class="header-anchor" href="#腾讯二面-校招"><span>腾讯二面（校招）</span></a></h2><ol><li>会什么语言？</li><li>tcp和udp的本质区别</li><li>tcp可靠通信怎么实现的</li><li>说一说拥塞控制</li><li>滑动窗口的作用</li><li>什么是粘包，怎么解决</li><li>堆和栈有什么区别</li><li>进程的进程空间是怎么样的？</li><li>进程，线程，协程的区别</li><li>链表额线性表的区别</li><li>有序双向链表如何高效查询？</li><li>kafka如何实现高吞吐的？</li><li>介绍最近的项目</li><li>缓存击穿，雪崩，穿透</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会什么语言？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">用户专注于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Golang</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 开发，也可能有其他编程语言的知识和经验，具体可以进一步确认。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TCP和UDP的本质区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TCP（传输控制协议）是一种面向连接的协议，提供可靠的数据传输。它保证数据的顺序和完整性，使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 三次握手</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 建立连接，并在数据传输中进行重传、校验和流量控制。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">UDP（用户数据报协议）是无连接的协议，传输时不保证数据的顺序或完整性，适用于对实时性要求较高的场景，如视频流、在线游戏等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TCP可靠通信怎么实现的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可靠性通过以下几种机制实现：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">三次握手：确保连接的双方都能确认彼此的存在。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据重传：丢失的数据包会通过重传机制重新发送。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">序列号：通过序列号保证数据包的顺序。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">校验和：每个数据包都会进行校验，确保数据的完整性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">确认应答（ACK）：接收方确认接收到数据后发送</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ACK</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 信号。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">流量控制：通过滑动窗口机制控制发送方的发送速率。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 说一说拥塞控制</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">拥塞控制是为了避免网络中出现过多的流量，导致网络拥塞或崩溃。TCP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用以下几种策略：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">慢启动：初始时发送速度较慢，每次成功的包确认后，增加发送速率。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">拥塞避免：当检测到网络拥塞时，降低发送速率。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">快速重传：在丢包时迅速重传，而不是等待超时。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">快速恢复：丢包后，恢复发送速率的过程。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 滑动窗口的作用</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">滑动窗口机制主要用于流量控制，限制发送方的发送速率。接收方会向发送方告知自己可以接收的数据量，发送方根据接收方的反馈调整发送的数据量。窗口的大小可以动态调整，以适应当前网络状态。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 什么是粘包，怎么解决</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">粘包指的是在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TCP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 通信中，由于数据包的边界不明确，多个包被一起发送到接收端，导致接收方无法正确区分数据包的边界。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决办法：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">固定长度包：发送数据包时固定每个包的长度。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">分隔符：在数据包之间添加特定的分隔符，接收端根据分隔符识别包边界。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">长度字段：每个包前面加上表示数据包长度的字段。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 堆和栈有什么区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">栈：由操作系统自动管理，用于存储局部变量、函数调用等。栈内存分配和回收速度快，但容量有限。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">堆：用于动态分配内存，程序员需要手动管理（在一些语言中是由垃圾回收机制来管理）。堆内存的管理更灵活，容量大，但性能较栈慢。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 进程的进程空间是怎么样的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">进程空间是每个进程独立的内存区域，通常包括：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">代码段：存储程序代码。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据段：存储程序运行时使用的全局变量、静态变量。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">堆：动态分配内存区域。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">栈：存储函数调用相关的局部变量和控制信息。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">内核空间：操作系统内核使用的内存空间。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 进程，线程，协程的区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">进程是操作系统分配资源的最小单位，每个进程拥有独立的内存空间。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程是进程中的执行单元，共享进程的内存空间。线程之间的通信相对简单，但线程切换开销较大。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程是比线程更轻量的执行单元，它们共享线程的栈内存，并由程序调度器管理。协程切换开销小，适用于大量并发任务。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 链表和线性表的区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">链表是一个由节点组成的数据结构，每个节点包含数据和指向下一个节点的指针。链表的插入和删除操作时间复杂度为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> O</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">，但随机访问效率差。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线性表是一个数据元素按顺序排列的数据结构，包括数组和链表。链表是线性表的一种实现形式。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">11.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 有序双向链表如何高效查询？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">有序双向链表可以通过从头或尾部查找来提高查询效率，通常会使用指针来遍历链表。对于高效查询，可以通过二分查找（在某些情况下）或引入索引等机制来优化查询速度。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka如何实现高吞吐的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 高吞吐的实现依赖于以下几个关键因素：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">顺序写入：Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 优化了磁盘的顺序写入操作，相比随机写入，顺序写入可以极大提高吞吐量。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消息压缩：通过压缩消息（如使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Snappy、LZ4</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等算法），减少了网络和磁盘的负载。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">分区和副本机制：Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 通过将消息分区，并利用副本保证高可用，且可以实现数据的并行处理和存储。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">批量处理：Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 支持将多个消息打包成一个批量发送，提高了网络吞吐。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">13.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 介绍最近的项目</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">最近的项目涉及到</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Golang</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kubernetes，主要是开发和部署后端微服务，使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 做消息队列，解决了高并发数据处理的问题。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">14.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 缓存击穿，雪崩，穿透</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">缓存击穿：缓存中的某个热点数据失效，导致大量请求直接打到数据库上，造成数据库压力过大。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决方法：使用互斥锁、请求合并、设置合理的缓存过期时间。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">缓存雪崩：大量缓存同时失效，导致大量请求直接访问数据库，可能导致数据库崩溃。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决方法：缓存的过期时间错开，使用预热策略。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">缓存穿透：查询一个不存在的数据，缓存和数据库都没有，导致每次查询都去数据库查询。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决方法：对不存在的数据设置一个较短的缓存时间，或者缓存空数据。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="腾讯三面-校招" tabindex="-1"><a class="header-anchor" href="#腾讯三面-校招"><span>腾讯三面（校招）</span></a></h2><ol><li>项目中比较有挑战性的事？</li><li>什么是伪随机？</li><li>c＋＋里面的继承和虚函数，抽象封装，和go的interface有什么区别？</li><li>为什么go不是传统意义上的面向对象语言？</li><li>c＋＋多重继承可能导致循环继承，go用interface实现有这种问题吗？</li><li>单例模式？什么情况用饿汉模式，什么时候用懒汉模式？</li><li>表的主键用什么类型的字段？用字符串不可以吗？</li><li>消息队列是什么?</li><li>有了解过其他消息队列吗？</li><li>kafka你们是怎么部署的呢？</li><li>能说一说你们怎么使用devops的吗？</li><li>不用kafka可以吗？</li><li>ES是干什么的？</li><li>前后端通信用的什么协议？</li><li>grpc相比http的优势在什么地方呢？</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 项目中比较有挑战性的事？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">项目中比较具有挑战性的部分通常是如何优化高并发的数据处理和网络通信。在某个项目中，我们使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 作为消息队列时，需要确保消息的顺序和高吞吐量，同时要处理</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 消费者负载均衡</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 消息重复消费</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 问题，这需要做大量的性能测试和容错处理。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 什么是伪随机？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">伪随机是指由算法生成的随机数，它看起来是随机的，但实际上是可预测的。伪随机数的生成通常依赖于初始种子（种子不同，生成的伪随机数也不同）。常见的伪随机生成算法有</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 线性同余法</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 梅森旋转算法。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C++里面的继承和虚函数，抽象封装，和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> interface</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 有什么区别？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C++的继承和虚函数：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 支持类的继承，使用虚函数（virtual）来实现多态。基类的虚函数可以在派生类中被重写，并通过基类指针或引用进行动态绑定。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go的接口：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 不支持传统的继承，而是通过接口来实现多态。类型不需要显式声明实现了某个接口，Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会自动检测类型是否实现了接口的所有方法。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">区别：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 采用静态继承和虚函数机制，而</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 更加灵活，接口实现是隐式的，不需要继承关系。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 允许多重继承，而</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 通过组合和接口避免了多重继承的问题。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 为什么Go不是传统意义上的面向对象语言？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 并不完全符合传统面向对象语言（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C++）的定义，原因包括：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">没有类：Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用结构体和接口来代替类的功能。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">没有继承：Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 不支持类的继承，而是通过组合和接口来实现代码重用。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">没有访问控制：Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的成员字段首字母大小写决定了其访问权限，但没有类似</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> private</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> protected</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的明确访问修饰符。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C++多重继承可能导致循环继承，Go用interface实现有这种问题吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C++多重继承问题：C++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中的多重继承可能导致循环继承或菱形继承问题，产生二义性。C++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 通过虚拟继承来解决这个问题。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go中的接口：Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 不支持多重继承，因此不会出现循环继承的问题。Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的接口实现是隐式的，避免了继承链上的复杂性和问题。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 单例模式？什么情况用饿汉模式，什么时候用懒汉模式？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">单例模式：确保某个类只有一个实例，并提供全局访问点。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">饿汉模式：在类加载时就创建实例，线程安全，但可能会浪费资源。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">懒汉模式：在第一次需要时创建实例，适用于实例化开销较大或资源密集型对象的情况。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用饿汉模式：当你能确定类的实例化不依赖外部条件，且加载时没有性能问题时。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用懒汉模式：当实例化较为昂贵或初始化过程依赖外部条件时。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 表的主键用什么类型的字段？用字符串不可以吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">通常情况下，主键字段使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 整数类型（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int、bigint）因为其具有较高的性能和存储效率。字符串虽然可以作为主键，但会增加存储空间和查询开销。对于需要全局唯一标识符的情况，可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> UUID。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 消息队列是什么？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消息队列是一种通信机制，允许不同系统或不同组件之间异步地传递消息。消息队列可以解耦系统，提供更高的可扩展性和容错能力。常见的消息队列系统有</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RabbitMQ、Kafka、ActiveMQ。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 有了解过其他消息队列吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">是的，除了</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka，我们还使用过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RabbitMQ、RocketMQ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等消息队列系统。每种消息队列都有其特点：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RabbitMQ：基于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> AMQP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 协议，支持复杂的路由和消息确认，适合高可靠性场景。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RocketMQ：阿里开源的消息队列，提供高吞吐量和低延迟的能力，适用于大规模分布式系统。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka你们是怎么部署的呢？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 通常部署在多个节点上以实现高可用性。我们会部署一个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 集群，通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Zookeeper</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 管理集群的元数据。为了确保高吞吐量和容错性，会将消息进行</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分区，并在不同节点之间</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 副本。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">11.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 能说一说你们怎么使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DevOps</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">我们使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DevOps</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来自动化软件开发和运维流程，包括：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CI/CD：通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Jenkins、GitLab</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CI</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GitHub</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Actions</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 实现自动化构建、测试和部署。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">容器化：使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来打包应用程序，确保开发和生产环境的一致性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Kubernetes：使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 部署和管理容器化应用，实现自动化的扩展、负载均衡和高可用性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">监控：通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Prometheus</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Grafana</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 进行系统监控，并结合</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ELK</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Stack（Elasticsearch、Logstash、Kibana）进行日志分析。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 不用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可以吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">当然可以，消息队列并非必需。如果业务场景中没有分布式系统、异步消息处理、解耦需求等，那么可以不使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka，转而使用传统的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 数据库</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HTTP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 请求</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等机制。但对于高吞吐量、分布式环境下，Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 能提供很好的性能和可靠性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">13.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ES是干什么的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Elasticsearch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ES) 是一个开源的全文搜索和分析引擎，适用于实时搜索和分析大规模数据。它广泛应用于日志分析、网站搜索、数据挖掘等场景。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">14.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 前后端通信用的什么协议？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">我们通常使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HTTP/HTTPS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 协议进行前后端通信，前端通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RESTful</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> API</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GraphQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 与后端进行数据交换。在某些实时性要求较高的场景下，使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> WebSocket</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来实现双向通信。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">15.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gRPC相比HTTP的优势在什么地方呢？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gRPC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 相比传统的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HTTP/REST</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 在以下几个方面具有优势：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">性能：gRPC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 基于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Protocol</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Buffers</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 进行高效的序列化，性能比</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JSON</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 更高。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">双向通信：gRPC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 支持双向流，允许客户端和服务器之间进行实时通信。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">强类型：gRPC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IDL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> （接口定义语言）来定义服务，具有强类型，易于生成客户端和服务端代码。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">跨语言支持：gRPC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 支持多种编程语言，可以轻松实现跨语言通信。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="腾讯qq一面" tabindex="-1"><a class="header-anchor" href="#腾讯qq一面"><span>腾讯QQ一面</span></a></h2><ol><li>自我介绍</li><li>算法：20有效括号，240搜索二维矩阵Ⅱ</li><li>项目在运行了吗？数据表的设计？简单画一下</li><li>数据库外键关联不同表吗？</li><li>抢单的设计是怎么做的？</li><li>Redis里缓存了所有悬赏的订单？</li><li>怎样防止多人抢单？没有很理解递减是怎么实现的</li><li>悬赏下单的用户？</li><li>为什么有订单数量的概念？</li><li>如果Redis抢单成功但是后面的逻辑失败怎么办？即发消息队列的失败了会怎么样？会出现什么问题？</li><li>上述问题有没有什么解决办法？</li><li>直接用Mysql实现多人抢单可以吗？</li><li>使用Mysql的话有没有不通过数量控制的方案？</li><li>上个问题相对更优雅的解决方案，如根据订单状态</li><li>QPS提升3倍，为什么只提升了3倍？所有服务搭载在个人机上，提升比较小，这样测试是不合理的</li><li>点赞是怎么设计的？点赞的底层逻辑怎么存的？</li><li>评论怎么设计的？</li><li>评论可以折叠吗？只有一个层级？</li><li>如果你考虑针对评论进行回复的话，他可能的数据表结构是怎样的？</li><li>设计完成以后怎么查这些不同层级的评论？</li><li>所以其实实现不同层级的评论只需要一个表就行了，只不过子评论要记录其对应的主评论的id</li><li>Go了解的多不多？</li><li>Java的集合大概讲一讲</li><li>ArrayList的底层怎么实现，数据结构怎么样，扩容策略是怎样的</li><li>HashMap的底层实现呢，Hash冲突怎么处理的？扩容策略？加载因子多大？为什么是0.75</li><li>Java的垃圾收集机制</li><li>新生代老年代是怎么划分的？</li><li>网络相关的HTTP了解的不多吗？Get和Post的区别？</li><li>登录请求的话用什么请求？用Get会有什么问题</li><li>从浏览器输入个网址到显示页面的过程</li><li>TCP和UDP的区别？</li><li>操作系统相关的了解吗？</li><li>Redis常用的数据结构有哪些？如果要实现一个排行榜，用什么数据结构？</li><li>如果实现分布式锁呢？什么命令？setnx</li><li>Redis实现简易的布隆过滤器是怎么实现的？</li><li>Redis常见的穿透击穿雪崩问题？</li><li>击穿的解决方案</li><li>逻辑过期的话怎么更新呢？逻辑过期的时间点有很多请求过来，是不是都会去数据库请求更新数据？</li><li>Redis的过期淘汰策略</li><li>Redis过期数据的删除策略？</li><li>Mysql的索引通常是怎么划分的？从数据结构上可以划分为哪些索引？是指这些索引数据结构不一样，比如InnoDB的？MyISAM的？哈希的？</li><li>聚簇索引和非聚簇索引的区别？</li><li>数据和索引放一起的优点</li><li>什么是回表？</li><li>Mysql事务的隔离级别</li><li>未提交读有什么问题？</li><li>什么是不可重复读？什么是幻读？</li><li>反问</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 自我介绍</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">我是一个专注于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 语言的后端开发工程师，拥有丰富的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Golang</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 开发经验，涉及的领域包括微服务架构、容器化部署、消息队列等。除了</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 语言，我也有一定的前端开发、数据库设计和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DevOps</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 实践经验。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 算法：20有效括号，240搜索二维矩阵Ⅱ</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">20.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 有效括号：通过栈来实现，逐个检查括号的匹配情况。遇到左括号就入栈，遇到右括号就从栈中弹出并检查是否匹配。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">240.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 搜索二维矩阵Ⅱ：可以利用从右上角开始的查找方式，逐步排除无效区域，时间复杂度为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> O</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">m+n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">，其中</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分别是矩阵的行和列。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 项目在运行了吗？数据表的设计？简单画一下</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果需要设计数据库表，通常会根据业务需求进行设计，保证数据的完整性和查询效率。例如设计一个“订单表”包括订单ID、用户ID、商品ID、订单状态等字段。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 数据库外键关联不同表吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">是的，数据库中的外键用于在不同表之间建立关联，确保数据的完整性。外键约束确保子表中的数据引用主表中的有效数据。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 抢单的设计是怎么做的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">抢单的设计可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来实现原子操作。例如，通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 锁</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的计数器</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来限制抢单的数量，并防止并发问题。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis里缓存了所有悬赏的订单？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">是的，通常在高并发的场景下，订单的状态可以缓存到</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中，以减少数据库的查询压力。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 怎样防止多人抢单？没有很理解递减是怎么实现的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">防止多人抢单可以通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 原子递减操作（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DECR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DECRBY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 命令）来实现。每次抢单时，数量会递减，确保抢单者不会超过上限。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 悬赏下单的用户？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">悬赏下单的用户是指发起订单请求的用户。订单信息通常会包括用户ID、商品ID、订单金额等字段。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 为什么有订单数量的概念？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">订单数量通常用于跟踪订单的状态和处理数量。例如，可以防止订单数量超过实际可处理数量，保证订单的正常流转。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 如果Redis抢单成功但是后面的逻辑失败怎么办？即发消息队列的失败了会怎么样？会出现什么问题？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中抢单成功后，消息队列发送失败，可能会导致订单状态不一致。常见的问题是订单的状态已更新，但消息未成功投递到其他服务，可能导致订单未被正确处理。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">11.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 上述问题有没有什么解决办法？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 事务</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 补偿机制</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来处理这种情况。例如，可以使用消息队列的重试机制，或将失败的消息存入死信队列（DLQ）以便后续处理。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 直接用MySQL实现多人抢单可以吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 实现多人抢单是可以的，但可能会面临性能瓶颈，特别是在高并发情况下。MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 锁机制</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可以确保数据的一致性，但会影响性能，尤其是当抢单数量较大时。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">13.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用MySQL的话有没有不通过数量控制的方案？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">不通过数量控制的方案可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 订单状态</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来控制。例如，抢单后直接将订单的状态更新为“已抢”，并且保证后续逻辑中不会对该订单进行二次抢占。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">14.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 上个问题相对更优雅的解决方案，如根据订单状态</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">更优雅的解决方案是使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 订单状态</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来控制，例如将订单状态设置为“未抢”、“已抢”或“已完成”，并在每次请求时检查订单状态，避免重复抢单。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">15.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> QPS提升3倍，为什么只提升了3倍？所有服务搭载在个人机上，提升比较小，这样测试是不合理的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">这个问题表明可能存在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 瓶颈，例如网络带宽、CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或内存资源的限制。个人机器上运行多个服务可能导致资源竞争，性能提升受限。应该在分布式环境下进行测试，以获得更准确的性能结果。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">16.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 点赞是怎么设计的？点赞的底层逻辑怎么存的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">点赞功能一般使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 存储，具体实现方式可以是：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 计数器（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> INCR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 命令）来统计点赞数。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 哈希表来记录每个用户对某个对象的点赞状态。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">17.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 评论怎么设计的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">评论通常可以设计为一个独立的表，字段包括：评论ID、用户ID、评论内容、时间戳、评论对象ID（如商品ID或帖子ID）等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">18.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 评论可以折叠吗？只有一个层级？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">评论可以设计成</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 多层级，支持折叠和展开。可以通过设置评论的父评论ID来支持树形结构。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">19.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 如果你考虑针对评论进行回复的话，他可能的数据表结构是怎样的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">回复评论的数据表结构可以包括：评论ID、父评论ID、用户ID、评论内容、时间戳等。父评论ID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 用来关联主评论，形成树形结构。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">20.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 设计完成以后怎么查这些不同层级的评论？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">查询评论时，可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 递归查询（如果使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SQL）或通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 树形结构</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来查询评论和回复。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">21.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 所以其实实现不同层级的评论只需要一个表就行了，只不过子评论要记录其对应的主评论的id</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">是的，使用一个表即可实现多层级评论。子评论通过记录父评论ID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来关联主评论。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">22.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go了解的多不多？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">是的，我有丰富的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 语言开发经验，熟悉其并发编程模型、内存管理和性能优化。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">23.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Java的集合大概讲一讲</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 集合框架包括：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">List（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ArrayList、LinkedList）：有序集合，允许重复元素。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Set（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HashSet、TreeSet）：无序集合，不允许重复元素。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Map（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HashMap、TreeMap）：键值对集合，键唯一，值可重复。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">24.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ArrayList的底层怎么实现，数据结构怎么样，扩容策略是怎样的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ArrayList</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用动态数组实现，初始容量为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 10。当容量不足时，数组会</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 扩容，通常是原容量的</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 倍。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">25.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HashMap的底层实现呢，Hash冲突怎么处理的？扩容策略？加载因子多大？为什么是0.75</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HashMap</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用数组</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 链表或红黑树实现。哈希冲突通过链表法或树化法解决。扩容策略：当填充因子超过</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.75</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 时，HashMap</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会扩容为原来的两倍。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">26.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Java的垃圾收集机制</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 垃圾收集机制基于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分代收集，将堆内存分为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 年轻代</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 老年代。年轻代使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Minor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GC，老年代使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Major</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GC。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">27.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 新生代老年代是怎么划分的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">新生代用于存储新创建的对象，老年代存储长时间存活的对象。大部分对象在新生代被回收，只有少部分存活对象晋升到老年代。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">28.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 网络相关的HTTP了解的不多吗？Get和Post的区别？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 用于请求数据，参数暴露在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> URL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中；POST</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 用于提交数据，数据放在请求体中。POST</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 比</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 更安全、数据量也较大。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">29.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 登录请求的话用什么请求？用Get会有什么问题</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">登录请求应该使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> POST，因为登录信息（如密码）需要保护，GET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会将敏感信息暴露在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> URL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">30.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 从浏览器输入个网址到显示页面的过程</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">过程包括：DNS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 解析</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">TCP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 连接</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">发送</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HTTP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 请求</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">服务器响应</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">浏览器渲染页面。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="腾讯qq二面-电话面" tabindex="-1"><a class="header-anchor" href="#腾讯qq二面-电话面"><span>腾讯QQ二面（电话面）</span></a></h2><ol><li>自我介绍</li><li>Golang协程与线程的区别</li><li>专业问题</li><li>中间漏了几个问题</li><li>Redis缓存击穿解决方案在项目中是否用过，用在什么地方</li><li>检查到key过期了，都请求数据库不就击穿了吗</li><li>怎么加锁</li><li>这个锁放在本地吗？内存里面吗？</li><li>MySQL支持的最大并发数</li><li>Redis支持的最大并发数</li><li>算法：文件里面有20亿个整数，找到前1000个最大的，要求时间复杂度尽可能低</li><li>上述算法时间复杂度多少</li><li>项目背景</li><li>Jmter压测的哪个接口</li><li>QPS</li><li>具体是怎么优化的呢</li><li>压测后qps提升了3倍，瓶颈在哪个地方，为什么不能再多了</li><li>阿里云用的是Cos服务是吧</li><li>订单超卖是什么意思</li><li>项目大概多少人参与</li><li>这个服务有几个系统</li><li>这个项目是用来给自己学校的吗？还是各个学校通用的项目？</li><li>这个项目打通了学校里面的账号体系了吗？</li><li>反问</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Golang协程与线程的区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程是轻量级的执行单元，由</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 运行时调度。协程的创建和销毁开销小，可以通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 关键字并发执行。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程是操作系统的执行单元，由操作系统调度。线程比协程更重，切换代价较大。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">区别：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程的开销远小于线程，通常可以创建成千上万的协程。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程由操作系统管理，协程由</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 运行时调度。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 专业问题</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">具体问题可以根据需要详细提问，通常涉及到技术架构、系统设计、性能优化等领域。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中间漏了几个问题</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">你可以补充或提醒漏掉的问题，我会继续回答。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis缓存击穿解决方案在项目中是否用过，用在什么地方</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决方案：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">设置</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 互斥锁（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SETNX）防止多个请求同时访问数据库。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 标记失效时间，让请求只有在缓存失效时才去数据库查询。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">应用场景：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在高并发的场景下，如商品详情页缓存中，如果商品信息过期，多个请求会同时访问数据库，我们可以用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 锁来避免多次查询。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 检查到key过期了，都请求数据库不就击穿了吗</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">为避免击穿，可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 缓存穿透</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 缓存预加载</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的策略。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">例如，设置一个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 合理的过期时间</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 过期后的重新加载，并在缓存数据过期前提前加载。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 怎么加锁</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在多线程环境下，可以使用以下方式加锁：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">互斥锁：使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync.Mutex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 锁定共享资源，确保同一时刻只有一个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可以访问该资源。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">读写锁：使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync.RWMutex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 实现多个读线程并行，写线程独占。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 这个锁放在本地吗？内存里面吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">锁通常是放在内存中，如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 内存锁</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (sync.Mutex) 用于保护内存中的共享资源。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">分布式锁（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis）用于在多台服务器上同步操作。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL支持的最大并发数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的最大并发数与</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> max_connections</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 配置项有关，默认值通常是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 151，但可以通过配置增加，理论上</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可以支持上千并发连接。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis支持的最大并发数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的最大并发数与其配置的硬件资源（CPU、内存）有关，通常可以处理数万到数十万的并发请求，具体取决于服务器的性能和配置。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 算法：文件里面有20亿个整数，找到前1000个最大的，要求时间复杂度尽可能低</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 最小堆（Min-Heap）来存储前1000个最大的整数。遍历所有数据，每次与堆顶元素比较，若大于堆顶，则替换堆顶元素并调整堆。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">时间复杂度：O(n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)，其中 n 是文件中的整数数量，k 是前1000个最大的数。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">11.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 上述算法时间复杂度多少</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">时间复杂度为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> O</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">，其中：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是整数数量（20亿）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">k</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是前1000个最大的数。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 项目背景</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">项目背景可以根据具体的业务需求和目标来定，通常包括目标用户群、项目功能、技术栈等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">13.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JMeter压测的哪个接口</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">JMeter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 通常用于压测</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> API</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 接口，具体测试的接口可能包括：登录、查询、下单等高并发操作。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">14.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> QPS</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QPS（Queries</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> per</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Second）是衡量每秒查询次数的指标，通常用于评估系统的吞吐量。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">15.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 具体是怎么优化的呢</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">优化方式：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据库优化：如增加索引、优化查询。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">缓存：使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 缓存热点数据。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">并发控制：减少锁竞争，使用分布式锁。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">异步处理：将耗时操作异步化，如消息队列。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">16.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 压测后qps提升了3倍，瓶颈在哪个地方，为什么不能再多了</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">压测后，QPS提升3倍说明系统已接近瓶颈，可能瓶颈在：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据库性能：数据库成为瓶颈，可能由于查询、连接数限制、IO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等原因。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">网络带宽：网络带宽不足，无法承载更多的请求。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">硬件资源：CPU、内存等硬件资源达到了极限。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">17.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 阿里云用的是Cos服务是吧</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">阿里云提供的是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> OSS（对象存储服务），而</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> COS（Cloud</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Object</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Storage）是腾讯云的对象存储服务。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">18.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 订单超卖是什么意思</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">订单超卖指的是在库存不足的情况下，系统仍然允许用户下单，导致最终库存不足，无法满足订单需求。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">19.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 项目大概多少人参与</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">项目团队的规模通常取决于项目的复杂度，一般中型项目的团队规模在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 5~20人</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 之间。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">20.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 这个服务有几个系统</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">通常一个项目会包含多个子系统，如用户系统、订单系统、支付系统等，具体数量视业务需求而定。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">21.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 这个项目是用来给自己学校的吗？还是各个学校通用的项目？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">项目的目标用户群体可以是特定学校，也可以是多个学校通用。具体需求可根据业务情况而定。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">22.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 这个项目打通了学校里面的账号体系了吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果涉及到多个学校，通常会有统一的账号体系（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SSO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 单点登录）来打通不同系统间的用户身份认证。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="腾讯云智" tabindex="-1"><a class="header-anchor" href="#腾讯云智"><span>腾讯云智</span></a></h2><h3 id="一面" tabindex="-1"><a class="header-anchor" href="#一面"><span>一面</span></a></h3><ol><li>自我介绍</li><li>第一个项目是实习项目吗</li><li>你在里面负责的部分</li><li>用户悬赏下单的业务流程讲一下</li><li>RabbitMQ写库失败了会怎么处理</li><li>Redis的数据与数据库里的数据是怎么保持一致的</li><li>什么时候写库什么时候写Redis，数据库中有库存吗</li><li>Redis是在哪部署的</li><li>Redis用的哪种数据类型，项目中Redis哪些地方用了</li><li>SpringCache依赖Redis，那用的是什么数据类型</li><li>登录注册是怎么实现的</li><li>什么是JWT</li><li>鉴权是怎么做的</li><li>退出登录是怎么实现的</li><li>简易短视频都负责什么？登录注册是怎么实现的</li><li>TCP的三次握手和四次挥手的过程</li><li>Time wait的作用是什么</li><li>断开连接是客户端发起还是服务端发起？服务端可以断开吗？</li><li>HTTP和HTTPS的区别</li><li>HTTPS是怎么加密的了解吗</li><li>Session，Cookie，token的区别</li><li>Session是在哪存的</li><li>进程线程协程这三个的区别</li><li>CPU调度是哪个</li><li>数据库事务的隔离级别</li><li>什么是幻读</li><li>MySQL主键索引和普通索引的区别</li><li>怎么避免回表操作</li><li>索引失效的场景</li><li>B树和B+树的区别</li><li>如何实现一个HashMap（HashMap的底层结构以及一些扩容操作）</li><li>HashMap和ConcurrentHashMap的区别</li><li>深拷贝和浅拷贝的区别</li><li>说一说使用逻辑过期解决缓存击穿问题</li><li>key逻辑过期后，与数据库的一致性怎么保证</li><li>缓存穿透问题及解决方案</li><li>ThreadLocal实现线程信息隔离说一下</li><li>用户登录以后，再请求其他接口，这时是同一个线程吗？</li><li>不把用户id放到threadlocal可以吗？</li><li>算法题</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RabbitMQ写库失败了会怎么处理</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在写库失败时，RabbitMQ通常会采取以下几种措施：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消息重试机制：通过设置</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 死信队列（DLX）和消息重试机制，RabbitMQ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会在写库失败后将消息放入死信队列，并定期重新尝试。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">事务或补偿机制：如果操作数据库的事务回滚，可能会触发</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 补偿机制</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来修复失败操作，确保系统的一致性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis的数据与数据库里的数据是怎么保持一致的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">缓存更新策略：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">写入时更新：每次数据写入数据库时，同时更新缓存。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">定期同步：使用定时任务定期从数据库同步数据到</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">异步同步：通过消息队列触发，保证缓存和数据库的一致性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 什么时候写库什么时候写Redis，数据库中有库存吗</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">写库时：主要负责保存持久化的数据，比如用户的交易数据、订单信息等，数据会直接写入数据库。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">写Redis时：用于存储频繁读取的数据，比如缓存热点数据（如用户信息、商品信息、库存等）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">库存：通常库存存储在数据库中，但为了减少数据库压力，可以在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 缓存库存，并且通过定期同步和一致性控制来确保数据一致。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis是在哪部署的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可以部署在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 本地服务器、容器化环境、云服务等不同的环境中。部署时通常使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 主从复制</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 集群模式</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来提高可用性和扩展性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis用的哪种数据类型，项目中Redis哪些地方用了</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">常用数据类型：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">字符串：用于存储简单的缓存数据。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">哈希：适合存储对象数据，如用户信息。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">列表、集合：适用于任务队列、排行榜等应用。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">有序集合：用于存储需要排序的集合，如排行榜。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">应用场景：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">存储用户信息、商品详情、热点查询数据等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SpringCache依赖Redis，那用的是什么数据类型</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Spring</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cache</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 作为缓存时，通常会使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 字符串</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 类型来缓存数据。但也可以根据需要，使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 哈希</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 列表</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等数据类型。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 登录注册是怎么实现的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">登录：用户提供用户名和密码，系统验证密码是否正确，若正确则生成一个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JWT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Session</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID，将其返回给客户端，客户端存储在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cookie</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LocalStorage</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">注册：用户填写信息后，系统验证信息的合法性，若合法，则将用户信息写入数据库，并生成初始密码或通过其他方式激活账户。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 什么是JWT</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">JWT（JSON</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Web</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Token）是一种用于认证和信息交换的开放标准。它通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 头部、载荷、签名</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 组成，常用于无状态的身份验证和信息传输。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 鉴权是怎么做的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">用户通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 用户名和密码</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 登录后，系统会生成一个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JWT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Session</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID，客户端将该令牌存储在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cookie</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LocalStorage</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中，后续的请求会携带该令牌，服务器验证令牌的有效性来完成鉴权。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 退出登录是怎么实现的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">客户端：删除存储在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cookie</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LocalStorage</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中的令牌。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">服务器：在使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JWT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 时，通常不需要主动删除令牌，只要令牌过期即可；若使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Session，服务器会清除</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Session</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 数据。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">11.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 简易短视频都负责什么？登录注册是怎么实现的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">功能：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">视频上传、播放、评论、点赞、分享、搜索等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">用户注册、登录、视频发布、评论和社交功能。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">登录注册：使用邮箱或手机号注册，用户通过邮箱验证码或短信验证码进行注册，登录时使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JWT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 进行身份验证。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TCP的三次握手和四次挥手的过程</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">三次握手：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">客户端发送</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SYN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 请求，表示请求建立连接。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">服务器回复</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SYN-ACK，表示同意连接。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">客户端发送</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ACK</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 确认，连接建立完成。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">四次挥手：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">客户端发送</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> FIN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 请求，表示数据发送完毕。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">服务器回复</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ACK</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 确认，表示准备关闭连接。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">服务器发送</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> FIN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 请求，表示数据发送完毕。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">客户端回复</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ACK</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 确认，连接关闭。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">13.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Time</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> wait的作用是什么</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Time</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Wait</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是在四次挥手后的最后状态，确保客户端接收到服务器的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ACK。它的作用是确保在最后的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ACK</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 被正确接收，防止由于延迟的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TCP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 包</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 导致数据冲突。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">14.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 断开连接是客户端发起还是服务端发起？服务端可以断开吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">连接的断开可以由客户端或服务端发起，通常服务端可以主动关闭连接。在应用层中，服务端主动关闭连接通常出现在长连接场景中。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">15.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HTTP和HTTPS的区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HTTP：超文本传输协议，数据以明文传输。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HTTPS：HTTP的安全版，通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SSL/TLS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 协议加密传输，保证数据的安全性和完整性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">16.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HTTPS是怎么加密的了解吗</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HTTPS加密：通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SSL/TLS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 协议对数据进行加密，分为三部分：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">对称加密：用于加密数据传输。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">非对称加密：用于加密对称加密的密钥交换。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数字证书：验证服务器身份，防止中间人攻击。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">17.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Session，Cookie，token的区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Session：服务器端保存会话信息，每个客户端有一个唯一的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Session</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Cookie：客户端存储信息，常用于保存</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Session</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或其他小数据。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Token：用于身份验证的令牌，如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JWT，常存储在客户端，携带用户的身份信息。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">18.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Session是在哪存的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Session</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 通常存储在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 服务器端的内存</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 数据库</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中，客户端存储一个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Session</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID，用于标识用户。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">19.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 进程线程协程这三个的区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">进程：操作系统资源分配的最小单位。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程：进程中的执行单元，共享进程资源。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程：比线程更加轻量级的执行单元，协程通过调度器管理并发执行。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">20.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU调度是哪个</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CPU调度是操作系统中的核心任务，决定哪一个进程或线程获得CPU资源。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">21.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 数据库事务的隔离级别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">READ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> UNCOMMITTED：读取未提交数据。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">READ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> COMMITTED：读取已提交数据。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">REPEATABLE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> READ：保证读取的数据不会发生变化，但可能会有幻读。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SERIALIZABLE：完全隔离，事务顺序执行。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">22.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 什么是幻读</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">幻读是指事务在读取数据时，由于其他事务的插入，导致原本不存在的数据变得可见。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">23.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL主键索引和普通索引的区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">主键索引：主键索引是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 唯一的，并且</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 不可为空，它是数据表的聚簇索引，数据存储顺序与索引顺序一致。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">普通索引：普通索引是非聚簇索引，数据存储顺序与索引顺序无关。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">24.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 怎么避免回表操作</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 覆盖索引：查询字段全部包含在索引中，避免回表。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">25.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 索引失效的场景</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> OR、LIKE（开头含</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> %）等，或者</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 函数</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 类型转换</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等，会导致索引失效。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">26.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> B树和B+树的区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">B树：每个节点可以有多个子节点，数据存储在叶子节点和内部节点中。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">B+树：所有数据存储在叶子节点中，内部节点仅作为索引，适合范围查询。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">27.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 如何实现一个HashMap（HashMap的底层结构以及一些扩容操作）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HashMap</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用数组和链表/红黑树结合的方式存储数据。通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 哈希函数</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 将键映射到数组的索引位置，冲突的键会以链表的形式存储。扩容时，哈希表大小翻倍，且重新计算哈希值。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">28.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HashMap和ConcurrentHashMap的区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HashMap</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 非线程安全</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ConcurrentHashMap</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用分段锁技术（或更先进的技术）来实现高效的线程安全。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">29.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 深拷贝和浅拷贝的区别</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">浅拷贝：只拷贝对象的引用，原对象和拷贝对象共享引用的资源。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">深拷贝：拷贝对象及其所有的引用对象，避免引用共享。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">30.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用逻辑过期解决缓存击穿问题</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">逻辑过期：将缓存设置为一定的逻辑过期时间，在缓存过期时，不立即删除，而是由后台异步更新缓存。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">31.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key逻辑过期后，与数据库的一致性怎么保证</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可以使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 缓存预热</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 后台定时同步，在缓存过期时，不会直接从数据库获取，而是通过异步更新来保证一致性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">32.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 缓存穿透问题及解决方案</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">缓存穿透：缓存和数据库都没有数据，导致每次都查询数据库。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决方案：使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 布隆过滤器</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 检查是否存在该数据，避免无效查询。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">33.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ThreadLocal实现线程信息隔离说一下</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ThreadLocal</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是每个线程独立拥有自己的变量副本，确保每个线程不会互相影响。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">34.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 用户登录以后，再请求其他接口，这时是同一个线程吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">通常情况下，HTTP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 请求是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 无状态的，每个请求可能由不同的线程处理。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">35.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 不把用户id放到threadlocal可以吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可以，但使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ThreadLocal</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可以让每个线程独立存储数据，避免在多线程环境下频繁传递用户ID，提高性能。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二面" tabindex="-1"><a class="header-anchor" href="#二面"><span>二面</span></a></h3><ol><li>自我介绍</li><li>挑一个项目聊一下</li><li>第一版方案为什么会超卖呢</li><li>Redis中的库存还没有递减完成，出现了比如OOM的情况，数据库怎么获得已经抢成功的数据？</li><li>数据库和缓存数据一致性的问题</li><li>如果数据库更新完成了，但是删除缓存时没有成功，这时会怎么办</li><li>项目有实际需求吗？还是找的课题</li><li>RabbitMQ在项目里是干嘛用的？</li><li>抢单的人怎么知道要查哪个key呢？</li><li>具体压测的数据</li><li>简易短视频是怎样的项目</li><li>反问</li></ol><h2 id="腾讯" tabindex="-1"><a class="header-anchor" href="#腾讯"><span>腾讯</span></a></h2><h3 id="某不知名组一面-电话面" tabindex="-1"><a class="header-anchor" href="#某不知名组一面-电话面"><span>某不知名组一面（电话面）</span></a></h3><ol><li>简单的自我介绍</li><li>Java判断相等使用==和使用equals的区别</li><li>Java里面接口和抽象类的区别，属性、方法、继承限制等方面回答</li><li>详细介绍下项目用户注册和登录的流程</li><li>密码存到数据库中是用的哪种方式进行的加密</li><li>不加盐的问题</li><li>登录成功以后返回的什么数据</li><li>返回的token是怎么生成的</li><li>token里面包含了什么信息</li><li>客户端和后台通信走什么协议</li><li>对于HTTP协议有多少了解</li><li>Redis提供了哪些基础的数据类型</li><li>这些数据类型底层是基于什么数据结构实现的</li><li>使用Redis做性能优化具体是怎么做的</li><li>对Linux操作系统熟悉吗</li><li>项目后台不是部署在Linux上的吗</li><li>反问</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 第一版方案为什么会超卖呢</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">超卖问题通常发生在并发访问时，多个请求几乎同时抢购库存，且库存数据更新没有及时同步，导致系统无法保证库存的正确性。可能原因包括：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Redis库存没有及时更新：多个用户几乎同时读取缓存，导致它们看到相同的库存量，进而导致超卖。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据库库存更新的延迟：在高并发的情况下，缓存和数据库之间的同步可能会滞后。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">没有合适的锁机制：没有保证在更新库存时的排他性，多个请求并发地修改库存数据。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis中的库存还没有递减完成，出现了比如OOM的情况，数据库怎么获得已经抢成功的数据？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">OOM（内存溢出）：如果</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 在库存递减过程中遇到内存不足，可以采用如下措施：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">持久化到数据库：在每次库存更新时，除了更新</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis，也同步更新数据库，防止内存问题导致数据丢失。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">补偿机制：在库存更新过程中，如果出现</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> OOM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或其他异常，系统可以通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 事务</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 消息队列</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来确保数据的可靠性，将未能正确更新的数据进行补偿。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">乐观锁：使用数据库的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 乐观锁</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 悲观锁</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 机制，确保数据一致性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 数据库和缓存数据一致性的问题</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">缓存与数据库一致性是分布式系统中的一个经典问题，常见的解决方案包括：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">双写策略：每次更新数据库时，也更新缓存。但这种方式容易导致缓存与数据库之间的数据不一致。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">缓存预热/回源策略：当缓存失效时，直接回源到数据库，重新加载数据到缓存。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">延迟删除缓存：修改数据库后，不立即删除缓存，而是等到缓存过期时再删除。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消息队列：使用消息队列来确保数据库和缓存的同步更新，例如通过消息通知来更新缓存。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 如果数据库更新完成了，但是删除缓存时没有成功，这时会怎么办</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">缓存不一致问题：如果数据库更新成功但缓存删除失败，可以采取以下措施：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">异步删除缓存：删除缓存操作可以异步执行，确保数据库更新成功后，延迟删除缓存操作，以减少缓存不一致的时间窗口。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">定期扫描缓存：可以设置定时任务或后台进程，定期检查缓存与数据库的同步情况，若发现不一致，主动去同步。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">事务机制：在一些场景下，可以使用事务机制或消息队列的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 最终一致性</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来处理缓存与数据库的不一致问题。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 项目有实际需求吗？还是找的课题</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">项目通常会有实际需求，尤其是解决高并发的业务场景，比如抢单、库存管理等。然而，如果这是一个课题，可能是为了研究特定技术（如分布式缓存、一致性、消息队列等）在实际业务中的应用。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RabbitMQ在项目里是干嘛用的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RabbitMQ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 在项目中通常用于：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">异步处理：将某些耗时操作（如发送通知、邮件、数据处理等）放入消息队列，由消费者异步处理，避免阻塞主流程。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解耦：通过消息队列的方式解耦不同模块之间的依赖，提升系统的可维护性和扩展性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">流量削峰：在高并发的场景下，使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RabbitMQ</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来缓解瞬时流量的压力，确保系统稳定运行。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 抢单的人怎么知道要查哪个key呢？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Redis中的库存数据通常是基于商品的唯一标识来存储的，比如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> product:{productId}:stock，当用户请求抢单时，系统会基于商品ID生成特定的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key，所有用户都通过相同的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来操作库存数据。通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> field，可以保证每个商品的库存数据唯一且易于管理。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 具体压测的数据</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">压测数据通常会包含以下几项：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QPS（每秒请求数）：系统每秒钟能够处理多少请求。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">响应时间：每个请求的平均响应时间，通常以毫秒为单位。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TPS（每秒事务数）：系统每秒能处理多少个事务。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">系统资源使用情况：CPU、内存、磁盘等资源的占用情况。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">并发用户数：在特定时间段内能够支持的最大并发用户数。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">吞吐量：系统处理的总数据量。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 简易短视频是怎样的项目</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">简易短视频项目：通常包括以下几个核心模块：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">用户系统：用户注册、登录、认证、个人资料管理等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">视频上传与处理：用户上传视频文件，系统进行视频格式转换、压缩等处理。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">视频播放：前端播放视频，支持快进、暂停、加载等基本功能。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">评论与互动：用户可以对视频进行评论、点赞、转发等操作。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">社交功能：用户可以关注其他用户、推荐视频等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据存储与分发：使用分布式存储方案（如对象存储）存储视频文件，并通过CDN加速分发。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二面-1" tabindex="-1"><a class="header-anchor" href="#二面-1"><span>二面</span></a></h3><ol><li>自我介绍</li><li>对面介绍自己的组，问可以接受Go语言吗？</li><li>算法：53最大子数组和，239滑动窗口最大值，136只出现一次的数字</li><li>进程和线程是怎么理解的？</li><li>协程是什么意思？这三者对比一下</li><li>在设计程序的时候如何抉择呢？比如应该用多进程的方式还是单进程多线程的方式？</li><li>线程池中的核心参数</li><li>线程池的执行流程</li><li>开发过程中用过线程池吗？线程池的这几个参数是如何确定的？</li><li>为什么是n+1和2n和？</li><li>你的项目你认为是CPU密集型还是IO密集型</li><li>项目v2要上线了，项目v1中还有任务在线程池中，这个时候要怎么办呢？【回答的shutdown和shutdownNow的区别，使用shutdown，等待任务队列里的任务执行完再关闭v1版本的项目】</li><li>线程的超时时间设置</li><li>你的项目的请求上限是多少？上限多少是右哪些因素决定的？</li><li>springBoot可以调吗，让他的上限多一些</li><li>Java中的反射解决的问题？使用的场景？</li><li>C/C++不支持反射，了解过为什么有些语言持支反射有些不支持反射吗？有什么编程语言的特性决定了他可以用反射吗？</li><li>Java中如何判断一个对象可以被回收了？</li><li>判断对象是不是被引用标记了，扫一遍的时间可能会非常长，如何来优化它或者现有的机制是如何做的？</li><li>如何入手MySQL的优化？看Explain的什么内容？</li><li>索引的底层数据结构是什么样子？</li><li>B+树为什么比较合适？为什么不用二叉树？红黑树？B树？</li><li>MySQL里开启了两个事务，第一个事务插入一条记录并返回了id，此时这个事务还没有提交，第二个事务可以查询到id为2的记录吗？什么隔离级别可以查到，什么隔离级别查不到？</li><li>Redis是单线程的为什么比较快？【内存，多线程切换，IO多路复用，Redis的数据结构】</li><li>怎么理解IO多路复用？相对于什么IO多路复用性能更高</li><li>git的合并的命令？git merge 和 git rebase 用过吗？</li><li>假设一个场景：我合入了一个版本，其他同学在之后也合入了三四个版本，这个时候发现我合入的版本有bug，需要把这个撤回，要怎么做呢？</li><li>反问</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 算法：53最大子数组和，239滑动窗口最大值，136只出现一次的数字</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">53.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 最大子数组和：问题要求找出数组中和最大的连续子数组，使用动态规划来解决。设</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dp[i]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 为以第</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 个元素结尾的最大子数组和。公式为：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">css</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dp[i]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nums[i],</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dp[i-1]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nums[i]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">结果为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 数组中的最大值。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">239.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 滑动窗口最大值：使用双端队列（deque）存储滑动窗口中的最大元素的索引，确保队列中的元素按降序排列。每次窗口移动时，更新队列。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">136.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 只出现一次的数字：使用异或运算的特性：相同的数字异或结果为零，任何数字与零异或结果是该数字本身。将数组中的所有元素异或，最终结果即为只出现一次的数字。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 进程和线程是怎么理解的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">进程：是操作系统分配资源的基本单位，每个进程拥有独立的内存空间。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程：是进程中的执行单元，同一个进程中的线程共享内存空间和资源。线程是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 调度的最小单位。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 协程是什么意思？这三者对比一下</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程：是一种轻量级的线程，调度由程序员控制，通常在一个线程内运行多个协程。与线程相比，协程更轻便，创建和销毁的开销更小。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">进程与线程的区别在于资源的独立性，协程则通过单线程来实现多任务，优于传统的多线程。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">对比：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">进程：资源独立，开销大，互相隔离。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程：共享进程资源，开销较小，调度依赖操作系统。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程：轻量级线程，调度由程序员控制，不依赖操作系统，适用于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> I/O</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 密集型任务。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 在设计程序的时候如何抉择呢？比如应该用多进程的方式还是单进程多线程的方式？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">多进程适合</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 密集型</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 任务，因为它能有效利用多核</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU，每个进程独立执行，避免了</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GIL（全局解释器锁）的问题。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">单进程多线程适合</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> I/O</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 密集型</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 任务，减少上下文切换和内存开销，同时可以通过线程池控制并发量。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 线程池中的核心参数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">核心线程数：线程池中始终保持的线程数量。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">最大线程数：线程池中可以创建的最大线程数。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程存活时间：非核心线程在空闲时最大存活时间。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">队列长度：任务队列的长度，用于缓存等待执行的任务。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">拒绝策略：当线程池已满且队列也满时的处理方式，如抛出异常、丢弃任务等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 线程池的执行流程</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">当任务提交到线程池时，线程池首先判断是否有空闲线程处理该任务。如果没有且当前线程池中的线程数小于最大线程数，则创建新线程执行任务。如果线程池已达到最大线程数，则任务将被放入任务队列，等待执行。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 开发过程中用过线程池吗？线程池的这几个参数是如何确定的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程池的核心参数根据任务的特性来调整：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">核心线程数：根据并发量、任务的响应时间和硬件资源来调整。对于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> I/O</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 密集型任务，核心线程数可以设置较大。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">最大线程数：根据系统的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 核数和可用资源决定，避免过多线程造成</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或内存的压力。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">队列长度：根据系统的处理能力和任务的大小来决定，长队列有助于平滑流量，但可能增加延迟。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 为什么是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> n+1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 2n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">这个问题可能涉及到计算机算法的复杂度。一般来说，n+1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是常数时间复杂度的一部分，2n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 通常是指某些问题的双倍处理时间，或者是递归分治法中的两个子问题。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 你的项目你认为是CPU密集型还是IO密集型？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 密集型：涉及大量的计算操作，如加密、数据分析、图像处理等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">I/O</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 密集型：涉及大量的磁盘操作或网络操作，如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Web</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 服务、数据库操作、文件传输等。我的项目大多数是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> I/O</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 密集型，因为涉及到大量的数据库操作和网络请求。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 项目</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 要上线了，项目</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中还有任务在线程池中，这个时候要怎么办呢？【回答的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shutdown</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shutdownNow</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的区别，使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shutdown，等待任务队列里的任务执行完再关闭</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 版本的项目】</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shutdown：调用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shutdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">方法后，线程池不再接受新的任务，但会继续执行已经提交的任务，直到队列中的任务执行完毕。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shutdownNow：调用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shutdownNow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">会立即尝试停止所有正在执行的任务，未执行的任务会被丢弃。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 上线之前，使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shutdown</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 方法可以优雅地结束</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 项目中的任务，确保在平滑过渡期间不丢失任何任务。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">11.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 线程的超时时间设置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程池中的线程有一个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 存活时间，即线程在空闲时保持的最大时间。通过设置超时时间，能够避免线程池中大量空闲线程占用资源，从而优化性能。可以通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ThreadPoolExecutor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> setKeepAliveTime</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 方法来设置。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 你的项目的请求上限是多少？上限多少是由哪些因素决定的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">请求上限通常是由以下几个因素决定的：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">硬件资源：服务器的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU、内存、磁盘</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> I/O</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 能力。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据库性能：数据库的吞吐量和并发能力。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">网络带宽：网络带宽和延迟限制。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">应用程序的优化：应用代码的效率和缓存的使用。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">14.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Java中的反射解决的问题？使用的场景？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">反射允许程序在运行时动态地加载类、获取类信息、创建对象、调用方法、访问字段等。使用场景：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">插件化框架：动态加载类。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">依赖注入：如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Spring</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 框架，通过反射实现</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Bean</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的自动注入。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">对象序列化与反序列化。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">15.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C/C++不支持反射，了解过为什么有些语言支持反射而有些不支持反射吗？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">反射是动态语言的一大特性。支持反射的语言（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Java、Python、Go）通常提供了运行时类型信息和反射</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> API，允许程序在运行时获取类型、方法等信息。而</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C/C++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 这种静态语言，不提供运行时类型信息，因此无法直接支持反射。需要在编译时知道类型信息。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">16.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Java中如何判断一个对象可以被回收了？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">垃圾回收器通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 引用计数</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可达性分析</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来判断一个对象是否可以回收。对象的引用计数为零或从根对象不可达时，认为该对象可以被回收。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">17.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 判断对象是不是被引用标记了，扫一遍的时间可能会非常长，如何来优化它或者现有的机制是如何做的？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">标记-清除算法</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是垃圾回收的常用算法，现有的优化方法包括：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">分代回收：将对象分为年轻代和老年代，针对不同年龄的对象采用不同的回收策略。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">增量回收：将回收工作分成多个小步骤，避免一次性回收导致的长时间停顿。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">18.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 如何入手MySQL的优化？看Explain的什么内容？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> EXPLAIN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分析</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查询的执行计划，关键点包括：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">类型（type）：查询的访问类型，ALL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是最差的，表示全表扫描。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">可能的键（possible_keys）：查询时可使用的索引。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">实际使用的键（key）：实际使用的索引。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">行数（rows）：扫描的行数，</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="腾讯音乐" tabindex="-1"><a class="header-anchor" href="#腾讯音乐"><span>腾讯音乐</span></a></h2><h3 id="一-开场" tabindex="-1"><a class="header-anchor" href="#一-开场"><span>（一）开场</span></a></h3><ol><li>面试官介绍岗位</li></ol><ul><li>岗位为腾讯音乐 - 全民K歌 - 国际版 - 直播歌房后台研发工程师，主要负责直播相关功能，开发语言为Go和C++。</li></ul><ol><li>关于求职者基本情况</li></ol><ul><li>要求5分钟以内的自我介绍。</li><li>被问到所在公司技术团队裁撤后为何会留下自己。</li><li>岗位base深圳能否接受。</li></ul><h3 id="二-项目相关" tabindex="-1"><a class="header-anchor" href="#二-项目相关"><span>（二）项目相关</span></a></h3><ol><li>系统重构 - 数据迁移项目</li></ol><ul><li>微服务相关</li><li>如何理解微服务，为什么微服务能提升系统可拓展性。</li><li>微服务相比于单体服务的缺点。</li><li>服务间通信成本指的是什么，成本体现在哪。</li><li>数据库迁移原因与成本评估</li><li>把数据库从MongoDB迁移到MySQL的原因。</li><li>如何评估迁移异构数据库（MongoDB到MySQL）的成本，是否仅考虑成熟度和被接受程度，因为迁移涉及数据同步工作量巨大。</li><li>技术选型相关</li><li>如果采用最终一致性方案，MySQL支持事务而MongoDB不支持事务，有什么原因不使用最终一致性方案。</li><li>数据同步与异常处理</li><li>迁移过程中数据同步怎么做（新数据库写MySQL，写脚本迁移Mongo数据到MySQL）。</li><li>业务要读写新旧数据时怎么办。</li><li>迁移比较暴力，如何发现数据异常，异构数据库迁移时如何保证每条数据正常迁移到MySQL。</li><li>唯一键场景下（Mongo已有数据，切换到MySQL写时可能重复写入）的处理。</li></ul><ol><li>优化服务器项目</li></ol><ul><li>分布式缓存实现</li><li>优化服务器引入分布式缓存技术（具体是Redis），如何实现的。</li><li>缓存与数据库一致性</li><li>如何保证Redis缓存和数据库的数据一致性（回答缓存先写数据库后写存在问题）。</li><li>写缓存成功数据库失败时缓存是否为脏数据。</li><li>先写数据库成功再写Redis，缓存更新失败怎么办，如何知道何时将数据库数据同步到缓存及同步的做法。</li><li>缓存是否有过期时间机制，有没有不过期一直生效的情况，有过期的话多久过期。</li><li>缓存同时过期会有什么问题以及如何解决。</li></ul><ol><li>数据抓取业务项目</li></ol><ul><li>Kafka相关</li><li>Kafka在业务中的角色。</li><li>业务为什么要经过Kafka这一层，账号量有多大。</li><li>定时任务可分散执行时间，Kafka在这种情况下削峰意义不大，是否有其他考虑使用Kafka的因素。</li><li>防止账号丢失已有确认机制，当作下游处理失败重新触发即可，为何还需要Kafka。</li></ul><ol><li>抖音微信小游戏归因业务项目</li></ol><ul><li>Token缓存相关</li><li>微信小游戏的token存于sync.map（服务内存），为何使用服务内存而不使用Redis或其他外部缓存方案。</li><li>用户量相关，当有一定数量实例和用户量时这种方案是否有缺陷（此处存在理解偏差导致回答失误）。</li></ul><h3 id="三-go和mysql" tabindex="-1"><a class="header-anchor" href="#三-go和mysql"><span>（三）Go和MySQL</span></a></h3><ol><li>MySQL中索引如何实现，为什么MySQL里不使用B树。</li><li>切片如何实现</li><li>Go里并发读写map会出现问题，如何解决</li><li>Go里的sort排序如何实现</li><li>协程和线程的区别，线程开销大的原因，协程有上下文切换为何线程消耗更多CPU资源</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL中索引如何实现，为什么MySQL里不使用B树？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MySQL中的索引实现：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">InnoDB</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 默认使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> B+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 树（而不是传统的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> B</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 树）来实现索引。B+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 树的所有叶子节点都在同一层次，并且通过链表相连，保证了更高的查询效率。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MyISAM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 存储引擎使用的是</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> B</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 树，但它在处理大数据量时的效率低于</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> B+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 树。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">B树与B+树的区别：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> B</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 树中，节点存储数据和指向子节点的指针，而</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> B+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 树中，非叶子节点只存储索引信息，所有实际数据都保存在叶子节点中。这使得</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> B+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 树的范围查询（例如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> BETWEEN）更加高效，因为叶子节点通过链表连接，范围查询时只需要在叶子节点之间跳转。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">为什么MySQL使用B+树：B+树的最大优势在于它能提高范围查询的效率，且因为所有数据都在叶子节点，因此数据的访问更加有序，便于高效扫描。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 切片如何实现</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 中的切片实现：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">切片是对数组的一种抽象，它是动态的，不像数组那样大小固定。切片包含了三个主要部分：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">指针：指向底层数组的起始位置。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">长度：切片中元素的数量。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">容量：从切片的起始位置到底层数组的结尾部分的元素数量。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">当切片扩展时，如果切片的长度超出其容量，Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会重新分配一个更大的底层数组，并将切片的内容复制到新的数组中。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go里并发读写map会出现问题，如何解决</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">问题：Go中的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是非并发安全的，意味着如果多个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 同时读写同一个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map，可能会导致数据竞争、崩溃或错误的结果。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决方法：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync.Mutex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync.RWMutex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来加锁保护</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map。Mutex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可以在读写操作时进行互斥锁定，确保同一时刻只有一个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 访问</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync.Map，Go</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.9</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 引入了并发安全的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync.Map，它适用于多个</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 同时访问的场景。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map[string]int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mu</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync.Mutex</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 写操作</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mu.Lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">m[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;key&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 42</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mu.Unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 读操作</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mu.Lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">value</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> m[&quot;key&quot;]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mu.Unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go里的sort排序如何实现</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 提供了</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sort</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 包来进行排序，最常用的排序方法是通过实现</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sort.Interface</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 来定义排序规则。sort.Interface</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 包含三个方法：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()：返回集合的元素数量。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Less(i,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> j</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) bool：比较集合中的第 i 和第 j 个元素。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Swap(i,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> j</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)：交换集合中的第 i 和第 j 个元素。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">通过实现这三个方法，Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 会使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 堆排序、归并排序</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 快速排序</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等算法来完成排序。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ByLength</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (s </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ByLength</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() int {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (s </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ByLength</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) Less(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">i,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> j</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) bool {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s[i]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) &lt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s[j]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (s </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ByLength</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) Swap(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">i,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> j</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    s[i],</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> s[j]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> s[j],</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> s[i]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    strs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []string{</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;dog&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;cat&quot;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fish&quot;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;bird&quot;}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    sort.Sort(ByLength(strs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    fmt.Println(strs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) // [dog cat fish bird]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 协程和线程的区别，线程开销大的原因，协程有上下文切换为何线程消耗更多CPU资源</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程与线程的区别：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程：操作系统调度的基本单位，通常由操作系统内核管理。线程在执行时需要独立的堆栈，调度切换的开销较大。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程：是用户级别的线程，调度由程序自己管理，不依赖操作系统。协程通常在同一个线程中运行，它比线程更轻量，切换的开销较小。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程开销大的原因：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程需要独立的内存栈空间。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程的创建和销毁比协程要慢。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程切换时，需要保存和恢复大量的上下文信息，涉及的系统调用和调度开销较大。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程有上下文切换为何线程消耗更多CPU资源：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的上下文切换涉及保存和恢复整个线程的状态（如寄存器、栈等），并且操作系统内核需要进行调度，这些操作需要消耗更多的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 资源。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 切换时只需要保存最少的状态（通常是堆栈指针），因为它们是轻量级的，且由程序而非操作系统调度，所以不会有那么大的开销。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">总结：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程的优点在于其轻量性，减少了操作系统调度的开销，特别适合大量</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> I/O</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 密集型任务。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">线程在需要利用多核</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或执行</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 密集型任务时更有优势，但线程的开销更大。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四-算法与反问" tabindex="-1"><a class="header-anchor" href="#四-算法与反问"><span>（四）算法与反问</span></a></h3><ol><li>算法手撕</li><li>反问</li></ol><h2 id="腾讯互娱-一面-go" tabindex="-1"><a class="header-anchor" href="#腾讯互娱-一面-go"><span>腾讯互娱 一面/Go</span></a></h2><ul><li>Go的接口作用，用处，实现</li><li>空struct用途，会不会分配内存</li><li>Go原生支持默认参数或可选参数吗，如何实现</li><li>Go defer执行顺序</li><li>协程，协程间信息如何同步</li><li>Go GMP</li><li>性能开销大原因 <ul><li>GM</li><li>GMP</li><li>go生成一个协程，此时放在P中还是M中</li><li>G阻塞，M、P如何</li></ul></li><li>操作系统中大端编码、小端编码</li><li>TCP、UDP</li><li><ul><li>三次握手、四次挥手</li><li>为什么挥手是四次，会不会合并</li><li>流量控制</li></ul></li><li>Redis项目中使用（主数据库还是缓存）</li><li>Redis与MySQL数据如何同步</li><li>MySQL索引建立原则</li><li>Explain，字段</li><li>Redis持久化方式</li><li>Redis过期删除策略</li><li>Redis高可用设计</li><li><ul><li>主从复制方式，模式</li></ul></li><li>kafka业务使用</li><li>Redis常用数据结构</li><li><ul><li>zset使用场景，具体实现</li></ul></li><li>部署方式，k8s部署（相关概念）</li><li>Go性能优化方式</li><li><ul><li>请求耗时过长，有无使用到链路观测</li></ul></li><li>单链表判断有没有环</li><li>玩家积分排序topN实现算法</li><li>项目中遇到的困难较高的场景</li><li>微服务r如何理解，有何问题</li><li><ul><li>服务端崩溃检测</li></ul></li></ul><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go的接口作用，用处，实现</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">作用：Go的接口（interface）是一种抽象类型，它定义了一个对象的行为，但不关心具体的实现。接口在Go中主要用于实现多态和解耦。通过接口，Go可以处理不同类型的对象，只要它们实现了接口规定的方法。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">用处：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解耦合：接口允许不同模块之间没有直接的依赖，只需要依赖接口而不关心具体的实现。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">多态：通过接口，函数可以接收不同类型的值，只要它们实现了相同的接口方法。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">替代传统面向对象语言中的继承：Go没有传统的继承机制，接口则提供了类似于多态和抽象的功能。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">实现：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go的接口是隐式实现的，也就是说，不需要显示声明某个类型实现了某个接口，只要类型实现了接口的所有方法，就自动实现了该接口。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Animal</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> interface</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Speak</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() string</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Dog</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> struct</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (d </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Speak</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() string {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Woof&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Animal</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Dog{}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    fmt.Println(a.Speak(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) // Output: Woof</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 空struct用途，会不会分配内存</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">空结构体（struct</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{}</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">）在Go中是一个零占用的类型，它没有任何字段，占用的内存为0字节。空结构体通常用于以下场景：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">信号量：空结构体作为信号量标志，例如，通道中发送空结构体来传递信号。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">占位符：用于表示某种逻辑上的存在，但不需要占用实际内存。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">会不会分配内存：空结构体不会占用内存，因为它没有任何字段。它通常用于表示某些标记或信号，且被广泛用于map的键类型或通道的值类型。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySignal</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> struct{}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map[int]MySignal</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map[int]MySignal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go原生支持默认参数或可选参数吗，如何实现</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go没有原生支持默认参数或可选参数，但可以通过以下方法实现：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">变长参数（...）：通过变长参数（类似数组或切片）可以接受可选参数，然后在函数内根据参数的数量进行判断，手动实现默认值。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">函数重载的模拟：通过创建多个同名但参数不同的函数来模拟不同的参数组合。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> greeting</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">string</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> greeting</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        greeting</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> greeting</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;, &quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defer执行顺序</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go中的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 语句会在函数退出时按</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 后进先出（LIFO）</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的顺序执行，即最后声明的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 最先执行。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fmt.Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;First&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fmt.Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Second&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    fmt.Println(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Third&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 输出：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Third</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Second</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> First</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 协程，协程间信息如何同步</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程：是Go中比线程更轻量的执行单元，由Go的运行时调度系统管理。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">协程间信息同步：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">通道（Channel）：Go中通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> channel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 实现协程间的通信和同步，协程可以通过通道传递数据来协调工作。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WaitGroup：用于等待多个协程执行完毕。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Mutex：用于保护共享资源，防止竞态条件。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例（使用通道进行同步）：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">result</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-ch</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fmt.Println(result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) // 输出 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GMP</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> GMP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 模型（Goroutine,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Machine,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Processor）是Go的调度模型：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">G：Goroutine，一个轻量级的线程。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">M：Machine，操作系统线程。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">P：Processor，Go运行时的执行上下文，表示一个逻辑CPU。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">调度过程：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go运行时根据P的数量来决定运行多少个goroutine。如果P的数量很少，M就能运行多个goroutine，尽可能利用CPU资源。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 性能开销大原因</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (Goroutine, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Machine,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Processor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GM模型的调度：每个goroutine在P上执行。G阻塞时，M和P如何调度新的G。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GM开销原因：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Goroutine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 调度和上下文切换比线程轻量，但仍然需要一定的开销（例如栈分配和调度）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">M</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是操作系统线程，在处理</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> I/O</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 操作时可能导致阻塞。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">P</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是逻辑CPU的映射，一个P通常对应一个操作系统线程，如果P不足，调度会受到影响。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 操作系统中大端编码、小端编码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">大端编码（Big-endian）：将数据的高位字节存储在低地址中，低位字节存储在高地址中。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">小端编码（Little-endian）：将数据的低位字节存储在低地址中，高位字节存储在高地址中。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例：</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 对于一个16位整数</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0x1234：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">大端：12</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 34（高位在前）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">小端：34</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 12（低位在前）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TCP、UDP</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TCP：面向连接的、可靠的、流式协议，保证数据传输的顺序和完整性。使用三次握手建立连接，四次挥手关闭连接。</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> UDP：无连接、不可靠的协议，传输数据时不保证顺序或可靠性。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">三次握手：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SYN：客户端发送连接请求。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SYN-ACK：服务器确认连接请求。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ACK：客户端确认服务器响应，连接建立。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">四次挥手：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FIN：客户端发送关闭连接的请求。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ACK：服务器确认关闭连接。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FIN：服务器发送关闭连接请求。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ACK：客户端确认，连接关闭。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">流量控制：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TCP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用滑动窗口进行流量控制，保证发送方不会超出接收方的接收能力。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis项目中使用（主数据库还是缓存）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在项目中，Redis通常作为缓存系统来使用，存储频繁访问的数据以减少数据库查询压力。也可以用于会话存储、消息队列等场景。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">11.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis与MySQL数据如何同步</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Redis与MySQL的数据同步通常是通过以下几种方式实现：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">应用层控制：在应用程序中，操作Redis之前先更新MySQL，或在MySQL更新后更新Redis。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">异步同步：通过消息队列（如Kafka）异步同步Redis与MySQL的变化。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">定时同步：定期将MySQL的数据同步到Redis中。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL索引建立原则</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">选择性高：对于字段选择性高（唯一值多）的列，创建索引更有效。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">频繁查询的列：经常用作查询条件的列，尤其是WHERE、JOIN和ORDER</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> BY中使用的列，应建立索引。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">避免过多索引：虽然索引能加速查询，但会增加插入、删除、更新的开销。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">13.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Explain，字段</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPLAIN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 语句用于显示</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查询优化器的执行计划，帮助分析查询的执行效率。EXPLAIN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 的字段包括：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">id：查询的顺序。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">select_type：查询类型，如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SIMPLE（简单查询）、PRIMARY（主查询）等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">table：涉及的表。</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">：连接类型，如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ALL、index、range</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等，越优的类型越有助于查询优化。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">possible_keys：查询可能使用的索引。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">key：实际使用的索引。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rows：扫描的行数。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">14.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis持久化方式</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RDB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (Redis </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">DataBase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)：快照持久化，将内存中的数据定期保存到磁盘。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AOF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (Append </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Only</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> File</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)：逐条记录写入操作到日志文件，能够提供更高的持久化保证。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">混合模式：同时使用RDB和AOF，提供更好的持久化和恢复能力。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">15.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis过期删除策略</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">惰性删除：当访问某个键时，检查是否过期，如果过期则删除。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">定期删除：定期扫描所有过期键，并删除它们。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">16.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis高可用设计</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">主从复制：主节点负责读写，多个从节点同步主节点的数据，用于读写分离和容错。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">哨兵模式：Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 监控主从节点，自动进行故障转移。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">17.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka业务使用</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 作为消息队列，在业务中通常用于日志收集、事件驱动架构、异步任务处理等场景。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">18.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis常用数据结构</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">String：最基本的数据类型。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Hash：适用于存储对象。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">List：双端队列，用于实现生产者消费者模式。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Set：无序集合。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ZSet：有序集合，用于排名和计数。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">19.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> zset使用场景，具体实现</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用场景：排行榜、计数器等需要排序的场景。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">实现：内部使用跳表（skip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list）实现，支持按分数进行排序。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="腾讯外包-后端开发-一面" tabindex="-1"><a class="header-anchor" href="#腾讯外包-后端开发-一面"><span>腾讯外包 /后端开发/一面</span></a></h2><ul><li><ol><li>自我介绍</li><li>go开发几年（1年半）</li><li>熟悉到什么程度（增删改查不是问题）</li><li>map是否安全（不安全）</li><li>为什么不安全</li><li>slice的底层结构</li><li>apendslice会安全吗</li><li>automatic有用过（用过+1-1）</li><li>说一下什么是原子性（要么成功要么失败）</li><li>怎么做有一个有序的排序（结构里搞个切片，然后用sort排序）</li><li>mysql主从同步机制（不会）</li><li>redis常用数据结构（string、list、hash、set、zset、bitmap）</li><li>有序列表的底层结构（不会，跳表）</li><li>常用的索引数据结构（哈希、b+树、二叉树）</li><li>微服务的服务发现（客户端服务、服务端服务）</li><li>怎么感知服务集群的变化（服务注册中心、轮询服务健康、监控系统）</li><li>注册中心如何感知服务的变化(心跳推送？触发机制之类的）</li><li>会不会k8s（不会）</li></ol></li></ul><h2 id="字节跳动" tabindex="-1"><a class="header-anchor" href="#字节跳动"><span>字节跳动</span></a></h2><ol><li>介绍一下业务表的字段</li><li>定时任务刷新字段, 是怎么实现的?</li><li>分布式锁? 分布式死锁如何解决? 看门狗机制? 如何避免当前线程加的锁, 被其它线程解锁?</li><li>乐观锁和悲观锁的区别? 写多读少的情况, 应该使用乐观锁还是悲观锁?</li><li>分布式场景下, 如何实现乐观锁?</li><li>kafka的幂等性? 如何避免消息被重复消费?</li><li>两个线程, 同时向mysql中插入一条数据?</li><li>kafka如何保证消息不丢失</li><li>sql优化场景:</li></ol><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,balance </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> update_time </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;2020-09-19&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> limit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该语句为什么查询慢? 有什么优化思路?</p><ol><li>算法题: 子集</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 介绍一下业务表的字段</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">业务表字段设计应根据业务需求来进行，典型的字段可能包括：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">主键字段：通常是ID字段，作为表中记录的唯一标识（通常使用自增ID或UUID）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">创建时间（created_at）：记录创建时间，用于追踪数据的生命周期。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">更新时间（updated_at）：记录最后更新时间，便于进行数据同步或检查变化。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">状态字段（status）：用于表示业务实体的当前状态（如“已支付”、“待处理”等）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">业务数据字段：与业务逻辑相关的字段，比如用户信息表可能包含user_id、user_name等字段，订单表可能包含order_number、product_id等字段。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">外键字段：如果数据表与其他表相关联，外键字段可能用于表示表间的关系。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">例子：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sql</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CREATE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TABLE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> orders</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    id</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> INT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PRIMARY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> KEY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    user_id</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> INT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NOT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NULL,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    order_number</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    total</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DECIMAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    status</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    created_at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TIMESTAMP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DEFAULT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CURRENT_TIMESTAMP,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    updated_at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TIMESTAMP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DEFAULT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CURRENT_TIMESTAMP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ON</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> UPDATE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CURRENT_TIMESTAMP,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    FOREIGN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (user_id) REFERENCES users(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 定时任务刷新字段，是怎么实现的?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">定时任务刷新字段通常是通过定时任务调度工具（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cron、Quartz、GoCron）来定期执行SQL更新操作或调用接口。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据库更新：可以创建一个后台服务，每隔固定时间运行SQL语句来更新字段，如更新时间、标记字段等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例（MySQL）：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sql</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">UPDATE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> orders</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;expired&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> WHERE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;pending&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> AND</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update_time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">NOW</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> INTERVAL</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DAY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">定时任务：可以使用框架（如Go的time.Tick，Java的ScheduledExecutorService，或Quartz）来定期执行任务。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分布式锁?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分布式死锁如何解决?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 看门狗机制?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 如何避免当前线程加的锁,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 被其它线程解锁?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">分布式锁：在分布式系统中，为了确保多个节点/实例间的协作，避免并发冲突，需要使用分布式锁来控制资源访问。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">常见实现：Redis（SETNX、RedLock）、Zookeeper等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">分布式死锁：多个节点可能会互相等待对方释放锁，从而导致死锁。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决方案：可以设置锁的过期时间（例如Redis的SETNX设置EX参数），超时自动释放锁；使用看门狗机制。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">看门狗机制：设置一个定时器，定期刷新锁的有效期，防止锁被提前释放，避免因业务执行时间较长而被误释放。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如何避免锁被解锁：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">锁的获取与释放应该由同一个线程负责，锁的释放通过唯一标识来防止其它线程解锁。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在Redis中，可以存储唯一标识（如UUID），并在释放锁时检查标识是否匹配，确保只有获取锁的线程才能释放。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 乐观锁和悲观锁的区别?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 写多读少的情况,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 应该使用乐观锁还是悲观锁?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">乐观锁：假设数据在操作期间不会发生冲突，适合冲突较少的场景。通过版本号或时间戳机制来控制并发修改，冲突时会重试。适用于读多写少的场景。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">示例：在每次更新时，检查数据库中的版本号是否匹配，如果不匹配，则认为发生了冲突。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">悲观锁：假设数据会发生冲突，因此会在操作期间锁住数据。适合冲突较多的场景。通过数据库的行锁、表锁等方式实现。适用于写多读少的场景。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">写多读少的情况下，应使用悲观锁，因为这种情况下数据修改较多，使用乐观锁可能会频繁触发重试机制，降低性能。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分布式场景下,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 如何实现乐观锁?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">分布式场景下的乐观锁一般会依赖外部系统来实现版本控制。常见方式包括：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">版本号控制：每次修改时，检查版本号，只有版本号匹配才允许修改，版本号不匹配则认为数据冲突，触发重试机制。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">时间戳机制：通过检查更新时间戳，判断数据是否已经被修改，避免修改过时的数据。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Redis等存储系统：通过使用SETNX或RedLock等分布式锁来控制并发，或者通过更新操作时验证版本号、时间戳等条件。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka的幂等性?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 如何避免消息被重复消费?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Kafka的幂等性：Kafka自2.0版本支持幂等性，生产者可以通过配置acks</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=all和enable.idempotence=true来确保消息的生产是幂等的，即不会出现重复消息。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">避免消息重复消费：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">幂等消费者：消费者可以在处理消息时，记录消息的唯一标识（如消息ID），如果相同的消息再次消费，跳过重复的处理。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消息去重：可以使用数据库的唯一约束、Redis缓存等方式来保证消息的幂等性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 两个线程,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 同时向MySQL中插入一条数据?</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果两个线程同时向MySQL插入相同的数据，并且没有任何约束（如唯一键、事务等），可能会导致：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">重复数据：两条记录会插入到数据库中，尽管它们可能是相同的。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决方法：通过使用唯一索引、事务控制、乐观锁或悲观锁来防止冲突。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">例如，使用唯一索引：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sql</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CREATE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TABLE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> users</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    id</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> INT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PRIMARY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> KEY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    username</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">UNIQUE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kafka如何保证消息不丢失</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Kafka通过以下几种方式来保证消息不丢失：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制：Kafka的每个主题都有多个副本，数据会在多个节点上进行复制，以保证节点故障时数据不丢失。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">持久化：消息默认持久化到磁盘，即使在节点重启后也可以恢复。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ACK机制：可以设置生产者的acks参数，确保消息写入到Kafka时得到确认。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">acks</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">1：只有主节点确认。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">acks</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">all：所有副本节点确认。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SQL优化场景</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">该查询慢的原因可能是：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">全表扫描：没有合适的索引导致MySQL扫描了大量记录。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Limit位置不对：在LIMIT之前做了较大的数据过滤，导致OFFSET跳过大量数据，效率较低。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">优化思路：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">加索引：在update_time列上加索引，确保查询可以通过索引快速定位。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">避免大偏移量：尽量避免LIMIT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 100000,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 10这种查询，特别是在数据量大的情况下。可以通过分页查询来解决此问题，或者利用主键ID范围分页。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">优化后的查询：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sql</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SELECT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> id,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> balance</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> FROM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> account</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WHERE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update_time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;2020-09-19&#39;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AND</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">?</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   --</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用主键ID分页</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ORDER</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> BY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> id</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">LIMIT</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 算法题：子集</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">题目要求找到一个集合的所有子集。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解法：可以用回溯算法或位运算来求解。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">回溯算法：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> subsets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []int) [][]int {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    result</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [][]int{}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> backtrack</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []int)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    backtrack</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []int) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        result</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">result,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([]int(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> current...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i := start; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">i++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            backtrack(i+1,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">current,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nums[i]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    backtrack(0,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []int{})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> result</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">位运算：</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 每个元素都有两种状态，选中或不选中，因此可以利用位运算来生成所有子集。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> subsets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []int) [][]int {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    result</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [][]int{}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i := </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt; (1 &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n);</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> i++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        subset := []int{}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        for j := 0; j &lt; n; j++ {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            if i&amp;(1&lt;&lt;j) != 0 {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                subset = append(subset, nums[j])</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        result = append(result, subset)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    return result</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字节一面-技术" tabindex="-1"><a class="header-anchor" href="#字节一面-技术"><span>字节一面（技术）</span></a></h2><ol><li>make和new的区别？</li><li>mutex锁有几种模式？</li><li>讲一下GMP调度模型</li><li>两道语法纠错题（牛客上可以多刷一下）并解释为什么</li><li>一道算法爬楼梯</li><li>一道编程题：有100个并发线程，需要控制最多只有10个执行（有缓冲channel实现）并解释思路</li><li>知道哪些设计者模式？</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make和new的区别？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new：用于分配内存，并返回指向类型的指针。默认值为零值。例如：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> p</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">int</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> p指向一个类型为int的零值（即0）的内存</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new(T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)返回一个指向类型T的指针，内存已分配但初始化为零值。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make：只用于切片、映射和通道（slice,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> chan）。make初始化这些类型并返回引用，而不是指针。make分配内存并为对象初始化值，而new只是分配内存。例如：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map[string]int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 创建并初始化一个map</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">总结：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new(T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)返回类型为*T的指针，初始化为零值。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make(T,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)返回类型为T的引用（不是指针），并初始化为合适的结构。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mutex锁有几种模式？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在Go语言中，sync.Mutex是常用的互斥锁类型。其主要模式包括：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">锁定模式（Lock）：线程对资源加锁，确保其他线程不能访问这段资源。使用mutex.Lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">进行加锁，直到执行mutex.Unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()释放锁。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解锁模式（Unlock）：当不再需要访问共享资源时，释放锁，允许其他线程访问该资源。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">重入锁：sync.Mutex本身不支持重入锁（即同一线程在已经加锁的情况下不能再次加锁），如果一个线程试图对同一个mutex加锁，可能会导致死锁。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">锁等待（TryLock）：sync.Mutex本身没有提供直接的TryLock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()方法，但可以通过channel和自定义逻辑模拟非阻塞的锁。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 讲一下GMP调度模型</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go语言的调度模型是基于Goroutine、M（机器），P（处理器）模型的。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">G（Goroutine）：每一个轻量级线程都是一个G。Go的并发编程是基于Goroutine的，它比操作系统线程更轻量，因此可以创建大量的Goroutine。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">M（Machine）：M表示操作系统线程，Go运行时的线程池负责管理操作系统的线程。每个M对应一个操作系统线程。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">P（Processor）：P是Go调度器的抽象，用于执行Goroutine。每个P拥有一个本地队列，存放着准备好执行的Goroutine。P的数量可以通过runtime.GOMAXPROCS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()来设置。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">调度模型的工作流程：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">一个Goroutine会被分配到一个P，P会将其交给M执行。M可以在多个P上调度执行。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Go调度器会自动选择一个M与P组合来运行Goroutine。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果一个P没有工作要做，Go调度器会尝试从其他P的队列中偷取Goroutine来执行。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GMP调度流程的优点：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">高效的调度使得Go能够高效地运行大量并发任务。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">M与P的解耦，使得Go能够在不同机器和线程上高效地运行。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 两道语法纠错题（牛客上可以多刷一下）并解释为什么</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">问题1：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">错误代码：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [3]int{</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 2,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []int{</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 5,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">a,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解释：数组a是一个固定长度的数组，而切片b是动态大小的，不能直接将数组a与切片b拼接。应该将数组a转换为切片类型来执行：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">a[:],</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a[:]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是将数组</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 转换为切片</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">问题2：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">错误代码：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> arr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []int{</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 2,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">arr[5]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解释：arr[5]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 10试图访问arr的索引5，但切片arr的最大索引为3（长度为4）。越界访问会导致运行时错误。正确做法是：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">arr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">arr,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用append扩展切片</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 一道算法爬楼梯</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">问题描述：假设你正在爬楼梯，每次可以爬1步或2步。给定一个整数n，表示楼梯的总阶数，求有多少种方法可以爬到楼顶。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解法：这个问题实际上是斐波那契数列问题。爬到第n阶，可以从第n-1阶爬1步或从第n-2阶爬2步。因此，f(n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) = f(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">n-1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) + f(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">n-2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">代码实现：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> climbStairs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">int</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    a,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i := </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">i++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        a,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a+b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 一道编程题：有100个并发线程，需要控制最多只有10个执行（有缓冲channel实现）并解释思路</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">问题描述：有100个并发线程，每次最多允许10个线程同时执行。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解决思路：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用一个有缓冲区的channel来控制并发量。channel的缓冲区大小限制了同时能够处理的Goroutine数量。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">每当一个线程执行时，向channel中发送一个信号，控制执行的数量。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">代码实现：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    &quot;fmt&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    &quot;sync&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> wg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync.WaitGroup</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> struct{},</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 控制并发，最多允许10个线程同时执行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i := </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">i++</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        wg.Add(1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            defer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> wg.Done</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            ch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> struct{}{}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 向channel发送信号，锁定一个位置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            fmt.Printf(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Processing task %d\\n&quot;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-ch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 完成任务后释放信号</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    wg.Wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">解释：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> struct{},</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">：创建一个容量为10的缓冲channel，确保每次最多只有10个Goroutine可以执行。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> struct{}{}：每个Goroutine执行时向channel发送一个信号，占用一个位置。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;-ch：任务完成后，从channel中取出一个信号，释放一个位置。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 知道哪些设计模式？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">常见的设计模式包括：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">==创建型模式：==</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">单例模式：确保一个类只有一个实例，并提供一个全局访问点。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">工厂方法模式：定义一个接口用于创建对象，但让子类决定实例化哪个类。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">抽象工厂模式：提供一个创建一系列相关或互相依赖对象的接口，而无需指定具体类。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">建造者模式：使用多个简单的对象一步步构建成一个复杂的对象。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">原型模式：通过复制现有对象来创建新对象，而不是通过构造。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">结构型模式：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">适配器模式：将一个类的接口转换成客户端期望的接口，使得两个不兼容的接口能够合作。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">桥接模式：将抽象部分与实现部分分离，使它们可以独立变化。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">装饰器模式：动态地给一个对象添加额外的职责。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">外观模式：为复杂的子系统提供一个简单的接口。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">享元模式：通过共享相同的对象来节省内存，适用于大量相似对象。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">代理模式：为其他对象提供一种代理以控制对这个对象的访问。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">行为型模式：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">策略模式：定义一系列算法，把它们一个个封装起来，并使它们可以互相替换。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">观察者模式：当一个对象改变状态时，所有依赖于它的对象都会得到通知并自动更新。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">状态模式：允许一个对象在其内部状态改变时改变其行为。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">模板方法模式：定义一个操作中的算法框架，允许子类为一个或多个步骤提供具体实现。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">命令模式：将请求封装为一个对象，从而使你能够使用不同的请求、队列或日志请求。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">责任链模式：使多个对象有机会处理请求，避免了请求的发送者与接收者之间的耦合。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">这些设计模式可以帮助我们写出更加清晰、可维护、可扩展的代码。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字节二面-技术-人事" tabindex="-1"><a class="header-anchor" href="#字节二面-技术-人事"><span>字节二面（技术+人事）</span></a></h2><p><strong>技术：</strong></p><ol><li>讲一下一个系统访问的整个链路过程</li><li>K8s有哪些组件？</li><li>怎么把node里的pod暴露给外面使用？</li><li>我对监控的理解，怎么判断一个系统是否已经挂调了？</li><li>如果让你对系统进行一个巡检，你会怎么做？</li><li>举例数据库巡检</li><li>用过云产品吗？讲一下你对公有云的理解</li><li>用过OPEN AI吗？你一般怎么使用？</li></ol><p><strong>人事：</strong></p><ol><li>从技术上和工作上上一家公司对你有什么成长？</li><li>在工作中和技术上学到哪些技能？举例说明</li><li>离职原因，未来职业规划</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">技术相关</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">讲一下一个系统访问的整个链路过程</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">客户端发起请求，通过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DNS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 查询获取目标服务器</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 地址。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">请求通过网络传输到目标服务器，通常是通过负载均衡器进行流量分发。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">请求被路由到后端应用服务器，进行业务逻辑处理。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果需要数据库操作，应用服务器会查询数据库，数据库返回数据。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据返回给应用服务器，再通过负载均衡器返回给客户端。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">系统日志和监控数据在过程中也会被记录和分析，以便优化和故障排查。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">K8s有哪些组件？</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Master组件：API</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Server、Controller</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Manager、Scheduler、etcd。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Node组件：Kubelet、Kube</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Proxy、Container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Runtime（如Docker、containerd）。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">其他组件：Ingress</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Controller、CoreDNS等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">怎么把node里的pod暴露给外面使用？</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Service</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 类型为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LoadBalancer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 或</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NodePort，可以将</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Pod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 暴露给外部网络。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">LoadBalancer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 类型适用于云环境，自动分配外部</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IP。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">NodePort</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 类型在集群节点上分配一个端口，外部通过该端口访问。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">我对监控的理解，怎么判断一个系统是否已经挂掉了？</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">监控主要是通过收集系统指标（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU、内存、磁盘、网络等）和应用指标（如请求量、响应时间、错误率等）来评估系统健康状态。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果系统出现服务宕机、响应超时、或指标异常（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 使用率过高、内存泄漏等），可以认为系统出现故障。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如果让你对系统进行一个巡检，你会怎么做？</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">检查系统日志：查看错误日志、警告信息、异常堆栈等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">资源使用情况：检查</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU、内存、磁盘和网络使用情况，查看是否有异常。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">依赖服务状态：检查数据库、缓存、消息队列等依赖服务是否正常运行。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">监控和报警配置：确保监控系统正常运行，报警阈值合理。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据库巡检：检查慢查询日志、表的健康状态、索引和数据一致性。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">举例数据库巡检</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">查询性能：检查慢查询日志，优化慢查询</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SQL。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">索引优化：检查索引的使用情况，确保常用查询有合适的索引。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据库表状态：检查表的碎片，定期进行表的优化。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">数据库备份：确认备份是否完整、是否定期进行，并且备份可恢复。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">用过云产品吗？讲一下你对公有云的理解</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">公有云提供了弹性的计算、存储和网络资源，通常按需付费，能够根据业务需求进行扩展。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">公有云提供了高可用、容灾、负载均衡等功能，且不需要用户自己管理基础设施，简化了运维。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">常见的云服务商有</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> AWS、Azure、Google</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cloud、阿里云、腾讯云等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">用过</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> OpenAI</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 吗？你一般怎么使用？</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">是的，OpenAI</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 提供了强大的语言模型，常用于自然语言处理任务，如文本生成、翻译、问答、内容创作等。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">通常使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> OpenAI</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 进行对话生成，代码自动补全，数据分析等，帮助提高工作效率。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">人事相关</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">从技术上和工作上上一家公司对你有什么成长？</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在上一家公司，我主要接触了高并发、高可用系统的架构设计与实现，提升了我的系统设计和架构能力。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">深入了解了</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和容器化的实践，掌握了微服务架构、CI/CD等现代化开发流程。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">参与了多个性能优化和问题排查项目，增强了我在高压场景下的调试和解决问题的能力。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在工作中和技术上学到哪些技能？举例说明</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">学会了如何设计分布式系统，包括数据库分片、消息队列、缓存等技术栈。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">深入理解了微服务架构，特别是在服务发现、API网关、负载均衡等方面的实际应用。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">在性能优化方面，学到了通过日志分析、压力测试、代码优化来提升系统性能。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">离职原因，未来职业规划</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">离职的原因是希望寻找更具挑战性的项目，提升自己的技术深度，尤其是在云计算、人工智能和大规模分布式系统方面的能力。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">未来的职业规划是向架构师方向发展，特别是在云原生架构、微服务设计和高可用系统方面积累更多经验。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字节" tabindex="-1"><a class="header-anchor" href="#字节"><span>字节</span></a></h2><ol><li>自我介绍</li><li>选择一个项目或者需求详细介绍一下</li><li>代码题，输出什么内容</li></ol><div class="language-stylus line-numbers-mode" data-highlighter="shiki" data-ext="stylus" data-title="stylus" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">package </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">import (</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;encoding/json&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;fmt&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">func </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    jsonStr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> := \`{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">321789788912372911233</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;John&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;city&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;New York&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    var</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> person map[string]interface{}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    json</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.Unmarshal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([]</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(jsonStr)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">, &amp;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    person[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;married&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    person[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;children&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = []string{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Tom&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Jerry&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    fmt</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(person)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    jsonB</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">_ := json</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.Marshal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(person)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    fmt</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(jsonB))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>tcp 拥塞控制算法</li><li>mvcc 底层实现原理</li><li>在有些实际生产中会将默认隔离级别调整至读提交，为什么，有什么好处</li><li>mysql 怎么实现乐观锁和悲观锁</li><li>一条 sql 语句，匹配到了一条语句，会加什么锁，锁表还是锁行</li><li>es 里面是怎么实现分页的，分页有哪几种方式</li><li>算法题 力扣 42 接雨水</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">自我介绍</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">我是一个专注于后端开发的工程师，主要使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Golang</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 开发高性能、高并发的系统，熟悉常见的技术栈，如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MySQL、Redis、Kafka</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 等。近年来，特别关注微服务架构和容器化部署，了解</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 和</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DevOps</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 流程。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">选择一个项目或需求详细介绍一下</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">我曾经参与过一个基于微服务的电商平台项目。在这个项目中，我们使用了</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Golang</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 实现后端服务，前后端分离，利用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Kubernetes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 部署和管理容器化的服务。项目的核心需求是实现高并发的订单处理系统，通过消息队列（Kafka）进行解耦，并使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 缓存来提高响应速度。为了保证系统的高可用性，我们设计了分布式锁来确保数据一致性。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">代码题输出解释</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    &quot;encoding/json&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    &quot;fmt&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    jsonStr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`{&quot;id&quot;:321789788912372911233,&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:30,&quot;city&quot;:&quot;New York&quot;}\`</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    var</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> person map[string]interface{}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    json.Unmarshal([]byte(jsonStr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">), &amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">person</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    person[&quot;married&quot;]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    person[&quot;children&quot;]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> = []string{</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Tom&quot;,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Jerry&quot;}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    fmt.Println(person</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    jsonB,_</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> := json.Marshal(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">person</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    fmt.Println(string(jsonB</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">))</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">输出解释</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">第一行输出：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">person</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 是一个 map[string]interface{}，通过 json.Unmarshal 将 JSON 字符串解析为 map 类型。添加了 married 和 children 字段后，打印出的 map 包含这些新增字段。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">输出：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">json</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map[age:30</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> children:[Tom Jerry] city:New York id:321789788912372911233 married:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name:John]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">第二行输出：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">使用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> json.Marshal 将 map 转换回 JSON 字符串。注意字段的顺序不会保证，与原始输入 JSON 字符串的顺序不同，但数据内容是相同的。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">输出：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">json</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">复制代码</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;id&quot;:321789788912372911233,&quot;name&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;John&quot;,&quot;age&quot;:30,&quot;city&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;New York&quot;,&quot;married&quot;:true,&quot;children&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;Tom&quot;,&quot;Jerry&quot;]}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">其他技术相关问题回答：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TCP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 拥塞控制算法</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TCP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 拥塞控制是通过以下四个算法实现的：慢启动（Slow Start）、拥塞避免（Congestion Avoidance）、快重传（Fast Retransmit）、快恢复（Fast Recovery）。慢启动用于避免开始时网络过载，拥塞避免用于平稳增长窗口大小，快重传和快恢复则用于丢包后的恢复。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MVCC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 底层实现原理</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MVCC（多版本并发控制）通过为每个数据库操作提供一个版本号（或时间戳）来实现并发控制。当多个事务修改同一数据时，数据库会创建不同版本的数据，允许事务在其视图下读取数据的旧版本，而不会干扰其他事务。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">调整隔离级别为读提交的原因</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">读提交（Read</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Committed）可以防止脏读，但允许不可重复读。生产环境中，为了提高性能和减少死锁的发生，很多系统会将隔离级别设置为读提交。在某些情况下，读提交能满足业务需求，避免了较高的性能开销。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 实现乐观锁和悲观锁</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">乐观锁：通常通过版本号或时间戳实现，事务开始时不加锁，提交时检查数据是否被其他事务修改。如果没有修改，则提交成功，否则重试。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">悲观锁：通过数据库提供的锁机制（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> FOR UPDATE）来实现，事务会在读取数据时加锁，直到事务结束。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SQL语句加锁问题</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">对于查询操作，若没有明确指定锁类型（如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> FOR UPDATE），MySQL 默认不会加锁。加锁通常是在修改数据时进行的，比如 INSERT、UPDATE 或 DELETE，这些操作默认会加行级锁。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Elasticsearch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 分页实现方式</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Elasticsearch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 提供了多种分页方式：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">from/size：常见的分页方式，通过指定</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from 和 size 来控制查询的起始位置和返回记录数。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">search_after：适用于深分页，避免了</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from/size 的性能瓶颈，通常与排序结合使用。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">算法题：力扣</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 42</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 接雨水</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">该题目需要计算下雨后能够积水的总量。解法通常使用双指针方法，维护两个指针从两端向中间移动，计算当前位置的最大可容积水量，最终得到积水的总量。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="美团-一面" tabindex="-1"><a class="header-anchor" href="#美团-一面"><span>美团 一面</span></a></h2><ol><li>自我介绍</li><li>leetcode141 环形链表，判断是否有环路</li><li>延申leetcode142 环形链表2，找到入口位置</li><li>判断一个sql（左右模糊查询）能否命中索引</li><li>为什么左右模糊不能命中索引</li><li>如何优化这个sql（左右模糊查询）</li><li>全文索引底层怎么实现的</li><li>建立分词后，如何进行快速的模糊检索</li><li>分词用的什么数据结构</li><li>跳表的时间复杂度，哈希表呢</li><li>哈希表有什么问题</li><li>说一下MySQL的索引</li><li>什么是聚簇索引、非聚簇索引</li><li>事务隔离级别</li><li>InnoDB如何实现可重复读</li><li>死锁是什么，如何解决死锁</li><li>拷打项目</li><li>你觉得科研中什么能力比较重要（解决问题能力、系统设计能力、学习能力和技术使用能力、沟通协作能力）</li></ol><h2 id="美团-二面" tabindex="-1"><a class="header-anchor" href="#美团-二面"><span>美团 二面</span></a></h2><ol><li>自我介绍</li><li>拷打项目</li><li>socket、TCP/IP 的关系</li><li>输入 url 的到浏览器显示网页的过程</li><li>反问</li></ol><h2 id="美团" tabindex="-1"><a class="header-anchor" href="#美团"><span>美团</span></a></h2><ol><li>Go中Map的数据结构?扩容机制?key为什么是无序的?</li><li>简述-下rune类型</li><li>什么是协程泄露?</li><li>select 底层数据结构和一些特性?</li><li>对已经关闭的的chan进行读写，会怎么样?为什么?</li><li>除了加Mutex锁以外还有哪些方式安全读写共享变量?</li><li>互斥锁正常模式和饥饿模式的区别 ?</li><li>原子操作和锁的区别 ?</li><li>一条select语句的执行流程?</li><li>CHAR 和 VARCHAR的区别?</li><li>MYISAM和INNODB的不同?</li><li>binlog的工作模式有哪些?</li><li>持久化机制?各自的优缺点?</li><li>怎么理解Redis事务?</li></ol><h2 id="美团-1" tabindex="-1"><a class="header-anchor" href="#美团-1"><span>美团</span></a></h2><ol><li>自我介绍</li><li>项目做完了吗？背景是什么？项目初期的背景调研是怎么做的？现在这个系统做到哪一步了？</li><li>用户下单用户派送的优劣了解过吗？怎么管理？</li><li>项目里面遇到的最大的难题是什么？为什么？</li><li>为什么使用乐观锁？你了解乐观锁的使用场景和实现逻辑吗？</li><li>乐观锁怎么实现的你了解吗？</li><li>了解悲观锁吗？</li><li>最开始有没有考虑乐观锁的适用场景和悲观锁的适用场景？</li><li>乐观锁会不会导致频繁的冲突啊？这种情况下和悲观锁谁的性能更好一些呢？</li><li>关于 Redis 的递减特性你了解哪些？</li><li>关于 Redis 的指令还用到过其他哪些呢？</li><li>setnx 的原理你知道吗？</li><li>有个场景你了解吗：锁获取后程序退出了，这样锁永远不会释放，导致死锁</li><li>看你简历里说比较了解集合，对集合的了解简单说一下</li><li>怎样判断内存是否需要回收？（对象死亡的判断方法？）</li><li>可达性分析是如何对对象进行标记的？三色标记法了解吗？</li><li>垃圾回收的过程（针对某一个具体的垃圾收集器 CMS 或 G1）</li><li>清除的过程呢？</li><li>标记清除算法的优点和缺点？</li><li>CMS 标记阶段比较长，如果产生了过多的浮动垃圾，有可能会出现回收赶不上分配的情况，从而导致 GC 失败，这种要怎么解决？</li><li>CMS 和 G1 的比对了解吗？为什么废除了 CMS？</li><li>G1 怎么做到指定具体的垃圾清除时间的？</li><li>线程的生命周期你了解吗？</li><li>每个状态之间怎么流转的你了解吗？</li></ol><h2 id="饿了么" tabindex="-1"><a class="header-anchor" href="#饿了么"><span>饿了么</span></a></h2><h3 id="一面-1" tabindex="-1"><a class="header-anchor" href="#一面-1"><span>一面</span></a></h3><ol><li>自我介绍</li><li>Java面向对象的三个特性，什么是多态</li><li>双亲委派机制</li><li>HashMap在JDK1.7以前有线程不安全，怎么个情况</li><li>保证线程安全用什么Map</li><li>ConcurrentHashMap是怎样的</li><li>线程池用过吗？核心参数以及有啥作用</li><li>使用线程池有什么好处</li><li>悲观锁和乐观锁是怎么样子的</li><li>Java中怎么实现悲观锁和乐观锁</li><li>HTTP和HTTPS的区别，加密过程是怎样的</li><li>TCP的粘包是怎样的现象</li><li>Cookie和session的区别</li><li>用户登录之后怎么找到对应的Session的呢</li><li>两个项目哪个有挑战一点，挑一个讲一讲</li><li>平时做项目或科研会遇到什么困难，遇到困难一般自己解决吗</li><li>最近有了解一些新的技术或者看一些技术书籍之类的吗</li><li>算法题：反转链表</li><li>其他的offer</li><li>之后有往上海发展的打算吗</li><li>反问</li></ol><h2 id="阿里巴巴" tabindex="-1"><a class="header-anchor" href="#阿里巴巴"><span>阿里巴巴</span></a></h2><h3 id="数字零售技术部-erp技术一面-电话面" tabindex="-1"><a class="header-anchor" href="#数字零售技术部-erp技术一面-电话面"><span>数字零售技术部-ERP技术一面（电话面）</span></a></h3><ol><li>自我介绍</li><li>项目背景？</li><li>你觉得项目难点是哪些？</li><li>第一版是怎么实现的？为什么会出现超卖问题？</li><li>记录抢单结果的表是怎么设计的？</li><li>这张表的索引和其他的约束是怎么做的？</li><li>乐观锁为什么不是加在抢单关系表而是在订单表里的？</li><li>你现在数据库的设计上似乎有些问题</li><li>你们的订单允许取消吗？</li><li>如果要取消的话应该怎么设计呢？</li><li>简易短视频做了哪些东西</li><li>用户登录的处理流程是怎么个样子</li><li>接收登录请求是HTTP吗</li><li>HTTP里面登录的状态保持是怎么做的？</li><li>怎么判断JWT的合法性</li><li>JWT里面保持了哪些东西？数据结构大概是什么样子？</li><li>JWT和普通的Session的方式有什么区别？</li><li>session的方式了解过吗？</li><li>使用JWT要实现一个状态只能一个设备登录，这应该怎么做呢？</li><li>怎么设置JWT的校验不通过呢？</li><li>JWT对于登录数量有要求的就很痛苦</li><li>Java的双亲委派，为什么要这么设计呢？</li><li>类如果重复加载会有什么问题呢？</li><li>有遇到过非双亲委派模型的场景吗？</li><li>类加载的过程一般会做哪些事情？每一步具体都在做些什么呢？</li><li>对JVM的调优有了解过吗？</li><li>说说你对Redis的了解</li><li>bitmap是个什么样的东西</li><li>项目里的Redis是怎么用的？</li><li>抢单为什么会有库存数量</li><li>使用Redis防止超卖的流程是怎样的，会不会有并发的问题？</li><li>递减是怎么操作的？</li><li>这样会不会有问题，递减完成时的并发判断库存大小的时候出问题，因为递减和判断不是原子性的</li><li>ThreadLocal的作用</li><li>什么样的情况下会使用ThreadLocal？</li><li>后面怎么使用的？</li><li>这么设计（使用ThreadLocal）的原因？目前来说ThreadLocal是能不用就不用的</li><li>内部起个线程池，这时能拿到ThreadLocal的内容吗？</li><li>SpringCache和Redis有什么区别？（考虑业务上的合理性）</li><li>MySQL有哪些储存引擎了解吗？有什么区别</li><li>聚簇索引和非聚簇索引有什么区别？</li><li>回表的优化了解过吗？</li><li>为什么不要使用select * 呢？</li><li>没有被索引覆盖是什么？</li><li>什么是索引下推</li><li>反问</li></ol><h3 id="二面-电话面" tabindex="-1"><a class="header-anchor" href="#二面-电话面"><span>二面（电话面）</span></a></h3><ol><li>自我介绍</li><li>这里面比较有挑战的是哪个系统</li><li>在Redis里怎么做库存的扣减</li><li>怎么保证是不超卖的呢</li><li>面试官举了个例子表示对Redis递减防止超卖的不理解</li><li>HashMap底层是什么数据结构组成的</li><li>红黑树有什么好处</li><li>28个元素放到HashMap里面，那么HashMap初始化的容量为多少比较好</li><li>初始化了一个固定线程数的线程池，线程数是5个，把6个任务扔进去，线程池怎么处理</li><li>MySQL有个表，里面四个字段有abc三个字段，d是主键，我要查询ab，条件是bc，这时怎么设计索引</li><li>什么是回表</li><li>假设还是这个表，数据量很大，这时要做分页，每页100条，你怎么设计这个查询语句</li><li>子查询怎么设计</li><li>比如要查第10000页，你会怎么写这个sql</li><li>用过limit查询吗</li><li>项目里Redis防止超卖的方案，Redis就类似一个锁了</li><li>解释缓存穿透和缓存雪崩</li><li>上述情况的解决方案</li><li>刷新视频时系统会推荐20条用户没看过的视频，这时怎么设计会让性能更优呢</li></ol><blockquote><p>考虑位图或者布隆过滤器，使用二进制数组来保存视频，实现筛选没看过的视频</p></blockquote><ol><li>笔试题：输出每个url最多的访问次数（类似华子实习笔试第一题，但是简单一些）</li><li>反问</li></ol><h2 id="阿里" tabindex="-1"><a class="header-anchor" href="#阿里"><span>阿里</span></a></h2><ol><li>分别介绍一下MySOL、ES、Mongo数据库各自的特点以及适合的使用场景是什么?</li><li>倒排索引了解吗?</li><li>ES的分页功能有什么特性?</li><li>ES的分词检索?</li><li>Kafka与Zookeeper是什么关系?</li><li>多个同样的消息被发送到Kafka如何控制他们只消费一个?</li><li>什么是Kafka的羊群效应 ?</li><li>Redis相比Memcached有哪些优势?</li><li>阐述缓存穿透?怎么解决?</li><li>什么是bigkey?会有什么影响?</li></ol><h2 id="阿里外包-一面" tabindex="-1"><a class="header-anchor" href="#阿里外包-一面"><span>阿里外包/一面</span></a></h2><ol><li>自我介绍</li><li>遇到过高并发？（网站大访问量用redis缓存，表单做提交）</li><li>进程、线程、协程（随便说说）</li><li>go的协程设置原理（说了gmp模型）</li><li>go的锁,用到什么锁（mutex、rwmutex）</li><li>锁怎么实现的，有没有看过源码（莫得）</li><li>innodb和myisam区别（事务支持、查询速度、表文件结构、外键支持、innodb有主键，查询效率高）</li><li>为什么查询效率高（叶子节点存储索引和数据，避免回表二次查询）</li><li>mysql优化（说了分表和覆盖索引）</li><li>explain关注的字段（命中索引、可能命中索引、全表扫描、用到覆盖索引）</li><li>redis和kafka的区别（说了redis和kafka的特点）</li><li>用过k8s吗（没）</li><li>mysql的版本控制（说了mvcc，以及怎么实现的）</li><li>前期用php?(公司转型）</li><li>php和go哪个好用（说了go协程用起来方便，php的麻烦一点，编译型语言，安全比php明文安全）</li><li>goroutine+channel依次输出小猫小狗100次（设置猫狗channel，先读猫channel输出，狗输出的时候先读猫channel来保证顺序，没说好这一块）</li><li>map怎么用？线程安全？怎么扩容？（不是安全的，用sync.map安全，说了双倍扩容）</li><li>怎么解决他的哈希冲突？（重新扩容、哈希函数重新生成）</li><li>设计模式（说了单例模式、策略模式）</li><li>php用什么框架（tp、laravel）</li><li>laravel的依赖注入</li></ol><h2 id="蚂蚁" tabindex="-1"><a class="header-anchor" href="#蚂蚁"><span>蚂蚁</span></a></h2><h3 id="工具开发一面-电话面" tabindex="-1"><a class="header-anchor" href="#工具开发一面-电话面"><span>工具开发一面（电话面）</span></a></h3><ol><li>自我介绍</li><li>项目背景</li><li>JMeter做了压测，压测是怎么设计的</li><li>500压测线程的设置和服务器以及JVM的规格和设置有什么关系吗</li><li>优化了50%，那么优化点主要体现在哪里呢</li><li>RabbitMQ在写DB时如果出现了异常，导致了数据不一致，有什么补偿的机制吗</li><li>在线程池中线程复用的情况下，ThreadLocal会不会有什么问题</li><li>代码里面会是什么时机做ThreadLocal的remove呢</li><li>在使用AOP的时候，对于接口会有一些规范的要求吗？比如方法签名中的参数会不会有一些规范？</li><li>如果要依赖一些参数做做一些权限的控制的话，对于参数的规范会有一些怎样的考虑</li><li>具体讲一下使用逻辑过期方案解决Redis的缓存击穿问题</li><li>这个跟Redis里面看门狗的机制有什么区别吗</li><li>如果内存不够大了会选择使用什么方案来解决呢（逻辑过期不让缓存过期）</li><li>如果是要开一个线程来同步数据库从而解决逻辑过期的话，新开的线程与其他读取缓存的线程之间的协作关系怎么处理呢</li><li>JDK的类库里面有没有了解到可以做线程之间协作关系的</li><li>除了synchronized还有其他更加灵活的方案吗？</li><li>怎么理解乐观锁和悲观锁的</li><li>怎么考量用乐观锁还是悲观锁的？</li><li>项目中有没有遇到JVM相关的问题，比如内存溢出等问题</li><li>万一有OOM或者线程卡住了，我们排查的手段和步骤是怎么样的？</li><li>在设置JVM参数的时候，考虑机器有4G的内存，那我设置会有什么样的原则吗</li><li>对自己职业的预期，更偏向算法还是更偏向工程</li><li>互联网+的比赛做的是什么？控制平衡还是视觉识别</li><li>对于具象智能有什么想法吗</li><li>算法题：使用多线程统计一个文件中不同的词出现的次数，记不清了</li><li>反问</li></ol><h3 id="工具开发二面-电话面" tabindex="-1"><a class="header-anchor" href="#工具开发二面-电话面"><span>工具开发二面（电话面）</span></a></h3><ol><li>自我介绍</li><li>这三个项目的时间顺序</li><li>项目背景</li><li>Java的list有哪些以及他们的区别和原理</li><li>HashMap和HashTable的区别</li><li>一个类在JVM的生命周期，按照这个说一下类的加载过程</li><li>验证这个阶段会加载到JVM的内存结构的哪个部分去</li><li>用过命令去打过jar包吗</li><li>介绍双亲委派机制</li><li>有自己写一个类加载器吗</li><li>知道可以拓展类加载器吗</li><li>说一下对于AOP和IOC的理解</li><li>AOP的实际的应用有哪些</li><li>SpringBoot你常用的注解有哪些</li><li>有了解过注解的原理吗？注解的本质是什么</li><li>Spring里面有很多SDK，你常用的有哪些？比如MyBatis</li><li>这块原理有了解过吗</li><li>这里有没有对哪一块比较熟悉并且研究过原理的</li><li>设计模式有了解过吗</li><li>数据库索引的原理了解吗</li><li>讲一下你对b+树的理解</li><li>项目中有遇到过一些慢sql的情况吗</li><li>除了explain还有其他定位慢sql的方式吗</li><li>一般是什么原因会导致慢sql</li><li>介绍项目中Redis是怎么用的</li><li>Redis是单线程还是多线程的</li><li>Redis的持久化有了解过吗</li><li>有没有了解过Redis的集群</li><li>数据库这块除了MySQL有没有了解过Mongo</li><li>Redis里面的事务原理有了解过吗</li><li>Redis的缓存穿透、雪崩怎么解决</li><li>shell这一块有了解吗</li><li>大模型这块有了解过相关的技术或者产品吗</li><li>transform有了解过吗</li><li>你觉得你过去做的最有挑战的事是什么</li><li>你觉得你成就感最大的事情是什么</li><li>自己的性格有测过吗MBTI</li><li>对base地有要求吗</li><li>手头有其他offer吗？对蚂蚁这边的意向怎样</li><li>反问</li></ol><h3 id="工具开发三面" tabindex="-1"><a class="header-anchor" href="#工具开发三面"><span>工具开发三面</span></a></h3><ol><li>自我介绍</li><li>论文的层次，参加的比赛，专利</li><li>介绍实验室的科研项目</li><li>已经拿到的offer，base选择</li><li>为什么不继续科研方向</li><li>参加过开源项目吗？github有账号吗</li><li>为什么没有参加实习</li><li>项目的收获</li><li>项目收获比较大的地方</li><li>反问</li></ol><h2 id="百度" tabindex="-1"><a class="header-anchor" href="#百度"><span>百度</span></a></h2><p>1.GMP模型?</p><p>2.协程创建后如何调度?</p><blockquote><p>先进入p的私有队列, 如果满了, 进入全局队列</p></blockquote><p>3.context的结构和用法</p><p>4.一次url的请求过程?</p><p>5.请求到达项目服务器后的调用链路</p><p>6.nginx是否为单例的.</p><p>7.算法: 两数相除</p><p>8.平时mysql优化的案例?</p><p><a href="http://9.in" target="_blank" rel="noopener noreferrer">9.in</a>, exist的使用</p><p>10.联合索引</p><p>11.binlog日志</p><p>12.分布式事务: 下游两个db使用redis, 需要更新这两个不同的db, 如何自己实现最终一致性</p><p>13.两阶段提交, 三阶段提交?</p><h2 id="百度后端研发工程师" tabindex="-1"><a class="header-anchor" href="#百度后端研发工程师"><span>百度后端研发工程师</span></a></h2><ol><li>自我介绍</li><li>操作系统处理死锁的方法</li><li>操作系统内存管理的方法</li><li>Redis持久化</li><li>Memcache知道吗</li><li>使用shell统计文件中top3的ip地址</li><li>磁盘满了写不进去，排查命令</li><li>找出文件夹中最大的几个文件，命令是什么</li><li>说-下ES和Redis的区别</li><li>编程题<br> //Go两个goroutine交替打印1-10<br> //G1 1<br> //G2 2<br> //G1 3<br> //G2 4<br> //..<br> //G1 9<br> //G2 10</li></ol><h2 id="京东-golang" tabindex="-1"><a class="header-anchor" href="#京东-golang"><span>京东 golang</span></a></h2><h3 id="一面-60min" tabindex="-1"><a class="header-anchor" href="#一面-60min"><span>一面 60min</span></a></h3><ul><li>讲一下项目</li><li>go语言的掌握程度</li><li>数据结构</li><li><ul><li>空间利用率提高，但是发生冲突的可能性也增大了</li><li>go语言的map</li><li>拉链法的优缺点</li><li>拉链法如何优化</li><li>负载因子调到1会有什么后果</li></ul></li></ul><p>数据库</p><ul><li><p>数据库索引有哪些</p></li><li><p>ql建表</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">设计一张字生表：表需求是可以记录学生姓名、出生日明、手机</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 号、是否在读。邮箱。家庭地址、生表现评价</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 常见查询条件为姓名、出生日期、手机号、是否在读</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>这个表有什么缺陷</p></li><li><p>新加一个学号字段要考虑什么</p></li><li><p>数据库四大特性</p></li><li><p>innodb默认隔离级别</p></li><li><p>rr是怎么实现的</p></li></ul><p>网络</p><ul><li>tcp三次握手</li><li>ip位于哪层？icmp位于哪层？ping命令位于哪层？</li><li>telnet是什么操作？位于哪层？</li><li>https加密过程 (这个我不太清楚 如果有大佬知道 麻烦评论区指点一下)</li></ul><h3 id="二面-35mn" tabindex="-1"><a class="header-anchor" href="#二面-35mn"><span>二面 35mn</span></a></h3><ul><li>二面面试官：&quot;看你简历感觉你对go的接触程度不是特别深 你需要在接下来的过程中说服我&quot;</li><li>对哪些语言比较熟悉</li><li>为什么很多大厂都用go</li><li>说一说对slice的认识</li><li>slice如何做深拷贝</li></ul><p>数据库</p><ul><li>如何避免回表</li><li>标识性差的字段一定不能做索引列吗？</li><li>标识性差的字段为什么不能用来做索引列？</li><li>b和b+树的区别</li><li>mysql默认隔离级别</li><li>rr如何解决不可重复读</li></ul><h2 id="京东" tabindex="-1"><a class="header-anchor" href="#京东"><span>京东</span></a></h2><h3 id="一面-2" tabindex="-1"><a class="header-anchor" href="#一面-2"><span>一面</span></a></h3><ol><li>算法题：leetcode16.最接近的三数之和，leetcode234.回文链表，leetcode72.编辑距离</li><li>自我介绍</li><li>前面两个项目是自己发起的还是什么契机去做这个项目的</li><li>ThreadLocal怎样保证其线程安全</li><li>怎样保证多线程来使用他？？</li><li>如果主线程中有信息，其他线程怎么获取主线程中的信息</li><li>项目中Redis哪些地方用到了</li><li>Redis的哪些操作有原子性</li><li>除了递减指令还有哪些指令具有原子性呢</li><li>两个项目里面你觉得那部分是有技术难点的</li><li>超卖问题还有什么别的解决方案呢</li><li>如果是两个应用都要写数据库，加锁怎么解决超卖问题呢</li><li>聊一聊乐观锁和悲观锁</li><li>两种锁各自的应用场景</li><li>ArrayList和LinkedList说一说吧</li><li>String类可以被继承吗？为什么？</li><li>JVM的组成部分</li><li>说一说使用的垃圾回收器</li><li>G1垃圾回收期和CMS的改进或者说不一样的地方</li><li>G1的分区，有哪些区（堆的分区）</li><li>G1的清除算法</li><li>什么情况下会产生full GC</li><li>原空间是用来做什么的？</li><li>TCP的四次挥手是怎么样的</li><li>为什么要等待</li><li>有没有主动去了解过一些新的技术？</li><li>从大学到现在做的最有成就感的事情</li><li>第三个项目是主导地位？可以安排别人的工作</li><li>你觉得你的优势是什么</li><li>学习成绩怎么样</li><li>反问</li></ol><h3 id="二面-2" tabindex="-1"><a class="header-anchor" href="#二面-2"><span>二面</span></a></h3><ol><li>自我介绍，介绍一个项目</li><li>这两个项目是自己开发的还是给公司做的</li><li>哪个项目是自己承担的更多</li><li>超卖问题是怎么发现的，解决思路，怎么找到的方案</li><li>网上的成熟方案你觉得有没有更好的方案或者现有的方案有没有什么问题</li><li>Redis失效后怎么保证与数据库中数据的一致性</li><li>Redis持久化可以解决这种突发的情况吗？这个没有调研过吗</li><li>一般去哪里找这些解决方案，不同地方有什么倾向性吗</li><li>做的这两个项目里面比较大的收获是什么</li><li>这个项目后面会继续做吗</li><li>自己对未来一两年的规划是怎样的</li><li>行业或者技术方向会有考虑吗</li><li>为什么是Java和Go呢</li><li>当前行业的语言都了解过哪些</li><li>你觉得自己的最大的优势是什么</li><li>反问</li></ol><h2 id="京东一面-30min" tabindex="-1"><a class="header-anchor" href="#京东一面-30min"><span>京东一面 （30min ）</span></a></h2><h3 id="微服务中间件开发部门" tabindex="-1"><a class="header-anchor" href="#微服务中间件开发部门"><span>微服务中间件开发部门</span></a></h3><ol><li>自我介绍</li><li>实习项目中确保结果准确性</li><li>实习项目上游数据有问题怎么办</li><li>Golang new 和make的区别</li><li>为什么多协程优化，不使用协程呢？</li><li>实习项目过程中还有什么可以优化的地方</li><li>微服务的优势，为什么用微服务</li><li>怎么确保线程安全</li><li>信号量和锁的区别</li><li>你有什么问题吗？</li></ol><h2 id="pdd-一面-java" tabindex="-1"><a class="header-anchor" href="#pdd-一面-java"><span>PDD 一面/Java</span></a></h2><ul><li>MySQL</li><li><ul><li>提交了怎么样的事务有可能导致死锁</li><li>怎样用？什么情况使用</li><li>数据同步怎么实现</li><li>使用null作为条件查询问题</li><li>最左前缀原则</li><li>索引下推、索引覆盖</li><li>join原理实现</li><li>索引设计讲究/原则</li><li>聚簇索引</li><li>InnoDB为什么建议用自增整数作为主键</li><li>MySQL内存磁盘同步机制</li><li>数据页在内存中是完整的数据吗？</li><li>分库分表</li><li>MySQL主从架构</li><li>MySQL什么时候会死锁</li><li>表中有业务主键、逻辑删除标志，逻辑删除后又插入同样的一条记录，平衡业务主键和逻辑删除的问题</li></ul></li><li>项目工程</li><li><ul><li>业务背景</li><li>系统QPS</li><li>项目中算法如何使用</li><li>项目中的架构设计有何问题</li><li>业务修改后 MySQL、Redis数据如何更新</li><li>如何进行数据持久化</li><li>哪一部分占比较高</li><li>如何重新设计MySQL、Redis架构</li><li>设计模式（工程上使用）</li><li>单体应用多层异常处理原则（异常管理原则）</li><li>Redis、MySQL配合使用，如何确保数据一致性</li><li>项目介绍</li><li>系统故障问题、如何解决</li><li>服务器部署情况</li><li>代码迭代过程中防止代码腐化</li><li>关注的业务指标</li></ul></li></ul><h2 id="pdd服务端开发" tabindex="-1"><a class="header-anchor" href="#pdd服务端开发"><span>PDD服务端开发</span></a></h2><ol><li>自我介绍</li><li>项目的各种细节</li><li>服务发现一般可以怎么做!</li><li>InnoDB 引擎的特性</li><li>MySQL 数据库支持高并发的读写，设计上有哪些可以用的方案?</li><li>了解哪些缓存淘汰策略?</li><li>go 的 defer 机制</li><li>go 的 map 是有序还是无序?为什么?</li><li>GET、POST 区别</li><li>HTTP 是无状态的，如何做到有状态?(cookie session)</li><li>HTTPS 过程</li><li>算法题:</li></ol><ul><li>LRU</li><li>LeetCode 62 不同路径</li></ul><h2 id="酷狗音乐" tabindex="-1"><a class="header-anchor" href="#酷狗音乐"><span>酷狗音乐</span></a></h2><h3 id="一面-3" tabindex="-1"><a class="header-anchor" href="#一面-3"><span>一面</span></a></h3><ol><li>mysql存储引擎?</li><li>mysql隔离级别? 分别解决了什么问题?</li><li>2pc, 3pc 算法</li><li>10亿个数据获取前100个最大数据?</li><li>单个表到达多大要进行拆分? 为什么需要拆表?</li><li>redis哪些使用场景?</li><li>服务的熔断降级?</li><li>平时如何提升和学习?</li><li>TCP和UDP可以绑定同一个端口吗?</li><li>linux如何查看cpu, 内存负载?</li><li>进程间通信有哪些方式?</li><li>redis的数据类型?</li><li>redis和mysql的一致性问题?</li></ol><h3 id="二面-3" tabindex="-1"><a class="header-anchor" href="#二面-3"><span>二面</span></a></h3><ol><li>项目中涉及到哪些监控? prometheus</li><li>队列出现消息积压, 如何处理?</li><li>消息幂等性?</li><li>一个sql语句, 已经建立了索引, 但是突然查询很慢, 如何排查?</li><li>索引失效场景?</li><li>mysql如何解决的幻读?</li></ol><blockquote><p>select ... for update: 保证当前事务中查询的范围加锁, 不被其它事务修改</p></blockquote><ol><li>做索引优化, 如何减少回表次数--索引下推</li></ol><blockquote><p>索引下推: 指将上层(服务层)负责的事情, 交给下层(引擎层)处理.</p><p>不使用索引下推: 根据索引中的主键值, 定位并读取完整的行记录, 然后将记录交给server层去检测该记录是否满足where条件</p><p>使用索引下推: 获取索引, 判断索引是否符合条件范围, 如果满足, 再进行对应的回表查询获取主键, 如果不满足, 直接过滤掉</p></blockquote><ol><li>分布式事务, 二阶段提交, 三阶段提交的区别?</li><li>linux查看网络io的命令? netstat</li><li>如果出现大量time-wait状态, 如何处理?</li><li>网络的拥塞控制?</li></ol><h2 id="b站外包-go开发-一面" tabindex="-1"><a class="header-anchor" href="#b站外包-go开发-一面"><span>b站外包/go开发/一面</span></a></h2><ol><li>自我介绍</li><li>在百度什么级别？t几？（没有技术级别，当时忘记自己是什么级别了，说了个m，然后他说m是经理hhh）</li><li>怎么设计一个api的（没答好，已读乱回）</li><li>怎么去防那个ddos（redis限流+nginx层做处理，最后还是花钱买服务）</li><li>怎么部署那个安全拦截服务的（领导买了，在控制台做的服务，点点点）</li><li>cdn的理解（加快访问速度之类的，问我还有没有别的，我说没有）</li><li>负载均衡怎么做的（领导在控制台点点点）</li><li>说项目没难度（我说是，不像b站外包用到这么多技术）</li><li>分表是怎么分的</li></ol><h2 id="b站外包" tabindex="-1"><a class="header-anchor" href="#b站外包"><span>b站外包</span></a></h2><ol><li>旋转数组</li><li>mysql索引相关。</li></ol><ul><li>B+树有什么特点？</li><li>为什么不用B树（查询的速度差不多，因为b+树数据都在叶子节点）。</li><li>非聚簇索引和聚簇索引的区别。</li><li>索引为什么要用id不用字符</li></ul><ol><li>Linux相关命令和场景</li><li>docker和k8s</li></ol><h2 id="_360-一面" tabindex="-1"><a class="header-anchor" href="#_360-一面"><span>360 一面</span></a></h2><ol><li>协程池的作用?</li><li>内存逃逸分析?</li><li>go的内存回收什么条件会触发? go的GC能够手动触发吗?</li><li>channel的底层实现? 有缓冲的,无缓冲的channel, 如果管道已经关闭了, 读取会不会发生错误?</li><li>切片使用的时候需要注意什么?</li><li>go中的参数传递是值传递还是引用传递?</li><li>defer的执行顺序?</li><li>100G的文件, 统计出所有英文字母, 按照字母表顺序输出</li><li>linux如何分割文件?</li><li>接口性能如何优化?</li><li>什么情况会全表扫描?</li><li>主丛同步的原理? mysql还有什么相关的log文件?</li><li>分布式锁的原理?</li></ol><h2 id="_360-二面" tabindex="-1"><a class="header-anchor" href="#_360-二面"><span>360 二面</span></a></h2><ol><li>自我介绍</li><li>实现LRU算法</li><li>这个lru算法用在生产环境会出现什么问题</li><li>如果十万个线程同时put，会出现什么问题</li><li>如何控制并发，加什么锁，读写锁还是互斥锁</li><li>进程、线程、协程</li><li>程序从加载到运行的过程</li><li>为什么线程消耗比协程大，具体体现在哪些方面</li><li>生产中哪些服务用的 进程、线程，为什么要这么做，有什么好处（今天第二次问到）</li><li>nginx master-worker进程、进程与redis 进程、线程</li><li>数据库事务，隔离级别</li><li>各个隔离级别怎么实现的，原理</li><li>RR能解决幻读吗，为什么</li><li>MVCC</li><li>数据库中的锁</li><li>乐观锁、悲观锁适用于什么情况，并发，读多写少</li><li>分布式锁</li><li>zookeeper、mysql、redis 、etcd 怎么实现分布式锁，各有什么优缺点，生产中一般用那个</li><li>zookeeper原理，怎么保持高可用</li><li>tcp三次握手、四次挥手</li><li>timewait、closewait出现，怎么处理</li><li>tcp调优相关参数</li><li>拥塞控制算法、滑动窗口、零窗口报文</li><li>http1.0 - http3.0 改进，优缺点</li></ol><h2 id="_360-三面" tabindex="-1"><a class="header-anchor" href="#_360-三面"><span>360 三面</span></a></h2><ol><li>说说 Linux 常用操作，ps 是干嘛的</li><li>Go map 为什么是无序的？</li><li>MySQL 索引分类，索引的优点和缺点</li><li>分库分表</li><li>Cookie 和 Session 的区别和应用，分布式 Session 的实现</li><li>TCP三次握手/四次挥手</li><li>Redis 的数据类型及其数据结构，Bitmap 是什么</li><li>Redis 的雪崩效应 ，是什么，怎么解决</li><li>线程，进程，协程区别</li><li>算法：用 Go 手撕快速排序</li></ol><h2 id="好未来" tabindex="-1"><a class="header-anchor" href="#好未来"><span>好未来</span></a></h2><ol><li>为什么要自己实现大顶堆? 大顶堆和小顶堆的使用场景?</li><li>如何利用堆, 获取第k大的元素? 堆如何删除某一个特定的节点? 大顶堆如何转换为一个小顶堆?</li><li>引入mq, 实现异步提速, 如何理解?</li><li>协程池使用的是第三方包吗? 如果自己实现一个协程池, 描述你的思路?</li><li>recover能捕获到其它协程的panic吗?</li><li>说一下对grpc的理解? grpc互相调用, 如何实现互相的权限验证和授权?</li><li>http2.0 的tsl三次握手过程?</li><li>grpc中, 如果客户端需要向服务端发送大文件, 如何实现? (使用客户端流模式)</li><li>http2.0的相关特性? 其中的多路复用为了解决什么问题? (解决对头阻塞问题)</li><li>grpc中的deadLine和timeout, 应该怎么用? grpc的流控是如何处理的? 滑动窗口控制发送和接收速速率?</li><li>go-zero中的服务熔断和限流是怎么做的?</li><li>以下两个代码片段输出的结果:</li></ol><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()  </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    result</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    defer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">++</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">result</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    result</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    defer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">         result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">++</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li></li></ul><h2 id="深信服" tabindex="-1"><a class="header-anchor" href="#深信服"><span>深信服</span></a></h2><ol><li>slice原理 底层数据机构</li><li>map 原理 底层数据结构 _ a.扩容机制<br> b.并发会导致什么问题？为什么？<br> c. Map的key是有顺序的？为什么？<br> d. 能否实现map key的序</li><li>Go垃圾回收，算法 三色标记是哪三色，分别代表什么？</li><li>堆和栈区别？内存何时分配在栈上？何时分配在堆上？</li><li>如何保证缓存一致性？</li><li>redis 有哪些数据结构？常见用途</li><li>虚拟机和docker区别<br> Docker 底层原理 通过什么实现</li><li>二叉树前序中序后序遍历怎么回事？</li><li>写代码实现两个协程交替打印100以内数字</li><li>Mysql如何优化慢查询</li><li>Shell命令考察<br> a.如何判断一台服务器还是活的<br> B. 给一个文本文件 取出其中特定的列数据 然后排序</li><li>kafka如何保证消息不丢失</li><li>udp报文头部有哪些字段？</li></ol><h2 id="北京贝壳外包" tabindex="-1"><a class="header-anchor" href="#北京贝壳外包"><span>北京贝壳外包</span></a></h2><ol><li><p>自我介绍</p></li><li><p>项目拷打</p></li><li><p>Redis 跟 MySQL 以及 Kafka 之间是什么关系?</p></li><li><p>Kafka partion的概念</p></li><li><p>Kafka 偏移量</p></li><li><p>比如说有你在线上发现一条慢SQL，你怎么分析它?</p></li><li><p>索引的最左前缀原则是什么意思?a&gt;1and b=1andc=1,你看这个能命中这个索引吗?</p></li><li><p>Redis 常见的数据结构?他们的应用场景?</p></li><li><p>zset 你一般在什么场景下会用?底层的数据结构是什么?</p></li><li><p>JWT 是什么东西?</p></li><li><p>协程了解吗?和线程对比</p></li><li><p>一道算法题</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> 找到具有最大和的连续子数组，并返回该子数组</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>编程颖</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> 用两个协程，两个channel分别接收1，2，并打印</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="网易外包-go后端开发" tabindex="-1"><a class="header-anchor" href="#网易外包-go后端开发"><span>网易外包/Go后端开发</span></a></h2><h3 id="一面-4" tabindex="-1"><a class="header-anchor" href="#一面-4"><span>一面</span></a></h3><ol><li>自我介绍</li><li>mysql查询慢是什么原因（没索引、表数据量大、死锁）</li><li>mysql插入慢什么原因（表数据量大，sql语句多，表索引量大）</li><li>抽奖逻辑是怎么样的</li><li>怎么实现用户登录</li><li>用户登录安全有了解过吗（乱说一通）</li><li>redis击穿</li><li>redis穿透</li><li>redis其他数据结构有用过吗？hmap、zet</li><li>短信发送失败怎么处理的（记录发送状态+重试机制）</li></ol><h3 id="二面-4" tabindex="-1"><a class="header-anchor" href="#二面-4"><span>二面</span></a></h3><ol><li>自我介绍</li><li>cms系统0-1开发的？（开源框架二次开发）</li><li>做了哪些功能（栏目、文章、配置、模型管理之类的）</li><li>登录的过程说一下</li><li>session登录有什么弊端，怎么改（多台服务器拿不到session，用redis做缓存）</li><li>客户端拿着token，你是怎么通过token获取客户的信息（校验token，获取token作为key的信息）</li><li>有没有难一点的功能，说一下（没有，单体项目量不大，只是业务复杂度的难，技术上的难点没有）</li><li>用户信息怎么做加密，token怎么生成之类的（md5+拼接指定的key或者之类的）</li><li>200个券码，发送客户，怎么设计？（分布式锁，数据库唯一索引兜底）</li><li>还可以怎么优化（redis布隆过滤器，避免大量重复请求，处理逻辑做幂等方案）【睡不着想起来还可以做mysql的乐观锁，数据做缓存预热，减轻数据库请求压力】</li><li>长连接做成短连接，怎么设计，怎么做到短连接唯一（说了和自己的 短信生成方法（用户id活动id，二进制），php的uuid，时间戳，uuid截取？引用第三方库之类的）</li><li>面试官说要短的，要唯一的，答不出来</li></ol><h2 id="面经详解跳转链接" tabindex="-1"><a class="header-anchor" href="#面经详解跳转链接"><span>面经详解跳转链接</span></a></h2><p><a href="https://link.segmentfault.com/?enc=m40zIos8oLZX3f%2Bq0l9NaA%3D%3D.u4mDsDE4CTUOUxAKS94TQ5XAqBe8F20slXVp705XwsY7gz7HyckFdnDnMy5bELKntaYsBBO1H2W3raHdevMixl7s8l7VtTWQehOWvWYCX8YZ4XK6UikWl1Y1HsBtEQVl2AxrhR%2F5Nx1DUGGZX02AxfsdtWFPOAWu7Xf72Vl%2BSjWXLrsklir1HQkQhnV4a7%2BqE4TytI8fZsDPDlPzdRJerQb9Sk%2BcYnytBHZobIwzejsGdi7%2BsjMCvhDaoqq6vAbokeQ79pKSyi0xH19ZgBDgy4YB6LnA%2BcUZNmD503eQkfcprGuRzhz4a8WelnOEb%2F8o" target="_blank" rel="noopener noreferrer">腾讯校招面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=8jrz71ri32jZ00BrXZEGrg%3D%3D.nc9rDqU%2BKKLgoaarp3yYJfFlJ2oFMOcmkNDEqOaqSRKDkiZbQlmHwcbveDMAcdUai08oJ9hPNU5v5uo21YDb%2BX9GXUdtAZtwUF1yY0vlriyAMSb47nCOfbPnsHUjMSou8VmawtC%2FkUGG1y%2BLKH0yfJb6dwiVbeR7hxilDVzD2O1dgwy8NWf5keqrO2U3wNvJLN%2Fx%2BezKAeEceoftm5RHiR2xBHjWkOZJMsiKOe%2F%2FELRqoPK1vnHT%2FCYFUPup8c%2FR6nWzlA%2FsPtkrVQCehrlJ722IUoXEzf%2FHlCUwFrHW24gN%2FDc0USnink4B0o%2B%2F6Zek" target="_blank" rel="noopener noreferrer">腾讯互娱面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=yodkuUfB7SgnRF%2Flx9d9PQ%3D%3D.rvbA2ETJrUTz8rmiSy6k1y3IFb%2BLFJGff%2BjFPzTmecIpn4GQnFMEWZJvao9pPFGUp61GnXnH12lSI7wjPJ392ozza8mny5TVAKGPtqvAtcRRQHUHnkL%2BgAZpWPRnoGfsYS8xH8ktWVI2ic9B%2FbkF9Fk6bUw8EI1Bvlr3FPTQMYCrZGyIZyUSldR4pUcudYIDVMiTE%2Bx5DOkadEOFKGLcmdI4DVgNsn4xB65GBuv7%2FaFW3DIe3uYHtSQg2R474kysSKIngZnkPoz0O88Qf6qZnEFrMl8gzfg%2BEcrleZj0PNH7rPupvo8epawdjhlSM%2Bn6" target="_blank" rel="noopener noreferrer">腾讯后台秋招面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=se5Dd3FsHt1vEoIXKfcuYw%3D%3D.JGSG6kkfzMe67LqDqpXuuNiKS0J%2BQTyxfdQ2QAP%2BGQ3Exx960qg7d%2Fis6Y%2FfbfDzinKk80doEXlWxi8rdSb9MZixEjdYSzOiqdq6MWkssT3LsVrywoBadWLYb4RiG3HgZN8HHe4JoRYoUZipj4RhrMp4meQvF7eYu1rDBABGAeps9yt%2ByxC8GlypUITFoQ8YmUarAZC4B9qyRVW5D1i21GepRYLSEUp4VUVpB9QRgLTmLSg5xJ0DPQlP1nJbcGj%2FNWgxk0up%2FESQbac4sudVRTkc0OGS7MGAZgVWk027ZIPtjPiopuL8EQTjo8FvCD0u" target="_blank" rel="noopener noreferrer">腾讯面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=SeI%2Ft%2BRThRpiR4EkYJPNBw%3D%3D.5uQYKKSMkU9sZ5wGTc2Zd%2F7KtL4Es18jQT53wIKz%2BaUDLnTdGe7UAa1AAGRM4MM28CxNsdwXdlB0eHXq%2FQnkMn9X4DRtYVoth7abZDSHflsVwO%2BSbMRiKyeEiAyAqHKBaXSnW4s%2F1VKzl6GXPMrU%2BKhtvaMh%2FoAoGEug0EXpR5n1B9yUrLMIppw%2FCqiNOYl4xCmmaKttVyTyaK2c5jsLxydjxo9jEe6mgGVsUm1%2FwyMeDL9IkKwoaQmInJ5zNYoQn01oXju2jqxg98nxM8FVfv2VTeiITfrE%2B3QtleDEdqEPVmf%2FOHOBnWmMNwZl76nU" target="_blank" rel="noopener noreferrer">好未来面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=fJzzym3aJ3SIUR9Dm0lPVg%3D%3D.ca4oKX5xDplE8SijtdL2wmP76sTPVCcko%2FMza4feOJUWtgZuOlQMcjgT3%2Bgtvl6cJZacb8fm1io0ZnuiagQZcff46vTQqaqWrKKltzCLlXo32iD%2ByoQwx5CBDOahf8%2Fax2PKanNqq4D5rfBofj28my4LmUohTfHQ3Y2Tvb4InYZY8CNysBx3XSerFc3kh8%2BvInAOlep7FDHGUYitdV%2B%2F5r4CF7DJ4ETiXAffI29TWk%2F1KdsAyzO4IzDo5A2pNEuHTdTmg%2BhkqJlA9XaHAbBOcBjaS1%2B%2BuOGGp10PnOuWsj7gUvrJ0sgJbvSh3QkChQKG" target="_blank" rel="noopener noreferrer">PDD面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=UDU2TowfwVkVoe3Ua%2FEkUA%3D%3D.oE2PoIbZCD2WMWVlIdtH4bLQtfZh0PO6Ix%2B5mPnAmlCyb8dUMRj8Tfk7jL0cVdXes8eo38MMfmc1Tc4qmCkSUXZDQSdEd%2BkF1sUjLNSmctgpHXRzwDJB3mdU%2BnZEe4RUQPQjjShxtECXzymA%2FhrnEXhO6Rox9bi65XLmu5r0G%2F00r0Is0amzQi5EjXR8pm6Pnj0QLnksRYo1zLB4W4Ee9IpUX57AxB6I22fMiWdN5g9b6OR95oN1oxqdKVOvxGvq447JD4gGuY5WUkKprukjJDE7bAyw9uMwJ6%2BrXSAYl2aek2O9Z%2FudvgXpxyMNbShU" target="_blank" rel="noopener noreferrer">PDD服务端开发面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=TMbiKP0BnRyIOSUIjiZxqg%3D%3D.3LwqRRhsF2eaBff8gI14t4JzwXOCZxMN2Zd6mGV46D%2BJMTeA%2B6NKC%2Fy45PJN%2F1tVCULZDgZ0GvV2YtiLakMeE4fa0Y09J1us5FIxC6ZV9dAAhBfNZ8a7%2BIt68Rk%2FiuoyIelYexAostPoyJu1YWqTNy3P9xLhuF0e6b%2FOlPcmX3Ig8CJMzwhPdwpf0y3itvFkKXMoH7Pnn5N9CHwRgnRcDaSP0f0%2Fov%2Fd1pT1eR%2BRjcoByK9VJ2ItGfxXNIjcBzOjSFgD5JFRxfEmyRoMHBczQUGrd4%2F5R%2BwzQNj1d0anUYU7UYMIkb0NvueqM%2BT8%2B0yp" target="_blank" rel="noopener noreferrer">百度面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=lzDmKK7zRXV1kJhAWrcIpQ%3D%3D.%2F12bLO%2BsLeLvsxa05cPtsEWfdwfmXp7KFiMPeQ8Q9ViTkNQoXml1Ih5lCCeOSmXybt1mzU9eebvzJJlrR9RFIMHQKZ6FJ509wkzYbsSKWWRWKDPxf0zvGk2swp2yAWNVSAK2zrv6iA7pIdT5kZ35qoUJCQsHtEyOPSInPvJ%2FuSYQCWduwlNAgjZybC8GPfGHTwRB2pVbYg2T7xn4%2Fqo%2FhjFMPAsB2ILXjRXc0SAsntF77sgagEF6F9GfrRxjIiltvUJWdXLQoOvlr6KyPrcb9NoWTYTv4woFjB827B5YkiK8YC3qPXOsqQ7Xq0rJJfwb" target="_blank" rel="noopener noreferrer">百度面经详解2</a></p><p><a href="https://link.segmentfault.com/?enc=r%2BtH03YZPzMOybeQab244Q%3D%3D.QhI%2Fbuh%2F0Yhu%2FXk1YsriWFVp%2BrPUNU34Qvvrt%2B52FagJAyYXMXJi8sViT3UphX8DY5s%2BgwiGfhtGN%2BMMLviHj0uZzsy0KGaNMfB5cYhNSatXA4ZccBEzANDZRbzn8AYnQQDI89V%2BmoGvlYM8%2BGd8PWSL4dw4UPdpY7QC0NRjEQKza4wdVO9gQCw8bWIdANLBFKPTem3ib9HgmHMG0dJ0c2BHWqltiDnMqD8N7o7EZy53V8rXKM4JuE9dsxDU7j0NbCLj%2FKGZQ9imiKs4ooIY04c4bNpcBnq28WDxiv%2BrrAJKiFhVn67v%2FFg734rHHYKw" target="_blank" rel="noopener noreferrer">百度面经详解3</a></p><p><a href="https://link.segmentfault.com/?enc=cZDQ9rW88yG3Q9BjVKwh%2Fg%3D%3D.mWnEXqwxjYsZsNcodHFwJDX4jh7%2BIXdJG3GKDcs0lnHWw%2B%2FQU%2BrPwitEBawHsa5i8hStq9KaO1gePaqMzhWgjFNDXuXdICx2sqq1Q39F3cJCGPI2cXNKf4Fdrb1y6FJkPA7ukxT44368lp84GQBhPIwNd6D6xACXhiY%2B74diGoLHskxBF4YK9DSKumrsj8w6n5f%2FQW2ZzUuP%2BOp0GEyt9FFpdrX99Uei8DgJGVYnqUrSIrA1z0tl7JRn7lBJJ7ouw8DKdL%2BQLhrXIdUSr7R4Z8htX0OOejE%2FwnFl0W5kqIY7wh6MylpdGj6tMGsmESny" target="_blank" rel="noopener noreferrer">阿里校招面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=hmvPwOR0qdTfcVo%2F3iBEJA%3D%3D.YTDXog%2BD9fc5UoH2lNcQBghy4uuiNKTtpis6HPZOi73Bev6NPUv%2FD2H6BsSeMvnVDZCKprA6U7eGeIPwGqcZZ%2B2NqCwIFe525gL9kr7EAiCM82ryp%2FbdP8nJ%2FKl0fqHIAhSUUHswng0NKxSVDwoDW0S78yV2ucSFKKJjGjJcAhf5xQhpeqfm%2Fb9WQ2n0Zkxrhr4d5mIyeO127q2SoYWCptBpnv7ip%2FNSH3OWcUub9ZKSu7HtVdPSxtZ3hWhqQXkwEfvULK0NfMMeb9rjkt2RgXUZC4qtEHkHO6a2W1Mq4z3HGR9vsPTeK1YLwlUeg5J5" target="_blank" rel="noopener noreferrer">阿里社招面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=JizVzoULI%2Bz9XtZvSH8Esw%3D%3D.gPB%2FgB97RaQuDwceGPac2ozLE07lzXHQ7XywMs4bc25UOFEjG8Gd%2FbT%2FeaKjwkkKClctdB2nxpl%2BKYDcXoJ4xo0jNSFqTLIY8qv9Z1gDhtkGcec9AVHm0p7zmhjR0eq3z%2FjltFq1DpSh%2BAuE3yREn1kHREL2VYbShJf7UJwnEKcuettKFSFG69KjpC%2FAq%2FEwfCjw27n4fc7IHuJ98kLwwljr0Y%2BlDIFbM8G8SYmxVn0PxjyCcpWcP6qP%2FlV48QX4dQrQZaheDY7NMZKw0lCsw0h5rU8fhR6CAM1Smv8FBwRSmahlYTbQfeKhhkPfaiUR" target="_blank" rel="noopener noreferrer">贝壳外包面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=23zP6sIn25AZQ3NIe25HAA%3D%3D.tEZpElZu2G6OIJdWeaZr925UgGV242AplWokHcEuJExulQ4NWAOQFVRySRU82Ynp2pgIqRA0O9SEKvoovJgbfU87SWQY6KVfDCX3TsgRXHsP6FZ%2BplqTQsNKCahdO%2BQ6V%2FxFzu%2FGheYcSRXHVzfZ7toq9t3%2FUZUY3R5GnuDyNv8VKz0qiX6F1J%2BEkjZeLhqBmYI9VmhhcpQJhFqMGbfi698Nmmg%2BC5FieuN9GFWcNjW2jc%2BQazEK7kElIXpYFGj3UFtkpal7ATRHotxIyrQhnYLH1A4s4j16G6vMXF4Yf2FNpN4ogrAORx5Uy9vipRHI" target="_blank" rel="noopener noreferrer">字节跳动面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=T%2F107pU14EKJEJ1XF9uzQg%3D%3D.aSXcob3XAavDp8fwvgxDCBrt%2BcoBaShoDBX9pYRF9825rgf9ouhepAg9mP2hFMUROSqunqaSeigOstlMQpQygea2rVJNxONonL4m3N90FHR7La%2BXc0XFW%2FTLn%2B%2Fjjdxvcab3ry42wOo40RQK0HTWk01%2F%2FeclbCOfIF6plNzaW1Ux9ENdd615mTvFQSrIpDZxoZML%2FRx8qBOi3jGqGs2GgDaTPb9o1TF147FUSBilgOrMbF29qQT8aj3nzj8rp8Ge3nNyhnCCxYZwzVxVujHEQnTnQfXkk6ek6C6UVO7jWshC96nw2ocvlKrFswqy2QM8" target="_blank" rel="noopener noreferrer">字节跳动面经详解2</a></p><p><a href="https://link.segmentfault.com/?enc=yh4IrhT7yxk54zotFEoYUw%3D%3D.zgC8pLzlvjXmvN%2FDXKD8e84dgsjwbnVlNQGJkqIT7eQuQmaaWBhoizKq4WU8sQCbVL5mSqhWvoVrHwpFUtVbZ4CdYSLylsmpFCZSjiduoOupf44l3F0Xh5chvv6yWaFyEsr9Rmnd%2BpN7VdNb2um7etrM6FtZCq3xROTrk57PEEvNL2CHl15cdz1mPzaQg3xA27ux86fY4vBa9GczJVRpkVGECDvvS3DYOYDPrkXupHHrt9qQZOAi%2BEwpVmhdkFRXjky0uoYVbVah7a0XoieC8R6J5P8KrhQdY1LfP6lT9%2FzSCxm62qmdH%2BiKDBSGkmJH" target="_blank" rel="noopener noreferrer">字节跳动面经详解3</a></p><p><a href="https://link.segmentfault.com/?enc=WNx4Wql5w3nIGpcS1oQvLA%3D%3D.1HPIL7VCPFiPsVC1q5gybf%2B0XI7gbgHqz%2BMwcYVxtJULvdD31J4Yz71hNUlYoAxFkuXfJv6mVE9hvwf6Sg6evAhfYyuCVjtVo7IKyZDjjfgRx%2FyEnT5PjODtfkmG2GSm9s7%2Bo744KImfzG%2Buaf16ENzz%2FAOB69EW24OFzskpc6vH8b5m6L5TH%2BBnV6JV1qf6xyZ%2FQOuLe3yHS5hcO69FYPDJGo4k27v7bkrE1yzqYjD38X6Vc%2FXfZhQ1Urww9IyoUmp3FpmdCFZ52F04XTAqM%2FBZxbzQdaVT69NK3oWfTTUAiWUq3%2FA9LSMqp3lmygNu" target="_blank" rel="noopener noreferrer">得物面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=f8ccO5aJhetp0RKazyPZZQ%3D%3D.gVwIfP5jLHvhyjWgaqa8Thu6QS43Ipa08vC8yrjgNBxyP%2FYxkGHSiKey4ugI1sNCa1ZpapMarIUiUV%2BeW4aEeulv47zb3uqFE1QU6JWUZMcol5kVND1hXWksX1PcF8qMOs%2B6MnXmtBgh9P6PEqiN5y2RjuNRC0XawTGtJFxro%2BWMOb60Vks%2F5RzTSYUqOdkxt6qas5zBTB702wT%2F3zI9epZiEavm6xrbnqgD%2Ba4Cho6CqjJZMtvgBn%2F%2FxCrXTQOve6d9Xcwm9xanMidPX1DdgBS8pQ5BKhx04xM7fD0%2FgVuDUFXRACT6zAAE6D5C7YDv" target="_blank" rel="noopener noreferrer">美团面经详解</a></p><p><a href="https://link.segmentfault.com/?enc=x2WHaz3QK3dQLh3OgVjFeQ%3D%3D.TzsziK4mgk1wWq4EsXXV%2BT7OzkHuYCNMGZUrsgrT5%2FpDMbewqPxzJocRGuNKj2Qfk0Go3G8CKf2yNVuShx5s68ZyJ%2B6Fakt%2BsEyZBTXXicwk2dN9jpp7uAouaioI3S%2FXrcbQA3IkLhE0uWsK3VBeYK5tAmby%2FlnDACOr8kBIAKd7KMomYzF90sbwJHiP1MvtNoJe09vfSYnQl9A4AOk8G7nq2tgVhjCEIJfc8hkBWQjv4D8mhZH1l2Xcgtv09%2BccQbKZ7rsenjsSR2NNsR%2BzmrBL8xYmmFTHASks5osWcG7G6O11nvUthE8aJDftmakm" target="_blank" rel="noopener noreferrer">深信服面经详解</a></p>`,204)]))}const d=i(h,[["render",k],["__file","面试题（答案）.html.vue"]]),r=JSON.parse('{"path":"/golang/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E7%AD%94%E6%A1%88%EF%BC%89.html","title":"面试题（答案）","lang":"zh-CN","frontmatter":{"title":"面试题（答案）","order":1,"author":"xiaoxie","date":"2020-01-01T00:00:00.000Z","tag":["golang"],"star":true,"description":"腾讯一面 协程池的作用? 内存逃逸分析? go的内存回收什么条件会触发? go的GC能够手动触发吗? channel的底层实现? 有缓冲的,无缓冲的channel, 如果管道已经关闭了, 读取会不会发生错误? 切片使用的时候需要注意什么? go中的参数传递是值传递还是引用传递? defer的执行顺序? 100G的文件, 统计出所有英文字母, 按照字母表...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E7%AD%94%E6%A1%88%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"面试题（答案）"}],["meta",{"property":"og:description","content":"腾讯一面 协程池的作用? 内存逃逸分析? go的内存回收什么条件会触发? go的GC能够手动触发吗? channel的底层实现? 有缓冲的,无缓冲的channel, 如果管道已经关闭了, 读取会不会发生错误? 切片使用的时候需要注意什么? go中的参数传递是值传递还是引用传递? defer的执行顺序? 100G的文件, 统计出所有英文字母, 按照字母表..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-16T07:51:39.000Z"}],["meta",{"property":"article:author","content":"xiaoxie"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:published_time","content":"2020-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-16T07:51:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面试题（答案）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-16T07:51:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaoxie\\"}]}"]]},"headers":[{"level":2,"title":"腾讯一面","slug":"腾讯一面","link":"#腾讯一面","children":[]},{"level":2,"title":"腾讯二面","slug":"腾讯二面","link":"#腾讯二面","children":[]},{"level":2,"title":"腾讯一面（校招）","slug":"腾讯一面-校招","link":"#腾讯一面-校招","children":[]},{"level":2,"title":"腾讯二面（校招）","slug":"腾讯二面-校招","link":"#腾讯二面-校招","children":[]},{"level":2,"title":"腾讯三面（校招）","slug":"腾讯三面-校招","link":"#腾讯三面-校招","children":[]},{"level":2,"title":"腾讯QQ一面","slug":"腾讯qq一面","link":"#腾讯qq一面","children":[]},{"level":2,"title":"腾讯QQ二面（电话面）","slug":"腾讯qq二面-电话面","link":"#腾讯qq二面-电话面","children":[]},{"level":2,"title":"腾讯云智","slug":"腾讯云智","link":"#腾讯云智","children":[{"level":3,"title":"一面","slug":"一面","link":"#一面","children":[]},{"level":3,"title":"二面","slug":"二面","link":"#二面","children":[]}]},{"level":2,"title":"腾讯","slug":"腾讯","link":"#腾讯","children":[{"level":3,"title":"某不知名组一面（电话面）","slug":"某不知名组一面-电话面","link":"#某不知名组一面-电话面","children":[]},{"level":3,"title":"二面","slug":"二面-1","link":"#二面-1","children":[]}]},{"level":2,"title":"腾讯音乐","slug":"腾讯音乐","link":"#腾讯音乐","children":[{"level":3,"title":"（一）开场","slug":"一-开场","link":"#一-开场","children":[]},{"level":3,"title":"（二）项目相关","slug":"二-项目相关","link":"#二-项目相关","children":[]},{"level":3,"title":"（三）Go和MySQL","slug":"三-go和mysql","link":"#三-go和mysql","children":[]},{"level":3,"title":"（四）算法与反问","slug":"四-算法与反问","link":"#四-算法与反问","children":[]}]},{"level":2,"title":"腾讯互娱 一面/Go","slug":"腾讯互娱-一面-go","link":"#腾讯互娱-一面-go","children":[]},{"level":2,"title":"腾讯外包 /后端开发/一面","slug":"腾讯外包-后端开发-一面","link":"#腾讯外包-后端开发-一面","children":[]},{"level":2,"title":"字节跳动","slug":"字节跳动","link":"#字节跳动","children":[]},{"level":2,"title":"字节一面（技术）","slug":"字节一面-技术","link":"#字节一面-技术","children":[]},{"level":2,"title":"字节二面（技术+人事）","slug":"字节二面-技术-人事","link":"#字节二面-技术-人事","children":[]},{"level":2,"title":"字节","slug":"字节","link":"#字节","children":[]},{"level":2,"title":"美团 一面","slug":"美团-一面","link":"#美团-一面","children":[]},{"level":2,"title":"美团 二面","slug":"美团-二面","link":"#美团-二面","children":[]},{"level":2,"title":"美团","slug":"美团","link":"#美团","children":[]},{"level":2,"title":"美团","slug":"美团-1","link":"#美团-1","children":[]},{"level":2,"title":"饿了么","slug":"饿了么","link":"#饿了么","children":[{"level":3,"title":"一面","slug":"一面-1","link":"#一面-1","children":[]}]},{"level":2,"title":"阿里巴巴","slug":"阿里巴巴","link":"#阿里巴巴","children":[{"level":3,"title":"数字零售技术部-ERP技术一面（电话面）","slug":"数字零售技术部-erp技术一面-电话面","link":"#数字零售技术部-erp技术一面-电话面","children":[]},{"level":3,"title":"二面（电话面）","slug":"二面-电话面","link":"#二面-电话面","children":[]}]},{"level":2,"title":"阿里","slug":"阿里","link":"#阿里","children":[]},{"level":2,"title":"阿里外包/一面","slug":"阿里外包-一面","link":"#阿里外包-一面","children":[]},{"level":2,"title":"蚂蚁","slug":"蚂蚁","link":"#蚂蚁","children":[{"level":3,"title":"工具开发一面（电话面）","slug":"工具开发一面-电话面","link":"#工具开发一面-电话面","children":[]},{"level":3,"title":"工具开发二面（电话面）","slug":"工具开发二面-电话面","link":"#工具开发二面-电话面","children":[]},{"level":3,"title":"工具开发三面","slug":"工具开发三面","link":"#工具开发三面","children":[]}]},{"level":2,"title":"百度","slug":"百度","link":"#百度","children":[]},{"level":2,"title":"百度后端研发工程师","slug":"百度后端研发工程师","link":"#百度后端研发工程师","children":[]},{"level":2,"title":"京东 golang","slug":"京东-golang","link":"#京东-golang","children":[{"level":3,"title":"一面 60min","slug":"一面-60min","link":"#一面-60min","children":[]},{"level":3,"title":"二面 35mn","slug":"二面-35mn","link":"#二面-35mn","children":[]}]},{"level":2,"title":"京东","slug":"京东","link":"#京东","children":[{"level":3,"title":"一面","slug":"一面-2","link":"#一面-2","children":[]},{"level":3,"title":"二面","slug":"二面-2","link":"#二面-2","children":[]}]},{"level":2,"title":"京东一面 （30min ）","slug":"京东一面-30min","link":"#京东一面-30min","children":[{"level":3,"title":"微服务中间件开发部门","slug":"微服务中间件开发部门","link":"#微服务中间件开发部门","children":[]}]},{"level":2,"title":"PDD 一面/Java","slug":"pdd-一面-java","link":"#pdd-一面-java","children":[]},{"level":2,"title":"PDD服务端开发","slug":"pdd服务端开发","link":"#pdd服务端开发","children":[]},{"level":2,"title":"酷狗音乐","slug":"酷狗音乐","link":"#酷狗音乐","children":[{"level":3,"title":"一面","slug":"一面-3","link":"#一面-3","children":[]},{"level":3,"title":"二面","slug":"二面-3","link":"#二面-3","children":[]}]},{"level":2,"title":"b站外包/go开发/一面","slug":"b站外包-go开发-一面","link":"#b站外包-go开发-一面","children":[]},{"level":2,"title":"b站外包","slug":"b站外包","link":"#b站外包","children":[]},{"level":2,"title":"360 一面","slug":"_360-一面","link":"#_360-一面","children":[]},{"level":2,"title":"360 二面","slug":"_360-二面","link":"#_360-二面","children":[]},{"level":2,"title":"360 三面","slug":"_360-三面","link":"#_360-三面","children":[]},{"level":2,"title":"好未来","slug":"好未来","link":"#好未来","children":[]},{"level":2,"title":"深信服","slug":"深信服","link":"#深信服","children":[]},{"level":2,"title":"北京贝壳外包","slug":"北京贝壳外包","link":"#北京贝壳外包","children":[]},{"level":2,"title":"网易外包/Go后端开发","slug":"网易外包-go后端开发","link":"#网易外包-go后端开发","children":[{"level":3,"title":"一面","slug":"一面-4","link":"#一面-4","children":[]},{"level":3,"title":"二面","slug":"二面-4","link":"#二面-4","children":[]}]},{"level":2,"title":"面经详解跳转链接","slug":"面经详解跳转链接","link":"#面经详解跳转链接","children":[]}],"git":{"createdTime":1736316896000,"updatedTime":1737013899000,"contributors":[{"name":"xiaoxie001","username":"xiaoxie001","email":"xie18115@outlook.com","commits":4,"url":"https://github.com/xiaoxie001"}]},"readingTime":{"minutes":142.05,"words":42614},"filePathRelative":"golang/面试/面试题（答案）.md","localizedDate":"2020年1月1日","autoDesc":true,"excerpt":"<h2>腾讯一面</h2>\\n<ol>\\n<li>协程池的作用?</li>\\n<li>内存逃逸分析?</li>\\n<li>go的内存回收什么条件会触发? go的GC能够手动触发吗?</li>\\n<li>channel的底层实现? 有缓冲的,无缓冲的channel, 如果管道已经关闭了, 读取会不会发生错误?</li>\\n<li>切片使用的时候需要注意什么?</li>\\n<li>go中的参数传递是值传递还是引用传递?</li>\\n<li>defer的执行顺序?</li>\\n<li>100G的文件, 统计出所有英文字母, 按照字母表顺序输出</li>\\n<li>linux如何分割文件?</li>\\n<li>接口性能如何优化?</li>\\n<li>什么情况会全表扫描?</li>\\n<li>主丛同步的原理? mysql还有什么相关的log文件?</li>\\n<li>分布式锁的原理?</li>\\n</ol>"}');export{d as comp,r as data};
