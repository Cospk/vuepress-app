import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o}from"./app-DIJDtupu.js";const i={};function r(l,e){return o(),t("div",null,e[0]||(e[0]=[a('<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>channel是大家在Go中用的最频繁的特性，也是Go最自豪的特性之一，你有没有思考过：</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Why：为什么要设计channel？ - What：channel是什么样的？ - How：channel是如何实现的？ 这篇文章，就来回答这3个问题。 ### [](#channel解决什么问题？ &quot;channel解决什么问题？&quot;)channel解决什么问题？ 在Golang诞生之前，各编程语言都使用多线程进行编程，但多线程复杂、混乱、难以管理，对开发者并不是多么友好。 Golang是Google为了解决高并发搜索而设计的，它们想使用简单的方式，高效解决并发问题，最后做成了，然后又把Golang开源了出来，以及到处推广，所以Golang自从诞生之初，就风风火火。 从Golang文档中，我们可以知道，为啥Golang设计了channel，以及channel解决了什么问题？ [Go Concurrency Patterns:](<a href="https://golang.org/doc/#go%5C_concurrency%5C_patterns" target="_blank" rel="noopener noreferrer">https://golang.org/doc/#go\\_concurrency\\_patterns</a>) &gt; Concurrency is the key to designing high performance network services. Go’s concurrency primitives (goroutines and channels) provide a simple and efficient means of expressing concurrent execution. In this talk we see how tricky concurrency problems can be solved gracefully with simple Go code. Golang使用`goroutine`和`channel`简单、高效的解决并发问题，**channel解决的是goroutine之间的通信**。 ### [](#channel是怎么设计的？ &quot;channel是怎么设计的？&quot;)channel是怎么设计的？ 我们以为channel是一个通道： ![](<a href="http://img.lessisbetter.site/2019-03-pipeline.jpeg" target="_blank" rel="noopener noreferrer">http://img.lessisbetter.site/2019-03-pipeline.jpeg</a>) 实际上，channel的内在是这样的： ![](<a href="http://img.lessisbetter.site/2019-03-channel%5C_design.png" target="_blank" rel="noopener noreferrer">http://img.lessisbetter.site/2019-03-channel\\_design.png</a>) channel设计涉及的数据结构很简单： - 基于数组的循环队列，有缓冲的channel用它暂存数据 - 基于链表的单向队列，用于保存阻塞在此channel上的goroutine 我本来想自己码一篇channel的设计文章，但已经有大牛：Kavya深入分析了Channel的设计，我也相信自己写的肯定不如他好，所以我把**Kavya在Gopher Con上的PPT推荐给你，如果你希望成为Go大牛，你一定要读一下，现在请收藏好**。 Kavya在Gopher Con上的演讲主题是：理解channel，他并不是教你如何使用channel，而是**把channel的设计和goroutine的调度结合起来，从内在方式向你介绍**。这份PPT足足有80页，包含了大量的动���，非常容易理解，你会了解到： - channel的创建 - 各种场景的发送和接收 - goroutine的调度 - goroutine的阻塞和唤醒 - channel和goroutine在select操作下 Kavya的PPT应该包含了channel的80%的设计思想，但也有一些缺失，需要你阅读源码： - channel关闭时，gorontine的处理 - 创建channel时，不同的创建方法 - 读channel时的非阻塞操作 - … PPT在此：[Understanding Channels](<a href="https://speakerdeck.com/kavya719/understanding-channels" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/kavya719/understanding-channels</a>)，如果你有心，还可以在这个网站看到Kavya关于goroutine调度的PPT，福利哦????。(访问不了请翻墙，或最下面看Github备份) ### [](#channel是怎么实现的？ &quot;channel是怎么实现的？&quot;)channel是怎么实现的？ [chan.go](<a href="https://github.com/golang/go/blob/master/src/runtime/chan.go" target="_blank" rel="noopener noreferrer">https://github.com/golang/go/blob/master/src/runtime/chan.go</a>)是channel的主要实现文件，只有700行，十分佩服Go团队，**实现的如此精简，却发挥如此大的作用**！！！ 看完Kavya的PPT，你已经可以直接看channel的源码了，如果有任何问题，思考一下你也可以想通，如果有任何问题可博客文章留言或公众号私信进行讨论。 另外，推荐一篇在Medium（国外高质量文章社区）上获得500+赞的源码分析文章，非常详细。 文章链接：[Diving deep into the golang channels](<a href="https://codeburst.io/diving-deep-into-the-golang-channels-549fd4ed21a8" target="_blank" rel="noopener noreferrer">https://codeburst.io/diving-deep-into-the-golang-channels-549fd4ed21a8</a>) ### [](#我学到了什么？ &quot;我学到了什么？&quot;)我学到了什么？ 阅读channel源码我学到了一些东西，分享给大家。 channel的4个特性的实现： - channel的goroutine安全，是通过mutex实现的。 - channel的FIFO，是通过循环队列实现的。 - channel的通信：在goroutine间传递数据，是通过仅共享hchan+数据拷贝实现的。 - channel的阻塞是通过goroutine自己挂起，唤醒goroutine是通过对方goroutine唤醒实现的。 channel的其他实现： - 发送goroutine是可以访问接收goroutine的内存空间的，接收goroutine也是可以直接访问发送goroutine的内存空间的，看`sendDirect`、`recvDirect`函数。 - 无缓冲的channel始终都是直接访问对方goroutine内存的方式，把手伸到别人的内存，把数据放到接收变量的内存，或者从发送goroutine的内存拷贝到自己内存。省掉了对方再加锁获取数据的过程。 - 接收goroutine读不到数据和发送goroutine无法写入数据时，是把自己挂起的，这就是channel的阻塞操作。阻塞的接收goroutine是由发送goroutine唤醒的，阻塞的发送goroutine是由接收goroutine唤醒的，看`gopark`、`goready`函数在`chan.go`中的调用。 - 接收goroutine当channel关闭时，读channel会得到0值，并不是channel保存了0值，而是它发现channel关闭了，把接收数据的变量的值设置为0值。 - channel的操作/调用，是通过reflect实现的，可以看reflect包的`makechan`, `chansend`, `chanrecv`函数。 如果阅读[chan\\_test.go](<a href="https://github.com/golang/go/blob/master/src/runtime/chan%5C_test.go" target="_blank" rel="noopener noreferrer">https://github.com/golang/go/blob/master/src/runtime/chan\\_test.go</a>)还会学到一些骚操作，比如：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> if &lt;-stopCh { // do stop }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而不是写成：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> if stop := &lt;-stopCh; stop { // do stop }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这就是关于channel的设计和实现的分享，希望你通过Kavya的PPT和代码阅读能深入了解channel。 ### [](#链接 &quot;链接&quot;)链接 - chan.go： - chan\\_test.go： - Understanding channels在Github的备份: &gt; 1. 如果这篇文章对你有帮助，不妨关注下我的Github，有文章会收到通知。 &gt; 2. 本文作者：[大彬](<a href="http://lessisbetter.site/about/" target="_blank" rel="noopener noreferrer">http://lessisbetter.site/about/</a>) &gt; 3. 如果喜欢本文，随意转载，但请保留此原文链接： --- 有疑问加站长微信联系（非本文作者） ![](<a href="https://static.golangjob.cn/static/img/footer.png?imageView2/2/w/280" target="_blank" rel="noopener noreferrer">https://static.golangjob.cn/static/img/footer.png?imageView2/2/w/280</a>)</p>',6)]))}const h=n(i,[["render",r],["__file","深入理解channel：设计_源码.html.vue"]]),g=JSON.parse('{"path":"/golang/%E5%8E%9F%E7%90%86/theory/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3channel%EF%BC%9A%E8%AE%BE%E8%AE%A1_%E6%BA%90%E7%A0%81.html","title":"深入理解channel：设计+源码","lang":"zh-CN","frontmatter":{"title":"深入理解channel：设计+源码","source_url":"https://studygolang.com/articles/18664","category":"Go原理教程","description":"Why：为什么要设计channel？ - What：channel是什么样的？ - How：channel是如何实现的？ 这篇文章，就来回答这3个问题。 ### [](#channel解决什么问题？ \\"channel解决什么问题？\\")channel解决什么问题？ 在Golang诞生之前，各编程语言都使用多线程进行编程，但多线程复杂、混乱、难以管理，对开...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%8E%9F%E7%90%86/theory/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3channel%EF%BC%9A%E8%AE%BE%E8%AE%A1_%E6%BA%90%E7%A0%81.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"深入理解channel：设计+源码"}],["meta",{"property":"og:description","content":"Why：为什么要设计channel？ - What：channel是什么样的？ - How：channel是如何实现的？ 这篇文章，就来回答这3个问题。 ### [](#channel解决什么问题？ \\"channel解决什么问题？\\")channel解决什么问题？ 在Golang诞生之前，各编程语言都使用多线程进行编程，但多线程复杂、混乱、难以管理，对开..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入理解channel：设计+源码\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":4.85,"words":1455},"filePathRelative":"golang/原理/theory/深入理解channel：设计+源码.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>channel是大家在Go中用的最频繁的特性，也是Go最自豪的特性之一，你有没有思考过：</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{h as comp,g as data};
