import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as r,o as c}from"./app-DIJDtupu.js";const l={};function n(s,e){return c(),i("div",null,e[0]||(e[0]=[r('<p>Go 的select语句是一种仅能用于channl发送和接收消息的专用语句，此语句运行期间是阻塞的；当select中没有case语句的时候，会阻塞当前的groutine。所以，有人也会说select是用来阻塞监听goroutine的。 还有人说：select是Golang在语言层面提供的I/O多路复用的机制，其专门用来检测多个channel是否准备完毕：可读或可写。 以上说法都正确。 ## I/O多路复用 我们来回顾一下是什么是`I/O多路复用`。 ### 普通多线程（或进程）I/O ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_0.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_0.png</a>) 每来一个进程，都会建立连接，然后阻塞，直到接收到数据返回响应。 普通这种方式的缺点其实很明显：系统需要创建和维护额外的线程或进程。因为大多数时候，大部分阻塞的线程或进程是处于等待状态，只有少部分会接收并处理响应，而其余的都在等待。系统为此还需要多做很多额外的线程或者进程的管理工作。 ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_1.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_1.png</a>) 为了解决图中这些多余的线程或者进程，于是有了&quot;I/O多路复用&quot; ### I/O多路复用 ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_2.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_2.png</a>) 每个线程或者进程都先到图中”装置“中注册，然后阻塞，然后只有一个线程在”运输“，当注册的线程或者进程准备好数据后，”装置“会根据注册的信息得到相应的数据。从始至终kernel只会使用图中这个黄黄的线程，无需再对额外的线程或者进程进行管理，提升了效率。 ## select组成结构 select的实现经历了多个版本的修改，当前版本为：1.11 select这个语句底层实现实际上主要由两部分组成：`case语句`和`执行函数`。 源码地址为：/go/src/runtime/select.go 每个case语句，单独抽象出以下结构体：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go type scase struct { c \\*hchan // chan elem unsafe.Pointer // 读或者写的缓冲区地址 kind uint16 //case语句的类型，是default、传值写数据(channel &lt;-) 还是 取值读数据(&lt;- channel) pc uintptr // race pc (for race detector / msan) releasetime int64 }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结构体可以用下图表示： ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_3.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_3.png</a>) 其中比较关键的是：`hchan`，它是channel的指针。 在一个select中，所有的case语句会构成一个`scase`结构体的数组。 ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_4.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_4.png</a>) 然后执行select语句实际上就是调用`func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool)`函数。 ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_5.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_5.png</a>) `func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool)`函数参数： - cas0 为上文提到的case语句抽象出的结构体`scase`数组的第一个元素地址 - order0为一个两倍cas0数组长度的buffer，保存scase随机序列pollorder和scase中channel地址序列lockorder。 - nncases表示`scase`数组的长度 `selectgo`返回所选scase的索引(该索引与其各自的select {recv，send，default}调用的序号位置相匹配)。此外，如果选择的scase是接收操作(recv)，则返回是否接收到值。 谁负责调用`func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool)`函数呢？ 在`/reflect/value.go`中有个`func rselect([]runtimeSelect) (chosen int, recvOK bool)`函数，此函数的实现在`/runtime/select.go`文件中的`func reflect_rselect(cases []runtimeSelect) (int, bool)`函数中:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go func reflect\\_rselect(cases \\[\\]runtimeSelect) (int, bool) { //如果cases语句为空，则阻塞当前groutine if len(cases) == 0 { block() } //实例化case的结构体 sel := make(\\[\\]scase, len(cases)) order := make(\\[\\]uint16, 2\\*len(cases)) for i := range cases { rc := &amp;cases\\[i\\] switch rc.dir { case selectDefault: sel\\[i\\] = scase{kind: caseDefault} case selectSend: sel\\[i\\] = scase{kind: caseSend, c: rc.ch, elem: rc.val} case selectRecv: sel\\[i\\] = scase{kind: caseRecv, c: rc.ch, elem: rc.val} } if raceenabled || msanenabled { selectsetpc(&amp;sel\\[i\\]) } } return selectgo(&amp;sel\\[0\\], &amp;order\\[0\\], len(cases)) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那谁调用的`func rselect([]runtimeSelect) (chosen int, recvOK bool)`呢？ 在`/refect/value.go`中，有一个`func Select(cases []SelectCase) (chosen int, recv Value, recvOK bool)`的函数，其调用了`rselect`函数，并将最终Go中select语句的返回值的返回。 以上这三个函数的调用栈按顺序如下： - `func Select(cases []SelectCase) (chosen int, recv Value, recvOK bool)` - `func rselect([]runtimeSelect) (chosen int, recvOK bool)` - `func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool)` 这仨函数中无论是返回值还是参数都大同小异，可以简单粗暴的认为：函数参数传入的是case语句，返回值返回被选中的case语句。 那谁调用了`func Select(cases []SelectCase) (chosen int, recv Value, recvOK bool)`呢？ 可以简单的认为是系统了。 来个简单的图： ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_18.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_18.png</a>) 前两个函数`Select`和`rselect`都是做了简单的初始化参数，调用下一个函数的操作。select真正的核心功能，是在最后一个函数`func selectgo(cas0 *scase, order0 *uint16, ncases int) (int, bool)`中实现的。 ### selectgo函数做了什么 打乱传入的case结构体顺序 ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_6.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_6.png</a>) 锁住其中的所有的channel ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_7.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_7.png</a>) 遍历所有的channel，查看其是否可读或者可写 ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_8.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_8.png</a>) 如果其中的channel可读或者可写，则解锁所有channel，并返回对应的channel数据 ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_9.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_9.png</a>) ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_10.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_10.png</a>) 假如没有channel可读或者可写，但是有default语句，则同上:返回default语句对应的scase并解锁所有的channel。 ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_11.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_11.png</a>) 假如既没有channel可读或者可写，也没有default语句，则将当前运行的groutine阻塞，并加入到当前所有channel的等待队列中去。 ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_12.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_12.png</a>) 然后解锁所有channel，等待被唤醒。 ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_13.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_13.png</a>) 此时如果有个channel可读或者可写ready了，则唤醒，并再次加锁所有channel， ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_14.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_14.png</a>) 遍历所有channel找到那个对应的channel和G，唤醒G，并将没有成功的G从所有channel的等待队列中移除。 ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_15.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_15.png</a>) 如果对应的scase值不为空，则返回需要的值，并解锁所有channel ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_16.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_16.png</a>) 如果对应的scase为空，则循环此过程。 ### select和channel之间的关系 在想想select和channel做了什么事儿，我觉得和多路复用是一回事儿 ![](<a href="https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_17.png" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/select\\_priciple/select-principle\\_17.png</a>) #### 更多精彩内容，请关注我的微信公众号 `互联网技术窝` 或者加微信共同探讨交流： ![](<a href="https://i6448038.github.io/img/weichat/qrcode.jpg" target="_blank" rel="noopener noreferrer">https://i6448038.github.io/img/weichat/qrcode.jpg</a>) 参考文献： - <a href="https://my.oschina.net/renhc/blog/2253937" target="_blank" rel="noopener noreferrer">https://my.oschina.net/renhc/blog/2253937</a> - <a href="https://blog.csdn.net/xd%5C%5C%5C_rbt%5C%5C%5C_/article/details/80287959" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/xd\\\\\\_rbt\\\\\\_/article/details/80287959</a> - <a href="https://blog.csdn.net/qq%5C%5C%5C_34199383/article/details/80303629" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq\\\\\\_34199383/article/details/80303629</a> - <a href="https://blog.csdn.net/wangxindong11/article/details/78591308" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/wangxindong11/article/details/78591308</a> - <a href="https://draveness.me/golang-select" target="_blank" rel="noopener noreferrer">https://draveness.me/golang-select</a> - <a href="https://studygolang.com/articles/1807" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/1807</a></p>',5)]))}const o=t(l,[["render",n],["__file","图解Go-select语句原理.html.vue"]]),g=JSON.parse('{"path":"/golang/%E5%8E%9F%E7%90%86/theory/%E5%9B%BE%E8%A7%A3Go-select%E8%AF%AD%E5%8F%A5%E5%8E%9F%E7%90%86.html","title":"图解Go select语句原理","lang":"zh-CN","frontmatter":{"title":"图解Go select语句原理","source_url":"https://studygolang.com/articles/19416","category":"Go原理教程","description":"Go 的select语句是一种仅能用于channl发送和接收消息的专用语句，此语句运行期间是阻塞的；当select中没有case语句的时候，会阻塞当前的groutine。所以，有人也会说select是用来阻塞监听goroutine的。 还有人说：select是Golang在语言层面提供的I/O多路复用的机制，其专门用来检测多个channel是否准备完毕...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%8E%9F%E7%90%86/theory/%E5%9B%BE%E8%A7%A3Go-select%E8%AF%AD%E5%8F%A5%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"图解Go select语句原理"}],["meta",{"property":"og:description","content":"Go 的select语句是一种仅能用于channl发送和接收消息的专用语句，此语句运行期间是阻塞的；当select中没有case语句的时候，会阻塞当前的groutine。所以，有人也会说select是用来阻塞监听goroutine的。 还有人说：select是Golang在语言层面提供的I/O多路复用的机制，其专门用来检测多个channel是否准备完毕..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图解Go select语句原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":5.4,"words":1619},"filePathRelative":"golang/原理/theory/图解Go-select语句原理.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"<p>Go 的select语句是一种仅能用于channl发送和接收消息的专用语句，此语句运行期间是阻塞的；当select中没有case语句的时候，会阻塞当前的groutine。所以，有人也会说select是用来阻塞监听goroutine的。 还有人说：select是Golang在语言层面提供的I/O多路复用的机制，其专门用来检测多个channel是否准备完毕：可读或可写。 以上说法都正确。 ## I/O多路复用 我们来回顾一下是什么是`I/O多路复用`。 ### 普通多线程（或进程）I/O ![](<a href=\\"https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_0.png\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://i6448038.github.io/img/select\\\\_priciple/select-principle\\\\_0.png</a>) 每来一个进程，都会建立连接，然后阻塞，直到接收到数据返回响应。 普通这种方式的缺点其实很明显：系统需要创建和维护额外的线程或进程。因为大多数时候，大部分阻塞的线程或进程是处于等待状态，只有少部分会接收并处理响应，而其余的都在等待。系统为此还需要多做很多额外的线程或者进程的管理工作。 ![](<a href=\\"https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_1.png\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://i6448038.github.io/img/select\\\\_priciple/select-principle\\\\_1.png</a>) 为了解决图中这些多余的线程或者进程，于是有了\\"I/O多路复用\\" ### I/O多路复用 ![](<a href=\\"https://i6448038.github.io/img/select%5C_priciple/select-principle%5C_2.png\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://i6448038.github.io/img/select\\\\_priciple/select-principle\\\\_2.png</a>) 每个线程或者进程都先到图中”装置“中注册，然后阻塞，然后只有一个线程在”运输“，当注册的线程或者进程准备好数据后，”装置“会根据注册的信息得到相应的数据。从始至终kernel只会使用图中这个黄黄的线程，无需再对额外的线程或者进程进行管理，提升了效率。 ## select组成结构 select的实现经历了多个版本的修改，当前版本为：1.11 select这个语句底层实现实际上主要由两部分组成：`case语句`和`执行函数`。 源码地址为：/go/src/runtime/select.go 每个case语句，单独抽象出以下结构体：</p>"}');export{o as comp,g as data};
