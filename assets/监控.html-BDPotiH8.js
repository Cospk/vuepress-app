import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as r,o as a}from"./app-DQYOo4w9.js";const i={};function n(l,e){return a(),o("div",null,e[0]||(e[0]=[r('<p>一个程序简单还行，复杂了api请求过大需要对服务进行监控，实时看日志显然不行，一般会将数据输出的日志，或者大型项目将数据使用promethus+grafana来监控数据</p><p>具体是操作比如：</p><ol><li>在gin中先get组件库：<a href="http://github.com/prometheus/client_golang/promethus%E5%92%8Cgithub.com/prometheus/client_golang/promethus/promauto" target="_blank" rel="noopener noreferrer">github.com/prometheus/client_golang/promethus和github.com/prometheus/client_golang/promethus/promauto</a></li><li>然后定义两个Prometheus常用的两个数据类型Counter（计数）、Gauge（耗时），然后在中间件记录每次请求的累计数以及时间。</li><li>定义一个接口让Prometheus客户端调用</li><li>下载Prometheus客户端，这个其实也是一种数据库，然后会定期从指定的接口调用获取数据写入到数据库（客户端也会一个爬虫，在配置yml文件中也有指定url和端口去定期调用获取数据）</li><li>Prometheus有自己的控制台页面9090端口，但是我们会使用做图表功能更强大的Grafana</li><li>官网下载并运行Grafana，进入3000端口，就可进入控制台，配置数据源为Prometheus就可查看数据了</li></ol><p>Prometheus：一种时序数据库，将每一个数据是跟时间戳绑定。</p>',4)]))}const u=t(i,[["render",n],["__file","监控.html.vue"]]),s=JSON.parse('{"path":"/golang/web%E6%A1%86%E6%9E%B6/lib/%E7%9B%91%E6%8E%A7.html","title":"","lang":"zh-CN","frontmatter":{"description":"一个程序简单还行，复杂了api请求过大需要对服务进行监控，实时看日志显然不行，一般会将数据输出的日志，或者大型项目将数据使用promethus+grafana来监控数据 具体是操作比如： 在gin中先get组件库：github.com/prometheus/client_golang/promethus和github.com/prometheus/cl...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/web%E6%A1%86%E6%9E%B6/lib/%E7%9B%91%E6%8E%A7.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:description","content":"一个程序简单还行，复杂了api请求过大需要对服务进行监控，实时看日志显然不行，一般会将数据输出的日志，或者大型项目将数据使用promethus+grafana来监控数据 具体是操作比如： 在gin中先get组件库：github.com/prometheus/client_golang/promethus和github.com/prometheus/cl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-18T03:55:25.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-18T03:55:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-18T03:55:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1742270125000,"updatedTime":1742270125000,"contributors":[{"name":"xiaoxie01","username":"xiaoxie01","email":"xie18115@gmail.com","commits":1,"url":"https://github.com/xiaoxie01"}]},"readingTime":{"minutes":1,"words":300},"filePathRelative":"golang/web框架/lib/监控.md","localizedDate":"2025年3月18日","autoDesc":true,"excerpt":"<p>一个程序简单还行，复杂了api请求过大需要对服务进行监控，实时看日志显然不行，一般会将数据输出的日志，或者大型项目将数据使用promethus+grafana来监控数据</p>\\n<p>具体是操作比如：</p>\\n<ol>\\n<li>在gin中先get组件库：<a href=\\"http://github.com/prometheus/client_golang/promethus%E5%92%8Cgithub.com/prometheus/client_golang/promethus/promauto\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">github.com/prometheus/client_golang/promethus和github.com/prometheus/client_golang/promethus/promauto</a></li>\\n<li>然后定义两个Prometheus常用的两个数据类型Counter（计数）、Gauge（耗时），然后在中间件记录每次请求的累计数以及时间。</li>\\n<li>定义一个接口让Prometheus客户端调用</li>\\n<li>下载Prometheus客户端，这个其实也是一种数据库，然后会定期从指定的接口调用获取数据写入到数据库（客户端也会一个爬虫，在配置yml文件中也有指定url和端口去定期调用获取数据）</li>\\n<li>Prometheus有自己的控制台页面9090端口，但是我们会使用做图表功能更强大的Grafana</li>\\n<li>官网下载并运行Grafana，进入3000端口，就可进入控制台，配置数据源为Prometheus就可查看数据了</li>\\n</ol>"}');export{u as comp,s as data};
