import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-DQYOo4w9.js";const l={};function e(h,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="tcp的三次握手" tabindex="-1"><a class="header-anchor" href="#tcp的三次握手"><span>TCP的三次握手</span></a></h2><blockquote><p>握手流程：1、请求连接 （syn） 2、收到（syn+1），我这边也要连接（ack） 3、我的请求得到回复的，你的请求我知道了（ack+1）。</p></blockquote><p>TCP的特点是：可靠的面向对象的全双工通讯，意味着两边同时确认连接才可建立连接为此三次握手</p><p>两次和四次为什么不可以？</p><p>服务器角度思考必须是3次，而两次的话就是服务器端<strong>不能确认</strong>自己的消息是否被对方收到、四次的话<strong>多余了</strong>前面两次可确保双方建立连接3次以上多余就会浪费资源</p><p>没有第三次握手有什么问题？</p><p>服务端没有收到第三次握手，超时就会认为消息不可达，就会重发几次，依旧没有就放弃这个连接。</p><p>比如dos攻击就是用大量的伪ip发起syn报文但不给确认，导致服务器一直处理大量的半连接，导致无法处理正常的请求</p><h2 id="http和https的区别" tabindex="-1"><a class="header-anchor" href="#http和https的区别"><span>http和https的区别</span></a></h2><p>https=http+ssl协议加密</p><p>http是明文传输</p><ul><li>对称加密：最简单，解决明文传输，但是容易窃取和监听（传输密钥的时候可能会被窃取）</li><li>非对称加密：安全但是加解密耗时。两个最大的作用：公钥加密（私钥解密）、私钥签名（明文计算hash值私钥加密公钥解密）</li><li></li><li>CA证书：可以理解为我们的本科毕业证，是学信网认证的，任何人拿到编号都可以获取我们个人学籍信息，申请CA证书也是将数据给相关部门，他们用户私钥加密后给你CA证书，其他人都会有公钥，就解决了认证了不被篡改信息了</li></ul><blockquote><p>过程：CA证书是权威的可确保证书内容的正确性并携带服务器的公钥，确保了公钥正确被送到客户端手里，客户端就可以用公钥加密对称密钥了。</p><p>安全性：是指在发送对称密钥的过程密钥被截取或篡改</p></blockquote><figure><img src="https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/web_https.png" alt="image-20241122185952295" tabindex="0" loading="lazy"><figcaption>image-20241122185952295</figcaption></figure><h3 id="实现https" tabindex="-1"><a class="header-anchor" href="#实现https"><span>实现https</span></a></h3><blockquote><p>注：这个自己服务器可以考虑使用这种方式，公司使用还是去花钱申请CA证书</p></blockquote><ol><li><p>购买域名，然后需要备份就备份，不需要就直接托管到cloudflare上解析即可</p></li><li><p>使用域名访问（依旧还是http）</p></li><li><p>访问开源项目**<a href="https://github.com/acmesh-official/acme.sh" target="_blank" rel="noopener noreferrer">acme.sh</a>**</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1.安装acme.sh</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -O</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  https://get.acme.sh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> email=my@example.com</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">下不了用这个命令：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://gitee.com/neilpang/acme.sh.git</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> acme.sh</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./acme.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myEmain@xxx.com</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装成功可以看到installed success。然后我们记一下安装路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2.对于http验证，我们直接使用直接签发(需要指定域名且要有DNS配置)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">acme.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --issue</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xxx.com</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> www.xxx.com</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --webroot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/local/nginx/xxdefault.conf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># acme.sh：acme的安装路径，用完整的。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -d ：这个参数后面是你的域名，后面一个是子域名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># --webroot：这个是nginx的配置文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 3.开始安装证书到Nginx中去（执行命令会自动生成证书和密钥）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">acme.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --install-cert</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xxx.com</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--key-file       </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/path/to/keyfile/in/nginx/key.pem</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  \\ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">#</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 私钥</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (可自己设置路径)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--fullchain-file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /path/to/fullchain/nginx/cert.pem</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\ </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 证书(可自己设置路径)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--reloadcmd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     &quot;service nginx force-reload&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                # 重启一下nginx服务</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 4.将证书和密钥配置到nginx中去 vim /xxx/xxx/default</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> default_server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	listen</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 443</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ssl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;           </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">----------------添加</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	listen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [::]:80 default_server;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	ssl_certificate</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      /path/to/fullchain/nginx/cert.pem</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   -----添加</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	ssl_certificate_key</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /path/to/keyfile/in/nginx/key.pem</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   -----添加</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	。。。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 5.重启就可以直接通过https访问了</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">service</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> force-reload</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 6.使用acme为我们每天检查证书是否过期，快过期就自动续签</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">crontab</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">注：acme目前是每60天自动更新证书，也可强制续签证书</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>小结：用这个开源工具实现https，根据服务器的信息生成一个CA证书以及私钥。然后将这个证书和私钥配置到nginx或者Apache的配置文件中去就可以了</p></blockquote></li></ol><h2 id="https原理" tabindex="-1"><a class="header-anchor" href="#https原理"><span>https原理</span></a></h2><p>http过程：http是明文在网络中传输，这个过程会被窃听、篡改。为此需要加密来处理</p><p>加密几种方式的优缺点</p><ol><li>对称加密+http： 加密简单。但是就同一般秘钥会被截取</li><li>非对称加密+http： 更安全但是复杂响应太慢了</li><li>对称+非对称+http：非对称对对称加密而对称对信息加密，速度快了也不能被窃取，对称密钥还是会被篡改</li></ol><p>终极方案：CA机构颁发CA证书</p>`,22)]))}const r=i(l,[["render",e],["__file","网络基础.html.vue"]]),d=JSON.parse('{"path":"/computer/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80.html","title":"网络基础","lang":"zh-CN","frontmatter":{"title":"网络基础","order":1,"author":"xiaoxie","date":"2020-01-01T00:00:00.000Z","tag":["web"],"star":true,"description":"TCP的三次握手 握手流程：1、请求连接 （syn） 2、收到（syn+1），我这边也要连接（ack） 3、我的请求得到回复的，你的请求我知道了（ack+1）。 TCP的特点是：可靠的面向对象的全双工通讯，意味着两边同时确认连接才可建立连接为此三次握手 两次和四次为什么不可以？ 服务器角度思考必须是3次，而两次的话就是服务器端不能确认自己的消息是否被对...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/computer/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"网络基础"}],["meta",{"property":"og:description","content":"TCP的三次握手 握手流程：1、请求连接 （syn） 2、收到（syn+1），我这边也要连接（ack） 3、我的请求得到回复的，你的请求我知道了（ack+1）。 TCP的特点是：可靠的面向对象的全双工通讯，意味着两边同时确认连接才可建立连接为此三次握手 两次和四次为什么不可以？ 服务器角度思考必须是3次，而两次的话就是服务器端不能确认自己的消息是否被对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/web_https.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T09:37:41.000Z"}],["meta",{"property":"article:author","content":"xiaoxie"}],["meta",{"property":"article:tag","content":"web"}],["meta",{"property":"article:published_time","content":"2020-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-15T09:37:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络基础\\",\\"image\\":[\\"https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/web_https.png\\"],\\"datePublished\\":\\"2020-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-15T09:37:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaoxie\\"}]}"]]},"headers":[{"level":2,"title":"TCP的三次握手","slug":"tcp的三次握手","link":"#tcp的三次握手","children":[]},{"level":2,"title":"http和https的区别","slug":"http和https的区别","link":"#http和https的区别","children":[{"level":3,"title":"实现https","slug":"实现https","link":"#实现https","children":[]}]},{"level":2,"title":"https原理","slug":"https原理","link":"#https原理","children":[]}],"git":{"createdTime":1736933861000,"updatedTime":1736933861000,"contributors":[{"name":"xiaoxie001","username":"xiaoxie001","email":"xie18115@outlook.com","commits":1,"url":"https://github.com/xiaoxie001"}]},"readingTime":{"minutes":4.03,"words":1208},"filePathRelative":"computer/网络/网络基础.md","localizedDate":"2020年1月1日","autoDesc":true,"excerpt":"<h2>TCP的三次握手</h2>\\n<blockquote>\\n<p>握手流程：1、请求连接 （syn）  2、收到（syn+1），我这边也要连接（ack）  3、我的请求得到回复的，你的请求我知道了（ack+1）。</p>\\n</blockquote>\\n<p>TCP的特点是：可靠的面向对象的全双工通讯，意味着两边同时确认连接才可建立连接为此三次握手</p>\\n<p>两次和四次为什么不可以？</p>\\n<p>服务器角度思考必须是3次，而两次的话就是服务器端<strong>不能确认</strong>自己的消息是否被对方收到、四次的话<strong>多余了</strong>前面两次可确保双方建立连接3次以上多余就会浪费资源</p>"}');export{r as comp,d as data};
