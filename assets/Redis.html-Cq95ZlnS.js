import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as i,e as t,o as l,r as h}from"./app-BLtUojHQ.js";const d={};function k(r,s){const a=h("Mermaid");return l(),n("div",null,[s[0]||(s[0]=i(`<h1 id="redis理论" tabindex="-1"><a class="header-anchor" href="#redis理论"><span>Redis理论</span></a></h1><p>官方网站：<a href="https://redis.io/" target="_blank" rel="noopener noreferrer">https://redis.io/</a></p><p>中文网站：<a href="https://www.redis.net.cn/" target="_blank" rel="noopener noreferrer">https://www.redis.net.cn/</a></p><h2 id="_01、redis-简介" tabindex="-1"><a class="header-anchor" href="#_01、redis-简介"><span>01、Redis 简介</span></a></h2><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的<code>key-value</code>数据库。</p><p>Redis 特点：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><h3 id="redis-优势" tabindex="-1"><a class="header-anchor" href="#redis-优势"><span>Redis 优势</span></a></h3><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><h3 id="为什么用redis" tabindex="-1"><a class="header-anchor" href="#为什么用redis"><span>为什么用redis</span></a></h3><h4 id="高性能" tabindex="-1"><a class="header-anchor" href="#高性能"><span>高性能</span></a></h4><ul><li><p><mark>单线程简单、无线程开销</mark> 使用单线程简单，避免了多线程的竞争；同时还省去了多线程切换带来的时间和性能上的开销。</p></li><li><p>redis主要基于内存操作内存的执行效率本身就很快，并且redis还采用了高效的数据结构。</p></li><li><p>在请求上采用I\\O多路复用机制多路复用机制是一种基于非阻塞I/O模型，可以使redis高效的进行网络通信，I/O的读写也不再阻塞，就可以处理大量的客户端socket请求。</p></li></ul><h4 id="高并发" tabindex="-1"><a class="header-anchor" href="#高并发"><span>高并发</span></a></h4><ul><li><p>mysql单机一般只能支撑到2000Qps，而redis由于是K/V式的操作，单机可以支撑并发量几万到十几万。</p></li><li><p>redis分布式集群化扩展性极高，而且稳定，能够支撑大量的数据吞吐，只要硬件支持。</p></li></ul><h4 id="与传统关系型数据库对比" tabindex="-1"><a class="header-anchor" href="#与传统关系型数据库对比"><span>与传统关系型数据库对比：</span></a></h4><ul><li><p>redis 的优势比较多，如高性能，高可用，丰富的数据类型、原子性、扩展性比较强、可持久化、生态完善等等，但是比较有决定性的还是高性能和丰富的数据类型支持（string、list、set、sortedset（有序集合）、hash等），</p></li><li><p>一般一个东西好不好用，多数比较出来的，一般我们项目中引入redis 多数是为了减轻关系型数据库压力的，那就跟关系型数据库来比较，常见的关系型数据库是基于磁盘存储的，数据存取IO较高，</p></li></ul><h2 id="_02、redis的下载和安装" tabindex="-1"><a class="header-anchor" href="#_02、redis的下载和安装"><span>02、Redis的下载和安装</span></a></h2><h3 id="_1-window下安装redis服务" tabindex="-1"><a class="header-anchor" href="#_1-window下安装redis服务"><span>1.window下安装Redis服务</span></a></h3><ol><li>Github获取redis安装包，<a href="https://github.com/MSOpenTech/redis" target="_blank" rel="noopener noreferrer">地址：Redis</a></li><li>双击点击安装msi格式的安装包，开始进行安装</li><li>安装注意：添加redis目录到环境变量方便系统自动识别、使用默认端口、设置最大内存学习就100MB</li><li>对Redis进行配置： <ol><li>编辑器编辑redis.windows-service.conf文件</li><li>找到requirepass配置（设置密码），如：输入requirepass 12345。（测试环境可以不用密码）</li><li>确保服务正常启动即可</li></ol></li><li>可正常在命令行操作Redis了</li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">输入命令：redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     ---（客户端程序）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">输入密码回车：auth</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12345</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 返回提示OK表示验证通过</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">auth</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12345</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Ok</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-linux下安装redis服务" tabindex="-1"><a class="header-anchor" href="#_2-linux下安装redis服务"><span>2.Linux下安装Redis服务</span></a></h3><ol><li><p>安装编译环境gcc （Redis是C编写的，需要C的环境）</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yum</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc-c++</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>下载，解压，编译（redis下载地址为：<a href="https://redis.io/download/%EF%BC%89" target="_blank" rel="noopener noreferrer">https://redis.io/download/）</a></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/redis/redis/archive/7.0.8.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xzf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 7.0.8.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-7.0.8</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>二进制文件是编译完成后在<code>src</code>目录下. 运行如下</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src/redis-server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用客户端连接服务</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 本地连接</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src/redis-cli</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 远程连接</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -h</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> host</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> password</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_3-redis配置文件详解" tabindex="-1"><a class="header-anchor" href="#_3-redis配置文件详解"><span>3.Redis配置文件详解</span></a></h3><ul><li>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。</li><li>你可以通过 <strong>CONFIG</strong> 命令查看或设置配置项。</li></ul><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">参数说明</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 配置项说明如下：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    daemonize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> no</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    pidfile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/run/redis.pid</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Merz的名字</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 绑定的主机地址</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    bind</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127.0.0.1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.当</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    timeout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 300</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    loglevel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> verbose</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">7.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    logfile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stdout</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 设置数据库的数量，默认数据库为0，可以使用SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">dbi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">命令在连接上指定数据库id</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    databases</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 16</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    save</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">second</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">change</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Redis默认配置文件中提供了三个条件：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    save</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 900</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 900秒（15分钟）内有1个更改，</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    save</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 300</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  300秒（5分钟）内有10个更改</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    save</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 60</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 60秒内有10000个更改。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    rdbcompression</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">11.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定本地数据库文件名，默认值为dump.rdb</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    dbfilename</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dump.rdb</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定本地数据库存放目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    dir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">13.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    slaveof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">masteri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">masterpor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">14.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 当master服务设置了密码保护时，slav服务连接master的密码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    masterauth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">master-passwor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">15.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">passwor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">命令提供密码，默认关闭</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    requirepass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> foobared</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">16.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> maxclients</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> number</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clients</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reached错误信息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    maxclients</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 128</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">17.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    maxmemory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">18.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    appendonly</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> no</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">19.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定更新日志文件名，默认为appendonly.aof</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     appendfilename</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> appendonly.aof</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">20.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定更新日志条件，共有3个可选值：</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     no：表示等操作系统进行数据缓存同步到磁盘（快）</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     always：表示每次更新操作后手动调用fsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">将数据写到磁盘（慢，安全）</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     everysec：表示每秒同步一次（折衷，默认值）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    appendfsync</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> everysec</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">21.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     vm-enabled</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> no</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">22.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     vm-swap-file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp/redis.swap</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">23.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Redis的索引数据</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 就是keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">,也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     vm-max-memory</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">24.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Redis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 确定，就使用默认值</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     vm-page-size</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 32</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">25.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     vm-pages</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 134217728</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">26.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">     vm-max-threads</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">27.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    glueoutputbuf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">28.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    hash-max-zipmap-entries</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    hash-max-zipmap-value</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 512</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">29.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    activerehashing</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">30.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /path/to/local.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03、关于redis-命令" tabindex="-1"><a class="header-anchor" href="#_03、关于redis-命令"><span>03、关于Redis 命令</span></a></h2><h3 id="a-key命令" tabindex="-1"><a class="header-anchor" href="#a-key命令"><span>a.Key命令</span></a></h3><p>命令文档：<a href="https://redis.io/commands/" target="_blank" rel="noopener noreferrer">https://redis.io/commands/</a></p><p>下表给出了与 Redis 键相关的基本命令：</p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">命令及描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3528.html" target="_blank" rel="noopener noreferrer">DEL key</a> 该命令用于在 key 存在是删除 key。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3529.html" target="_blank" rel="noopener noreferrer">DUMP key</a> 序列化给定 key ，并返回被序列化的值。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3530.html" target="_blank" rel="noopener noreferrer">EXISTS key</a> 检查给定 key 是否存在。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3531.html" target="_blank" rel="noopener noreferrer">EXPIRE key</a> seconds 为给定 key 设置过期时间。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3532.html" target="_blank" rel="noopener noreferrer">EXPIREAT key timestamp</a> EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3533.html" target="_blank" rel="noopener noreferrer">PEXPIRE key milliseconds</a> 设置 key 的过期时间亿以毫秒计。</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3534.html" target="_blank" rel="noopener noreferrer">PEXPIREAT key milliseconds-timestamp</a> 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3535.html" target="_blank" rel="noopener noreferrer">KEYS pattern</a> 查找所有符合给定模式( pattern)的 key 。</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3536.html" target="_blank" rel="noopener noreferrer">MOVE key db</a> 将当前数据库的 key 移动到给定的数据库 db 当中。</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3537.html" target="_blank" rel="noopener noreferrer">PERSIST key</a> 移除 key 的过期时间，key 将持久保持。</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3538.html" target="_blank" rel="noopener noreferrer">PTTL key</a> 以毫秒为单位返回 key 的剩余的过期时间。</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3539.html" target="_blank" rel="noopener noreferrer">TTL key</a> 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3540.html" target="_blank" rel="noopener noreferrer">RANDOMKEY</a> 从当前数据库中随机返回一个 key 。</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3541.html" target="_blank" rel="noopener noreferrer">RENAME key newkey</a> 修改 key 的名称</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3542.html" target="_blank" rel="noopener noreferrer">RENAMENX key newkey</a> 仅当 newkey 不存在时，将 key 改名为 newkey 。</td></tr><tr><td style="text-align:left;">16</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3543.html" target="_blank" rel="noopener noreferrer">TYPE key</a> 返回 key 所储存的值的类型。</td></tr></tbody></table><p><strong>1、查看所有的key</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">keys</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>2、删除的key</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">del</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3、检查给定 key 是否存在</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXISTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>4、 为给定 key 设置过期时间</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPIRE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> seconds</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>5、PERSIST 用户删除key的过期时间</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">PERSIST</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> age</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>6、将当前数据库的 key 移动到给定的数据库 db 当中。</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">move</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> db</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>7、以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ttl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>8、以毫秒为单位返回 key 的剩余的过期时间</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">PTTL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>9、从当前数据库中随机返回一个 key</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RANDOMKEY</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>10、修改 key 的名称</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RENAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> newkey</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>11、返回 key 所储存的值的类型</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TYPE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>12、用于选择数据库，数据库一共0~15</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="b-服务端命令" tabindex="-1"><a class="header-anchor" href="#b-服务端命令"><span>b.服务端命令</span></a></h3><p><strong>1、ping，如果服务器运行正常的话，使用ping 返回一个pong</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ping</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>2、QUIT 可以通过命令退出当前Redis的客户端链接</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QUIT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3、DBSIZE 查看当前数据库中key的条目，类似于keys</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dbsize</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>4、INFO 用于查看Redis服务器各种信息和统计数值</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>5、CONFIG GET 查看redis服务器的配置信息</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看redis安装的位置，如果你想获取所有的redis服务配置的信息使用:config get *</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6、FLUSHDB 用于删除当前选择的数据库所有的key</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">flush</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> db</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>7、FLUSHALL 用于删除所有数据库中的key</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">flushall</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_04、数据结构" tabindex="-1"><a class="header-anchor" href="#_04、数据结构"><span>04、数据结构</span></a></h2><p>上面我们说过redis采用了高效的数据结构，Redis支持5种数据类型：string，hash，list，set，zset。</p><figure><img src="https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis_struct.png" alt="数据类型" tabindex="0" loading="lazy"><figcaption>数据类型</figcaption></figure><h3 id="_1-字符串string" tabindex="-1"><a class="header-anchor" href="#_1-字符串string"><span>1. 字符串String</span></a></h3><p>表列出了常用的 redis 字符串命令：</p><table><thead><tr><th style="text-align:left;"><strong>序号</strong></th><th style="text-align:left;"><strong>命令及描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>--1--</strong></td><td style="text-align:left;"><strong><code>set key value </code>设置指定 key 的值</strong></td></tr><tr><td style="text-align:left;"><strong>--2--</strong></td><td style="text-align:left;"><strong><code>get key</code> 获取指定 key 的值。</strong></td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><code>getrange key start end</code>返回 key 中字符串值的子字符</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><code>getset key value</code> 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td></tr><tr><td style="text-align:left;"><strong>--5--</strong></td><td style="text-align:left;"><strong><code>getbit key offset</code> 对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</strong></td></tr><tr><td style="text-align:left;"><strong>--6--</strong></td><td style="text-align:left;"><strong><code>mget key1 [key2..]</code> 获取所有(一个或多个)给定 key 的值。</strong></td></tr><tr><td style="text-align:left;"><strong>--7--</strong></td><td style="text-align:left;"><strong><code>setbit key offset value</code>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</strong></td></tr><tr><td style="text-align:left;"><strong>--8--</strong></td><td style="text-align:left;"><strong><code>setex key seconds value</code>将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</strong></td></tr><tr><td style="text-align:left;"><strong>--9--</strong>!</td><td style="text-align:left;"><strong><code>setnx key value</code> 只有在 key 不存在时设置 key 的值。</strong></td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;"><code>setrange key offset value</code>用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;"><code>strlen key</code> 返回 key 所储存的字符串值的长度。</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;"><code>mset key value key value ...</code> 同时设置一个或多个 key-value 对。</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;"><code>msetnx key value [key value ...]</code>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;"><code>psetex key milliseconds value</code> 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td></tr><tr><td style="text-align:left;"><strong>--15--</strong></td><td style="text-align:left;"><strong><code>incr key</code> 将 key 中储存的数字值增一。</strong></td></tr><tr><td style="text-align:left;"><strong>--16--</strong></td><td style="text-align:left;"><strong><code>incrby key increment </code>将 key 所储存的值加上给定的增量值（increment）</strong> 。==</td></tr><tr><td style="text-align:left;"><strong>--17--</strong></td><td style="text-align:left;"><strong><code>incrbyfloat key increment </code>将 key 所储存的值加上给定的浮点增量值（increment）</strong> 。</td></tr><tr><td style="text-align:left;"><strong>--18--</strong></td><td style="text-align:left;"><strong><code>decr key </code>将 key 中储存的数字值减一。</strong></td></tr><tr><td style="text-align:left;"><strong>--19--</strong></td><td style="text-align:left;"><strong><code>decrby key decrement key</code> 所储存的值减去给定的减量值（decrement） 。</strong></td></tr><tr><td style="text-align:left;">20</td><td style="text-align:left;"><code>append key value </code>如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。</td></tr></tbody></table><h3 id="_2-列表list" tabindex="-1"><a class="header-anchor" href="#_2-列表list"><span>2.列表List</span></a></h3><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">命令及描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><code>blpop key1 [key2 ] timeout</code> 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><code>brpop key1 key2 timeout</code> 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><code>brpoplpush source destination timeout </code>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><code>lindex key index</code>通过索引获取列表中的元素</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">\`linsert key before</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;"><code>llen key</code>获取列表长度</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;"><code>lpop key</code>移出并获取列表的第一个元素</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;"><code>lpush key value1 value2</code>将一个或多个值插入到列表头部</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;"><code>lpushx key value</code>将一个或多个值插入到已存在的列表头部</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;"><code>lrange key start stop</code>获取列表指定范围内的元素</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;"><code>lrem key count value</code> 移除列表元素</td></tr><tr><td style="text-align:left;"><strong>--12--</strong></td><td style="text-align:left;"><strong><code>lset key index value</code> 通过索引设置列表元素的值</strong></td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;"><code>ltrim key start stop</code>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;"><code>rpop key</code>移除并获取列表最后一个元素</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;"><code>rpoplpush source destination</code>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td style="text-align:left;">16</td><td style="text-align:left;"><code>rpush key value1 value2</code>在列表中添加一个或多个值</td></tr><tr><td style="text-align:left;">17</td><td style="text-align:left;"><code>rpushx key value</code> 为已存在的列表添加值</td></tr></tbody></table><h3 id="_3-哈希表hash" tabindex="-1"><a class="header-anchor" href="#_3-哈希表hash"><span>3.哈希表hash</span></a></h3><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">命令及描述</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>1</strong></td><td style="text-align:left;"><strong><code>hdel key field2 field2</code>删除一个或多个哈希表字段</strong></td></tr><tr><td style="text-align:left;"><strong>2</strong></td><td style="text-align:left;"><strong><code>hexists key field</code> 查看哈希表 key 中，指定的字段是否存在。</strong></td></tr><tr><td style="text-align:left;"><strong>3</strong></td><td style="text-align:left;"><strong><code>hget key field</code>获取存储在哈希表中指定字段的值</strong></td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><strong><code>hgetall key</code> 获取在哈希表中指定 key 的所有字段和值</strong></td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;"><code>hincrby key field increment </code>为哈希表 key 中的指定字段的整数值加上增量 increment 。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;"><code>hincrbyfloat key field increment</code> 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;"><code>hkeys key</code>获取所有哈希表中的字段</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;"><code>hlen key</code> 获取哈希表中字段的数量</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;"><code>hmget key field1 field2 </code>获取所有给定字段的值</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;"><code>hmset key field1 value1 field2 value2</code>同时将多个 field-value (域-值)对设置到哈希表 key 中。</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;"><strong><code>hset key field value </code>将哈希表 key 中的字段 field 的值设为 value 。</strong></td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;"><strong><code>hsetnx key field value</code> 只有在字段 field 不存在时，设置哈希表字段的值。</strong></td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;"><strong><code>hvals key</code>获取哈希表中所有值</strong></td></tr><tr><td style="text-align:left;"><strong>--14--</strong></td><td style="text-align:left;"><strong><code>hscan key cursor [MATCH pattern] [COUNT count]</code> 迭代哈希表中的键值对。</strong></td></tr></tbody></table><h3 id="_4-集合set" tabindex="-1"><a class="header-anchor" href="#_4-集合set"><span>4.集合Set</span></a></h3><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">命令及描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">SADD key member1 member2向集合添加一个或多个成员</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">SCARD key 获取集合的成员数</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">SDIFF key1 key2 返回给定所有集合的差集</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">SDIFFSTORE destination key1 key2返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">SINTER key1 key2返回给定所有集合的交集</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">SINTERSTORE destination key1 key2 返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">SISMEMBER key member判断 member 元素是否是集合 key 的成员</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">SMEMBERS key返回集合中的所有成员</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">SMOVE source destination member将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;">SPOP key移除并返回集合中的一个随机元素</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">SRANDMEMBER key count 返回集合中一个或多个随机数</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;">SREM key member1 member2移除集合中一个或多个成员</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;">SUNION key1 key2返回所有给定集合的并集</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;">SUNIONSTORE destination key1 key2所有给定集合的并集存储在 destination 集合中</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;">SSCAN key cursor [MATCH pattern] [COUNT count] 迭代集合中的元素</td></tr></tbody></table><h3 id="_5-有序集合zset" tabindex="-1"><a class="header-anchor" href="#_5-有序集合zset"><span>5.有序集合Zset</span></a></h3><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">命令及描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">[ZADD key score1 member1 <a href="https://www.redis.net.cn/order/3609.html" target="_blank" rel="noopener noreferrer">score2 member2]</a> 向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3610.html" target="_blank" rel="noopener noreferrer">ZCARD key</a> 获取有序集合的成员数</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3611.html" target="_blank" rel="noopener noreferrer">ZCOUNT key min max</a> 计算在有序集合中指定区间分数的成员数</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3612.html" target="_blank" rel="noopener noreferrer">ZINCRBY key increment member</a> 有序集合中对指定成员的分数加上增量 increment</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">[ZINTERSTORE destination numkeys key <a href="https://www.redis.net.cn/order/3613.html" target="_blank" rel="noopener noreferrer">key ...]</a> 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3614.html" target="_blank" rel="noopener noreferrer">ZLEXCOUNT key min max</a> 在有序集合中计算指定字典区间内成员数量</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">[ZRANGE key start stop <a href="https://www.redis.net.cn/order/3615.html" target="_blank" rel="noopener noreferrer">WITHSCORES]</a> 通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">[ZRANGEBYLEX key min max <a href="https://www.redis.net.cn/order/3616.html" target="_blank" rel="noopener noreferrer">LIMIT offset count]</a> 通过字典区间返回有序集合的成员</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">[ZRANGEBYSCORE key min max <a href="https://www.redis.net.cn/order/3617.html" target="_blank" rel="noopener noreferrer">WITHSCORES] [LIMIT]</a> 通过分数返回有序集合指定区间内的成员</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3618.html" target="_blank" rel="noopener noreferrer">ZRANK key member</a> 返回有序集合中指定成员的索引</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">[ZREM key member <a href="https://www.redis.net.cn/order/3619.html" target="_blank" rel="noopener noreferrer">member ...]</a> 移除有序集合中的一个或多个成员</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3620.html" target="_blank" rel="noopener noreferrer">ZREMRANGEBYLEX key min max</a> 移除有序集合中给定的字典区间的所有成员</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3621.html" target="_blank" rel="noopener noreferrer">ZREMRANGEBYRANK key start stop</a> 移除有序集合中给定的排名区间的所有成员</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3622.html" target="_blank" rel="noopener noreferrer">ZREMRANGEBYSCORE key min max</a> 移除有序集合中给定的分数区间的所有成员</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;">[ZREVRANGE key start stop <a href="https://www.redis.net.cn/order/3623.html" target="_blank" rel="noopener noreferrer">WITHSCORES]</a> 返回有序集中指定区间内的成员，通过索引，分数从高到底</td></tr><tr><td style="text-align:left;">16</td><td style="text-align:left;">[ZREVRANGEBYSCORE key max min <a href="https://www.redis.net.cn/order/3624.html" target="_blank" rel="noopener noreferrer">WITHSCORES]</a> 返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td style="text-align:left;">17</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3625.html" target="_blank" rel="noopener noreferrer">ZREVRANK key member</a> 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td style="text-align:left;">18</td><td style="text-align:left;"><a href="https://www.redis.net.cn/order/3626.html" target="_blank" rel="noopener noreferrer">ZSCORE key member</a> 返回有序集中，成员的分数值</td></tr><tr><td style="text-align:left;">19</td><td style="text-align:left;">[ZUNIONSTORE destination numkeys key <a href="https://www.redis.net.cn/order/3627.html" target="_blank" rel="noopener noreferrer">key ...]</a> 计算给定的一个或多个有序集的并集，并存储在新的 key 中</td></tr><tr><td style="text-align:left;">20</td><td style="text-align:left;">[ZSCAN key cursor <a href="https://www.redis.net.cn/order/3628.html" target="_blank" rel="noopener noreferrer">MATCH pattern] [COUNT count]</a> 迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span>扩展</span></a></h3><h4 id="geo地理位置" tabindex="-1"><a class="header-anchor" href="#geo地理位置"><span>Geo地理位置</span></a></h4><h4 id="hyperloglog技术统计" tabindex="-1"><a class="header-anchor" href="#hyperloglog技术统计"><span>HyperLoglog技术统计</span></a></h4><h4 id="bloomfilter布隆过滤器" tabindex="-1"><a class="header-anchor" href="#bloomfilter布隆过滤器"><span>bloomfilter布隆过滤器</span></a></h4><h2 id="_05、redis持久化" tabindex="-1"><a class="header-anchor" href="#_05、redis持久化"><span>05、Redis持久化</span></a></h2><p>Redis 是一款基于内存的非关系型数据库，它会将数据全部存储在内存中。但是如果 Redis 服务器出现某些意外情况，比如宕机或者断电等，那么内存中的数据就会全部丢失。因此必须有<strong>一种机制能够保证 Redis 储存的数据不会因故障而丢失</strong>，这就是 Redis 的数据持久化机制。</p><p>数据的持久化存储是 Redis 的重要特性之一，它能够将内存中的数据保存到本地磁盘中，实现对数据的持久存储。这样即使在服务器发生故障之后，也能通过本地磁盘对数据进行恢复。</p><p>Redis 提供了两种持久化机制：</p><ul><li>第一种是 RDB，又称快照（snapshot）模式，（默认使用）将内存数据写入到二进制文件</li><li>第二种是 AOF 日志，也就追加模式。将修改命令写入到存储文件</li></ul><h3 id="rdb-快照模式" tabindex="-1"><a class="header-anchor" href="#rdb-快照模式"><span>RDB-快照模式</span></a></h3><p>我们知道 Redis 是单线程的，即一个线程完成客户端的并发读写，若是还要在这个进程执行备份操作（对文件进行IO读写），会严重影响性能。为此解决办法是利用<strong>多进程</strong>，备份使用子进程进行操作</p><p>RDB 实际上是 Redis 内部的一个定时器事件，它每隔一段固定时间就去检查当前数据发生改变的次数和改变的时间频率，看它们是否满足配置文件中规定的持久化触发条件。当满足条件时，Redis 就会通过操作系统调用 fork() 来创建一个子进程，该子进程与父进程享有相同的地址空间。</p><p>Redis 通过子进程遍历整个内存空间来获取存储的数据，从而完成数据持久化操作。注意，此时的主进程则仍然可以对外提供服务，父子进程之间通过操作系统的 COW 机制实现了数据段分离，从而保证了父子进程之间互不影响</p><figure><img src="https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis-RDB.png" alt="rdb" tabindex="0" loading="lazy"><figcaption>rdb</figcaption></figure><blockquote><p>也就是说，用一个触发机制来判断是否需要执行备份，然后备份用子进程操作（主进程继续对外提供服务不受影响）</p></blockquote><h4 id="_1-触发策略" tabindex="-1"><a class="header-anchor" href="#_1-触发策略"><span>1.触发策略</span></a></h4><p>RDB 持久化提供了两种触发策略：一种是手动触发，另一种是自动触发</p><p>配置文件定义：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 数据库备份的文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dbfilename</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dump.rdb</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 默认是：dir ./  也就是redis安装目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意授权：<code>chmod 777 /data/opt/redis/data</code></p><ol><li><p><strong>手动触发</strong></p><p>手动触发是通过<code>SAVAE</code>命令或者<code>BGSAVE</code>命令将内存数据保存到磁盘文件中。如下所示</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">SAVE</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">BGSAVE</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Background</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> saving</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> started</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">LASTSAVE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1611298430</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述命令<code>BGSAVE</code>从后台执行数据保存操作，其可用性要优于执行 SAVE 命令</p><ul><li>SAVE 命令会阻塞 Redis 服务器进程，直到 dump.rdb 文件创建完毕为止，在这个过程中，服务器不能处理任何的命令请求。</li><li><code>BGSAVE</code>命令是非阻塞式的，所谓非阻塞式，指的是在该命令执行的过程中，并不影响 Redis 服务器处理客户端的其他请求。这是因为 Redis 服务器会 fork() 一个子进程来进行持久化操作（比如创建新的 dunp.rdb 文件），而父进程则继续处理客户端请求。当子进程处理完后会向父进程发送一个信号，通知它已经处理完毕。此时，父进程会用新的 dump.rdb 文件覆盖掉原来的旧文件。</li></ul><p>因为<code>SAVE</code>命令无需创建子进程，所以执行速度要略快于<code>BGSAVE</code>命令，但是<code>SAVE</code>命令是阻塞式的，因此其可用性欠佳，如果在数据量较少的情况下，基本上体会不到两个命令的差别，不过仍然建议您使用 <code>BGSAVE</code>命令。</p><p>注意：LASTSAVE 命令用于查看 BGSAVE 命令是否执行成功。</p></li><li><p><strong>自动触发策略</strong></p><p>自动触发策略，是指 Redis 在指定的时间内，数据发生了多少次变化时，会自动执行<code>BGSAVE</code>命令。自动触发的条件包含在了 Redis 的配置文件中，如下所示</p><figure><img src="https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis_RDBConf.png" alt="config" tabindex="0" loading="lazy"><figcaption>config</figcaption></figure><p>上图所示， save m n 的含义是在时间 m 秒内，如果 Redis 数据至少发生了 n 次变化，那么就自动执行<code>BGSAVE</code>命令。配置策略说明如下：</p><ul><li>save 900 1 表示在 900 秒内，至少更新了 1 条数据，Redis 自动触发 BGSAVE 命令，将数据保存到硬盘。</li><li>save 300 10 表示在 300 秒内，至少更新了 10 条数据，Redis 自动触 BGSAVE 命令，将数据保存到硬盘。</li><li>save 60 10000 表示 60 秒内，至少更新了 10000 条数据，Redis 自动触发 BGSAVE 命令，将数据保存到硬盘。</li></ul><p>只要上述三个条件任意满足一个，服务器就会自动执行<code>BGSAVE</code>命令。当然您可以根据实际情况自己调整触发策略。</p><p>注意：每次创建 RDB 文件之后，Redis 服务器为实现自动持久化而设置的时间计数和次数计数就会被清零，并重新开始计数，因此多个策略的效果不会叠加。</p></li></ol><h4 id="_2-rdb的错误处理" tabindex="-1"><a class="header-anchor" href="#_2-rdb的错误处理"><span>2.RDB的错误处理</span></a></h4><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stop-writes-on-bgsave-error</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>后台存储发送错误时，禁止写入，默认值是yes,默认情况下，redis在后台生成的快照文件时失败，就会停止接收数据，目的是让用户能知道没有持久化功能。</p><h4 id="_3-rdb的数据压缩" tabindex="-1"><a class="header-anchor" href="#_3-rdb的数据压缩"><span>3.RDB的数据压缩</span></a></h4><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rdbcompression</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大,不建议关闭。</p><h3 id="aof-日志模式" tabindex="-1"><a class="header-anchor" href="#aof-日志模式"><span>AOF-日志模式</span></a></h3><p>AOF 被称为追加模式，或日志模式，是 Redis 提供的另一种持久化策略，它能够存储 Redis 服务器已经执行过的的命令，并且只记录对内存有过修改的命令，这种数据记录方法，被叫做“增量复制”，其默认存储文件为<code>appendonly.aof</code>。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 过程</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Redis客户端/go/java/Python客户端</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ：发送写命令——</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">—&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Redis服务器———</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">—&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">同步写命令——</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">—&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">AOF文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>该文件存储了服务器执行过的所有修改命令，因此，只要服务器重新执行一次 .aof 文件，就可以实现还原数据的目的</p><h4 id="_1-实现机制-写入和重写" tabindex="-1"><a class="header-anchor" href="#_1-实现机制-写入和重写"><span>1.实现机制-写入和重写</span></a></h4><p>写入机制：</p><p>收到修改命令就会对其进行校验，没问题就会将命令追加到.aof文件中。这是一个IO操作，为了提高读写效率，会暂时将数据存储在一个内存缓冲区中，写满了才会将内容写入到磁盘。服务挂了，也可以将这个文件的命令全部执行一遍就可恢复以前的样子</p><p>重写机制：</p><p>Redis 在长期运行的过程中，aof 文件会越变越长。如果机器宕机重启，“重演”整个 aof 文件会非常耗时，导致长时间 Redis 无法对外提供服务。因此就需要对 aof 文件做一下“瘦身”运动。</p><p>为了让 aof 文件的大小控制在合理的范围内，Redis 提供了 AOF 重写机制，手动执行<code>BGREWRITEAOF</code>命令，开始重写 aof 文件，如下所示：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6379</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">BGREWRITEAOF</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Background</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> append</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> only</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rewriting</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> started</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述操作后，服务器会生成一个新的 aof 文件，该文件具有以下特点：</p><ul><li>新的 aof 文件记录的数据库数据和原 aof 文件记录的数据库数据完全一致；</li><li>新的 aof 文件会使用尽可能少的命令来记录数据库数据，因此新的 aof 文件的体积会小很多；</li><li>AOF 重写期间，服务器不会被阻塞，它可以正常处理客户端发送的命令。</li></ul><p>下表对原有 aof 文件和新生成的 aof 文件做了对比，如下所示：</p><table><thead><tr><th>原有aof文件</th><th>重写后aof文件</th></tr></thead><tbody><tr><td>select 0</td><td>SELECT 0</td></tr><tr><td>sadd myset Jack</td><td>SADD myset Jack Helen JJ Lisa</td></tr><tr><td>sadd myset Helen</td><td>SET msg &#39;hello tarena&#39;</td></tr><tr><td>sadd myset JJ</td><td>RPUSH num 4 6 8</td></tr><tr><td>sadd myset Lisa</td><td></td></tr><tr><td>INCR number</td><td></td></tr><tr><td>INCR number</td><td></td></tr><tr><td>DEL number</td><td></td></tr><tr><td>SET message &#39;<a href="http://www.baidu.com" target="_blank" rel="noopener noreferrer">www.baidu.com</a>&#39;</td><td></td></tr><tr><td>SET message &#39;<a href="http://www.biancheng.net" target="_blank" rel="noopener noreferrer">www.biancheng.net</a>&#39;</td><td></td></tr><tr><td>RPUSH num 2 4 6</td><td></td></tr><tr><td>RPUSH num 8</td><td></td></tr><tr><td>LPOP num</td><td></td></tr></tbody></table><p>从上表可以看出，新生成的 aof 文件中，它的命令格式做了很大程度的简化。</p><p><strong>自动触发重写</strong></p><p>Redis 为自动触发 AOF 重写功能，提供了相应的配置策略。如下所示：修改 Redis 配置文件，让服务器自动执行 BGREWRITEAOF 命令。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#默认配置项</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">auto-aof-rewrite-percentage</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 表示aof文件增量的比例来触发，100表示：文件增量大于100%才重写，即大一倍</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">auto-aof-rewrite-min-size</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 64mb</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 表示触发AOF重写的最小文件体积,大于或等于64MB自动触发。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-开启aof" tabindex="-1"><a class="header-anchor" href="#_2-开启aof"><span>2.开启AOF</span></a></h4><p><strong>AOF 机制默认处于未开启状态</strong>，可以通过修改 Redis 配置文件开启 AOF，如下所示</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># windows系统</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#修改配置文件，把no改为 yes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appendonly</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#确定存储文件名是否正确</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appendfilename</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;appendonly.aof&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#重启服务器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --service-stop</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --service-start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#Linux系统</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#修改配置文件：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/redis/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appendonly</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 把 no 改为 yes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#确定存储文件名是否正确</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appendfilename</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;appendonly.aof&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#重启服务：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/init.d/redis-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restart</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示：本节建议在您在 Linux 系统上操作 Redis，否则一些 AOF 的性能无法体现。</p><h4 id="_3-aof配置策略" tabindex="-1"><a class="header-anchor" href="#_3-aof配置策略"><span>3.AOF配置策略</span></a></h4><p>上面介绍了写机制过程中，若是遇到宕机前，缓存内的数据没能及时写入磁盘就会有丢失风险，缓存到内存的修改命令越多，丢失的数据越多。</p><p>为了数据的安全考虑，会为AOF提供了策略配置：</p><figure><img src="https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis_AOFConf.png" alt="aof" tabindex="0" loading="lazy"><figcaption>aof</figcaption></figure><p>策略说明：</p><ul><li>Always：服务器每写入一个命令，就调用一次 fsync 函数，将缓冲区里面的命令写入到硬盘，不会丢失任何已经完成的操作的命令数据，但是执行速度慢</li><li>Everysec（默认）：服务器每一秒调用一次 fsync 函数，服务故障最多丢失1秒的数据</li><li>No：服务器不主动调用 fsync 函数，什么情况写入磁盘由操作系统决定。丢失数量不确定，不安全</li></ul><p>注意：Linux 系统的 fsync() 函数可以将指定文件的内容从内核缓存刷到硬盘中，由于是磁盘的IO操作，所以这个很慢，每次都执行很影响性能，若是No策略很不安全不推荐，为此常用的还是1秒执行一次</p><h3 id="aof和rdb对比" tabindex="-1"><a class="header-anchor" href="#aof和rdb对比"><span>AOF和RDB对比</span></a></h3><table><thead><tr><th>RDB持久化</th><th>AOF持久化</th></tr></thead><tbody><tr><td>全量备份，一次保存整个数据库。</td><td>增量备份，一次只保存一个修改数据库的命令。</td></tr><tr><td>每次执行持久化操作的间隔时间较长。</td><td>保存的间隔默认为一秒钟（Everysec）</td></tr><tr><td>数据保存为二进制格式，其还原速度快。</td><td>使用文本格式还原数据，所以数据还原速度一般。</td></tr><tr><td>执行 SAVE 命令时会阻塞服务器，但手动或者自动触发的 BGSAVE 不会阻塞服务器</td><td>AOF持久化无论何时都不会阻塞服务器。</td></tr></tbody></table><p><strong>如果进行数据恢复时，既有 dump.rdb文件，又有 appendonly.aof 文件，您应该先通过 appendonly.aof 恢复数据，这能最大程度地保证数据的安全性。</strong></p><p><strong>这种工作方式使得Redis可以从copy-on-write机制中获益。(AOF的重写也利用了写时复制)</strong></p><p><strong>写时复制 是一种计算机程序设计领域的优化策略。核心思想是，如果有多个调用者同时要求相同资源，他们会共同获取相同的指针指向相同的资源，直到某个调用者试图修改资源的内容时，系统才会真正复制一份专用副本给该调用者，而其他调用者所见到的最初的资源仍然保持不变。这过程对其他的调用者都是透明的。此作法主要的优点是如果调用者没有修改该资源，就不会有副本被创建，因此多个调用者只是读取操作时可以共享同一份资源。</strong></p><h2 id="_06、事务" tabindex="-1"><a class="header-anchor" href="#_06、事务"><span>06、事务</span></a></h2><h2 id="_07、redis主从复制" tabindex="-1"><a class="header-anchor" href="#_07、redis主从复制"><span>07、Redis主从复制</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>主从模式是搭建Redis集群最简单的方式！！</p><p>缺陷：</p><p>1、 不具备自动容错和恢复功能，主挂了要认为干预，而且若是数据没有同步到从也会导致数据不一致</p><p>2、只有一个主，写和存储能力受限，数据全量同步若是数据大就会出现卡顿现象</p></div><p>在软件的架构中，主从模式（Master-Slave）是使用较多的一种架构。主（Master）和从（Slave）分别部署在不同的服务器上，当主节点服务器写入数据时，同时也会将数据同步至从节点服务器，通常情况下，<strong>主节点负责写入数据，而从节点负责读取数据。</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看master/slave的关系</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> replcation</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">##主从关联复制</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">savelof</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 主从复制关联</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 终止复制</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">saveof</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> no</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> one</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Redis的主从特点：</p><ul><li>master节点和slave节点若是断开连接，slave可自动重连，连接成功后会同步一次数据</li><li>配置好后，master负责写，slave负责读（可配置将持久化操作在slave执行）</li><li>master端同步数据是非阻塞的，即master可以处理客户端写操作，也可以同时进行同步数据</li><li>主节点的数据的清空，也会清空从slave节点的数据信息.</li></ul><h3 id="好处" tabindex="-1"><a class="header-anchor" href="#好处"><span>好处</span></a></h3><ul><li>避免Redis的单点故障（高可用还是要看哨兵模式来实现）</li><li>做到读写分离，构建读写分离架构，满足读多写少的应用场景</li></ul><h3 id="主从模式实现" tabindex="-1"><a class="header-anchor" href="#主从模式实现"><span>主从模式实现</span></a></h3><p>Redis 提供了两种实现主从模式的方法，下面进行逐一介绍。为了方便演示，我们只从一台机器上搭建主从模式。</p><h4 id="_1-命令方式" tabindex="-1"><a class="header-anchor" href="#_1-命令方式"><span>1）命令方式</span></a></h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>配置主从还是比较简单的，推荐还是用命令方式构建</p></div><p>命令语法：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">slave-por</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--slaveof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">master-i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">master-por</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 参数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--port</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     设置从节点的端口</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--slaveof</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  指定主节点</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1.命令启动（启动后就是一个正常提供一个只读的Redis服务了）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6300</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --slaveof</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127.0.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --masterauth</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkxiaoer</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --requirepass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkxiaoer</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --daemonize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 解释：--masterauth ：连接主节点的密码，主若是设置密码，从需要密码才可连接到主   -requirepass mkxiaoer ： 访问当前redis服务密码  --daemonize：当前Redis服务以守护进程（daemon）模式运行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 63001</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 直接启动一个redis服务这是一个独立的redis服务，可读写</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2.执行读操作命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6300</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> name</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;jack&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#不能执行写命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6300</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myname</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> BangDe</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">READONLY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> You</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> can&#39;t write against a read only slave.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"># 3.将当前独立的redis服务变成一个从节点：slaveof  ip 端口</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">127.0.0.1:63001&gt; SLAVEOF 127.0.0.1 6379</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">OK</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"># 4.从改为独立Redis服务：SLAVEOF no one   （后续又可继续读写了）</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">127.0.0.1:63001&gt; SLAVEOF no one</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">OK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置主从的日志：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[18160] 20 Jan 17:40:34.101 </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Server initialized #服务初始化</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[18160] 20 Jan 17:40:34.108 * Ready to accept connections </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#准备连接</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[18160] 20 Jan 17:40:34.108 * Connecting to MASTER 127.0.0.1:6379 </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#连接到主服务器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[18160] 20 Jan 17:40:34.109 * MASTER &lt;-&gt; REPLICA sync started </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#启动副本同步</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[18160] 20 Jan 17:40:34.110 * Non blocking connect </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SYNC fired the event.#自动触发SYNC命令，请求同步数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[18160] 20 Jan 17:40:34.110 * Master replied to PING, replication can continue...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[18160] 20 Jan 17:40:34.112 * Partial resynchronization not possible (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">no</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cached</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> master</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[18160] 20 Jan 17:40:34.431 * Full resync from master: 6eb220706f73107990c2b886dbc2c12a8d0d9d05:0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[18160] 20 Jan 17:40:34.857 * MASTER &lt;-&gt; REPLICA sync: receiving 6916 bytes from master </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#从主机接受了数据，并将其存在于磁盘</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[18160] 20 Jan 17:40:34.874 * MASTER &lt;-&gt; REPLICA sync: Flushing old data </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#清空原有数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[18160] 20 Jan 17:40:34.874 * MASTER &lt;-&gt; REPLICA sync: Loading DB in memory </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#将磁盘中数据载入内存</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[18160] 20 Jan 17:40:34.879 * MASTER &lt;-&gt; REPLICA sync: Finished with success </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#同步数据完成</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-配置文件方式" tabindex="-1"><a class="header-anchor" href="#_2-配置文件方式"><span>2）配置文件方式</span></a></h4><p>配置就比较简单一些，直接为每一个服务创建一个xxx.conf文件然后用命令根据这个文件启动就行</p><p>新建文件Redis_6302.conf，并添加配置信息：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">slaveof</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127.0.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 指定主节点的ip和端口</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6302</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                # 指定从节点的端口</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>命令行启动Redis服务</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis_6302.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 测试</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6302</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">127.0.0.1:6300</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HSET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user:username</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> biangcheng</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#写入失败</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">READONLY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> You</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> can&#39;t write against a read only slave.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_08、redis哨兵" tabindex="-1"><a class="header-anchor" href="#_08、redis哨兵"><span>08、Redis哨兵</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>高阶版的主从复制，单纯的主从存在不具备自动恢复的功能。服务宕机需要人为干预</p><p>Redis 官方推荐一种高可用方案 -- <strong>Redis Sentinel 哨兵模式</strong></p></div><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>Sentinel 通过监控的方式获取主机的工作状态是否正常，当主机发生故障时， Sentinel 会自动进行 Failover（即故障转移），并将其监控的从机提升主服务器（master），从而保证了系统的高可用性。</p><p>哨兵模式是一种特殊的模式，Redis 为其提供了专属的哨兵命令，它是一个<strong>独立的进程</strong>，<strong>能够独立运行</strong></p><p>哨兵两个重要的作用：</p><ul><li>哨兵节点每秒会发生<strong>ping命令</strong>，通过回复<strong>判断运行状态</strong></li><li>检查到主服务故障时，<strong>自动选择一个从节点升级为主服务</strong>。使用<strong>PubSub 发布订阅模式，通知其他节点修改配文件</strong>，跟随新的主服务</li></ul><p><strong>在实际生产情况中，Redis Sentinel 是集群的高可用的保障，为避免 Sentinel 发生意外，它一般是由 3～5 个节点组成，这样就算挂了个别节点，该集群仍然可以正常运转。其结构图如下所示：</strong></p><figure><img src="https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis_Sentinel.png" alt="多哨兵模式" tabindex="0" loading="lazy"><figcaption>多哨兵模式</figcaption></figure><p>上图所示，多个哨兵之间也存在互相监控，这就形成了多哨兵模式，现在对该模式的工作过程进行讲解，介绍如下：</p><h4 id="_1-主观下线" tabindex="-1"><a class="header-anchor" href="#_1-主观下线"><span>1) 主观下线</span></a></h4><p>主观下线，适用于主服务器和从服务器。如果在规定的时间内(配置参数：down-after-milliseconds)，Sentinel 节点没有收到目标服务器的有效回复，则判定该服务器为“主观下线”。比如 Sentinel1 向主服务发送了<code>PING</code>命令，在规定时间内没收到主服务器<code>PONG</code>回复，则 Sentinel1 判定主服务器为“主观下线”。</p><h4 id="_2-客观下线" tabindex="-1"><a class="header-anchor" href="#_2-客观下线"><span>2) 客观下线</span></a></h4><p>客观下线，只适用于主服务器。 Sentinel1 发现主服务器出现了故障，它会通过相应的命令，询问其它 Sentinel 节点对主服务器的状态判断。如果超过半数以上的 Sentinel 节点认为主服务器 down 掉，则 Sentinel1 节点判定主服务为“客观下线”。</p><h4 id="_3-投票选举" tabindex="-1"><a class="header-anchor" href="#_3-投票选举"><span>3) 投票选举</span></a></h4><p>投票选举，所有 Sentinel 节点会通过投票机制，按照谁发现谁去处理的原则，选举 Sentinel1 为领头节点去做 Failover（故障转移）操作。Sentinel1 节点则按照一定的规则在所有从节点中选择一个最优的作为主服务器，然后通过发布订功能通知其余的从节点（slave）更改配置文件，跟随新上任的主服务器（master）。至此就完成了主从切换的操作。</p><p>对上对述过程做简单总结：</p><blockquote><p>Sentinel 负责监控主从节点的“健康”状态。当主节点挂掉时，自动选择一个最优的从节点切换为主节点。客户端来连接 Redis 集群时，会首先连接 Sentinel，通过 Sentinel 来查询主节点的地址，然后再去连接主节点进行数据交互。当主节点发生故障时，客户端会重新向 Sentinel 要地址，Sentinel 会将最新的主节点地址告诉客户端。因此应用程序无需重启即可自动完成主从节点切换。</p></blockquote><h3 id="哨兵的配置和使用" tabindex="-1"><a class="header-anchor" href="#哨兵的配置和使用"><span>哨兵的配置和使用</span></a></h3><blockquote><p>哨兵Sentinel的使用：配置对应的Sentinel.conf文件，然后redis-sentinel或者redis-server命令去启动即可</p></blockquote><p>下面对 Sentinel 配置文件的其他配置项做简单说明：</p><table><thead><tr><th>配置项</th><th>参数类型</th><th>说明</th></tr></thead><tbody><tr><td>dir</td><td>文件目录</td><td>哨兵进程服务的文件存放目录，默认为 /tmp。</td></tr><tr><td>port</td><td>端口号</td><td>启动哨兵的进程端口号，默认为 26379。</td></tr><tr><td>sentinel down-after-milliseconds</td><td>&lt;服务名称&gt;&lt;毫秒数(整数)&gt;</td><td>在指定的毫秒数内，若主节点没有应答哨兵的 PING 命令，此时哨兵认为服务器主观下线，默认时间为 30 秒。</td></tr><tr><td>sentinel parallel-syncs</td><td>&lt;服务名称&gt;&lt;服务器数(整数)&gt;</td><td>指定可以有多少个 Redis 服务同步新的主机，一般而言，这个数字越小同步时间越长，而越大，则对网络资源要求就越高。</td></tr><tr><td>sentinel failover-timeout</td><td>&lt;服务名称&gt;&lt;毫秒数(整数)&gt;</td><td>指定故障转移允许的毫秒数，若超过这个时间，就认为故障转移执行失败，默认为 3 分钟。</td></tr><tr><td>sentinel notification-script</td><td>&lt;服务名称&gt;&lt;脚本路径&gt;</td><td>脚本通知，配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</td></tr><tr><td>sentinel auth-pass &lt; master-name&gt; &lt; password&gt;</td><td>&lt;服务器名称&gt;&lt;密码&gt;</td><td>若主服务器设置了密码，则哨兵必须也配置密码，否则哨兵无法对主从服务器进行监控。该密码与主服务器密码相同。</td></tr><tr><td>sentinel monitor &lt; master-name&gt; &lt; ip&gt; &lt; redis-port&gt; &lt; quorum&gt;</td><td>&lt;服务器名称&gt;&lt; ip&gt;&lt;服务端口&gt;&lt;判定人数&gt;</td><td>让sentinel 监听主服务，quorum是多少个sentinel监听到宕机才判定为宕机进行故障转移（数量根据sentinel 数量设置：一般是sentinel 数/2 + 1）</td></tr></tbody></table><h3 id="哨兵模式应用" tabindex="-1"><a class="header-anchor" href="#哨兵模式应用"><span>哨兵模式应用</span></a></h3><p>Redis Sentinel 哨兵模式适合于在 Linux 系统中使用，所以下面的应用都基于 centos实现。</p><h4 id="_1-搭建主从模式" tabindex="-1"><a class="header-anchor" href="#_1-搭建主从模式"><span>1) 搭建主从模式</span></a></h4><p>接下来，在本地环境使用主从模式搭建一个拥有三台服务器的 Redis 集群节点</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --daemonize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6300</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --slaveof</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127.0.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --daemonize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6300</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --slaveof</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127.0.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --daemonize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-单版本配置sentinel哨兵" tabindex="-1"><a class="header-anchor" href="#_2-单版本配置sentinel哨兵"><span>2）单版本配置sentinel哨兵</span></a></h4><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1.编写配置文件：vim sentinel.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> monitor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127.0.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> auth-pass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkxiaoer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 主节点宕机以后选举的间隔时间10s 单位是毫秒</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> down-after-milliseconds</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Generated by CONFIG REWRITE</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/www/redis-7.0.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">protected-mode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> no</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 26379</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">latency-tracking-info-percentiles</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 50</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 99</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 99.9</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> default</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nopass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;* +@all</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c71c7cc530f5d800db6c78bc537c9a4764a7895f</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config-epoch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> leader-epoch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> current-epoch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2. 启动哨兵即可</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./sentinel.conf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 集群就搭建好了，然后将master直接kill掉，自动选举一个节点作为master，从新启动6379就会自动作为从节点</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-集群版本配置sentinel哨兵" tabindex="-1"><a class="header-anchor" href="#_3-集群版本配置sentinel哨兵"><span>3) 集群版本配置sentinel哨兵</span></a></h4><p>首先<strong>新建 sentinel.conf 文件</strong>，并对其进行配置</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1.配置文件：sentinel26379.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> monitor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127.0.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> auth-pass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkxiaoer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 主节点宕机以后选举的间隔时间10s 单位是毫秒</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> down-after-milliseconds</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Generated by CONFIG REWRITE</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/www/redis-7.0.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">protected-mode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> no</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 26379</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2.配置文件：sentinel26380.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> monitor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127.0.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> auth-pass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkxiaoer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 主节点宕机以后选举的间隔时间10s 单位是毫秒</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> down-after-milliseconds</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Generated by CONFIG REWRITE</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/www/redis-7.0.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">protected-mode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> no</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 26380</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 3.配置文件：sentinel26381.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> monitor</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127.0.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6379</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> auth-pass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkxiaoer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 主节点宕机以后选举的间隔时间10s 单位是毫秒</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> down-after-milliseconds</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myredis</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Generated by CONFIG REWRITE</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/www/redis-7.0.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">protected-mode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> no</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 26381</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>启动哨兵</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">方式一:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-sentinel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sentinel.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">方式二:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sentinel.conf</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --sentinel</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_09、redis集群" tabindex="-1"><a class="header-anchor" href="#_09、redis集群"><span>09、Redis集群</span></a></h2><p><strong>有哨兵为啥还有集群？</strong></p><p>上面的虽然提供高可用，但是还存在局限：<strong>没有解决数据分片，导致每个节点都有全部的数据，若是数据量大了就会受限于内容容量，还有写操作都在主节点上，很容易造成性能瓶颈</strong></p><p>进阶版的Cluster优势：数据自动分片，<strong>突破单机内存限制</strong>；每个分片是主从结构，<strong>提供高可用</strong>；多个主节点可同时处理读写，<strong>提升写性能</strong>；客户端可与任意节点通信，<strong>自动路由到正确的节点</strong>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Sentinel解决的是可用性问题(Available)</p><p>Cluster解决的是扩展性问题(Scalable)</p><p>具体项目中选择哪个，还是需要结合实际需求选择。小项目读多写少Sentinel足够，大型项目有大量写就需要Cluster。不要过度设计！！！</p></div><br><h3 id="原理-1" tabindex="-1"><a class="header-anchor" href="#原理-1"><span>原理</span></a></h3><p>Redis集群是一个由多个主从节点组成的分布式服务器群，它具有复制，高可用和分片特性。Redis的集群将所有的数据存储区域划分为<strong>16384个槽（slot）</strong>。每个节点负责一部分槽。槽的信息存储于每个节点中。Redis集群要将每个节点设置成集群模式，它没有中心节点的概念，可以水平扩展，它的性能和高可用用性均优越于主从模式和哨兵模式。而且集群配置非常简单。如下图：</p><figure><img src="https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis_cluster.png" alt="cluster" tabindex="0" loading="lazy"><figcaption>cluster</figcaption></figure><p><strong>特点</strong></p><ol><li><strong>数据分片（Sharding）</strong>: Redis 集群采用 <strong>哈希槽（hash slot）</strong> 来划分数据。总共有 16384 个哈希槽，数据根据键的哈希值映射到不同的槽中。每个节点负责管理若干个哈希槽，因此每个节点只处理部分数据。</li><li><strong>高可用性</strong>: Redis 集群支持每个主节点有多个副本（Replica）。当主节点发生故障时，集群会自动将副本提升为新的主节点，从而保证服务的持续可用。</li><li><strong>无中心化管理</strong>: Redis 集群没有单点故障的中心节点，而是通过每个节点之间相互通信来管理集群的状态。每个节点都知道集群的拓扑结构，可以独立处理请求。</li><li><strong>自动故障转移</strong>: 如果某个主节点失败，集群会自动将其副本提升为主节点，确保数据的可用性，避免数据丢失。</li><li><strong>客户端支持</strong>: 为了保证 Redis 集群的正常运行，客户端需要能够识别节点之间的分布，并正确地发送请求。支持 Redis 集群的客户端通常会根据键的哈希值来判断请求应发送到哪个节点。</li></ol><p><strong>架构</strong></p><p>Redis 集群是由若干个 <strong>主节点（master node）</strong> 和 <strong>副本节点（replica node）</strong> 组成的，节点之间通过 Gossip 协议保持集群状态的一致性。</p><ul><li><strong>主节点</strong>：每个主节点负责若干个哈希槽，并且存储一部分数据。</li><li><strong>副本节点</strong>：每个副本节点是某个主节点的副本，负责备份主节点的数据。当主节点发生故障时，副本节点会被提升为主节点。</li></ul><h3 id="组成" tabindex="-1"><a class="header-anchor" href="#组成"><span>组成</span></a></h3><p><strong>主节点</strong>（Master）：每个主节点负责存储一定数量的哈希槽和数据。</p><p><strong>副本节点</strong>（Replica）：副本节点是主节点的复制品，用于提供数据的高可用性。当主节点不可用时，副本节点会接管其任务，保证数据不会丢失。</p><p><strong>槽（Slot）</strong>：Redis 集群的哈希槽是数据分布的基础。整个集群包含 16384 个哈希槽，每个主节点管理其中的一部分槽。</p><h3 id="部署集群" tabindex="-1"><a class="header-anchor" href="#部署集群"><span>部署集群</span></a></h3><h4 id="_1-环境准备" tabindex="-1"><a class="header-anchor" href="#_1-环境准备"><span>1）环境准备</span></a></h4><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>主节点至少要有3个</li><li>主节点不能少于总节点的一半</li></ul></div><p>虚拟机或者服务器（linux操作系统）：安装好redis</p><p>目标：6个节点构建三主三从的集群</p><h4 id="_2-单机集群" tabindex="-1"><a class="header-anchor" href="#_2-单机集群"><span>2）单机集群</span></a></h4><blockquote><p>IP：124.220.6.62</p><p>redis的版本：7.0.8</p><p>部署集群的端口：8001、8002、8003、8004、8005、8006</p></blockquote><p>具体步骤：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1.复制5份redis.conf文件-------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /cluster</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /cluster</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8003</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8004</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8005</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8006</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/redis.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8001/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8002/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8003/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8004/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8005/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> redis-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8006/redis.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2.设置对应的配置文件（以8001为例）----------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ① 保护模式启动</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">daemonize</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ② 修改端口</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8001</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ③ 修改数据存储的目录，这里必须要指定不同的目录位置，否则会造成数据的丢失</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8001</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ④ 开启集群模式</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster-enabled</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ⑤ 集群节点信息文件，这里最好和端口保持一致</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster-config-file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes-8001.conf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ⑥ 集群节点的超时时限，单位是毫秒</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster-node-timeout</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ⑦ 修改为主讲的ip地址，默认地址是：127.0.0.1，需要修改成其他节点计算机可以访问的ip地址，否则创建集群的时候无法访问对应节单机的端口，无法创建集群。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 本机建议设置： 本机ip</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果是多机设置：阿里云的内网IP或者注释掉或者bind:0.0.0.0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.0.0.0</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ⑧ 受保护的模式，关闭，否则也会造成集群没办法创建成功</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">protected-mode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> no</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ⑨ 开启aof的数据持久化</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appendonly</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ⑩ aof持久化的文件名</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appendfilename</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;appendonly8001.aof&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ⑪ aof放文件所放的位置，它是和dir一起拼接形成，比如：/www/redis-7.0.8/cluster/8001/aof/appendonly8001.aof</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appenddirname</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;aof&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ⑫ 当前服务节点的密码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">requirepass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkxiaoer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ⑬ 如果自身作为从节点以后，如果链接master节点有密码，一定要配置，建议设置密码的时候都保持一致</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">masterauth</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkxiaoer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 3.分别启动这6个节点 ----------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8001/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8002/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8003/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8004/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8005/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /www/redis-7.0.8/cluster/8006/redis.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 4.检查是否启动成功  -----------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  redis</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 5.用redis-cli创建redis集群----------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cluster</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cluster-replicas</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  127.0.0.1:8002</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8003</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8004</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8005</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8006</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkxiaoer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># --cluster-replicas 1 数字表示多少个从节点</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -a 每个节点的密码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 6.进入任意一个节点可查看信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; redis-cli -c -h 127.0.0.1 -p 8001 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; auth mkxiaoer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cluster info   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#查看集群状态</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster_state:ok</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             # 状态正常</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster_slots_assigned:16384</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster_slots_ok:16384</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster_slots_pfail:0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster_slots_fail:0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster_known_nodes:6</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 节点数量</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cluster_size:3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cluster nodes   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看节点</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">d88b17b0abb2a82dc4350e93abaebe0353228df2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8004@18004</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> slave</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 6192b1d7512ec3fd4bd880cc455a47da54f4feca</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675915939398</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6192b1d7512ec3fd4bd880cc455a47da54f4feca</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8002@18002</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> master</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675915938000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 5461-10922</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">。。。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 节点可以正常使用了</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 若是要关闭节点，使用命令：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -h</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127.0.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8001</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mkxiaoer</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shutdown</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的操作正常都是可以的，但是还有一些操作比如：新增主/从节点、删除主/从节点（会涉及到hash槽的分配）</p><p><strong>1.新增主节点</strong>（加入集群，还要重新分配槽）</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建一个redis8007的主节点</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cp redis.conf /www/redis-7.0.8/cluster/8007/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动主节点8007</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; redis-server /www/redis-7.0.8/cluster/8007/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过add-node命令增加集群节点，这里8001做个陪衬，你可以在集群中随便找个其他的也是可以的</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; redis-cli --cluster add-node 127.0.0.1:8007 127.0.0.1:8001 -a mkxiaoer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看集群节点</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; redis-cli -p 8001</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; auth mkxiaoer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cluster info</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 手动为主节点分配hash槽</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; redis-cli --cluster reshard 127.0.0.1:8007 -a mkxiaoer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 给主节点8007分配多少个槽位，这里设定是1000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; How many slots </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> you</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> want</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> move</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (from </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 16384</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)? 1000</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 给8007开始进行设定操作,这里的id是8007的master d0b678984c3c6f06b6c4510694d76b8381a45762</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; What is the receiving node ID? d0b678984c3c6f06b6c4510694d76b8381a45762</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; Please enter all the source node IDs.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  Type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;all&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> all</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> as</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> slots.</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # all.代表将全部重新分配的hash槽位</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  Type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;done&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> once</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> you</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> entered</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> all</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IDs.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #1: all</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输入yes开始进行重新分配hash槽，然后就会自动去调整和重新分配槽位</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; Do you want to proceed with the proposed reshard plan (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yes/no</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)?  yes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看是否分配成功</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; redis-cli -p 8007</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; auth mkxiaoer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cluster info</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cluster nodes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">d88b17b0abb2a82dc4350e93abaebe0353228df2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8004@18004</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> slave</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 6192b1d7512ec3fd4bd880cc455a47da54f4feca</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923474000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6d555d82e36280900e8de704896e4b3846465655</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8001@18001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myself,master</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923474000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 666-5460</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">41f8ccda22abebaa726191b765c88eae00cd3655</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8006@18006</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> slave</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 6d555d82e36280900e8de704896e4b3846465655</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923474000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6192b1d7512ec3fd4bd880cc455a47da54f4feca</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8002@18002</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> master</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923474095</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 6129-10922</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">d45cce869590400ad7dbda32a825ab0741d0e41e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8005@18005</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> slave</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> e1df9acf919b9234611883d093a7ff4b687a9dee</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923473000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">e1df9acf919b9234611883d093a7ff4b687a9dee</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8003@18003</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> master</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923476100</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 11589-16383</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">aced14e6f490ca573bed0042f185ce22298d6a9d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8007@18007</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> master</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923475097</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0-665</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 5461-6128</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 10923-11588</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 新增Redis的从节点</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 先添加一个从节点8008</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cp redis.conf /www/redis-7.0.8/cluster/8008/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动从节点8008</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; redis-server /www/redis-7.0.8/cluster/8008/redis.conf</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 把从节点8008加入到集群中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; redis-cli --cluster add-node 127.0.0.1:8008 127.0.0.1:8001 -a mkxiaoer</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看集群节点的信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; redis-cli -p 8008</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看节点信息，可以得到现在8008和8007还没关系</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cluster nodes</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 开始绑定8008和8007关系，也就是把8008变成8007的从节点</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 绑定的命令是  CLUSTER REPLICATE  id (主节点的id 8007)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 执行这个命令必须进入到8008的客户端中去执行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; CLUSTER REPLICATE d0b678984c3c6f06b6c4510694d76b8381a45762</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看集群节点信息即可。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cluster nodes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">d45cce869590400ad7dbda32a825ab0741d0e41e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8005@18005</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> slave</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> e1df9acf919b9234611883d093a7ff4b687a9dee</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923789000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">aced14e6f490ca573bed0042f185ce22298d6a9d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8007@18007</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> master</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923789879</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0-665</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 5461-6128</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 10923-11588</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6192b1d7512ec3fd4bd880cc455a47da54f4feca</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8002@18002</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> master</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923787876</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 6129-10922</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6d555d82e36280900e8de704896e4b3846465655</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8001@18001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> master</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923790881</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 666-5460</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">d88b17b0abb2a82dc4350e93abaebe0353228df2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8004@18004</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> slave</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 6192b1d7512ec3fd4bd880cc455a47da54f4feca</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923791883</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">64ab4eb42ae02de188270c114d41d83006122a91</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8008@18008</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myself,slave</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> aced14e6f490ca573bed0042f185ce22298d6a9d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923791000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">e1df9acf919b9234611883d093a7ff4b687a9dee</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8003@18003</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> master</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923791000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 11589-16383</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">41f8ccda22abebaa726191b765c88eae00cd3655</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:8006@18006</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> slave</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 6d555d82e36280900e8de704896e4b3846465655</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1675923790000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connected</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.删除从节点8008</strong></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; redis-cli --cluster del-node 127.0.0.1:8008 bf396950d13769ba4fd4bc5bf4ce7185d24b27e5 -a mkxiaoer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>4.删除主节点</strong>（先移除数据，再删除主节点）</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 重新把8007的占用hash槽进行释放或者说把数据进行迁移，然后在删除</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  redis-cli --cluster reshard 127.0.0.1:8007 -a mkxiaoer --cluster-from d0b678984c3c6f06b6c4510694d76b8381a45762</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">How</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> many</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> slots</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> do</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> you</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> want</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> move</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (from </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 16384</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)? 1000</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># aced14e6f490ca573bed0042f185ce22298d6a9d这里的id是别的masterid</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">What</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> receiving</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> aced14e6f490ca573bed0042f185ce22298d6a9d</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Please</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> enter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> all</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IDs.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  Type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;all&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> all</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> as</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> slots.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  Type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;done&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> once</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> you</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> entered</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> all</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> IDs.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #1: all</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; Do you want to proceed with the proposed reshard plan (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yes/no</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)?  yes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; 然后就会自动去调整和重新分配槽位</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 完整写法,可以取代上面的步骤</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#&gt;redis-cli --cluster reshard 192.168.116.175:8007 --cluster-from d0b678984c3c6f06b6c4510694d76b8381a45762 --cluster-to 60e3755761c9cbdacb183f59e3d6205da5335e86 --cluster-slots 1000 --cluster-yes</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 然后在执行删除即可</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;  redis-cli --cluster del-node 127.0.0.1:8007 d0b678984c3c6f06b6c4510694d76b8381a45762 -a mkxiaoer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-多机集群" tabindex="-1"><a class="header-anchor" href="#_3-多机集群"><span>3）多机集群</span></a></h4><blockquote><p>单机集群：同一个ip，只能使用不同的端口隔离</p><p>多机集群：有不同的ip了，端口就可以一样了</p><p>两者配置就这个区别，使用的时候还是多计部署</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里参考一下小白Debug的思路来捋一遍Redis</p></div><p>问：</p><p>一个商品服务，对外可提供每秒10K次查询，而数据库只能提供每秒5K次查询，上线MySQL会直接崩溃，比如秒杀活动啥的，怎么样才能让MySQL不被压块的同时商品服务又能支持每秒10K次查询呢？</p><p>解：</p><p>加一个中间层：将数据缓存到内存中去来抵挡大部分的查询请求</p><h2 id="优化" tabindex="-1"><a class="header-anchor" href="#优化"><span>优化</span></a></h2><p>数据不一致问题怎么处理？</p>`,249)),t(a,{id:"mermaid-2173",code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCgsSikszkzILEvBKFZ3N6n3YtNFRILIYxcSgxQigxwlDyfM/kp2tngFQEpaZkFmMaMXXDs951T3dNBilxceICK4Dap2tnB5e2UjDUgxr2bPoCiPD7PT3P5i99sX6Ri5PC892Tn82b82THLoUyiDvhOnVBxkAMtFJ4sX/K09nz4GoQ9iAUzH6+ovvZrKanjXP0n++d+Hz3nKe7tz2bvg1JgxGqw4yJdRgkdLA4zAjhMKgauD0Qk60UTPQUnrbNfNq6FBqgKApBPoApNEVXaMgFAD7w8eE="}),s[1]||(s[1]=i("<blockquote><p>上面这个时序图中，服务1因为网络延迟造成将redis已经缓存了新的数据覆盖了旧数据，导致redis数据和数据库数据不一致</p></blockquote><p>对于这种缓存管理，一般做法是在写完数据库后，删除或更新缓存数据。虽然是两个步骤非原子操作可能会存在时间误差，但是这个时间差很小，影响并不大。正常情况下是可以。关键是需要考虑其中缓存服务crash掉了，就是数据库写入操作了，但是准备写入缓存时缓存挂了，会导致数据不一致问题</p><p>方案一：设置较短的缓存时间</p><p>缓存将数据过期时间设置一个比较短的事件，比如设定一分钟，然后每分钟去生成需要被查询的缓存数据。</p><p>实现简单，但是并发量高的情况下，会出现大量数据不一致</p><p>方案二：使用消息队列（或者订阅binlog）</p><p>并发量高而且对于数据一致性要求高，就可以在修改完数据库，发生一条更新缓存的消息，在消费端将获取到的消息将缓存数据更新</p><p>可以保证数据的一致性，但是框架会变笨重，需要另外维护一个消息队列</p><p>方案三：dtm 二阶段消息</p><p>DTM（Distributed Transaction Manager，分布式事务管理器）是一种用于处理分布式事务的工具，DTM会将复杂业务进行拆分多个独立的步骤，每一个步骤通过消息队列来协调，确保要么全部成功要么全部失败</p>",10))])}const c=e(d,[["render",k],["__file","Redis.html.vue"]]),y=JSON.parse('{"path":"/middleware/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis.html","title":"Redis","lang":"zh-CN","frontmatter":{"title":"Redis","order":4,"author":"xiaoxie","date":"2020-01-01T00:00:00.000Z","tag":["db"],"star":true,"description":"Redis理论 官方网站：https://redis.io/ 中文网站：https://www.redis.net.cn/ 01、Redis 简介 Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。 Redis 特点： Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。 Re...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/middleware/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"Redis"}],["meta",{"property":"og:description","content":"Redis理论 官方网站：https://redis.io/ 中文网站：https://www.redis.net.cn/ 01、Redis 简介 Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。 Redis 特点： Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。 Re..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis_struct.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-18T03:55:25.000Z"}],["meta",{"property":"article:author","content":"xiaoxie"}],["meta",{"property":"article:tag","content":"db"}],["meta",{"property":"article:published_time","content":"2020-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-18T03:55:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis\\",\\"image\\":[\\"https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis_struct.png\\",\\"https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis-RDB.png\\",\\"https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis_RDBConf.png\\",\\"https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis_AOFConf.png\\",\\"https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis_Sentinel.png\\",\\"https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/Redis_cluster.png\\"],\\"datePublished\\":\\"2020-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-18T03:55:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaoxie\\"}]}"]]},"headers":[{"level":2,"title":"01、Redis 简介","slug":"_01、redis-简介","link":"#_01、redis-简介","children":[{"level":3,"title":"Redis 优势","slug":"redis-优势","link":"#redis-优势","children":[]},{"level":3,"title":"为什么用redis","slug":"为什么用redis","link":"#为什么用redis","children":[]}]},{"level":2,"title":"02、Redis的下载和安装","slug":"_02、redis的下载和安装","link":"#_02、redis的下载和安装","children":[{"level":3,"title":"1.window下安装Redis服务","slug":"_1-window下安装redis服务","link":"#_1-window下安装redis服务","children":[]},{"level":3,"title":"2.Linux下安装Redis服务","slug":"_2-linux下安装redis服务","link":"#_2-linux下安装redis服务","children":[]},{"level":3,"title":"3.Redis配置文件详解","slug":"_3-redis配置文件详解","link":"#_3-redis配置文件详解","children":[]}]},{"level":2,"title":"03、关于Redis 命令","slug":"_03、关于redis-命令","link":"#_03、关于redis-命令","children":[{"level":3,"title":"a.Key命令","slug":"a-key命令","link":"#a-key命令","children":[]},{"level":3,"title":"b.服务端命令","slug":"b-服务端命令","link":"#b-服务端命令","children":[]}]},{"level":2,"title":"04、数据结构","slug":"_04、数据结构","link":"#_04、数据结构","children":[{"level":3,"title":"1. 字符串String","slug":"_1-字符串string","link":"#_1-字符串string","children":[]},{"level":3,"title":"2.列表List","slug":"_2-列表list","link":"#_2-列表list","children":[]},{"level":3,"title":"3.哈希表hash","slug":"_3-哈希表hash","link":"#_3-哈希表hash","children":[]},{"level":3,"title":"4.集合Set","slug":"_4-集合set","link":"#_4-集合set","children":[]},{"level":3,"title":"5.有序集合Zset","slug":"_5-有序集合zset","link":"#_5-有序集合zset","children":[]},{"level":3,"title":"扩展","slug":"扩展","link":"#扩展","children":[]}]},{"level":2,"title":"05、Redis持久化","slug":"_05、redis持久化","link":"#_05、redis持久化","children":[{"level":3,"title":"RDB-快照模式","slug":"rdb-快照模式","link":"#rdb-快照模式","children":[]},{"level":3,"title":"AOF-日志模式","slug":"aof-日志模式","link":"#aof-日志模式","children":[]},{"level":3,"title":"AOF和RDB对比","slug":"aof和rdb对比","link":"#aof和rdb对比","children":[]}]},{"level":2,"title":"06、事务","slug":"_06、事务","link":"#_06、事务","children":[]},{"level":2,"title":"07、Redis主从复制","slug":"_07、redis主从复制","link":"#_07、redis主从复制","children":[{"level":3,"title":"好处","slug":"好处","link":"#好处","children":[]},{"level":3,"title":"主从模式实现","slug":"主从模式实现","link":"#主从模式实现","children":[]}]},{"level":2,"title":"08、Redis哨兵","slug":"_08、redis哨兵","link":"#_08、redis哨兵","children":[{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":3,"title":"哨兵的配置和使用","slug":"哨兵的配置和使用","link":"#哨兵的配置和使用","children":[]},{"level":3,"title":"哨兵模式应用","slug":"哨兵模式应用","link":"#哨兵模式应用","children":[]}]},{"level":2,"title":"09、Redis集群","slug":"_09、redis集群","link":"#_09、redis集群","children":[{"level":3,"title":"原理","slug":"原理-1","link":"#原理-1","children":[]},{"level":3,"title":"组成","slug":"组成","link":"#组成","children":[]},{"level":3,"title":"部署集群","slug":"部署集群","link":"#部署集群","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"优化","slug":"优化","link":"#优化","children":[]}],"git":{"createdTime":1734622519000,"updatedTime":1742270125000,"contributors":[{"name":"xiaoxie01","username":"xiaoxie01","email":"xie18115@gmail.com","commits":1,"url":"https://github.com/xiaoxie01"},{"name":"xiaoxie001","username":"xiaoxie001","email":"xie18115@outlook.com","commits":5,"url":"https://github.com/xiaoxie001"}]},"readingTime":{"minutes":49,"words":14699},"filePathRelative":"middleware/数据库/Redis.md","localizedDate":"2020年1月1日","autoDesc":true,"excerpt":"\\n<p>官方网站：<a href=\\"https://redis.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://redis.io/</a></p>\\n<p>中文网站：<a href=\\"https://www.redis.net.cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.redis.net.cn/</a></p>\\n<h2>01、Redis 简介</h2>\\n<p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的<code>key-value</code>数据库。</p>"}');export{c as comp,y as data};
