import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as n,o as a}from"./app-DIJDtupu.js";const l={};function o(g,t){return a(),r("div",null,t[0]||(t[0]=[n('<h1 id="常用包和第三方包介绍" tabindex="-1"><a class="header-anchor" href="#常用包和第三方包介绍"><span>常用包和第三方包介绍</span></a></h1><ul><li>包 <ul><li><a href="#%E5%B8%B8%E7%94%A8%E5%8C%85">常用官方包说明</a></li><li><a href="#%E4%B8%89%E6%96%B9%E5%8C%85">常用第三方包说明</a></li><li><a href="#%E6%A1%86%E6%9E%B6">常用框架</a></li><li><a href="#%E5%AE%8C%E6%95%B4%E5%8C%85">完整标准库列表</a></li><li><a href="#%E4%BC%98%E7%A7%80%E7%9A%84%E5%BC%80%E6%BA%90%E5%BA%93">优秀的第三方库</a><ul><li><a href="#%E9%9F%B3%E9%A2%91%E5%92%8C%E9%9F%B3%E4%B9%90">音频和音乐</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构:Go中的通用数据结构和算法</a></li><li><a href="#%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F">分布式系统:Go中的通用数据结构和算法</a></li><li><a href="#%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6">电子邮件:实现电子邮件创建和发送的库和工具</a></li><li><a href="#%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">嵌入式脚本语言:在go代码中嵌入其他语言</a></li><li><a href="#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">错误处理</a></li><li><a href="#%E6%96%87%E4%BB%B6">处理文件和文件系统的库</a></li><li><a href="#%E9%87%91%E8%9E%8D">金融:会计和财务软件包</a></li><li><a href="#%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91">游戏开发:游戏开发相关库</a></li><li><a href="#%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE">地理位置:地理相关的位置信息和工具库</a></li><li><a href="#%E7%BC%96%E8%AF%91%E5%99%A8">编译器相关:转到其他语言</a></li><li><a href="#Goroutines">Goroutines:用于管理和使用Goroutines的工具</a></li><li><a href="#%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2">图形界面:用于构建GUI应用程序的库</a></li><li><a href="#%E5%9B%BE%E7%89%87">图片:用于处理图像的库</a></li><li><a href="#%E7%89%A9%E8%81%94%E7%BD%91">物联网:物联网设备编程库</a></li><li><a href="#JSON%E6%A0%BC%E5%BC%8F">JSON格式:用于处理JSON的库</a></li><li><a href="#%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0">机器学习:常用机器学习库</a></li><li><a href="#%E5%BE%AE%E8%BD%AF%E5%8A%9E%E5%85%AC%E8%BD%AF%E4%BB%B6">微软办公软件</a></li><li><a href="#%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86">自然语言处理</a></li><li><a href="#%E7%BD%91%E7%BB%9C">网络:与网络各层配合使用的库</a></li><li><a href="#%E8%A7%86%E9%A2%91">视频:用于处理视频的库</a></li></ul></li></ul></li></ul><h2 id="常用包" tabindex="-1"><a class="header-anchor" href="#常用包"><span>常用包</span></a></h2><p><a name="常用包"></a> <a name="常用包"></a></p><table><thead><tr><th style="text-align:center;">常用包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">fmt</td><td style="text-align:center;">实现格式化的输入输出操作，其中的fmt.Printf()和fmt.Println()是开发者使用最为频繁的函数。</td></tr><tr><td style="text-align:center;">io</td><td style="text-align:center;">实现了一系列非平台相关的IO相关接口和实现，比如提供了对os中系统相关的IO功能的封装。我们在进行流式读写（比如读写文件）时，通常会用到该包。</td></tr><tr><td style="text-align:center;">bufio</td><td style="text-align:center;">它在io的基础上提供了缓存功能。在具备了缓存功能后， bufio可以比较方便地提供ReadLine之类的操作。</td></tr><tr><td style="text-align:center;">strconv</td><td style="text-align:center;">提供字符串与基本数据类型互转的能力。</td></tr><tr><td style="text-align:center;">os</td><td style="text-align:center;">本包提供了对操作系统功能的非平台相关访问接口。接口为Unix风格。提供的功能包括文件操作、进程管理、信号和用户账号等。</td></tr><tr><td style="text-align:center;">sync</td><td style="text-align:center;">它提供了基本的同步原语。在多个goroutine访问共享资源的时候，需要使用sync中提供的锁机制。</td></tr><tr><td style="text-align:center;">flag</td><td style="text-align:center;">它提供命令行参数的规则定义和传入参数解析的功能。绝大部分的命令行程序都需要用到这个包。</td></tr><tr><td style="text-align:center;">encoding/json</td><td style="text-align:center;">JSON目前广泛用做网络程序中的通信格式。本包提供了对JSON的基本支持，比如从一个对象序列化为JSON字符串，或者从JSON字符串反序列化出一个具体的对象等。</td></tr><tr><td style="text-align:center;">http</td><td style="text-align:center;">通过http包，只需要数行代码，即可实现一个爬虫或者一个Web服务器，这在传统语言中是无法想象的。</td></tr></tbody></table><p><br> <br><a name="三方包"></a> <a name="三方包"></a></p><h2 id="常用第三方包" tabindex="-1"><a class="header-anchor" href="#常用第三方包"><span>常用第三方包</span></a></h2><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">地址</th></tr></thead><tbody><tr><td style="text-align:center;">数据库操作</td><td style="text-align:center;"><a href="https://github.com/jinzhu/gorm" target="_blank" rel="noopener noreferrer">github.com/jinzhu/gorm</a> <a href="https://github.com/go-xorm/xorm" target="_blank" rel="noopener noreferrer">github.com/go-xorm/xorm</a></td></tr><tr><td style="text-align:center;">搜索es</td><td style="text-align:center;"><a href="https://github.com/olivere/elastic" target="_blank" rel="noopener noreferrer">github.com/olivere/elastic</a></td></tr><tr><td style="text-align:center;">rocketmq操作</td><td style="text-align:center;"><a href="https://github.com/apache/rocketmq-client-go/v2" target="_blank" rel="noopener noreferrer">github.com/apache/rocketmq-client-go/v2</a></td></tr><tr><td style="text-align:center;">rabbitmq 操作</td><td style="text-align:center;"><a href="https://github.com/streadway/amqp" target="_blank" rel="noopener noreferrer">github.com/streadway/amqp</a></td></tr><tr><td style="text-align:center;">redis 操作</td><td style="text-align:center;"><a href="https://github.com/go-redis/redis" target="_blank" rel="noopener noreferrer">github.com/go-redis/redis</a></td></tr><tr><td style="text-align:center;">etcd 操作</td><td style="text-align:center;"><a href="https://pkg.go.dev/go.etcd.io/etcd/clientv3" target="_blank" rel="noopener noreferrer">github.com/coreos/etcd/clientv3</a></td></tr><tr><td style="text-align:center;">kafka</td><td style="text-align:center;"><a href="https://github.com/Shopify/sarama" target="_blank" rel="noopener noreferrer">https://github.com/Shopify/sarama</a> <a href="https://github.com/bsm/sarama-cluster" target="_blank" rel="noopener noreferrer">https://github.com/bsm/sarama-cluster</a></td></tr><tr><td style="text-align:center;">excel 操作</td><td style="text-align:center;"><a href="https://github.com/360EntSecGroup-Skylar/excelize" target="_blank" rel="noopener noreferrer">github.com/360EntSecGroup-Skylar/excelize</a></td></tr><tr><td style="text-align:center;">ppt 操作</td><td style="text-align:center;"><a href="https://golang.org/x/tools/cmd/present" target="_blank" rel="noopener noreferrer">golang.org/x/tools/cmd/present</a></td></tr><tr><td style="text-align:center;">go-svg 操作</td><td style="text-align:center;"><a href="https://github.com/ajstarks/svgo" target="_blank" rel="noopener noreferrer">https://github.com/ajstarks/svgo</a></td></tr><tr><td style="text-align:center;">go 布隆过滤器实现</td><td style="text-align:center;"><a href="https://github.com/AndreasBriese/bbloom" target="_blank" rel="noopener noreferrer">https://github.com/AndreasBriese/bbloom</a></td></tr><tr><td style="text-align:center;">json相关</td><td style="text-align:center;"><a href="https://github.com/bitly/go-simplejson" target="_blank" rel="noopener noreferrer">https://github.com/bitly/go-simplejson</a></td></tr><tr><td style="text-align:center;">LRU Cache实现</td><td style="text-align:center;"><a href="https://github.com/bluele/gcache" target="_blank" rel="noopener noreferrer">https://github.com/bluele/gcache </a> <a href="https://github.com/hashicorp/golang-lru" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/golang-lru </a></td></tr><tr><td style="text-align:center;">go运行时函数替换</td><td style="text-align:center;"><a href="https://github.com/bouk/monkey" target="_blank" rel="noopener noreferrer">https://github.com/bouk/monkey </a></td></tr><tr><td style="text-align:center;">toml</td><td style="text-align:center;"><a href="https://github.com/toml-lang/toml" target="_blank" rel="noopener noreferrer">https://github.com/toml-lang/toml </a> <a href="https://github.com/naoina/toml" target="_blank" rel="noopener noreferrer">https://github.com/naoina/toml </a></td></tr><tr><td style="text-align:center;">yaml</td><td style="text-align:center;"><a href="https://github.com/go-yaml/yaml" target="_blank" rel="noopener noreferrer">https://github.com/go-yaml/yaml </a></td></tr><tr><td style="text-align:center;">viper</td><td style="text-align:center;"><a href="https://github.com/spf13/viper" target="_blank" rel="noopener noreferrer">https://github.com/spf13/viper </a></td></tr><tr><td style="text-align:center;">go key/value存储</td><td style="text-align:center;"><a href="https://github.com/etcd-io/bbolt" target="_blank" rel="noopener noreferrer">https://github.com/etcd-io/bbolt </a></td></tr><tr><td style="text-align:center;">基于ringbuffer的无锁golang workpool</td><td style="text-align:center;"><a href="https://github.com/Dai0522/workpool" target="_blank" rel="noopener noreferrer">https://github.com/Dai0522/workpool </a></td></tr><tr><td style="text-align:center;">轻量级的协程池</td><td style="text-align:center;"><a href="https://github.com/ivpusic/grpool" target="_blank" rel="noopener noreferrer">https://github.com/ivpusic/grpool </a></td></tr><tr><td style="text-align:center;">打印go的详细数据结构</td><td style="text-align:center;"><a href="https://github.com/davecgh/go-spew" target="_blank" rel="noopener noreferrer">https://github.com/davecgh/go-spew </a></td></tr><tr><td style="text-align:center;">基于ringbuffer实现的队列</td><td style="text-align:center;"><a href="https://github.com/eapache/queue" target="_blank" rel="noopener noreferrer">https://github.com/eapache/queue </a></td></tr><tr><td style="text-align:center;">拼音</td><td style="text-align:center;"><a href="https://github.com/go-ego/gpy" target="_blank" rel="noopener noreferrer">https://github.com/go-ego/gpy </a></td></tr><tr><td style="text-align:center;">分词</td><td style="text-align:center;"><a href="https://github.com/go-ego/gse" target="_blank" rel="noopener noreferrer">https://github.com/go-ego/gse </a></td></tr><tr><td style="text-align:center;">搜索</td><td style="text-align:center;"><a href="https://github.com/go-ego/riot" target="_blank" rel="noopener noreferrer">https://github.com/go-ego/riot </a></td></tr><tr><td style="text-align:center;">windows COM</td><td style="text-align:center;"><a href="https://github.com/go-ego/cedar" target="_blank" rel="noopener noreferrer">https://github.com/go-ego/cedar </a></td></tr><tr><td style="text-align:center;">session</td><td style="text-align:center;"><a href="https://github.com/gorilla/sessions" target="_blank" rel="noopener noreferrer">https://github.com/gorilla/sessions </a></td></tr><tr><td style="text-align:center;">路由</td><td style="text-align:center;"><a href="https://github.com/gorilla/mux" target="_blank" rel="noopener noreferrer">https://github.com/gorilla/mux </a></td></tr><tr><td style="text-align:center;">websocket</td><td style="text-align:center;"><a href="https://github.com/gorilla/websocket" target="_blank" rel="noopener noreferrer">https://github.com/gorilla/websocket </a></td></tr><tr><td style="text-align:center;">Action handler</td><td style="text-align:center;"><a href="https://github.com/gorilla/handlers" target="_blank" rel="noopener noreferrer">https://github.com/gorilla/handlers </a></td></tr><tr><td style="text-align:center;">csrf</td><td style="text-align:center;"><a href="https://github.com/gorilla/csrf" target="_blank" rel="noopener noreferrer">https://github.com/gorilla/csrf </a></td></tr><tr><td style="text-align:center;">context</td><td style="text-align:center;"><a href="https://github.com/gorilla/context" target="_blank" rel="noopener noreferrer">https://github.com/gorilla/context </a></td></tr><tr><td style="text-align:center;">过滤html标签</td><td style="text-align:center;"><a href="https://github.com/grokify/html-strip-tags-go" target="_blank" rel="noopener noreferrer">https://github.com/grokify/html-strip-tags-go </a></td></tr><tr><td style="text-align:center;">可配置的HTML标签过滤</td><td style="text-align:center;"><a href="https://github.com/microcosm-cc/bluemonday" target="_blank" rel="noopener noreferrer">https://github.com/microcosm-cc/bluemonday </a></td></tr><tr><td style="text-align:center;">根据IP获取地理位置信息</td><td style="text-align:center;"><a href="https://github.com/ipipdotnet/ipdb-go" target="_blank" rel="noopener noreferrer">https://github.com/ipipdotnet/ipdb-go </a></td></tr><tr><td style="text-align:center;">html转markdown</td><td style="text-align:center;"><a href="https://github.com/jaytaylor/html2text" target="_blank" rel="noopener noreferrer">https://github.com/jaytaylor/html2text </a></td></tr><tr><td style="text-align:center;">goroutine 本地存储</td><td style="text-align:center;"><a href="https://github.com/jtolds/gls" target="_blank" rel="noopener noreferrer">https://github.com/jtolds/gls </a></td></tr><tr><td style="text-align:center;">彩色输出</td><td style="text-align:center;"><a href="https://github.com/mgutz/ansi" target="_blank" rel="noopener noreferrer">https://github.com/mgutz/ansi</a></td></tr><tr><td style="text-align:center;">表格打印</td><td style="text-align:center;"><a href="https://github.com/olekukonko/tablewriter" target="_blank" rel="noopener noreferrer">https://github.com/olekukonko/tablewriter</a></td></tr><tr><td style="text-align:center;">reflect 更高效的反射API</td><td style="text-align:center;"><a href="https://github.com/modern-go/reflect2" target="_blank" rel="noopener noreferrer">https://github.com/modern-go/reflect2</a></td></tr><tr><td style="text-align:center;">msgfmt (格式化字符串，将%更换为变量名)</td><td style="text-align:center;"><a href="https://github.com/modern-go/msgfmt" target="_blank" rel="noopener noreferrer">https://github.com/modern-go/msgfmt</a></td></tr><tr><td style="text-align:center;">可取消的goroutine</td><td style="text-align:center;"><a href="https://github.com/modern-go/concurrent" target="_blank" rel="noopener noreferrer">https://github.com/modern-go/concurrent</a></td></tr><tr><td style="text-align:center;">深度拷贝</td><td style="text-align:center;"><a href="https://github.com/mohae/deepcopy" target="_blank" rel="noopener noreferrer">https://github.com/mohae/deepcopy</a></td></tr><tr><td style="text-align:center;">安全的类型转换包</td><td style="text-align:center;"><a href="https://github.com/spf13/cast" target="_blank" rel="noopener noreferrer">https://github.com/spf13/cast</a></td></tr><tr><td style="text-align:center;">从文本中提取链接</td><td style="text-align:center;"><a href="https://github.com/mvdan/xurls" target="_blank" rel="noopener noreferrer">https://github.com/mvdan/xurls</a></td></tr><tr><td style="text-align:center;">字符串格式处理（驼峰转换）</td><td style="text-align:center;"><a href="https://godoc.org/github.com/naoina/go-stringutil" target="_blank" rel="noopener noreferrer">https://godoc.org/github.com/naoina/go-stringutil</a></td></tr><tr><td style="text-align:center;">文本diff实现</td><td style="text-align:center;"><a href="https://github.com/pmezard/go-difflib" target="_blank" rel="noopener noreferrer">https://github.com/pmezard/go-difflib</a></td></tr><tr><td style="text-align:center;">uuid相关</td><td style="text-align:center;"><a href="https://github.com/satori/go.uuid" target="_blank" rel="noopener noreferrer">https://github.com/satori/go.uuid</a> <a href="https://github.com/snluu/uuid" target="_blank" rel="noopener noreferrer">https://github.com/snluu/uuid</a></td></tr><tr><td style="text-align:center;">去除UTF编码中的BOM</td><td style="text-align:center;"><a href="https://github.com/ssor/bom" target="_blank" rel="noopener noreferrer">https://github.com/ssor/bom</a></td></tr><tr><td style="text-align:center;">图片缩放</td><td style="text-align:center;"><a href="https://github.com/nfnt/resize" target="_blank" rel="noopener noreferrer">https://github.com/nfnt/resize</a></td></tr><tr><td style="text-align:center;">生成 mock server</td><td style="text-align:center;"><a href="https://github.com/otokaze/mock" target="_blank" rel="noopener noreferrer">https://github.com/otokaze/mock</a></td></tr><tr><td style="text-align:center;">go 性能上报到influxdb</td><td style="text-align:center;"><a href="https://github.com/rcrowley/go-metrics" target="_blank" rel="noopener noreferrer">https://github.com/rcrowley/go-metrics</a></td></tr><tr><td style="text-align:center;">go zookeeper客户端</td><td style="text-align:center;"><a href="https://github.com/samuel/go-zookeeper" target="_blank" rel="noopener noreferrer">https://github.com/samuel/go-zookeeper</a></td></tr><tr><td style="text-align:center;">go thrift</td><td style="text-align:center;"><a href="https://github.com/samuel/go-thrift" target="_blank" rel="noopener noreferrer">https://github.com/samuel/go-thrift</a></td></tr><tr><td style="text-align:center;">MQTT 客户端</td><td style="text-align:center;"><a href="https://github.com/shirou/mqttcli" target="_blank" rel="noopener noreferrer">https://github.com/shirou/mqttcli</a></td></tr><tr><td style="text-align:center;">hbase</td><td style="text-align:center;"><a href="https://github.com/tsuna/gohbase" target="_blank" rel="noopener noreferrer">https://github.com/tsuna/gohbase</a></td></tr><tr><td style="text-align:center;">go 性能上报到influxdb</td><td style="text-align:center;"><a href="https://github.com/rcrowley/go-metrics" target="_blank" rel="noopener noreferrer">https://github.com/rcrowley/go-metrics</a></td></tr><tr><td style="text-align:center;">go 性能上报到prometheus</td><td style="text-align:center;"><a href="https://github.com/deathowl/go-metrics-prometheus" target="_blank" rel="noopener noreferrer">https://github.com/deathowl/go-metrics-prometheus</a></td></tr><tr><td style="text-align:center;">ps utils</td><td style="text-align:center;"><a href="https://github.com/shirou/gopsutil" target="_blank" rel="noopener noreferrer">https://github.com/shirou/gopsutil</a></td></tr><tr><td style="text-align:center;">小数处理</td><td style="text-align:center;"><a href="https://github.com/shopspring/decimal" target="_blank" rel="noopener noreferrer">https://github.com/shopspring/decimal</a></td></tr><tr><td style="text-align:center;">结构化日志处理(json)</td><td style="text-align:center;"><a href="https://github.com/sirupsen/logrus" target="_blank" rel="noopener noreferrer">https://github.com/sirupsen/logrus</a></td></tr><tr><td style="text-align:center;">命令行程序框架 cli</td><td style="text-align:center;"><a href="https://github.com/urfave/cli" target="_blank" rel="noopener noreferrer">https://github.com/urfave/cli</a></td></tr><tr><td style="text-align:center;">命令行程序框架 cobra</td><td style="text-align:center;"><a href="https://github.com/spf13/cobra" target="_blank" rel="noopener noreferrer">https://github.com/spf13/cobra</a></td></tr></tbody></table><p><br> <br><a name="框架"></a> <a name="框架"></a></p><h2 id="必看项目" tabindex="-1"><a class="header-anchor" href="#必看项目"><span>必看项目</span></a></h2><table><thead><tr><th style="text-align:center;">项目</th><th style="text-align:center;">地址</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">gin</td><td style="text-align:center;"><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener noreferrer">github.com/gin-gonic/gin</a></td><td style="text-align:center;">轻量级web框架，很多公司都是基于它进行魔改</td></tr><tr><td style="text-align:center;">beego</td><td style="text-align:center;"><a href="https://github.com/beego/beego" target="_blank" rel="noopener noreferrer">github.com/beego/beego</a></td><td style="text-align:center;">也是web框架，比较全能</td></tr><tr><td style="text-align:center;">kratos</td><td style="text-align:center;"><a href="https://github.com/go-kratos/kratos" target="_blank" rel="noopener noreferrer">github.com/go-kratos/kratos</a></td><td style="text-align:center;">bilibili开源的微服务框架，b站出品必属于精品</td></tr><tr><td style="text-align:center;">TiDB</td><td style="text-align:center;"><a href="https://github.com/pingcap/tidb" target="_blank" rel="noopener noreferrer">github.com/pingcap/tidb</a></td><td style="text-align:center;">见识过mysql性能瓶颈之后你会想要选择的一款数据库</td></tr></tbody></table><p><br> <br><a name="完整包"></a> <a name="完整包"></a></p><h2 id="完整标准库列表" tabindex="-1"><a class="header-anchor" href="#完整标准库列表"><span>完整标准库列表</span></a></h2><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">子包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">bufio</td><td style="text-align:center;">bytes</td><td style="text-align:center;">提供了对字节切片操作的函数</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">crypto</td><td style="text-align:center;">收集了常见的加密常数</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">errors</td><td style="text-align:center;">实现了操作错误的函数</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">Expvar</td><td style="text-align:center;">为公共变量提供了一个标准的接口，如服务器中的运算计数器</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">flag</td><td style="text-align:center;">实现了命令行标记解析</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">fmt</td><td style="text-align:center;">实现了格式化输入输出</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">hash</td><td style="text-align:center;">提供了哈希函数接口</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">html</td><td style="text-align:center;">实现了一个HTML5兼容的分词器和解析器</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">image</td><td style="text-align:center;">实现了一个基本的二维图像库</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">io</td><td style="text-align:center;">提供了对I/O原语的基本接口</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">log</td><td style="text-align:center;">它是一个简单的记录包，提供最基本的日志功能</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">math</td><td style="text-align:center;">提供了一些基本的常量和数学函数</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">mine</td><td style="text-align:center;">实现了部分的MIME规范</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">net</td><td style="text-align:center;">提供了一个对UNIX网络套接字的可移植接口，包括TCP/IP、 UDP域名解析和UNIX域套接字</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">os</td><td style="text-align:center;">为操作系统功能实现了一个平台无关的接口</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">path</td><td style="text-align:center;">实现了对斜线分割的文件名路径的操作</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">reflect</td><td style="text-align:center;">实现了运行时反射，允许一个程序以任意类型操作对象</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">regexp</td><td style="text-align:center;">实现了一个简单的正则表达式库</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">runtime</td><td style="text-align:center;">包含与Go运行时系统交互的操作，如控制goroutine的函数</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">sort</td><td style="text-align:center;">提供对集合排序的基础函数集</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">strconv</td><td style="text-align:center;">实现了在基本数据类型和字符串之间的转换</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">strings</td><td style="text-align:center;">实现了操作字符串的简单函数</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">sync</td><td style="text-align:center;">提供了基本的同步机制，如互斥锁</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">syscall</td><td style="text-align:center;">包含一个低级的操作系统原语的接口</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">testing</td><td style="text-align:center;">提供对自动测试Go包的支持</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">time</td><td style="text-align:center;">提供测量和显示时间的功能</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">unicode</td><td style="text-align:center;">Unicode编码相关的基础函数</td></tr><tr><td style="text-align:center;">archive</td><td style="text-align:center;">tar</td><td style="text-align:center;">实现对tar压缩文档的访问</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">zip</td><td style="text-align:center;">提供对ZIP压缩文档的读和写支持</td></tr><tr><td style="text-align:center;">compress</td><td style="text-align:center;">bzip2</td><td style="text-align:center;">实现了bzip2解压缩</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">flate</td><td style="text-align:center;">实现了RFC 1951中所定义的DEFLATE压缩数据格式</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">gzip</td><td style="text-align:center;">实现了RFC 1951中所定义的gzip格式压缩文件的读和写</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">lzw</td><td style="text-align:center;">实现了 Lempel-Ziv-Welch编码格式的压缩的数据格式</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">zlib</td><td style="text-align:center;">实现了RFC 1950中所定义的zlib格式压缩数据的读和写</td></tr><tr><td style="text-align:center;">container</td><td style="text-align:center;">heap</td><td style="text-align:center;">提供了实现heap.Interface接口的任何类型的堆操作</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">lsit</td><td style="text-align:center;">实现了一个双链表</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">ring</td><td style="text-align:center;">实现了对循环链表的操作</td></tr><tr><td style="text-align:center;">crypto</td><td style="text-align:center;">aes</td><td style="text-align:center;">实现了AES加密（以前的Rijndael）</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">cipher</td><td style="text-align:center;">实现了标准的密码块模式，该模式可包装进低级的块加密实现中</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">des</td><td style="text-align:center;">实现了数据加密标准（ Data Encryption Standard，DES）和三重数据加密算法（ TripleData Encryption Algorithm， TDEA）</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">dsa</td><td style="text-align:center;">实现了FIPS 186-3所定义的数据签名算法（ Digital Signature Algorithm）</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">ecdsa</td><td style="text-align:center;">实现了FIPS 186-3所定义的椭圆曲线数据签名算法（ Elliptic Curve Digital SignatureAlgorithm）</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">elliptic</td><td style="text-align:center;">实现了素数域上几个标准的椭圆曲线</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">hmac</td><td style="text-align:center;">实现了键控哈希消息身份验证码（ Keyed-Hash Message Authentication Code，HMAC）</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">md5</td><td style="text-align:center;">实现了RFC 1321中所定义的MD5哈希算法</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">rand</td><td style="text-align:center;">实现了一个加密安全的伪随机数生成器</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">rc4</td><td style="text-align:center;">实现了RC4加密，其定义见Bruce Schneier的应用密码学（ Applied Cryptography）</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">rsa</td><td style="text-align:center;">实现了PKCS#1中所定义的RSA加密</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">sha1</td><td style="text-align:center;">实现了RFC 3174中所定义的SHA1哈希算法</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">sha256</td><td style="text-align:center;">实现了FIPS 180-2中所定义的SHA224和SHA256哈希算法</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">sha512</td><td style="text-align:center;">实现了FIPS 180-2中所定义的SHA384和SHA512哈希算法</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">subtle</td><td style="text-align:center;">实现了一些有用的加密函数，但需要仔细考虑以便正确应用它们</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">tls</td><td style="text-align:center;">部分实现了RFC 4346所定义的TLS 1.1协议</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">x509</td><td style="text-align:center;">可解析X.509编码的键值和证书</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">x509/pkix</td><td style="text-align:center;">包含用于对X.509证书、 CRL和OCSP的ASN.1解析和序列化的共享的、低级的结构</td></tr><tr><td style="text-align:center;">database</td><td style="text-align:center;">sql</td><td style="text-align:center;">围绕SQL提供了一个通用的接口</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">sql/driver</td><td style="text-align:center;">定义了数据库驱动所需实现的接口，同sql包的使用方式</td></tr><tr><td style="text-align:center;">debug</td><td style="text-align:center;">dwarf</td><td style="text-align:center;">提供了对从可执行文件加载的DWARF调试信息的访问，这个包对于实现Go语言的调试器非常有价值</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">elf</td><td style="text-align:center;">实现了对ELF对象文件的访问。 ELF是一种常见的二进制可执行文件和共享库的文件格式。 Linux采用了ELF格式</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">gosym</td><td style="text-align:center;">访问Go语言二进制程序中的调试信息。对于可视化调试很有价值</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">macho</td><td style="text-align:center;">实现了对<a href="http://developer.apple.com/mac/library/documentation/DeveloperTools/Conceptual/MachORuntime/Reference/reference.html" target="_blank" rel="noopener noreferrer">Mach-O对象文件</a>的访问</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">pe</td><td style="text-align:center;">实现了对PE（ Microsoft Windows Portable Executable）文件的访问</td></tr><tr><td style="text-align:center;">encoding</td><td style="text-align:center;">ascii85</td><td style="text-align:center;">实现了ascii85数据编码，用于btoa工具和Adobe’s PostScript以及PDF文档格式</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">asn1</td><td style="text-align:center;">实现了解析DER编码的ASN.1数据结构，其定义见ITU-T Rec X.690</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">base32</td><td style="text-align:center;">实现了RFC 4648中所定义的base32编码</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">base64</td><td style="text-align:center;">实现了RFC 4648中所定义的base64编码</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">binary</td><td style="text-align:center;">实现了在无符号整数值和字节串之间的转化，以及对固定尺寸值的读和写</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">csv</td><td style="text-align:center;">可读和写由逗号分割的数值（ csv）文件</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">gob</td><td style="text-align:center;">管理gob流——在编码器（发送者）和解码器（接收者）之间进行二进制值交换</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">hex</td><td style="text-align:center;">实现了十六进制的编码和解码</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">json</td><td style="text-align:center;">实现了定义于RFC 4627中的JSON对象的编码和解码</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">pem</td><td style="text-align:center;">实现了PEM（ Privacy Enhanced Mail）数据编码</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">xml</td><td style="text-align:center;">实现了一个简单的可理解XML名字空间的XML 1.0解析器</td></tr><tr><td style="text-align:center;">go</td><td style="text-align:center;">ast</td><td style="text-align:center;">声明了用于展示Go包中的语法树类型</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">build</td><td style="text-align:center;">提供了构建Go包的工具</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">doc</td><td style="text-align:center;">从一个Go AST（抽象语法树）中提取源代码文档</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">parser</td><td style="text-align:center;">实现了一个Go源文件解析器</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">printer</td><td style="text-align:center;">实现了对AST（抽象语法树）的打印</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">scanner</td><td style="text-align:center;">实现了一个Go源代码文本的扫描器</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">token</td><td style="text-align:center;">定义了代表Go编程语言中词法标记以及基本操作标记（ printing、 predicates）的常量</td></tr><tr><td style="text-align:center;">hash</td><td style="text-align:center;">adler32</td><td style="text-align:center;">实现了Adler-32校验和</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">crc32</td><td style="text-align:center;">实现了32位的循环冗余校验或CRC-32校验和</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">crc64</td><td style="text-align:center;">实现了64位的循环冗余校验或CRC-64校验和</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">fnv</td><td style="text-align:center;">实现了Glenn Fowler、 Landon Curt Noll和Phong Vo所创建的FNV-1和FNV-1a未加密哈希函数</td></tr><tr><td style="text-align:center;">html</td><td style="text-align:center;">template</td><td style="text-align:center;">它自动构建HTML输出，并可防止代码注入</td></tr><tr><td style="text-align:center;">image</td><td style="text-align:center;">color</td><td style="text-align:center;">实现了一个基本的颜色库</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">draw</td><td style="text-align:center;">提供一些做图函数</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">gif</td><td style="text-align:center;">实现了一个GIF图像解码器</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">jpeg</td><td style="text-align:center;">实现了一个JPEG图像解码器和编码器</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">png</td><td style="text-align:center;">实现了一个PNG图像解码器和编码器</td></tr><tr><td style="text-align:center;">index</td><td style="text-align:center;">suffixarray</td><td style="text-align:center;">通过构建内存索引实现的高速字符串匹配查找算法</td></tr><tr><td style="text-align:center;">io</td><td style="text-align:center;">ioutil</td><td style="text-align:center;">实现了一些实用的I/O函数</td></tr><tr><td style="text-align:center;">log</td><td style="text-align:center;">syslog</td><td style="text-align:center;">提供了对系统日志服务的简单接口</td></tr><tr><td style="text-align:center;">math</td><td style="text-align:center;">big</td><td style="text-align:center;">实现了多精度的算术运算（大数）</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">cmplx</td><td style="text-align:center;">为复数提供了基本的常量和数学函数</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">rand</td><td style="text-align:center;">实现了伪随机数生成器</td></tr><tr><td style="text-align:center;">mime</td><td style="text-align:center;">multipart</td><td style="text-align:center;">实现了在RFC 2046中定义的MIME多个部分的解析</td></tr><tr><td style="text-align:center;">net</td><td style="text-align:center;">http</td><td style="text-align:center;">提供了HTTP客户端和服务器的实现</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">mail</td><td style="text-align:center;">实现了对邮件消息的解析</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">rpc</td><td style="text-align:center;">提供了对一个来自网络或其他I/O连接的对象可导出的方法的访问</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">smtp</td><td style="text-align:center;">实现了定义于RFC 5321中的简单邮件传输协议（ Simple Mail Transfer Protocol)</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">textproto</td><td style="text-align:center;">实现了在HTTP、 NNTP和SMTP中基于文本的通用的请求/响应协议</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">url</td><td style="text-align:center;">解析URL并实现查询转义</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">http/cgi</td><td style="text-align:center;">实现了定义于RFC 3875中的CGI（通用网关接口）</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">http/fcgi</td><td style="text-align:center;">实现了FastCGI协议</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">http/httptest</td><td style="text-align:center;">提供了一些HTTP测试应用</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">http/httputil</td><td style="text-align:center;">提供了一些HTTP应用函数，这些是对net/http包中的东西的补充，只不过相对不太常用</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">http/pprof</td><td style="text-align:center;">通过其HTTP服务器运行时提供性能测试数据，该数据的格式正是pprof可视化工具需要的</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">rpc/jsonrpc</td><td style="text-align:center;">为rpc包实现了一个JSON-RPC ClientCodec和ServerCodec</td></tr><tr><td style="text-align:center;">os</td><td style="text-align:center;">exec</td><td style="text-align:center;">可运行外部命令</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">user</td><td style="text-align:center;">通过名称和id进行用户账户检查</td></tr><tr><td style="text-align:center;">path</td><td style="text-align:center;">filepath</td><td style="text-align:center;">实现了以与目标操作系统定义文件路径相兼容的方式处理文件名路径</td></tr><tr><td style="text-align:center;">regexp</td><td style="text-align:center;">syntax</td><td style="text-align:center;">将正则表达式解析为语法树</td></tr><tr><td style="text-align:center;">runtime</td><td style="text-align:center;">debug</td><td style="text-align:center;">包含当程序在运行时调试其自身的功能</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">pprof</td><td style="text-align:center;">以pprof可视化工具需要的格式写运行时性能测试数据</td></tr><tr><td style="text-align:center;">sync</td><td style="text-align:center;">atomic</td><td style="text-align:center;">提供了低级的用于实现同步算法的原子级的内存机制</td></tr><tr><td style="text-align:center;">testing</td><td style="text-align:center;">iotest</td><td style="text-align:center;">提供一系列测试目的的类型，实现了Reader和Writer标准接口</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">quick</td><td style="text-align:center;">实现了用于黑箱测试的实用函数</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">script</td><td style="text-align:center;">帮助测试使用通道的代码</td></tr><tr><td style="text-align:center;">text</td><td style="text-align:center;">scanner</td><td style="text-align:center;">为UTF-8文本提供了一个扫描器和分词器</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">tabwriter</td><td style="text-align:center;">实现了一个写筛选器（ tabwriter.Writer），它可将一个输入的tab分割的列翻译为适当对齐的文本</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">template</td><td style="text-align:center;">数据驱动的模板引擎，用于生成类似HTML的文本输出格式</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">template/parse</td><td style="text-align:center;">为template构建解析树</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">unicode/utf16</td><td style="text-align:center;">实现了UTF-16序列的的编码和解码</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">unicode/utf8</td><td style="text-align:center;">实现了支持以UTF-8编码的文本的函数和常数</td></tr></tbody></table><p><br> <br><a name="优秀的开源库"></a> <a name="优秀的开源库"></a></p><h2 id="其他优秀的开源工具分类" tabindex="-1"><a class="header-anchor" href="#其他优秀的开源工具分类"><span>其他优秀的开源工具分类</span></a></h2><h3 id="音频和音乐" tabindex="-1"><a class="header-anchor" href="#音频和音乐"><span>音频和音乐</span></a></h3><p><a name="音频和音乐"></a> <a name="音频和音乐"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/algoGuy/EasyMIDI" target="_blank" rel="noopener noreferrer">EasyMIDI</a></td><td style="text-align:center;">EasyMidi是一个简单可靠的库，用于处理标准Midi文件（SMF）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/mewkiz/flac" target="_blank" rel="noopener noreferrer">flac</a></td><td style="text-align:center;">支持FLAC流的Native Go FLAC编码器/解码器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Comcast/gaad" target="_blank" rel="noopener noreferrer">gaad</a></td><td style="text-align:center;">本机Go AAC比特流解析器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/krig/go-sox" target="_blank" rel="noopener noreferrer">go-sox</a></td><td style="text-align:center;">用于go的libsox绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/zhulik/go_mediainfo" target="_blank" rel="noopener noreferrer">go_mediainfo</a></td><td style="text-align:center;">用于go的libmediainfo绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/dh1tw/gosamplerate" target="_blank" rel="noopener noreferrer">gosamplerate</a></td><td style="text-align:center;">用于go的libsamplerate绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/bogem/id3v2" target="_blank" rel="noopener noreferrer">id3v2</a></td><td style="text-align:center;">用于Go的快速，稳定的ID3解析和编写库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gen2brain/malgo" target="_blank" rel="noopener noreferrer">malgo</a></td><td style="text-align:center;">迷你音频库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/tosone/minimp3" target="_blank" rel="noopener noreferrer">minimp3</a></td><td style="text-align:center;">轻量级MP3解码器库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/go-mix/mix" target="_blank" rel="noopener noreferrer">mix</a></td><td style="text-align:center;">为音乐应用程序基于序列转到本地音频混合器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/tcolgate/mp3" target="_blank" rel="noopener noreferrer">mp3</a></td><td style="text-align:center;">Native Go MP3解码器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/go-music-theory/music-theory" target="_blank" rel="noopener noreferrer">music-theory</a></td><td style="text-align:center;">Go中的音乐理论模型。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hajimehoshi/oto" target="_blank" rel="noopener noreferrer">Oto</a></td><td style="text-align:center;">在多个平台上播放声音的低级库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gordonklaus/portaudio" target="_blank" rel="noopener noreferrer">PortAudio</a></td><td style="text-align:center;">用于PortAudio音频I / O库的绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/rakyll/portmidi" target="_blank" rel="noopener noreferrer">portmidi</a></td><td style="text-align:center;">绑定PortMidi。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/wtolson/go-taglib" target="_blank" rel="noopener noreferrer">taglib</a></td><td style="text-align:center;">为taglib绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/mccoyst/vorbis" target="_blank" rel="noopener noreferrer">vorbis</a></td><td style="text-align:center;">“本机” Go Vorbis解码器（使用CGO，但没有依赖项）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/mdlayher/waveform" target="_blank" rel="noopener noreferrer">waveform</a></td><td style="text-align:center;">Go程序包，能够从音频流生成波形图像。</td></tr></tbody></table><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h3><p><a name="数据结构"></a> <a name="数据结构"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/shady831213/algorithms" target="_blank" rel="noopener noreferrer">algorithms</a></td><td style="text-align:center;">算法和数据结构。CLRS研究。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/zhuangsirui/binpacker" target="_blank" rel="noopener noreferrer">binpacker</a></td><td style="text-align:center;">二进制打包程序和解包程序可帮助用户构建自定义二进制流。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/yourbasic/bit" target="_blank" rel="noopener noreferrer">bit</a></td><td style="text-align:center;">具有额外的位旋转功能的Golang设置数据结构。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/willf/bitset" target="_blank" rel="noopener noreferrer">bitset</a></td><td style="text-align:center;">实现位集的Go包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/zhenjl/bloom" target="_blank" rel="noopener noreferrer">bloom</a></td><td style="text-align:center;">在Go中实现的Bloom过滤器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/yourbasic/bloom" target="_blank" rel="noopener noreferrer">bloom</a></td><td style="text-align:center;">Golang Bloom过滤器实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/tylertreat/BoomFilters" target="_blank" rel="noopener noreferrer">boomfilters</a></td><td style="text-align:center;">用于处理连续无界流的概率数据结构。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/free/concurrent-writer" target="_blank" rel="noopener noreferrer">concurrent-writer</a></td><td style="text-align:center;">高并发直接替换bufio.Writer。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/InVisionApp/conjungo" target="_blank" rel="noopener noreferrer">conjungo</a></td><td style="text-align:center;">一个小型，强大而灵活的合并库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/seiflotfy/count-min-log" target="_blank" rel="noopener noreferrer">count-min-log</a></td><td style="text-align:center;">执行Count-Min-Log草图：使用近似计数器进行近似计数（类似于Count-Min草图，但使用较少的内存）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/superwhiskers/crunch" target="_blank" rel="noopener noreferrer">crunch</a></td><td style="text-align:center;">Go包实现了用于轻松处理各种数据类型的缓冲区。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/seiflotfy/cuckoofilter" target="_blank" rel="noopener noreferrer">cuckoofilter</a></td><td style="text-align:center;">Cuckoo过滤器：是Go中实现的计数布隆过滤器的很好替代。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/edwingeng/deque" target="_blank" rel="noopener noreferrer">deque</a></td><td style="text-align:center;">高度优化的双端队列。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gammazero/deque" target="_blank" rel="noopener noreferrer">deque</a></td><td style="text-align:center;">快速的环形缓冲区双端队列（双端队列）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/srfrog/dict" target="_blank" rel="noopener noreferrer">dict</a></td><td style="text-align:center;">Go的类似Python的字典（dict）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/zhenjl/encoding" target="_blank" rel="noopener noreferrer">encoding</a></td><td style="text-align:center;">Go的整数压缩库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/plar/go-adaptive-radix-tree" target="_blank" rel="noopener noreferrer">go-adaptive-radix-tree</a></td><td style="text-align:center;">自适应基数树的 Go实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Workiva/go-datastructures" target="_blank" rel="noopener noreferrer">go-datastructures</a></td><td style="text-align:center;">有用，高性能和线程安全的数据结构的集合。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/amallia/go-ef" target="_blank" rel="noopener noreferrer">go-ef</a></td><td style="text-align:center;">Elias-Fano编码的Go实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hailocab/go-geoindex" target="_blank" rel="noopener noreferrer">go-geoindex</a></td><td style="text-align:center;">内存中的地理索引。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/OrlovEvgeny/go-mcache" target="_blank" rel="noopener noreferrer">go-mcache</a></td><td style="text-align:center;">快速内存键：值存储/缓存库。指针缓存。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/aurelien-rainone/go-rquad" target="_blank" rel="noopener noreferrer">go-rquad</a></td><td style="text-align:center;">具有有效点定位和邻居发现功能的区域四叉树。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/eko/gocache" target="_blank" rel="noopener noreferrer">gocache</a></td><td style="text-align:center;">具有多个存储（内存，memcache，redis等），可链接，可加载，指标缓存等的完整Go缓存库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/enriquebris/goconcurrentqueue" target="_blank" rel="noopener noreferrer">goconcurrentqueue</a></td><td style="text-align:center;">并发FIFO队列。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/emirpasic/gods" target="_blank" rel="noopener noreferrer">gods</a></td><td style="text-align:center;">数据结构。容器，集合，列表，堆栈，地图，BidiMap，树，HashSet等。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/xxjwxc/gofal" target="_blank" rel="noopener noreferrer">gofal</a></td><td style="text-align:center;">Go的小数api。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/deckarep/golang-set" target="_blank" rel="noopener noreferrer">golang-set</a></td><td style="text-align:center;">Go的线程安全和非线程安全高性能集。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/zoumo/goset" target="_blank" rel="noopener noreferrer">goset</a></td><td style="text-align:center;">Go的有用的Set集合实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ryszard/goskiplist" target="_blank" rel="noopener noreferrer">goskiplist</a></td><td style="text-align:center;">Go中的跳过列表实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/kniren/gota" target="_blank" rel="noopener noreferrer">gota</a></td><td style="text-align:center;">Go的数据框，序列和数据整理方法的实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/emvi/hide" target="_blank" rel="noopener noreferrer">hide</a></td><td style="text-align:center;">ID类型，将其编组进/出哈希以防止将ID发送给客户端。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/google/hilbert" target="_blank" rel="noopener noreferrer">hilbert</a></td><td style="text-align:center;">Go程序包，用于在空间填充曲线（例如Hilbert和Peano曲线）之间映射值。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/axiomhq/hyperloglog" target="_blank" rel="noopener noreferrer">hyperloglog</a></td><td style="text-align:center;">HyperLogLog实施，具有稀疏，LogLog-Beta偏差校正和TailCut空间减少功能。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/disksing/iter" target="_blank" rel="noopener noreferrer">iter</a></td><td style="text-align:center;">C ++ STL迭代器和算法的实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/agext/levenshtein" target="_blank" rel="noopener noreferrer">levenshtein</a></td><td style="text-align:center;">Levenshtein距离和相似性度量标准，具有可自定义的编辑费用和通用前缀的类似于Winkler的奖金。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/agnivade/levenshtein" target="_blank" rel="noopener noreferrer">levenshtein</a></td><td style="text-align:center;">在Go中计算levenshtein距离的实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/smartystreets/mafsa" target="_blank" rel="noopener noreferrer">mafsa</a></td><td style="text-align:center;">具有最小完美散列的MA-FSA实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/cbergoon/merkletree" target="_blank" rel="noopener noreferrer">merkletree</a></td><td style="text-align:center;">merkle树的实现，可对数据结构的内容进行有效且安全的验证。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/BlackRabbitt/mspm" target="_blank" rel="noopener noreferrer">mspm</a></td><td style="text-align:center;">用于信息检索的多字符串模式匹配算法。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/emvi/null" target="_blank" rel="noopener noreferrer">null</a></td><td style="text-align:center;">可空转到类型，可以被编组/解组到/从JSON。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/MonaxGT/parsefields" target="_blank" rel="noopener noreferrer">parsefields</a></td><td style="text-align:center;">用于解析类似JSON的日志的工具，以收集唯一的字段和事件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hyfather/pipeline" target="_blank" rel="noopener noreferrer">pipeline</a></td><td style="text-align:center;">具有扇入和扇出的管线的实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/viant/ptrie" target="_blank" rel="noopener noreferrer">ptrie</a></td><td style="text-align:center;">前缀树的实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/rocketlaunchr/remember-go" target="_blank" rel="noopener noreferrer">remember-go</a></td><td style="text-align:center;">缓存慢速数据库查询的通用接口（由redis，memcached，ristretto或内存支持）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/TheTannerRyan/ring" target="_blank" rel="noopener noreferrer">ring</a></td><td style="text-align:center;">围棋实现了高性能，线程安全的布隆过滤器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/RoaringBitmap/roaring" target="_blank" rel="noopener noreferrer">roaring</a></td><td style="text-align:center;">实施压缩位集的软件包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/StudioSol/set" target="_blank" rel="noopener noreferrer">set</a></td><td style="text-align:center;">使用LinkedHashMap的围棋设置简单的数据结构实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/MauriceGit/skiplist" target="_blank" rel="noopener noreferrer">skiplist</a></td><td style="text-align:center;">非常快的Go Skiplist实施。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gansidui/skiplist" target="_blank" rel="noopener noreferrer">skiplist</a></td><td style="text-align:center;">Go中的跳过列表实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/zekroTJA/timedmap" target="_blank" rel="noopener noreferrer">timedmap</a></td><td style="text-align:center;">具有过期的键/值对的地图。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/perdata/treap" target="_blank" rel="noopener noreferrer">treap</a></td><td style="text-align:center;">使用树堆的持久快速排序的地图。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/derekparker/trie" target="_blank" rel="noopener noreferrer">trie</a></td><td style="text-align:center;">Go中的Trie实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/diegobernardes/ttlcache" target="_blank" rel="noopener noreferrer">ttlcache</a></td><td style="text-align:center;">内存中的LRU字符串接口{}映射，其中包含golang的到期时间。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gurukami/typ" target="_blank" rel="noopener noreferrer">typ</a></td><td style="text-align:center;">空类型，安全的原始类型转换和从复杂结构中获取值。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/willf/bloom" target="_blank" rel="noopener noreferrer">willf/bloom</a></td><td style="text-align:center;">Go包实现Bloom过滤器。</td></tr></tbody></table><h3 id="分布式系统" tabindex="-1"><a class="header-anchor" href="#分布式系统"><span>分布式系统</span></a></h3><p><a name="分布式系统"></a> <a name="分布式系统"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/svcavallar/celeriac.v1" target="_blank" rel="noopener noreferrer">celeriac</a></td><td style="text-align:center;">用于在Go中添加支持以交互和监视Celery工作者，任务和事件的库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/buraksezer/consistent" target="_blank" rel="noopener noreferrer">consistent</a></td><td style="text-align:center;">具有受限负载的一致哈希</td></tr><tr><td style="text-align:center;"><a href="https://github.com/anacrolix/dht" target="_blank" rel="noopener noreferrer">dht</a></td><td style="text-align:center;">BitTorrent Kademlia DHT实施。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/digota/digota" target="_blank" rel="noopener noreferrer">digota</a></td><td style="text-align:center;">grpc电子商务微服务。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/dotchain/dot/" target="_blank" rel="noopener noreferrer">dot</a></td><td style="text-align:center;">使用操作转换/ OT进行分布式同步。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/edwingeng/doublejump" target="_blank" rel="noopener noreferrer">doublejump</a></td><td style="text-align:center;">改进后的Google的跳转一致性哈希。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/lni/dragonboat" target="_blank" rel="noopener noreferrer">dragonboat</a></td><td style="text-align:center;">Go中功能齐全的高性能多组Raft库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/dgruber/drmaa" target="_blank" rel="noopener noreferrer">drmaa</a></td><td style="text-align:center;">基于DRMAA标准的集群调度程序的作业提交库。</td></tr><tr><td style="text-align:center;"><a href="https://cirello.io/dynamolock" target="_blank" rel="noopener noreferrer">dynamolock</a></td><td style="text-align:center;">DynamoDB支持的分布式锁定实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/tylfin/dynatomic" target="_blank" rel="noopener noreferrer">dynatomic</a></td><td style="text-align:center;">将DynamoDB用作原子计数器的库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/emitter-io/emitter" target="_blank" rel="noopener noreferrer">emitter-io</a></td><td style="text-align:center;">使用MQTT，Websockets和love构建的高性能，分布式，安全和低延迟的发布-订阅平台。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/vectaport/flowgraph" target="_blank" rel="noopener noreferrer">flowgraph</a></td><td style="text-align:center;">基于流的编程包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/chrislusf/gleam" target="_blank" rel="noopener noreferrer">gleam</a></td><td style="text-align:center;">用纯围棋和Luajit快速和可扩展的分布式的map / reduce系统，具有Luajit的高性能结合Go的高并发，单独运行或分发。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/chrislusf/glow" target="_blank" rel="noopener noreferrer">glow</a></td><td style="text-align:center;">易于使用的可扩展的分布式大数据处理，Map-Reduce，DAG执行，全部在纯Go中进行。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/InVisionApp/go-health" target="_blank" rel="noopener noreferrer">go-health</a></td><td style="text-align:center;">health-用于在服务中启用异步依赖项运行状况检查的库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/dgryski/go-jump" target="_blank" rel="noopener noreferrer">go-jump</a></td><td style="text-align:center;">Google的“ Jump”一致性哈希函数的端口。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/go-kit/kit" target="_blank" rel="noopener noreferrer">go-kit</a></td><td style="text-align:center;">支持服务发现，负载平衡，可插拔传输，请求跟踪等的微服务工具包</td></tr><tr><td style="text-align:center;"><a href="https://github.com/AppsFlyer/go-sundheit" target="_blank" rel="noopener noreferrer">go-sundheit</a></td><td style="text-align:center;">建立用于支持为golang服务定义异步服务运行状况检查的库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/valyala/gorpc" target="_blank" rel="noopener noreferrer">gorpc</a></td><td style="text-align:center;">简单，快速和可扩展的RPC库，可实现高负载。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/grpc/grpc-go" target="_blank" rel="noopener noreferrer">grpc-go</a></td><td style="text-align:center;">gRPC的Go语言实现。基于HTTP / 2的RPC。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hprose/hprose-golang" target="_blank" rel="noopener noreferrer">hprose</a></td><td style="text-align:center;">十分新颖的RPC库，现在支持25种以上的语言。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/osamingo/jsonrpc" target="_blank" rel="noopener noreferrer">jsonrpc</a></td><td style="text-align:center;">jsonrpc软件包可帮助实现JSON-RPC 2.0。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ybbus/jsonrpc" target="_blank" rel="noopener noreferrer">jsonrpc</a></td><td style="text-align:center;">JSON-RPC 2.0 HTTP客户端实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/devopsfaith/krakend" target="_blank" rel="noopener noreferrer">KrakenD</a></td><td style="text-align:center;">具有中间件的超高性能API网关框架。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/liftbridge-io/liftbridge" target="_blank" rel="noopener noreferrer">liftbridge</a></td><td style="text-align:center;">NATS的轻量级，容错消息流。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/micro/micro" target="_blank" rel="noopener noreferrer">micro</a></td><td style="text-align:center;">可插拔的microService工具箱和分布式系统平台。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/nats-io/gnatsd" target="_blank" rel="noopener noreferrer">NATS</a></td><td style="text-align:center;">用于微服务，IoT和云本机系统的轻量级高性能消息传递系统。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/italolelis/outboxer" target="_blank" rel="noopener noreferrer">outboxer</a></td><td style="text-align:center;">Outboxer是一个实现库模式的go库。</td></tr><tr><td style="text-align:center;"><a href="https://cirello.io/pglock" target="_blank" rel="noopener noreferrer">pglock</a></td><td style="text-align:center;">PostgreSQL支持的分布式锁定实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hashicorp/raft" target="_blank" rel="noopener noreferrer">raft</a></td><td style="text-align:center;">HashiCorp的Raft共识协议的Golang实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/coreos/etcd/tree/master/raft" target="_blank" rel="noopener noreferrer">raft</a></td><td style="text-align:center;">ETCD中实现的Raft协议。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/cenkalti/rain" target="_blank" rel="noopener noreferrer">rain</a></td><td style="text-align:center;">BitTorrent客户端和库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/bsm/redislock" target="_blank" rel="noopener noreferrer">redis-lock</a></td><td style="text-align:center;">使用Redis的简化分布式锁定实现。</td></tr><tr><td style="text-align:center;"><a href="https://resgate.io/" target="_blank" rel="noopener noreferrer">resgate</a></td><td style="text-align:center;">用于构建REST，实时和RPC API的实时API网关，其中所有客户端都可以无缝同步。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/uber/ringpop-go" target="_blank" rel="noopener noreferrer">ringpop-go</a></td><td style="text-align:center;">Go应用程序的可扩展，容错应用程序层分片。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/smallnest/rpcx" target="_blank" rel="noopener noreferrer">rpcx</a></td><td style="text-align:center;">分布式可插拔RPC服务框架，例如阿里巴巴Dubbo。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ursiform/sleuth" target="_blank" rel="noopener noreferrer">sleuth</a></td><td style="text-align:center;">用于在HTTP服务之间进行无主p2p自动发现和RPC的库（<a href="https://github.com/zeromq/libzmq" target="_blank" rel="noopener noreferrer">ZeroMQ</a>）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/tendermint/tendermint" target="_blank" rel="noopener noreferrer">tendermint</a></td><td style="text-align:center;">高性能中间件，用于使用Tendermint共识和区块链协议将以任何编程语言编写的状态机转换为拜占庭容错复制状态机。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/anacrolix/torrent" target="_blank" rel="noopener noreferrer">torrent</a></td><td style="text-align:center;">BitTorrent客户端软件包。</td></tr></tbody></table><h3 id="电子邮件" tabindex="-1"><a class="header-anchor" href="#电子邮件"><span>电子邮件</span></a></h3><p><a name="电子邮件"></a> <a name="电子邮件"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://blitiri.com.ar/p/chasquid" target="_blank" rel="noopener noreferrer">chasquid</a></td><td style="text-align:center;">用Go编写的SMTP服务器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/aymerick/douceur" target="_blank" rel="noopener noreferrer">douceur</a></td><td style="text-align:center;">CSS内衬为您的HTML电子邮件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/jordan-wright/email" target="_blank" rel="noopener noreferrer">email</a></td><td style="text-align:center;">用于Go的强大而灵活的电子邮件库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/toorop/go-dkim" target="_blank" rel="noopener noreferrer">go-dkim</a></td><td style="text-align:center;">DKIM库，用于签名和验证电子邮件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/emersion/go-imap" target="_blank" rel="noopener noreferrer">go-imap</a></td><td style="text-align:center;">用于客户端和服务器的IMAP库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/emersion/go-message" target="_blank" rel="noopener noreferrer">go-message</a></td><td style="text-align:center;">Internet消息格式和邮件消息的流库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/vanng822/go-premailer" target="_blank" rel="noopener noreferrer">go-premailer</a></td><td style="text-align:center;">Go中HTML邮件的内联样式。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/xhit/go-simple-mail" target="_blank" rel="noopener noreferrer">go-simple-mail</a></td><td style="text-align:center;">使用SMTP保持活动状态和两个超时发送电子邮件的非常简单的程序包：连接和发送。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hectane/hectane" target="_blank" rel="noopener noreferrer">Hectane</a></td><td style="text-align:center;">提供HTTP API的轻型SMTP客户端。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/matcornic/hermes" target="_blank" rel="noopener noreferrer">hermes</a></td><td style="text-align:center;">Golang软件包，可生成干净的响应式HTML电子邮件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/mailchain/mailchain" target="_blank" rel="noopener noreferrer">mailchain</a></td><td style="text-align:center;">将加密的电子邮件发送到用Go编写的区块链地址。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/mailgun/mailgun-go" target="_blank" rel="noopener noreferrer">mailgun-go</a></td><td style="text-align:center;">Go库，用于使用Mailgun API发送邮件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/mailhog/MailHog" target="_blank" rel="noopener noreferrer">MailHog</a></td><td style="text-align:center;">通过Web和API界面进行电子邮件和SMTP测试。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/sendgrid/sendgrid-go" target="_blank" rel="noopener noreferrer">SendGrid</a></td><td style="text-align:center;">SendGrid的Go库，用于发送电子邮件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/mailhog/smtp" target="_blank" rel="noopener noreferrer">smtp</a></td><td style="text-align:center;">SMTP服务器协议状态机。</td></tr></tbody></table><h3 id="嵌入式脚本语言" tabindex="-1"><a class="header-anchor" href="#嵌入式脚本语言"><span>嵌入式脚本语言</span></a></h3><p><a name="嵌入式脚本语言"></a> <a name="嵌入式脚本语言"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/mattn/anko" target="_blank" rel="noopener noreferrer">anko</a></td><td style="text-align:center;">用Go语言编写的可编写脚本的解释器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/alexeyco/binder" target="_blank" rel="noopener noreferrer">binder</a></td><td style="text-align:center;">转到基于<a href="https://github.com/yuin/gopher-lua" target="_blank" rel="noopener noreferrer">gopher-lua</a>的 Lua绑定库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/google/cel-go" target="_blank" rel="noopener noreferrer">cel-go</a></td><td style="text-align:center;">具有渐进式输入功能的快速，便携式，非图灵完整表达评估。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/antonmedv/expr" target="_blank" rel="noopener noreferrer">expr</a></td><td style="text-align:center;">可以评估表达式的引擎。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gentee/gentee" target="_blank" rel="noopener noreferrer">gentee</a></td><td style="text-align:center;">可嵌入的脚本编程语言。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/jcla1/gisp" target="_blank" rel="noopener noreferrer">gisp</a></td><td style="text-align:center;">Go中的简单LISP。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/olebedev/go-duktape" target="_blank" rel="noopener noreferrer">go-duktape</a></td><td style="text-align:center;">Go的Duktape JavaScript引擎绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Shopify/go-lua" target="_blank" rel="noopener noreferrer">go-lua</a></td><td style="text-align:center;">Lua 5.2 VM到纯Go的端口。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/deuill/go-php" target="_blank" rel="noopener noreferrer">go-php</a></td><td style="text-align:center;">Go的PHP绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/sbinet/go-python" target="_blank" rel="noopener noreferrer">go-python</a></td><td style="text-align:center;">与CPython C-API的幼稚go绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/aarzilli/golua" target="_blank" rel="noopener noreferrer">golua</a></td><td style="text-align:center;">Lua C API的绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/yuin/gopher-lua" target="_blank" rel="noopener noreferrer">gopher-lua</a></td><td style="text-align:center;">用Go编写的Lua 5.1 VM和编译器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/PaesslerAG/gval" target="_blank" rel="noopener noreferrer">gval</a></td><td style="text-align:center;">用Go编写的高度可定制的表达语言。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/db47h/ngaro" target="_blank" rel="noopener noreferrer">ngaro</a></td><td style="text-align:center;">可嵌入的Ngaro VM实现，支持在Retro中编写脚本。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/robertkrimen/otto" target="_blank" rel="noopener noreferrer">otto</a></td><td style="text-align:center;">用Go编写的JavaScript解释器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ian-kent/purl" target="_blank" rel="noopener noreferrer">purl</a></td><td style="text-align:center;">Go中嵌入的Perl 5.18.2。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/d5/tengo" target="_blank" rel="noopener noreferrer">tengo</a></td><td style="text-align:center;">用于Go的字节码编译脚本语言。</td></tr></tbody></table><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h3><p><a name="错误处理"></a> <a name="错误处理"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/emperror/emperror" target="_blank" rel="noopener noreferrer">emperror</a></td><td style="text-align:center;">Go库和应用程序的错误处理工具和最佳实践。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/snwfdhmp/errlog" target="_blank" rel="noopener noreferrer">errlog</a></td><td style="text-align:center;">可破解的软件包，用于确定错误的负责任的源代码（以及其他一些快速调试功能）。可插入任何现成的记录器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/emperror/errors" target="_blank" rel="noopener noreferrer">errors</a></td><td style="text-align:center;"><a href="http://xn--github-hp7iqmm6yfkd5wfcw3blplh5byxx19dut5f3tyesnsb.com/pkg/errors%E3%80%82%E6%8F%90%E4%BE%9B%E5%90%84%E7%A7%8D%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%8E%9F%E8%AF%AD%E3%80%82" target="_blank" rel="noopener noreferrer">下拉更换为标准库的错误包和github.com/pkg/errors。提供各种错误处理原语。</a></td></tr><tr><td style="text-align:center;"><a href="https://github.com/pkg/errors" target="_blank" rel="noopener noreferrer">errors</a></td><td style="text-align:center;">提供简单错误处理原语的软件包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/neuronlabs/errors" target="_blank" rel="noopener noreferrer">errors</a></td><td style="text-align:center;">简单golang错误处理与分类元。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/joomcode/errorx" target="_blank" rel="noopener noreferrer">errorx</a></td><td style="text-align:center;">具有堆栈跟踪，错误组成等的功能丰富的错误包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/SonicRoshan/falcon" target="_blank" rel="noopener noreferrer">Falcon</a></td><td style="text-align:center;">一个简单但功能强大的错误处理软件包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hashicorp/go-multierror" target="_blank" rel="noopener noreferrer">go-multierror</a></td><td style="text-align:center;">Go（golang）软件包，用于将错误列表表示为单个错误。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ztrue/tracerr" target="_blank" rel="noopener noreferrer">tracerr</a></td><td style="text-align:center;">带有堆栈跟踪和源代码片段的Golang错误。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/txgruppi/werr" target="_blank" rel="noopener noreferrer">werr</a></td><td style="text-align:center;">错误包装程序为Go中的错误类型创建了一个包装程序，该包装程序捕获了调用它的文件，行和堆栈。</td></tr></tbody></table><h3 id="文件" tabindex="-1"><a class="header-anchor" href="#文件"><span>文件</span></a></h3><p><a name="文件"></a> <a name="文件"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/spf13/afero" target="_blank" rel="noopener noreferrer">afero</a></td><td style="text-align:center;">Go的文件系统抽象系统。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/viant/afs" target="_blank" rel="noopener noreferrer">afs</a></td><td style="text-align:center;">Go的抽象文件存储（mem，scp，zip，tar，云：s3，gs）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/bigfile/bigfile" target="_blank" rel="noopener noreferrer">bigfile</a></td><td style="text-align:center;">文件传输系统，支持使用http api，rpc调用和ftp客户端管理文件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/codingsince1985/checksum" target="_blank" rel="noopener noreferrer">checksum</a></td><td style="text-align:center;">计算大型文件的消息摘要，例如MD5和SHA256。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/homedepot/flop" target="_blank" rel="noopener noreferrer">flop</a></td><td style="text-align:center;">文件操作库，旨在与<a href="https://www.gnu.org/software/coreutils/manual/html_node/cp-invocation.html" target="_blank" rel="noopener noreferrer">GNU cp</a>镜像功能奇偶校验。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/artonge/go-csv-tag" target="_blank" rel="noopener noreferrer">go-csv-tag</a></td><td style="text-align:center;">tag-使用标签加载csv文件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hugocarreira/go-decent-copy" target="_blank" rel="noopener noreferrer">go-decent-copy</a></td><td style="text-align:center;">复制human文件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/barasher/go-exiftool" target="_blank" rel="noopener noreferrer">go-exiftool</a></td><td style="text-align:center;">ExifTool的Go绑定，这是众所周知的库，用于从文件（图片，PDF，office，...）提取尽可能多的元数据（EXIF，IPTC等）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/artonge/go-gtfs" target="_blank" rel="noopener noreferrer">go-gtfs</a></td><td style="text-align:center;">在go中加载gtfs文件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/rjeczalik/notify" target="_blank" rel="noopener noreferrer">notify</a></td><td style="text-align:center;">具有简单API的文件系统事件通知库，类似于os / signal。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/qmuntal/opc" target="_blank" rel="noopener noreferrer">opc</a></td><td style="text-align:center;">为Go加载Open Packaging Conventions（OPC）文件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/parsyl/parquet" target="_blank" rel="noopener noreferrer">parquet</a></td><td style="text-align:center;">读取和写入 <a href="https://parquet.apache.org/" target="_blank" rel="noopener noreferrer">parquet</a>文件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hhrutter/pdfcpu" target="_blank" rel="noopener noreferrer">pdfcpu</a></td><td style="text-align:center;">PDF 处理器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/dixonwille/skywalker" target="_blank" rel="noopener noreferrer">skywalker</a></td><td style="text-align:center;">一种软件包，允许一个人轻松地同时通过文件系统。</td></tr><tr><td style="text-align:center;"><a href="https://gitlab.com/russoj88/stl" target="_blank" rel="noopener noreferrer">stl</a></td><td style="text-align:center;">读取和写入STL（立体光刻）文件的模块。并发读取算法。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/posener/tarfs" target="_blank" rel="noopener noreferrer">tarfs</a></td><td style="text-align:center;">tar文件<a href="https://godoc.org/github.com/kr/fs#FileSystem" target="_blank" rel="noopener noreferrer"><code>FileSystem</code> interface</a>接口的实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/C2FO/vfs" target="_blank" rel="noopener noreferrer">vfs</a></td><td style="text-align:center;">跨多种文件系统类型（例如os，S3和GCS）的Go的一组可插拔，可扩展且自以为是的文件系统功能。</td></tr></tbody></table><h3 id="金融" tabindex="-1"><a class="header-anchor" href="#金融"><span>金融</span></a></h3><p><a name="金融"></a> <a name="金融"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/leekchan/accounting" target="_blank" rel="noopener noreferrer">accounting</a></td><td style="text-align:center;">golang的货币和货币格式。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/bnkamalesh/currency" target="_blank" rel="noopener noreferrer">currency</a></td><td style="text-align:center;">高性能和准确的货币计算包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/shopspring/decimal" target="_blank" rel="noopener noreferrer">decimal</a></td><td style="text-align:center;">任意精度定点十进制数字。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/FlashBoys/go-finance" target="_blank" rel="noopener noreferrer">go-finance</a></td><td style="text-align:center;">Go中的综合金融市场数据。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/alpeb/go-finance" target="_blank" rel="noopener noreferrer">go-finance</a></td><td style="text-align:center;">金融功能库，用于货币时间价值（年金），现金流量，利率转换，债券和折旧计算。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/pieterclaerhout/go-finance" target="_blank" rel="noopener noreferrer">go-finance</a></td><td style="text-align:center;">获取汇率，通过VIES检查增值税号和检查IBAN银行帐号的模块。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/rhymond/go-money" target="_blank" rel="noopener noreferrer">go-money</a></td><td style="text-align:center;">Fowler的Money模式的实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/aclindsa/ofxgo" target="_blank" rel="noopener noreferrer">ofxgo</a></td><td style="text-align:center;">查询OFX服务器和/或解析响应（使用示例命令行客户端）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/i25959341/orderbook" target="_blank" rel="noopener noreferrer">orderbook</a></td><td style="text-align:center;">匹配引擎的限价订单在Golang。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/sdcoffey/techan" target="_blank" rel="noopener noreferrer">techan</a></td><td style="text-align:center;">具有高级市场分析和交易策略的技术分析库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/claygod/transaction" target="_blank" rel="noopener noreferrer">transaction</a></td><td style="text-align:center;">以多线程模式运行的嵌入式帐户嵌入式事务数据库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/dannyvankooten/vat" target="_blank" rel="noopener noreferrer">vat</a></td><td style="text-align:center;">增值税号验证和欧盟增值税率。</td></tr></tbody></table><h3 id="游戏开发" tabindex="-1"><a class="header-anchor" href="#游戏开发"><span>游戏开发</span></a></h3><p><a name="游戏开发"></a> <a name="游戏开发"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/azul3d/engine" target="_blank" rel="noopener noreferrer">Azul3D</a></td><td style="text-align:center;">用Go语言编写的3D游戏引擎。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hajimehoshi/ebiten" target="_blank" rel="noopener noreferrer">Ebiten</a></td><td style="text-align:center;">Go中死的简单2D游戏库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/EngoEngine/engo" target="_blank" rel="noopener noreferrer">engo</a></td><td style="text-align:center;">Engo是用Go语言编写的开源2D游戏引擎。它遵循实体组件系统范式。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/g3n/engine" target="_blank" rel="noopener noreferrer">g3n</a></td><td style="text-align:center;">Go 3D游戏引擎。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/vova616/GarageEngine" target="_blank" rel="noopener noreferrer">GarageEngine</a></td><td style="text-align:center;">用Go语言编写的2D游戏引擎，可在OpenGL上使用。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/runningwild/glop" target="_blank" rel="noopener noreferrer">glop</a></td><td style="text-align:center;">Glop（权力游戏库）是一个相当简单的跨平台游戏库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/beefsack/go-astar" target="_blank" rel="noopener noreferrer">go-astar</a></td><td style="text-align:center;">A 路径查找算法的Go实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/GlenKelley/go-collada" target="_blank" rel="noopener noreferrer">go-collada</a></td><td style="text-align:center;">Go包，用于Collada文件格式。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/veandco/go-sdl2" target="_blank" rel="noopener noreferrer">go-sdl2</a></td><td style="text-align:center;"><a href="https://www.libsdl.org/" target="_blank" rel="noopener noreferrer">Simple DirectMedia Layer</a>的 Go绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ungerik/go3d" target="_blank" rel="noopener noreferrer">go3d</a></td><td style="text-align:center;">用于Go的面向性能的2D/3D数学软件包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/xtaci/gonet" target="_blank" rel="noopener noreferrer">gonet</a></td><td style="text-align:center;">使用golang实现的游戏服务器框架。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/xiaonanln/goworld" target="_blank" rel="noopener noreferrer">goworld</a></td><td style="text-align:center;">可扩展的游戏服务器引擎，具有空间实体框架和热插拔功能。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/name5566/leaf" target="_blank" rel="noopener noreferrer">Leaf</a></td><td style="text-align:center;">轻量级游戏服务器框架。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/lonng/nano" target="_blank" rel="noopener noreferrer">nano</a></td><td style="text-align:center;">重量轻，设备，高性能的基于golang游戏服务器架构。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/oakmound/oak" target="_blank" rel="noopener noreferrer">Oak</a></td><td style="text-align:center;">Pure Go游戏引擎。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/topfreegames/pitaya" target="_blank" rel="noopener noreferrer">Pitaya</a></td><td style="text-align:center;">可扩展的游戏服务器框架，具有群集支持和通过C SDK的iOS，Android，Unity等客户端库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/faiface/pixel" target="_blank" rel="noopener noreferrer">Pixel</a></td><td style="text-align:center;">Go中的手工制作2D游戏库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gen2brain/raylib-go" target="_blank" rel="noopener noreferrer">raylib-go</a></td><td style="text-align:center;">去绑定raylib，简单和易于使用的库，以了解电子游戏编程。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/JoelOtter/termloop" target="_blank" rel="noopener noreferrer">termloop</a></td><td style="text-align:center;">Go的基于终端的游戏引擎，建立在Termbox之上。</td></tr></tbody></table><h3 id="地理位置" tabindex="-1"><a class="header-anchor" href="#地理位置"><span>地理位置</span></a></h3><p><a name="地理位置"></a> <a name="地理位置"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/melihmucuk/geocache" target="_blank" rel="noopener noreferrer">geocache</a></td><td style="text-align:center;">适用于基于地理位置的应用程序的内存中缓存。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hishamkaram/geoserver" target="_blank" rel="noopener noreferrer">geoserver</a></td><td style="text-align:center;">geoserver是Go软件包，用于通过GeoServer REST API操纵GeoServer实例。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hishamkaram/gismanager" target="_blank" rel="noopener noreferrer">gismanager</a></td><td style="text-align:center;">将 GIS数据（矢量数据）发布到PostGIS和Geoserver。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/paulmach/osm" target="_blank" rel="noopener noreferrer">osm</a></td><td style="text-align:center;">用于读取，编写和使用OpenStreetMap数据和API的库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/maguro/pbf" target="_blank" rel="noopener noreferrer">pbf</a></td><td style="text-align:center;">OpenStreetMap PBF golang编码器/解码器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/golang/geo" target="_blank" rel="noopener noreferrer">S2 geometry</a></td><td style="text-align:center;">Go中的S2几何库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/tidwall/tile38" target="_blank" rel="noopener noreferrer">Tile38</a></td><td style="text-align:center;">具有空间索引和实时地理围栏的地理位置数据库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/wroge/wgs84" target="_blank" rel="noopener noreferrer">WGS84</a></td><td style="text-align:center;">库坐标转换和变换（ETRS89，OSGB36，NAD83，RGF93，网络墨卡托UTM）。</td></tr></tbody></table><h3 id="编译器" tabindex="-1"><a class="header-anchor" href="#编译器"><span>编译器</span></a></h3><p><a name="编译器"></a> <a name="金编译器融"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/Konstantin8105/c4go" target="_blank" rel="noopener noreferrer">c4go</a></td><td style="text-align:center;">将C代码转换为Go代码。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Konstantin8105/f4go" target="_blank" rel="noopener noreferrer">f4go</a></td><td style="text-align:center;">将FORTRAN 77代码转换为Go代码。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gopherjs/gopherjs" target="_blank" rel="noopener noreferrer">gopherjs</a></td><td style="text-align:center;">从Go到JavaScript的编译器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/go-llvm/llgo" target="_blank" rel="noopener noreferrer">llgo</a></td><td style="text-align:center;">Go的基于LLVM的编译器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/tardisgo/tardisgo" target="_blank" rel="noopener noreferrer">tardisgo</a></td><td style="text-align:center;">Golang转换为CPP / CSharp / Java / JavaScript转译器。</td></tr></tbody></table><h3 id="goroutines" tabindex="-1"><a class="header-anchor" href="#goroutines"><span>Goroutines</span></a></h3><p><a name="Goroutines"></a> <a name="Goroutines"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/panjf2000/ants" target="_blank" rel="noopener noreferrer">ants</a></td><td style="text-align:center;">用于golang的高性能goroutine池。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/borderstech/artifex" target="_blank" rel="noopener noreferrer">artifex</a></td><td style="text-align:center;">Golang使用基于工作程序的分派的简单内存中作业队列。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/studiosol/async" target="_blank" rel="noopener noreferrer">async</a></td><td style="text-align:center;">一种异步执行功能的安全方法，以防万一。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/kamilsk/breaker" target="_blank" rel="noopener noreferrer">breaker</a></td><td style="text-align:center;">使执行流程可中断的灵活机制。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/marusama/cyclicbarrier" target="_blank" rel="noopener noreferrer">cyclicbarrier</a></td><td style="text-align:center;">用于golang的CyclicBarrier。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/workanator/go-floc" target="_blank" rel="noopener noreferrer">go-floc</a></td><td style="text-align:center;">轻松编排goroutine。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/kamildrazkiewicz/go-flow" target="_blank" rel="noopener noreferrer">go-flow</a></td><td style="text-align:center;">控制goroutine的执行顺序。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/nikhilsaraf/go-tools" target="_blank" rel="noopener noreferrer">go-tools/multithreading</a></td><td style="text-align:center;">使用带有简单API的轻量级库管理goroutine池。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/subchen/go-trylock" target="_blank" rel="noopener noreferrer">go-trylock</a></td><td style="text-align:center;">支持Golang的读写锁的TryLock。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/pieterclaerhout/go-waitgroup" target="_blank" rel="noopener noreferrer">go-waitgroup</a></td><td style="text-align:center;">sync.WaitGroup与错误处理和并发控制类似。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/loveleshsharma/gohive" target="_blank" rel="noopener noreferrer">gohive</a></td><td style="text-align:center;">Go的高性能和易于使用的Goroutine池。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/vardius/gollback" target="_blank" rel="noopener noreferrer">gollback</a></td><td style="text-align:center;">异步简单函数实用程序，用于管理闭包和回调的执行。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/themester/GoSlaves" target="_blank" rel="noopener noreferrer">GoSlaves</a></td><td style="text-align:center;">简单和异步Goroutine池库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/benmanns/goworker" target="_blank" rel="noopener noreferrer">goworker</a></td><td style="text-align:center;">goworker是基于Go的后台工作者。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/xxjwxc/gowp" target="_blank" rel="noopener noreferrer">gowp</a></td><td style="text-align:center;">gowp是并发限制goroutine池。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Sherifabdlnaby/gpool" target="_blank" rel="noopener noreferrer">gpool</a></td><td style="text-align:center;">管理可调整大小的上下文感知goroutine池以绑定并发。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ivpusic/grpool" target="_blank" rel="noopener noreferrer">grpool</a></td><td style="text-align:center;">轻巧的Goroutine池。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/AaronJan/Hunch" target="_blank" rel="noopener noreferrer">Hunch</a></td><td style="text-align:center;">预感提供功能，如：All，First，Retry，Waterfall等等，这使得异步流控制更加直观。</td></tr><tr><td style="text-align:center;"><a href="https://cirello.io/oversight" target="_blank" rel="noopener noreferrer">oversight</a></td><td style="text-align:center;">监督是Erlang监督树的完整实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/rafaeljesus/parallel-fn" target="_blank" rel="noopener noreferrer">parallel-fn</a></td><td style="text-align:center;">并行运行功能。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/go-playground/pool" target="_blank" rel="noopener noreferrer">pool</a></td><td style="text-align:center;">有限的消费者goroutine池或无限制的goroutine池，以便更轻松地处理和取消goroutine。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/AnikHasibul/queue" target="_blank" rel="noopener noreferrer">queue</a></td><td style="text-align:center;">为您提供sync.WaitGroup类似的队列组可访问性。帮助您节流和限制goroutine，等待所有goroutine结束等等。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/x-mod/routine" target="_blank" rel="noopener noreferrer">routine</a></td><td style="text-align:center;">具有上下文和支持的例程控制：Main，Go，Pool和一些有用的Executors。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/kamilsk/semaphore" target="_blank" rel="noopener noreferrer">semaphore</a></td><td style="text-align:center;">基于通道和上下文的具有锁定/解锁操作超时的信号量模式实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/marusama/semaphore" target="_blank" rel="noopener noreferrer">semaphore</a></td><td style="text-align:center;">基于CAS的快速可调整大小的信号量实现（比基于通道的信号量实现更快）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ssgreg/stl" target="_blank" rel="noopener noreferrer">stl</a></td><td style="text-align:center;">基于软件交易内存（STM）并发控制机制的软件交易锁。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/shettyh/threadpool" target="_blank" rel="noopener noreferrer">threadpool</a></td><td style="text-align:center;">Golang线程池实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Jeffail/tunny" target="_blank" rel="noopener noreferrer">tunny</a></td><td style="text-align:center;">线程池golang。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/vardius/worker-pool" target="_blank" rel="noopener noreferrer">worker-pool</a></td><td style="text-align:center;">goworker是一个简单的Go异步工作池。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gammazero/workerpool" target="_blank" rel="noopener noreferrer">workerpool</a></td><td style="text-align:center;">Goroutine池，它限制了任务执行的并发性，而不是排队的任务数。</td></tr></tbody></table><h3 id="图形界面" tabindex="-1"><a class="header-anchor" href="#图形界面"><span>图形界面</span></a></h3><p><a name="图形界面"></a> <a name="图形界面"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/murlokswarm/app" target="_blank" rel="noopener noreferrer">app</a></td><td style="text-align:center;">打包以使用GO，HTML和CSS创建应用的程序。支持：MacOS，Windows正在开发中。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/fyne-io/fyne" target="_blank" rel="noopener noreferrer">fyne</a></td><td style="text-align:center;">为Go设计的跨平台本机GUI，使用EFL呈现。支持：Linux，macOS，Windows。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/asticode/go-astilectron" target="_blank" rel="noopener noreferrer">go-astilectron</a></td><td style="text-align:center;">使用GO和HTML / JS / CSS（由Electron支持）构建跨平台GUI应用。</td></tr><tr><td style="text-align:center;"><a href="http://mattn.github.io/go-gtk/" target="_blank" rel="noopener noreferrer">go-gtk</a></td><td style="text-align:center;">GTK的绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/sciter-sdk/go-sciter" target="_blank" rel="noopener noreferrer">go-sciter</a></td><td style="text-align:center;">Go绑定：用于现代桌面UI开发的可嵌入HTML / CSS / script引擎。跨平台。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gotk3/gotk3" target="_blank" rel="noopener noreferrer">gotk3</a></td><td style="text-align:center;">GTK3的绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/dtylman/gowd" target="_blank" rel="noopener noreferrer">gowd</a></td><td style="text-align:center;">使用GO，HTML，CSS和NW.js进行快速简单的桌面UI开发。跨平台。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/therecipe/qt" target="_blank" rel="noopener noreferrer">qt</a></td><td style="text-align:center;">Go的Qt绑定（支持Windows / macOS / Linux / Android / iOS / Sailfish OS / Raspberry Pi）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/andlabs/ui" target="_blank" rel="noopener noreferrer">ui</a></td><td style="text-align:center;">Go的平台本地GUI库。跨平台。</td></tr><tr><td style="text-align:center;"><a href="https://wails.app/" target="_blank" rel="noopener noreferrer">Wails</a></td><td style="text-align:center;">使用内置OS HTML渲染器的HTML UI的Mac，Windows，Linux桌面应用程序。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/lxn/walk" target="_blank" rel="noopener noreferrer">walk</a></td><td style="text-align:center;">Go的Windows应用程序库工具包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/zserge/webview" target="_blank" rel="noopener noreferrer">webview</a></td><td style="text-align:center;">具有简单双向JavaScript绑定的跨平台Webview窗口（Windows / macOS / Linux）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/dawidd6/go-appindicator" target="_blank" rel="noopener noreferrer">go-appindicator</a></td><td style="text-align:center;">libappindicator3 C库的Go绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/deckarep/gosx-notifier" target="_blank" rel="noopener noreferrer">gosx-notifier</a></td><td style="text-align:center;">Go的OSX桌面通知库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/prashantgupta24/activity-tracker" target="_blank" rel="noopener noreferrer">mac-activity-tracker</a></td><td style="text-align:center;">OSX库，用于通知计算机上的任何（可插入）活动。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/prashantgupta24/mac-sleep-notifier" target="_blank" rel="noopener noreferrer">mac-sleep-notifier</a></td><td style="text-align:center;">golang中的OSX睡眠/唤醒通知。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/go-vgo/robotgo" target="_blank" rel="noopener noreferrer">robotgo</a></td><td style="text-align:center;">Go本机跨平台GUI系统自动化。控制鼠标，键盘等。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/getlantern/systray" target="_blank" rel="noopener noreferrer">systray</a></td><td style="text-align:center;">跨平台的Go库，用于在通知区域中放置图标和菜单。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/shurcooL/trayhost" target="_blank" rel="noopener noreferrer">trayhost</a></td><td style="text-align:center;">跨平台的Go库，用于在主机操作系统的任务栏中放置一个图标。</td></tr></tbody></table><h3 id="图片" tabindex="-1"><a class="header-anchor" href="#图片"><span>图片</span></a></h3><p><a name="图片"></a> <a name="图片"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/anthonynsimon/bild" target="_blank" rel="noopener noreferrer">bild</a></td><td style="text-align:center;">纯Go中图像处理算法的集合。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/h2non/bimg" target="_blank" rel="noopener noreferrer">bimg</a></td><td style="text-align:center;">使用libvips进行快速有效的图像处理的小包装。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/aofei/cameron" target="_blank" rel="noopener noreferrer">cameron</a></td><td style="text-align:center;">Go的头像生成器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/tdewolff/canvas" target="_blank" rel="noopener noreferrer">canvas</a></td><td style="text-align:center;">将矢量图形转换为PDF，SVG或光栅图像。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gojek/darkroom" target="_blank" rel="noopener noreferrer">darkroom</a></td><td style="text-align:center;">具有可变存储后端的图像代理和侧重于速度和弹性的图像处理引擎。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/pravj/geopattern" target="_blank" rel="noopener noreferrer">geopattern</a></td><td style="text-align:center;">从字符串创建漂亮的生成图像图案。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/fogleman/gg" target="_blank" rel="noopener noreferrer">gg</a></td><td style="text-align:center;">纯Go中的2D渲染。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/disintegration/gift" target="_blank" rel="noopener noreferrer">gift</a></td><td style="text-align:center;">图像处理过滤器的包装。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/qmuntal/gltf" target="_blank" rel="noopener noreferrer">gltf</a></td><td style="text-align:center;">高效，强大的glTF 2.0读取器，写入器和验证器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ungerik/go-cairo" target="_blank" rel="noopener noreferrer">go-cairo</a></td><td style="text-align:center;">用于cairo图形库的绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/bolknote/go-gd" target="_blank" rel="noopener noreferrer">go-gd</a></td><td style="text-align:center;">GD库的Go绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/koyachi/go-nude" target="_blank" rel="noopener noreferrer">go-nude</a></td><td style="text-align:center;">Go的裸露检测。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/lazywei/go-opencv" target="_blank" rel="noopener noreferrer">go-opencv</a></td><td style="text-align:center;">用于OpenCV的绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/jyotiska/go-webcolors" target="_blank" rel="noopener noreferrer">go-webcolors</a></td><td style="text-align:center;">webcolors库的端口，从Python到Go。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hybridgroup/gocv" target="_blank" rel="noopener noreferrer">gocv</a></td><td style="text-align:center;">使用OpenCV 3.3+进行计算机视觉的Go软件包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/corona10/goimagehash" target="_blank" rel="noopener noreferrer">goimagehash</a></td><td style="text-align:center;">Go感知图像哈希包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/corona10/goimghdr" target="_blank" rel="noopener noreferrer">goimghdr</a></td><td style="text-align:center;">imghdr模块确定Go文件中包含的图像类型。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/o1egl/govatar" target="_blank" rel="noopener noreferrer">govatar</a></td><td style="text-align:center;">用于生成有趣头像的库和CMD工具。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/qeesung/image2ascii" target="_blank" rel="noopener noreferrer">image2ascii</a></td><td style="text-align:center;">将图像转换为ASCII。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gographics/imagick" target="_blank" rel="noopener noreferrer">imagick</a></td><td style="text-align:center;">绑定到ImageMagick的MagickWand C API。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/h2non/imaginary" target="_blank" rel="noopener noreferrer">imaginary</a></td><td style="text-align:center;">用于图像大小调整的快速，简单的HTTP微服务。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/disintegration/imaging" target="_blank" rel="noopener noreferrer">imaging</a></td><td style="text-align:center;">简单的Go图像处理包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hawx/img" target="_blank" rel="noopener noreferrer">img</a></td><td style="text-align:center;">选择图像处理工具。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/fogleman/ln" target="_blank" rel="noopener noreferrer">ln</a></td><td style="text-align:center;">Go中的3D线条艺术渲染。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/noelyahan/mergi" target="_blank" rel="noopener noreferrer">mergi</a></td><td style="text-align:center;">用于图像处理（合并，裁切，调整大小，水印，动画）的Tool＆Go库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/aldor007/mort" target="_blank" rel="noopener noreferrer">mort</a></td><td style="text-align:center;">用Go编写的存储和图像处理服务器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/donatj/mpo" target="_blank" rel="noopener noreferrer">mpo</a></td><td style="text-align:center;">用于MPO 3D照片的解码器和转换工具。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/thoas/picfit" target="_blank" rel="noopener noreferrer">picfit</a></td><td style="text-align:center;">用Go编写的图像大小调整服务器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/fogleman/pt" target="_blank" rel="noopener noreferrer">pt</a></td><td style="text-align:center;">用Go语言编写的路径跟踪引擎。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/nfnt/resize" target="_blank" rel="noopener noreferrer">resize</a></td><td style="text-align:center;">使用常见的插值方法为Go 调整图像大小。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/bamiaux/rez" target="_blank" rel="noopener noreferrer">rez</a></td><td style="text-align:center;">在纯Go和SIMD中调整图像大小。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/muesli/smartcrop" target="_blank" rel="noopener noreferrer">smartcrop</a></td><td style="text-align:center;">查找适合任何图像和尺寸的优质作物。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/auyer/steganography" target="_blank" rel="noopener noreferrer">steganography</a></td><td style="text-align:center;">用于LSB隐写术的Pure Go库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/DimitarPetrov/stegify" target="_blank" rel="noopener noreferrer">stegify</a></td><td style="text-align:center;">用于LSB隐写术的Go工具，能够隐藏图像中的任何文件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ajstarks/svgo" target="_blank" rel="noopener noreferrer">svgo</a></td><td style="text-align:center;">用于SVG生成的Go语言库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ftrvxmtrx/tga" target="_blank" rel="noopener noreferrer">tga</a></td><td style="text-align:center;">软件包tga是TARGA图像格式的解码器/编码器。</td></tr></tbody></table><h3 id="物联网" tabindex="-1"><a class="header-anchor" href="#物联网"><span>物联网</span></a></h3><p><a name="物联网"></a> <a name="物联网"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/connectordb/connectordb" target="_blank" rel="noopener noreferrer">connectordb</a></td><td style="text-align:center;">量化自我和物联网的开源平台。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/goiot/devices" target="_blank" rel="noopener noreferrer">devices</a></td><td style="text-align:center;">IoT设备库套件，针对x / exp / io进行实验。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/xcodersun/eywa" target="_blank" rel="noopener noreferrer">eywa</a></td><td style="text-align:center;">Project Eywa本质上是一个连接管理器，用于跟踪连接的设备。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/tibcosoftware/flogo" target="_blank" rel="noopener noreferrer">flogo</a></td><td style="text-align:center;">Project Flogo是一个用于IoT Edge应用和集成的开源框架。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/paypal/gatt" target="_blank" rel="noopener noreferrer">gatt</a></td><td style="text-align:center;">盖特是一个围棋包构建低功耗蓝牙外设。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hybridgroup/gobot/" target="_blank" rel="noopener noreferrer">gobot</a></td><td style="text-align:center;">Gobot是机器人技术，物理计算和物联网的框架。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/amimof/huego" target="_blank" rel="noopener noreferrer">huego</a></td><td style="text-align:center;">适用于Go的飞利浦Hue扩展客户端库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/vaelen/iot/" target="_blank" rel="noopener noreferrer">iot</a></td><td style="text-align:center;">IoT是用于实现Google IoT Core设备的简单框架。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Mainflux/mainflux" target="_blank" rel="noopener noreferrer">mainflux</a></td><td style="text-align:center;">工业物联网消息和设备管理服务器。</td></tr><tr><td style="text-align:center;"><a href="https://periph.io/" target="_blank" rel="noopener noreferrer">periph</a></td><td style="text-align:center;">外设I / O与低级别的主板设备接口。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/sensorbee/sensorbee" target="_blank" rel="noopener noreferrer">sensorbee</a></td><td style="text-align:center;">用于物联网的轻量级流处理引擎。</td></tr></tbody></table><h3 id="json格式" tabindex="-1"><a class="header-anchor" href="#json格式"><span>JSON格式</span></a></h3><p><a name="JSON格式"></a> <a name="JSON格式"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/spyzhov/ajson" target="_blank" rel="noopener noreferrer">ajson</a></td><td style="text-align:center;">具有JSONPath支持的golang的抽象JSON。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/skanehira/gjo" target="_blank" rel="noopener noreferrer">gjo</a></td><td style="text-align:center;">用于创建JSON对象的小型实用程序。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/tidwall/gjson" target="_blank" rel="noopener noreferrer">GJSON</a></td><td style="text-align:center;">使用一行代码获取JSON值。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ddymko/go-jsonerror" target="_blank" rel="noopener noreferrer">go-jsonerror</a></td><td style="text-align:center;">Go-JsonError可让我们轻松创建遵循JsonApi规范的json响应错误。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/nicklaw5/go-respond" target="_blank" rel="noopener noreferrer">go-respond</a></td><td style="text-align:center;">Go包，用于处理常见的HTTP JSON响应。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/elgs/gojq" target="_blank" rel="noopener noreferrer">gojq</a></td><td style="text-align:center;">Golang中的 JSON查询。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ChimeraCoder/gojson" target="_blank" rel="noopener noreferrer">gojson</a></td><td style="text-align:center;">从示例JSON自动生成Go（golang）结构定义。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/yazgazan/jaydiff" target="_blank" rel="noopener noreferrer">JayDiff</a></td><td style="text-align:center;">用Go编写的JSON diff实用程序。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/wI2L/jettison" target="_blank" rel="noopener noreferrer">jettison</a></td><td style="text-align:center;">用于Go的高性能，无反射JSON编码器。</td></tr><tr><td style="text-align:center;"><a href="https://mholt.github.io/json-to-go/" target="_blank" rel="noopener noreferrer">JSON-to-Go</a></td><td style="text-align:center;">将JSON转换为Go结构。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/m-zajac/json2go" target="_blank" rel="noopener noreferrer">json2go</a></td><td style="text-align:center;">高级JSON到Go结构转换。提供可以解析多个JSON文档并创建适合所有JSON的结构的包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/AmuzaTkts/jsonapi-errors" target="_blank" rel="noopener noreferrer">jsonapi-errors</a></td><td style="text-align:center;">根据JSON API错误参考进行绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/miolini/jsonf" target="_blank" rel="noopener noreferrer">jsonf</a></td><td style="text-align:center;">突出显示格式和获取JSON的结构查询的控制台工具。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ricardolonga/jsongo" target="_blank" rel="noopener noreferrer">jsongo</a></td><td style="text-align:center;">Fluent API，可以更轻松地创建Json对象。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/RichardKnop/jsonhal" target="_blank" rel="noopener noreferrer">jsonhal</a></td><td style="text-align:center;">简单的Go包，用于将自定义结构编组为HAL兼容的JSON响应。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Qntfy/kazaam" target="_blank" rel="noopener noreferrer">kazaam</a></td><td style="text-align:center;">用于JSON文档的任意转换的API。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/sanbornm/mp" target="_blank" rel="noopener noreferrer">mp</a></td><td style="text-align:center;">简单的cli电子邮件解析器。当前，它使用标准输入并输出JSON。</td></tr></tbody></table><h3 id="机器学习" tabindex="-1"><a class="header-anchor" href="#机器学习"><span>机器学习</span></a></h3><p><a name="机器学习"></a> <a name="机器学习"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/jbrukh/bayesian" target="_blank" rel="noopener noreferrer">bayesian</a></td><td style="text-align:center;">贝叶斯分类为Golang天真。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ryanbressler/CloudForest" target="_blank" rel="noopener noreferrer">CloudForest</a></td><td style="text-align:center;">快速，灵活，多线程的决策树集合，用于纯Go中的机器学习。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/MaxHalford/eaopt" target="_blank" rel="noopener noreferrer">eaopt</a></td><td style="text-align:center;">进化优化库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/khezen/evoli" target="_blank" rel="noopener noreferrer">evoli</a></td><td style="text-align:center;">遗传算法和粒子群优化库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Fontinalis/fonet" target="_blank" rel="noopener noreferrer">fonet</a></td><td style="text-align:center;">用Go编写的深度神经网络库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/e-XpertSolutions/go-cluster" target="_blank" rel="noopener noreferrer">go-cluster</a></td><td style="text-align:center;">k模式和k-原型聚类算法的Go实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/patrikeh/go-deep" target="_blank" rel="noopener noreferrer">go-deep</a></td><td style="text-align:center;">Go中功能丰富的神经网络库</td></tr><tr><td style="text-align:center;"><a href="https://github.com/white-pony/go-fann" target="_blank" rel="noopener noreferrer">go-fann</a></td><td style="text-align:center;">快速人工神经网络（FANN）库的Go绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/thoj/go-galib" target="_blank" rel="noopener noreferrer">go-galib</a></td><td style="text-align:center;">用Go / golang编写的遗传算法库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/daviddengcn/go-pr" target="_blank" rel="noopener noreferrer">go-pr</a></td><td style="text-align:center;">Go lang中的模式识别包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/goml/gobrain" target="_blank" rel="noopener noreferrer">gobrain</a></td><td style="text-align:center;">用go语言编写的神经网络</td></tr><tr><td style="text-align:center;"><a href="https://github.com/e-dard/godist" target="_blank" rel="noopener noreferrer">godist</a></td><td style="text-align:center;">各种概率分布及相关方法。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/tomcraven/goga" target="_blank" rel="noopener noreferrer">goga</a></td><td style="text-align:center;">Go的遗传算法库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/sjwhitworth/golearn" target="_blank" rel="noopener noreferrer">GoLearn</a></td><td style="text-align:center;">用于Go的通用机器学习库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/danieldk/golinear" target="_blank" rel="noopener noreferrer">golinear</a></td><td style="text-align:center;">Go的liblinear绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/surenderthakran/gomind" target="_blank" rel="noopener noreferrer">GoMind</a></td><td style="text-align:center;">Go中的简单神经网络库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/cdipaolo/goml" target="_blank" rel="noopener noreferrer">goml</a></td><td style="text-align:center;">Go中的在线机器学习。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/c-bata/goptuna" target="_blank" rel="noopener noreferrer">Goptuna</a></td><td style="text-align:center;">用于Go语言编写的黑盒函数的贝叶斯优化框架。一切都会被优化。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/timkaye11/goRecommend" target="_blank" rel="noopener noreferrer">goRecommend</a></td><td style="text-align:center;">用Go编写的推荐算法库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gorgonia/gorgonia" target="_blank" rel="noopener noreferrer">gorgonia</a></td><td style="text-align:center;">基于图形的计算库，例如Theano for Go，它提供了用于构建各种机器学习和神经网络算法的原语。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/zhenghaoz/gorse" target="_blank" rel="noopener noreferrer">gorse</a></td><td style="text-align:center;">基于Go编写的协作过滤的离线推荐系统后端。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/asafschers/goscore" target="_blank" rel="noopener noreferrer">goscore</a></td><td style="text-align:center;">用于PMML的Go Scoring API。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/otiai10/gosseract" target="_blank" rel="noopener noreferrer">gosseract</a></td><td style="text-align:center;">使用Tesseract C ++库的OCR（光学字符识别）软件包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/datastream/libsvm" target="_blank" rel="noopener noreferrer">libsvm</a></td><td style="text-align:center;">基于LIBSVM 3.14 libsvm的golang版本衍生作品。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/jinyeom/neat" target="_blank" rel="noopener noreferrer">neat</a></td><td style="text-align:center;">用于增强拓扑神经演化（NEAT）的即插即用，并行Go框架。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/schuyler/neural-go" target="_blank" rel="noopener noreferrer">neural-go</a></td><td style="text-align:center;">go-在Go中实现的多层感知器网络，通过反向传播进行训练。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/otiai10/ocrserver" target="_blank" rel="noopener noreferrer">ocrserver</a></td><td style="text-align:center;">一个简单的OCR API服务器，非常容易被Docker和Heroku部署。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/owulveryck/onnx-go" target="_blank" rel="noopener noreferrer">onnx-go</a></td><td style="text-align:center;">转到开放神经网络交换（ONNX）的接口。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ThePaw/probab" target="_blank" rel="noopener noreferrer">probab</a></td><td style="text-align:center;">概率分布函数。贝叶斯推断。用纯Go语言编写。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/muesli/regommend" target="_blank" rel="noopener noreferrer">regommend</a></td><td style="text-align:center;">建议和协作过滤引擎。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/eaigner/shield" target="_blank" rel="noopener noreferrer">shield</a></td><td style="text-align:center;">贝叶斯文本分类器，具有灵活的标记器和Go的存储后端。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/galeone/tfgo" target="_blank" rel="noopener noreferrer">tfgo</a></td><td style="text-align:center;">易于使用的Tensorflow绑定：简化了官方Tensorflow Go绑定的使用。在Go中定义计算图，加载并执行经过Python训练的模型。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Xamber/Varis" target="_blank" rel="noopener noreferrer">Varis</a></td><td style="text-align:center;">Golang神经网络。</td></tr></tbody></table><h3 id="金融-1" tabindex="-1"><a class="header-anchor" href="#金融-1"><span>金融</span></a></h3><p><a name="微软办公软件"></a> <a name="微软办公软件"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/unidoc/unioffice" target="_blank" rel="noopener noreferrer">unioffice</a></td><td style="text-align:center;">Pure Go库，用于创建和处理Office Word（.docx），Excel（.xlsx）和Powerpoint（.pptx）文档。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/360EntSecGroup-Skylar/excelize" target="_blank" rel="noopener noreferrer">excelize</a></td><td style="text-align:center;">Golang库用于读取和写入Microsoft Excel™（XLSX）文件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/szyhf/go-excel" target="_blank" rel="noopener noreferrer">go-excel</a></td><td style="text-align:center;">一个简单而轻便的阅读器，可以将类似于related-db的excel读取为表格。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/fterrag/goxlsxwriter" target="_blank" rel="noopener noreferrer">goxlsxwriter</a></td><td style="text-align:center;">libxlsxwriter的Golang绑定，用于编写XLSX（Microsoft Excel）文件。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/tealeg/xlsx" target="_blank" rel="noopener noreferrer">xlsx</a></td><td style="text-align:center;">用于简化在Go程序中读取Microsoft Excel最新版本使用的XML格式的库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/plandem/xlsx" target="_blank" rel="noopener noreferrer">xlsx</a></td><td style="text-align:center;">在Go程序中快速/安全地读取/更新您现有的Microsoft Excel文件的方法。</td></tr></tbody></table><h3 id="自然语言处理" tabindex="-1"><a class="header-anchor" href="#自然语言处理"><span>自然语言处理</span></a></h3><p><a name="自然语言处理"></a> <a name="自然语言处理"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/rylans/getlang" target="_blank" rel="noopener noreferrer">getlang</a></td><td style="text-align:center;">快速自然语言检测程序包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/nicksnyder/go-i18n/" target="_blank" rel="noopener noreferrer">go-i18n</a></td><td style="text-align:center;">用于处理本地化文本的软件包和一个随附工具。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/dveselov/mystem" target="_blank" rel="noopener noreferrer">go-mystem</a></td><td style="text-align:center;">CGo与Yandex.Mystem的绑定-俄罗斯形态分析仪。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/nuance/go-nlp" target="_blank" rel="noopener noreferrer">go-nlp</a></td><td style="text-align:center;">用于处理离散概率分布的实用程序和其他可用于执行NLP工作的工具。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/mozillazg/go-pinyin" target="_blank" rel="noopener noreferrer">go-pinyin</a></td><td style="text-align:center;">CN Hanzi至Hanyu拼音转换器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/agonopol/go-stem" target="_blank" rel="noopener noreferrer">go-stem</a></td><td style="text-align:center;">搬运程序阻止算法的实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/mozillazg/go-unidecode" target="_blank" rel="noopener noreferrer">go-unidecode</a></td><td style="text-align:center;">Unicode文本的ASCII音译。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/danieldk/go2vec" target="_blank" rel="noopener noreferrer">go2vec</a></td><td style="text-align:center;">用于word2vec嵌入的阅读器和实用程序功能。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/yanyiwu/gojieba" target="_blank" rel="noopener noreferrer">gojieba</a></td><td style="text-align:center;">这是一个围棋实施解霸其中中国分词算法。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/rjohnsondev/golibstemmer" target="_blank" rel="noopener noreferrer">golibstemmer</a></td><td style="text-align:center;">雪球库libstemmer库的绑定，包括porter 2。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/xujiajun/gotokenizer" target="_blank" rel="noopener noreferrer">gotokenizer</a></td><td style="text-align:center;">基于字典和Goram语言的Bigram语言模型的标记器。（现在仅支持中文细分）</td></tr><tr><td style="text-align:center;"><a href="https://github.com/fiam/gounidecode" target="_blank" rel="noopener noreferrer">gounidecode</a></td><td style="text-align:center;">Go的Unicode音译器（也称为unidecode）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/go-ego/gse" target="_blank" rel="noopener noreferrer">gse</a></td><td style="text-align:center;">进行有效的文本分割；支持英语，中文，日语等。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/goodsign/icu" target="_blank" rel="noopener noreferrer">icu</a></td><td style="text-align:center;">CGO结合为ICU4C C库检测和转换功能。保证与版本50.1兼容。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ikawaha/kagome" target="_blank" rel="noopener noreferrer">kagome</a></td><td style="text-align:center;">用纯Go语言编写的JP形态分析仪。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/goodsign/libtextcat" target="_blank" rel="noopener noreferrer">libtextcat</a></td><td style="text-align:center;">libtextcat C库的Cgo绑定。保证与2.2版兼容。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/awsong/MMSEGO" target="_blank" rel="noopener noreferrer">MMSEGO</a></td><td style="text-align:center;">这是MMSEG的GO实现，它是中文分词算法。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Shixzie/nlp" target="_blank" rel="noopener noreferrer">nlp</a></td><td style="text-align:center;">从字符串中提取值，并用nlp填充您的结构。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/james-bowman/nlp" target="_blank" rel="noopener noreferrer">nlp</a></td><td style="text-align:center;">支持LSA（潜在语义分析）的自然语言处理库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/rookii/paicehusk" target="_blank" rel="noopener noreferrer">paicehusk</a></td><td style="text-align:center;">Paice / Husk提取算法的Golang实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/striker2000/petrovich" target="_blank" rel="noopener noreferrer">petrovich</a></td><td style="text-align:center;">彼得罗维奇（Petrovich）是库，在给定的语法情况下使用俄语名称。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/a2800276/porter" target="_blank" rel="noopener noreferrer">porter</a></td><td style="text-align:center;">这是Martin Porter的Porter干算法的C实现的相当简单的移植。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/zhenjl/porter2" target="_blank" rel="noopener noreferrer">porter2</a></td><td style="text-align:center;">非常快的Porter 2 提取器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/jdkato/prose" target="_blank" rel="noopener noreferrer">prose</a></td><td style="text-align:center;">用于文本处理的库，支持标记化，词性标记，命名实体提取等。仅限英语。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Obaied/RAKE.go" target="_blank" rel="noopener noreferrer">RAKE.go</a></td><td style="text-align:center;">快速自动关键字提取算法（RAKE）的Go端口。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/blevesearch/segment" target="_blank" rel="noopener noreferrer">segment</a></td><td style="text-align:center;">用于执行Unicode标准附件＃29中所述的Unicode文本分段的Go库</td></tr><tr><td style="text-align:center;"><a href="https://github.com/neurosnap/sentences" target="_blank" rel="noopener noreferrer">sentences</a></td><td style="text-align:center;">句子标记器：将文本转换为句子列表。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/osamingo/shamoji" target="_blank" rel="noopener noreferrer">shamoji</a></td><td style="text-align:center;">shamoji是用Go编写的单词过滤程序包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/goodsign/snowball" target="_blank" rel="noopener noreferrer">snowball</a></td><td style="text-align:center;">Go的雪球茎端口（cgo包装器）。提供单词词干提取功能Snowball本机。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/dchest/stemmer" target="_blank" rel="noopener noreferrer">stemmer</a></td><td style="text-align:center;">用于Go编程语言的Stemmer软件包。包括英语和德语词干。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/pebbe/textcat" target="_blank" rel="noopener noreferrer">textcat</a></td><td style="text-align:center;">Go软件包，用于基于n-gram的文本分类，并支持utf-8和原始文本。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/abadojack/whatlanggo" target="_blank" rel="noopener noreferrer">whatlanggo</a></td><td style="text-align:center;">Go的自然语言检测程序包。支持84种语言和24种脚本（书写系统，例如拉丁语，西里尔字母等）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/olebedev/when" target="_blank" rel="noopener noreferrer">when</a></td><td style="text-align:center;">自然EN和RU语言日期/时间分析器具有可插拔的规则。</td></tr></tbody></table><h3 id="网络" tabindex="-1"><a class="header-anchor" href="#网络"><span>网络</span></a></h3><p><a name="网络"></a> <a name="网络"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/mdlayher/arp" target="_blank" rel="noopener noreferrer">arp</a></td><td style="text-align:center;">包arp实现ARP协议，如RFC 826中所述。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/stabbycutyou/buffstreams" target="_blank" rel="noopener noreferrer">buffstreams</a></td><td style="text-align:center;">通过TCP流化协议缓冲区数据变得容易。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/zubairhamed/canopus" target="_blank" rel="noopener noreferrer">canopus</a></td><td style="text-align:center;">CoAP客户端/服务器实施（RFC 7252）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/yl2chen/cidranger" target="_blank" rel="noopener noreferrer">cidranger</a></td><td style="text-align:center;">Go的快速IP到CIDR查找。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/mdlayher/dhcp6" target="_blank" rel="noopener noreferrer">dhcp6</a></td><td style="text-align:center;">软件包dhcp6实现了DHCPv6服务器，如RFC 3315中所述。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/miekg/dns" target="_blank" rel="noopener noreferrer">dns</a></td><td style="text-align:center;">使用DNS的Go库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/songgao/ether" target="_blank" rel="noopener noreferrer">ether</a></td><td style="text-align:center;">用于发送和接收以太网帧的跨平台Go软件包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/mdlayher/ethernet" target="_blank" rel="noopener noreferrer">ethernet</a></td><td style="text-align:center;">程序包ethernet实施IEEE 802.3以太网II帧和IEEE 802.1Q VLAN标签的封送处理。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/valyala/fasthttp" target="_blank" rel="noopener noreferrer">fasthttp</a></td><td style="text-align:center;">软件包fasthttp是Go的一种快速HTTP实现，比net / http快10倍。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/fortio/fortio" target="_blank" rel="noopener noreferrer">fortio</a></td><td style="text-align:center;">负载测试库和命令行工具，高级回显服务器和Web UI。允许指定设置的每秒查询负载，并记录延迟直方图和其他有用的统计数据并对其进行图形化。Tcp，Http，gRPC。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/jlaffaye/ftp" target="_blank" rel="noopener noreferrer">ftp</a></td><td style="text-align:center;">程序包ftp实现RFC 959中所述的FTP客户端。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/Allenxuxu/gev" target="_blank" rel="noopener noreferrer">gev</a></td><td style="text-align:center;">gev是基于Reactor模式的轻量级，快速，无阻塞的TCP网络库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/DrmagicE/gmqtt" target="_blank" rel="noopener noreferrer">gmqtt</a></td><td style="text-align:center;">Gmqtt是一个灵活的高性能MQTT代理库，它完全实现了MQTT协议V3.1.1。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/panjf2000/gnet" target="_blank" rel="noopener noreferrer">gnet</a></td><td style="text-align:center;">gnet是一个高性能的，用纯围棋轻便，非阻塞，事件循环网络库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/google/gnxi" target="_blank" rel="noopener noreferrer">gNxI</a></td><td style="text-align:center;">使用gNMI和gNOI协议的网络管理工具的集合。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hashicorp/go-getter" target="_blank" rel="noopener noreferrer">go-getter</a></td><td style="text-align:center;">Go库，用于使用URL从各种来源下载文件或目录。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/joeig/go-powerdns" target="_blank" rel="noopener noreferrer">go-powerdns</a></td><td style="text-align:center;">Golang的 PowerDNS API绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ccding/go-stun" target="_blank" rel="noopener noreferrer">go-stun</a></td><td style="text-align:center;">STUN客户端的Go实现（RFC 3489和RFC 5389）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/osrg/gobgp" target="_blank" rel="noopener noreferrer">gobgp</a></td><td style="text-align:center;">使用Go编程语言实现的BGP。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/sunwxg/golibwireshark" target="_blank" rel="noopener noreferrer">golibwireshark</a></td><td style="text-align:center;">软件包golibwireshark使用libwireshark库来解码pcap文件并分析解剖数据。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/google/gopacket" target="_blank" rel="noopener noreferrer">gopacket</a></td><td style="text-align:center;">Go库，用于使用libpcap绑定进行数据包处理。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/akrennmair/gopcap" target="_blank" rel="noopener noreferrer">gopcap</a></td><td style="text-align:center;">libpcap的包装器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/sunwxg/goshark" target="_blank" rel="noopener noreferrer">goshark</a></td><td style="text-align:center;">软件包goshark使用tshark解码IP数据包并创建数据结构以分析数据包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/soniah/gosnmp" target="_blank" rel="noopener noreferrer">gosnmp</a></td><td style="text-align:center;">用于执行SNMP操作的本机Go库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/rakeki/gosocsvr" target="_blank" rel="noopener noreferrer">gosocsvr</a></td><td style="text-align:center;">套接字服务器变得简单。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gansidui/gotcp" target="_blank" rel="noopener noreferrer">gotcp</a></td><td style="text-align:center;">用于快速编写tcp应用程序的Go软件包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/cavaliercoder/grab" target="_blank" rel="noopener noreferrer">grab</a></td><td style="text-align:center;">用于管理文件下载的软件包。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/koofr/graval" target="_blank" rel="noopener noreferrer">graval</a></td><td style="text-align:center;">实验性FTP服务器框架。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/gchaincl/httplab" target="_blank" rel="noopener noreferrer">HTTPLab</a></td><td style="text-align:center;">HTTPLabs可让您检查HTTP请求并伪造响应。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/c-robinson/iplib" target="_blank" rel="noopener noreferrer">iplib</a></td><td style="text-align:center;">受python ipaddress和ruby ipaddr启发而使用IP地址（net.IP，net.IPNet）的库</td></tr><tr><td style="text-align:center;"><a href="https://github.com/udhos/jazigo" target="_blank" rel="noopener noreferrer">jazigo</a></td><td style="text-align:center;">Jazigo是用Go语言编写的工具，用于检索多个网络设备的配置。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/xtaci/kcp-go" target="_blank" rel="noopener noreferrer">kcp-go</a></td><td style="text-align:center;">KCP-快速可靠的ARQ协议。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/xtaci/kcptun" target="_blank" rel="noopener noreferrer">kcptun</a></td><td style="text-align:center;">基于KCP协议的极其简单和快速的udp隧道。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/fanux/lhttp" target="_blank" rel="noopener noreferrer">lhttp</a></td><td style="text-align:center;">强大的websocket框架，可更轻松地构建IM服务器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ian-kent/linkio" target="_blank" rel="noopener noreferrer">linkio</a></td><td style="text-align:center;">用于读取器/写入器接口的网络链接速度模拟。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/kirillDanshin/llb" target="_blank" rel="noopener noreferrer">llb</a></td><td style="text-align:center;">这是代理服务器的非常简单但快速的后端。对于零内存分配和快速响应的快速重定向到预定义域很有用。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/hashicorp/mdns" target="_blank" rel="noopener noreferrer">mdns</a></td><td style="text-align:center;">Golang中的简单mDNS（多播DNS）客户端/服务器库。</td></tr><tr><td style="text-align:center;"><a href="https://eclipse.org/paho/clients/golang/" target="_blank" rel="noopener noreferrer">mqttPaho</a></td><td style="text-align:center;">Paho Go客户端提供了一个MQTT客户端库，用于通过TCP，TLS或WebSockets连接到MQTT代理。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/intel-go/nff-go" target="_blank" rel="noopener noreferrer">NFF-Go</a></td><td style="text-align:center;">用于快速开发云和裸机（以前的YANFF）的高性能网络功能的框架。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/aerogo/packet" target="_blank" rel="noopener noreferrer">packet</a></td><td style="text-align:center;">通过TCP和UDP发送数据包。如果需要，它可以缓冲消息和热交换连接。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/schollz/peerdiscovery" target="_blank" rel="noopener noreferrer">peerdiscovery</a></td><td style="text-align:center;">Pure Go库，用于使用UDP多播的跨平台本地对等发现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/aybabtme/portproxy" target="_blank" rel="noopener noreferrer">portproxy</a></td><td style="text-align:center;">简单的TCP代理，它将不支持它的API添加到CORS支持中。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/polera/publicip" target="_blank" rel="noopener noreferrer">publicip</a></td><td style="text-align:center;">软件包publicip返回您的面向公众的IPv4地址（互联网出口）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/lucas-clemente/quic-go" target="_blank" rel="noopener noreferrer">quic-go</a></td><td style="text-align:center;">在纯Go中实现QUIC协议。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/mdlayher/raw" target="_blank" rel="noopener noreferrer">raw</a></td><td style="text-align:center;">包raw允许在设备驱动程序级别为网络接口读取和写入数据。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/pkg/sftp" target="_blank" rel="noopener noreferrer">sftp</a></td><td style="text-align:center;">程序包sftp实现SSH文件传输协议，如<a href="https://filezilla-project.org/specs/draft-ietf-secsh-filexfer-02.txt" target="_blank" rel="noopener noreferrer">https://filezilla-project.org/specs/draft-ietf-secsh-filexfer-02.txt</a></td></tr><tr><td style="text-align:center;"><a href="https://github.com/gliderlabs/ssh" target="_blank" rel="noopener noreferrer">ssh</a></td><td style="text-align:center;">用于构建SSH服务器的高级API（包装crypto / ssh）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/eduardonunesp/sslb" target="_blank" rel="noopener noreferrer">sslb</a></td><td style="text-align:center;">这是一个超级简单的负载均衡器，只是一个实现某种性能的小项目。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/go-rtc/stun" target="_blank" rel="noopener noreferrer">stun</a></td><td style="text-align:center;">实施RFC 5389 STUN协议。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/firstrow/tcp_server" target="_blank" rel="noopener noreferrer">tcp_server</a></td><td style="text-align:center;">用于更快地构建tcp服务器的Go库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/two/tspool" target="_blank" rel="noopener noreferrer">tspool</a></td><td style="text-align:center;">TCP库使用工作池来提高性能并保护您的服务器。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/anacrolix/utp" target="_blank" rel="noopener noreferrer">utp</a></td><td style="text-align:center;">围棋UTP微传输协议的实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/songgao/water" target="_blank" rel="noopener noreferrer">water</a></td><td style="text-align:center;">简单的TUN / TAP库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/pions/webrtc" target="_blank" rel="noopener noreferrer">webrtc</a></td><td style="text-align:center;">WebRTC API的纯Go实现。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/masterzen/winrm" target="_blank" rel="noopener noreferrer">winrm</a></td><td style="text-align:center;">进入WinRM客户端以在Windows计算机上远程执行命令。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/xfxdev/xtcp" target="_blank" rel="noopener noreferrer">xtcp</a></td><td style="text-align:center;">具有同步全双工通信，安全关闭，自定义协议的TCP Server Framework。</td></tr></tbody></table><h3 id="视频库" tabindex="-1"><a class="header-anchor" href="#视频库"><span>视频库</span></a></h3><p><a name="视频"></a> <a name="视频"></a></p><table><thead><tr><th style="text-align:center;">包</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://github.com/asticode/go-astisub" target="_blank" rel="noopener noreferrer">go-astisub</a></td><td style="text-align:center;">在GO中处理字幕（.srt，.stl，.ttml，.webvtt，.ssa / .ass，图文电视，.smi等）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/asticode/go-astits" target="_blank" rel="noopener noreferrer">go-astits</a></td><td style="text-align:center;">在GO中本地解析和解复用MPEG传输流（.ts）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/quangngotan95/go-m3u8" target="_blank" rel="noopener noreferrer">go-m3u8</a></td><td style="text-align:center;">Apple m3u8播放列表的解析器和生成器库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/giorgisio/goav" target="_blank" rel="noopener noreferrer">goav</a></td><td style="text-align:center;">FFmpeg的综合Go绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/ziutek/gst" target="_blank" rel="noopener noreferrer">gst</a></td><td style="text-align:center;">GStreamer的绑定。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/wargarblgarbl/libgosubs" target="_blank" rel="noopener noreferrer">libgosubs</a></td><td style="text-align:center;">go的字幕格式支持。支持.srt，.ttml和.ass。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/adrg/libvlc-go" target="_blank" rel="noopener noreferrer">libvlc-go</a></td><td style="text-align:center;">libvlc 2.X / 3.X / 4.X的绑定（由VLC媒体播放器使用）。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/grafov/m3u8" target="_blank" rel="noopener noreferrer">m3u8</a></td><td style="text-align:center;">Apple HLS的M3U8播放列表的解析器和生成器库。</td></tr><tr><td style="text-align:center;"><a href="https://github.com/korandiz/v4l" target="_blank" rel="noopener noreferrer">v4l</a></td><td style="text-align:center;">用Go编写的Linux视频捕获库。</td></tr></tbody></table><p><br></p>',80)]))}const s=e(l,[["render",o],["__file","常用包大全.html.vue"]]),c=JSON.parse('{"path":"/golang/%E5%8E%9F%E7%90%86/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html","title":"常用包和第三方包介绍","lang":"zh-CN","frontmatter":{"title":"常用包和第三方包介绍","order":5,"author":"xiaoxie","date":"2020-01-01T00:00:00.000Z","tag":["golang"],"star":true,"description":"常用包和第三方包介绍 包 常用官方包说明 常用第三方包说明 常用框架 完整标准库列表 优秀的第三方库 音频和音乐 数据结构:Go中的通用数据结构和算法 分布式系统:Go中的通用数据结构和算法 电子邮件:实现电子邮件创建和发送的库和工具 嵌入式脚本语言:在go代码中嵌入其他语言 错误处理 处理文件和文件系统的库 金融:会计和财务软件包 游戏开发:游戏开发...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%8E%9F%E7%90%86/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"常用包和第三方包介绍"}],["meta",{"property":"og:description","content":"常用包和第三方包介绍 包 常用官方包说明 常用第三方包说明 常用框架 完整标准库列表 优秀的第三方库 音频和音乐 数据结构:Go中的通用数据结构和算法 分布式系统:Go中的通用数据结构和算法 电子邮件:实现电子邮件创建和发送的库和工具 嵌入式脚本语言:在go代码中嵌入其他语言 错误处理 处理文件和文件系统的库 金融:会计和财务软件包 游戏开发:游戏开发..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-19T15:35:19.000Z"}],["meta",{"property":"article:author","content":"xiaoxie"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:published_time","content":"2020-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-19T15:35:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用包和第三方包介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-19T15:35:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xiaoxie\\"}]}"]]},"headers":[{"level":2,"title":"常用包","slug":"常用包","link":"#常用包","children":[]},{"level":2,"title":"常用第三方包","slug":"常用第三方包","link":"#常用第三方包","children":[]},{"level":2,"title":"必看项目","slug":"必看项目","link":"#必看项目","children":[]},{"level":2,"title":"完整标准库列表","slug":"完整标准库列表","link":"#完整标准库列表","children":[]},{"level":2,"title":"其他优秀的开源工具分类","slug":"其他优秀的开源工具分类","link":"#其他优秀的开源工具分类","children":[{"level":3,"title":"音频和音乐","slug":"音频和音乐","link":"#音频和音乐","children":[]},{"level":3,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[]},{"level":3,"title":"分布式系统","slug":"分布式系统","link":"#分布式系统","children":[]},{"level":3,"title":"电子邮件","slug":"电子邮件","link":"#电子邮件","children":[]},{"level":3,"title":"嵌入式脚本语言","slug":"嵌入式脚本语言","link":"#嵌入式脚本语言","children":[]},{"level":3,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":3,"title":"文件","slug":"文件","link":"#文件","children":[]},{"level":3,"title":"金融","slug":"金融","link":"#金融","children":[]},{"level":3,"title":"游戏开发","slug":"游戏开发","link":"#游戏开发","children":[]},{"level":3,"title":"地理位置","slug":"地理位置","link":"#地理位置","children":[]},{"level":3,"title":"编译器","slug":"编译器","link":"#编译器","children":[]},{"level":3,"title":"Goroutines","slug":"goroutines","link":"#goroutines","children":[]},{"level":3,"title":"图形界面","slug":"图形界面","link":"#图形界面","children":[]},{"level":3,"title":"图片","slug":"图片","link":"#图片","children":[]},{"level":3,"title":"物联网","slug":"物联网","link":"#物联网","children":[]},{"level":3,"title":"JSON格式","slug":"json格式","link":"#json格式","children":[]},{"level":3,"title":"机器学习","slug":"机器学习","link":"#机器学习","children":[]},{"level":3,"title":"金融","slug":"金融-1","link":"#金融-1","children":[]},{"level":3,"title":"自然语言处理","slug":"自然语言处理","link":"#自然语言处理","children":[]},{"level":3,"title":"网络","slug":"网络","link":"#网络","children":[]},{"level":3,"title":"视频库","slug":"视频库","link":"#视频库","children":[]}]}],"git":{"createdTime":1734622519000,"updatedTime":1734622519000,"contributors":[{"name":"xiaoxie001","username":"xiaoxie001","email":"xie18115@outlook.com","commits":1,"url":"https://github.com/xiaoxie001"}]},"readingTime":{"minutes":44.39,"words":13317},"filePathRelative":"golang/原理/常用包大全.md","localizedDate":"2020年1月1日","autoDesc":true,"excerpt":"\\n<ul>\\n<li>包\\n<ul>\\n<li><a href=\\"#%E5%B8%B8%E7%94%A8%E5%8C%85\\">常用官方包说明</a></li>\\n<li><a href=\\"#%E4%B8%89%E6%96%B9%E5%8C%85\\">常用第三方包说明</a></li>\\n<li><a href=\\"#%E6%A1%86%E6%9E%B6\\">常用框架</a></li>\\n<li><a href=\\"#%E5%AE%8C%E6%95%B4%E5%8C%85\\">完整标准库列表</a></li>\\n<li><a href=\\"#%E4%BC%98%E7%A7%80%E7%9A%84%E5%BC%80%E6%BA%90%E5%BA%93\\">优秀的第三方库</a>\\n<ul>\\n<li><a href=\\"#%E9%9F%B3%E9%A2%91%E5%92%8C%E9%9F%B3%E4%B9%90\\">音频和音乐</a></li>\\n<li><a href=\\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\\">数据结构:Go中的通用数据结构和算法</a></li>\\n<li><a href=\\"#%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F\\">分布式系统:Go中的通用数据结构和算法</a></li>\\n<li><a href=\\"#%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6\\">电子邮件:实现电子邮件创建和发送的库和工具</a></li>\\n<li><a href=\\"#%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80\\">嵌入式脚本语言:在go代码中嵌入其他语言</a></li>\\n<li><a href=\\"#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\\">错误处理</a></li>\\n<li><a href=\\"#%E6%96%87%E4%BB%B6\\">处理文件和文件系统的库</a></li>\\n<li><a href=\\"#%E9%87%91%E8%9E%8D\\">金融:会计和财务软件包</a></li>\\n<li><a href=\\"#%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91\\">游戏开发:游戏开发相关库</a></li>\\n<li><a href=\\"#%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE\\">地理位置:地理相关的位置信息和工具库</a></li>\\n<li><a href=\\"#%E7%BC%96%E8%AF%91%E5%99%A8\\">编译器相关:转到其他语言</a></li>\\n<li><a href=\\"#Goroutines\\">Goroutines:用于管理和使用Goroutines的工具</a></li>\\n<li><a href=\\"#%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2\\">图形界面:用于构建GUI应用程序的库</a></li>\\n<li><a href=\\"#%E5%9B%BE%E7%89%87\\">图片:用于处理图像的库</a></li>\\n<li><a href=\\"#%E7%89%A9%E8%81%94%E7%BD%91\\">物联网:物联网设备编程库</a></li>\\n<li><a href=\\"#JSON%E6%A0%BC%E5%BC%8F\\">JSON格式:用于处理JSON的库</a></li>\\n<li><a href=\\"#%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0\\">机器学习:常用机器学习库</a></li>\\n<li><a href=\\"#%E5%BE%AE%E8%BD%AF%E5%8A%9E%E5%85%AC%E8%BD%AF%E4%BB%B6\\">微软办公软件</a></li>\\n<li><a href=\\"#%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86\\">自然语言处理</a></li>\\n<li><a href=\\"#%E7%BD%91%E7%BB%9C\\">网络:与网络各层配合使用的库</a></li>\\n<li><a href=\\"#%E8%A7%86%E9%A2%91\\">视频:用于处理视频的库</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>"}');export{s as comp,c as data};
