import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as e,e as l,f as p,a as o,r as n,o as s,d as i}from"./app-DIJDtupu.js";const c={};function h(u,t){const a=n("RouteLink");return s(),d("div",null,[t[3]||(t[3]=e("h2",{id:"目录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目录"},[e("span",null,"目录")])],-1)),t[4]||(t[4]=e("br",null,null,-1)),e("ul",null,[e("li",null,[l(a,{to:"/middleware/%E6%B6%88%E6%81%AF%E7%BB%84%E4%BB%B6/EMQX.html"},{default:p(()=>t[0]||(t[0]=[i("EMQX")])),_:1})]),e("li",null,[l(a,{to:"/middleware/%E6%B6%88%E6%81%AF%E7%BB%84%E4%BB%B6/RocketMQ.html"},{default:p(()=>t[1]||(t[1]=[i("RocketMQ")])),_:1})]),e("li",null,[l(a,{to:"/middleware/%E6%B6%88%E6%81%AF%E7%BB%84%E4%BB%B6/kafka.html"},{default:p(()=>t[2]||(t[2]=[i("Kafka")])),_:1})])]),t[5]||(t[5]=o('<br><br><br><h3 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型"><span>技术选型</span></a></h3><p>消息队列（MQ）是指利用消息进行通信或交换的中间件产品，是分布式系统常用的组件之一。典型的消息队列有ActiveMQ、RabbitMQ、RocketMQ等。它们的差异主要体现在三个方面：</p><h3 id="消息队列的作用" tabindex="-1"><a class="header-anchor" href="#消息队列的作用"><span>消息队列的作用</span></a></h3><ul><li>1、应用耦合：多应用间通过消息队列对同一消息进行处理，避免调用接口失败导致整个过程失败；</li><li>2、异步处理：多应用对消息队列中同一消息进行处理，应用间并发处理消息，相比串行处理，减少处理时间；</li><li>3、限流削峰：广泛应用于秒杀或抢购活动中，避免流量过大导致应用系统挂掉的情况；</li><li>4、消息驱动的系统：系统分为消息队列、消息生产者、消息消费者，生产者负责产生消息，消费者(可能有多个)负责对消息进行处理；</li></ul><p><em>首先选择消息队列要满足以下几个条件：</em></p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>1、开源</li><li>2、流行</li><li>3、兼容性强</li></ul><p>消息队列需要：</p><ul><li>1、消息的可靠传递：确保不丢消息；</li><li>2、Cluster：支持集群，确保不会因为某个节点宕机导致服务不可用，当然也不能丢消息；</li><li>3、性能：具备足够好的性能，能满足绝大多数场景的性能要求。</li></ul></div><h3 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq"><span>RabbitMQ</span></a></h3><p>RabbitMQ 2007年发布，是一个在 AMQP (高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。</p><p><strong>优点</strong></p><p>1、RabbitMQ 的特点 Messaging that just works，“开箱即用的消息队列”。 RabbitMQ 是一个相对轻量的消息队列，非常容易部署和使用；</p><p>2、多种协议的支持：支持多种消息队列协议，算得上是最流行的消息队列之一；</p><p>3、灵活的路由配置，和其他消息队列不同的是，它在生产者 （Producer）和队列（Queue）之间增加了一个Exchange模块，你可以理解为交换机。这个Exchange模块的作用和交换机也非常相似，根据配置的路由规则将生产者发出的消息分发到不同的队 列中。路由的规则也非常灵活，甚至你可以自己来实现路由规则。</p><p>4、健壮、稳定、易用、跨平台、支持多种语言、文档齐全，RabbitMQ的客户端支持的编程语言大概是所有消息队列中最多的；</p><p>5、管理界面较丰富，在互联网公司也有较大规模的应用；</p><p>6、社区比较活跃。</p><p><strong>缺点</strong></p><p>1、RabbitMQ 对消息堆积的处理不好，在它的设计理念里面，消息队列是一个管道，大量的消息积压是一种不正常的情况，应当尽量去避免。当大量消息积压的时候，会导致RabbitMQ的性能急剧下降；</p><p>2、性能上有瓶颈，它大概每秒钟可以处理几万到十几万条消息，这个对于大多数场景足够使用了，如果对需求对性能要求非常高，那么就不太合适了。</p><p>3、RabbitMQ 使用 Erlang。开发，Erlang 的学习成本还是很高的，如果后期进行二次开发，就不太容易了。</p><h3 id="rocketmq" tabindex="-1"><a class="header-anchor" href="#rocketmq"><span>RocketMQ</span></a></h3><p>RocketMQ出自阿里公司的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进，消息可靠性上比 Kafka 更好。经历过多次双十一的考验，性能和稳定性还是值得信赖的，RocketMQ在阿里集团被广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog分发等场景。</p><p><strong>优点</strong></p><p>1、单机吞吐量：十万级；</p><p>2、可用性：非常高，分布式架构；</p><p>3、消息可靠性：经过参数优化配置，消息可以做到0丢失，RocketMQ 的所有消息都是持久化的，先写入系统 PAGECACHE，然后刷盘，可以保证内存与磁盘都有一份数据；</p><p>4、功能支持：MQ功能较为完善，还是分布式的，扩展性好；</p><p>5、支持10亿级别的消息堆积，不会因为堆积导致性能下降；</p><p>6、源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控。</p><p><strong>缺点</strong></p><p>1、支持的客户端语言不多，目前是 java 及 c++，其中 c++ 不成熟；</p><p>2、社区活跃度一般，作为国产的消息队列，相比国外的比较流行的同类产品，在国际上还没有那么流行，与周边生态系统的集成和兼容程度要略逊一筹；</p><p>3、没有在 mq 核心中去实现 JMS 等接口，有些系统要迁移需要修改大量代码。</p><h3 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka"><span>Kafka</span></a></h3><p>Apache Kafka是一个分布式消息发布订阅系统。它最初由LinkedIn公司基于独特的设计实现为一个分布式的提交日志系统( a distributed commit log)，之后成为Apache项目的一部分。</p><p>这是一款为大数据而生的消息中间件，在数据采集、传输、存储的过程中发挥着举足轻重的作用。</p><p><strong>优点</strong></p><p>1、性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高；</p><p>2、性能卓越，单机写入TPS约在百万条/秒，消息大小10个字节；</p><p>3、可用性：非常高，Kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用；</p><p>4、消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;</p><p>5、有优秀的第三方Kafka Web管理界面Kafka-Manager；</p><p>6、在日志领域比较成熟，被多家公司和多个开源项目使用；</p><p>7、功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用</p><p><strong>缺点</strong></p><p>由于“攒一波再处理”导致延迟比较高</p><h3 id="pulsar" tabindex="-1"><a class="header-anchor" href="#pulsar"><span>Pulsar</span></a></h3><p>Pulsar 是一个用于服务器到服务器的消息系统，具有多租户、高性能等优势。 Pulsar 最初由 Yahoo 开发，目前由 Apache 软件基金会管理。</p><p><strong>优点</strong></p><p>1、更多功能：Pulsar Function、多租户、Schema registry、n 层存储、多种消费模式和持久性模式等；</p><p>2、Pulsar 的单个实例原生支持多个集群，可跨机房在集群间无缝地完成消息复制；</p><p>3、极低的发布延迟和端到端延迟；</p><p>4、可无缝扩展到超过一百万个 topic；</p><p>5、简单的客户端 API，支持 Java、Go、Python 和 C++。</p><p>6、Pulsar 的单个实例原生支持多个集群，可跨机房在集群间无缝地完成消息复制。</p><p><strong>缺点</strong></p><p>正处于成长期，流行度和成熟度相对没有那么高</p><h3 id="_2-3、如何选择合适的消息队列" tabindex="-1"><a class="header-anchor" href="#_2-3、如何选择合适的消息队列"><span>2.3、如何选择合适的消息队列</span></a></h3><ul><li><p>如果对于消息队列的功能和性能要求不是很高，那么RabbitMQ就够了，开箱即用。</p></li><li><p>如果系统使用消息队列主要场景是处理在线业务，比如在交易系统中用消息队列传递订单，RocketMQ 的低延迟和金融级的稳定性就可以满足。</p></li><li><p>要处理海量的消息，像收集日志、监控信息或是前端的埋点这类数据，或是你的应用场景大量使用 了大数据、流计算相关的开源产品，那 Kafka 就是最合适的了。</p></li><li><p>如果数据量很大，同时不希望有 Kafka 的高延迟，刚好业务场景是金融场景。RocketMQ 对 Topic 运营不太友好，特别是不支持按 Topic 删除失效消息，以及不具备宕机 Failover 能力。那么 Pulsar 可能就是你的一个选择了。</p></li></ul><br><table><thead><tr><th>维度</th><th>RabbitMQ</th><th>Kafka</th><th>RocketMQ</th><th>EMQX</th></tr></thead><tbody><tr><td><code>开发语言</code></td><td>Erlang</td><td>Scala/Java</td><td>Java</td><td>Erlang</td></tr><tr><td><code>单机吞吐</code></td><td>万级/秒</td><td>十万级/秒</td><td>万级/秒</td><td>万级/秒</td></tr><tr><td><code>延迟</code></td><td>微妙级</td><td>毫秒级</td><td>毫秒级</td><td>亚毫秒级</td></tr><tr><td><code>单机支持队列数/连接数</code></td><td>数万/数万</td><td>数千（topic分区）/十万级</td><td>数万/数万</td><td>不适用/百万级</td></tr><tr><td><code>消息协议</code></td><td>amqp、mqtt、stomq</td><td>自定义协议</td><td>自定义协议</td><td>mqtt</td></tr><tr><td><code>易用性</code></td><td>可视化界面，操作简单</td><td>命令行+开源工具，操作中等</td><td>控制台，操作中等</td><td>企业版有可视化，操作简单</td></tr><tr><td><code>适用场景</code></td><td>中小规模企业级消息服务</td><td>大规模日志处理、流计算</td><td>中大规模的金融交易、订单处理</td><td>物联网中的实时通讯</td></tr></tbody></table><br><div class="hint-container tip"><p class="hint-container-title">提示</p><p>EMQX是基于MQTT协议，使用主题(Topic)而不是队列来组织消息，为此没有队列数说法</p></div>',65))])}const k=r(c,[["render",h],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/middleware/%E6%B6%88%E6%81%AF%E7%BB%84%E4%BB%B6/","title":"消息组件","lang":"zh-CN","frontmatter":{"index":false,"title":"消息组件","icon":"/assets/icon/MQ.png","description":"目录 技术选型 消息队列（MQ）是指利用消息进行通信或交换的中间件产品，是分布式系统常用的组件之一。典型的消息队列有ActiveMQ、RabbitMQ、RocketMQ等。它们的差异主要体现在三个方面： 消息队列的作用 1、应用耦合：多应用间通过消息队列对同一消息进行处理，避免调用接口失败导致整个过程失败； 2、异步处理：多应用对消息队列中同一消息进行...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/middleware/%E6%B6%88%E6%81%AF%E7%BB%84%E4%BB%B6/"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"消息组件"}],["meta",{"property":"og:description","content":"目录 技术选型 消息队列（MQ）是指利用消息进行通信或交换的中间件产品，是分布式系统常用的组件之一。典型的消息队列有ActiveMQ、RabbitMQ、RocketMQ等。它们的差异主要体现在三个方面： 消息队列的作用 1、应用耦合：多应用间通过消息队列对同一消息进行处理，避免调用接口失败导致整个过程失败； 2、异步处理：多应用对消息队列中同一消息进行..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-31T07:09:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-31T07:09:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息组件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-31T07:09:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[{"level":3,"title":"技术选型","slug":"技术选型","link":"#技术选型","children":[]},{"level":3,"title":"消息队列的作用","slug":"消息队列的作用","link":"#消息队列的作用","children":[]},{"level":3,"title":"RabbitMQ","slug":"rabbitmq","link":"#rabbitmq","children":[]},{"level":3,"title":"RocketMQ","slug":"rocketmq","link":"#rocketmq","children":[]},{"level":3,"title":"Kafka","slug":"kafka","link":"#kafka","children":[]},{"level":3,"title":"Pulsar","slug":"pulsar","link":"#pulsar","children":[]},{"level":3,"title":"2.3、如何选择合适的消息队列","slug":"_2-3、如何选择合适的消息队列","link":"#_2-3、如何选择合适的消息队列","children":[]}]}],"git":{"createdTime":1734622519000,"updatedTime":1735628969000,"contributors":[{"name":"xiaoxie001","username":"xiaoxie001","email":"xie18115@outlook.com","commits":3,"url":"https://github.com/xiaoxie001"}]},"readingTime":{"minutes":7.54,"words":2261},"filePathRelative":"middleware/消息组件/README.md","localizedDate":"2024年12月19日","autoDesc":true,"excerpt":"<h2>目录</h2>\\n<br>\\n<ul>\\n<li><a href=\\"/vuepress-app/middleware/%E6%B6%88%E6%81%AF%E7%BB%84%E4%BB%B6/EMQX.html\\" target=\\"_blank\\">EMQX</a></li>\\n<li><a href=\\"/vuepress-app/middleware/%E6%B6%88%E6%81%AF%E7%BB%84%E4%BB%B6/RocketMQ.html\\" target=\\"_blank\\">RocketMQ</a></li>\\n<li><a href=\\"/vuepress-app/middleware/%E6%B6%88%E6%81%AF%E7%BB%84%E4%BB%B6/kafka.html\\" target=\\"_blank\\">Kafka</a></li>\\n</ul>"}');export{k as comp,g as data};
