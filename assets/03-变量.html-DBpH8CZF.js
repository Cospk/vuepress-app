import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-DIJDtupu.js";const s={};function l(r,e){return n(),a("div",null,e[0]||(e[0]=[t('<p>这是我们 [Golang 系列教程](/subject/2)的第 3 个教程，探讨 Golang 里的变量（Variables）。 你可以阅读 Golang 系列 [**教程第 2 部分：Hello World**](/articles/11755)，学习如何配置 Golang，并运行 Hello World 程序。 ### 变量是什么 变量指定了某存储单元（Memory Location）的名称，该存储单元会存储特定类型的值。在 Go 中，有多种语法用于声明变量。 ### 声明单个变量 **var name type** 是声明单个变量的语法。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; func main() { var age int // 变量声明 fmt.Println(&quot;my age is&quot;, age) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/XrveIxw%5C_YI" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/XrveIxw\\_YI</a>) 语句 `var age int` 声明了一个 int 类型的变量，名字为 age。我们还没有给该变量赋值。如果变量未被赋值，Go 会自动地将其初始化，赋值该变量类型的零值（Zero Value）。本例中 age 就被赋值为 0。如果你运行该程序，你会看到如下输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> my age is 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>变量可以赋值为本类型的任何值。上一程序中的 age 可以赋值为任何整型值（Integer Value）。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; func main() { var age int // 变量声明 fmt.Println(&quot;my age is&quot;, age) age = 29 // 赋值 fmt.Println(&quot;my age is&quot;, age) age = 54 // 赋值 fmt.Println(&quot;my new age is&quot;, age) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/z4nKMjBxLx" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/z4nKMjBxLx</a>) 上面的程序会有如下输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> my age is 0 my age is 29 my new age is 54</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="声明变量并初始化-声明变量的同时可以给定初始值。-var-name-type-initialvalue-的语法用于声明变量并初始化。" tabindex="-1"><a class="header-anchor" href="#声明变量并初始化-声明变量的同时可以给定初始值。-var-name-type-initialvalue-的语法用于声明变量并初始化。"><span>声明变量并初始化 声明变量的同时可以给定初始值。 **var name type = initialvalue** 的语法用于声明变量并初始化。</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; func main() { var age int = 29 // 声明变量并初始化 fmt.Println(&quot;my age is&quot;, age) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/TFfpzsrchh" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/TFfpzsrchh</a>) 在上面的程序中，age 是具有初始值 29 的 int 类型变量。如果你运行上面的程序，你可以看见下面的输出，证实 age 已经被初始化为 29。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> my age is 29</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="类型推断-type-inference-如果变量有初始值-那么-go-能够自动推断具有初始值的变量的类型。因此-如果变量有初始值-就可以在变量声明中省略-type-。-如果变量声明的语法是-var-name-initialvalue-go-能够根据初始值自动推断变量的类型。-在下面的例子中-你可以看到在第-6-行-我们省略了变量-age-的-int-类型-go-依然推断出了它是-int-类型。" tabindex="-1"><a class="header-anchor" href="#类型推断-type-inference-如果变量有初始值-那么-go-能够自动推断具有初始值的变量的类型。因此-如果变量有初始值-就可以在变量声明中省略-type-。-如果变量声明的语法是-var-name-initialvalue-go-能够根据初始值自动推断变量的类型。-在下面的例子中-你可以看到在第-6-行-我们省略了变量-age-的-int-类型-go-依然推断出了它是-int-类型。"><span>类型推断（Type Inference） 如果变量有初始值，那么 Go 能够自动推断具有初始值的变量的类型。因此，如果变量有初始值，就可以在变量声明中省略 `type`。 如果变量声明的语法是 **var name = initialvalue**，Go 能够根据初始值自动推断变量的类型。 在下面的例子中，你可以看到在第 6 行，我们省略了变量 `age` 的 `int` 类型，Go 依然推断出了它是 int 类型。</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; func main() { var age = 29 // 可以推断类型 fmt.Println(&quot;my age is&quot;, age) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/FgNbfL3WIt" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/FgNbfL3WIt</a>) ### 声明多个变量 Go 能够通过一条语句声明多个变量。 声明多个变量的语法是 **var name1, name2 type = initialvalue1, initialvalue2**。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; func main() { var width, height int = 100, 50 // 声明多个变量 fmt.Println(&quot;width is&quot;, width, &quot;height is&quot;, heigh) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/4aOQyt55ah" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/4aOQyt55ah</a>) 上述程序将在标准输出打印 `width is 100 height is 50`。 你可能已经想到，如果 width 和 height 省略了初始化，它们的初始值将赋值为 0。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; func main() { var width, height int fmt.Println(&quot;width is&quot;, width, &quot;height is&quot;, height) width = 100 height = 50 fmt.Println(&quot;new width is&quot;, width, &quot;new height is &quot;, height) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/DM00pcBbsu" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/DM00pcBbsu</a>) 上面的程序将会打印：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> width is 0 height is 0 new width is 100 new height is 50</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在有些情况下，我们可能会想要在一个语句中声明不同类型的变量。其语法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go var ( name1 = initialvalue1, name2 = initialvalue2 )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用上述语法，下面的程序声明不同类型的变量。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; func main() { var ( name = &quot;naveen&quot; age = 29 height int ) fmt.Println(&quot;my name is&quot;, name, &quot;, age is&quot;, age, &quot;and height is&quot;, height) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/7pkp74h%5C_9L" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/7pkp74h\\_9L</a>) 这里我们声明了 **string 类型的 name、int 类型的 age 和 height**（我们将会在下一教程中讨论 golang 所支持的变量类型）。运行上面的程序会产生输出 `my name is naveen , age is 29 and height is 0`。 ### 简短声明 Go 也支持一种声明变量的简洁形式，称为简短声明（Short Hand Declaration），该声明使用了 **:=** 操作符。 声明变量的简短语法是 **name := initialvalue**。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; func main() { name, age := &quot;naveen&quot;, 29 // 简短声明 fmt.Println(&quot;my name is&quot;, name, &quot;age is&quot;, age) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/ctqgw4w6kx" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/ctqgw4w6kx</a>) 运行上面的程序，可以看到输出为 `my name is naveen age is 29`。 简短声明要求 **:=** 操作符左边的所有变量都有初始值。下面程序将会抛出错误 `cannot assign 1 values to 2 variables`，这是因为 **age 没有被赋值**。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; func main() { name, age := &quot;naveen&quot; //error fmt.Println(&quot;my name is&quot;, name, &quot;age is&quot;, age) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/wZd2HmDvqw" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/wZd2HmDvqw</a>) 简短声明的语法要求 **:=** 操作符的左边至少有一个变量是尚未声明的。考虑下面的程序：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; func main() { a, b := 20, 30 // 声明变量a和b fmt.Println(&quot;a is&quot;, a, &quot;b is&quot;, b) b, c := 40, 50 // b已经声明，但c尚未声明 fmt.Println(&quot;b is&quot;, b, &quot;c is&quot;, c) b, c = 80, 90 // 给已经声明的变量b和c赋新值 fmt.Println(&quot;changed b is&quot;, b, &quot;c is&quot;, c) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/MSUYR8vazB" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/MSUYR8vazB</a>) 在上面程序中的第 8 行，由于 b 已经被声明，而 c 尚未声明，因此运行成功并且输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> a is 20 b is 30 b is 40 c is 50 changed b is 80 c is 90</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但是如果我们运行下面的程序:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import &quot;fmt&quot; func main() { a, b := 20, 30 // 声明a和b fmt.Println(&quot;a is&quot;, a, &quot;b is&quot;, b) a, b := 40, 50 // 错误，没有尚未声明的变量 }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行��序](<a href="https://play.golang.org/p/EYTtRnlDu3" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/EYTtRnlDu3</a>) 上面运行后会抛出 `no new variables on left side of :=` 的错误，这是因为 a 和 b 的变量已经声明过了，**:=** 的左边并没有尚未声明的变量。 变量也可以在运行时进行赋值。考虑下面的程序：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; &quot;math&quot; ) func main() { a, b := 145.8, 543.8 c := math.Min(a, b) fmt.Println(&quot;minimum value is &quot;, c) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/7XojAtrpH9" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/7XojAtrpH9</a>) 在上面的程序中，c 的值是运行过程中计算得到的，即 a 和 b 的最小值。上述程序会打印：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> minimum value is 145.8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>由于 Go 是强类型（Strongly Typed）语言，因此不允许某一类型的变量赋值为其他类型的值。下面的程序会抛出错误 `cannot use &quot;naveen&quot; (type string) as type int in assignment`，这是因为 age 本来声明为 int 类型，而我们却尝试给它赋字符串类型的值。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main func main() { age := 29 // age是int类型 age = &quot;naveen&quot; // 错误，尝试赋值一个字符串给int类型变量 }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/K5rz4gxjPj" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/K5rz4gxjPj</a>) 感谢您的阅读，请在评论栏上面发布您的问题和反馈。 **上一教程 - [Hello World](<a href="https://studygolang.com/articles/11755" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/11755</a>)**</p>',41)]))}const h=i(s,[["render",l],["__file","03-变量.html.vue"]]),d=JSON.parse('{"path":"/golang/%E5%9F%BA%E7%A1%80/03-%E5%8F%98%E9%87%8F.html","title":"Go 系列教程 —— 3. 变量","lang":"zh-CN","frontmatter":{"title":"Go 系列教程 —— 3. 变量","source_url":"https://studygolang.com/articles/11756","category":"Go系列教程","description":"这是我们 [Golang 系列教程](/subject/2)的第 3 个教程，探讨 Golang 里的变量（Variables）。 你可以阅读 Golang 系列 [**教程第 2 部分：Hello World**](/articles/11755)，学习如何配置 Golang，并运行 Hello World 程序。 ### 变量是什么 变量指定了某存...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%9F%BA%E7%A1%80/03-%E5%8F%98%E9%87%8F.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"Go 系列教程 —— 3. 变量"}],["meta",{"property":"og:description","content":"这是我们 [Golang 系列教程](/subject/2)的第 3 个教程，探讨 Golang 里的变量（Variables）。 你可以阅读 Golang 系列 [**教程第 2 部分：Hello World**](/articles/11755)，学习如何配置 Golang，并运行 Hello World 程序。 ### 变量是什么 变量指定了某存..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 系列教程 —— 3. 变量\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[{"level":3,"title":"声明变量并初始化 声明变量的同时可以给定初始值。 **var name type = initialvalue** 的语法用于声明变量并初始化。","slug":"声明变量并初始化-声明变量的同时可以给定初始值。-var-name-type-initialvalue-的语法用于声明变量并初始化。","link":"#声明变量并初始化-声明变量的同时可以给定初始值。-var-name-type-initialvalue-的语法用于声明变量并初始化。","children":[]},{"level":3,"title":"类型推断（Type Inference） 如果变量有初始值，那么 Go 能够自动推断具有初始值的变量的类型。因此，如果变量有初始值，就可以在变量声明中省略 `type`。 如果变量声明的语法是 **var name = initialvalue**，Go 能够根据初始值自动推断变量的类型。 在下面的例子中，你可以看到在第 6 行，我们省略了变量 `age` 的 `int` 类型，Go 依然推断出了它是 int 类型。","slug":"类型推断-type-inference-如果变量有初始值-那么-go-能够自动推断具有初始值的变量的类型。因此-如果变量有初始值-就可以在变量声明中省略-type-。-如果变量声明的语法是-var-name-initialvalue-go-能够根据初始值自动推断变量的类型。-在下面的例子中-你可以看到在第-6-行-我们省略了变量-age-的-int-类型-go-依然推断出了它是-int-类型。","link":"#类型推断-type-inference-如果变量有初始值-那么-go-能够自动推断具有初始值的变量的类型。因此-如果变量有初始值-就可以在变量声明中省略-type-。-如果变量声明的语法是-var-name-initialvalue-go-能够根据初始值自动推断变量的类型。-在下面的例子中-你可以看到在第-6-行-我们省略了变量-age-的-int-类型-go-依然推断出了它是-int-类型。","children":[]}],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":5.62,"words":1685},"filePathRelative":"golang/基础/03-变量.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"<p>这是我们 [Golang 系列教程](/subject/2)的第 3 个教程，探讨 Golang 里的变量（Variables）。 你可以阅读 Golang 系列 [**教程第 2 部分：Hello World**](/articles/11755)，学习如何配置 Golang，并运行 Hello World 程序。 ### 变量是什么 变量指定了某存储单元（Memory Location）的名称，该存储单元会存储特定类型的值。在 Go 中，有多种语法用于声明变量。 ### 声明单个变量 **var name type** 是声明单个变量的语法。</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>go package main import \\"fmt\\" func main() { var age int // 变量声明 fmt.Println(\\"my age is\\", age) }</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{h as comp,d as data};
