import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as r,o as l}from"./app-b9yWyLtc.js";const i={};function a(o,t){return l(),e("div",null,t[0]||(t[0]=[r('<h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><br><ul><li><a href="">gin</a></li><li><a href="">beego</a></li><li><a href="">go-zero</a></li></ul><br><br><hr><h2 id="为什么要学web框架" tabindex="-1"><a class="header-anchor" href="#为什么要学web框架"><span>为什么要学web框架？</span></a></h2><p>作为初学者很多时候，在学习一个框架的时候，一定要搞清楚我们为什么要学习它，这个非常的重要。</p><p>随着互联网技术的发展，在早期我们大部分情况下，编写的都是静态网页html。如果有100篇文章就要编写一百篇与之对应的静态网页。这样是非常痛苦的。于是乎开始有了动态网页，动态网页必须要结合服务器端的技术，比如：Go、Java等。有了这些服务端语言的加持这样就可以完成一个静态网页到动态网页的转化。如下图：</p><img src="https://gavvy-cloud.oss-cn-shenzhen.aliyuncs.com/web/web_whyLearn.png" alt="image" style="zoom:80%;"><p>假设我们这里选择的是：Gin+gorm。</p><p>用户在浏览器通过<code>ip+port+路由</code>这样的地址访问，这个地址其实是服务器提供。用于寻址，先根据ip找到服务器在哪里，端口找到对应的服务，web服务会根据路由来匹配已经定义的路由来进行访问，执行对应的逻辑（也就是未来web框架的路由处理要完成的部分）。</p><p>执行逻辑中gorm会从数据库查询数据出来，根据定义好的模板开始用对应的模板语法进行碰撞和渲染，最终呈现一个完整的网页</p><p>这就是经典的：B/S架构</p><h2 id="主流的web框架" tabindex="-1"><a class="header-anchor" href="#主流的web框架"><span>主流的web框架</span></a></h2><table><thead><tr><th>评估维度</th><th>Gin</th><th>Beego</th><th>go-zero</th></tr></thead><tbody><tr><td><strong>基本信息</strong></td><td></td><td></td><td></td></tr><tr><td>GitHub Stars</td><td>71.2k+</td><td>29.7k+</td><td>24.9k+</td></tr><tr><td>开源协议</td><td>MIT</td><td>Apache-2.0</td><td>MIT</td></tr><tr><td><strong>技术特性</strong></td><td></td><td></td><td></td></tr><tr><td>路由性能</td><td>★★★★★</td><td>★★★★☆</td><td>★★★★★</td></tr><tr><td>内存占用</td><td>★★★★★</td><td>★★★☆☆</td><td>★★★★☆</td></tr><tr><td>扩展性</td><td>★★★★★</td><td>★★★☆☆</td><td>★★★★☆</td></tr><tr><td>代码生成</td><td>★★☆☆☆</td><td>★★★★☆</td><td>★★★★★</td></tr><tr><td><strong>功能特性</strong></td><td></td><td></td><td></td></tr><tr><td>路由管理</td><td>基础路由</td><td>完整MVC</td><td>gRPC/HTTP</td></tr><tr><td>ORM支持</td><td>无内置</td><td>内置ORM</td><td>内置gorm</td></tr><tr><td>参数验证</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>中间件</td><td>丰富</td><td>较多</td><td>丰富</td></tr><tr><td>模板引擎</td><td>支持</td><td>完整支持</td><td>不支持</td></tr><tr><td>缓存支持</td><td>无内置</td><td>内置</td><td>内置</td></tr><tr><td><strong>微服务特性</strong></td><td></td><td></td><td></td></tr><tr><td>服务发现</td><td>无内置</td><td>部分支持</td><td>完整支持</td></tr><tr><td>负载均衡</td><td>无内置</td><td>部分支持</td><td>内置支持</td></tr><tr><td>熔断限流</td><td>无内置</td><td>部分支持</td><td>内置支持</td></tr><tr><td>链路追踪</td><td>三方支持</td><td>部分支持</td><td>内置支持</td></tr><tr><td><strong>开发体验</strong></td><td></td><td></td><td></td></tr><tr><td>学习曲线</td><td>简单</td><td>中等</td><td>较陡</td></tr><tr><td>开发效率</td><td>★★★★☆</td><td>★★★★★</td><td>★★★★★</td></tr><tr><td>文档质量</td><td>★★★★★</td><td>★★★★☆</td><td>★★★★☆</td></tr><tr><td>社区活跃度</td><td>★★★★★</td><td>★★★★☆</td><td>★★★★☆</td></tr><tr><td><strong>适用场景</strong></td><td></td><td></td><td></td></tr><tr><td>小型项目</td><td>✓✓✓</td><td>✓✓</td><td>✓</td></tr><tr><td>单体应用</td><td>✓✓✓</td><td>✓✓✓</td><td>✓</td></tr><tr><td>微服务</td><td>✓</td><td>✓✓</td><td>✓✓✓</td></tr><tr><td>API服务</td><td>✓✓✓</td><td>✓✓</td><td>✓✓✓</td></tr></tbody></table><h3 id="_1-框架优劣势总结" tabindex="-1"><a class="header-anchor" href="#_1-框架优劣势总结"><span>1. 框架优劣势总结</span></a></h3><h4 id="gin" tabindex="-1"><a class="header-anchor" href="#gin"><span>⭐Gin</span></a></h4><p>优势：</p><ul><li>轻量级、高性能</li><li>学习成本低</li><li>社区活跃，生态丰富</li><li>适合快速开发API</li></ul><p>劣势：</p><ul><li>功能相对简单</li><li>企业级特性需要集成</li><li>微服务支持有限</li></ul><h4 id="beego" tabindex="-1"><a class="header-anchor" href="#beego"><span>Beego</span></a></h4><p>优势：</p><ul><li>功能完整，开箱即用</li><li>MVC架构清晰</li><li>开发工具支持好</li><li>适合全栈开发</li></ul><p>劣势：</p><ul><li>框架较重</li><li>性能一般</li><li>不够灵活</li></ul><h4 id="go-zero" tabindex="-1"><a class="header-anchor" href="#go-zero"><span>🌟Go-zero</span></a></h4><p>优势：</p><ul><li>微服务治理能力强</li><li>性能优秀</li><li>代码生成完善</li><li>可观测性好</li></ul><p>劣势：</p><ul><li>配置较复杂</li><li>学习成本高</li><li>主要针对微服务</li></ul><h3 id="_3-选型建议" tabindex="-1"><a class="header-anchor" href="#_3-选型建议"><span>3. 选型建议</span></a></h3><ol><li><p><strong>选择Gin的情况</strong>：</p><ul><li>项目以API为主</li><li>团队追求简单灵活</li><li>对性能要求高</li><li>需要定制化开发</li></ul></li><li><p><strong>选择Beego的情况</strong>：</p><ul><li>全栈Web应用</li><li>团队规模较大</li><li>需要快速开发</li><li>对性能要求一般</li></ul></li><li><p><strong>选择go-zero的情况</strong>：</p><ul><li>微服务架构</li><li>团队技术能力强</li><li>需要完整治理方案</li><li>强调可观测性</li></ul></li></ol><h3 id="_4-成本评估" tabindex="-1"><a class="header-anchor" href="#_4-成本评估"><span>4. 成本评估</span></a></h3><table><thead><tr><th>成本类型</th><th>Gin</th><th>Beego</th><th>go-zero</th></tr></thead><tbody><tr><td>学习成本</td><td>低</td><td>中</td><td>高</td></tr><tr><td>开发成本</td><td>中</td><td>低</td><td>低</td></tr><tr><td>维护成本</td><td>低</td><td>中</td><td>中</td></tr><tr><td>运维成本</td><td>低</td><td>中</td><td>高</td></tr><tr><td>迁移成本</td><td>低</td><td>中</td><td>高</td></tr></tbody></table><h3 id="_5-风险评估" tabindex="-1"><a class="header-anchor" href="#_5-风险评估"><span>5. 风险评估</span></a></h3><table><thead><tr><th>风险类型</th><th>Gin</th><th>Beego</th><th>go-zero</th></tr></thead><tbody><tr><td>技术风险</td><td>低</td><td>低</td><td>中</td></tr><tr><td>人才风险</td><td>低</td><td>低</td><td>中</td></tr><tr><td>升级风险</td><td>低</td><td>中</td><td>中</td></tr><tr><td>扩展风险</td><td>低</td><td>中</td><td>低</td></tr></tbody></table><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>🎉总结</span></a></h3><p>一般项目推荐<code>Gin</code>：相比之下简单、性能好、扩展性强，可实现绝大多数业务</p><p>大型项目推荐<code>Beego</code>：面向微服务架构设计、微服务治理能力强。大型项目也基本是使用微服务架构的。很多大型企业都在使用这个架构</p>',41)]))}const s=d(i,[["render",a],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/golang/web%E6%A1%86%E6%9E%B6/","title":"Web框架","lang":"zh-CN","frontmatter":{"index":false,"title":"Web框架","icon":"server","order":5,"description":"目录 gin beego go-zero 为什么要学web框架？ 作为初学者很多时候，在学习一个框架的时候，一定要搞清楚我们为什么要学习它，这个非常的重要。 随着互联网技术的发展，在早期我们大部分情况下，编写的都是静态网页html。如果有100篇文章就要编写一百篇与之对应的静态网页。这样是非常痛苦的。于是乎开始有了动态网页，动态网页必须要结合服务器端的...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/web%E6%A1%86%E6%9E%B6/"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"Web框架"}],["meta",{"property":"og:description","content":"目录 gin beego go-zero 为什么要学web框架？ 作为初学者很多时候，在学习一个框架的时候，一定要搞清楚我们为什么要学习它，这个非常的重要。 随着互联网技术的发展，在早期我们大部分情况下，编写的都是静态网页html。如果有100篇文章就要编写一百篇与之对应的静态网页。这样是非常痛苦的。于是乎开始有了动态网页，动态网页必须要结合服务器端的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-31T07:09:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-31T07:09:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Web框架\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-31T07:09:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"为什么要学web框架？","slug":"为什么要学web框架","link":"#为什么要学web框架","children":[]},{"level":2,"title":"主流的web框架","slug":"主流的web框架","link":"#主流的web框架","children":[{"level":3,"title":"1. 框架优劣势总结","slug":"_1-框架优劣势总结","link":"#_1-框架优劣势总结","children":[]},{"level":3,"title":"3. 选型建议","slug":"_3-选型建议","link":"#_3-选型建议","children":[]},{"level":3,"title":"4. 成本评估","slug":"_4-成本评估","link":"#_4-成本评估","children":[]},{"level":3,"title":"5. 风险评估","slug":"_5-风险评估","link":"#_5-风险评估","children":[]},{"level":3,"title":"🎉总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1734622519000,"updatedTime":1735628969000,"contributors":[{"name":"xiaoxie001","username":"xiaoxie001","email":"xie18115@outlook.com","commits":2,"url":"https://github.com/xiaoxie001"}]},"readingTime":{"minutes":3.51,"words":1053},"filePathRelative":"golang/web框架/README.md","localizedDate":"2024年12月19日","autoDesc":true,"excerpt":"<h2>目录</h2>\\n<br>\\n<ul>\\n<li><a href=\\"\\">gin</a></li>\\n<li><a href=\\"\\">beego</a></li>\\n<li><a href=\\"\\">go-zero</a></li>\\n</ul>\\n<br>\\n<br>\\n<hr>\\n<h2>为什么要学web框架？</h2>\\n<p>作为初学者很多时候，在学习一个框架的时候，一定要搞清楚我们为什么要学习它，这个非常的重要。</p>\\n<p>随着互联网技术的发展，在早期我们大部分情况下，编写的都是静态网页html。如果有100篇文章就要编写一百篇与之对应的静态网页。这样是非常痛苦的。于是乎开始有了动态网页，动态网页必须要结合服务器端的技术，比如：Go、Java等。有了这些服务端语言的加持这样就可以完成一个静态网页到动态网页的转化。如下图：</p>"}');export{s as comp,p as data};
