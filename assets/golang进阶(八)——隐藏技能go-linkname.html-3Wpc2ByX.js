import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as n,o as a}from"./app-DIJDtupu.js";const s={};function l(o,e){return a(),t("div",null,e[0]||(e[0]=[n('<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span># 什么是go:linkname</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>指令的格式如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> //go:linkname hello github.com/lastsweetop/testlinkname/hello.hellofunc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>go:linkname引导编译器将当前(私有)方法或者变量在编译时链接到指定的位置的方法或者变量，第一个参数表示当前方法或变量，第二个参数表示目标方法或变量，因为这关指令会破坏系统和包的模块化，因此在使用时必须导入`unsafe` # 为什么要用go:linkname 这个指令不经常用，最好也不要用，但理解这个指令可以帮助你理解核心包的很多代码。在标准库中是为了可以使用另一个包的unexported的方法或者变量，在敲代码的时候是不可包外访问的，但是运行时用这个命令hack了一下，就变得可以访问。 最大的作用就是 定向可访问。 # 示例</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> // Provided by package runtime. func hellofunc() string func Greet() string { return hellofunc() }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Greet()去访问一个没有方法体的方法hellofunc(),IDE一般会提示错误，看到这个之后你就会明白了，这一般是另外一个包有go:linkname的链接 我们再看链接的函数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> //go:linkname hello github.com/lastsweetop/testlinkname/hello.hellofunc func hello() string { return &quot;private.hello()&quot; }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一个参数表示当前方法或变量，第二个参数表示需要建立链接方法，变量的路径 在这里例子中hello()只能被hello.hellofunc这里作为链接调用，其他地方是无法访问到这个方法的，只能调用包装过的Greet方法。这个链接过程是在编译时完成的。 # 注意点 1. go:linkname可以跨包使用 2. 跨包使用时，目标方法或者变量必须导入有方法体的包，这个编译器才可以识别到链接\\ `import _ &quot;<a href="http://github.com/lastsweetop/testlinkname/private" target="_blank" rel="noopener noreferrer">github.com/lastsweetop/testlinkname/private</a>&quot;` 3. go build无法编译go:linkname,必须用单独的compile命令进行编译，因为go build会加上-complete参数，这个参数会检查到没有方法体的方法，并且不通过。 源码放在github,[地址](<a href="https://github.com/lastsweetop/testlinkname" target="_blank" rel="noopener noreferrer">https://github.com/lastsweetop/testlinkname</a> &quot;<a href="https://github.com/lastsweetop/testlinkname" target="_blank" rel="noopener noreferrer">https://github.com/lastsweetop/testlinkname</a>&quot;)</p>',8)]))}const g=i(s,[["render",l],["__file","golang进阶(八)——隐藏技能go-linkname.html.vue"]]),p=JSON.parse('{"path":"/golang/%E5%8E%9F%E7%90%86/theory/golang%E8%BF%9B%E9%98%B6(%E5%85%AB)%E2%80%94%E2%80%94%E9%9A%90%E8%97%8F%E6%8A%80%E8%83%BDgo-linkname.html","title":"\\"\\"golang进阶(八)——隐藏技能go:linkname\\"\\"","lang":"zh-CN","frontmatter":{"title":"\\"\\"golang进阶(八)——隐藏技能go:linkname\\"\\"","source_url":"https://studygolang.com/articles/17006","category":"Go原理教程","description":"指令的格式如下： go:linkname引导编译器将当前(私有)方法或者变量在编译时链接到指定的位置的方法或者变量，第一个参数表示当前方法或变量，第二个参数表示目标方法或变量，因为这关指令会破坏系统和包的模块化，因此在使用时必须导入`unsafe` # 为什么要用go:linkname 这个指令不经常用，最好也不要用，但理解这个指令可以帮助你理解核心包...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%8E%9F%E7%90%86/theory/golang%E8%BF%9B%E9%98%B6(%E5%85%AB)%E2%80%94%E2%80%94%E9%9A%90%E8%97%8F%E6%8A%80%E8%83%BDgo-linkname.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"\\"\\"golang进阶(八)——隐藏技能go:linkname\\"\\""}],["meta",{"property":"og:description","content":"指令的格式如下： go:linkname引导编译器将当前(私有)方法或者变量在编译时链接到指定的位置的方法或者变量，第一个参数表示当前方法或变量，第二个参数表示目标方法或变量，因为这关指令会破坏系统和包的模块化，因此在使用时必须导入`unsafe` # 为什么要用go:linkname 这个指令不经常用，最好也不要用，但理解这个指令可以帮助你理解核心包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\\\\\"\\\\\\"golang进阶(八)——隐藏技能go:linkname\\\\\\"\\\\\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":1.79,"words":537},"filePathRelative":"golang/原理/theory/golang进阶(八)——隐藏技能go-linkname.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span># 什么是go:linkname</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{g as comp,p as data};
