import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as s,o as n}from"./app-DIJDtupu.js";const a={};function r(l,e){return n(),t("div",null,e[0]||(e[0]=[s('<p>这是我们 [Golang 系列教程](/subject/2)的第 8 篇。 if 是条件语句。if 语句的语法是</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go if condition { }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果 `condition` 为真，则执行 `{` 和 `}` 之间的代码。 不同于其他语言，例如 C 语言，Go 语言里的 `{ }` 是必要的，即使在 `{ }` 之间只有一条语句。 if 语句还有可选的 `else if` 和 `else` 部分。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go if condition { } else if condition { } else { }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>if-else 语句之间可以有任意数量的 `else if`。条件判断顺序是从上到下。如果 `if` 或 `else if` 条件判断的结果为真，则执行相应的代码块。 如果没有条件为真，则 `else` 代码块被执行。 让我们编写一个简单的程序来检测一个数字是奇数还是偶数。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { num := 10 if num % 2 == 0 { //checks if number is even fmt.Println(&quot;the number is even&quot;) } else { fmt.Println(&quot;the number is odd&quot;) } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/vWfN8UqZUr" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/vWfN8UqZUr</a>) `if num％2 == 0` 语句检测 num 取 2 的余数是否为零。 如果是为零则打印输出 &quot;the number is even&quot;，如果不为零则打印输出 &quot;the number is odd&quot;。在上面的这个程序中，打印输出的是 `the number is even`。 `if` 还有另外一种形式，它包含一个 `statement` 可选语句部分，该组件在条件判断之前运行。它的语法是</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go if statement; condition { }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>让我们重写程序，使用上面的语法来查找数字是偶数还是奇数。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { if num := 10; num % 2 == 0 { //checks if number is even fmt.Println(num,&quot;is even&quot;) } else { fmt.Println(num,&quot;is odd&quot;) } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/%5C_X9q4MWr4s" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/\\_X9q4MWr4s</a>) 在上面的程序中，`num` 在 `if` 语句中进行初始化，`num` 只能从 `if` 和 `else` 中访问。也就是说 `num` 的范围仅限于 `if` `else` 代码块。如果我们试图从其他外部的 `if` 或者 `else` 访问 `num`,编译器会不通过。 让我们再写一个使用 `else if` 的程序。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { num := 99 if num &lt;= 50 { fmt.Println(&quot;number is less than or equal to 50&quot;) } else if num &gt;= 51 &amp;&amp; num &lt;= 100 { fmt.Println(&quot;number is between 51 and 100&quot;) } else { fmt.Println(&quot;number is greater than 100&quot;) } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/Eji7vmb17Q" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/Eji7vmb17Q</a>) ��上面的程序中，如果 `else if num &gt;= 51 &amp;&amp; num &lt;= 100` 为真，程序将输出 `number is between 51 and 100`。 [获取免费的 Golang 工具](<a href="https://app.mailerlite.com/webforms/popup/p8t5t8" target="_blank" rel="noopener noreferrer">https://app.mailerlite.com/webforms/popup/p8t5t8</a>) ### 一个注意点 `else` 语句应该在 `if` 语句的大括号 `}` 之后的同一行中。如果不是，编译器会不通过。 让我们通过以下程序来理解它。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { num := 10 if num % 2 == 0 { //checks if number is even fmt.Println(&quot;the number is even&quot;) } else { fmt.Println(&quot;the number is odd&quot;) } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/RYNqZZO2F9" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/RYNqZZO2F9</a>) 在上面的程序中，`else` 语句不是从 `if` 语句结束后的 `}` 同一行开始。而是从下一行开始。这是不允许的。如果运行这个程序，编译器会输出错误，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> main.go:12:5: syntax error: unexpected else, expecting }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>出错的原因是 Go 语言的分号是自动插入。你可以在这里阅读分号插入规则 。 在 Go 语言规则中，它指定在 `}` 之后插入一个分号，如果这是该行的最终标记。因此，在if语句后面的 `}` 会自动插入一个分号。 实际上我们的程序变成了</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go if num%2 == 0 { fmt.Println(&quot;the number is even&quot;) }; //semicolon inserted by Go else { fmt.Println(&quot;the number is odd&quot;) }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>分号插入之后。从上面代码片段可以看出第三行插入了分号。 由于 `if{…} else {…}` 是一个单独的语句，它的中间不应该出现分号。因此，需要将 `else` 语句放置在 `}` 之后处于同一行中。 我已经重写了程序，将 else 语句移动到 if 语句结束后 `}` 的后面，以防止分号的自动插入。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go package main import ( &quot;fmt&quot; ) func main() { num := 10 if num%2 == 0 { //checks if number is even fmt.Println(&quot;the number is even&quot;) } else { fmt.Println(&quot;the number is odd&quot;) } }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>[在线运行程序](<a href="https://play.golang.org/p/hv%5C_27vbIBC" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/hv\\_27vbIBC</a>) 现在编译器会很开心，我们也一样 ?。 本章教程到此告一段落了，感谢您的阅读，欢迎您的任何评论和反馈。 **上一教程 - [包 (Packages)](<a href="https://studygolang.com/articles/11893" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/11893</a>)** **下一教程 - [循环](<a href="https://studygolang.com/articles/11924" target="_blank" rel="noopener noreferrer">https://studygolang.com/articles/11924</a>)**</p>',21)]))}const h=i(a,[["render",r],["__file","08-if-else-语句.html.vue"]]),p=JSON.parse('{"path":"/golang/%E5%9F%BA%E7%A1%80/08-if-else-%E8%AF%AD%E5%8F%A5.html","title":"Go 系列教程 —— 8. if-else 语句","lang":"zh-CN","frontmatter":{"title":"Go 系列教程 —— 8. if-else 语句","source_url":"https://studygolang.com/articles/11902","category":"Go系列教程","description":"这是我们 [Golang 系列教程](/subject/2)的第 8 篇。 if 是条件语句。if 语句的语法是 如果 `condition` 为真，则执行 `{` 和 `}` 之间的代码。 不同于其他语言，例如 C 语言，Go 语言里的 `{ }` 是必要的，即使在 `{ }` 之间只有一条语句。 if 语句还有可选的 `else if` 和 `el...","head":[["meta",{"property":"og:url","content":"https://Cospk.github.io/vuepress-app/golang/%E5%9F%BA%E7%A1%80/08-if-else-%E8%AF%AD%E5%8F%A5.html"}],["meta",{"property":"og:site_name","content":"Golang全栈指南"}],["meta",{"property":"og:title","content":"Go 系列教程 —— 8. if-else 语句"}],["meta",{"property":"og:description","content":"这是我们 [Golang 系列教程](/subject/2)的第 8 篇。 if 是条件语句。if 语句的语法是 如果 `condition` 为真，则执行 `{` 和 `}` 之间的代码。 不同于其他语言，例如 C 语言，Go 语言里的 `{ }` 是必要的，即使在 `{ }` 之间只有一条语句。 if 语句还有可选的 `else if` 和 `el..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T12:02:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-27T12:02:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 系列教程 —— 8. if-else 语句\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T12:02:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cospk\\",\\"url\\":\\"https://savvygo.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1756202807000,"updatedTime":1756296158000,"contributors":[{"name":"shiwei","username":"shiwei","email":"xie@gmail.com","commits":2,"url":"https://github.com/shiwei"}]},"readingTime":{"minutes":3.47,"words":1042},"filePathRelative":"golang/基础/08-if-else-语句.md","localizedDate":"2025年8月26日","autoDesc":true,"excerpt":"<p>这是我们 [Golang 系列教程](/subject/2)的第 8 篇。 if 是条件语句。if 语句的语法是</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>go if condition { }</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}');export{h as comp,p as data};
