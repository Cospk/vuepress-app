const{entries:$}=Object,{fromEntries:st}=Object,nt="ENTRIES",D="KEYS",W="VALUES",_="";class S{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=b(this._path);if(b(s)===_)return{done:!1,value:this.result()};const n=t.get(b(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=b(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>b(t)).filter(t=>t!==_).join("")}value(){return b(this._path).node.get(_)}result(){switch(this._type){case W:return this.value();case D:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const b=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(typeof t!="string")return n;const o=t.length+1,r=o+s,i=new Uint8Array(r*o).fill(s+1);for(let c=0;c<o;++c)i[c]=c;for(let c=1;c<r;++c)i[c*o]=c;return q(e,t,s,n,i,1,o,""),n},q=(e,t,s,n,o,r,i,c)=>{const l=r*i;t:for(const u of e.keys())if(u===_){const h=o[l-1];h<=s&&n.set(c,[e.get(u),h])}else{let h=r;for(let f=0;f<u.length;++f,++h){const m=u[f],g=i*h,y=g-i;let d=o[g];const a=Math.max(0,h-s-1),x=Math.min(i-1,h+s);for(let p=a;p<x;++p){const O=m!==t[p],C=o[y+p]+ +O,k=o[y+p+1]+1,z=o[g+p]+1,v=o[g+p+1]=Math.min(C,k,z);v<d&&(d=v)}if(d>s)continue t}q(e.get(u),t,s,n,o,h,i,c+u)}};class w{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=I(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,r]=L(n);for(const i of o.keys())if(i!==_&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),o.get(i)),new w(c,t)}}return new w(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,rt(this._tree,t)}entries(){return new S(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=F(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){return F(this._tree,t)?.has(_)??!1}keys(){return new S(this,D)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,E(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new S(this,W)}[Symbol.iterator](){return this.entries()}static from(t){const s=new w;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return w.from(Object.entries(t))}}const I=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),I(e.get(n),t.slice(n.length),s);return s.push([e,t]),I(void 0,"",s)},F=(e,t)=>{if(t.length===0||!e)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return F(e.get(s),t.slice(s.length))},E=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const r of e.keys())if(r!==_&&t[n]===r[0]){const i=Math.min(s-n,r.length);let c=1;for(;c<i&&t[n+c]===r[c];)++c;const l=e.get(r);if(c===r.length)e=l;else{const u=new Map;u.set(r.slice(c),l),e.set(t.slice(n,n+c),u),e.delete(r),e=u}n+=c;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},rt=(e,t)=>{const[s,n]=I(e,t);if(s!==void 0){if(s.delete(_),s.size===0)R(n);else if(s.size===1){const[o,r]=s.entries().next().value;A(n,o,r)}}},R=e=>{if(e.length===0)return;const[t,s]=L(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&A(e.slice(0,-1),n,o)}},A=(e,t,s)=>{if(e.length===0)return;const[n,o]=L(e);n.set(o+t,s),n.delete(o)},L=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},ct=/[\n\r\p{Z}\p{P}]+/u,j="or",N="and",ut="and_not",ht=(e,t)=>{e.includes(t)||e.push(t)},B=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,M=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,H={[j]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:r,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),B(n.terms,r)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:r,terms:i,match:c}=t.get(n);B(o.terms,i),s.set(n,{score:o.score+r,terms:o.terms,match:Object.assign(o.match,c)})}return s},[ut]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,r)=>{const{k:i,b:c,d:l}=r;return Math.log(1+(s-t+.5)/(t+.5))*(l+e*(i+1)/(e+i*(1-c+c*n/o)))},at=e=>(t,s,n)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,s,n):1}),J=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){J(e,s,t,n);return}const o=e._index.fetch(n,lt),r=o.get(t),i=r?.get(s);!r||typeof i>"u"?J(e,s,t,n):i<=1?r.size<=1?o.delete(t):r.delete(s):r.set(s,i-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(ct),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},Y={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},pt={combineWith:N,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},K={minDirtFactor:.1,minDirtCount:20},yt={..._t,...K},U=Symbol("*"),xt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,r]of e._documentIds){const i=n.boostDocument?n.boostDocument(r,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},Q=(e,t=j)=>{if(e.length===0)return new Map;const s=t.toLowerCase();if(!(s in H))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(H[s])},T=(e,t,s,n,o,r,i,c,l,u=new Map)=>{if(r==null)return u;for(const h of Object.keys(i)){const f=i[h],m=e._fieldIds[h],g=r.get(m);if(g==null)continue;let y=g.size;const d=e._avgFieldLength[m];for(const a of g.keys()){if(!e._documentIds.has(a)){ft(e,m,a,s),y-=1;continue}const x=c?c(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!x)continue;const p=g.get(a),O=e._fieldLength.get(a)[m],C=dt(p,y,e._documentCount,O,d,l),k=n*o*f*x*C,z=u.get(a);if(z){z.score+=k,ht(z.terms,t);const v=G(z.match,s);v?v.push(h):z.match[s]=[h]}else u.set(a,{score:k,terms:[t],match:{[s]:[h]}})}}return u},zt=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields??e._options.fields).reduce((d,a)=>({...d,[a]:G(n.boost,a)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:l}=n,{fuzzy:u,prefix:h}={...Y.weights,...i},f=e._index.get(t.term),m=T(e,t.term,t.term,1,t.termBoost,f,o,r,l);let g,y;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,a=d<1?Math.min(c,Math.round(t.term.length*d)):d;a&&(y=e._index.fuzzyGet(t.term,a))}if(g)for(const[d,a]of g){const x=d.length-t.term.length;if(!x)continue;y?.delete(d);const p=h*d.length/(d.length+.3*x);T(e,t.term,d,p,t.termBoost,a,o,r,l,m)}if(y)for(const d of y.keys()){const[a,x]=y.get(d);if(!x)continue;const p=u*d.length/(d.length+x);T(e,t.term,d,p,t.termBoost,a,o,r,l,m)}return m},X=(e,t,s={})=>{if(t===U)return xt(e,s);if(typeof t!="string"){const h={...s,...t,queries:void 0},f=t.queries.map(m=>X(e,m,h));return Q(f,h.combineWith)}const{tokenize:n,processTerm:o,searchOptions:r}=e._options,i={tokenize:n,processTerm:o,...r,...s},{tokenize:c,processTerm:l}=i,u=c(t).flatMap(h=>l(h)).filter(h=>!!h).map(at(i)).map(h=>zt(e,h,i));return Q(u,i.combineWith)},Z=(e,t,s={})=>{const{searchOptions:n}=e._options,o={...n,...s},r=X(e,t,s),i=[];for(const[c,{score:l,terms:u,match:h}]of r){const f=u.length||1,m={id:e._documentIds.get(c),score:l*f,terms:Object.keys(h),queryTerms:u,match:h};Object.assign(m,e._storedFields.get(c)),(o.filter==null||o.filter(m))&&i.push(m)}return t===U&&o.boostDocument==null||i.sort(P),i},wt=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:r,terms:i}of Z(e,t,s)){const c=i.join(" "),l=n.get(c);l!=null?(l.score+=r,l.count+=1):n.set(c,{score:r,terms:i,count:1})}const o=[];for(const[r,{score:i,terms:c,count:l}]of n)o.push({suggestion:r,terms:c,score:i/l});return o.sort(P),o};class bt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...Y,...t.searchOptions},autoSuggestOptions:{...pt,...t.autoSuggestOptions}},this._index=new w,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=K,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[r,i]of n)o[r]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const vt=e=>new bt(e),kt=({documentCount:e,nextId:t,fieldIds:s,averageFieldLength:n,dirtCount:o,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=vt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=s,c._avgFieldLength=n,c._dirtCount=o??0,c._index=new w,c},It=(e,t)=>{const{index:s,documentIds:n,fieldLength:o,storedFields:r}=e,i=kt(e,t);i._documentIds=M(n),i._fieldLength=M(o),i._storedFields=M(r);for(const[c,l]of i._documentIds)i._idToShortId.set(l,c);for(const[c,l]of s){const u=new Map;for(const h of Object.keys(l))u.set(parseInt(h,10),M(l[h]));i._index.set(c,u)}return i},V=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let r=0,i=0;const c=(u,h=!1)=>{let f;i===0?f=u.length>20?`… ${u.slice(-20)}`:u:h?f=u.length+i>100?`${u.slice(0,100-i)}… `:u:f=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,f&&o.push(f),i+=f.length,h||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let l=s.indexOf(n,r);if(l===-1)return null;for(;l>=0;){const u=l+n.length;if(c(e.slice(r,l)),r=u,i>100)break;l=s.indexOf(n,r)}return i<100&&c(e.slice(r),!0),o},Mt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),Ot=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),tt=(e,t,s={})=>{const n={};return Z(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:r,terms:i,score:c}=o,l=r.includes("@"),u=r.includes("#"),[h,f]=r.split(/[#@]/),m=Number(h),g=i.sort((d,a)=>d.length-a.length).filter((d,a)=>i.slice(a+1).every(x=>!x.includes(d))),{contents:y}=n[m]??={title:"",contents:[]};if(l)y.push([{type:"customField",id:m,index:f,display:g.map(d=>o.c.map(a=>V(a,d))).flat().filter(d=>d!==null)},c]);else{const d=g.map(a=>V(o.h,a)).filter(a=>a!==null);if(d.length&&y.push([{type:u?"heading":"title",id:m,...u&&{anchor:f},display:d},c]),"t"in o&&o.t)for(const a of o.t){const x=g.map(p=>V(a,p)).filter(p=>p!==null);x.length&&y.push([{type:"text",id:m,...u&&{anchor:f},display:x},c])}}}),$(n).sort(([,o],[,r])=>"max"==="total"?Mt(o,r):Ot(o,r)).map(([o,{title:r,contents:i}])=>{if(!r){const c=it(t,o);c&&(r=c.h)}return{title:r,contents:i.map(([c])=>c)}})},et=(e,t,s={})=>{const n=wt(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},Ct=st($(JSON.parse("{\"/\":{\"documentCount\":1464,\"nextId\":1464,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"1#介绍\",\"3\":\"2\",\"4\":\"2#回溯算法\",\"5\":\"2#组合\",\"6\":\"2@1\",\"7\":\"3\",\"8\":\"3@1\",\"9\":\"4\",\"10\":\"4#_2-1版本管理发展简史-维基百科\",\"11\":\"4#_2-1-1-svn-subversion\",\"12\":\"4#_2-1-2-git\",\"13\":\"4#_4-1-git-的下载\",\"14\":\"4#_5-1-git-初始化\",\"15\":\"4#_5-2-git-流程\",\"16\":\"4#_5-2-1-流程图\",\"17\":\"4#_5-2-2概念即详解\",\"18\":\"4#_6-1-初始化仓库\",\"19\":\"4#_6-2-添加文件\",\"20\":\"4#_6-3-提交文件至本地仓库\",\"21\":\"4#_6-4-修改文件-与再次提交文件\",\"22\":\"4#_6-5-文件状态讲解\",\"23\":\"4#_6-6-修改文件-不提交和上一个版本比较差异-diff\",\"24\":\"4#_6-7-查看提交历史记录\",\"25\":\"4#_6-9-文件删除\",\"26\":\"4#_6-9-2从版本库删除\",\"27\":\"4#_6-9-3从版本库删除-但是不删除本地\",\"28\":\"4#_6-10-忽略提交\",\"29\":\"4#_7-1-分支的概念\",\"30\":\"4#_7-2-为何要使用分支\",\"31\":\"4#_7-3-创建分支\",\"32\":\"4#_7-4-分支的查看切换\",\"33\":\"4#_7-4-1查看分支\",\"34\":\"4#_7-4-2切换分支\",\"35\":\"4#_7-5-1合并\",\"36\":\"4#_7-5-2删除分支\",\"37\":\"4#_8-1-标签的概念\",\"38\":\"4#_8-2-标签的创建-tag\",\"39\":\"4#_8-3-标签的切换与删除\",\"40\":\"4#_9-0-局域网仓库\",\"41\":\"4#_9-0-1本地相对路径-多个文件夹之间共享代码\",\"42\":\"4#_9-0-2开启局域网共享代码\",\"43\":\"4#_9-1-常用远程仓库托管服务\",\"44\":\"4#_9-2-码云账号注册\",\"45\":\"4#_9-3-创建远程仓库\",\"46\":\"4#_9-4-把本地代码推送到远端\",\"47\":\"4#_9-5-从远程仓库克隆代码\",\"48\":\"4#_9-6-代码的修改与提交-查看历史\",\"49\":\"4#_9-7-ssh-连接概述\",\"50\":\"4#_9-8-ssh-密钥的生成\",\"51\":\"4#_9-9-ssh-密钥配置\",\"52\":\"4#_9-10-ssh-方式克隆-提交代码\",\"53\":\"4#_9-11-远程仓库的其他操作\",\"54\":\"4#_9-12-利用-gitee-搭建个人主页\",\"55\":\"4#_10-1-介绍\",\"56\":\"4#_11-1-查看远程\",\"57\":\"4#_11-2-添加-移除远测仓库\",\"58\":\"4#_11-3-从远程仓库获取代码\",\"59\":\"5\",\"60\":\"5#思维导图\",\"61\":\"5#gfm警告\",\"62\":\"5#提示容器\",\"63\":\"5#跳转\",\"64\":\"5#_1-文章内跳转-内链\",\"65\":\"5#_2-跳转到其他文章-内部链接\",\"66\":\"6\",\"67\":\"6#软件\",\"68\":\"6#视频\",\"69\":\"6#音乐\",\"70\":\"6#解压工具\",\"71\":\"6#截图\",\"72\":\"6#广告屏蔽\",\"73\":\"6#电纸书-pdf\",\"74\":\"6#画图工具\",\"75\":\"6#开源项目\",\"76\":\"6#nvm-node版本控制\",\"77\":\"6#chsrc-换源工具\",\"78\":\"6#实用网站\",\"79\":\"6#豆包-marscode-工作台-在线编码网站\",\"80\":\"6@1\",\"81\":\"9\",\"82\":\"9#tcp的三次握手\",\"83\":\"9#http和https的区别\",\"84\":\"9#实现https\",\"85\":\"9#https原理\",\"86\":\"9@1\",\"87\":\"11\",\"88\":\"11@1\",\"89\":\"12\",\"90\":\"12@1\",\"91\":\"13\",\"92\":\"13#protobuf\",\"93\":\"13@1\",\"94\":\"14\",\"95\":\"14@1\",\"96\":\"15\",\"97\":\"15@1\",\"98\":\"16\",\"99\":\"16@1\",\"100\":\"17\",\"101\":\"17@1\",\"102\":\"19\",\"103\":\"19@1\",\"104\":\"22\",\"105\":\"22@1\",\"106\":\"23\",\"107\":\"23@1\",\"108\":\"25\",\"109\":\"25#目录\",\"110\":\"25#为什么要学web框架\",\"111\":\"25#主流的web框架\",\"112\":\"25#_1-框架优劣势总结\",\"113\":\"25#gin\",\"114\":\"25#beego\",\"115\":\"25#go-zero\",\"116\":\"25#_3-选型建议\",\"117\":\"25#_4-成本评估\",\"118\":\"25#_5-风险评估\",\"119\":\"25#总结\",\"120\":\"27\",\"121\":\"27#常用包\",\"122\":\"27#常用第三方包\",\"123\":\"27#必看项目\",\"124\":\"27#完整标准库列表\",\"125\":\"27#其他优秀的开源工具分类\",\"126\":\"27#音频和音乐\",\"127\":\"27#数据结构\",\"128\":\"27#分布式系统\",\"129\":\"27#电子邮件\",\"130\":\"27#嵌入式脚本语言\",\"131\":\"27#错误处理\",\"132\":\"27#文件\",\"133\":\"27#金融\",\"134\":\"27#游戏开发\",\"135\":\"27#地理位置\",\"136\":\"27#编译器\",\"137\":\"27#goroutines\",\"138\":\"27#图形界面\",\"139\":\"27#图片\",\"140\":\"27#物联网\",\"141\":\"27#json格式\",\"142\":\"27#机器学习\",\"143\":\"27#金融-1\",\"144\":\"27#自然语言处理\",\"145\":\"27#网络\",\"146\":\"27#视频库\",\"147\":\"27@1\",\"148\":\"28\",\"149\":\"28#go-的特点\",\"150\":\"28#_1-1-简洁的语法\",\"151\":\"28#_1-2-高效的并发支持\",\"152\":\"28#_1-3-强类型与垃圾回收\",\"153\":\"28#_1-4-跨平台支持\",\"154\":\"28#_1-5-编译速度快\",\"155\":\"28#_1-6-内置工具\",\"156\":\"28#_1-7-单一可执行文件\",\"157\":\"28#go-语言的应用场景\",\"158\":\"28#_2-1-网络服务与-web-开发\",\"159\":\"28#_2-2-微服务架构\",\"160\":\"28#_2-3-云计算与-devops\",\"161\":\"28#_2-4-系统编程\",\"162\":\"28#_2-5-数据库与大数据处理\",\"163\":\"28#go-语言的优点与缺点\",\"164\":\"28#_3-1-优点\",\"165\":\"28#_3-2-缺点\",\"166\":\"28#go-的生态和社区\",\"167\":\"28#go-与其他语言的比较\",\"168\":\"28#_5-1-与-c-c-比较\",\"169\":\"28#_5-2-与-python-比较\",\"170\":\"28#_5-3-与-java-比较\",\"171\":\"28@1\",\"172\":\"29\",\"173\":\"29#包\",\"174\":\"29#可见性\",\"175\":\"29#导入\",\"176\":\"29#内部包\",\"177\":\"29#注释\",\"178\":\"29#标识符\",\"179\":\"29#运算符\",\"180\":\"29#字面量\",\"181\":\"29#整型字面量\",\"182\":\"29#浮点数字面量\",\"183\":\"29#复数字面量\",\"184\":\"29#字符字面量\",\"185\":\"29#转义字符\",\"186\":\"29#字符串字面量\",\"187\":\"29#函数\",\"188\":\"29#风格\",\"189\":\"29#函数花括号换行\",\"190\":\"29#代码缩进\",\"191\":\"29#代码间隔\",\"192\":\"29#花括号省略\",\"193\":\"29#三元表达式\",\"194\":\"29@1\",\"195\":\"30\",\"196\":\"30#布尔类型\",\"197\":\"30#整型\",\"198\":\"30#浮点型\",\"199\":\"30#复数类型\",\"200\":\"30#字符类型\",\"201\":\"30#派生类型\",\"202\":\"30#零值\",\"203\":\"30#nil\",\"204\":\"31\",\"205\":\"31#声明\",\"206\":\"31#赋值\",\"207\":\"31#匿名\",\"208\":\"31#交换\",\"209\":\"31#比较\",\"210\":\"31#代码块\",\"211\":\"31#初始化\",\"212\":\"31#iota\",\"213\":\"31#枚举\",\"214\":\"32\",\"215\":\"32#文件描述符\",\"216\":\"32#输出\",\"217\":\"32#stdout\",\"218\":\"32#print\",\"219\":\"32#fmt\",\"220\":\"32#bufio\",\"221\":\"32#格式化\",\"222\":\"32#输入\",\"223\":\"32#read\",\"224\":\"32#fmt-1\",\"225\":\"32#bufio-1\",\"226\":\"32#scanner\",\"227\":\"33\",\"228\":\"33#if-else\",\"229\":\"33#else-if\",\"230\":\"33#switch\",\"231\":\"33#label\",\"232\":\"33#goto\",\"233\":\"33#for\",\"234\":\"33#for-range\",\"235\":\"33#break\",\"236\":\"33#continue\",\"237\":\"34\",\"238\":\"34#数组\",\"239\":\"34#初始化\",\"240\":\"34#使用\",\"241\":\"34#切割\",\"242\":\"34#切片-1\",\"243\":\"34#初始化-1\",\"244\":\"34#使用-1\",\"245\":\"34#插入元素\",\"246\":\"34#删除元素\",\"247\":\"34#拷贝\",\"248\":\"34#遍历\",\"249\":\"34#多维切片\",\"250\":\"34#拓展表达式\",\"251\":\"34#clear\",\"252\":\"34#字面量\",\"253\":\"34#访问\",\"254\":\"34#转换\",\"255\":\"34#长度\",\"256\":\"34#拷贝-1\",\"257\":\"34#拼接\",\"258\":\"34#遍历-1\",\"259\":\"34#初始化-2\",\"260\":\"34#访问-1\",\"261\":\"34#存值\",\"262\":\"34#删除\",\"263\":\"34#遍历-2\",\"264\":\"34#清空\",\"265\":\"34#set\",\"266\":\"34#注意\",\"267\":\"34#声明\",\"268\":\"34#实例化\",\"269\":\"34#选项模式\",\"270\":\"34#组合\",\"271\":\"34#指针\",\"272\":\"34#标签\",\"273\":\"34#内存对齐\",\"274\":\"34#空结构体\",\"275\":\"34#创建\",\"276\":\"34#禁止指针运算\",\"277\":\"34#new和make\",\"278\":\"34#声明-1\",\"279\":\"34#参数\",\"280\":\"34#返回值\",\"281\":\"34#匿名函数\",\"282\":\"34#闭包\",\"283\":\"34#延迟调用\",\"284\":\"34#循环\",\"285\":\"34#参数预计算\",\"286\":\"34#值接收者\",\"287\":\"34#指针接收者\",\"288\":\"36\",\"289\":\"36#概念\",\"290\":\"36#基本接口\",\"291\":\"36#声明\",\"292\":\"36#初始化\",\"293\":\"36#实现\",\"294\":\"36#空接口\",\"295\":\"36#通用接口\",\"296\":\"37\",\"297\":\"37#代码调用\",\"298\":\"37#go嵌入c代码\",\"299\":\"37#go引入c文件\",\"300\":\"37#c调用go\",\"301\":\"37#类型转换\",\"302\":\"37#char\",\"303\":\"37#字符串\",\"304\":\"37#整数\",\"305\":\"37#浮点数\",\"306\":\"37#切片\",\"307\":\"37#结构体\",\"308\":\"37#联合体\",\"309\":\"37#枚举\",\"310\":\"37#指针\",\"311\":\"37#链接库\",\"312\":\"37#动态链接库\",\"313\":\"37#静态链接库\",\"314\":\"37#最后\",\"315\":\"38\",\"316\":\"38#逃逸分析\",\"317\":\"38#引用局部指针\",\"318\":\"38#闭包引用\",\"319\":\"38#空间不足\",\"320\":\"38#长度未知\",\"321\":\"38#pprof\",\"322\":\"38#采集\",\"323\":\"38#手动\",\"324\":\"38#自动\",\"325\":\"38#分析\",\"326\":\"38#命令行\",\"327\":\"38#网页\",\"328\":\"38#trace\",\"329\":\"39\",\"330\":\"39#web开发\",\"331\":\"39#im通讯\",\"332\":\"39#网络编程\",\"333\":\"39#游戏服务器\",\"334\":\"39#数据库开发\",\"335\":\"39#命令行工具\",\"336\":\"40\",\"337\":\"40#示例\",\"338\":\"40#泛型结构\",\"339\":\"40#泛型结构注意点\",\"340\":\"40#类型集\",\"341\":\"40#类型集注意点\",\"342\":\"40#使用\",\"343\":\"40#队列\",\"344\":\"40#堆\",\"345\":\"40#小结\",\"346\":\"41\",\"347\":\"41#接口\",\"348\":\"41#桥梁\",\"349\":\"41#核心\",\"350\":\"41#类型\",\"351\":\"41#kind\",\"352\":\"41#elem\",\"353\":\"41#size\",\"354\":\"41#comparable\",\"355\":\"41#implements\",\"356\":\"41#convertibleto\",\"357\":\"41#值\",\"358\":\"41#type\",\"359\":\"41#elem-1\",\"360\":\"41#指针\",\"361\":\"41#设置值\",\"362\":\"41#获取值\",\"363\":\"41#函数\",\"364\":\"41#信息\",\"365\":\"41#调用\",\"366\":\"41#结构体\",\"367\":\"41#访问字段\",\"368\":\"41#修改字段\",\"369\":\"41#访问tag\",\"370\":\"41#访问方法\",\"371\":\"41#调用方法\",\"372\":\"41#创建\",\"373\":\"41#基本类型\",\"374\":\"41#结构体-1\",\"375\":\"41#切片\",\"376\":\"41#map\",\"377\":\"41#管道\",\"378\":\"41#函数-1\",\"379\":\"41#完全相等\",\"380\":\"42\",\"381\":\"42#静态强类型\",\"382\":\"42#类型后置\",\"383\":\"42#类型声明\",\"384\":\"42#类型别名\",\"385\":\"42#类型转换\",\"386\":\"42#类型断言\",\"387\":\"42#类型判断\",\"388\":\"43\",\"389\":\"43#error\",\"390\":\"43#创建\",\"391\":\"43#自定义错误\",\"392\":\"43#传递\",\"393\":\"43#处理\",\"394\":\"43#panic\",\"395\":\"43#创建-1\",\"396\":\"43#善后\",\"397\":\"43#恢复\",\"398\":\"43#fatal\",\"399\":\"44\",\"400\":\"44#打开\",\"401\":\"44#读取\",\"402\":\"44#写入\",\"403\":\"44#复制\",\"404\":\"44#重命名\",\"405\":\"44#删除\",\"406\":\"44#刷新\",\"407\":\"44#文件夹\",\"408\":\"44#读取-1\",\"409\":\"44#创建\",\"410\":\"44#复制-1\",\"411\":\"45\",\"412\":\"45#协程\",\"413\":\"45#管道\",\"414\":\"45#创建\",\"415\":\"45#读写\",\"416\":\"45#无缓冲\",\"417\":\"45#有缓冲\",\"418\":\"45#注意点\",\"419\":\"45#单向管道\",\"420\":\"45#for-range\",\"421\":\"45#select\",\"422\":\"45#waitgroup\",\"423\":\"45#context\",\"424\":\"45#context-1\",\"425\":\"45#emptyctx\",\"426\":\"45#valuectx\",\"427\":\"45#cancelctx\",\"428\":\"45#timerctx\",\"429\":\"45#锁\",\"430\":\"45#互斥锁\",\"431\":\"45#读写锁\",\"432\":\"45#条件变量\",\"433\":\"45#sync\",\"434\":\"45#once\",\"435\":\"45#pool\",\"436\":\"45#map\",\"437\":\"45#原子\",\"438\":\"45#类型\",\"439\":\"45#使用\",\"440\":\"45#cas\",\"441\":\"45#value\",\"442\":\"46\",\"443\":\"46#编写模块\",\"444\":\"46#准备\",\"445\":\"46#创建\",\"446\":\"46#编写\",\"447\":\"46#测试\",\"448\":\"46#文档\",\"449\":\"46#上传\",\"450\":\"46#引用\",\"451\":\"46#设置代理\",\"452\":\"46#下载依赖\",\"453\":\"46#代码引用\",\"454\":\"46#安装命令行\",\"455\":\"46#模块管理\",\"456\":\"46#常用命令\",\"457\":\"46#模块存储\",\"458\":\"46#版本选择\",\"459\":\"46#go-mod\",\"460\":\"46#go-sum\",\"461\":\"46#私有模块\",\"462\":\"46#工作区\",\"463\":\"46#示例\",\"464\":\"46#命令\",\"465\":\"46#指令\",\"466\":\"47\",\"467\":\"47#编写规范\",\"468\":\"47#执行测试\",\"469\":\"47#常用参数\",\"470\":\"47#示例测试\",\"471\":\"47#单元测试\",\"472\":\"47#helper\",\"473\":\"47#子测试\",\"474\":\"47#表格风格\",\"475\":\"47#基准测试\",\"476\":\"47#benchstat\",\"477\":\"47#模糊测试\",\"478\":\"47#类型支持\",\"479\":\"49\",\"480\":\"49#_01、概述\",\"481\":\"49#规则\",\"482\":\"49#常用规则\",\"483\":\"49#四种函数\",\"484\":\"49#_02、功能测试\",\"485\":\"49#常用参数\",\"486\":\"49#count\",\"487\":\"49#v\",\"488\":\"49#timeout\",\"489\":\"49#run\",\"490\":\"49#普通测试方法\",\"491\":\"49#测试未通过\",\"492\":\"49#修正失败用例\",\"493\":\"49#测试通过\",\"494\":\"49#基于表的测试用例\",\"495\":\"49#测试失败时终止\",\"496\":\"49#_03、基准测试\",\"497\":\"49#常用参数-1\",\"498\":\"49#基准测试用例\",\"499\":\"49#resettimer\",\"500\":\"49#starttimer-stoptimer\",\"501\":\"49#_04、示例函数\",\"502\":\"49#三个作用\",\"503\":\"49#先编译出-test-文件\",\"504\":\"49#最佳实践\",\"505\":\"49#_05、小结\",\"506\":\"49#reference\",\"507\":\"50\",\"508\":\"50#语法基础的使用强化\",\"509\":\"50#循环控制-for\",\"510\":\"50#字符串string\",\"511\":\"50#切片slice\",\"512\":\"50#映射map\",\"513\":\"50#结构体\",\"514\":\"50#函数\",\"515\":\"50#方法\",\"516\":\"50#接口\",\"517\":\"50#通道channel\",\"518\":\"50@1\",\"519\":\"51\",\"520\":\"51#面试流程\",\"521\":\"51#语言基础\",\"522\":\"51#与其他语言相比-使用-go-有什么好处\",\"523\":\"51#golang开发新手常犯的50个错误\",\"524\":\"51#golang-使用什么数据类型\",\"525\":\"51#go-程序中的包是什么\",\"526\":\"51#变量大小写的区别\",\"527\":\"51#go语言中的值类型和引用类型\",\"528\":\"51#值类型\",\"529\":\"51#引用类型\",\"530\":\"51#高级语法\",\"531\":\"51#new和make有什么区别\",\"532\":\"51#new函数\",\"533\":\"51#make函数\",\"534\":\"51#引用类型如切片-nil切片和空切片有什么不一样\",\"535\":\"51#channel的使用注意\",\"536\":\"51#map的实现\",\"537\":\"51#处理字符串\",\"538\":\"51#_1、协程\",\"539\":\"51#什么是-goroutine-你如何停止它\",\"540\":\"51#协程与线程的区别\",\"541\":\"51#gmp模型\",\"542\":\"51#工作原理\",\"543\":\"51#_2、并发\",\"544\":\"51#channel通知-实现并发控制\",\"545\":\"51#waitgroup-实现并发控制\",\"546\":\"51#context\",\"547\":\"51#_3、内存\",\"548\":\"51#内存逃逸是什么-会有什么影响\",\"549\":\"51#怎么分析内存逃逸-以及优化\",\"550\":\"51#gc原理-三色标记-增量式标记清除\",\"551\":\"51#三色标记\",\"552\":\"51#并发标记与增量式标记\",\"553\":\"51#分代收集\",\"554\":\"51#内存对齐\",\"555\":\"51#_4、锁\",\"556\":\"51#互斥锁\",\"557\":\"51#读写锁\",\"558\":\"51#sync-map的安全锁\",\"559\":\"51@1\",\"560\":\"53\",\"561\":\"53#腾讯一面\",\"562\":\"53#腾讯二面\",\"563\":\"53#腾讯一面-校招\",\"564\":\"53#腾讯二面-校招\",\"565\":\"53#腾讯三面-校招\",\"566\":\"53#腾讯qq一面\",\"567\":\"53#腾讯qq二面-电话面\",\"568\":\"53#腾讯云智\",\"569\":\"53#一面\",\"570\":\"53#二面\",\"571\":\"53#腾讯\",\"572\":\"53#某不知名组一面-电话面\",\"573\":\"53#二面-1\",\"574\":\"53#腾讯音乐\",\"575\":\"53#一-开场\",\"576\":\"53#二-项目相关\",\"577\":\"53#三-go和mysql\",\"578\":\"53#四-算法与反问\",\"579\":\"53#腾讯互娱-一面-go\",\"580\":\"53#腾讯外包-后端开发-一面\",\"581\":\"53#字节跳动\",\"582\":\"53#字节一面-技术\",\"583\":\"53#字节二面-技术-人事\",\"584\":\"53#字节\",\"585\":\"53#美团-一面\",\"586\":\"53#美团-二面\",\"587\":\"53#美团\",\"588\":\"53#美团-1\",\"589\":\"53#饿了么\",\"590\":\"53#一面-1\",\"591\":\"53#阿里巴巴\",\"592\":\"53#数字零售技术部-erp技术一面-电话面\",\"593\":\"53#二面-电话面\",\"594\":\"53#阿里\",\"595\":\"53#阿里外包-一面\",\"596\":\"53#蚂蚁\",\"597\":\"53#工具开发一面-电话面\",\"598\":\"53#工具开发二面-电话面\",\"599\":\"53#工具开发三面\",\"600\":\"53#百度\",\"601\":\"53#百度后端研发工程师\",\"602\":\"53#京东-golang\",\"603\":\"53#一面-60min\",\"604\":\"53#二面-35mn\",\"605\":\"53#京东\",\"606\":\"53#一面-2\",\"607\":\"53#二面-2\",\"608\":\"53#京东一面-30min\",\"609\":\"53#微服务中间件开发部门\",\"610\":\"53#pdd-一面-java\",\"611\":\"53#pdd服务端开发\",\"612\":\"53#酷狗音乐\",\"613\":\"53#一面-3\",\"614\":\"53#二面-3\",\"615\":\"53#b站外包-go开发-一面\",\"616\":\"53#b站外包\",\"617\":\"53#_360-一面\",\"618\":\"53#_360-二面\",\"619\":\"53#_360-三面\",\"620\":\"53#好未来\",\"621\":\"53#深信服\",\"622\":\"53#北京贝壳外包\",\"623\":\"53#网易外包-go后端开发\",\"624\":\"53#一面-4\",\"625\":\"53#二面-4\",\"626\":\"53#面经详解跳转链接\",\"627\":\"53@1\",\"628\":\"54\",\"629\":\"54#对象池\",\"630\":\"54#对象池的应用-内存优化\",\"631\":\"54@1\",\"632\":\"55\",\"633\":\"55#腾讯一面\",\"634\":\"55#腾讯二面\",\"635\":\"55#腾讯一面-校招\",\"636\":\"55#腾讯二面-校招\",\"637\":\"55#腾讯三面-校招\",\"638\":\"55#腾讯qq一面\",\"639\":\"55#腾讯qq二面-电话面\",\"640\":\"55#腾讯云智\",\"641\":\"55#一面\",\"642\":\"55#二面\",\"643\":\"55#腾讯\",\"644\":\"55#某不知名组一面-电话面\",\"645\":\"55#二面-1\",\"646\":\"55#腾讯音乐\",\"647\":\"55#一-开场\",\"648\":\"55#二-项目相关\",\"649\":\"55#三-go和mysql\",\"650\":\"55#四-算法与反问\",\"651\":\"55#腾讯互娱-一面-go\",\"652\":\"55#腾讯外包-后端开发-一面\",\"653\":\"55#字节跳动\",\"654\":\"55#字节一面-技术\",\"655\":\"55#字节二面-技术-人事\",\"656\":\"55#字节\",\"657\":\"55#美团-一面\",\"658\":\"55#美团-二面\",\"659\":\"55#美团\",\"660\":\"55#美团-1\",\"661\":\"55#饿了么\",\"662\":\"55#一面-1\",\"663\":\"55#阿里巴巴\",\"664\":\"55#数字零售技术部-erp技术一面-电话面\",\"665\":\"55#二面-电话面\",\"666\":\"55#阿里\",\"667\":\"55#阿里外包-一面\",\"668\":\"55#蚂蚁\",\"669\":\"55#工具开发一面-电话面\",\"670\":\"55#工具开发二面-电话面\",\"671\":\"55#工具开发三面\",\"672\":\"55#百度\",\"673\":\"55#百度后端研发工程师\",\"674\":\"55#京东-golang\",\"675\":\"55#一面-60min\",\"676\":\"55#二面-35mn\",\"677\":\"55#京东\",\"678\":\"55#一面-2\",\"679\":\"55#二面-2\",\"680\":\"55#京东一面-30min\",\"681\":\"55#微服务中间件开发部门\",\"682\":\"55#pdd-一面-java\",\"683\":\"55#pdd服务端开发\",\"684\":\"55#酷狗音乐\",\"685\":\"55#一面-3\",\"686\":\"55#二面-3\",\"687\":\"55#b站外包-go开发-一面\",\"688\":\"55#b站外包\",\"689\":\"55#_360-一面\",\"690\":\"55#_360-二面\",\"691\":\"55#_360-三面\",\"692\":\"55#好未来\",\"693\":\"55#深信服\",\"694\":\"55#北京贝壳外包\",\"695\":\"55#网易外包-go后端开发\",\"696\":\"55#一面-4\",\"697\":\"55#二面-4\",\"698\":\"55#面经详解跳转链接\",\"699\":\"55@1\",\"700\":\"56\",\"701\":\"56#依赖\",\"702\":\"56#连接\",\"703\":\"56#索引\",\"704\":\"56#创建\",\"705\":\"56#获取\",\"706\":\"56#分析\",\"707\":\"56#删除\",\"708\":\"56#文档\",\"709\":\"56#创建-1\",\"710\":\"56#获取-1\",\"711\":\"56#更新\",\"712\":\"56#删除-1\",\"713\":\"56#搜索\",\"714\":\"56#小结\",\"715\":\"56@1\",\"716\":\"57\",\"717\":\"57#_1-1-字符串类型-string-不再支持\",\"718\":\"57#_1-1-1-文本类型-text\",\"719\":\"57#_1-1-2-关键字类型-keyword\",\"720\":\"57#_1-2-数字类型-8种\",\"721\":\"57#_1-3-日期类型-date\",\"722\":\"57#_1-4-布尔类型-boolean\",\"723\":\"57#_1-5-二进制型-binary\",\"724\":\"57#_1-6-范围类型-range\",\"725\":\"57#_2-1-数组类型-array\",\"726\":\"57#_2-2-对象类型-object\",\"727\":\"57#_2-3-嵌套类型-nested\",\"728\":\"57#_2-3-1-对象数组是如何存储的\",\"729\":\"57#_2-3-2-用nested类型解决object类型的不足\",\"730\":\"57#_3-1-地理点类型-geo-point\",\"731\":\"57#_3-2-地理形状类型-geo-shape\",\"732\":\"57#_4-1-ip类型\",\"733\":\"57#_4-2-计数数据类型-token-count\",\"734\":\"57#_01、-什么是elasticsearch\",\"735\":\"57#_02、mysql与elasticsearch对比\",\"736\":\"57#_03、-下载和安装\",\"737\":\"57#_03-、下载可视化工具kibana\",\"738\":\"57#启动-kibana\",\"739\":\"57#打开kibana\",\"740\":\"57#_04、集成和整合ik\",\"741\":\"57#_05、如何证明ik集成成功\",\"742\":\"57#dictionary-configuration\",\"743\":\"57#热更新-ik-分词使用方法\",\"744\":\"57#_06、go如何操作es\",\"745\":\"57#_07、创建索引映射mapping\",\"746\":\"57#_08、创建文档\",\"747\":\"57#_09、更新文档\",\"748\":\"57#根据文档id更新内容\",\"749\":\"57#根据条件更新文档\",\"750\":\"57#_10、删除文档\",\"751\":\"57#根据id删除一条数据\",\"752\":\"57#根据指定条件删除\",\"753\":\"57#_11、查询文档\",\"754\":\"57#根据id查询文档\",\"755\":\"57#_12、高级查询\",\"756\":\"57#_1-精确匹配单个字段\",\"757\":\"57#_2-通过terms实现sql的in查询\",\"758\":\"57#_3-匹配单个字段\",\"759\":\"57#_4-范围查询\",\"760\":\"57#_5、单关键词搜索\",\"761\":\"57#_6、多属性关键词搜索\",\"762\":\"57#_7、bool组合查询\",\"763\":\"57#_5-1-must条件\",\"764\":\"57#_5-2-must-not条件\",\"765\":\"57#_5-2-should条件\",\"766\":\"57#_13、搜索词条高亮处理\",\"767\":\"57#_14、elasticsearch集群配置\",\"768\":\"57#启动第一个节点\",\"769\":\"57#启动第二个节点\",\"770\":\"57#启动第三个节点\",\"771\":\"57#_15、golang-elasticsearch连接配置\",\"772\":\"57@1\",\"773\":\"58\",\"774\":\"58#_01、docker-安装\",\"775\":\"58#_02、docker安装mysql\",\"776\":\"58#_1-连接器\",\"777\":\"58#_2-查询缓存\",\"778\":\"58#_3-分析器-做什么\",\"779\":\"58#_4-优化器-怎么做\",\"780\":\"58#_5-执行器-开始做\",\"781\":\"58#_6-存储引擎-落盘\",\"782\":\"58#小结\",\"783\":\"58#尽量不要让数据库做过多运算\",\"784\":\"58#控制数据量\",\"785\":\"58#单表字段数量\",\"786\":\"58#避免使用null字段\",\"787\":\"58#少用text\",\"788\":\"58#尽量控制表字段数量\",\"789\":\"58#平衡范式与冗余\",\"790\":\"58#拒绝3b\",\"791\":\"58#用好数值字段类型\",\"792\":\"58#不在数据库里存图片\",\"793\":\"58#数据表的设计原则其它参考\",\"794\":\"58#数据库对象编写建议\",\"795\":\"58#关于索引\",\"796\":\"58#sql编写\",\"797\":\"58#mysql一张表最多多少字段\",\"798\":\"58#字段数量限制\",\"799\":\"58#总结\",\"800\":\"58#_01、mysql索引原理及概念\",\"801\":\"58#_02、mysql索引的底层实现\",\"802\":\"58#二叉树\",\"803\":\"58#b-tree\",\"804\":\"58#b-tree-1\",\"805\":\"58#外存储器和内存储器\",\"806\":\"58#btree索引的遵循原则和使用限制\",\"807\":\"58#hash\",\"808\":\"58#_03、mysql的索引实现\",\"809\":\"58#_04、mysql索引的优劣势\",\"810\":\"58#_05、mysql索引的操作\",\"811\":\"58#_01、mysql索引列什么样子的列适合选择成为索引\",\"812\":\"58#_02、常见的mysql性能分析工具和配置\",\"813\":\"58#慢查询日志\",\"814\":\"58#执行计划explain\",\"815\":\"58#mysql前缀索引和索引列的选择性\",\"816\":\"58#联合索引-很多列都建立索引不如建立联合索引\",\"817\":\"58#覆盖索引\",\"818\":\"58#mysql优化实战之避免索引失效\",\"819\":\"58#mysql优化实战之排序与分组优化\",\"820\":\"58#mysql优化实战之大数据量分页优化\",\"821\":\"58#mysql优化实战之小表驱动大表\",\"822\":\"58#为什么基于docker搭建\",\"823\":\"58#主从复制排错\",\"824\":\"58#测试主从复制\",\"825\":\"58#常见错误排查\",\"826\":\"58@1\",\"827\":\"59\",\"828\":\"59#驱动\",\"829\":\"59#安装\",\"830\":\"59#连接\",\"831\":\"59#bson\",\"832\":\"59#查询文档\",\"833\":\"59#查询单个\",\"834\":\"59#查询多个\",\"835\":\"59#创建文档\",\"836\":\"59#更新文档\",\"837\":\"59#删除文档\",\"838\":\"59#聚合\",\"839\":\"59@1\",\"840\":\"60\",\"841\":\"60#_01、mongodb是什么\",\"842\":\"60#_01、特点\",\"843\":\"60#_02、应用场景\",\"844\":\"60#_02、mongodb的核心概念\",\"845\":\"60#_1-1-库\",\"846\":\"60#_1-2-集合\",\"847\":\"60#_1-3-文档\",\"848\":\"60#_1-4-关系总结\",\"849\":\"60#_03、下载和安装\",\"850\":\"60#_02、现在开始配置mongodb的数据库环境\",\"851\":\"60#最后一步运行mongodb服务\",\"852\":\"60#再配置本地-windows-mongogb-服务\",\"853\":\"60#_04、mongodb的命令行工具和客户端工具\",\"854\":\"60#_05、mongodb命令使用方法\",\"855\":\"60#一-show和help命令\",\"856\":\"60#a-库相关操作\",\"857\":\"60#b-集合相关操作\",\"858\":\"60#插入数据\",\"859\":\"60#修改数据\",\"860\":\"60#删除数据\",\"861\":\"60#四-数据查询\",\"862\":\"60#五-索引相关命令\",\"863\":\"60#附-语句块操作命令\",\"864\":\"60#_06、添加管理员账号\",\"865\":\"60#一、创建管理员账号\",\"866\":\"60#_1-以系统管理员的身份运行powershell-在cmd也可以操作\",\"867\":\"60#_2-连接数据库\",\"868\":\"60#_3-查看数据库\",\"869\":\"60#_4-切换到admin数据库\",\"870\":\"60#_5-创建超级管理员账户\",\"871\":\"60#_06-修改配置文件c-mongodb-bin-mongod-cfg-可以不操作\",\"872\":\"60#_07、重启mongodb服务\",\"873\":\"60#二、创建普通账号\",\"874\":\"60#_06、客户端工具\",\"875\":\"60#_1、robo-3t管理工具\",\"876\":\"60#_2、navicat-for-mongodb\",\"877\":\"60#_3、mongodb-compass-社区版\",\"878\":\"60#_07、go整合mongodb\",\"879\":\"60#_08、mongodb-保存\",\"880\":\"60#_01、单数据保存\",\"881\":\"60#_02、批量保存\",\"882\":\"60#_09、mongodb-修改\",\"883\":\"60#_10、mongodb-删除\",\"884\":\"60#_11、mongodb-查询\",\"885\":\"60#_12、关于高级查询中会使用的操作符\",\"886\":\"60#_13、聚合查询\",\"887\":\"60#_14、小结\",\"888\":\"60@1\",\"889\":\"61\",\"890\":\"61#依赖\",\"891\":\"61#连接到数据库\",\"892\":\"61#准备数据\",\"893\":\"61#查询\",\"894\":\"61#新增\",\"895\":\"61#更新\",\"896\":\"61#删除\",\"897\":\"61#事务\",\"898\":\"61@1\",\"899\":\"62\",\"900\":\"62#优化\",\"901\":\"62#慢查询\",\"902\":\"62@1\",\"903\":\"63\",\"904\":\"63#关系型数据库\",\"905\":\"63#目录\",\"906\":\"63#非关系型数据库\",\"907\":\"63#目录-1\",\"908\":\"64\",\"909\":\"64#安装\",\"910\":\"64#快速开始\",\"911\":\"64#连接配置\",\"912\":\"64#建立连接\",\"913\":\"64#关闭连接\",\"914\":\"64#基本操作\",\"915\":\"64#删除键\",\"916\":\"64#过期时间\",\"917\":\"64#取消过期时间\",\"918\":\"64#查询过期时间\",\"919\":\"64#重命名\",\"920\":\"64#查询类型\",\"921\":\"64#扫描\",\"922\":\"64#字符串\",\"923\":\"64#简单存取\",\"924\":\"64#批量存取\",\"925\":\"64#数字增减\",\"926\":\"64#哈希表\",\"927\":\"64#读写操作\",\"928\":\"64#删除键-1\",\"929\":\"64#判断键是否存在\",\"930\":\"64#获取所有的键\",\"931\":\"64#获取哈希表键长度\",\"932\":\"64#遍历哈希表的键值对\",\"933\":\"64#列表\",\"934\":\"64#修改元素\",\"935\":\"64#访问长度\",\"936\":\"64#访问元素\",\"937\":\"64#删除元素\",\"938\":\"64#集合\",\"939\":\"64#新增元素\",\"940\":\"64#访问集合元素\",\"941\":\"64#集合操作\",\"942\":\"64#删除元素-1\",\"943\":\"64#移动元素\",\"944\":\"64#删除元素-2\",\"945\":\"64#遍历\",\"946\":\"64#有序集合\",\"947\":\"64#加入元素\",\"948\":\"64#元素排名\",\"949\":\"64#访问元素-1\",\"950\":\"64#修改权值\",\"951\":\"64#删除元素-3\",\"952\":\"64#脚本\",\"953\":\"64#发布订阅\",\"954\":\"64@1\",\"955\":\"65\",\"956\":\"65#_01、redis-简介\",\"957\":\"65#redis-优势\",\"958\":\"65#为什么用redis\",\"959\":\"65#高性能\",\"960\":\"65#高并发\",\"961\":\"65#与传统关系型数据库对比\",\"962\":\"65#_02、redis的下载和安装\",\"963\":\"65#_1-window下安装redis服务\",\"964\":\"65#_2-linux下安装redis服务\",\"965\":\"65#_3-redis配置文件详解\",\"966\":\"65#_03、关于redis-命令\",\"967\":\"65#a-key命令\",\"968\":\"65#b-服务端命令\",\"969\":\"65#_04、数据结构\",\"970\":\"65#_1-字符串string\",\"971\":\"65#_2-列表list\",\"972\":\"65#_3-哈希表hash\",\"973\":\"65#_4-集合set\",\"974\":\"65#_5-有序集合zset\",\"975\":\"65#扩展\",\"976\":\"65#geo地理位置\",\"977\":\"65#hyperloglog技术统计\",\"978\":\"65#bloomfilter布隆过滤器\",\"979\":\"65#_05、redis持久化\",\"980\":\"65#rdb-快照模式\",\"981\":\"65#_1-触发策略\",\"982\":\"65#_2-rdb的错误处理\",\"983\":\"65#_3-rdb的数据压缩\",\"984\":\"65#aof-日志模式\",\"985\":\"65#_1-实现机制-写入和重写\",\"986\":\"65#_2-开启aof\",\"987\":\"65#_3-aof配置策略\",\"988\":\"65#aof和rdb对比\",\"989\":\"65#_06、事务\",\"990\":\"65#_07、redis主从复制\",\"991\":\"65#好处\",\"992\":\"65#主从模式实现\",\"993\":\"65#_1-命令方式\",\"994\":\"65#_2-配置文件方式\",\"995\":\"65#_08、redis哨兵\",\"996\":\"65#原理\",\"997\":\"65#_1-主观下线\",\"998\":\"65#_2-客观下线\",\"999\":\"65#_3-投票选举\",\"1000\":\"65#哨兵的配置和使用\",\"1001\":\"65#哨兵模式应用\",\"1002\":\"65#_1-搭建主从模式\",\"1003\":\"65#_2-单版本配置sentinel哨兵\",\"1004\":\"65#_3-集群版本配置sentinel哨兵\",\"1005\":\"65#_09、redis集群\",\"1006\":\"65#原理-1\",\"1007\":\"65#组成\",\"1008\":\"65#部署集群\",\"1009\":\"65#_1-环境准备\",\"1010\":\"65#_2-单机集群\",\"1011\":\"65#_3-多机集群\",\"1012\":\"65#总结\",\"1013\":\"65@1\",\"1014\":\"66\",\"1015\":\"66@1\",\"1016\":\"67\",\"1017\":\"67#_01、kafka简介\",\"1018\":\"67#_02、kafka的特点\",\"1019\":\"67#_03、常用的场景\",\"1020\":\"67#_2-1、-kafka的基本角色\",\"1021\":\"67#_2-2、zookeeper在kafka中的角色\",\"1022\":\"67#_3-1-工作流程\",\"1023\":\"67#_3-2-选择partition的原则\",\"1024\":\"67#_3-3-ack应答机制\",\"1025\":\"67#_3-4-topic和数据日志\",\"1026\":\"67#_3-5-partition结构\",\"1027\":\"67#_3-6-消费数据\",\"1028\":\"67#_1、下载与安装kafka\",\"1029\":\"67#_2、配置kafka\",\"1030\":\"67#_3、添加环境变量\",\"1031\":\"67#zookeeper服务的启动\",\"1032\":\"67#_4、kafka启动脚本\",\"1033\":\"67#_5、启动kafka\",\"1034\":\"67#_6、测试kafka基本命令操作\",\"1035\":\"67#_4-1-消息生产代码示例\",\"1036\":\"67#_4-2-消息消费代码示例\",\"1037\":\"67#_4-3-创建主题代码示例\",\"1038\":\"67#_4-4-性能测试结果\",\"1039\":\"67#测试环境\",\"1040\":\"67#测试结果\",\"1041\":\"67#kafka消费者\",\"1042\":\"67#每秒消费100条消息-平均耗时-67毫秒\",\"1043\":\"67#每秒消费1000条消息-平均耗时-6-7毫秒\",\"1044\":\"67#rabbitmq消费者\",\"1045\":\"67#每秒消费100条消息-平均耗时-1038毫秒\",\"1046\":\"67#每秒消费1000条消息-平均耗时-10-38毫秒\",\"1047\":\"67#生产者\",\"1048\":\"67@1\",\"1049\":\"68\",\"1050\":\"68#目录\",\"1051\":\"68#技术选型\",\"1052\":\"68#消息队列的作用\",\"1053\":\"68#rabbitmq\",\"1054\":\"68#rocketmq\",\"1055\":\"68#kafka\",\"1056\":\"68#pulsar\",\"1057\":\"68#_2-3、如何选择合适的消息队列\",\"1058\":\"69\",\"1059\":\"69@1\",\"1060\":\"70\",\"1061\":\"70#什么是消息队列\",\"1062\":\"70#高性能\",\"1063\":\"70#高扩展\",\"1064\":\"70#高可用\",\"1065\":\"70#持久化和过期策略\",\"1066\":\"70#zookeeper\",\"1067\":\"70#kafka是什么\",\"1068\":\"70#kafka的使用场景\",\"1069\":\"70@1\",\"1070\":\"71\",\"1071\":\"71#_01、概述\",\"1072\":\"71#_02、网关选择\",\"1073\":\"71#_03、kong的安装\",\"1074\":\"71#使用docker安装\",\"1075\":\"71#_1、启动数据库\",\"1076\":\"71#_2、初始化数据\",\"1077\":\"71#_3-安装方式一-docker安装kong\",\"1078\":\"71#_4、安装方式二-手动安装kong\",\"1079\":\"71#_5、-安装konga\",\"1080\":\"71#_04、开始配置kong服务和路由\",\"1081\":\"71#_1-准备工作\",\"1082\":\"71#_2-测试\",\"1083\":\"71#_3-配置kong网关代理\",\"1084\":\"71#a-配置服务services\",\"1085\":\"71#b-添加路由\",\"1086\":\"71#c-访问测试\",\"1087\":\"71#d-配置商品服务的路径\",\"1088\":\"71#_05、kong整合jwt\",\"1089\":\"71#_1-新建一个consumer\",\"1090\":\"71#_2-给consumer添加一个认证jwt\",\"1091\":\"71#_3-配置全局的jwt\",\"1092\":\"71#_4-修改代码\",\"1093\":\"71#_5-开始测试\",\"1094\":\"71#_06、kong限制限流器访问\",\"1095\":\"71#_1-添加插件\",\"1096\":\"71#_2-配置bot-detection\",\"1097\":\"71#_07、kong请求大小参数限制\",\"1098\":\"71#_1-添加插件-1\",\"1099\":\"71#_2-开始测试\",\"1100\":\"71#_08、利用konga进行限流\",\"1101\":\"71#_1-添加限流插件\",\"1102\":\"71#_2-基于ip地址的每分钟2次请求\",\"1103\":\"71#_3-开始测试\",\"1104\":\"71@1\",\"1105\":\"72\",\"1106\":\"72#_01-nginx的概述\",\"1107\":\"72#什么是nginx\",\"1108\":\"72#常见的服务器\",\"1109\":\"72#_02-nginx的安装\",\"1110\":\"72#_01、创建nginx服务器目录\",\"1111\":\"72#_02、下载安装\",\"1112\":\"72#_03、安装编译工具及库文件\",\"1113\":\"72#_04、解压nginx\",\"1114\":\"72#_05、创建nginx的临时目录\",\"1115\":\"72#_06、进入安装包目录\",\"1116\":\"72#_07、配置nginx的安装路径\",\"1117\":\"72#_08、-make编译\",\"1118\":\"72#_09、-安装\",\"1119\":\"72#_10、-进入sbin目录启动nginx\",\"1120\":\"72#_11、打开浏览器-访问虚拟机所处内网ip即可打开nginx默认页面-显示如下便表示安装成功\",\"1121\":\"72#_12、注意事项\",\"1122\":\"72#_13、配置nginx的环境变量\",\"1123\":\"72#_14、加载默认页面\",\"1124\":\"72#_03-nginx的进程结构\",\"1125\":\"72#nginx的进程模型\",\"1126\":\"72#概述\",\"1127\":\"72#总结\",\"1128\":\"72#nginx的worker抢占机制\",\"1129\":\"72#_04、nginx-conf配置文件分析\",\"1130\":\"72#nginx-conf配置文件分析\",\"1131\":\"72#nginx外部配置文件include-包含\",\"1132\":\"72#查看nginx的配置\",\"1133\":\"72#nginx常量表\",\"1134\":\"72#_05-nginx关于root和alias\",\"1135\":\"72#_01、上传静态资源到服务器\",\"1136\":\"72#_02、打开yykk-conf文件\",\"1137\":\"72#_03、验证和重启nginx\",\"1138\":\"72#_04、然后访问nginx的静态资源服务器\",\"1139\":\"72#_05、alias与root的区别\",\"1140\":\"72#_06-nginx关于location\",\"1141\":\"72#_01、默认匹配规则\",\"1142\":\"72#_02、精准匹配规则\",\"1143\":\"72#_03、正则匹配规则\",\"1144\":\"72#_04、以某种字符串开头的匹配规则\",\"1145\":\"72#_07-nginx的限流\",\"1146\":\"72#_1、漏桶算法-限制请求次数\",\"1147\":\"72#_2、令牌桶算法-限制请求速度\",\"1148\":\"72#_3、计数器-限制连接数\",\"1149\":\"72#_4、两种算法的区别\",\"1150\":\"72#_5、nginx官方版本限制ip的连接和并发分别有两个模块\",\"1151\":\"72#_01、limit-req-zone-参数配置\",\"1152\":\"72#_02、ngx-http-limit-conn-module-参数配置\",\"1153\":\"72#_6、nginx限流实战\",\"1154\":\"72#a-控制速率-基于ip限流配置\",\"1155\":\"72#b-burst缓存处理\",\"1156\":\"72#c-nodelay降低排队时间\",\"1157\":\"72#d-自定义返回值\",\"1158\":\"72#f-基于链接限流\",\"1159\":\"72#_08-nginx的负载均衡-upstream\",\"1160\":\"72#目标\",\"1161\":\"72#_01、轮询\",\"1162\":\"72#_02、weight-重量-权重-加权轮询\",\"1163\":\"72#_03、upstream\",\"1164\":\"72#_04、ip-hash\",\"1165\":\"72#_05、一致性hash\",\"1166\":\"72#_06、url-hash-细粒度的负载均衡\",\"1167\":\"72#_07、least-conn\",\"1168\":\"72#_08、fair-收费\",\"1169\":\"72#_09、总结\",\"1170\":\"72#_09、杂项\",\"1171\":\"72#_1、nginx启动失败找不到-pid文件如何处理\",\"1172\":\"72#_2、优雅的关闭nginx服务\",\"1173\":\"72#_3、查看nginx的配置\",\"1174\":\"72#_4、nginx日志文件分割\",\"1175\":\"72#_5、nginx的日志文件自动切割\",\"1176\":\"72@1\",\"1177\":\"74\",\"1178\":\"74@1\",\"1179\":\"75\",\"1180\":\"75#为什么要用docker\",\"1181\":\"75#docker优势\",\"1182\":\"75#_01、docker基础\",\"1183\":\"75#docker必要概念\",\"1184\":\"75#安装docker\",\"1185\":\"75#hello-world-干了什么\",\"1186\":\"75#docker常用命令\",\"1187\":\"75#镜像命令\",\"1188\":\"75#容器命令\",\"1189\":\"75#其他命令\",\"1190\":\"75#原理\",\"1191\":\"75#镜像是什么\",\"1192\":\"75#加载原理\",\"1193\":\"75#生成一个镜像并提交\",\"1194\":\"75#docker网络\",\"1195\":\"75#原理-1\",\"1196\":\"75#使用\",\"1197\":\"75#自定义网络\",\"1198\":\"75#网络连通\",\"1199\":\"75#容器数据卷\",\"1200\":\"75#_02、docker镜像管理\",\"1201\":\"75#_03、docker容器管理\",\"1202\":\"75#_04、docker网络\",\"1203\":\"75#_05、docker-compose\",\"1204\":\"75#_06、docker-与-devops\",\"1205\":\"75#_07、docker-swarm集群\",\"1206\":\"75#_08、高级特性\",\"1207\":\"75#_09、优化\",\"1208\":\"75#_10、常见的问题\",\"1209\":\"75@1\",\"1210\":\"76\",\"1211\":\"76@1\",\"1212\":\"77\",\"1213\":\"77#kubenetes架构\",\"1214\":\"77#原理\",\"1215\":\"77#使用\",\"1216\":\"77@1\",\"1217\":\"79\",\"1218\":\"79#下载\",\"1219\":\"79#网络设置\",\"1220\":\"79#配置软件源\",\"1221\":\"79#安装docker\",\"1222\":\"79#安装k8s\",\"1223\":\"79#修改容器引擎\",\"1224\":\"79#kubenetes集群\",\"1225\":\"79#初始化主节点\",\"1226\":\"79#加入控制节点\",\"1227\":\"79#加入work节点\",\"1228\":\"79#安装pod网络calico\",\"1229\":\"79#安装面板\",\"1230\":\"79#最新面板安装\",\"1231\":\"79#_1、安装helm并升级安装dashboard\",\"1232\":\"79#_2、进入webui\",\"1233\":\"79#_1本地代理\",\"1234\":\"79#_2修改服务类型\",\"1235\":\"79#_3ingress-暴露服务\",\"1236\":\"79@1\",\"1237\":\"80\",\"1238\":\"80#_01、casbin简介\",\"1239\":\"80#特点\",\"1240\":\"80#为什么要用这个casbin\",\"1241\":\"80#常见的应用场景\",\"1242\":\"80#_02、快速开始\",\"1243\":\"80#_1、初始化项目\",\"1244\":\"80#_2、casbin使用两个配置文件来设置控制访问\",\"1245\":\"80#_3、检查权限\",\"1246\":\"80#存储\",\"1247\":\"80#模型存储\",\"1248\":\"80#策略存储\",\"1249\":\"80#_03、工作原理\",\"1250\":\"80#基本概念\",\"1251\":\"80#request\",\"1252\":\"80#policy\",\"1253\":\"80#matcher\",\"1254\":\"80#effect\",\"1255\":\"80#什么是acl\",\"1256\":\"80#模型定义\",\"1257\":\"80#现在让我们在casbin编辑器上测试模型\",\"1258\":\"80#acl模型、策略和请求匹配的视觉表示\",\"1259\":\"80#什么是rbac\",\"1260\":\"80#模型定义-1\",\"1261\":\"80#现在让我们在casbin编辑器上测试模型-1\",\"1262\":\"80#rbac模型、策略和请求匹配的视觉表示\",\"1263\":\"80#什么是分层rbac\",\"1264\":\"80#模型定义-2\",\"1265\":\"80#现在让我们在casbin编辑器上测试这个模型\",\"1266\":\"80#rbac模型、策略和请求匹配的视觉表示-1\",\"1267\":\"80#主题匹配视觉表示\",\"1268\":\"80#操作匹配视觉表示\",\"1269\":\"80#对象匹配视觉表示\",\"1270\":\"80@1\",\"1271\":\"81\",\"1272\":\"81#_01-简介\",\"1273\":\"81#_1-1-介绍\",\"1274\":\"81#_1-2-安装\",\"1275\":\"81#_1-3-hello-word\",\"1276\":\"81#_02、gin路由\",\"1277\":\"81#_2-1-基本路由\",\"1278\":\"81#_2-2-restful风格的api\",\"1279\":\"81#_2-3参数解析\",\"1280\":\"81#_1-路由相关参数\",\"1281\":\"81#_2-请求体参数\",\"1282\":\"81#_3-请求头参数\",\"1283\":\"81#_4-结构体参数\",\"1284\":\"81#_2-4-gin路由的底层实现\",\"1285\":\"81#路由树-结构\",\"1286\":\"81#路由树-构建\",\"1287\":\"81#路由树-匹配\",\"1288\":\"81#_03、参数验证\",\"1289\":\"81#_3-1-结构体验证\",\"1290\":\"81#_3-2-自定义验证\",\"1291\":\"81#_3-3-多语言翻译错误信息\",\"1292\":\"81@1\",\"1293\":\"82\",\"1294\":\"82@1\",\"1295\":\"84\",\"1296\":\"84@1\",\"1297\":\"85\",\"1298\":\"85@1\",\"1299\":\"88\",\"1300\":\"88#安装\",\"1301\":\"88#快速开始\",\"1302\":\"88#配置\",\"1303\":\"88#日志编码\",\"1304\":\"88#日式输出\",\"1305\":\"88#日志级别\",\"1306\":\"88#最后构建\",\"1307\":\"88#lumberjack-日志切割组件\",\"1308\":\"89\",\"1309\":\"91\",\"1310\":\"91#xml\",\"1311\":\"91#序列化\",\"1312\":\"91#反序列化\",\"1313\":\"91#yml\",\"1314\":\"91#序列化-1\",\"1315\":\"91#反序列化-1\",\"1316\":\"91#json\",\"1317\":\"91#序列化-2\",\"1318\":\"91#字段重命名\",\"1319\":\"91#缩进\",\"1320\":\"91#反序列化-2\",\"1321\":\"91#protocol-buffers\",\"1322\":\"92\",\"1323\":\"92#导入\",\"1324\":\"92#类型\",\"1325\":\"92#定义\",\"1326\":\"92#解析\",\"1327\":\"92#其他\",\"1328\":\"92#示例\",\"1329\":\"93\",\"1330\":\"93#get示例\",\"1331\":\"93#post示例\",\"1332\":\"93#客户端\",\"1333\":\"93#简单示例\",\"1334\":\"93#增加header\",\"1335\":\"93#服务端\",\"1336\":\"93#自定义\",\"1337\":\"93#路由\",\"1338\":\"93#反向代理\",\"1339\":\"94\",\"1340\":\"94#前缀\",\"1341\":\"94#flag\",\"1342\":\"95\",\"1343\":\"95#整数常量\",\"1344\":\"95#浮点常量\",\"1345\":\"95#数学常量\",\"1346\":\"95#最大值\",\"1347\":\"95#最小值\",\"1348\":\"95#绝对值\",\"1349\":\"95#余数\",\"1350\":\"95#nan检测\",\"1351\":\"95#inf检测\",\"1352\":\"95#取整\",\"1353\":\"95#向下取整\",\"1354\":\"95#向上取整\",\"1355\":\"95#四舍五入\",\"1356\":\"95#求对数\",\"1357\":\"95#e的指数\",\"1358\":\"95#幂\",\"1359\":\"95#平方根\",\"1360\":\"95#立方根\",\"1361\":\"95#开n方\",\"1362\":\"95#sin\",\"1363\":\"95#cos\",\"1364\":\"95#tan\",\"1365\":\"96\",\"1366\":\"96#地址解析\",\"1367\":\"96#mac地址\",\"1368\":\"96#cidr\",\"1369\":\"96#ip地址\",\"1370\":\"96#tcp地址\",\"1371\":\"96#udp地址\",\"1372\":\"96#unix地址\",\"1373\":\"96#dns\",\"1374\":\"96#网络编程\",\"1375\":\"97\",\"1376\":\"97#整型排序\",\"1377\":\"97#浮点排序\",\"1378\":\"97#字符串排序\",\"1379\":\"97#逆向排序\",\"1380\":\"97#自定义排序\",\"1381\":\"97#是否有序\",\"1382\":\"98\",\"1383\":\"98#导入\",\"1384\":\"98#字符串转整型\",\"1385\":\"98#整型转字符串\",\"1386\":\"98#字符串转布尔值\",\"1387\":\"98#布尔值转字符串\",\"1388\":\"98#转换成go字符串\",\"1389\":\"98#字符串转浮点数\",\"1390\":\"98#浮点数转字符串\",\"1391\":\"98#字符串转复数\",\"1392\":\"98#复数转字符串\",\"1393\":\"98#字符串追加数据\",\"1394\":\"99\",\"1395\":\"99#导入\",\"1396\":\"99#复制字符串\",\"1397\":\"99#比较字符串\",\"1398\":\"99#包含字符串\",\"1399\":\"99#子串出现次数\",\"1400\":\"99#删除指定子串\",\"1401\":\"99#忽略大小写相等\",\"1402\":\"99#分割字符串\",\"1403\":\"99#寻找前后缀\",\"1404\":\"99#子串的位置\",\"1405\":\"99#遍历替换字符串\",\"1406\":\"99#重复复制字符串\",\"1407\":\"99#替换字符串\",\"1408\":\"99#分隔字符串\",\"1409\":\"99#大小写转换\",\"1410\":\"99#修剪字符串\",\"1411\":\"99#字符串builder\",\"1412\":\"99#字符串replacer\",\"1413\":\"99#字符串reader\",\"1414\":\"100\",\"1415\":\"100#快速开始\",\"1416\":\"100#模板语法\",\"1417\":\"100#参数\",\"1418\":\"100#注释\",\"1419\":\"100#变量\",\"1420\":\"100#函数\",\"1421\":\"100#管道\",\"1422\":\"100#with\",\"1423\":\"100#条件\",\"1424\":\"100#迭代\",\"1425\":\"100#嵌套\",\"1426\":\"100#关联\",\"1427\":\"100#插槽\",\"1428\":\"100#模板文件\",\"1429\":\"101\",\"1430\":\"101#时间单位\",\"1431\":\"101#格式化\",\"1432\":\"101#解析时间\",\"1433\":\"101#timer\",\"1434\":\"101#ticker\",\"1435\":\"101#sleep\",\"1436\":\"102\",\"1437\":\"103\",\"1438\":\"103#arbitrarytype\",\"1439\":\"103#integertype\",\"1440\":\"103#sizeof\",\"1441\":\"103#offsetof\",\"1442\":\"103#alignof\",\"1443\":\"103#pointer\",\"1444\":\"103#add\",\"1445\":\"103#slicedata\",\"1446\":\"103#slice\",\"1447\":\"103#stringdata\",\"1448\":\"103#string\",\"1449\":\"104\",\"1450\":\"104@1\",\"1451\":\"105\",\"1452\":\"105@1\",\"1453\":\"106\",\"1454\":\"106@1\",\"1455\":\"107\",\"1456\":\"107@1\",\"1457\":\"109\",\"1458\":\"110\",\"1459\":\"111\",\"1460\":\"112\",\"1461\":\"113\",\"1462\":\"114\",\"1463\":\"115\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,12],\"1\":[1],\"2\":[1,12],\"3\":[3],\"4\":[1,33],\"5\":[1,35],\"6\":[null,null,1],\"7\":[2],\"8\":[null,null,1],\"9\":[2,46],\"10\":[4],\"11\":[5,19],\"12\":[3,129],\"13\":[4,20],\"14\":[4,17],\"15\":[4],\"16\":[4],\"17\":[3,34],\"18\":[3,27],\"19\":[3,12],\"20\":[3,5],\"21\":[4,4],\"22\":[3,29],\"23\":[5,7],\"24\":[3,11],\"25\":[3,18],\"26\":[3,11],\"27\":[4,6],\"28\":[3,34],\"29\":[3,7],\"30\":[3,37],\"31\":[3,4],\"32\":[3],\"33\":[3,5],\"34\":[3,6],\"35\":[3,14],\"36\":[3,47],\"37\":[3,16],\"38\":[5,1],\"39\":[3,10],\"40\":[3,1],\"41\":[4],\"42\":[3,5],\"43\":[3,46],\"44\":[3,3],\"45\":[3,1],\"46\":[3,4],\"47\":[3,5],\"48\":[4,7],\"49\":[4,28],\"50\":[4,12],\"51\":[3],\"52\":[6,6],\"53\":[3,52],\"54\":[5,20],\"55\":[3,75],\"56\":[3,11],\"57\":[4,11],\"58\":[3,134],\"59\":[1],\"60\":[1,2],\"61\":[1,13],\"62\":[1,18],\"63\":[1],\"64\":[4,20],\"65\":[4,35],\"66\":[1],\"67\":[1],\"68\":[1],\"69\":[1],\"70\":[1],\"71\":[1],\"72\":[1,15],\"73\":[2,5],\"74\":[1,11],\"75\":[1],\"76\":[2,10],\"77\":[2,25],\"78\":[1],\"79\":[2,31],\"80\":[null,null,1],\"81\":[1],\"82\":[1,28],\"83\":[1,30],\"84\":[1,98],\"85\":[1,17],\"86\":[null,null,1],\"87\":[1],\"88\":[null,null,1],\"89\":[1],\"90\":[null,null,1],\"91\":[1],\"92\":[1],\"93\":[null,null,1],\"94\":[1],\"95\":[null,null,1],\"96\":[1],\"97\":[null,null,1],\"98\":[1],\"99\":[null,null,1],\"100\":[1],\"101\":[null,null,1],\"102\":[1],\"103\":[null,null,1],\"104\":[1],\"105\":[null,null,1],\"106\":[1],\"107\":[null,null,1],\"108\":[1],\"109\":[1,4],\"110\":[2,32],\"111\":[1,72],\"112\":[2],\"113\":[1,11],\"114\":[1,10],\"115\":[2,9],\"116\":[2,16],\"117\":[2,13],\"118\":[2,11],\"119\":[1,10],\"120\":[1,42],\"121\":[1,47],\"122\":[1,200],\"123\":[1,20],\"124\":[1,384],\"125\":[1],\"126\":[1,54],\"127\":[1,173],\"128\":[1,120],\"129\":[1,42],\"130\":[1,53],\"131\":[1,34],\"132\":[1,77],\"133\":[1,34],\"134\":[1,64],\"135\":[1,35],\"136\":[1,17],\"137\":[1,87],\"138\":[1,81],\"139\":[1,98],\"140\":[1,35],\"141\":[1,55],\"142\":[1,106],\"143\":[1,34],\"144\":[1,112],\"145\":[1,193],\"146\":[1,38],\"147\":[null,null,1],\"148\":[1,21],\"149\":[2],\"150\":[2,14],\"151\":[3,21],\"152\":[3,12],\"153\":[3,10],\"154\":[3,5],\"155\":[3,13],\"156\":[3,5],\"157\":[2,3],\"158\":[5,22],\"159\":[2,7],\"160\":[4,12],\"161\":[3,8],\"162\":[3,6],\"163\":[2],\"164\":[3,24],\"165\":[3,32],\"166\":[2,25],\"167\":[2],\"168\":[6,15],\"169\":[5,20],\"170\":[5,26],\"171\":[null,null,1],\"172\":[1,24],\"173\":[1,13],\"174\":[1,32],\"175\":[1,48],\"176\":[1,29],\"177\":[1,16],\"178\":[1,41],\"179\":[1,50],\"180\":[1,10],\"181\":[1,19],\"182\":[1,35],\"183\":[1,25],\"184\":[1,14],\"185\":[1,31],\"186\":[1,17],\"187\":[1,21],\"188\":[1,12],\"189\":[1,16],\"190\":[1,3],\"191\":[1,17],\"192\":[1,19],\"193\":[1,8],\"194\":[null,null,1],\"195\":[1,5],\"196\":[1,13],\"197\":[1,29],\"198\":[1,10],\"199\":[1,6],\"200\":[1,15],\"201\":[1,32],\"202\":[1,22],\"203\":[1,12],\"204\":[1,7],\"205\":[1,30],\"206\":[1,57],\"207\":[1,21],\"208\":[1,49],\"209\":[1,62],\"210\":[1,36],\"211\":[1,48],\"212\":[1,49],\"213\":[1,47],\"214\":[1,11],\"215\":[1,22],\"216\":[1,2],\"217\":[1,12],\"218\":[1,13],\"219\":[1,19],\"220\":[1,23],\"221\":[1,158],\"222\":[1,1],\"223\":[1,19],\"224\":[1,49],\"225\":[1,23],\"226\":[1,31],\"227\":[1,8],\"228\":[2,37],\"229\":[2,41],\"230\":[1,49],\"231\":[1,18],\"232\":[1,24],\"233\":[1,77],\"234\":[2,39],\"235\":[1,30],\"236\":[1,32],\"237\":[1,8],\"238\":[1,12],\"239\":[1,46],\"240\":[1,16],\"241\":[1,38],\"242\":[1,4],\"243\":[1,49],\"244\":[1,65],\"245\":[1,29],\"246\":[1,30],\"247\":[1,25],\"248\":[1,28],\"249\":[1,35],\"250\":[1,56],\"251\":[1,27],\"252\":[1,28],\"253\":[1,33],\"254\":[1,52],\"255\":[1,39],\"256\":[1,26],\"257\":[1,27],\"258\":[1,136],\"259\":[1,55],\"260\":[1,37],\"261\":[1,44],\"262\":[1,33],\"263\":[1,34],\"264\":[1,28],\"265\":[1,34],\"266\":[1,56],\"267\":[1,21],\"268\":[1,45],\"269\":[1,72],\"270\":[1,33],\"271\":[1,17],\"272\":[1,35],\"273\":[1,59],\"274\":[1,26],\"275\":[1,46],\"276\":[1,51],\"277\":[1,40],\"278\":[1,50],\"279\":[1,41],\"280\":[1,50],\"281\":[1,53],\"282\":[1,85],\"283\":[1,34],\"284\":[1,34],\"285\":[1,87],\"286\":[1,35],\"287\":[1,129],\"288\":[1,8],\"289\":[1,72],\"290\":[1,3],\"291\":[1,14],\"292\":[1,13],\"293\":[1,120],\"294\":[1,100],\"295\":[1,4],\"296\":[1,35],\"297\":[1,44],\"298\":[1,77],\"299\":[1,47],\"300\":[1,97],\"301\":[1,48],\"302\":[1,46],\"303\":[1,119],\"304\":[1,61],\"305\":[1,29],\"306\":[1,81],\"307\":[1,52],\"308\":[1,39],\"309\":[1,32],\"310\":[1,73],\"311\":[1,8],\"312\":[1,75],\"313\":[1,50],\"314\":[1,84],\"315\":[1,20],\"316\":[1,11],\"317\":[1,75],\"318\":[1,52],\"319\":[1,34],\"320\":[1,77],\"321\":[1,14],\"322\":[1,31],\"323\":[1,73],\"324\":[1,74],\"325\":[1,22],\"326\":[1,152],\"327\":[1,95],\"328\":[1,80],\"329\":[1,11],\"330\":[1,31],\"331\":[1,9],\"332\":[1,8],\"333\":[1,9],\"334\":[1,21],\"335\":[1,34],\"336\":[1,7],\"337\":[1,87],\"338\":[1,66],\"339\":[1,62],\"340\":[1,100],\"341\":[1,70],\"342\":[1,3],\"343\":[1,46],\"344\":[1,97],\"345\":[1,32],\"346\":[1,13],\"347\":[1,67],\"348\":[1,49],\"349\":[1,16],\"350\":[1,18],\"351\":[1,88],\"352\":[1,50],\"353\":[1,25],\"354\":[1,21],\"355\":[1,32],\"356\":[1,32],\"357\":[1,18],\"358\":[1,16],\"359\":[1,19],\"360\":[1,49],\"361\":[1,27],\"362\":[1,22],\"363\":[1,2],\"364\":[1,34],\"365\":[1,24],\"366\":[1,21],\"367\":[1,67],\"368\":[1,52],\"369\":[1,34],\"370\":[1,61],\"371\":[1,36],\"372\":[1,3],\"373\":[1,22],\"374\":[1,37],\"375\":[1,39],\"376\":[1,27],\"377\":[1,22],\"378\":[1,29],\"379\":[1,54],\"380\":[1,8],\"381\":[1,43],\"382\":[1,19],\"383\":[1,40],\"384\":[1,45],\"385\":[1,69],\"386\":[1,28],\"387\":[1,24],\"388\":[1,123],\"389\":[1,20],\"390\":[1,64],\"391\":[1,22],\"392\":[1,46],\"393\":[1,130],\"394\":[1,32],\"395\":[1,29],\"396\":[1,72],\"397\":[1,42],\"398\":[1,26],\"399\":[1,9],\"400\":[1,183],\"401\":[1,90],\"402\":[1,93],\"403\":[1,74],\"404\":[1,24],\"405\":[1,29],\"406\":[1,23],\"407\":[1,1],\"408\":[1,41],\"409\":[1,26],\"410\":[1,63],\"411\":[1,6],\"412\":[1,123],\"413\":[1,30],\"414\":[1,31],\"415\":[1,42],\"416\":[1,30],\"417\":[1,134],\"418\":[1,60],\"419\":[1,77],\"420\":[2,87],\"421\":[1,127],\"422\":[1,102],\"423\":[1,13],\"424\":[1,42],\"425\":[1,48],\"426\":[1,64],\"427\":[1,106],\"428\":[1,80],\"429\":[1,100],\"430\":[1,68],\"431\":[1,99],\"432\":[1,107],\"433\":[1,8],\"434\":[1,100],\"435\":[1,143],\"436\":[1,103],\"437\":[1,26],\"438\":[1,25],\"439\":[1,41],\"440\":[1,81],\"441\":[1,40],\"442\":[1,32],\"443\":[1,31],\"444\":[1,16],\"445\":[1,45],\"446\":[1,64],\"447\":[1,25],\"448\":[1,42],\"449\":[1,105],\"450\":[1,37],\"451\":[1,36],\"452\":[1,6],\"453\":[1,204],\"454\":[1,146],\"455\":[1,33],\"456\":[1,27],\"457\":[1,49],\"458\":[1,26],\"459\":[2,216],\"460\":[2,124],\"461\":[1,23],\"462\":[1,37],\"463\":[1,104],\"464\":[1,19],\"465\":[1,30],\"466\":[1,20],\"467\":[1,35],\"468\":[1,92],\"469\":[1,111],\"470\":[1,133],\"471\":[1,122],\"472\":[1,65],\"473\":[1,92],\"474\":[1,57],\"475\":[1,148],\"476\":[1,317],\"477\":[1,294],\"478\":[1,18],\"479\":[1],\"480\":[2,10],\"481\":[1,15],\"482\":[2,12],\"483\":[1,20],\"484\":[2,6],\"485\":[1],\"486\":[1,27],\"487\":[1,24],\"488\":[1,5],\"489\":[1,7],\"490\":[1],\"491\":[1,54],\"492\":[1,18],\"493\":[1,10],\"494\":[1,79],\"495\":[1,12],\"496\":[2,6],\"497\":[2,23],\"498\":[1,94],\"499\":[1,39],\"500\":[2,39],\"501\":[2,18],\"502\":[1,47],\"503\":[3,15],\"504\":[1,24],\"505\":[2,33],\"506\":[1,2],\"507\":[1],\"508\":[1],\"509\":[2,14],\"510\":[1,16],\"511\":[1,88],\"512\":[1,45],\"513\":[1,135],\"514\":[1,111],\"515\":[1,89],\"516\":[1,142],\"517\":[1],\"518\":[null,null,1],\"519\":[1],\"520\":[2,22],\"521\":[1,5],\"522\":[5,16],\"523\":[1,9],\"524\":[3,16],\"525\":[3,15],\"526\":[1,8],\"527\":[1,6],\"528\":[1,7],\"529\":[1,34],\"530\":[1,5],\"531\":[2],\"532\":[1,9],\"533\":[1,6],\"534\":[3,10],\"535\":[1,27],\"536\":[1,2],\"537\":[1,44],\"538\":[2,5],\"539\":[4,9],\"540\":[2,23],\"541\":[1,9],\"542\":[1,39],\"543\":[2,4],\"544\":[2,9],\"545\":[2,51],\"546\":[1,63],\"547\":[2,6],\"548\":[3,38],\"549\":[2,26],\"550\":[2],\"551\":[1,22],\"552\":[1,4],\"553\":[1,23],\"554\":[1,66],\"555\":[2,4],\"556\":[1,49],\"557\":[1,52],\"558\":[2,41],\"559\":[null,null,1],\"560\":[1],\"561\":[1,22],\"562\":[1,42],\"563\":[3,29],\"564\":[3,19],\"565\":[3,22],\"566\":[1,85],\"567\":[3,33],\"568\":[1],\"569\":[1,51],\"570\":[1,17],\"571\":[1],\"572\":[3,20],\"573\":[1,72],\"574\":[1],\"575\":[3,12],\"576\":[3,68],\"577\":[3,9],\"578\":[3,2],\"579\":[3,55],\"580\":[3,45],\"581\":[1,39],\"582\":[3,14],\"583\":[3,20],\"584\":[1,60],\"585\":[2,28],\"586\":[2,10],\"587\":[1,24],\"588\":[1,53],\"589\":[1],\"590\":[1,29],\"591\":[1],\"592\":[4,61],\"593\":[3,43],\"594\":[1,15],\"595\":[2,70],\"596\":[1],\"597\":[3,44],\"598\":[3,46],\"599\":[1,14],\"600\":[1,36],\"601\":[1,22],\"602\":[2],\"603\":[2,41],\"604\":[2,14],\"605\":[1],\"606\":[1,44],\"607\":[1,21],\"608\":[3],\"609\":[1,15],\"610\":[3,47],\"611\":[1,31],\"612\":[1],\"613\":[1,19],\"614\":[1,45],\"615\":[3,27],\"616\":[1,10],\"617\":[2,22],\"618\":[2,58],\"619\":[2,32],\"620\":[1,43],\"621\":[1,42],\"622\":[1,33],\"623\":[2],\"624\":[1,20],\"625\":[1,52],\"626\":[1,19],\"627\":[null,null,1],\"628\":[1],\"629\":[1,7],\"630\":[2,91],\"631\":[null,null,1],\"632\":[3],\"633\":[1,285],\"634\":[1,319],\"635\":[3,351],\"636\":[3,204],\"637\":[3,261],\"638\":[1,350],\"639\":[3,234],\"640\":[1],\"641\":[1,392],\"642\":[1,17],\"643\":[1],\"644\":[3,210],\"645\":[1,336],\"646\":[1],\"647\":[3,12],\"648\":[3,68],\"649\":[3,186],\"650\":[3,2],\"651\":[3,377],\"652\":[3,45],\"653\":[1,316],\"654\":[3,261],\"655\":[3,183],\"656\":[1,200],\"657\":[2,33],\"658\":[2,10],\"659\":[1,24],\"660\":[1,53],\"661\":[1],\"662\":[1,29],\"663\":[1],\"664\":[4,61],\"665\":[3,43],\"666\":[1,15],\"667\":[2,70],\"668\":[1],\"669\":[3,44],\"670\":[3,46],\"671\":[1,14],\"672\":[1,36],\"673\":[1,22],\"674\":[2],\"675\":[2,41],\"676\":[2,14],\"677\":[1],\"678\":[1,44],\"679\":[1,21],\"680\":[3],\"681\":[1,15],\"682\":[3,47],\"683\":[1,31],\"684\":[1],\"685\":[1,19],\"686\":[1,45],\"687\":[3,27],\"688\":[1,10],\"689\":[2,22],\"690\":[2,58],\"691\":[2,32],\"692\":[1,43],\"693\":[1,42],\"694\":[1,33],\"695\":[2],\"696\":[1,20],\"697\":[1,52],\"698\":[1,19],\"699\":[null,null,1],\"700\":[2,23],\"701\":[1,13],\"702\":[1,102],\"703\":[1,23],\"704\":[1,48],\"705\":[1,68],\"706\":[1,69],\"707\":[1,31],\"708\":[1],\"709\":[1,48],\"710\":[1,39],\"711\":[1,52],\"712\":[1,38],\"713\":[1,68],\"714\":[1,11],\"715\":[null,null,1],\"716\":[2,10],\"717\":[5,60],\"718\":[3,27],\"719\":[4,24],\"720\":[4,57],\"721\":[4,60],\"722\":[4,13],\"723\":[4,23],\"724\":[4,94],\"725\":[4,37],\"726\":[3,31],\"727\":[4,3],\"728\":[4,34],\"729\":[3,42],\"730\":[5,60],\"731\":[5,5],\"732\":[3,25],\"733\":[5,33],\"734\":[2,36],\"735\":[2,30],\"736\":[2,29],\"737\":[2,10],\"738\":[2,8],\"739\":[1,7],\"740\":[2,32],\"741\":[3,69],\"742\":[2,62],\"743\":[3,64],\"744\":[2,54],\"745\":[2,75],\"746\":[2,122],\"747\":[2],\"748\":[1,58],\"749\":[1,52],\"750\":[2],\"751\":[1,50],\"752\":[1,16],\"753\":[2],\"754\":[1,62],\"755\":[2,6],\"756\":[2,137],\"757\":[2,37],\"758\":[2,37],\"759\":[2,28],\"760\":[2],\"761\":[2],\"762\":[2,5],\"763\":[3,48],\"764\":[4,17],\"765\":[3,25],\"766\":[2,106],\"767\":[2,15],\"768\":[1,75],\"769\":[1,56],\"770\":[1,63],\"771\":[3,59],\"772\":[null,null,1],\"773\":[1],\"774\":[3,57],\"775\":[2,92],\"776\":[2,77],\"777\":[2,26],\"778\":[4,25],\"779\":[4,18],\"780\":[4,60],\"781\":[4,4],\"782\":[1,9],\"783\":[1,7],\"784\":[1,1],\"785\":[1,7],\"786\":[1,30],\"787\":[1,12],\"788\":[1,20],\"789\":[1,31],\"790\":[1,14],\"791\":[1,61],\"792\":[1,10],\"793\":[1,53],\"794\":[1,178],\"795\":[1,58],\"796\":[1,72],\"797\":[1,8],\"798\":[1,24],\"799\":[1,85],\"800\":[2,57],\"801\":[2,1],\"802\":[1,33],\"803\":[1,40],\"804\":[1,18],\"805\":[2,102],\"806\":[1,31],\"807\":[1,11],\"808\":[2,11],\"809\":[2,61],\"810\":[2,60],\"811\":[2,44],\"812\":[2],\"813\":[1,121],\"814\":[1,261],\"815\":[1,36],\"816\":[2,34],\"817\":[1,107],\"818\":[1,62],\"819\":[1,35],\"820\":[1,128],\"821\":[1,68],\"822\":[1,187],\"823\":[1,17],\"824\":[1,7],\"825\":[1,89],\"826\":[null,null,1],\"827\":[2,19],\"828\":[1,18],\"829\":[1,8],\"830\":[1,42],\"831\":[1,40],\"832\":[1,30],\"833\":[1,47],\"834\":[1,59],\"835\":[1,56],\"836\":[1,75],\"837\":[1,38],\"838\":[1,51],\"839\":[null,null,1],\"840\":[1],\"841\":[2,29],\"842\":[2,37],\"843\":[2,38],\"844\":[2],\"845\":[2,9],\"846\":[3,17],\"847\":[3,24],\"848\":[3,17],\"849\":[2,37],\"850\":[1,16],\"851\":[1,46],\"852\":[4,89],\"853\":[2,13],\"854\":[2],\"855\":[2,40],\"856\":[1,25],\"857\":[1,31],\"858\":[1,35],\"859\":[1,39],\"860\":[1,22],\"861\":[2,117],\"862\":[2,24],\"863\":[2,90],\"864\":[2],\"865\":[2],\"866\":[4],\"867\":[2,7],\"868\":[2,2],\"869\":[2,2],\"870\":[2,16],\"871\":[8,5],\"872\":[2,7],\"873\":[2,20],\"874\":[2,7],\"875\":[1,20],\"876\":[1,30],\"877\":[1,13],\"878\":[2,23],\"879\":[3],\"880\":[2,23],\"881\":[2,60],\"882\":[3,56],\"883\":[3,47],\"884\":[3,111],\"885\":[2,10],\"886\":[2,11],\"887\":[2,22],\"888\":[null,null,1],\"889\":[2,14],\"890\":[1,40],\"891\":[1,33],\"892\":[1,55],\"893\":[1,62],\"894\":[1,24],\"895\":[1,28],\"896\":[1,25],\"897\":[1,32],\"898\":[null,null,1],\"899\":[2],\"900\":[1],\"901\":[1,21],\"902\":[null,null,1],\"903\":[1,4],\"904\":[1,36],\"905\":[1,9],\"906\":[1,39],\"907\":[1,15],\"908\":[2,36],\"909\":[1,15],\"910\":[1,49],\"911\":[1,93],\"912\":[1,18],\"913\":[1,12],\"914\":[1],\"915\":[1,10],\"916\":[1,17],\"917\":[1,14],\"918\":[1,7],\"919\":[1,5],\"920\":[1,4],\"921\":[1,7],\"922\":[1],\"923\":[1,10],\"924\":[1,11],\"925\":[1,14],\"926\":[1],\"927\":[1,28],\"928\":[1,6],\"929\":[1,6],\"930\":[1,5],\"931\":[1,5],\"932\":[1,7],\"933\":[1],\"934\":[1,24],\"935\":[1,5],\"936\":[1,13],\"937\":[1,11],\"938\":[1],\"939\":[1,11],\"940\":[1,13],\"941\":[1,19],\"942\":[1,8],\"943\":[1,7],\"944\":[1,7],\"945\":[1,7],\"946\":[1],\"947\":[1,13],\"948\":[1,9],\"949\":[1,21],\"950\":[1,11],\"951\":[1,12],\"952\":[1,19],\"953\":[1,10],\"954\":[null,null,1],\"955\":[1,9],\"956\":[3,19],\"957\":[2,24],\"958\":[1],\"959\":[1,15],\"960\":[1,9],\"961\":[2,24],\"962\":[2],\"963\":[2,34],\"964\":[2,43],\"965\":[2,280],\"966\":[3],\"967\":[2,105],\"968\":[2,35],\"969\":[2,8],\"970\":[2,111],\"971\":[2,71],\"972\":[2,68],\"973\":[2,66],\"974\":[2,95],\"975\":[1],\"976\":[1],\"977\":[1],\"978\":[1],\"979\":[2,30],\"980\":[2,33],\"981\":[2,116],\"982\":[2,14],\"983\":[2,10],\"984\":[2,29],\"985\":[3,118],\"986\":[2,39],\"987\":[2,35],\"988\":[1,48],\"989\":[2],\"990\":[2,49],\"991\":[1,5],\"992\":[1,6],\"993\":[2,147],\"994\":[2,40],\"995\":[2,8],\"996\":[1,40],\"997\":[2,17],\"998\":[2,15],\"999\":[2,37],\"1000\":[1,89],\"1001\":[1,8],\"1002\":[2,15],\"1003\":[2,60],\"1004\":[2,46],\"1005\":[2,28],\"1006\":[1,69],\"1007\":[1,19],\"1008\":[1],\"1009\":[2,8],\"1010\":[2,283],\"1011\":[2,8],\"1012\":[1,12],\"1013\":[null,null,1],\"1014\":[1,1],\"1015\":[null,null,1],\"1016\":[1],\"1017\":[2,21],\"1018\":[2,63],\"1019\":[2,79],\"1020\":[3,92],\"1021\":[2,17],\"1022\":[3,23],\"1023\":[3,18],\"1024\":[2,24],\"1025\":[3,40],\"1026\":[3,16],\"1027\":[3,36],\"1028\":[2,35],\"1029\":[2,150],\"1030\":[2,15],\"1031\":[1,15],\"1032\":[2,36],\"1033\":[2,33],\"1034\":[2,73],\"1035\":[3,58],\"1036\":[3,73],\"1037\":[3,47],\"1038\":[2,11],\"1039\":[2,24],\"1040\":[2],\"1041\":[1],\"1042\":[3],\"1043\":[4],\"1044\":[1],\"1045\":[3],\"1046\":[4,11],\"1047\":[1,170],\"1048\":[null,null,1],\"1049\":[1],\"1050\":[1,3],\"1051\":[1,9],\"1052\":[1,39],\"1053\":[1,69],\"1054\":[1,69],\"1055\":[1,49],\"1056\":[1,41],\"1057\":[3,77],\"1058\":[1,1],\"1059\":[null,null,1],\"1060\":[2,33],\"1061\":[1,18],\"1062\":[1,28],\"1063\":[1,14],\"1064\":[1,25],\"1065\":[1,13],\"1066\":[1,10],\"1067\":[2,18],\"1068\":[1,24],\"1069\":[null,null,1],\"1070\":[1],\"1071\":[2,56],\"1072\":[2,86],\"1073\":[2,30],\"1074\":[1],\"1075\":[2,19],\"1076\":[2,23],\"1077\":[3,34],\"1078\":[3,171],\"1079\":[2,19],\"1080\":[2],\"1081\":[2,58],\"1082\":[2,49],\"1083\":[2],\"1084\":[2,10],\"1085\":[2,7],\"1086\":[2,18],\"1087\":[2,75],\"1088\":[2],\"1089\":[2],\"1090\":[2,30],\"1091\":[2,7],\"1092\":[2,73],\"1093\":[2,22],\"1094\":[2],\"1095\":[2,1],\"1096\":[3,10],\"1097\":[2],\"1098\":[2,2],\"1099\":[2,3],\"1100\":[2],\"1101\":[2,2],\"1102\":[2,1],\"1103\":[2,5],\"1104\":[null,null,1],\"1105\":[1],\"1106\":[2],\"1107\":[1,47],\"1108\":[1,35],\"1109\":[2,12],\"1110\":[2,6],\"1111\":[2,9],\"1112\":[2,10],\"1113\":[2,6],\"1114\":[2,5],\"1115\":[2,4],\"1116\":[2,46],\"1117\":[2,1],\"1118\":[2,2],\"1119\":[2,7],\"1120\":[5,4],\"1121\":[2,10],\"1122\":[2,21],\"1123\":[2,77],\"1124\":[2],\"1125\":[1],\"1126\":[1,29],\"1127\":[1,22],\"1128\":[1,18],\"1129\":[3],\"1130\":[2,160],\"1131\":[2,150],\"1132\":[1,63],\"1133\":[1,227],\"1134\":[2],\"1135\":[2,26],\"1136\":[3,33],\"1137\":[2,4],\"1138\":[2,8],\"1139\":[2,33],\"1140\":[2],\"1141\":[2,36],\"1142\":[2,30],\"1143\":[2,43],\"1144\":[2,33],\"1145\":[2,5],\"1146\":[4,9],\"1147\":[4,16],\"1148\":[4,14],\"1149\":[2,21],\"1150\":[2,12],\"1151\":[5,89],\"1152\":[7,71],\"1153\":[2],\"1154\":[3,63],\"1155\":[2,57],\"1156\":[2,82],\"1157\":[2,23],\"1158\":[2,139],\"1159\":[3,6],\"1160\":[1,67],\"1161\":[2,29],\"1162\":[6,43],\"1163\":[2,174],\"1164\":[3,246],\"1165\":[2,300],\"1166\":[5,113],\"1167\":[3,23],\"1168\":[4,14],\"1169\":[2,7],\"1170\":[2],\"1171\":[3,27],\"1172\":[2,10],\"1173\":[2,63],\"1174\":[2,60],\"1175\":[2,56],\"1176\":[null,null,1],\"1177\":[2],\"1178\":[null,null,1],\"1179\":[2],\"1180\":[2,15],\"1181\":[2,20],\"1182\":[2,23],\"1183\":[1,82],\"1184\":[1,67],\"1185\":[3,20],\"1186\":[1,2],\"1187\":[1,43],\"1188\":[1,48],\"1189\":[1,35],\"1190\":[1,5],\"1191\":[1,8],\"1192\":[1,48],\"1193\":[1,116],\"1194\":[1,143],\"1195\":[1,184],\"1196\":[1,86],\"1197\":[1,254],\"1198\":[1,56],\"1199\":[1,10],\"1200\":[2,15],\"1201\":[2,12],\"1202\":[2,12],\"1203\":[3,15],\"1204\":[4,10],\"1205\":[3,12],\"1206\":[2,7],\"1207\":[2,7],\"1208\":[2,6],\"1209\":[null,null,1],\"1210\":[1,1],\"1211\":[null,null,1],\"1212\":[1,16],\"1213\":[1],\"1214\":[1],\"1215\":[1,45],\"1216\":[null,null,1],\"1217\":[2,12],\"1218\":[1,23],\"1219\":[1,63],\"1220\":[1,39],\"1221\":[1,47],\"1222\":[1,95],\"1223\":[1,151],\"1224\":[1],\"1225\":[1,121],\"1226\":[1,40],\"1227\":[1,23],\"1228\":[1,83],\"1229\":[1,23],\"1230\":[1,14],\"1231\":[2,40],\"1232\":[2,11],\"1233\":[1,34],\"1234\":[1,37],\"1235\":[2,130],\"1236\":[null,null,1],\"1237\":[2],\"1238\":[2,48],\"1239\":[1,32],\"1240\":[1,13],\"1241\":[2,17],\"1242\":[2],\"1243\":[2,11],\"1244\":[2,42],\"1245\":[2,54],\"1246\":[1],\"1247\":[1],\"1248\":[1],\"1249\":[2,13],\"1250\":[1],\"1251\":[1,18],\"1252\":[1,17],\"1253\":[1,21],\"1254\":[1,31],\"1255\":[2,3],\"1256\":[1,38],\"1257\":[1,12],\"1258\":[2],\"1259\":[2,6],\"1260\":[1,25],\"1261\":[1,16],\"1262\":[2,20],\"1263\":[2,24],\"1264\":[1,25],\"1265\":[1,27],\"1266\":[2,28],\"1267\":[1],\"1268\":[1],\"1269\":[1,8],\"1270\":[null,null,1],\"1271\":[1],\"1272\":[2,16],\"1273\":[2,15],\"1274\":[3,27],\"1275\":[4,33],\"1276\":[2],\"1277\":[3,34],\"1278\":[2,27],\"1279\":[2,12],\"1280\":[2,81],\"1281\":[2,118],\"1282\":[2,39],\"1283\":[2,86],\"1284\":[3,16],\"1285\":[2,31],\"1286\":[2,38],\"1287\":[2,25],\"1288\":[2,12],\"1289\":[3,89],\"1290\":[3],\"1291\":[2],\"1292\":[null,null,1],\"1293\":[1],\"1294\":[null,null,1],\"1295\":[2],\"1296\":[null,null,1],\"1297\":[2],\"1298\":[null,null,1],\"1299\":[1,21],\"1300\":[1,6],\"1301\":[1,45],\"1302\":[1,139],\"1303\":[1,182],\"1304\":[1,63],\"1305\":[1,21],\"1306\":[1,53],\"1307\":[2,228],\"1308\":[1,141],\"1309\":[1,57],\"1310\":[1,43],\"1311\":[1,36],\"1312\":[1,50],\"1313\":[1,55],\"1314\":[1,34],\"1315\":[1,28],\"1316\":[1,28],\"1317\":[1,25],\"1318\":[1,22],\"1319\":[1,42],\"1320\":[1,36],\"1321\":[2,74],\"1322\":[1,3],\"1323\":[1,2],\"1324\":[1,10],\"1325\":[1,28],\"1326\":[1,10],\"1327\":[1,9],\"1328\":[1,40],\"1329\":[1,9],\"1330\":[1,28],\"1331\":[1,36],\"1332\":[1,16],\"1333\":[1,19],\"1334\":[1,25],\"1335\":[1,12],\"1336\":[1,26],\"1337\":[1,44],\"1338\":[1,30],\"1339\":[1,14],\"1340\":[1,17],\"1341\":[1,56],\"1342\":[1,3],\"1343\":[1,41],\"1344\":[1,24],\"1345\":[1,39],\"1346\":[1,16],\"1347\":[1,16],\"1348\":[1,15],\"1349\":[1,18],\"1350\":[1,17],\"1351\":[1,18],\"1352\":[1,18],\"1353\":[1,16],\"1354\":[1,17],\"1355\":[1,17],\"1356\":[1,18],\"1357\":[1,17],\"1358\":[1,18],\"1359\":[1,16],\"1360\":[1,18],\"1361\":[1,21],\"1362\":[1,16],\"1363\":[1,17],\"1364\":[1,23],\"1365\":[1,11],\"1366\":[1,3],\"1367\":[1,27],\"1368\":[1,29],\"1369\":[1,38],\"1370\":[1,30],\"1371\":[1,30],\"1372\":[1,28],\"1373\":[1,22],\"1374\":[1,76],\"1375\":[1,27],\"1376\":[1,16],\"1377\":[1,22],\"1378\":[1,12],\"1379\":[1,26],\"1380\":[1,48],\"1381\":[1,31],\"1382\":[1,7],\"1383\":[1,4],\"1384\":[1,24],\"1385\":[1,21],\"1386\":[1,37],\"1387\":[1,20],\"1388\":[1,22],\"1389\":[1,33],\"1390\":[1,73],\"1391\":[1,30],\"1392\":[1,48],\"1393\":[1,38],\"1394\":[1,13],\"1395\":[1,4],\"1396\":[1,26],\"1397\":[1,28],\"1398\":[1,42],\"1399\":[1,29],\"1400\":[1,34],\"1401\":[1,22],\"1402\":[1,33],\"1403\":[1,31],\"1404\":[1,41],\"1405\":[1,39],\"1406\":[1,27],\"1407\":[1,43],\"1408\":[1,33],\"1409\":[1,56],\"1410\":[1,37],\"1411\":[1,62],\"1412\":[1,29],\"1413\":[1,45],\"1414\":[1,24],\"1415\":[1,62],\"1416\":[1],\"1417\":[1,121],\"1418\":[1,15],\"1419\":[1,50],\"1420\":[1,107],\"1421\":[1,24],\"1422\":[1,46],\"1423\":[1,28],\"1424\":[1,37],\"1425\":[1,54],\"1426\":[1,62],\"1427\":[1,39],\"1428\":[1,80],\"1429\":[1,55],\"1430\":[1,22],\"1431\":[1,37],\"1432\":[1,30],\"1433\":[1,38],\"1434\":[1,52],\"1435\":[1,35],\"1436\":[1],\"1437\":[1,18],\"1438\":[1,9],\"1439\":[1,11],\"1440\":[1,41],\"1441\":[1,29],\"1442\":[1,36],\"1443\":[1,130],\"1444\":[1,30],\"1445\":[1,39],\"1446\":[1,29],\"1447\":[1,33],\"1448\":[1,29],\"1449\":[1],\"1450\":[null,null,1],\"1451\":[1],\"1452\":[null,null,1],\"1453\":[1],\"1454\":[null,null,1],\"1455\":[1],\"1456\":[null,null,1],\"1457\":[1,3],\"1458\":[1],\"1459\":[1],\"1460\":[1],\"1461\":[1],\"1462\":[1],\"1463\":[1]},\"averageFieldLength\":[1.5732771239117136,42.35987397360511,0.3629549542264143],\"storedFields\":{\"0\":{\"h\":\"项目主页\",\"t\":[\"这是项目主页的案例。你可以在这里放置你的主体内容。\",\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\",\"配置项的相关说明详见 项目主页配置。\"]},\"1\":{\"h\":\"档案主页\"},\"2\":{\"h\":\"介绍\",\"t\":[\"这是一个档案主页的案例。\",\"要使用此布局，你应该在页面 Frontmatter 中设置 home: true 和 portfolio: true。\",\"相关配置文档请见 档案主页。\"]},\"3\":{\"h\":\"-算法-go\"},\"4\":{\"h\":\"回溯算法\",\"t\":[\"回溯解决什么问题？本质也是穷举所有的可能，可以抽象成一个然后解决一些暴力for循环解决不了的问题。\",\"比如：组合问题、切割问题、子集问题、排列问题、棋盘问题\",\"为什么上面的问题暴力for循环无法解决？比如组合问题（给定1-n的数，然后取其中k个数有多少种）\",\"回溯模板\",\"func backtracking(参数) { if (终止条件) { 存放结果 return } for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) { 处理节点; backtracking(路径，选择列表); // 递归 回溯，撤销处理结果 } }\"]},\"5\":{\"h\":\"组合\",\"t\":[\"var ( path []int res [][]int ) func combine(n int, k int) [][]int { path, res = make([]int, 0, k), make([][]int, 0) dfs(n, k, 1) return res } func dfs(n int, k int, start int) { if len(path) == k { // 说明已经满足了k个数的要求 tmp := make([]int, k) copy(tmp, path) res = append(res, tmp) return } for i := start; i <= n; i++ { // 从start开始，不往回走，避免出现重复组合 if n - i + 1 < k - len(path) { // 剪枝 break } path = append(path, i) dfs(n, k, i+1) path = path[:len(path)-1] } }\"]},\"6\":{\"c\":[\"计算机\"]},\"7\":{\"h\":\"-设计模式\"},\"8\":{\"c\":[\"计算机\"]},\"9\":{\"h\":\"1.版本管理工具概念\",\"t\":[\" # git 教程 \",\"[TOC]\",\"我在大学毕业写论文的时候的时候碰到过如下的现象\",\"<<毕业论文第一版.doc>> <<毕业论文第二版.doc>> <<毕业论文第三版.doc>> <<毕业论文最终版.doc>> <<毕业论文最终版2.doc>>\",\"类似的问题我曾经也碰到过很多,例如:\",\"领导让写文档,写好了,领导让修改,改好了,领导觉得第一版不错,改回来吧,此时内心一脸懵,第一版长啥样没存档啊\",\"实际上,代码开发中也需要这样的软件来管理我们的代码. 例如我们经常会碰到如下的现象:\",\"改之前好好的,改完就报错了,也没怎么修改啊\",\"在这种情况下如果不能查看修改之前的代码,查找问题是非常困难的.\",\"如果有一个软件能记录我们对文档的所有修改,所有版本,那么上面的问题讲迎刃而解.而这类软件我们一般叫做版本控制工具\",\"版本管理工具一般具有如下特性:\",\"1) 能够记录历史版本,回退历史版本 2) 团队开发,方便代码合并\",\"现在比较流行的版本管理工具是git ,但是实际上git 是近几年才发展起来的,可能有一些老的项目,还在用一些老的软件,比如svn\"]},\"10\":{\"h\":\"2.1版本管理发展简史(维基百科)\"},\"11\":{\"h\":\"2.1.1 SVN(SubVersion)\",\"t\":[\"工作流程\",\"SVN是集中式版本控制系统，版本库是集中放在中央服务器的. 工作流程如下: 1.从中央服务器远程仓库下载代码 2.修改后将代码提交到中央服务器远程仓库\",\"优缺点:\",\" 优点: 简单,易操作 缺点:所有代码必须放在中央服务器 1.服务器一旦宕机无法提交代码,即容错性较差 2.离线无法提交代码,无法及时记录我们的提交行为\",\"svn流程图\"]},\"12\":{\"h\":\"2.1.2 Git\",\"t\":[\"工作流程\",\"Git是分布式版本控制系统（Distributed Version Control System，简称 DVCS），分为两种类型的仓库： 本地仓库和远程仓库 工作流程如下 1．从远程仓库中克隆或拉取代码到本地仓库(clone/pull) 2．从本地进行代码修改 3．在提交前先将代码提交到暂存区 4．提交到本地仓库。本地仓库中保存修改的各个历史版本 5．修改完成后，需要和团队成员共享代码时，将代码push到远程仓库\",\"总结:git和svn的区别\",\"1. svn 是集中式版本控制工具,git 是分布式版本控制工具 2. svn 不支持离线提交,git 支持离线提交代码\",\"林纳斯·本纳第克特·托瓦兹（Linus Benedict Torvalds, 1969年~ ）\",\"很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。\",\"Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？\",\"事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！\",\"你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？那个年代不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。\",\"不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。而授权的前提是:Linux 社区的人不能开发具有相同功能的竞争产品!\",\"另一方面,BitKeeper不是开源的. 显然与Linux 的开源精神不相符,所以linux 社区的很多人抱怨,不愿意使用.\",\"典型的就是 Andrew Tridgell (Samba 开发服务的创造者) 非常不满.偷偷违反了和 BitKeeper 的协议,反编译 BitKeeper 的源代码,开发了个爬虫,然后爬取信息被人发现了. BitKeeper 公司的领导非常不满意,然后开始发布消息说,(下个版本)不再为Linux 提供免费的服务.\",\"Linus 本人就出面协调(几周或者几个月),但是不管用, 没办法. 估计谈判的过程感觉到了憋屈--\\\"吃人嘴短,拿人手软\\\"\",\"Linus 本人 花了10天的时间Git 出来了,一个月之内，Linux系统的源码已经由Git管理了！\",\"Git 出来以后毕竟是一个人做的,开始并不好用(刚开始只能用勉强可以用来形容), 还是很多人抱怨,发展了很多年都没有干过其他软件.\",\"直到 2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub,从此git 迎来了飞速发展,当下git 已经成为了最流行的版本控制工具\"]},\"13\":{\"h\":\"4.1 git 的下载\",\"t\":[\"下载地址： https://git-scm.com/download\",\" ## 4.2 安装 \",\"按照附件的 顺序直接下一步傻瓜式安装即可\",\"其中安装的过程中需要填写一个邮箱和用户名(任意即可)\",\"$\\\\color{red}{注意: 安装完毕请重启资源管理器,或者重启电脑!!!}$\",\"更改语言\"]},\"14\":{\"h\":\"5.1 Git 初始化\",\"t\":[\"我们先初始化一个本地仓\",\"1) 新建测试文件夹 2) 进入文件夹,然后右键创建版本库\",\"此时 我们看到\",\"1) 文件夹上多了一个绿色图标(如果没有请看本章节 5.3小节说明) 2) 文件夹内部生成了一个.git 隐藏文件夹(需要设置隐藏文件夹可见)\"]},\"15\":{\"h\":\"5.2 git 流程\"},\"16\":{\"h\":\"5.2.1 流程图\"},\"17\":{\"h\":\"5.2.2概念即详解\",\"t\":[\"本地仓库：是在开发人员自己电脑上的Git仓库,存放我们的代码(.git 隐藏文件夹就是我们的本地仓库) 远程仓库：是在远程服务器上的Git仓库,存放代码(可以是github.com或者gitee.com 上的仓库,或者自己该公司的服务器) 工作区: 我们自己写代码(文档)的地方 暂存区: 在 本地仓库中的一个特殊的文件(index) 叫做暂存区,临时存储我们即将要提交的文件 ------------ Clone：克隆，就是将远程仓库复制到本地仓库 Push：推送，就是将本地仓库代码上传到远程仓库 Pull：拉取，就是将远程仓库代码下载到本地仓库,并将代码 克隆到本地工作区\"]},\"18\":{\"h\":\"6.1 初始化仓库\",\"t\":[\"方法一: 新建一个文件夹,进入文件夹内部操作 1)右键--> 在这里创建Git 版本库\",\"注意: 不要直接在桌面上操作,否则桌面就是一个仓库\",\"方法二: 2) 右键-->Git GUI here\",\"![1572162\",\"方法三: 命令行模式 2) git init\",\"创建完毕仓库,我们发现,此时我们创建的文件夹下有一个.git 文件已经生成了\",\"并且仓库文件夹上多了一个 绿色图标\"]},\"19\":{\"h\":\"6.2 添加文件\",\"t\":[\"1)在仓库中新建一个文件 2)选中新建的文件-->右键--> TortoiseGit--> 添加 3)此时我们看到文件夹上多了一个 \\\"加号\\\"\"]},\"20\":{\"h\":\"6.3 提交文件至本地仓库\",\"t\":[\"1)选中文件 2) 右键--git提交\"]},\"21\":{\"h\":\"6.4 修改文件,与再次提交文件\",\"t\":[\"当我们修改文件以后,文件上多了一个红色感叹号,表示我们上次提交后该文件被修改过 提交后文件图标又变成绿色\"]},\"22\":{\"h\":\"6.5 文件状态讲解\",\"t\":[\"Git工作目录下的文件存在两种状态： 1 untracked 未跟踪（未被纳入版本控制） : 比如新建的文件(此时文件夹上没有图标或者有一个\\\"问号\\\") 2 tracked 已跟踪（被纳入版本控制） 2.1 Staged 已暂存状态 : 添加 但未提交状态(此时文件夹上有一个\\\"加号\\\") 2.2 Unmodified 未修改状态 : 已提交(此时文件夹上有一个\\\"对号\\\") 2.3 Modified 已修改状态 : 修改了,但是还没有提交 (此时文件夹上有一个\\\"红色感叹号\\\")\",\"这些文件的状态会随着我们执行Git的命令发生变化\"]},\"23\":{\"h\":\"6.6 修改文件,不提交和上一个版本比较差异(diff)\",\"t\":[\"修改文件,此时不要提交 选中文件-->右键--> TortoiseGit--> 比较差异\"]},\"24\":{\"h\":\"6.7 查看提交历史记录\",\"t\":[\"选中文件 右键--> TortoiseGit--> 显示日志 此时我们可以看到所有的历史提交记录\",\"##6.8 回退至历史版本\",\"右键--> TortoiseGit--> 显示日志 选中某个版本--> 进行如下操作\"]},\"25\":{\"h\":\"6.9 文件删除\",\"t\":[\"###6.9.1本地删除与恢复\",\"1) 直接选中文件删除的话,其实只是删除了本地工作区的文件,并没有删除 仓库中的文件 此时时可以回退的, 比如我们进行如下操作 1)文件删除 2)右键--> TortoiseGit--> 还原 此时我们发现文件又被恢复了\"]},\"26\":{\"h\":\"6.9.2从版本库删除\",\"t\":[\"2) 我们如果真的想要将某个文件从服务器删除,需要进行如下操作 1) 删除文件,和上面的操作一样 2) 提交,此时服务文件已经删除了(历史版本还在,还是可以恢复)\"]},\"27\":{\"h\":\"6.9.3从版本库删除,但是不删除本地\",\"t\":[\"我们可以如下操作,只删除服务器上的文件,但是本地文件并不删除 备注: 删除之后需要提交,才会真正的从服务器删除\"]},\"28\":{\"h\":\"6.10 忽略提交\",\"t\":[\"有时候我们一些文件是不需要提交的比如说idea/eclipse 开发的代码自动生成的配置文件 如何配置不提交呢\",\"此时我们的根目录下会生成一个.gitignore 文件\",\"忽略文件如何阅读,常见格式\",\"# 所有以.a 结尾的文件讲被忽略(递归) *.a # 不管其他规则怎样,强制不忽略 lib.a !lib.a # 只忽略 文件 TODO (注意这里是文件) /TODO # 忽略 build文件夹下所有内容(递归) 这里是文件夹 build/ # 忽略 doc 目录下以 *.txt 结尾的文件 (不递归) doc/*.txt # 忽略 doc 目录下以 *.pdf 结尾的文件 (递归) doc/**/*.pdf\",\"当然理解了上述规则,我们也可以手动编辑该文件,而不用通过窗口化操作(如果不嫌麻烦)\"]},\"29\":{\"h\":\"7.1 分支的概念\",\"t\":[\"几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，避免影响开发主线。多线程开发,可以同时开启多个任务的开发,多个任务之间互不影响.\"]},\"30\":{\"h\":\"7.2 为何要使用分支\",\"t\":[\"先看单线程开发\",\"思考如下现象 10.1 日 业务部门提出需求 : 明年 元旦3天做2个促销活动 1) 12.31 号上线活动1, 2) 1.4 号上线活动2 ,同时 要求撤销 活动1 你所在 部门领导 为了保证能顺利完成,要求 11.15 号完成 上述连个功能的开发工作 此时作为开发人员:我要面临两个文件, 活动1 的代码,即要存在(12.31 要用)又要不存在(1.4 号要求删除) ,我们怎么做? 显然比较棘手,如果使用分支(可以理解为将代码复制一份)将很好解决\"]},\"31\":{\"h\":\"7.3 创建分支\",\"t\":[\"到现在为止,我们一直使用的时主分支(master) 在主分支上操作创建分支\"]},\"32\":{\"h\":\"7.4 分支的查看切换\"},\"33\":{\"h\":\"7.4.1查看分支\",\"t\":[\"查看版本分支图,此时我们看到有两个分支 当然,我们可以创建多个分支 可以看到多个分支的图形\"]},\"34\":{\"h\":\"7.4.2切换分支\",\"t\":[\"右键--> 检出\",\"##7.5 分支的合并与删除\"]},\"35\":{\"h\":\"7.5.1合并\",\"t\":[\"我们将代码切换到分支1,然后写属于需求1 的代码并提交 当我们把需求1 开发完毕如何把需求1 的代码合并到主分支呢? -->1 切换到 主版本 -->2 右键 合并即可将需求1 写的代码合并至主分支 -----此时我们看到代码自动合并到了master分支\"]},\"36\":{\"h\":\"7.5.2删除分支\",\"t\":[\"5,冲突的处理 ​ 5.1)冲突的概念\",\"现象演示 开发人员A 开发需求1,开发了一个工具类 MathUtil,里面第一行写了一个方法 add(int [] args) 同时开发人员B 开发需求2,开发了一个工具类 MathUtil,里面第一行写了一个方法 add(int a int b) 他们在互相不知道对方需求的情况下同时提交了代码到自己的分支 思考此时如果我们把需求1 和需求2 同时都合并到主分支上, 主分支的 工具类 MathUtil 的第一行应该使用谁的代码? 此时主分支是不能智能判断第一行使用谁的代码,合并时会报错,我们叫做冲突.\",\"​ 5.2) 如何处理冲突\",\"分析一下冲突的原因: 开发人员之间彼此没有沟通导致的同一个时间节点修改了同一个地方的代码,合并是冲突 思考: 我们能直接把某个开发人员开发的代码删除吗? 显然不能 所以在处理冲突时,第一步应该时找开发另一个需求的人员沟通,之后才是处理冲突 ----- --> 选中冲突的文件(带黄色感叹号的文件都是冲突的文件,如果有多个需要逐一处理) --> 右键--> 编辑冲突, -->处理完毕后.标记已解决\"]},\"37\":{\"h\":\"8.1 标签的概念\",\"t\":[\"如果你的项目达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以给它打上标签(tag) 比如说，我们想为我们的项目发布一个\\\"1.0\\\"版本。 我们给最新一次提交打上（HEAD）\\\"v1.0\\\"的标签。 标签可以理解为项目里程碑的一个标记,一旦打上了这个标记则,表示当前的代码将不允许提交\"]},\"38\":{\"h\":\"8.2 标签的创建(tag)\",\"t\":[\"标签的创建和分支的创建操作几乎一样\"]},\"39\":{\"h\":\"8.3 标签的切换与删除\",\"t\":[\"我们的代码不能总是放在本地,因为总是放在本地,一旦电脑出现故障,数据将丢失,怎么共享呢,这里我们需要一个服务器, 我们可以把代码放到服务器上,然后让别人下载,这样我峨嵋你既可以备份代码,也可以进行团队协作开发\"]},\"40\":{\"h\":\"9.0 局域网仓库\",\"t\":[\"实际上我们可以搭建一个单间的局域网服务器共享我们的代码\"]},\"41\":{\"h\":\"9.0.1本地相对路径,多个文件夹之间共享代码\"},\"42\":{\"h\":\"9.0.2开启局域网共享代码\",\"t\":[\"局域网这种共享是没有安全控制的,都可以访问,如果想要搭建一个可以控制权限的服务器需要借助第三方软件\",\"gitblit,可以自行搜索搭建\"]},\"43\":{\"h\":\"9.1 常用远程仓库托管服务\",\"t\":[\"除了自己搭建服务器,其实我们可以使用一些免费的远程仓库,远程仓库有很多,常见的免费互联网远程仓库托管服务如下:\",\"www.github.com www.gitee.com www.gitlab.com github 是一个基于git实现在线代码托管的仓库，向互联网开放，企业版要收钱。 gitee 即码云，是 oschina 免费给企业用的，不用自己搭建环境。 gitlab 类似 github，一般用于在企业内搭建git私服，要自己搭环境。 GitHub(gitee)、GitLab 不同点： 1、GitHub如果使用私有仓库是需要付费的，(2019年开始私有仓库也是免费的但是只能3个人协同开发,想要更多需要收费)，GitLab可以在上面搭建私人的免费仓库。 2、GitLab让开发团队对他们的代码仓库拥有更多的控制，相对于GitHub，它有不少的特色： (1)允许免费设置仓库权限 (2)允许用户选择分享一个project的部分代码 (3)允许用户设置project的获取权限，进一步提升安全性 (4)可以设置获取到团队整体的改进进度 (5)通过innersourcing让不在权限范围内的人访问不到该资源\",\"鉴于国内用户可能网络不好,这里我们使用gitee(码云) 来讲解我们的课程,其他可自行找资料学习非常类似\"]},\"44\":{\"h\":\"9.2 码云账号注册\",\"t\":[\"填写邮箱发送验证码,然后可以注册账号,主页如下\"]},\"45\":{\"h\":\"9.3 创建远程仓库\",\"t\":[\"各个类型仓库之间的区别\"]},\"46\":{\"h\":\"9.4 把本地代码推送到远端\",\"t\":[\"此时我们刷新仓库发现代码已经存在了\",\"我们填写的用户信息,会被保存在本地,下次提交无需填写用户名和密码\"]},\"47\":{\"h\":\"9.5 从远程仓库克隆代码\",\"t\":[\"我们同样可以从库下载代码,\",\"新建一个文件夹 repo2 ,进入然后进行如下操作\",\"此时我们发现我们的代码已经被下载下来了\"]},\"48\":{\"h\":\"9.6 代码的修改与提交,查看历史\",\"t\":[\"1)此时我们修改代码就不能仅仅是提交到本地了,提交完毕应该推送到远端服务器 2)此时如果别人从远端仓库下载最新的代码其实是可以看到我们的代码修改记录的 git -->显示日志\"]},\"49\":{\"h\":\"9.7 ssh 连接概述\",\"t\":[\"实际上git 不仅仅支持用户名密码方式的配置,可以有另外一种相对更加安全的配置即ssh 方式配置\",\"ssh 方式的底层原理\",\"ssh连接地城是RAS加密算法,又称非对称加密,是一种现在公认的最安全的加密方式 数学基础好的同学可以研究一下 https://www.cnblogs.com/cjm123/p/8243424.html 公钥私钥加密可以看作古代 的\\\"虎符\\\" , 我们本地电脑有一份,远程服务器有一份, 只要 \\\"虎符\\\" 核对通过 表示身份无误,可以执行提交等操作,无需输入用户名密码\"]},\"50\":{\"h\":\"9.8 ssh 密钥的生成\",\"t\":[\"#生成公钥私钥 ssh-keygen -t rsa 一直回车即可 会默认用户目录 .ssh 目录生成一个默认的id_rsa文件 和id_rsa.pub\"]},\"51\":{\"h\":\"9.9 ssh 密钥配置\"},\"52\":{\"h\":\"9.10 ssh 方式克隆/提交代码:\",\"t\":[\"配置完成之后我们克隆我们之前的项目\",\"修改后直接提交推送即可成功,,git 会自动去.ssh 目录找我们的私钥进行匹配\"]},\"53\":{\"h\":\"9.11. 远程仓库的其他操作\",\"t\":[\"概念\",\"当我们从 gitee 上查看别人的项目的时候我们可能会看到上图中的按钮\",\"指数: 是gitee 网站根据当前项目的各项指标计算出来的一个值\",\"Star: 点赞, 注意这里的并不像朋友圈那样容易获得点赞,圈内人还是很克制的 Watch: 如果你watch 了某个开源项目,那么这个项目后续所有的改动你将收到通知 Fork : 将别人的代码克隆到你自己的仓库 作用一: 如果担心某个优秀的项目别人突然有一天不开源了,你可以fork到自己的仓库 作用二: 修改别人的代码 以linux 为例,你其实不是linux 社区的开发人员,但是你 又想为linux 开发做贡献(维护代码) 你并没有权限,怎们办? 你可以先把linux 开源的代码 fork 到你自己的仓库,此时你就可以操作自己的仓库进行修改代码了 如何让别人合并你修改好的代码呢? 我们注意项目的上方有一个 \\\" Pull Request\\\" 这个按钮的意思是 \\\"请求求别人合并你修改的代码\\\" 当我们发起一个 Pull Request 时 , 项目的拥有者将收到 Pull Request请求,然后将根据你提交代码的质量决定是否合并\",\"项目操作\",\"1)我们可以删除修改我们自己仓库的基本信息\",\"我们可以邀请其他人成为项目的开发人员或者管理人员\",\"我们可以删除修改我们自己仓库的基本信息\"]},\"54\":{\"h\":\"9.12 利用 gitee 搭建个人主页\",\"t\":[\"1)将静态资源上传至仓库 2) 选择服务 pages 即可部署 注意 1)必须有个index.html 文件 注意 2) 只能搭建静态网站,动态网站请租赁服务器搭建提供服务 注意 3) gitee 要求必须绑定手机号\",\"点击开启后gitee 会自动生成一个域名\",\"直接访问即可\",\"此时我们已经在git 上部署了一个静态的网站\"]},\"55\":{\"h\":\"10.1 介绍\",\"t\":[\"​ 上述我们的操作 使用的 是客户端TortoiseGit 操作的git ,实际上底层依旧是使用的命令行帮我们执行, 在早期 git 并没有窗口化工具,开发人员只能使用命令行模式\",\"实际上,如果你掌握并熟练使用了命令行模式操作git 的话,你会发现某些操作命令行比窗口化操作要简单\",\"所有你在工作中会发现高深的技术人员可能会喜欢命令行模式提交git\",\"##10.2 环境配置\",\"当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息\",\"#设置用户信息 git config --global user.name “itcast” git config --global user.email “itcast@itcast.cn” #查看配置信息 git config --list git config user.name #通过上面的命令设置的信息会保存在~/.gitconfig文件中\",\"##10.3 初始化本地仓库 init\",\"# 初始化仓库带工作区 git init # 初始化仓库不带工作区 git init --bare\",\"##10.4 克隆 clone\",\"# 从远程仓库克隆 git clone 远程Git仓库地址 例如: git clone https://gitee.com/itcast/gittest.git\",\"##10.5 查看状态 status\",\"# 查看状态 git status #查看状态 使输出信息更加简洁 git status –s\",\"##10.6 add\",\"# 将未跟踪的文件加入暂存区 git add <文件名> # 将暂存区的文件取消暂存 (取消 add ) git reset <文件名>\",\"##10.7 commit\",\"# git commit 将暂存区的文件修改提交到本地仓库 git commit -m \\\"日志信息\\\" <文件名>\",\"##10.8 删除 rm\",\"# 从本地工作区 删除文件 git rm <文件名> # 如果本工作区库误删, 想要回退 git checkout head <文件名>\"]},\"56\":{\"h\":\"11.1 查看远程\",\"t\":[\"# 查看远程 列出指定的每一个远程服务器的简写 git remote # 查看远程 , 列出 简称和地址 git remote -v # 查看远程仓库详细地址 git remote show <仓库简称>\"]},\"57\":{\"h\":\"11.2 添加/移除远测仓库\",\"t\":[\"# 添加远程仓库 git remote add <shortname> <url> # 移除远程仓库和本地仓库的关系(只是从本地移除远程仓库的关联关系，并不会真正影响到远程仓库) git remote rm <shortname>\"]},\"58\":{\"h\":\"11.3 从远程仓库获取代码\",\"t\":[\"# 从远程仓库克隆 git clone <url> # 从远程仓库拉取 (拉取到.git 目录,不会合并到工作区,工作区发生变化) git fetch <shortname> <分支名称> # 手动合并 把某个版本的某个分支合并到当前工作区 git merge <shortname>/<分支名称> # 从远程仓库拉取 (拉取到.git 目录,合并到工作区,工作区不发生变化) = fetch+merge git pull <shortname> <分支名称> git pull <shortname> <分支名称> --allow-unrelated-histories # 强制拉取合并\",\"注意：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在git pull命令后加入参数--allow-unrelated-histories (如上 命令)\",\"# 将本地仓库推送至远程仓库的某个分支 git push [remote-name] [branch-name]\",\"# 默认 分支名称为 master # 列出所有本地分支 git branch # 列出所有远程分支 git branch -r # 列出所有本地分支和远程分支 git branch -a # 创建分支 git branch <分支名> # 切换分支 git checkout <分支名> # 删除分支(如果分支已经修改过,则不允许删除) git branch -d <分支名> # 强制删除分支 git branch -D <分支名>\",\"# 提交分支至远程仓库 git push <仓库简称> <分支名称> # 合并分支 将其他分支合并至当前工作区 git merge <分支名称> # 删除远程仓库分支 git push origin –d branchName\",\"# 列出所有tag git tag # 查看tag详细信息 git show [tagName] # 新建一个tag git tag [tagName] # 提交指定tag $ git push [仓库简称] [tagName] # 新建一个分支，指向某个tag $ git checkout -b [branch] [tag] # 删除本地tag $ git tag -d [tag] # 删除远程tag (注意 空格) $ git push origin :refs/tags/[tag]\",\"企业中我们是如何开发的 1) 入职第一天,管理人员分配/git账号密码 2) 开发人员下载代码即文档/ 根据文档将环境搭建成功 3) 团队一般会给你讲讲项目相关的支持 ---- 4) 你接到第一个需求(或者某个功能,一般要经过沟通,分析,设计...等过程) 5) 创建feature分支(一般一个需求对应一个feature,命名格式上标注该需求的id) 6) 开发需求,本地测试,提交代码到当前需求对应的feature分支, 一般来讲为了避免将测试代码提交,需要提交前,检查如下步骤 6.1) 是否多提交了某个文件,比如测试文件 6.2) 是否漏提交文件 6.3) 打开每一个应该提交的文件,判断是否多提交了一行代码,是否少提交了一行代码,是否删除了本应该存在的代码 检查完毕提交代码 7) 合并分支至test分支-- 测试人员会在test分支中测试 8) 测试人员测试bug ,开发者在feature分支上继续修改,提交 9) 测试人员测试通过 ,test分支会被测试人员合并到develop开发分支,再次测试 10)develop分支最终会被合并到master主分支\",\"`\"]},\"59\":{\"h\":\"\"},\"60\":{\"h\":\"思维导图\",\"t\":[\"语法：\"]},\"61\":{\"h\":\"GFM警告\",\"t\":[\"> [!important] > 重要文字 > [!info] > 信息文字 > [!tip] > 提示文字 > [!warning] > 注意文字 > [!caution] > 警告文字 > [!note] > 注释文字\"]},\"62\":{\"h\":\"提示容器\",\"t\":[\"默认标题\",\"::: important 重要容器。 ::: ::: info 信息容器。 ::: ::: note 注释容器。 ::: ::: tip 提示容器 ::: ::: warning 警告容器 ::: ::: caution 危险容器 ::: ::: details 详情容器 :::\",\"自定义\",\"::: important 自定义标题 重要容器。 :::\"]},\"63\":{\"h\":\"跳转\"},\"64\":{\"h\":\"1）文章内跳转（内链）\",\"t\":[\"为标题添加锚点：\",\"在Markdown文件中，为你希望作为跳转目标的标题添加一个自定义的id。VuePress会自动为标题生成锚点，但你也可以手动指定一个：\",\"markdown\",\"#### 这个是我的标题 {#custom-anchor}\",\"随后，你可以使用这个自定义的id来创建指向该标题的链接：\",\"markdown\",\"[跳到我的标题](#custom-anchor)\",\"如果你没有手动指定id，VuePress会为每个标题生成一个默认的锚点，通常是标题文本转换为小写，并用连字符代替空格。例如：\",\"markdown\",\"#### 我的标题\",\"可以链接到：\",\"markdown\",\"[跳到我的标题](#我的标题)\"]},\"65\":{\"h\":\"2）跳转到其他文章（内部链接）：\",\"t\":[\"相对路径链接：\",\"使用相对路径来链接到同一项目内的其他Markdown文件。假设你的文件结构如下：\",\"docs/ ├── guide/ │ ├── intro.md │ └── advanced.md └── about.md\",\"你可以在intro.md中链接到advanced.md：\",\"markdown\",\"[高级指南](./advanced.md)\",\"如果是从about.md跳转到guide/advanced.md:\",\"markdown\",\"[高级指南](./guide/advanced.md)\",\"绝对路径链接：\",\"如果你的项目设置了base路径（比如发布到GitHub Pages的子目录），你需要使用绝对路径。假设你的base路径是/docs/:\",\"markdown\",\"[高级指南](/docs/guide/advanced.md)\",\"自动处理：\",\"VuePress会自动将.md后缀转换为.html，所以你可以直接使用.md链接。VuePress也会处理不存在的.html文件，转而尝试查找相同名称的目录或.md文件。\"]},\"66\":{\"h\":\"好物分享\"},\"67\":{\"h\":\"💻软件\"},\"68\":{\"h\":\"视频\"},\"69\":{\"h\":\"音乐\"},\"70\":{\"h\":\"解压工具\"},\"71\":{\"h\":\"截图\"},\"72\":{\"h\":\"广告屏蔽\",\"t\":[\"GKD：github地址\",\"基于 无障碍 + 高级选择器 + 订阅规则 的自定义屏幕点击 APP\",\"提示\",\"【枪弹分离模式】：之前的李跳跳做了合体，被封了，后面开始流行这种模式，需要规则另外找就可以避免了\"]},\"73\":{\"h\":\"电纸书/PDF\",\"t\":[\"Z-Library – 世界上最大的电子书图书馆。 您通往知识的大门\",\"市面大部分的书籍这里都有电子版\"]},\"74\":{\"h\":\"画图工具\",\"t\":[\"web版本有两个：\",\"ProcessOn ：免费版本一个账号只能创建14个云文件，可画思维导图、流程图、架构图\",\"亿图软件：功能更强，可以结合AI生成对应的思维导图，流程图，架构图（但是需要收费）\"]},\"75\":{\"h\":\"📝开源项目\"},\"76\":{\"h\":\"nvm - node版本控制\",\"t\":[\"node版本管理工具，可做到任意切换想要的版本\",\"使用前还是要卸载node，然后安装nvm，使用nvm命令下载并使用node\",\"原理：将node版本下载到nvm的目录下面，然后使用软连接到指定的目录下面\",\".github地址：nvm\"]},\"77\":{\"h\":\"chsrc - 换源工具\",\"t\":[\"chsrc 不仅是一个命令行工具，同时也是一个换源框架，它甚至使你能够在不了解C语言的情况下编写出新的换源方法(recipe)\",\"# 使用 chsrc <command> [options] [target] [mirror] # 查看可用源 chsrc list # 自动测速，寻找并切换最快的源 (操作系统/编程语言/软件) chsrc set <target>\",\"chsrc ：Change Source everywhere for every software\"]},\"78\":{\"h\":\"🌐实用网站\"},\"79\":{\"h\":\"：在线编码网站\",\"t\":[\"我们都了解github上有很多优秀开源的项目，值得我们去学习。但是正常情况下，需要下载代码然后查看仔细全部的代码，揣测代码含义，这效率特别低。--可借助AI助手豆包 MarsCode插件，或者使用云上的IDE开发环境（相当于2和4G的云服务器）\",\"怎么学习开源项目： 1、git代码仓库导入项目 2、打开Readme文件咨询：项目是做什么的 3、开代码可直接选择ai解释 4、我们开发写的代码可以直接让它review一遍，指出代码存在的缺陷或者修复，对比学习，快速提高自己的代码能力 5、让它写单元测试和规范的注释 虽然AI很方便，但是还是要多思考，它为什么要这样回答，还有遇到比较好的思路要勤做笔记多复习一下，不能过度依赖！！\",\"这个同时也是一个算法练习工具\"]},\"80\":{\"c\":[\"share\"]},\"81\":{\"h\":\"网络基础\"},\"82\":{\"h\":\"TCP的三次握手\",\"t\":[\"握手流程：1、请求连接 （syn） 2、收到（syn+1），我这边也要连接（ack） 3、我的请求得到回复的，你的请求我知道了（ack+1）。\",\"TCP的特点是：可靠的面向对象的全双工通讯，意味着两边同时确认连接才可建立连接为此三次握手\",\"两次和四次为什么不可以？\",\"服务器角度思考必须是3次，而两次的话就是服务器端不能确认自己的消息是否被对方收到、四次的话多余了前面两次可确保双方建立连接3次以上多余就会浪费资源\",\"没有第三次握手有什么问题？\",\"服务端没有收到第三次握手，超时就会认为消息不可达，就会重发几次，依旧没有就放弃这个连接。\",\"比如dos攻击就是用大量的伪ip发起syn报文但不给确认，导致服务器一直处理大量的半连接，导致无法处理正常的请求\"]},\"83\":{\"h\":\"http和https的区别\",\"t\":[\"https=http+ssl协议加密\",\"http是明文传输\",\"对称加密：最简单，解决明文传输，但是容易窃取和监听（传输密钥的时候可能会被窃取）\",\"非对称加密：安全但是加解密耗时。两个最大的作用：公钥加密（私钥解密）、私钥签名（明文计算hash值私钥加密公钥解密）\",\"CA证书：可以理解为我们的本科毕业证，是学信网认证的，任何人拿到编号都可以获取我们个人学籍信息，申请CA证书也是将数据给相关部门，他们用户私钥加密后给你CA证书，其他人都会有公钥，就解决了认证了不被篡改信息了\",\"过程：CA证书是权威的可确保证书内容的正确性并携带服务器的公钥，确保了公钥正确被送到客户端手里，客户端就可以用公钥加密对称密钥了。\",\"安全性：是指在发送对称密钥的过程密钥被截取或篡改\",\"image-20241122185952295\"]},\"84\":{\"h\":\"实现https\",\"t\":[\"注：这个自己服务器可以考虑使用这种方式，公司使用还是去花钱申请CA证书\",\"购买域名，然后需要备份就备份，不需要就直接托管到cloudflare上解析即可\",\"使用域名访问（依旧还是http）\",\"访问开源项目**acme.sh**\",\"# 1.安装acme.sh wget -O - https://get.acme.sh | sh -s email=my@example.com 下不了用这个命令： git clone https://gitee.com/neilpang/acme.sh.git cd acme.sh ./acme.sh --install -m myEmain@xxx.com # 安装成功可以看到installed success。然后我们记一下安装路径 # 2.对于http验证，我们直接使用直接签发(需要指定域名且要有DNS配置) acme.sh --issue -d xxx.com -d www.xxx.com --webroot /usr/local/nginx/xxdefault.conf # acme.sh：acme的安装路径，用完整的。 # -d ：这个参数后面是你的域名，后面一个是子域名 # --webroot：这个是nginx的配置文件 # 3.开始安装证书到Nginx中去（执行命令会自动生成证书和密钥） acme.sh --install-cert -d xxx.com \\\\ --key-file /path/to/keyfile/in/nginx/key.pem \\\\ # 私钥 (可自己设置路径) --fullchain-file /path/to/fullchain/nginx/cert.pem \\\\ # 证书(可自己设置路径) --reloadcmd \\\"service nginx force-reload\\\" # 重启一下nginx服务 # 4.将证书和密钥配置到nginx中去 vim /xxx/xxx/default server { listen 80 default_server; listen 443 ssl http2; ----------------添加 listen [::]:80 default_server; ssl_certificate /path/to/fullchain/nginx/cert.pem -----添加 ssl_certificate_key /path/to/keyfile/in/nginx/key.pem -----添加 。。。 } # 5.重启就可以直接通过https访问了 service nginx force-reload # 6.使用acme为我们每天检查证书是否过期，快过期就自动续签 crontab -e 注：acme目前是每60天自动更新证书，也可强制续签证书\",\"小结：用这个开源工具实现https，根据服务器的信息生成一个CA证书以及私钥。然后将这个证书和私钥配置到nginx或者Apache的配置文件中去就可以了\"]},\"85\":{\"h\":\"https原理\",\"t\":[\"http过程：http是明文在网络中传输，这个过程会被窃听、篡改。为此需要加密来处理\",\"加密几种方式的优缺点\",\"对称加密+http： 加密简单。但是就同一般秘钥会被截取\",\"非对称加密+http： 更安全但是复杂响应太慢了\",\"对称+非对称+http：非对称对对称加密而对称对信息加密，速度快了也不能被窃取，对称密钥还是会被篡改\",\"终极方案：CA机构颁发CA证书\"]},\"86\":{\"c\":[\"web\"]},\"87\":{\"h\":\"Consul\"},\"88\":{\"c\":[\"mq\"]},\"89\":{\"h\":\"Docker\"},\"90\":{\"c\":[\"微服务\"]},\"91\":{\"h\":\"GRPC\"},\"92\":{\"h\":\"Protobuf\"},\"93\":{\"c\":[\"微服务\"]},\"94\":{\"h\":\"Jaeger\"},\"95\":{\"c\":[\"微服务\"]},\"96\":{\"h\":\"Kong\"},\"97\":{\"c\":[\"微服务\"]},\"98\":{\"h\":\"kubernetes\"},\"99\":{\"c\":[\"微服务\"]},\"100\":{\"h\":\"Nacos\"},\"101\":{\"c\":[\"微服务\"]},\"102\":{\"h\":\"Sentinel\"},\"103\":{\"c\":[\"微服务\"]},\"104\":{\"h\":\"gorm使用\"},\"105\":{\"c\":[\"golang\"]},\"106\":{\"h\":\"gorm实现原理\"},\"107\":{\"c\":[\"golang\"]},\"108\":{\"h\":\"Web框架\"},\"109\":{\"h\":\"目录\",\"t\":[\"gin\",\"beego\",\"go-zero\"]},\"110\":{\"h\":\"为什么要学web框架？\",\"t\":[\"作为初学者很多时候，在学习一个框架的时候，一定要搞清楚我们为什么要学习它，这个非常的重要。\",\"随着互联网技术的发展，在早期我们大部分情况下，编写的都是静态网页html。如果有100篇文章就要编写一百篇与之对应的静态网页。这样是非常痛苦的。于是乎开始有了动态网页，动态网页必须要结合服务器端的技术，比如：Go、Java等。有了这些服务端语言的加持这样就可以完成一个静态网页到动态网页的转化。如下图：\",\"假设我们这里选择的是：Gin+gorm。\",\"用户在浏览器通过ip+port+路由这样的地址访问，这个地址其实是服务器提供。用于寻址，先根据ip找到服务器在哪里，端口找到对应的服务，web服务会根据路由来匹配已经定义的路由来进行访问，执行对应的逻辑（也就是未来web框架的路由处理要完成的部分）。\",\"执行逻辑中gorm会从数据库查询数据出来，根据定义好的模板开始用对应的模板语法进行碰撞和渲染，最终呈现一个完整的网页\",\"这就是经典的：B/S架构\"]},\"111\":{\"h\":\"主流的web框架\",\"t\":[\"评估维度\",\"Gin\",\"Beego\",\"go-zero\",\"基本信息\",\"GitHub Stars\",\"71.2k+\",\"29.7k+\",\"24.9k+\",\"开源协议\",\"MIT\",\"Apache-2.0\",\"MIT\",\"技术特性\",\"路由性能\",\"★★★★★\",\"★★★★☆\",\"★★★★★\",\"内存占用\",\"★★★★★\",\"★★★☆☆\",\"★★★★☆\",\"扩展性\",\"★★★★★\",\"★★★☆☆\",\"★★★★☆\",\"代码生成\",\"★★☆☆☆\",\"★★★★☆\",\"★★★★★\",\"功能特性\",\"路由管理\",\"基础路由\",\"完整MVC\",\"gRPC/HTTP\",\"ORM支持\",\"无内置\",\"内置ORM\",\"内置gorm\",\"参数验证\",\"支持\",\"支持\",\"支持\",\"中间件\",\"丰富\",\"较多\",\"丰富\",\"模板引擎\",\"支持\",\"完整支持\",\"不支持\",\"缓存支持\",\"无内置\",\"内置\",\"内置\",\"微服务特性\",\"服务发现\",\"无内置\",\"部分支持\",\"完整支持\",\"负载均衡\",\"无内置\",\"部分支持\",\"内置支持\",\"熔断限流\",\"无内置\",\"部分支持\",\"内置支持\",\"链路追踪\",\"三方支持\",\"部分支持\",\"内置支持\",\"开发体验\",\"学习曲线\",\"简单\",\"中等\",\"较陡\",\"开发效率\",\"★★★★☆\",\"★★★★★\",\"★★★★★\",\"文档质量\",\"★★★★★\",\"★★★★☆\",\"★★★★☆\",\"社区活跃度\",\"★★★★★\",\"★★★★☆\",\"★★★★☆\",\"适用场景\",\"小型项目\",\"✓✓✓\",\"✓✓\",\"✓\",\"单体应用\",\"✓✓✓\",\"✓✓✓\",\"✓\",\"微服务\",\"✓\",\"✓✓\",\"✓✓✓\",\"API服务\",\"✓✓✓\",\"✓✓\",\"✓✓✓\"]},\"112\":{\"h\":\"1. 框架优劣势总结\"},\"113\":{\"h\":\"⭐Gin\",\"t\":[\"优势：\",\"轻量级、高性能\",\"学习成本低\",\"社区活跃，生态丰富\",\"适合快速开发API\",\"劣势：\",\"功能相对简单\",\"企业级特性需要集成\",\"微服务支持有限\"]},\"114\":{\"h\":\"Beego\",\"t\":[\"优势：\",\"功能完整，开箱即用\",\"MVC架构清晰\",\"开发工具支持好\",\"适合全栈开发\",\"劣势：\",\"框架较重\",\"性能一般\",\"不够灵活\"]},\"115\":{\"h\":\"🌟Go-zero\",\"t\":[\"优势：\",\"微服务治理能力强\",\"性能优秀\",\"代码生成完善\",\"可观测性好\",\"劣势：\",\"配置较复杂\",\"学习成本高\",\"主要针对微服务\"]},\"116\":{\"h\":\"3. 选型建议\",\"t\":[\"选择Gin的情况：\",\"项目以API为主\",\"团队追求简单灵活\",\"对性能要求高\",\"需要定制化开发\",\"选择Beego的情况：\",\"全栈Web应用\",\"团队规模较大\",\"需要快速开发\",\"对性能要求一般\",\"选择go-zero的情况：\",\"微服务架构\",\"团队技术能力强\",\"需要完整治理方案\",\"强调可观测性\"]},\"117\":{\"h\":\"4. 成本评估\",\"t\":[\"成本类型\",\"Gin\",\"Beego\",\"go-zero\",\"学习成本\",\"低\",\"中\",\"高\",\"开发成本\",\"中\",\"低\",\"低\",\"维护成本\",\"低\",\"中\",\"中\",\"运维成本\",\"低\",\"中\",\"高\",\"迁移成本\",\"低\",\"中\",\"高\"]},\"118\":{\"h\":\"5. 风险评估\",\"t\":[\"风险类型\",\"Gin\",\"Beego\",\"go-zero\",\"技术风险\",\"低\",\"低\",\"中\",\"人才风险\",\"低\",\"低\",\"中\",\"升级风险\",\"低\",\"中\",\"中\",\"扩展风险\",\"低\",\"中\",\"低\"]},\"119\":{\"h\":\"🎉总结\",\"t\":[\"一般项目推荐Gin：相比之下简单、性能好、扩展性强，可实现绝大多数业务\",\"大型项目推荐Beego：面向微服务架构设计、微服务治理能力强。大型项目也基本是使用微服务架构的。很多大型企业都在使用这个架构\"]},\"120\":{\"h\":\"常用包和第三方包介绍\",\"t\":[\"包 \",\"常用官方包说明\",\"常用第三方包说明\",\"常用框架\",\"完整标准库列表\",\"优秀的第三方库\",\"音频和音乐\",\"数据结构:Go中的通用数据结构和算法\",\"分布式系统:Go中的通用数据结构和算法\",\"电子邮件:实现电子邮件创建和发送的库和工具\",\"嵌入式脚本语言:在go代码中嵌入其他语言\",\"错误处理\",\"处理文件和文件系统的库\",\"金融:会计和财务软件包\",\"游戏开发:游戏开发相关库\",\"地理位置:地理相关的位置信息和工具库\",\"编译器相关:转到其他语言\",\"Goroutines:用于管理和使用Goroutines的工具\",\"图形界面:用于构建GUI应用程序的库\",\"图片:用于处理图像的库\",\"物联网:物联网设备编程库\",\"JSON格式:用于处理JSON的库\",\"机器学习:常用机器学习库\",\"微软办公软件\",\"自然语言处理\",\"网络:与网络各层配合使用的库\",\"视频:用于处理视频的库\"]},\"121\":{\"h\":\"常用包\",\"t\":[\"常用包\",\"说明\",\"fmt\",\"实现格式化的输入输出操作，其中的fmt.Printf()和fmt.Println()是开发者使用最为频繁的函数。\",\"io\",\"实现了一系列非平台相关的IO相关接口和实现，比如提供了对os中系统相关的IO功能的封装。我们在进行流式读写（比如读写文件）时，通常会用到该包。\",\"bufio\",\"它在io的基础上提供了缓存功能。在具备了缓存功能后， bufio可以比较方便地提供ReadLine之类的操作。\",\"strconv\",\"提供字符串与基本数据类型互转的能力。\",\"os\",\"本包提供了对操作系统功能的非平台相关访问接口。接口为Unix风格。提供的功能包括文件操作、进程管理、信号和用户账号等。\",\"sync\",\"它提供了基本的同步原语。在多个goroutine访问共享资源的时候，需要使用sync中提供的锁机制。\",\"flag\",\"它提供命令行参数的规则定义和传入参数解析的功能。绝大部分的命令行程序都需要用到这个包。\",\"encoding/json\",\"JSON目前广泛用做网络程序中的通信格式。本包提供了对JSON的基本支持，比如从一个对象序列化为JSON字符串，或者从JSON字符串反序列化出一个具体的对象等。\",\"http\",\"通过http包，只需要数行代码，即可实现一个爬虫或者一个Web服务器，这在传统语言中是无法想象的。\"]},\"122\":{\"h\":\"常用第三方包\",\"t\":[\"包\",\"地址\",\"数据库操作\",\"github.com/jinzhu/gormgithub.com/go-xorm/xorm\",\"搜索es\",\"github.com/olivere/elastic\",\"rocketmq操作\",\"github.com/apache/rocketmq-client-go/v2\",\"rabbitmq 操作\",\"github.com/streadway/amqp\",\"redis 操作\",\"github.com/go-redis/redis\",\"etcd 操作\",\"github.com/coreos/etcd/clientv3\",\"kafka\",\"https://github.com/Shopify/saramahttps://github.com/bsm/sarama-cluster\",\"excel 操作\",\"github.com/360EntSecGroup-Skylar/excelize\",\"ppt 操作\",\"golang.org/x/tools/cmd/present\",\"go-svg 操作\",\"https://github.com/ajstarks/svgo\",\"go 布隆过滤器实现\",\"https://github.com/AndreasBriese/bbloom\",\"json相关\",\"https://github.com/bitly/go-simplejson\",\"LRU Cache实现\",\"https://github.com/bluele/gcache https://github.com/hashicorp/golang-lru \",\"go运行时函数替换\",\"https://github.com/bouk/monkey \",\"toml\",\"https://github.com/toml-lang/toml https://github.com/naoina/toml \",\"yaml\",\"https://github.com/go-yaml/yaml \",\"viper\",\"https://github.com/spf13/viper \",\"go key/value存储\",\"https://github.com/etcd-io/bbolt \",\"基于ringbuffer的无锁golang workpool\",\"https://github.com/Dai0522/workpool \",\"轻量级的协程池\",\"https://github.com/ivpusic/grpool \",\"打印go的详细数据结构\",\"https://github.com/davecgh/go-spew \",\"基于ringbuffer实现的队列\",\"https://github.com/eapache/queue \",\"拼音\",\"https://github.com/go-ego/gpy \",\"分词\",\"https://github.com/go-ego/gse \",\"搜索\",\"https://github.com/go-ego/riot \",\"windows COM\",\"https://github.com/go-ego/cedar \",\"session\",\"https://github.com/gorilla/sessions \",\"路由\",\"https://github.com/gorilla/mux \",\"websocket\",\"https://github.com/gorilla/websocket \",\"Action handler\",\"https://github.com/gorilla/handlers \",\"csrf\",\"https://github.com/gorilla/csrf \",\"context\",\"https://github.com/gorilla/context \",\"过滤html标签\",\"https://github.com/grokify/html-strip-tags-go \",\"可配置的HTML标签过滤\",\"https://github.com/microcosm-cc/bluemonday \",\"根据IP获取地理位置信息\",\"https://github.com/ipipdotnet/ipdb-go \",\"html转markdown\",\"https://github.com/jaytaylor/html2text \",\"goroutine 本地存储\",\"https://github.com/jtolds/gls \",\"彩色输出\",\"https://github.com/mgutz/ansi\",\"表格打印\",\"https://github.com/olekukonko/tablewriter\",\"reflect 更高效的反射API\",\"https://github.com/modern-go/reflect2\",\"msgfmt (格式化字符串，将%更换为变量名)\",\"https://github.com/modern-go/msgfmt\",\"可取消的goroutine\",\"https://github.com/modern-go/concurrent\",\"深度拷贝\",\"https://github.com/mohae/deepcopy\",\"安全的类型转换包\",\"https://github.com/spf13/cast\",\"从文本中提取链接\",\"https://github.com/mvdan/xurls\",\"字符串格式处理（驼峰转换）\",\"https://godoc.org/github.com/naoina/go-stringutil\",\"文本diff实现\",\"https://github.com/pmezard/go-difflib\",\"uuid相关\",\"https://github.com/satori/go.uuidhttps://github.com/snluu/uuid\",\"去除UTF编码中的BOM\",\"https://github.com/ssor/bom\",\"图片缩放\",\"https://github.com/nfnt/resize\",\"生成 mock server\",\"https://github.com/otokaze/mock\",\"go 性能上报到influxdb\",\"https://github.com/rcrowley/go-metrics\",\"go zookeeper客户端\",\"https://github.com/samuel/go-zookeeper\",\"go thrift\",\"https://github.com/samuel/go-thrift\",\"MQTT 客户端\",\"https://github.com/shirou/mqttcli\",\"hbase\",\"https://github.com/tsuna/gohbase\",\"go 性能上报到influxdb\",\"https://github.com/rcrowley/go-metrics\",\"go 性能上报到prometheus\",\"https://github.com/deathowl/go-metrics-prometheus\",\"ps utils\",\"https://github.com/shirou/gopsutil\",\"小数处理\",\"https://github.com/shopspring/decimal\",\"结构化日志处理(json)\",\"https://github.com/sirupsen/logrus\",\"命令行程序框架 cli\",\"https://github.com/urfave/cli\",\"命令行程序框架 cobra\",\"https://github.com/spf13/cobra\"]},\"123\":{\"h\":\"必看项目\",\"t\":[\"项目\",\"地址\",\"说明\",\"gin\",\"github.com/gin-gonic/gin\",\"轻量级web框架，很多公司都是基于它进行魔改\",\"beego\",\"github.com/beego/beego\",\"也是web框架，比较全能\",\"kratos\",\"github.com/go-kratos/kratos\",\"bilibili开源的微服务框架，b站出品必属于精品\",\"TiDB\",\"github.com/pingcap/tidb\",\"见识过mysql性能瓶颈之后你会想要选择的一款数据库\"]},\"124\":{\"h\":\"完整标准库列表\",\"t\":[\"包\",\"子包\",\"说明\",\"bufio\",\"bytes\",\"提供了对字节切片操作的函数\",\"crypto\",\"收集了常见的加密常数\",\"errors\",\"实现了操作错误的函数\",\"Expvar\",\"为公共变量提供了一个标准的接口，如服务器中的运算计数器\",\"flag\",\"实现了命令行标记解析\",\"fmt\",\"实现了格式化输入输出\",\"hash\",\"提供了哈希函数接口\",\"html\",\"实现了一个HTML5兼容的分词器和解析器\",\"image\",\"实现了一个基本的二维图像库\",\"io\",\"提供了对I/O原语的基本接口\",\"log\",\"它是一个简单的记录包，提供最基本的日志功能\",\"math\",\"提供了一些基本的常量和数学函数\",\"mine\",\"实现了部分的MIME规范\",\"net\",\"提供了一个对UNIX网络套接字的可移植接口，包括TCP/IP、 UDP域名解析和UNIX域套接字\",\"os\",\"为操作系统功能实现了一个平台无关的接口\",\"path\",\"实现了对斜线分割的文件名路径的操作\",\"reflect\",\"实现了运行时反射，允许一个程序以任意类型操作对象\",\"regexp\",\"实现了一个简单的正则表达式库\",\"runtime\",\"包含与Go运行时系统交互的操作，如控制goroutine的函数\",\"sort\",\"提供对集合排序的基础函数集\",\"strconv\",\"实现了在基本数据类型和字符串之间的转换\",\"strings\",\"实现了操作字符串的简单函数\",\"sync\",\"提供了基本的同步机制，如互斥锁\",\"syscall\",\"包含一个低级的操作系统原语的接口\",\"testing\",\"提供对自动测试Go包的支持\",\"time\",\"提供测量和显示时间的功能\",\"unicode\",\"Unicode编码相关的基础函数\",\"archive\",\"tar\",\"实现对tar压缩文档的访问\",\"zip\",\"提供对ZIP压缩文档的读和写支持\",\"compress\",\"bzip2\",\"实现了bzip2解压缩\",\"flate\",\"实现了RFC 1951中所定义的DEFLATE压缩数据格式\",\"gzip\",\"实现了RFC 1951中所定义的gzip格式压缩文件的读和写\",\"lzw\",\"实现了 Lempel-Ziv-Welch编码格式的压缩的数据格式\",\"zlib\",\"实现了RFC 1950中所定义的zlib格式压缩数据的读和写\",\"container\",\"heap\",\"提供了实现heap.Interface接口的任何类型的堆操作\",\"lsit\",\"实现了一个双链表\",\"ring\",\"实现了对循环链表的操作\",\"crypto\",\"aes\",\"实现了AES加密（以前的Rijndael）\",\"cipher\",\"实现了标准的密码块模式，该模式可包装进低级的块加密实现中\",\"des\",\"实现了数据加密标准（ Data Encryption Standard，DES）和三重数据加密算法（ TripleData Encryption Algorithm， TDEA）\",\"dsa\",\"实现了FIPS 186-3所定义的数据签名算法（ Digital Signature Algorithm）\",\"ecdsa\",\"实现了FIPS 186-3所定义的椭圆曲线数据签名算法（ Elliptic Curve Digital SignatureAlgorithm）\",\"elliptic\",\"实现了素数域上几个标准的椭圆曲线\",\"hmac\",\"实现了键控哈希消息身份验证码（ Keyed-Hash Message Authentication Code，HMAC）\",\"md5\",\"实现了RFC 1321中所定义的MD5哈希算法\",\"rand\",\"实现了一个加密安全的伪随机数生成器\",\"rc4\",\"实现了RC4加密，其定义见Bruce Schneier的应用密码学（ Applied Cryptography）\",\"rsa\",\"实现了PKCS#1中所定义的RSA加密\",\"sha1\",\"实现了RFC 3174中所定义的SHA1哈希算法\",\"sha256\",\"实现了FIPS 180-2中所定义的SHA224和SHA256哈希算法\",\"sha512\",\"实现了FIPS 180-2中所定义的SHA384和SHA512哈希算法\",\"subtle\",\"实现了一些有用的加密函数，但需要仔细考虑以便正确应用它们\",\"tls\",\"部分实现了RFC 4346所定义的TLS 1.1协议\",\"x509\",\"可解析X.509编码的键值和证书\",\"x509/pkix\",\"包含用于对X.509证书、 CRL和OCSP的ASN.1解析和序列化的共享的、低级的结构\",\"database\",\"sql\",\"围绕SQL提供了一个通用的接口\",\"sql/driver\",\"定义了数据库驱动所需实现的接口，同sql包的使用方式\",\"debug\",\"dwarf\",\"提供了对从可执行文件加载的DWARF调试信息的访问，这个包对于实现Go语言的调试器非常有价值\",\"elf\",\"实现了对ELF对象文件的访问。 ELF是一种常见的二进制可执行文件和共享库的文件格式。 Linux采用了ELF格式\",\"gosym\",\"访问Go语言二进制程序中的调试信息。对于可视化调试很有价值\",\"macho\",\"实现了对Mach-O对象文件的访问\",\"pe\",\"实现了对PE（ Microsoft Windows Portable Executable）文件的访问\",\"encoding\",\"ascii85\",\"实现了ascii85数据编码，用于btoa工具和Adobe’s PostScript以及PDF文档格式\",\"asn1\",\"实现了解析DER编码的ASN.1数据结构，其定义见ITU-T Rec X.690\",\"base32\",\"实现了RFC 4648中所定义的base32编码\",\"base64\",\"实现了RFC 4648中所定义的base64编码\",\"binary\",\"实现了在无符号整数值和字节串之间的转化，以及对固定尺寸值的读和写\",\"csv\",\"可读和写由逗号分割的数值（ csv）文件\",\"gob\",\"管理gob流——在编码器（发送者）和解码器（接收者）之间进行二进制值交换\",\"hex\",\"实现了十六进制的编码和解码\",\"json\",\"实现了定义于RFC 4627中的JSON对象的编码和解码\",\"pem\",\"实现了PEM（ Privacy Enhanced Mail）数据编码\",\"xml\",\"实现了一个简单的可理解XML名字空间的XML 1.0解析器\",\"go\",\"ast\",\"声明了用于展示Go包中的语法树类型\",\"build\",\"提供了构建Go包的工具\",\"doc\",\"从一个Go AST（抽象语法树）中提取源代码文档\",\"parser\",\"实现了一个Go源文件解析器\",\"printer\",\"实现了对AST（抽象语法树）的打印\",\"scanner\",\"实现了一个Go源代码文本的扫描器\",\"token\",\"定义了代表Go编程语言中词法标记以及基本操作标记（ printing、 predicates）的常量\",\"hash\",\"adler32\",\"实现了Adler-32校验和\",\"crc32\",\"实现了32位的循环冗余校验或CRC-32校验和\",\"crc64\",\"实现了64位的循环冗余校验或CRC-64校验和\",\"fnv\",\"实现了Glenn Fowler、 Landon Curt Noll和Phong Vo所创建的FNV-1和FNV-1a未加密哈希函数\",\"html\",\"template\",\"它自动构建HTML输出，并可防止代码注入\",\"image\",\"color\",\"实现了一个基本的颜色库\",\"draw\",\"提供一些做图函数\",\"gif\",\"实现了一个GIF图像解码器\",\"jpeg\",\"实现了一个JPEG图像解码器和编码器\",\"png\",\"实现了一个PNG图像解码器和编码器\",\"index\",\"suffixarray\",\"通过构建内存索引实现的高速字符串匹配查找算法\",\"io\",\"ioutil\",\"实现了一些实用的I/O函数\",\"log\",\"syslog\",\"提供了对系统日志服务的简单接口\",\"math\",\"big\",\"实现了多精度的算术运算（大数）\",\"cmplx\",\"为复数提供了基本的常量和数学函数\",\"rand\",\"实现了伪随机数生成器\",\"mime\",\"multipart\",\"实现了在RFC 2046中定义的MIME多个部分的解析\",\"net\",\"http\",\"提供了HTTP客户端和服务器的实现\",\"mail\",\"实现了对邮件消息的解析\",\"rpc\",\"提供了对一个来自网络或其他I/O连接的对象可导出的方法的访问\",\"smtp\",\"实现了定义于RFC 5321中的简单邮件传输协议（ Simple Mail Transfer Protocol)\",\"textproto\",\"实现了在HTTP、 NNTP和SMTP中基于文本的通用的请求/响应协议\",\"url\",\"解析URL并实现查询转义\",\"http/cgi\",\"实现了定义于RFC 3875中的CGI（通用网关接口）\",\"http/fcgi\",\"实现了FastCGI协议\",\"http/httptest\",\"提供了一些HTTP测试应用\",\"http/httputil\",\"提供了一些HTTP应用函数，这些是对net/http包中的东西的补充，只不过相对不太常用\",\"http/pprof\",\"通过其HTTP服务器运行时提供性能测试数据，该数据的格式正是pprof可视化工具需要的\",\"rpc/jsonrpc\",\"为rpc包实现了一个JSON-RPC ClientCodec和ServerCodec\",\"os\",\"exec\",\"可运行外部命令\",\"user\",\"通过名称和id进行用户账户检查\",\"path\",\"filepath\",\"实现了以与目标操作系统定义文件路径相兼容的方式处理文件名路径\",\"regexp\",\"syntax\",\"将正则表达式解析为语法树\",\"runtime\",\"debug\",\"包含当程序在运行时调试其自身的功能\",\"pprof\",\"以pprof可视化工具需要的格式写运行时性能测试数据\",\"sync\",\"atomic\",\"提供了低级的用于实现同步算法的原子级的内存机制\",\"testing\",\"iotest\",\"提供一系列测试目的的类型，实现了Reader和Writer标准接口\",\"quick\",\"实现了用于黑箱测试的实用函数\",\"script\",\"帮助测试使用通道的代码\",\"text\",\"scanner\",\"为UTF-8文本提供了一个扫描器和分词器\",\"tabwriter\",\"实现了一个写筛选器（ tabwriter.Writer），它可将一个输入的tab分割的列翻译为适当对齐的文本\",\"template\",\"数据驱动的模板引擎，用于生成类似HTML的文本输出格式\",\"template/parse\",\"为template构建解析树\",\"unicode/utf16\",\"实现了UTF-16序列的的编码和解码\",\"unicode/utf8\",\"实现了支持以UTF-8编码的文本的函数和常数\"]},\"125\":{\"h\":\"其他优秀的开源工具分类\"},\"126\":{\"h\":\"音频和音乐\",\"t\":[\"包\",\"说明\",\"EasyMIDI\",\"EasyMidi是一个简单可靠的库，用于处理标准Midi文件（SMF）。\",\"flac\",\"支持FLAC流的Native Go FLAC编码器/解码器。\",\"gaad\",\"本机Go AAC比特流解析器。\",\"go-sox\",\"用于go的libsox绑定。\",\"go_mediainfo\",\"用于go的libmediainfo绑定。\",\"gosamplerate\",\"用于go的libsamplerate绑定。\",\"id3v2\",\"用于Go的快速，稳定的ID3解析和编写库。\",\"malgo\",\"迷你音频库。\",\"minimp3\",\"轻量级MP3解码器库。\",\"mix\",\"为音乐应用程序基于序列转到本地音频混合器。\",\"mp3\",\"Native Go MP3解码器。\",\"music-theory\",\"Go中的音乐理论模型。\",\"Oto\",\"在多个平台上播放声音的低级库。\",\"PortAudio\",\"用于PortAudio音频I / O库的绑定。\",\"portmidi\",\"绑定PortMidi。\",\"taglib\",\"为taglib绑定。\",\"vorbis\",\"“本机” Go Vorbis解码器（使用CGO，但没有依赖项）。\",\"waveform\",\"Go程序包，能够从音频流生成波形图像。\"]},\"127\":{\"h\":\"数据结构\",\"t\":[\"包\",\"说明\",\"algorithms\",\"算法和数据结构。CLRS研究。\",\"binpacker\",\"二进制打包程序和解包程序可帮助用户构建自定义二进制流。\",\"bit\",\"具有额外的位旋转功能的Golang设置数据结构。\",\"bitset\",\"实现位集的Go包。\",\"bloom\",\"在Go中实现的Bloom过滤器。\",\"bloom\",\"Golang Bloom过滤器实现。\",\"boomfilters\",\"用于处理连续无界流的概率数据结构。\",\"concurrent-writer\",\"高并发直接替换bufio.Writer。\",\"conjungo\",\"一个小型，强大而灵活的合并库。\",\"count-min-log\",\"执行Count-Min-Log草图：使用近似计数器进行近似计数（类似于Count-Min草图，但使用较少的内存）。\",\"crunch\",\"Go包实现了用于轻松处理各种数据类型的缓冲区。\",\"cuckoofilter\",\"Cuckoo过滤器：是Go中实现的计数布隆过滤器的很好替代。\",\"deque\",\"高度优化的双端队列。\",\"deque\",\"快速的环形缓冲区双端队列（双端队列）。\",\"dict\",\"Go的类似Python的字典（dict）。\",\"encoding\",\"Go的整数压缩库。\",\"go-adaptive-radix-tree\",\"自适应基数树的 Go实现。\",\"go-datastructures\",\"有用，高性能和线程安全的数据结构的集合。\",\"go-ef\",\"Elias-Fano编码的Go实现。\",\"go-geoindex\",\"内存中的地理索引。\",\"go-mcache\",\"快速内存键：值存储/缓存库。指针缓存。\",\"go-rquad\",\"具有有效点定位和邻居发现功能的区域四叉树。\",\"gocache\",\"具有多个存储（内存，memcache，redis等），可链接，可加载，指标缓存等的完整Go缓存库。\",\"goconcurrentqueue\",\"并发FIFO队列。\",\"gods\",\"数据结构。容器，集合，列表，堆栈，地图，BidiMap，树，HashSet等。\",\"gofal\",\"Go的小数api。\",\"golang-set\",\"Go的线程安全和非线程安全高性能集。\",\"goset\",\"Go的有用的Set集合实现。\",\"goskiplist\",\"Go中的跳过列表实现。\",\"gota\",\"Go的数据框，序列和数据整理方法的实现。\",\"hide\",\"ID类型，将其编组进/出哈希以防止将ID发送给客户端。\",\"hilbert\",\"Go程序包，用于在空间填充曲线（例如Hilbert和Peano曲线）之间映射值。\",\"hyperloglog\",\"HyperLogLog实施，具有稀疏，LogLog-Beta偏差校正和TailCut空间减少功能。\",\"iter\",\"C ++ STL迭代器和算法的实现。\",\"levenshtein\",\"Levenshtein距离和相似性度量标准，具有可自定义的编辑费用和通用前缀的类似于Winkler的奖金。\",\"levenshtein\",\"在Go中计算levenshtein距离的实现。\",\"mafsa\",\"具有最小完美散列的MA-FSA实现。\",\"merkletree\",\"merkle树的实现，可对数据结构的内容进行有效且安全的验证。\",\"mspm\",\"用于信息检索的多字符串模式匹配算法。\",\"null\",\"可空转到类型，可以被编组/解组到/从JSON。\",\"parsefields\",\"用于解析类似JSON的日志的工具，以收集唯一的字段和事件。\",\"pipeline\",\"具有扇入和扇出的管线的实现。\",\"ptrie\",\"前缀树的实现。\",\"remember-go\",\"缓存慢速数据库查询的通用接口（由redis，memcached，ristretto或内存支持）。\",\"ring\",\"围棋实现了高性能，线程安全的布隆过滤器。\",\"roaring\",\"实施压缩位集的软件包。\",\"set\",\"使用LinkedHashMap的围棋设置简单的数据结构实现。\",\"skiplist\",\"非常快的Go Skiplist实施。\",\"skiplist\",\"Go中的跳过列表实现。\",\"timedmap\",\"具有过期的键/值对的地图。\",\"treap\",\"使用树堆的持久快速排序的地图。\",\"trie\",\"Go中的Trie实现。\",\"ttlcache\",\"内存中的LRU字符串接口{}映射，其中包含golang的到期时间。\",\"typ\",\"空类型，安全的原始类型转换和从复杂结构中获取值。\",\"willf/bloom\",\"Go包实现Bloom过滤器。\"]},\"128\":{\"h\":\"分布式系统\",\"t\":[\"包\",\"说明\",\"celeriac\",\"用于在Go中添加支持以交互和监视Celery工作者，任务和事件的库。\",\"consistent\",\"具有受限负载的一致哈希\",\"dht\",\"BitTorrent Kademlia DHT实施。\",\"digota\",\"grpc电子商务微服务。\",\"dot\",\"使用操作转换/ OT进行分布式同步。\",\"doublejump\",\"改进后的Google的跳转一致性哈希。\",\"dragonboat\",\"Go中功能齐全的高性能多组Raft库。\",\"drmaa\",\"基于DRMAA标准的集群调度程序的作业提交库。\",\"dynamolock\",\"DynamoDB支持的分布式锁定实现。\",\"dynatomic\",\"将DynamoDB用作原子计数器的库。\",\"emitter-io\",\"使用MQTT，Websockets和love构建的高性能，分布式，安全和低延迟的发布-订阅平台。\",\"flowgraph\",\"基于流的编程包。\",\"gleam\",\"用纯围棋和Luajit快速和可扩展的分布式的map / reduce系统，具有Luajit的高性能结合Go的高并发，单独运行或分发。\",\"glow\",\"易于使用的可扩展的分布式大数据处理，Map-Reduce，DAG执行，全部在纯Go中进行。\",\"go-health\",\"health-用于在服务中启用异步依赖项运行状况检查的库。\",\"go-jump\",\"Google的“ Jump”一致性哈希函数的端口。\",\"go-kit\",\"支持服务发现，负载平衡，可插拔传输，请求跟踪等的微服务工具包\",\"go-sundheit\",\"建立用于支持为golang服务定义异步服务运行状况检查的库。\",\"gorpc\",\"简单，快速和可扩展的RPC库，可实现高负载。\",\"grpc-go\",\"gRPC的Go语言实现。基于HTTP / 2的RPC。\",\"hprose\",\"十分新颖的RPC库，现在支持25种以上的语言。\",\"jsonrpc\",\"jsonrpc软件包可帮助实现JSON-RPC 2.0。\",\"jsonrpc\",\"JSON-RPC 2.0 HTTP客户端实现。\",\"KrakenD\",\"具有中间件的超高性能API网关框架。\",\"liftbridge\",\"NATS的轻量级，容错消息流。\",\"micro\",\"可插拔的microService工具箱和分布式系统平台。\",\"NATS\",\"用于微服务，IoT和云本机系统的轻量级高性能消息传递系统。\",\"outboxer\",\"Outboxer是一个实现库模式的go库。\",\"pglock\",\"PostgreSQL支持的分布式锁定实现。\",\"raft\",\"HashiCorp的Raft共识协议的Golang实现。\",\"raft\",\"ETCD中实现的Raft协议。\",\"rain\",\"BitTorrent客户端和库。\",\"redis-lock\",\"使用Redis的简化分布式锁定实现。\",\"resgate\",\"用于构建REST，实时和RPC API的实时API网关，其中所有客户端都可以无缝同步。\",\"ringpop-go\",\"Go应用程序的可扩展，容错应用程序层分片。\",\"rpcx\",\"分布式可插拔RPC服务框架，例如阿里巴巴Dubbo。\",\"sleuth\",\"用于在HTTP服务之间进行无主p2p自动发现和RPC的库（ZeroMQ）。\",\"tendermint\",\"高性能中间件，用于使用Tendermint共识和区块链协议将以任何编程语言编写的状态机转换为拜占庭容错复制状态机。\",\"torrent\",\"BitTorrent客户端软件包。\"]},\"129\":{\"h\":\"电子邮件\",\"t\":[\"包\",\"说明\",\"chasquid\",\"用Go编写的SMTP服务器。\",\"douceur\",\"CSS内衬为您的HTML电子邮件。\",\"email\",\"用于Go的强大而灵活的电子邮件库。\",\"go-dkim\",\"DKIM库，用于签名和验证电子邮件。\",\"go-imap\",\"用于客户端和服务器的IMAP库。\",\"go-message\",\"Internet消息格式和邮件消息的流库。\",\"go-premailer\",\"Go中HTML邮件的内联样式。\",\"go-simple-mail\",\"使用SMTP保持活动状态和两个超时发送电子邮件的非常简单的程序包：连接和发送。\",\"Hectane\",\"提供HTTP API的轻型SMTP客户端。\",\"hermes\",\"Golang软件包，可生成干净的响应式HTML电子邮件。\",\"mailchain\",\"将加密的电子邮件发送到用Go编写的区块链地址。\",\"mailgun-go\",\"Go库，用于使用Mailgun API发送邮件。\",\"MailHog\",\"通过Web和API界面进行电子邮件和SMTP测试。\",\"SendGrid\",\"SendGrid的Go库，用于发送电子邮件。\",\"smtp\",\"SMTP服务器协议状态机。\"]},\"130\":{\"h\":\"嵌入式脚本语言\",\"t\":[\"包\",\"说明\",\"anko\",\"用Go语言编写的可编写脚本的解释器。\",\"binder\",\"转到基于gopher-lua的 Lua绑定库。\",\"cel-go\",\"具有渐进式输入功能的快速，便携式，非图灵完整表达评估。\",\"expr\",\"可以评估表达式的引擎。\",\"gentee\",\"可嵌入的脚本编程语言。\",\"gisp\",\"Go中的简单LISP。\",\"go-duktape\",\"Go的Duktape JavaScript引擎绑定。\",\"go-lua\",\"Lua 5.2 VM到纯Go的端口。\",\"go-php\",\"Go的PHP绑定。\",\"go-python\",\"与CPython C-API的幼稚go绑定。\",\"golua\",\"Lua C API的绑定。\",\"gopher-lua\",\"用Go编写的Lua 5.1 VM和编译器。\",\"gval\",\"用Go编写的高度可定制的表达语言。\",\"ngaro\",\"可嵌入的Ngaro VM实现，支持在Retro中编写脚本。\",\"otto\",\"用Go编写的JavaScript解释器。\",\"purl\",\"Go中嵌入的Perl 5.18.2。\",\"tengo\",\"用于Go的字节码编译脚本语言。\"]},\"131\":{\"h\":\"错误处理\",\"t\":[\"包\",\"说明\",\"emperror\",\"Go库和应用程序的错误处理工具和最佳实践。\",\"errlog\",\"可破解的软件包，用于确定错误的负责任的源代码（以及其他一些快速调试功能）。可插入任何现成的记录器。\",\"errors\",\"下拉更换为标准库的错误包和github.com/pkg/errors。提供各种错误处理原语。\",\"errors\",\"提供简单错误处理原语的软件包。\",\"errors\",\"简单golang错误处理与分类元。\",\"errorx\",\"具有堆栈跟踪，错误组成等的功能丰富的错误包。\",\"Falcon\",\"一个简单但功能强大的错误处理软件包。\",\"go-multierror\",\"Go（golang）软件包，用于将错误列表表示为单个错误。\",\"tracerr\",\"带有堆栈跟踪和源代码片段的Golang错误。\",\"werr\",\"错误包装程序为Go中的错误类型创建了一个包装程序，该包装程序捕获了调用它的文件，行和堆栈。\"]},\"132\":{\"h\":\"文件\",\"t\":[\"包\",\"说明\",\"afero\",\"Go的文件系统抽象系统。\",\"afs\",\"Go的抽象文件存储（mem，scp，zip，tar，云：s3，gs）。\",\"bigfile\",\"文件传输系统，支持使用http api，rpc调用和ftp客户端管理文件。\",\"checksum\",\"计算大型文件的消息摘要，例如MD5和SHA256。\",\"flop\",\"文件操作库，旨在与GNU cp镜像功能奇偶校验。\",\"go-csv-tag\",\"tag-使用标签加载csv文件。\",\"go-decent-copy\",\"复制human文件。\",\"go-exiftool\",\"ExifTool的Go绑定，这是众所周知的库，用于从文件（图片，PDF，office，...）提取尽可能多的元数据（EXIF，IPTC等）。\",\"go-gtfs\",\"在go中加载gtfs文件。\",\"notify\",\"具有简单API的文件系统事件通知库，类似于os / signal。\",\"opc\",\"为Go加载Open Packaging Conventions（OPC）文件。\",\"parquet\",\"读取和写入 parquet文件。\",\"pdfcpu\",\"PDF 处理器。\",\"skywalker\",\"一种软件包，允许一个人轻松地同时通过文件系统。\",\"stl\",\"读取和写入STL（立体光刻）文件的模块。并发读取算法。\",\"tarfs\",\"tar文件FileSystem interface接口的实现。\",\"vfs\",\"跨多种文件系统类型（例如os，S3和GCS）的Go的一组可插拔，可扩展且自以为是的文件系统功能。\"]},\"133\":{\"h\":\"金融\",\"t\":[\"包\",\"说明\",\"accounting\",\"golang的货币和货币格式。\",\"currency\",\"高性能和准确的货币计算包。\",\"decimal\",\"任意精度定点十进制数字。\",\"go-finance\",\"Go中的综合金融市场数据。\",\"go-finance\",\"金融功能库，用于货币时间价值（年金），现金流量，利率转换，债券和折旧计算。\",\"go-finance\",\"获取汇率，通过VIES检查增值税号和检查IBAN银行帐号的模块。\",\"go-money\",\"Fowler的Money模式的实现。\",\"ofxgo\",\"查询OFX服务器和/或解析响应（使用示例命令行客户端）。\",\"orderbook\",\"匹配引擎的限价订单在Golang。\",\"techan\",\"具有高级市场分析和交易策略的技术分析库。\",\"transaction\",\"以多线程模式运行的嵌入式帐户嵌入式事务数据库。\",\"vat\",\"增值税号验证和欧盟增值税率。\"]},\"134\":{\"h\":\"游戏开发\",\"t\":[\"包\",\"说明\",\"Azul3D\",\"用Go语言编写的3D游戏引擎。\",\"Ebiten\",\"Go中死的简单2D游戏库。\",\"engo\",\"Engo是用Go语言编写的开源2D游戏引擎。它遵循实体组件系统范式。\",\"g3n\",\"Go 3D游戏引擎。\",\"GarageEngine\",\"用Go语言编写的2D游戏引擎，可在OpenGL上使用。\",\"glop\",\"Glop（权力游戏库）是一个相当简单的跨平台游戏库。\",\"go-astar\",\"A 路径查找算法的Go实现。\",\"go-collada\",\"Go包，用于Collada文件格式。\",\"go-sdl2\",\"Simple DirectMedia Layer的 Go绑定。\",\"go3d\",\"用于Go的面向性能的2D/3D数学软件包。\",\"gonet\",\"使用golang实现的游戏服务器框架。\",\"goworld\",\"可扩展的游戏服务器引擎，具有空间实体框架和热插拔功能。\",\"Leaf\",\"轻量级游戏服务器框架。\",\"nano\",\"重量轻，设备，高性能的基于golang游戏服务器架构。\",\"Oak\",\"Pure Go游戏引擎。\",\"Pitaya\",\"可扩展的游戏服务器框架，具有群集支持和通过C SDK的iOS，Android，Unity等客户端库。\",\"Pixel\",\"Go中的手工制作2D游戏库。\",\"raylib-go\",\"去绑定raylib，简单和易于使用的库，以了解电子游戏编程。\",\"termloop\",\"Go的基于终端的游戏引擎，建立在Termbox之上。\"]},\"135\":{\"h\":\"地理位置\",\"t\":[\"包\",\"说明\",\"geocache\",\"适用于基于地理位置的应用程序的内存中缓存。\",\"geoserver\",\"geoserver是Go软件包，用于通过GeoServer REST API操纵GeoServer实例。\",\"gismanager\",\"将 GIS数据（矢量数据）发布到PostGIS和Geoserver。\",\"osm\",\"用于读取，编写和使用OpenStreetMap数据和API的库。\",\"pbf\",\"OpenStreetMap PBF golang编码器/解码器。\",\"S2 geometry\",\"Go中的S2几何库。\",\"Tile38\",\"具有空间索引和实时地理围栏的地理位置数据库。\",\"WGS84\",\"库坐标转换和变换（ETRS89，OSGB36，NAD83，RGF93，网络墨卡托UTM）。\"]},\"136\":{\"h\":\"编译器\",\"t\":[\"包\",\"说明\",\"c4go\",\"将C代码转换为Go代码。\",\"f4go\",\"将FORTRAN 77代码转换为Go代码。\",\"gopherjs\",\"从Go到JavaScript的编译器。\",\"llgo\",\"Go的基于LLVM的编译器。\",\"tardisgo\",\"Golang转换为CPP / CSharp / Java / JavaScript转译器。\"]},\"137\":{\"h\":\"Goroutines\",\"t\":[\"包\",\"说明\",\"ants\",\"用于golang的高性能goroutine池。\",\"artifex\",\"Golang使用基于工作程序的分派的简单内存中作业队列。\",\"async\",\"一种异步执行功能的安全方法，以防万一。\",\"breaker\",\"使执行流程可中断的灵活机制。\",\"cyclicbarrier\",\"用于golang的CyclicBarrier。\",\"go-floc\",\"轻松编排goroutine。\",\"go-flow\",\"控制goroutine的执行顺序。\",\"go-tools/multithreading\",\"使用带有简单API的轻量级库管理goroutine池。\",\"go-trylock\",\"支持Golang的读写锁的TryLock。\",\"go-waitgroup\",\"sync.WaitGroup与错误处理和并发控制类似。\",\"gohive\",\"Go的高性能和易于使用的Goroutine池。\",\"gollback\",\"异步简单函数实用程序，用于管理闭包和回调的执行。\",\"GoSlaves\",\"简单和异步Goroutine池库。\",\"goworker\",\"goworker是基于Go的后台工作者。\",\"gowp\",\"gowp是并发限制goroutine池。\",\"gpool\",\"管理可调整大小的上下文感知goroutine池以绑定并发。\",\"grpool\",\"轻巧的Goroutine池。\",\"Hunch\",\"预感提供功能，如：All，First，Retry，Waterfall等等，这使得异步流控制更加直观。\",\"oversight\",\"监督是Erlang监督树的完整实现。\",\"parallel-fn\",\"并行运行功能。\",\"pool\",\"有限的消费者goroutine池或无限制的goroutine池，以便更轻松地处理和取消goroutine。\",\"queue\",\"为您提供sync.WaitGroup类似的队列组可访问性。帮助您节流和限制goroutine，等待所有goroutine结束等等。\",\"routine\",\"具有上下文和支持的例程控制：Main，Go，Pool和一些有用的Executors。\",\"semaphore\",\"基于通道和上下文的具有锁定/解锁操作超时的信号量模式实现。\",\"semaphore\",\"基于CAS的快速可调整大小的信号量实现（比基于通道的信号量实现更快）。\",\"stl\",\"基于软件交易内存（STM）并发控制机制的软件交易锁。\",\"threadpool\",\"Golang线程池实现。\",\"tunny\",\"线程池golang。\",\"worker-pool\",\"goworker是一个简单的Go异步工作池。\",\"workerpool\",\"Goroutine池，它限制了任务执行的并发性，而不是排队的任务数。\"]},\"138\":{\"h\":\"图形界面\",\"t\":[\"包\",\"说明\",\"app\",\"打包以使用GO，HTML和CSS创建应用的程序。支持：MacOS，Windows正在开发中。\",\"fyne\",\"为Go设计的跨平台本机GUI，使用EFL呈现。支持：Linux，macOS，Windows。\",\"go-astilectron\",\"使用GO和HTML / JS / CSS（由Electron支持）构建跨平台GUI应用。\",\"go-gtk\",\"GTK的绑定。\",\"go-sciter\",\"Go绑定：用于现代桌面UI开发的可嵌入HTML / CSS / script引擎。跨平台。\",\"gotk3\",\"GTK3的绑定。\",\"gowd\",\"使用GO，HTML，CSS和NW.js进行快速简单的桌面UI开发。跨平台。\",\"qt\",\"Go的Qt绑定（支持Windows / macOS / Linux / Android / iOS / Sailfish OS / Raspberry Pi）。\",\"ui\",\"Go的平台本地GUI库。跨平台。\",\"Wails\",\"使用内置OS HTML渲染器的HTML UI的Mac，Windows，Linux桌面应用程序。\",\"walk\",\"Go的Windows应用程序库工具包。\",\"webview\",\"具有简单双向JavaScript绑定的跨平台Webview窗口（Windows / macOS / Linux）。\",\"go-appindicator\",\"libappindicator3 C库的Go绑定。\",\"gosx-notifier\",\"Go的OSX桌面通知库。\",\"mac-activity-tracker\",\"OSX库，用于通知计算机上的任何（可插入）活动。\",\"mac-sleep-notifier\",\"golang中的OSX睡眠/唤醒通知。\",\"robotgo\",\"Go本机跨平台GUI系统自动化。控制鼠标，键盘等。\",\"systray\",\"跨平台的Go库，用于在通知区域中放置图标和菜单。\",\"trayhost\",\"跨平台的Go库，用于在主机操作系统的任务栏中放置一个图标。\"]},\"139\":{\"h\":\"图片\",\"t\":[\"包\",\"说明\",\"bild\",\"纯Go中图像处理算法的集合。\",\"bimg\",\"使用libvips进行快速有效的图像处理的小包装。\",\"cameron\",\"Go的头像生成器。\",\"canvas\",\"将矢量图形转换为PDF，SVG或光栅图像。\",\"darkroom\",\"具有可变存储后端的图像代理和侧重于速度和弹性的图像处理引擎。\",\"geopattern\",\"从字符串创建漂亮的生成图像图案。\",\"gg\",\"纯Go中的2D渲染。\",\"gift\",\"图像处理过滤器的包装。\",\"gltf\",\"高效，强大的glTF 2.0读取器，写入器和验证器。\",\"go-cairo\",\"用于cairo图形库的绑定。\",\"go-gd\",\"GD库的Go绑定。\",\"go-nude\",\"Go的裸露检测。\",\"go-opencv\",\"用于OpenCV的绑定。\",\"go-webcolors\",\"webcolors库的端口，从Python到Go。\",\"gocv\",\"使用OpenCV 3.3+进行计算机视觉的Go软件包。\",\"goimagehash\",\"Go感知图像哈希包。\",\"goimghdr\",\"imghdr模块确定Go文件中包含的图像类型。\",\"govatar\",\"用于生成有趣头像的库和CMD工具。\",\"image2ascii\",\"将图像转换为ASCII。\",\"imagick\",\"绑定到ImageMagick的MagickWand C API。\",\"imaginary\",\"用于图像大小调整的快速，简单的HTTP微服务。\",\"imaging\",\"简单的Go图像处理包。\",\"img\",\"选择图像处理工具。\",\"ln\",\"Go中的3D线条艺术渲染。\",\"mergi\",\"用于图像处理（合并，裁切，调整大小，水印，动画）的Tool＆Go库。\",\"mort\",\"用Go编写的存储和图像处理服务器。\",\"mpo\",\"用于MPO 3D照片的解码器和转换工具。\",\"picfit\",\"用Go编写的图像大小调整服务器。\",\"pt\",\"用Go语言编写的路径跟踪引擎。\",\"resize\",\"使用常见的插值方法为Go 调整图像大小。\",\"rez\",\"在纯Go和SIMD中调整图像大小。\",\"smartcrop\",\"查找适合任何图像和尺寸的优质作物。\",\"steganography\",\"用于LSB隐写术的Pure Go库。\",\"stegify\",\"用于LSB隐写术的Go工具，能够隐藏图像中的任何文件。\",\"svgo\",\"用于SVG生成的Go语言库。\",\"tga\",\"软件包tga是TARGA图像格式的解码器/编码器。\"]},\"140\":{\"h\":\"物联网\",\"t\":[\"包\",\"说明\",\"connectordb\",\"量化自我和物联网的开源平台。\",\"devices\",\"IoT设备库套件，针对x / exp / io进行实验。\",\"eywa\",\"Project Eywa本质上是一个连接管理器，用于跟踪连接的设备。\",\"flogo\",\"Project Flogo是一个用于IoT Edge应用和集成的开源框架。\",\"gatt\",\"盖特是一个围棋包构建低功耗蓝牙外设。\",\"gobot\",\"Gobot是机器人技术，物理计算和物联网的框架。\",\"huego\",\"适用于Go的飞利浦Hue扩展客户端库。\",\"iot\",\"IoT是用于实现Google IoT Core设备的简单框架。\",\"mainflux\",\"工业物联网消息和设备管理服务器。\",\"periph\",\"外设I / O与低级别的主板设备接口。\",\"sensorbee\",\"用于物联网的轻量级流处理引擎。\"]},\"141\":{\"h\":\"JSON格式\",\"t\":[\"包\",\"说明\",\"ajson\",\"具有JSONPath支持的golang的抽象JSON。\",\"gjo\",\"用于创建JSON对象的小型实用程序。\",\"GJSON\",\"使用一行代码获取JSON值。\",\"go-jsonerror\",\"Go-JsonError可让我们轻松创建遵循JsonApi规范的json响应错误。\",\"go-respond\",\"Go包，用于处理常见的HTTP JSON响应。\",\"gojq\",\"Golang中的 JSON查询。\",\"gojson\",\"从示例JSON自动生成Go（golang）结构定义。\",\"JayDiff\",\"用Go编写的JSON diff实用程序。\",\"jettison\",\"用于Go的高性能，无反射JSON编码器。\",\"JSON-to-Go\",\"将JSON转换为Go结构。\",\"json2go\",\"高级JSON到Go结构转换。提供可以解析多个JSON文档并创建适合所有JSON的结构的包。\",\"jsonapi-errors\",\"根据JSON API错误参考进行绑定。\",\"jsonf\",\"突出显示格式和获取JSON的结构查询的控制台工具。\",\"jsongo\",\"Fluent API，可以更轻松地创建Json对象。\",\"jsonhal\",\"简单的Go包，用于将自定义结构编组为HAL兼容的JSON响应。\",\"kazaam\",\"用于JSON文档的任意转换的API。\",\"mp\",\"简单的cli电子邮件解析器。当前，它使用标准输入并输出JSON。\"]},\"142\":{\"h\":\"机器学习\",\"t\":[\"包\",\"说明\",\"bayesian\",\"贝叶斯分类为Golang天真。\",\"CloudForest\",\"快速，灵活，多线程的决策树集合，用于纯Go中的机器学习。\",\"eaopt\",\"进化优化库。\",\"evoli\",\"遗传算法和粒子群优化库。\",\"fonet\",\"用Go编写的深度神经网络库。\",\"go-cluster\",\"k模式和k-原型聚类算法的Go实现。\",\"go-deep\",\"Go中功能丰富的神经网络库\",\"go-fann\",\"快速人工神经网络（FANN）库的Go绑定。\",\"go-galib\",\"用Go / golang编写的遗传算法库。\",\"go-pr\",\"Go lang中的模式识别包。\",\"gobrain\",\"用go语言编写的神经网络\",\"godist\",\"各种概率分布及相关方法。\",\"goga\",\"Go的遗传算法库。\",\"GoLearn\",\"用于Go的通用机器学习库。\",\"golinear\",\"Go的liblinear绑定。\",\"GoMind\",\"Go中的简单神经网络库。\",\"goml\",\"Go中的在线机器学习。\",\"Goptuna\",\"用于Go语言编写的黑盒函数的贝叶斯优化框架。一切都会被优化。\",\"goRecommend\",\"用Go编写的推荐算法库。\",\"gorgonia\",\"基于图形的计算库，例如Theano for Go，它提供了用于构建各种机器学习和神经网络算法的原语。\",\"gorse\",\"基于Go编写的协作过滤的离线推荐系统后端。\",\"goscore\",\"用于PMML的Go Scoring API。\",\"gosseract\",\"使用Tesseract C ++库的OCR（光学字符识别）软件包。\",\"libsvm\",\"基于LIBSVM 3.14 libsvm的golang版本衍生作品。\",\"neat\",\"用于增强拓扑神经演化（NEAT）的即插即用，并行Go框架。\",\"neural-go\",\"go-在Go中实现的多层感知器网络，通过反向传播进行训练。\",\"ocrserver\",\"一个简单的OCR API服务器，非常容易被Docker和Heroku部署。\",\"onnx-go\",\"转到开放神经网络交换（ONNX）的接口。\",\"probab\",\"概率分布函数。贝叶斯推断。用纯Go语言编写。\",\"regommend\",\"建议和协作过滤引擎。\",\"shield\",\"贝叶斯文本分类器，具有灵活的标记器和Go的存储后端。\",\"tfgo\",\"易于使用的Tensorflow绑定：简化了官方Tensorflow Go绑定的使用。在Go中定义计算图，加载并执行经过Python训练的模型。\",\"Varis\",\"Golang神经网络。\"]},\"143\":{\"h\":\"金融\",\"t\":[\"包\",\"说明\",\"unioffice\",\"Pure Go库，用于创建和处理Office Word（.docx），Excel（.xlsx）和Powerpoint（.pptx）文档。\",\"excelize\",\"Golang库用于读取和写入Microsoft Excel™（XLSX）文件。\",\"go-excel\",\"一个简单而轻便的阅读器，可以将类似于related-db的excel读取为表格。\",\"goxlsxwriter\",\"libxlsxwriter的Golang绑定，用于编写XLSX（Microsoft Excel）文件。\",\"xlsx\",\"用于简化在Go程序中读取Microsoft Excel最新版本使用的XML格式的库。\",\"xlsx\",\"在Go程序中快速/安全地读取/更新您现有的Microsoft Excel文件的方法。\"]},\"144\":{\"h\":\"自然语言处理\",\"t\":[\"包\",\"说明\",\"getlang\",\"快速自然语言检测程序包。\",\"go-i18n\",\"用于处理本地化文本的软件包和一个随附工具。\",\"go-mystem\",\"CGo与Yandex.Mystem的绑定-俄罗斯形态分析仪。\",\"go-nlp\",\"用于处理离散概率分布的实用程序和其他可用于执行NLP工作的工具。\",\"go-pinyin\",\"CN Hanzi至Hanyu拼音转换器。\",\"go-stem\",\"搬运程序阻止算法的实现。\",\"go-unidecode\",\"Unicode文本的ASCII音译。\",\"go2vec\",\"用于word2vec嵌入的阅读器和实用程序功能。\",\"gojieba\",\"这是一个围棋实施解霸其中中国分词算法。\",\"golibstemmer\",\"雪球库libstemmer库的绑定，包括porter 2。\",\"gotokenizer\",\"基于字典和Goram语言的Bigram语言模型的标记器。（现在仅支持中文细分）\",\"gounidecode\",\"Go的Unicode音译器（也称为unidecode）。\",\"gse\",\"进行有效的文本分割；支持英语，中文，日语等。\",\"icu\",\"CGO结合为ICU4C C库检测和转换功能。保证与版本50.1兼容。\",\"kagome\",\"用纯Go语言编写的JP形态分析仪。\",\"libtextcat\",\"libtextcat C库的Cgo绑定。保证与2.2版兼容。\",\"MMSEGO\",\"这是MMSEG的GO实现，它是中文分词算法。\",\"nlp\",\"从字符串中提取值，并用nlp填充您的结构。\",\"nlp\",\"支持LSA（潜在语义分析）的自然语言处理库。\",\"paicehusk\",\"Paice / Husk提取算法的Golang实现。\",\"petrovich\",\"彼得罗维奇（Petrovich）是库，在给定的语法情况下使用俄语名称。\",\"porter\",\"这是Martin Porter的Porter干算法的C实现的相当简单的移植。\",\"porter2\",\"非常快的Porter 2 提取器。\",\"prose\",\"用于文本处理的库，支持标记化，词性标记，命名实体提取等。仅限英语。\",\"RAKE.go\",\"快速自动关键字提取算法（RAKE）的Go端口。\",\"segment\",\"用于执行Unicode标准附件＃29中所述的Unicode文本分段的Go库\",\"sentences\",\"句子标记器：将文本转换为句子列表。\",\"shamoji\",\"shamoji是用Go编写的单词过滤程序包。\",\"snowball\",\"Go的雪球茎端口（cgo包装器）。提供单词词干提取功能Snowball本机。\",\"stemmer\",\"用于Go编程语言的Stemmer软件包。包括英语和德语词干。\",\"textcat\",\"Go软件包，用于基于n-gram的文本分类，并支持utf-8和原始文本。\",\"whatlanggo\",\"Go的自然语言检测程序包。支持84种语言和24种脚本（书写系统，例如拉丁语，西里尔字母等）。\",\"when\",\"自然EN和RU语言日期/时间分析器具有可插拔的规则。\"]},\"145\":{\"h\":\"网络\",\"t\":[\"包\",\"说明\",\"arp\",\"包arp实现ARP协议，如RFC 826中所述。\",\"buffstreams\",\"通过TCP流化协议缓冲区数据变得容易。\",\"canopus\",\"CoAP客户端/服务器实施（RFC 7252）。\",\"cidranger\",\"Go的快速IP到CIDR查找。\",\"dhcp6\",\"软件包dhcp6实现了DHCPv6服务器，如RFC 3315中所述。\",\"dns\",\"使用DNS的Go库。\",\"ether\",\"用于发送和接收以太网帧的跨平台Go软件包。\",\"ethernet\",\"程序包ethernet实施IEEE 802.3以太网II帧和IEEE 802.1Q VLAN标签的封送处理。\",\"fasthttp\",\"软件包fasthttp是Go的一种快速HTTP实现，比net / http快10倍。\",\"fortio\",\"负载测试库和命令行工具，高级回显服务器和Web UI。允许指定设置的每秒查询负载，并记录延迟直方图和其他有用的统计数据并对其进行图形化。Tcp，Http，gRPC。\",\"ftp\",\"程序包ftp实现RFC 959中所述的FTP客户端。\",\"gev\",\"gev是基于Reactor模式的轻量级，快速，无阻塞的TCP网络库。\",\"gmqtt\",\"Gmqtt是一个灵活的高性能MQTT代理库，它完全实现了MQTT协议V3.1.1。\",\"gnet\",\"gnet是一个高性能的，用纯围棋轻便，非阻塞，事件循环网络库。\",\"gNxI\",\"使用gNMI和gNOI协议的网络管理工具的集合。\",\"go-getter\",\"Go库，用于使用URL从各种来源下载文件或目录。\",\"go-powerdns\",\"Golang的 PowerDNS API绑定。\",\"go-stun\",\"STUN客户端的Go实现（RFC 3489和RFC 5389）。\",\"gobgp\",\"使用Go编程语言实现的BGP。\",\"golibwireshark\",\"软件包golibwireshark使用libwireshark库来解码pcap文件并分析解剖数据。\",\"gopacket\",\"Go库，用于使用libpcap绑定进行数据包处理。\",\"gopcap\",\"libpcap的包装器。\",\"goshark\",\"软件包goshark使用tshark解码IP数据包并创建数据结构以分析数据包。\",\"gosnmp\",\"用于执行SNMP操作的本机Go库。\",\"gosocsvr\",\"套接字服务器变得简单。\",\"gotcp\",\"用于快速编写tcp应用程序的Go软件包。\",\"grab\",\"用于管理文件下载的软件包。\",\"graval\",\"实验性FTP服务器框架。\",\"HTTPLab\",\"HTTPLabs可让您检查HTTP请求并伪造响应。\",\"iplib\",\"受python ipaddress和ruby ipaddr启发而使用IP地址（net.IP，net.IPNet）的库\",\"jazigo\",\"Jazigo是用Go语言编写的工具，用于检索多个网络设备的配置。\",\"kcp-go\",\"KCP-快速可靠的ARQ协议。\",\"kcptun\",\"基于KCP协议的极其简单和快速的udp隧道。\",\"lhttp\",\"强大的websocket框架，可更轻松地构建IM服务器。\",\"linkio\",\"用于读取器/写入器接口的网络链接速度模拟。\",\"llb\",\"这是代理服务器的非常简单但快速的后端。对于零内存分配和快速响应的快速重定向到预定义域很有用。\",\"mdns\",\"Golang中的简单mDNS（多播DNS）客户端/服务器库。\",\"mqttPaho\",\"Paho Go客户端提供了一个MQTT客户端库，用于通过TCP，TLS或WebSockets连接到MQTT代理。\",\"NFF-Go\",\"用于快速开发云和裸机（以前的YANFF）的高性能网络功能的框架。\",\"packet\",\"通过TCP和UDP发送数据包。如果需要，它可以缓冲消息和热交换连接。\",\"peerdiscovery\",\"Pure Go库，用于使用UDP多播的跨平台本地对等发现。\",\"portproxy\",\"简单的TCP代理，它将不支持它的API添加到CORS支持中。\",\"publicip\",\"软件包publicip返回您的面向公众的IPv4地址（互联网出口）。\",\"quic-go\",\"在纯Go中实现QUIC协议。\",\"raw\",\"包raw允许在设备驱动程序级别为网络接口读取和写入数据。\",\"sftp\",\"程序包sftp实现SSH文件传输协议，如https://filezilla-project.org/specs/draft-ietf-secsh-filexfer-02.txt\",\"ssh\",\"用于构建SSH服务器的高级API（包装crypto / ssh）。\",\"sslb\",\"这是一个超级简单的负载均衡器，只是一个实现某种性能的小项目。\",\"stun\",\"实施RFC 5389 STUN协议。\",\"tcp_server\",\"用于更快地构建tcp服务器的Go库。\",\"tspool\",\"TCP库使用工作池来提高性能并保护您的服务器。\",\"utp\",\"围棋UTP微传输协议的实现。\",\"water\",\"简单的TUN / TAP库。\",\"webrtc\",\"WebRTC API的纯Go实现。\",\"winrm\",\"进入WinRM客户端以在Windows计算机上远程执行命令。\",\"xtcp\",\"具有同步全双工通信，安全关闭，自定义协议的TCP Server Framework。\"]},\"146\":{\"h\":\"视频库\",\"t\":[\"包\",\"说明\",\"go-astisub\",\"在GO中处理字幕（.srt，.stl，.ttml，.webvtt，.ssa / .ass，图文电视，.smi等）。\",\"go-astits\",\"在GO中本地解析和解复用MPEG传输流（.ts）。\",\"go-m3u8\",\"Apple m3u8播放列表的解析器和生成器库。\",\"goav\",\"FFmpeg的综合Go绑定。\",\"gst\",\"GStreamer的绑定。\",\"libgosubs\",\"go的字幕格式支持。支持.srt，.ttml和.ass。\",\"libvlc-go\",\"libvlc 2.X / 3.X / 4.X的绑定（由VLC媒体播放器使用）。\",\"m3u8\",\"Apple HLS的M3U8播放列表的解析器和生成器库。\",\"v4l\",\"用Go编写的Linux视频捕获库。\"]},\"147\":{\"c\":[\"golang\"]},\"148\":{\"h\":\"Go简介\",\"t\":[\"Go（也叫 Golang）是由 Google 开发的开源编程语言，旨在提供一种简单、快速且高效的语言，特别适用于并发编程、云计算、微服务架构以及高性能网络应用。Go 语言的设计强调简洁性和高效性，尤其在处理高并发任务时表现优异。\",\"Go 是一门静态类型、编译型语言，它将现代编程语言中的许多最佳实践（如内存管理、并发性支持）进行了整合，同时去除了许多不必要的复杂性。\"]},\"149\":{\"h\":\"Go 的特点\"},\"150\":{\"h\":\"1.1 简洁的语法\",\"t\":[\"Go 语言的语法设计简洁，易学易用。它摒弃了传统编程语言中的一些冗余和复杂性，例如没有类和继承，也没有头文件（例如 C 语言中的 #include），避免了程序员的复杂操作和管理。Go 强调通过组合来实现代码复用，借助接口和结构体代替传统的类继承机制。\"]},\"151\":{\"h\":\"1.2 高效的并发支持\",\"t\":[\"Go 的并发模型是其最强大的特性之一。Go 提供了原生支持的轻量级线程——goroutine，这些 goroutine 比传统线程更加轻量，启动和销毁的成本低。配合 channels（通道），Go 提供了简洁且高效的方式来进行并发编程，使得并发操作变得更加容易理解和维护。\",\"Goroutine：一种由 Go 运行时管理的轻量级线程，它的创建开销极小。 Channel：一种用于不同 goroutine 之间通信的机制，它可以确保数据交换的安全性。\"]},\"152\":{\"h\":\"1.3 强类型与垃圾回收\",\"t\":[\"Go 是强类型语言，类型是静态检查的，这意味着所有变量的类型在编译时就已经确定。与 C/C++ 不同，Go 有自动垃圾回收机制，不需要程序员手动管理内存，大大减少了内存泄漏和野指针的风险。\"]},\"153\":{\"h\":\"1.4 跨平台支持\",\"t\":[\"Go 是跨平台的，支持包括 Linux、macOS 和 Windows 在内的多种操作系统，并且有丰富的标准库使得编写跨平台的应用变得简单。\"]},\"154\":{\"h\":\"1.5 编译速度快\",\"t\":[\"Go 编译速度非常快，几乎能在几秒钟内完成整个项目的编译，适合大规模开发和快速迭代。\"]},\"155\":{\"h\":\"1.6 内置工具\",\"t\":[\"Go 提供了一套完整的内置工具链，涵盖了代码格式化、文档生成、测试、性能分析等功能。使用 go fmt 可以自动格式化代码，go test 提供了内建的单元测试支持。\"]},\"156\":{\"h\":\"1.7 单一可执行文件\",\"t\":[\"Go 语言的程序编译后通常会生成一个静态链接的单一可执行文件，没有依赖库。这个特性特别适合容器化应用和微服务架构的部署。\"]},\"157\":{\"h\":\"Go 语言的应用场景\",\"t\":[\"Go 语言特别适用于以下场景：\"]},\"158\":{\"h\":\"2.1 网络服务与 Web 开发\",\"t\":[\"Go 天生适合开发高性能的网络服务，尤其是在需要处理大量并发请求的场景中表现出色。Go 具有强大的 net/http 标准库，能够帮助开发者快速构建 Web 服务和 RESTful API。许多知名的 Web 框架（如 Gin、Beego、Echo 等）都建立在 Go 语言的基础上。\"]},\"159\":{\"h\":\"2.2 微服务架构\",\"t\":[\"Go 是构建微服务架构的理想选择，因为它支持高效的并发处理，能够快速处理多个请求，并且由于其编译后的二进制文件小且独立，适合用于容器化和云原生应用。\"]},\"160\":{\"h\":\"2.3 云计算与 DevOps\",\"t\":[\"Go 是云计算的“宠儿”，特别适合构建用于云计算的工具和服务。许多流行的云平台工具（如 Kubernetes、Docker、Prometheus）都是用 Go 语言编写的。\"]},\"161\":{\"h\":\"2.4 系统编程\",\"t\":[\"Go 具备一定的系统编程能力，虽然没有 C 语言那么底层，但其性能仍然非常出色，适用于开发需要高效执行的系统级应用。\"]},\"162\":{\"h\":\"2.5 数据库与大数据处理\",\"t\":[\"Go 也广泛应用于数据库连接、数据查询、数据分析等领域，得益于其良好的并发支持和高性能。\"]},\"163\":{\"h\":\"Go 语言的优点与缺点\"},\"164\":{\"h\":\"3.1 优点\",\"t\":[\"高效的并发模型：通过 goroutine 和 channel 提供了非常简洁且高效的并发支持。 简洁的语法：Go 语言的设计简洁，减少了传统编程语言中许多复杂的特性。 快速编译：Go 的编译速度极快，能够帮助开发者更快速地迭代和开发。 跨平台支持：Go 是跨平台的，能够在不同操作系统上编译和运行。 内存管理：Go 有垃圾回收机制，减少了程序员手动管理内存的负担。 现代化的标准库：Go 拥有丰富的标准库，能简化开发流程，减少外部依赖。\"]},\"165\":{\"h\":\"3.2 缺点\",\"t\":[\"缺少泛型（直到 Go 1.18）：Go 在早期版本中并没有提供泛型功能，虽然在 Go 1.18 引入了泛型，但这个特性相对较新，可能还不被所有开发者广泛接受和使用。 不支持传统的面向对象编程（OOP）：Go 没有类、继承等传统的 OOP 特性，虽然可以通过结构体和接口来模拟 OOP，但这可能对习惯传统 OOP 编程的开发者来说有一定学习曲线。 错误处理机制繁琐：Go 没有异常处理机制，所有的错误都需要通过返回值显式地处理，这种设计虽然避免了程序中断，但可能导致代码冗长。 标准库缺乏 GUI 支持：Go 的标准库主要专注于网络编程、并发、系统工具等，缺乏对图形用户界面（GUI）应用的原生支持。\"]},\"166\":{\"h\":\"Go 的生态和社区\",\"t\":[\"Go 的生态系统非常活跃，许多知名的开源项目和工具都采用了 Go 语言，如：\",\"Docker：容器化平台，用于构建、分发和运行容器化应用。\",\"Kubernetes：开源的容器编排平台，用于自动化部署、扩展和管理容器化应用。\",\"Prometheus：开源的监控和报警工具，专注于时序数据的收集与处理。\",\"Go Modules：Go 官方推出的依赖管理工具，简化了包管理。\",\"Go 社区也非常活跃，全球有大量开发者参与其中，提供文档、教程、工具和库。\"]},\"167\":{\"h\":\"Go 与其他语言的比较\"},\"168\":{\"h\":\"5.1 与 C/C++ 比较\",\"t\":[\"Go 比 C/C++ 更易学易用，语法简洁，不需要手动内存管理。\",\"Go 具有自动垃圾回收机制，而 C/C++ 需要开发者手动管理内存。\",\"Go 的并发支持比 C/C++ 更加简洁和高效。\",\"Go 不支持指针算术操作，这是为了避免内存安全问题。\"]},\"169\":{\"h\":\"5.2 与 Python 比较\",\"t\":[\"Go 是编译型语言，具有更好的性能，适用于高并发、高性能的应用，而 Python 是解释型语言，虽然开发速度较快，但在性能上可能不如 Go。\",\"Go 的静态类型系统提供了更强的类型安全，而 Python 是动态类型，虽然灵活，但可能导致运行时错误。\",\"Python 有丰富的第三方库，而 Go 的生态相对较新，虽然在快速增长，但某些特定领域的库可能不如 Python 丰富。\"]},\"170\":{\"h\":\"5.3 与 Java 比较\",\"t\":[\"Go 是静态类型的，编译型语言，而 Java 也是静态类型但是解释型语言。Go 编译后的程序更为高效，启动速度更快。\",\"Go 具有更简洁的语法，消除了 Java 中许多繁琐的代码（如 getter/setter 方法）。\",\"Go 的并发模型非常简洁而高效，而 Java 虽然也有线程和并发支持，但并发编程相对复杂。\",\"总体来说，Go 语言以其简洁、高效、并发友好的特性，逐渐成为现代云计算、微服务、网络编程等领域的主流语言之一。\"]},\"171\":{\"c\":[\"golang\"]},\"172\":{\"h\":\"基本语法\",\"t\":[\"Go的基本语法十分简单易懂，让我们从一个最简单的例子开始。\",\"package main import \\\"fmt\\\" func main() { fmt.Println(\\\"Hello 世界!\\\") }\",\"代码分析：\",\"package关键字声明了是当前go文件属于哪一个包，入口文件都必须声明为main包，入口函数是main函数，在自定义包和函数时命名应当尽量避免与之重复。\",\"import是导入关键字，后面跟着的是被导入的包名。\",\"func是函数声明关键字，用于声明一个函数。\",\"fmt.Println(\\\"Hello 世界!\\\")是一个语句，调用了fmt包下的Println函数进行输出。\",\"以上就是一个简单的语法介绍，下面就来略微细致地去了解里面的概念。\"]},\"173\":{\"h\":\"包\",\"t\":[\"在Go中，程序是通过将包链接在一起来构建的。Go中进行导入的最基本单位是一个包，而不是.go文件。包其实就是一个文件夹，英文名package，包内共享所有变量，常量，以及所有定义的类型。包的命名风格建议都是小写字母，并且要尽量简短。\"]},\"174\":{\"h\":\"可见性\",\"t\":[\"前面提到过包内共享所有变量，常量，以及所有定义的类型，但对于包外而言并不是这样，有时候你并不想让别人访问某一个类型，所以就需要控制可见性。你可能在其它OOP语言中见过Public，Pravite等关键字，不过在Go语言中没有这些，它控制可见性的方式非常简单，规则如下\",\"名称大写字母开头，即为公有类型/变量/常量\",\"名字小写或下划线开头，即为私有类型/变量/常量\",\"比如下面的一个例子，常量MyName就是公开的，而常量mySalary就是私有的。\",\"package example // 公有 const MyName = \\\"jack\\\" // 私有 const mySalary = 20_000\",\"这个可见性的规则适用于整个Go语言的任何地方。\"]},\"175\":{\"h\":\"导入\",\"t\":[\"导入一个包就是导入这个包的所有公有的类型/变量/常量，导入的语法就是import加上包名\",\"package main import \\\"example\\\"\",\"当导入多个包时，你可以这么写\",\"package main import \\\"example\\\" import \\\"example1\\\"\",\"也可以用括号括起来，第二种方法在实践中更加常用。\",\"package main import ( \\\"example\\\" \\\"example1\\\" )\",\"如果有包名重复了，或者包名比较复杂，你也可以给它们起别名\",\"package main import ( e \\\"example\\\" e1 \\\"example1\\\" )\",\"还有另一种特殊的使用方法就是匿名导入包，匿名导入的包无法被使用，这么做通常是为了加载包下的init函数，但又不需要用到包中的类型，例如一个常见的场景就是注册数据库驱动\",\"package main import ( e \\\"example\\\" _ \\\"mysql-driver\\\" )\",\"当你导入后，想要访问包中的类型时，通过名称.标识符去访问即可，比如下面这个例子\",\"package main import ( \\\"example\\\" \\\"fmt\\\" ) func main() { fmt.Println(example.MyName) }\",\"若你尝试去访问一个私有的类型，编译器就会告诉你无法访问。\",\"注意\",\"Go中无法进行循环导入，不管是直接的还是间接的。例如包A导入了包B，包B也导入了包A，这是直接循环导入，包A导入了包C，包C导入了包B，包B又导入了包A，这就是间接的循环导入，存在循环导入的话将会无法通过编译。\"]},\"176\":{\"h\":\"内部包\",\"t\":[\"go中约定，一个包内名为internal 包为内部包，外部包将无法访问内部包中的任何内容，否则的话编译不通过，下面看一个例子。\",\"/home/user/go/ src/ crash/ bang/ (go code in package bang) b.go foo/ (go code in package foo) f.go bar/ (go code in package bar) x.go internal/ baz/ (go code in package baz) z.go quux/ (go code in package main) y.go\",\"由文件结构中可知，crash包无法访问baz包中的类型。\"]},\"177\":{\"h\":\"注释\",\"t\":[\"Go支持单行注释和多行注释，注释与内容之间建议隔一个空格，例如\",\"// 这是main包 package main // 导入了fmt包 import \\\"fmt\\\" /* * 这是启动函数main函数 */ func main() { // 这是一个语句 fmt.Println(\\\"Hello 世界!\\\") }\"]},\"178\":{\"h\":\"标识符\",\"t\":[\"标识符就是一个名称，用于包命名，函数命名，变量命名等等，命名规则如下：\",\"只能由字母，数字，下划线组成\",\"只能以字母和下划线开头\",\"严格区分大小写\",\"不能与任何已存在的标识符重复，即包内唯一的存在\",\"不能与Go任何内置的关键字冲突\",\"下方列出所有的内置关键字，也可以前往参考手册-标识符查看更多细节\",\"break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var\"]},\"179\":{\"h\":\"运算符\",\"t\":[\"下面是Go语言中支持的运算符号的优先级排列，也可以前往参考手册-运算符查看更多细节。\",\"Precedence Operator 5 * / % << >> & &^ 4 + - | ^ 3 == != < <= > >= 2 && 1 ||\",\"有一点需要稍微注意下，go语言中没有选择将~作为取反运算符，而是复用了^符号，当两个数字使用^时，例如a^b，它就是异或运算符，只对一个数字使用时，例如^a，那么它就是取反运算符。go也支持增强赋值运算符，如下。\",\"a += 1 a /= 2 a &^= 2\",\"提示\",\"Go语言中没有自增与自减运算符，它们被降级为了语句statement，并且规定了只能位于操作数的后方，所以不用再去纠结i++和++i这样的问题。\",\"a++ // 正确 ++a // 错误 a-- // 正确\",\"还有一点就是，它们不再具有返回值，因此a = b++这类语句的写法是错误的。\"]},\"180\":{\"h\":\"字面量\",\"t\":[\"字面量，按照计算机科学的术语来讲是用于表达源代码中一个固定值的符号，也叫字面值。两个叫法都是一个意思，写了什么东西，值就是什么，值就是“字面意义上“的值。\"]},\"181\":{\"h\":\"整型字面量\",\"t\":[\"为了便于阅读，允许使用下划线_来进行数字划分，但是仅允许在前缀符号之后和数字之间使用。\",\"24 // 24 024 // 24 2_4 // 24 0_2_4 // 24 10_000 // 10k 100_000 // 100k 0O24 // 20 0b00 // 0 0x00 // 0 0x0_0 // 0\"]},\"182\":{\"h\":\"浮点数字面量\",\"t\":[\"通过不同的前缀可以表达不同进制的浮点数\",\"0. 72.40 072.40 // == 72.40 2.71828 1.e+0 6.67428e-11 1E6 .25 .12345E+5 1_5. // == 15.0 0.15e+0_2 // == 15.0 0x1p-2 // == 0.25 0x2.p10 // == 2048.0 0x1.Fp+0 // == 1.9375 0X.8p-0 // == 0.5 0X_1FFFP-16 // == 0.1249847412109375 0x15e-2 // == 0x15e - 2 (integer subtraction)\"]},\"183\":{\"h\":\"复数字面量\",\"t\":[\"0i 0123i // == 123i 0o123i // == 0o123 * 1i == 83i 0xabci // == 0xabc * 1i == 2748i 0.i 2.71828i 1.e+0i 6.67428e-11i 1E6i .25i .12345E+5i 0x1p-2i // == 0x1p-2 * 1i == 0.25i\"]},\"184\":{\"h\":\"字符字面量\",\"t\":[\"字符字面量必须使用单引号括起来''，Go中的字符完全兼容utf8。\",\"'a' 'ä' '你' '\\\\t' '\\\\000' '\\\\007' '\\\\377' '\\\\x07' '\\\\xff' '\\\\u12e4' '\\\\U00101234'\"]},\"185\":{\"h\":\"转义字符\",\"t\":[\"Go中可用的转义字符\",\"\\\\a U+0007 响铃符号 \\\\b U+0008 回退符号 \\\\f U+000C 换页符号 \\\\n U+000A 换行符号 \\\\r U+000D 回车符号 \\\\t U+0009 横向制表符号 \\\\v U+000B 纵向制表符号 \\\\\\\\ U+005C 反斜杠转义 \\\\' U+0027 单引号转义 (该转义仅在字符内有效) \\\\\\\" U+0022 双引号转义 (该转义仅在字符串内有效)\"]},\"186\":{\"h\":\"字符串字面量\",\"t\":[\"字符串字面量必须使用双引号\\\"\\\"括起来或者反引号（反引号字符串不允许转义）\",\"`abc` // \\\"abc\\\" `\\\\n \\\\n` // \\\"\\\\\\\\n\\\\n\\\\\\\\n\\\" \\\"\\\\n\\\" \\\"\\\\\\\"\\\" // `\\\"` \\\"Hello, world!\\\\n\\\" \\\"今天天气不错\\\" \\\"日本語\\\" \\\"\\\\u65e5本\\\\U00008a9e\\\" \\\"\\\\xff\\\\u00FF\\\"\"]},\"187\":{\"h\":\"函数\",\"t\":[\"Go中的函数声明方式通过func关键字来进行，跟大多数语言类似\",\"func main() { println(1) }\",\"不过Go中的函数有两个不同的点，第一个是参数类型后置，像下面这样\",\"func Hello(name string) { fmt.Println(name) }\",\"第二个不同的点就是多返回值，而且可以带名字\",\"func Pos() () (x, y float64) { ... }\"]},\"188\":{\"h\":\"风格\",\"t\":[\"关于编码风格这一块Go是强制所有人统一同一种风格，Go官方提供了一个格式化工具gofmt，通过命令行就可以使用，该格式化工具没有任何的格式化参数可以传递，仅有的两个参数也只是输出格式化过程，所以完全不支持自定义，也就是说所有通过此工具的格式化后的代码都是同一种代码风格，这会极大的降低维护人员的心智负担，所以在这一块追求个性显然是一个不太明智的选择。\",\"下面会简单列举一些规则，平时在编写代码的时候也可以稍微注意一下。\"]},\"189\":{\"h\":\"函数花括号换行\",\"t\":[\"关于函数后的花括号到底该不该换行，几乎每个程序员都能说出属于自己的理由，在Go中所有的花括号都不应该换行\",\"// 正确示例 func main() { fmt.Println(\\\"Hello 世界!\\\") }\",\"如果你真的这么做了，像下面这样\",\"// 错误示例 func main() { fmt.Println(\\\"Hello 世界!\\\") }\",\"这样的代码连编译都过不了，所以Go强制所有程序员花函数后的括号不换行。\"]},\"190\":{\"h\":\"代码缩进\",\"t\":[\"Go默认使用Tab也就是制表符进行缩进，仅在一些特殊情况会使用空格。\"]},\"191\":{\"h\":\"代码间隔\",\"t\":[\"Go中大部分间隔都是有意义的，从某种程度上来说，这也代表了编译器是如何看待你的代码的，例如下方的数学运算\",\"2*9 + 1/3*2\",\"众所周知，乘法的优先级比加法要高，在格式化后，*符号之间的间隔会显得更紧凑，意味着优先进行运算，而+符号附近的间隔则较大，代表着较后进行运算。\"]},\"192\":{\"h\":\"花括号省略\",\"t\":[\"在其它语言中的if和for语句通常可以简写，像下面这样\",\"for (int i=0; i < 10; i++) printf(\\\"%d\\\", i)\",\"但在Go中不行，你可以只写一行，但必须加上花括号\",\"for i := 0; i < 10; i++ {fmt.Println(i)}\"]},\"193\":{\"h\":\"三元表达式\",\"t\":[\"Go中没有三元表达式，所以像下面的代码是无法通过编译的\",\"var c = a > b ? a : b\"]},\"194\":{\"c\":[\"golang\"]},\"195\":{\"h\":\"数据类型\",\"t\":[\"下面列出Go语言中全部的内置类型，以供参考，更多细节可以前往参考手册-类型。\"]},\"196\":{\"h\":\"布尔类型\",\"t\":[\"布尔类型只有真值和假值。\",\"类型\",\"描述\",\"bool\",\"true为真值，false为假值\",\"提示\",\"在Go中，整数0并不代表假值，非零整数也不能代表真值，即数字无法代替布尔值进行逻辑判断，两者是完全不同的类型。\"]},\"197\":{\"h\":\"整型\",\"t\":[\"Go中为不同位数的整数分配了不同的类型，主要分为无符号整型与有符号整型。\",\"序号\",\"类型和描述\",\"uint8\",\"无符号 8 位整型\",\"uint16\",\"无符号 16 位整型\",\"uint32\",\"无符号 32 位整型\",\"uint64\",\"无符号 64 位整型\",\"int8\",\"有符号 8 位整型\",\"int16\",\"有符号 16 位整型\",\"int32\",\"有符号 32 位整型\",\"int64\",\"有符号 64 位整型\",\"uint\",\"无符号整型 至少32位\",\"int\",\"整型 至少32位\",\"uintptr\",\"等价于无符号64位整型，但是专用于存放指针运算，用于存放死的指针地址。\"]},\"198\":{\"h\":\"浮点型\",\"t\":[\"IEEE-754浮点数，主要分为单精度浮点数与双精度浮点数。\",\"类型\",\"类型和描述\",\"float32\",\"IEEE-754 32位浮点数\",\"float64\",\"IEEE-754 64位浮点数\"]},\"199\":{\"h\":\"复数类型\",\"t\":[\"类型\",\"描述\",\"complex128\",\"64位实数和虚数\",\"complex64\",\"32位实数和虚数\"]},\"200\":{\"h\":\"字符类型\",\"t\":[\"go语言字符串完全兼容UTF-8\",\"类型\",\"描述\",\"byte\",\"等价 uint8 可以表达ANSCII字符\",\"rune\",\"等价 int32 可以表达Unicode字符\",\"string\",\"字符串即字节序列，可以转换为[]byte类型即字节切片\"]},\"201\":{\"h\":\"派生类型\",\"t\":[\"类型\",\"例子\",\"数组\",\"[5]int，长度为5的整型数组\",\"切片\",\"[]float64，64位浮点数切片\",\"映射表\",\"map[string]int，键为字符串类型，值为整型的映射表\",\"结构体\",\"type Gopher struct{}，Gopher结构体\",\"指针\",\"*int，一个整型指针。\",\"函数\",\"type f func()，一个没有参数，没有返回值的函数类型\",\"接口\",\"type Gopher interface{}，Gopher接口\",\"通道\",\"chan int，整型通道\"]},\"202\":{\"h\":\"零值\",\"t\":[\"官方文档中零值称为zero value，零值并不仅仅只是字面上的数字零，而是一个类型的空值或者说默认值更为准确。\",\"类型\",\"零值\",\"数字类型\",\"0\",\"布尔类型\",\"false\",\"字符串类型\",\"\\\"\\\"\",\"数组\",\"固定长度的对应类型的零值集合\",\"结构体\",\"内部字段都是零值的结构体\",\"切片，映射表，函数，接口，通道，指针\",\"nil\"]},\"203\":{\"h\":\"nil\",\"t\":[\"nil类似于其它语言中的none或者null，但并不等同。nil仅仅只是一些引用类型的零值，并且不属于任何类型，从源代码中的nil可以看出它仅仅只是一个变量。\",\"var nil Type\",\"并且nil == nil这样的语句是无法通过编译的。\"]},\"204\":{\"h\":\"变量\",\"t\":[\"变量是用于保存一个值的存储位置，允许其存储的值在运行时动态的变化。每声明一个变量，都会为其分配一块内存以存储对应类型的值，前往参考手册-变量以查看更多细节。\"]},\"205\":{\"h\":\"声明\",\"t\":[\"在go中的类型声明是后置的，变量的声明会用到var关键字，格式为var 变量名 类型名，变量名的命名规则必须遵守标识符的命名规则。\",\"var intNum int var str string var char byte\",\"当要声明多个相同类型的变量时，可以只写一次类型\",\"var numA, numB, numC int\",\"当要声明多个不同类型的变量时，可以使用()进行包裹，可以存在多个()。\",\"var ( name string age int address string ) var ( school string class int )\",\"一个变量如果只是声明而不赋值，那么变量存储的值就是对应类型的零值。\"]},\"206\":{\"h\":\"赋值\",\"t\":[\"赋值会用到运算符=，例如\",\"var name string name = \\\"jack\\\"\",\"也可以声明的时候直接赋值\",\"var name string = \\\"jack\\\"\",\"或者这样也可以\",\"var name string var age int name, age = \\\"jack\\\", 1\",\"第二种方式每次都要指定类型，可以使用官方提供的语法糖：短变量初始化，可以省略掉var关键字和后置类型，具体是什么类型交给编译器自行推断。\",\"name := \\\"jack\\\" // 字符串类型的变量。\",\"虽然可以不用指定类型，但是在后续赋值时，类型必须保持一致，下面这种代码无法通过编译。\",\"a := 1 a = \\\"1\\\"\",\"还需要注意的是，短变量初始化不能使用nil，因为nil不属于任何类型，编译器无法推断其类型。\",\"name := nil // 无法通过编译\",\"短变量声明可以批量初始化\",\"name, age := \\\"jack\\\", 1\",\"短变量声明方式无法对一个已存在的变量使用，比如\",\"// 错误示例 var a int a := 1 // 错误示例 a := 1 a := 2\",\"但是有一种情况除外，那就是在赋值旧变量的同时声明一个新的变量，比如\",\"a := 1 a, b := 2, 2\",\"这种代码是可以通过编译的，变量a被重新赋值，而b是新声明的。\",\"在go语言中，有一个规则，那就是所有在函数中的变量都必须要被使用，比如下面的代码只是声明了变量，但没有使用它\",\"func main() { a := 1 }\",\"那么在编译时就会报错，提示你这个变量声明了但没有使用\",\"a declared and not used\",\"这个规则仅适用于函数内的变量，对于函数外的包级变量则没有这个限制，下面这个代码就可以通过编译。\",\"var a = 1 func main() { }\"]},\"207\":{\"h\":\"匿名\",\"t\":[\"用下划线可以表示不需要某一个变量\",\"Open(name string) (*File, error)\",\"比如os.Open函数有两个返回值，我们只想要第一个，不想要第二个，可以按照下面这样写\",\"file, _ := os.Open(\\\"readme.txt\\\")\",\"未使用的变量是无法通过编译的，当你不需要某一个变量时，就可以使用下划线_代替。\"]},\"208\":{\"h\":\"交换\",\"t\":[\"在Go中，如果想要交换两个变量的值，不需要使用指针，可以使用赋值运算符直接进行交换，语法上看起来非常直观，例子如下\",\"num1, num2 := 25, 36 num1, num2 = num2, num1\",\"三个变量也是同样如此\",\"num1, num2, num3 := 25, 36, 49 num1, num2, num3 = num3, num2, num1\",\"思考下面这一段代码，这是计算斐波那契数列的一小段代码，三个变量在计算后的值分别是什么\",\"a, b, c := 0, 1, 1 a, b, c = b, c, a+b\",\"答案是\",\"1 1 1\",\"你可能会疑惑为什么不是\",\"1 1 2\",\"明明a已经被赋予b的值了，为什么a+b的结果还是1？go在进行多个变量赋值运算时，它的顺序是先计算值再赋值，并非从左到右计算。\",\"a, b, c = b, c, a+b\",\"你可能会以为它会被展开成下面这段\",\"a = b b = c c = a + b\",\"但实际上它会将a, b, c三个数的值分别计算好再赋给它们，就等同于下面这段代码\",\"a, b, c = 1, 1, 0+1\",\"当涉及到函数调用时，这个效果就更为明显，我们有一个函数sum可以计算两个数字的返回值\",\"func sum(a, b int) int { return a + b }\",\"通过函数来进行两数相加\",\"a, b, c := 0, 1, 1 a, b, c = b, c, sum(a, b)\",\"结果没有变化，在计算sum函数返回值时，它的入参依旧是0和1\",\"1 1 1\",\"所以代码应该这样分开写。\",\"a, b = b, c c = a + b\"]},\"209\":{\"h\":\"比较\",\"t\":[\"变量之间的比较有一个大前提，那就是它们之间的类型必须相同，go语言中不存在隐式类型转换，像下面这样的代码是无法通过编译的\",\"func main() { var a uint64 var b int64 fmt.Println(a == b) }\",\"编译器会告诉你两者之间类型并不相同\",\"invalid operation: a == b (mismatched types uint64 and int64)\",\"所以必须使用强制类型转换\",\"func main() { var a uint64 var b int64 fmt.Println(int64(a) == b) }\",\"在没有泛型之前，早期go提供的内置min，max函数只支持浮点数，到了1.21版本，go才终于将这两个内置函数用泛型重写，现在可以使用min函数比较最小值\",\"minVal := min(1, 2, -1, 1.2)\",\"使用max函数比较最大值\",\"maxVal := max(100, 22, -1, 1.12)\",\"它们的参数支持所有的可比较类型，go中的可比较类型有\",\"布尔\",\"数字\",\"字符串\",\"指针\",\"通道 （仅支持判断是否相等）\",\"元素是可比较类型的数组（切片不可比较）（仅支持判断是否相等）（仅支持相同长度的数组间的比较，因为数组长度也是类型的一部分，而不同类型不可比较）\",\"字段类型都是可比较类型的结构体（仅支持判断是否相等）\",\"除此之外，还可以通过导入标准库cmp来判断，不过仅支持有序类型的参数，在go中内置的有序类型只有数字和字符串。\",\"import \\\"cmp\\\" func main() { cmp.Compare(1, 2) cmp.Less(1, 2) }\"]},\"210\":{\"h\":\"代码块\",\"t\":[\"在函数内部，可以通过花括号建立一个代码块，代码块彼此之间的变量作用域是相互独立的。例如下面的代码\",\"func main() { a := 1 { a := 2 fmt.Println(a) } { a := 3 fmt.Println(a) } fmt.Println(a) }\",\"它的输出是\",\"2 3 1\",\"块与块之间的变量相互独立，不受干扰，无法访问，但是会受到父块中的影响。\",\"func main() { a := 1 { a := 2 fmt.Println(a) } { fmt.Println(a) } fmt.Println(a) }\",\"它的输出是\",\"2 1 1\",\"常量的值无法在运行时改变，一旦赋值过后就无法修改，其值只能来源于：\",\"字面量\",\"其他常量标识符\",\"常量表达式\",\"结果是常量的类型转换\",\"iota\",\"常量只能是基本数据类型，不能是\",\"除基本类型以外的其它类型，如结构体，接口，切片，数组等\",\"函数的返回值\",\"常量的值无法被修改，否则无法通过编译\"]},\"211\":{\"h\":\"初始化\",\"t\":[\"常量的声明需要用到const关键字，常量在声明时就必须初始化一个值，并且常量的类型可以省略，例如\",\"const name string = \\\"Jack\\\" // 字面量 const msg = \\\"hello world\\\" // 字面量 const num = 1 // 字面量 const numExpression = (1+2+3) / 2 % 100 + num // 常量表达式\",\"如果仅仅只是声明而不指定值，将会无法通过编译\",\"const name string\",\"编译器报错\",\"missing init expr for name\",\"批量声明常量可以用()括起来以提升可读性，可以存在多个()达到分组的效果。\",\"const ( Count = 1 Name = \\\"Jack\\\" ) const ( Size = 16 Len = 25 )\",\"在同一个常量分组中，在已经赋值的常量后面的常量可以不用赋值，其值默认就是前一个的值，比如\",\"const ( A = 1 B // 1 C // 1 D // 1 E // 1 )\"]},\"212\":{\"h\":\"iota\",\"t\":[\"iota是一个内置的常量标识符，通常用于表示一个常量声明中的无类型整数序数，一般都是在括号中使用。\",\"const iota = 0\",\"看几个使用案例\",\"const ( Num = iota // 0 Num1 // 1 Num2 // 2 Num3 // 3 Num4 // 4 )\",\"也可以这么写\",\"const ( Num = iota*2 // 0 Num1 // 2 Num2 // 4 Num3 // 6 Num4 // 8 )\",\"还可以\",\"const ( Num = iota << 2*3 + 1 // 1 Num1 // 13 Num2 // 25 Num3 = iota // 3 Num4 // 4 )\",\"通过上面几个例子可以发现，iota是递增的，第一个常量使用iota值的表达式，根据序号值的变化会自动的赋值给后续的常量，直到用新的const重置，这个序号其实就是代码的相对行号，是相对于当前分组的起始行号，看下面的例子\",\"const ( Num = iota<<2*3 + 1 // 1 第一行 Num2 = iota<<2*3 + 1 // 13 第二行 _ // 25 第三行 Num3 //37 第四行 Num4 = iota // 4 第五行 _ // 5 第六行 Num5 // 6 第七行 )\",\"例子中使用了匿名标识符_占了一行的位置，可以看到iota的值本质上就是iota所在行相对于当前const分组的第一行的差值。而不同的const分组则相互不会影响。\"]},\"213\":{\"h\":\"枚举\",\"t\":[\"Go语言没有为枚举单独设计一个数据类型，不像其它语言通常会有一个enum来表示。一般在Go中，都是通过自定义类型 + const + iota来实现枚举，下面是一个简单的例子\",\"type Season uint8 const ( Spring Season = iota Summer Autumn Winter )\",\"这些枚举实际上就是数字，Go也不支持直接将其转换为字符串，但我们可以通过给自定义类型添加方法来返回其字符串表现形式，实现Stringer接口即可。\",\"func (s Season) String() string { switch s { case Spring: return \\\"spring\\\" case Summer: return \\\"summer\\\" case Autumn: return \\\"autumn\\\" case Winter: return \\\"winter\\\" } return \\\"\\\" }\",\"这样一来就是一个简单的枚举实现了。你也可以通过官方工具Stringer来自动生成枚举。\",\"不过它有以下缺点：\",\"类型不安全，因为Season是自定义类型，可以通过强制类型转换将其他数字也转换成该类型\",\"Season(6)\",\"繁琐，字符串表现形式需要自己实现\",\"表达能力弱，因为const仅支持基本数据类型，所以这些枚举值也只能用字符串和数字来进行表示\",\"为什么不在语言层面支持枚举是笔者非常不能理解的一件事，我认为这绝对是利大于弊的。\"]},\"214\":{\"h\":\"输入输出\",\"t\":[\"package main import \\\"fmt\\\" func main() { fmt.Println(\\\"Hello 世界!\\\") }\",\"本站的第一个入门的案例就是输出一个字符串，这一节就来讲一下在Go中如何进行输入输出。\"]},\"215\":{\"h\":\"文件描述符\",\"t\":[\"var ( Stdin = NewFile(uintptr(syscall.Stdin), \\\"/dev/stdin\\\") Stdout = NewFile(uintptr(syscall.Stdout), \\\"/dev/stdout\\\") Stderr = NewFile(uintptr(syscall.Stderr), \\\"/dev/stderr\\\") )\",\"在os包下有三个外暴露的文件描述符，其类型都是*os.File，分别是：\",\"os.Stdin - 标准输入\",\"os.Stdout - 标准输出\",\"os.Stderr - 标准错误\",\"Go中的输入输出都离不开它们。\"]},\"216\":{\"h\":\"输出\",\"t\":[\"在Go中输出有很多中方法，下面几个比较常见的\"]},\"217\":{\"h\":\"stdout\",\"t\":[\"因为标准输出本身就是一个文件，所以你可以直接将字符串写入到标准输出中\",\"package main import \\\"os\\\" func main() { os.Stdout.WriteString(\\\"hello world!\\\") }\"]},\"218\":{\"h\":\"print\",\"t\":[\"Go有两个内置的函数print，println，他们会将参数输出到标准错误中，仅做调试用，一般不推荐使用。\",\"package main func main() { print(\\\"hello world!\\\\n\\\") println(\\\"hello world\\\") }\"]},\"219\":{\"h\":\"fmt\",\"t\":[\"最常见的用法是使用fmt包，它提供了fmt.Println函数，该函数默认会将参数输出到标准输出中。\",\"package main import \\\"fmt\\\" func main() { fmt.Println(\\\"hello world!\\\") }\",\"它的参数支持任意类型，如果类型实现了String接口也会调用String方法来获取其字符串表现形式，所以它输出的内容可读性比较高，适用于大部分情况，不过由于内部用到了反射，在性能敏感的场景不建议大量使用。\"]},\"220\":{\"h\":\"bufio\",\"t\":[\"bufio提供了可缓冲的输出方法，它会先将数据写入到内存中，积累到了一定阈值再输出到指定的Writer中，默认缓冲区大小是4KB。在文件IO，网络IO的时候建议使用这个包。\",\"func main() { writer := bufio.NewWriter(os.Stdout) defer writer.Flush() writer.WriteString(\\\"hello world!\\\") }\",\"你也可以把它和fmt包结合起来用\",\"func main() { writer := bufio.NewWriter(os.Stdout) defer writer.Flush() fmt.Fprintln(writer, \\\"hello world!\\\") }\"]},\"221\":{\"h\":\"格式化\",\"t\":[\"Go中的格式化输出功能基本上由fmt.Printf函数提供，如果你学过C系语言，一定会觉得很熟悉，下面是一个简单的例子。\",\"func main() { fmt.Printf(\\\"hello world, %s!\\\", \\\"jack\\\") }\",\"下面是Go目前所有的格式化动词。\",\"0\",\"格式化\",\"描述\",\"接收类型\",\"1\",\"%%\",\"输出百分号%\",\"任意\",\"2\",\"%s\",\"输出string/[] byte值\",\"string,[] byte\",\"3\",\"%q\",\"格式化字符串，输出的字符串两端有双引号\\\"\\\"\",\"string,[] byte\",\"4\",\"%d\",\"输出十进制整型值\",\"整型\",\"5\",\"%f\",\"输出浮点数\",\"浮点\",\"6\",\"%e\",\"输出科学计数法形式 ,也可以用于复数\",\"浮点\",\"7\",\"%E\",\"与%e相同\",\"浮点\",\"8\",\"%g\",\"根据实际情况判断输出%f或者%e,会去掉多余的0\",\"浮点\",\"9\",\"%b\",\"输出整型的二进制表现形式\",\"数字\",\"10\",\"%#b\",\"输出二进制完整的表现形式\",\"数字\",\"11\",\"%o\",\"输出整型的八进制表示\",\"整型\",\"12\",\"%#o\",\"输出整型的完整八进制表示\",\"整型\",\"13\",\"%x\",\"输出整型的小写十六进制表示\",\"数字\",\"14\",\"%#x\",\"输出整型的完整小写十六进制表示\",\"数字\",\"15\",\"%X\",\"输出整型的大写十六进制表示\",\"数字\",\"16\",\"%#X\",\"输出整型的完整大写十六进制表示\",\"数字\",\"17\",\"%v\",\"输出值原本的形式，多用于数据结构的输出\",\"任意\",\"18\",\"%+v\",\"输出结构体时将加上字段名\",\"任意\",\"19\",\"%#v\",\"输出完整Go语法格式的值\",\"任意\",\"20\",\"%t\",\"输出布尔值\",\"布尔\",\"21\",\"%T\",\"输出值对应的Go语言类型值\",\"任意\",\"22\",\"%c\",\"输出Unicode码对应的字符\",\"int32\",\"23\",\"%U\",\"输出字符对应的Unicode码\",\"rune,byte\",\"24\",\"%p\",\"输出指针所指向的地址\",\"指针\",\"使用fmt.Sprintf或者fmt.Printf来格式化字符串或者输出格式化字符串，看几个例子\",\"fmt.Printf(\\\"%%%s\\\\n\\\", \\\"hello world\\\") fmt.Printf(\\\"%s\\\\n\\\", \\\"hello world\\\") fmt.Printf(\\\"%q\\\\n\\\", \\\"hello world\\\") fmt.Printf(\\\"%d\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%f\\\\n\\\", 1e2) fmt.Printf(\\\"%e\\\\n\\\", 1e2) fmt.Printf(\\\"%E\\\\n\\\", 1e2) fmt.Printf(\\\"%g\\\\n\\\", 1e2) fmt.Printf(\\\"%b\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%#b\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%o\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%#o\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%x\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%#x\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%X\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%#X\\\\n\\\", 2<<7-1) type person struct { name string age int address string } fmt.Printf(\\\"%v\\\\n\\\", person{\\\"lihua\\\", 22, \\\"beijing\\\"}) fmt.Printf(\\\"%+v\\\\n\\\", person{\\\"lihua\\\", 22, \\\"beijing\\\"}) fmt.Printf(\\\"%#v\\\\n\\\", person{\\\"lihua\\\", 22, \\\"beijing\\\"}) fmt.Printf(\\\"%t\\\\n\\\", true) fmt.Printf(\\\"%T\\\\n\\\", person{}) fmt.Printf(\\\"%c%c\\\\n\\\", 20050, 20051) fmt.Printf(\\\"%U\\\\n\\\", '码') fmt.Printf(\\\"%p\\\\n\\\", &person{})\",\"使用其它进制时，在%与格式化动词之间加上一个空格便可以达到分隔符的效果，例如\",\"func main() { str := \\\"abcdefg\\\" fmt.Printf(\\\"%x\\\\n\\\", str) fmt.Printf(\\\"% x\\\\n\\\", str) }\",\"该例输出的结果为\",\"61626364656667 61 62 63 64 65 66 67\",\"在使用数字时，还可以自动补零。比如\",\"fmt.Printf(\\\"%09d\\\", 1) // 000000001\",\"二进制同理\",\"fmt.Printf(\\\"%09b\\\", 1<<3) // 000001000\",\"错误情况\",\"格式化字符数量 < 参数列表数量\",\"fmt.Printf(\\\"\\\", \\\"\\\") //%!(EXTRA string=)\",\"格式化字符数量 > 参数列表数量\",\"fmt.Printf(\\\"%s%s\\\", \\\"\\\") //%!s(MISSING)\",\"类型不匹配\",\"fmt.Printf(\\\"%s\\\", 1) //%!s(int=1)\",\"缺少格式化动词\",\"fmt.Printf(\\\"%\\\", 1) // %!(NOVERB)%!(EXTRA int=1)\"]},\"222\":{\"h\":\"输入\",\"t\":[\"下面介绍常见的输入方法\"]},\"223\":{\"h\":\"read\",\"t\":[\"你可以像直接读文件一样，读取输入内容，如下\",\"func main() { var buf [1024]byte n, _ := os.Stdin.Read(buf[:]) os.Stdout.Write(buf[:n]) }\",\"这样用起来太麻烦了，一般不推荐使用。\"]},\"224\":{\"h\":\"fmt\",\"t\":[\"我们可以使用fmt包提供的几个函数，用起来跟C差不多。\",\"// 扫描从os.Stdin读入的文本，根据空格分隔，换行也被当作空格 func Scan(a ...any) (n int, err error) // 与Scan类似，但是遇到换行停止扫描 func Scanln(a ...any) (n int, err error) // 根据格式化的字符串扫描 func Scanf(format string, a ...any) (n int, err error)\",\"读取两个数字\",\"func main() { var a, b int fmt.Scanln(&a, &b) fmt.Printf(\\\"%d + %d = %d\\\\n\\\", a, b, a+b) }\",\"读取固定长度的数组\",\"func main() { n := 10 s := make([]int, n) for i := range n { fmt.Scan(&s[i]) } fmt.Println(s) }\",\"1 2 3 4 5 6 7 8 9 10 [1 2 3 4 5 6 7 8 9 10]\"]},\"225\":{\"h\":\"bufio\",\"t\":[\"在有大量输入需要读取的时候，就建议使用bufio.Reader来进行内容读取\",\"func main() { reader := bufio.NewReader(os.Stdin) var a, b int fmt.Fscanln(reader, &a, &b) fmt.Printf(\\\"%d + %d = %d\\\\n\\\", a, b, a+b) }\"]},\"226\":{\"h\":\"scanner\",\"t\":[\"bufio.Scanner与bufio.Reader类似，不过它是按行读取的。\",\"func main() { scanner := bufio.NewScanner(os.Stdin) for scanner.Scan() { line := scanner.Text() if line == \\\"exit\\\" { break } fmt.Println(\\\"scan\\\", line) } }\",\"结果如下\",\"first line scan first line second line scan second line third line scan third line exit\",\"提示\",\"在输入输出这方面，想要练手的话，去洛谷做几道简单的ACM模式算法题就能上手熟悉了。\"]},\"227\":{\"h\":\"条件控制\",\"t\":[\"在Go中，条件控制语句总共有三种if，switch，select。select相对前两者而言比较特殊，本节不会讲解，将会留到并发那一节再做介绍。\"]},\"228\":{\"h\":\"if else\",\"t\":[\"if else 至多两个判断分支，语句格式如下\",\"if expression { }\",\"或者\",\"if expression { }else { }\",\"expression必须是一个布尔表达式，即结果要么为真要么为假，必须是一个布尔值，例子如下：\",\"func main() { a, b := 1, 2 if a > b { b++ } else { a++ } }\",\"也可以把表达式写的更复杂些，必要时为了提高可读性，应当使用括号来显式的表示谁应该优先计算。\",\"func main() { a, b := 1, 2 if a<<1%100+3 > b*100/20+6 { // (a<<1%100)+3 > (b*100/20)+6 b++ } else { a++ } }\",\"同时if语句也可以包含一些简单的语句，例如：\",\"func main() { if x := 1 + 1; x > 2 { fmt.Println(x) } }\"]},\"229\":{\"h\":\"else if\",\"t\":[\"else if 语句可以在if else的基础上创建更多的判断分支，语句格式如下：\",\"if expression1 { }else if expression2 { }else if expression3 { }else { }\",\"在执行的过程中每一个表达式的判断是从左到右，整个if语句的判断是从上到下 。一个根据成绩打分的例子如下，第一种写法\",\"func main() { score := 90 var ans string if score == 100 { ans = \\\"S\\\" } else if score >= 90 && score < 100 { ans = \\\"A\\\" } else if score >= 80 && score < 90 { ans = \\\"B\\\" } else if score >= 70 && score < 80 { ans = \\\"C\\\" } else if score >= 60 && score < 70 { ans = \\\"E\\\" } else if score >= 0 && score < 60 { ans = \\\"F\\\" } else { ans = \\\"nil\\\" } fmt.Println(ans) }\",\"第二种写法利用了if语句是从上到下的判断的前提，所以代码要更简洁些。\",\"func main() { score := 90 var ans string if score >= 0 && score < 60 { ans = \\\"F\\\" } else if score < 70 { ans = \\\"D\\\" } else if score < 80 { ans = \\\"C\\\" } else if score < 90 { ans = \\\"B\\\" } else if score < 100 { ans = \\\"A\\\" } else if score == 100 { ans = \\\"S\\\" }else { ans = \\\"nil\\\" } fmt.Println(ans) }\"]},\"230\":{\"h\":\"switch\",\"t\":[\"switch语句也是一种多分支的判断语句，语句格式如下：\",\"switch expr { case case1: statement1 case case2: statement2 default: default statement }\",\"一个简单的例子如下\",\"func main() { str := \\\"a\\\" switch str { case \\\"a\\\": str += \\\"a\\\" str += \\\"c\\\" case \\\"b\\\": str += \\\"bb\\\" str += \\\"aaaa\\\" default: // 当所有case都不匹配后，就会执行default分支 str += \\\"CCCC\\\" } fmt.Println(str) }\",\"还可以在表达式之前编写一些简单语句，例如声明新变量\",\"func main() { switch num := f(); { // 等价于 switch num := f(); true { case num >= 0 && num <= 1: num++ case num > 1: num-- fallthrough case num < 0: num += num } } func f() int { return 1 }\",\"switch语句也可以没有入口处的表达式。\",\"func main() { num := 2 switch { // 等价于 switch true { case num >= 0 && num <= 1: num++ case num > 1: num-- case num < 0: num *= num } fmt.Println(num) }\",\"通过fallthrough关键字来继续执行相邻的下一个分支。\",\"func main() { num := 2 switch { case num >= 0 && num <= 1: num++ case num > 1: num-- fallthrough // 执行完该分支后，会继续执行下一个分支 case num < 0: num += num } fmt.Println(num) }\"]},\"231\":{\"h\":\"label\",\"t\":[\"标签语句，给一个代码块打上标签，可以是goto，break，continue的目标。例子如下：\",\"func main() { A: a := 1 B: b := 2 }\",\"单纯的使用标签是没有任何意义的，需要结合其他关键字来进行使用。\"]},\"232\":{\"h\":\"goto\",\"t\":[\"goto将控制权传递给在同一函数中对应标签的语句，示例如下：\",\"func main() { a := 1 if a == 1 { goto A } else { fmt.Println(\\\"b\\\") } A: fmt.Println(\\\"a\\\") }\",\"在实际应用中goto用的很少，跳来跳去的很降低代码可读性，性能消耗也是一个问题。\",\"在Go中，有仅有一种循环语句：for，Go抛弃了while语句，for语句可以被当作while来使用。\"]},\"233\":{\"h\":\"for\",\"t\":[\"语句格式如下\",\"for init statement; expression; post statement { execute statement }\",\"当只保留循环条件时，就变成了while。\",\"for expression { execute statement }\",\"这是一个死循环，永远也不会退出\",\"for { execute statement }\",\"示例\",\"这是一段输出[0,20]区间数字的代码\",\"for i := 0; i <= 20; i++ { fmt.Println(i) }\",\"你可以同时初始化多个变量，然后将其递增\",\"for i, j := 1, 2; i < 100 && j < 1000; i, j = i+1, j+1 { fmt.Println(i, j) }\",\"当成while来使用\",\"num := 1 for num < 100 { num *= 2 }\",\"双循环打印九九乘法表，这是一个很经典的循环案例\",\"func main() { for i := 1; i <= 9; i++ { for j := 1; j <= 9; j++ { if i <= j { fmt.Printf(\\\"%d*%d = %2d \\\", i, j, i*j) } } fmt.Println() } }\",\"输出如下\",\"1*1 = 1 1*2 = 2 1*3 = 3 1*4 = 4 1*5 = 5 1*6 = 6 1*7 = 7 1*8 = 8 1*9 = 9 2*2 = 4 2*3 = 6 2*4 = 8 2*5 = 10 2*6 = 12 2*7 = 14 2*8 = 16 2*9 = 18 3*3 = 9 3*4 = 12 3*5 = 15 3*6 = 18 3*7 = 21 3*8 = 24 3*9 = 27 4*4 = 16 4*5 = 20 4*6 = 24 4*7 = 28 4*8 = 32 4*9 = 36 5*5 = 25 5*6 = 30 5*7 = 35 5*8 = 40 5*9 = 45 6*6 = 36 6*7 = 42 6*8 = 48 6*9 = 54 7*7 = 49 7*8 = 56 7*9 = 63 8*8 = 64 8*9 = 72 9*9 = 81\"]},\"234\":{\"h\":\"for range\",\"t\":[\"for range可以更加方便的遍历一些可迭代的数据结构，如数组，切片，字符串，映射表，通道。语句格式如下：\",\"for index, value := range iterable { // body }\",\"index为可迭代数据结构的索引，value则是对应索引下的值，例如使用for range遍历一个字符串。\",\"func main() { sequence := \\\"hello world\\\" for index, value := range sequence { fmt.Println(index, value) } }\",\"for range也可以迭代一个整型值，字面量，常量，变量都是有效的。\",\"for i := range 10 { fmt.Println(i) } n := 10 for i := range n { fmt.Println(i) } const n = 10 for i := range n { fmt.Println(i) }\",\"对于每一个种数据结构，for range的实现都有所不同，后续也会讲到，你可以前往Go - for statement以了解更多细节。\"]},\"235\":{\"h\":\"break\",\"t\":[\"break关键字会终止最内层的for循环，结合标签一起使用可以达到终止外层循环的效果，例子如下：这是一个双循环\",\"func main() { for i := 0; i < 10; i++ { for j := 0; j < 10; j++ { if i <= j { break } fmt.Println(i, j) } } }\",\"输出\",\"1 0 2 0 2 1 3 0 3 1 3 2 ... 9 6 9 7 9 8\",\"使用标签来中断外层循环\",\"func main() { Outer: for i := 0; i < 10; i++ { for j := 0; j < 10; j++ { if i <= j { break Outer } fmt.Println(i, j) } } }\",\"输出\"]},\"236\":{\"h\":\"continue\",\"t\":[\"continue关键字会跳过最内层循环的本次迭代，直接进入下一次迭代，结合标签使用可以达到跳过外层循环的效果，例子如下\",\"func main() { for i := 0; i < 10; i++ { for j := 0; j < 10; j++ { if i > j { continue } fmt.Println(i, j) } } }\",\"输出\",\"0 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 ... 7 7 7 8 7 9 8 8 8 9 9 9\",\"使用标签\",\"func main() { Out: for i := 0; i < 10; i++ { for j := 0; j < 10; j++ { if i > j { continue Out } fmt.Println(i, j) } } }\",\"输出\",\"0 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9\"]},\"237\":{\"h\":\"切片\",\"t\":[\"在Go中，数组和切片两者看起来长得几乎一模一样，但功能有着不小的区别，数组是定长的数据结构，长度被指定后就不能被改变，而切片是不定长的，切片在容量不够时会自行扩容。\"]},\"238\":{\"h\":\"数组\",\"t\":[\"如果事先就知道了要存放数据的长度，且后续使用中不会有扩容的需求，就可以考虑使用数组，Go中的数组是值类型，而非引用，并不是指向头部元素的指针。\",\"提示\",\"数组作为值类型，将数组作为参数传递给函数时，由于Go函数是传值传递，所以会将整个数组拷贝。\"]},\"239\":{\"h\":\"初始化\",\"t\":[\"数组在声明是长度只能是一个常量，不能是变量\",\"// 正确示例 var a [5]int // 错误示例 l := 1 var b [l]int\",\"先来初始化一个长度为5的整型数组\",\"var nums [5]int\",\"也可以用元素初始化\",\"nums := [5]int{1, 2, 3}\",\"可以让编译器自动推断长度\",\"nums := [...]int{1, 2, 3, 4, 5} //等价于nums := [5]int{1, 2, 3, 4, 5}，省略号必须存在，否则生成的是切片，不是数组\",\"还可以通过new函数获得一个指针\",\"nums := new([5]int)\",\"以上几种方式都会给nums分配一片固定大小的内存，区别只是最后一种得到的值是指针。\",\"在数组初始化时，需要注意的是，长度必须为一个常量表达式，否则将无法通过编译，常量表达式即表达式的最终结果是一个常量，错误例子如下：\",\"length := 5 // 这是一个变量 var nums [length]int\",\"length是一个变量，因此无法用于初始化数组长度，如下是正确示例：\",\"const length = 5 var nums [length]int // 常量 var nums2 [length + 1]int // 常量表达式 var nums3 [(1 + 2 + 3) * 5]int // 常量表达式 var nums4 [5]int // 最常用的\"]},\"240\":{\"h\":\"使用\",\"t\":[\"只要有数组名和下标，就可以访问数组中对应的元素。\",\"fmt.Println(nums[0])\",\"同样的也可以修改数组元素\",\"nums[0] = 1\",\"还可以通过内置函数len来访问数组元素的数量\",\"len(nums)\",\"内置函数cap来访问数组容量，数组的容量等于数组长度，容量对于切片才有意义。\",\"cap(nums)\"]},\"241\":{\"h\":\"切割\",\"t\":[\"切割数组的格式为arr[startIndex:endIndex]，切割的区间为左闭右开，例子如下：\",\"nums := [5]int{1, 2, 3, 4, 5} nums[1:] // 子数组范围[1,5) -> [2 3 4 5] nums[:5] // 子数组范围[0,5) -> [1 2 3 4 5] nums[2:3] // 子数组范围[2,3) -> [3] nums[1:3] // 子数组范围[1,3) -> [2 3]\",\"数组在切割后，就会变为切片类型\",\"func main() { arr := [5]int{1, 2, 3, 4, 5} fmt.Printf(\\\"%T\\\\n\\\", arr) fmt.Printf(\\\"%T\\\\n\\\", arr[1:2]) }\",\"输出\",\"[5]int []int\",\"若要将数组转换为切片类型，不带参数进行切片即可，转换后的切片与原数组指向的是同一片内存，修改切片会导致原数组内容的变化\",\"func main() { arr := [5]int{1, 2, 3, 4, 5} slice := arr[:] slice[0] = 0 fmt.Printf(\\\"array: %v\\\\n\\\", arr) fmt.Printf(\\\"slice: %v\\\\n\\\", slice) }\",\"输出\",\"array: [0 2 3 4 5] slice: [0 2 3 4 5]\",\"如果要对转换后的切片进行修改，建议使用下面这种方式进行转换\",\"func main() { arr := [5]int{1, 2, 3, 4, 5} slice := slices.Clone(arr[:]) slice[0] = 0 fmt.Printf(\\\"array: %v\\\\n\\\", arr) fmt.Printf(\\\"slice: %v\\\\n\\\", slice) }\",\"输出\",\"array: [1 2 3 4 5] slice: [0 2 3 4 5]\"]},\"242\":{\"h\":\"切片\",\"t\":[\"切片在Go中的应用范围要比数组广泛的多，它用于存放不知道长度的数据，且后续使用过程中可能会频繁的插入和删除元素。\"]},\"243\":{\"h\":\"初始化\",\"t\":[\"切片的初始化方式有以下几种\",\"var nums []int // 值 nums := []int{1, 2, 3} // 值 nums := make([]int, 0, 0) // 值 nums := new([]int) // 指针\",\"可以看到切片与数组在外貌上的区别，仅仅只是少了一个初始化长度。通常情况下，推荐使用make来创建一个空切片，只是对于切片而言，make函数接收三个参数：类型，长度，容量。举个例子解释一下长度与容量的区别，假设有一桶水，水并不是满的，桶的高度就是桶的容量，代表着总共能装多少高度的水，而桶中水的高度就是代表着长度，水的高度一定小于等于桶的高度，否则水就溢出来了。所以，切片的长度代表着切片中元素的个数，切片的容量代表着切片总共能装多少个元素，切片与数组最大的区别在于切片的容量会自动扩张，而数组不会，更多细节前往参考手册 - 长度与容量。\",\"提示\",\"切片的底层实现依旧是数组，是引用类型，可以简单理解为是指向底层数组的指针。\",\"通过var nums []int这种方式声明的切片，默认值为nil，所以不会为其分配内存，而在使用make进行初始化时，建议预分配一个足够的容量，可以有效减少后续扩容的内存消耗。\"]},\"244\":{\"h\":\"使用\",\"t\":[\"切片的基本使用与数组完全一致，区别只是切片可以动态变化长度，下面看几个例子。\",\"切片可以通过append函数实现许多操作，函数签名如下，slice是要添加元素的目标切片，elems是待添加的元素，返回值是添加后的切片。\",\"func append(slice []Type, elems ...Type) []Type\",\"首先创建一个长度为0，容量为0的空切片，然后在尾部插入一些元素，最后输出长度和容量。\",\"nums := make([]int, 0, 0) nums = append(nums, 1, 2, 3, 4, 5, 6, 7) fmt.Println(len(nums), cap(nums)) // 7 8 可以看到长度与容量并不一致。\",\"新 slice 预留的 buffer容量 大小是有一定规律的。 在golang1.18版本更新之前网上大多数的文章都是这样描述slice的扩容策略的： 当原 slice 容量小于 1024 的时候，新 slice 容量变成原来的 2 倍；原 slice 容量超过 1024，新 slice 容量变成原来的1.25倍。 在1.18版本更新之后，slice的扩容策略变为了： 当原slice容量(oldcap)小于256的时候，新slice(newcap)容量为原来的2倍；原slice容量超过256，新slice容量newcap = oldcap+(oldcap+3*256)/4\"]},\"245\":{\"h\":\"插入元素\",\"t\":[\"切片元素的插入也是需要结合append函数来使用，现有切片如下，\",\"nums := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\",\"从头部插入元素\",\"nums = append([]int{-1, 0}, nums...) fmt.Println(nums) // [-1 0 1 2 3 4 5 6 7 8 9 10]\",\"从中间下标i插入元素\",\"nums = append(nums[:i+1], append([]int{999, 999}, nums[i+1:]...)...) fmt.Println(nums) // i=3，[1 2 3 4 999 999 5 6 7 8 9 10]\",\"从尾部插入元素，就是append最原始的用法\",\"nums = append(nums, 99, 100) fmt.Println(nums) // [1 2 3 4 5 6 7 8 9 10 99 100]\"]},\"246\":{\"h\":\"删除元素\",\"t\":[\"切片元素的删除需要结合append函数来使用，现有如下切片\",\"nums := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\",\"从头部删除n个元素\",\"nums = nums[n:] fmt.Println(nums) //n=3 [4 5 6 7 8 9 10]\",\"从尾部删除n个元素\",\"nums = nums[:len(nums)-n] fmt.Println(nums) //n=3 [1 2 3 4 5 6 7]\",\"从中间指定下标i位置开始删除n个元素\",\"nums = append(nums[:i], nums[i+n:]...) fmt.Println(nums)// i=2，n=3，[1 2 6 7 8 9 10]\",\"删除所有元素\",\"nums = nums[:0] fmt.Println(nums) // []\"]},\"247\":{\"h\":\"拷贝\",\"t\":[\"切片在拷贝时需要确保目标切片有足够的长度，例如\",\"func main() { dest := make([]int, 0) src := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} fmt.Println(src, dest) fmt.Println(copy(dest, src)) fmt.Println(src, dest) }\",\"[1 2 3 4 5 6 7 8 9] [] 0 [1 2 3 4 5 6 7 8 9] []\",\"将长度修改为10，输出如下\",\"[1 2 3 4 5 6 7 8 9] [0 0 0 0 0 0 0 0 0 0] 9 [1 2 3 4 5 6 7 8 9] [1 2 3 4 5 6 7 8 9 0]\"]},\"248\":{\"h\":\"遍历\",\"t\":[\"切片的遍历与数组完全一致，for循环\",\"func main() { slice := []int{1, 2, 3, 4, 5, 7, 8, 9} for i := 0; i < len(slice); i++ { fmt.Println(slice[i]) } }\",\"for range循环\",\"func main() { slice := []int{1, 2, 3, 4, 5, 7, 8, 9} for index, val := range slice { fmt.Println(index, val) } }\"]},\"249\":{\"h\":\"多维切片\",\"t\":[\"先来看下面的一个例子，官方文档也有解释：Effective Go - 二维切片\",\"var nums [5][5]int for _, num := range nums { fmt.Println(num) } fmt.Println() slices := make([][]int, 5) for _, slice := range slices { fmt.Println(slice) }\",\"输出结果为\",\"[0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [] [] [] [] []\",\"可以看到，同样是二维的数组和切片，其内部结构是不一样的。数组在初始化时，其一维和二维的长度早已固定，而切片的长度是不固定的，切片中的每一个切片长度都可能是不相同的，所以必须要单独初始化，切片初始化部分修改为如下代码即可。\",\"slices := make([][]int, 5) for i := 0; i < len(slices); i++ { slices[i] = make([]int, 5) }\",\"最终输出结果为\",\"[0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0]\"]},\"250\":{\"h\":\"拓展表达式\",\"t\":[\"提示\",\"只有切片才能使用拓展表达式\",\"切片与数组都可以使用简单表达式来进行切割，但是拓展表达式只有切片能够使用，该特性于Go1.2版本添加，主要是为了解决切片共享底层数组的读写问题，主要格式为如下，需要满足关系low<= high <= max <= cap，使用拓展表达式切割的切片容量为max-low\",\"slice[low:high:max]\",\"low与high依旧是原来的含义不变，而多出来的max则指的是最大容量，例如下方的例子中省略了max，那么s2的容量就是cap(s1)-low\",\"s1 := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} // cap = 9 s2 := s1[3:4] // cap = 9 - 3 = 6\",\"那么这么做就会有一个明显的问题，s1与s2是共享的同一个底层数组，在对s2进行读写时，有可能会影响的s1的数据，下列代码就属于这种情况\",\"s1 := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} // cap = 9 s2 := s1[3:4] // cap = 9 - 3 = 6 // 添加新元素，由于容量为6.所以没有扩容，直接修改底层数组 s2 = append(s2, 1) fmt.Println(s2) fmt.Println(s1)\",\"最终的输出为\",\"[4 1] [1 2 3 4 1 6 7 8 9]\",\"可以看到明明是向s2添加元素，却连s1也一起修改了，拓展表达式就是为了解决此类问题而生的，只需要稍微修改一下就能解决该问题\",\"func main() { s1 := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} // cap = 9 s2 := s1[3:4:4] // cap = 4 - 3 = 1 // 容量不足，分配新的底层数组 s2 = append(s2, 1) fmt.Println(s2) fmt.Println(s1) }\",\"现在得到的结果就是正常的\",\"[4 1] [1 2 3 4 5 6 7 8 9]\"]},\"251\":{\"h\":\"clear\",\"t\":[\"在go1.21新增了clear内置函数，clear会将切片内所有的值置为零值，\",\"package main import ( \\\"fmt\\\" ) func main() { s := []int{1, 2, 3, 4} clear(s) fmt.Println(s) }\",\"输出\",\"[0 0 0 0]\",\"如果想要清空切片，可以\",\"func main() { s := []int{1, 2, 3, 4} s = s[:0:0] fmt.Println(s) }\",\"限制了切割后的容量，这样可以避免覆盖原切片的后续元素。\",\"在Go中，字符串本质上是一个不可变的只读的字节数组，也是一片连续的内存空间。\"]},\"252\":{\"h\":\"字面量\",\"t\":[\"前面提到过字符串有两种字面量表达方式，分为普通字符串和原生字符串。\",\"普通字符串\",\"普通字符串由\\\"\\\"双引号表示，支持转义，不支持多行书写，下列是一些普通字符串\",\"\\\"这是一个普通字符串\\\\n\\\" \\\"abcdefghijlmn\\\\nopqrst\\\\t\\\\\\\\uvwxyz\\\"\",\"这是一个普通字符串 abcdefghijlmn opqrst \\\\uvwxyz\",\"原生字符串\",\"原生字符串由反引号表示，不支持转义，支持多行书写，原生字符串里面所有的字符都会原封不动的输出，包括换行和缩进。\",\"`这是一个原生字符串，换行 tab缩进，\\\\t制表符但是无效,换行 \\\"这是一个普通字符串\\\" 结束 `\",\"这是一个原生字符串，换行 tab缩进，\\\\t制表符但是无效,换行 \\\"这是一个普通字符串\\\" 结束\"]},\"253\":{\"h\":\"访问\",\"t\":[\"因为字符串本质是字节数组，所以字符串的访问形式跟数组切片完全一致，例如访问字符串第一个元素\",\"func main() { str := \\\"this is a string\\\" fmt.Println(str[0]) }\",\"输出是字节而不是字符\",\"116\",\"切割字符串\",\"func main() { str := \\\"this is a string\\\" fmt.Println(string(str[0:4])) }\",\"this\",\"尝试修改字符串元素\",\"func main() { str := \\\"this is a string\\\" str[0] = 'a' // 无法通过编译 fmt.Println(str) }\",\"main.go:7:2: cannot assign to str[0] (value of type byte)\",\"虽然没法修改字符串，但是可以覆盖\",\"func main() { str := \\\"this is a string\\\" str = \\\"that is a string\\\" fmt.Println(str) }\",\"that is a string\"]},\"254\":{\"h\":\"转换\",\"t\":[\"字符串可以转换为字节切片，而字节切片或字节数组也可以转换为字符串，例子如下：\",\"func main() { str := \\\"this is a string\\\" // 显式类型转换为字节切片 bytes := []byte(str) fmt.Println(bytes) // 显式类型转换为字符串 fmt.Println(string(bytes)) }\",\"字符串的内容是只读的不可变的，无法修改，但是字节切片是可以修改的。\",\"func main() { str := \\\"this is a string\\\" fmt.Println(&str) bytes := []byte(str) // 修改字节切片 bytes = append(bytes, 96, 97, 98, 99) // 赋值给原字符串 str = string(bytes) fmt.Println(str) }\",\"将字符串转换成字节切片以后，两者之间毫无关联，因为Go会新分配一片内存空间给字节切片，再将字符串的内存复制过去，对字节切片进行修改不会对原字符串产生任何影响，这么做是为了内存安全。\",\"在这种情况下，如果要转换的字符串或字节切片很大，那么性能开销就会很高。不过你也可以通过unsafe库来实现无复制转换，不过背后的安全问题需要自己承担，比如下面的例子，b1和s1的地址是一样的。\",\"func main() { s1 := \\\"hello world\\\" b1 := unsafe.Slice(unsafe.StringData(s1), len(s1)) fmt.Printf(\\\"%p %p\\\", unsafe.StringData(s1), unsafe.SliceData(b1)) }\",\"0xe27bb2 0xe27bb2\"]},\"255\":{\"h\":\"长度\",\"t\":[\"字符串的长度，其实并不是字面量的长度，而是字节数组的长度，只是大多数时候都是ANSCII字符，刚好能用一个字节表示，所以恰好与字面量长度相等，求字符串长度使用内置函数len，例子如下：\",\"func main() { str := \\\"this is a string\\\" // 看起来长度是16 str2 := \\\"这是一个字符串\\\" // 看起来长度是7 fmt.Println(len(str), len(str2)) }\",\"16 21\",\"看起来中文字符串比英文字符串短，但是实际求得的长度却比英文字符串长。这是因为在unicode编码中，一个汉字在大多数情况下占3个字节，一个英文字符只占一个字节，通过输出字符串第一个元素可以看出结果：\",\"func main() { str := \\\"this is a string\\\" str2 := \\\"这是一个字符串\\\" fmt.Println(string(str[0])) fmt.Println(string(str2[0])) fmt.Println(string(str2[0:3])) }\",\"t // 字母t è // 意大利语 这 // 中文汉字\"]},\"256\":{\"h\":\"拷贝\",\"t\":[\"类似数组切片的拷贝方式，字符串拷贝其实是字节切片拷贝，使用内置函数copy\",\"func main() { var dst, src string src = \\\"this is a string\\\" desBytes := make([]byte, len(src)) copy(desBytes, src) dst = string(desBytes) fmt.Println(src, dst) }\",\"也可以使用strings.clone函数，但其实内部实现都差不多\",\"func main() { var dst, src string src = \\\"this is a string\\\" dst = strings.Clone(src) fmt.Println(src, dst) }\"]},\"257\":{\"h\":\"拼接\",\"t\":[\"字符串的拼接使用+操作符\",\"func main() { str := \\\"this is a string\\\" str = str + \\\" that is a int\\\" fmt.Println(str) }\",\"也可以转换为字节切片再进行添加元素\",\"func main() { str := \\\"this is a string\\\" bytes := []byte(str) bytes = append(bytes, \\\"that is a int\\\"...) str = string(bytes) fmt.Println(str) }\",\"以上两种拼接方式性能都很差，一般情况下可以使用，但如果对应性能有更高要求，可以使用strings.Builder\",\"func main() { builder := strings.Builder{} builder.WriteString(\\\"this is a string \\\") builder.WriteString(\\\"that is a int\\\") fmt.Println(builder.String()) }\",\"this is a string that is a int\"]},\"258\":{\"h\":\"遍历\",\"t\":[\"在本文开头就已经提到过，Go中的字符串就是一个只读的字节切片，也就是说字符串的组成单位是字节而不是字符。这种情况经常会在遍历字符串时遇到，例如下方的代码\",\"func main() { str := \\\"hello world!\\\" for i := 0; i < len(str); i++ { fmt.Printf(\\\"%d,%x,%s\\\\n\\\", str[i], str[i], string(str[i])) } }\",\"例子中分别输出了字节的十进制形式和十六进制形式。\",\"104,68,h 101,65,e 108,6c,l 108,6c,l 111,6f,o 32,20, 119,77,w 111,6f,o 114,72,r 108,6c,l 100,64,d 33,21,!\",\"由于例子中的字符都是属于ASCII字符，只需要一个字节就能表示，所以结果恰巧每一个字节对应一个字符。但如果包含非ASCII字符结果就不同了，如下\",\"func main() { str := \\\"hello 世界!\\\" for i := 0; i < len(str); i++ { fmt.Printf(\\\"%d,%x,%s\\\\n\\\", str[i], str[i], string(str[i])) } }\",\"通常情况下，一个中文字符会占用3个字节，所以就可能会看到以下结果\",\"104,68,h 101,65,e 108,6c,l 108,6c,l 111,6f,o 32,20, 228,e4,ä 184,b8,¸ 150,96, 231,e7,ç 149,95, 140,8c, 33,21,!\",\"按照字节来遍历会把中文字符拆开，这显然会出现乱码。Go字符串是明确支持utf8的，应对这种情况就需要用到rune类型，在使用for range进行遍历时，其默认的遍历单位类型就是一个rune，例如下方代码\",\"func main() { str := \\\"hello 世界!\\\" for _, r := range str { fmt.Printf(\\\"%d,%x,%s\\\\n\\\", r, r, string(r)) } }\",\"输出如下\",\"104,68,h 101,65,e 108,6c,l 108,6c,l 111,6f,o 32,20, 19990,4e16,世 30028,754c,界 33,21,!\",\"rune本质上是int32的类型别名，unicode字符集的范围位于0x0000 - 0x10FFFF之间，最大也只有三个字节，合法的UTF8编码最大字节数只有4个字节，所以使用int32来存储是理所当然，上述例子中将字符串转换成[]rune再遍历也是一样的道理，如下\",\"func main() { str := \\\"hello 世界!\\\" runes := []rune(str) for i := 0; i < len(runes); i++ { fmt.Println(string(runes[i])) } }\",\"还可以使用uft8包下的工具，例如\",\"func main() { str := \\\"hello 世界!\\\" for i, w := 0, 0; i < len(str); i += w { r, width := utf8.DecodeRuneInString(str[i:]) fmt.Println(string(r)) w = width } }\",\"这两个例子的输出都是相同的。\",\"提示\",\"关于字符串的更多细节，可以前往Strings, bytes, runes and characters in Go了解。\",\"一般来说，映射表数据结构实现通常有两种，哈希表(hash table)和搜索树(search tree)，区别在于前者无序，后者有序。在Go中，map的实现是基于哈希桶(也是一种哈希表)，所以也是无序的，本篇不会对实现原理做过多的讲解，这超出了基础的范围，后续会进行深入分析。\",\"提示\",\"想要了解map的原理可以前往map实现\"]},\"259\":{\"h\":\"初始化\",\"t\":[\"在Go中，map的键类型必须是可比较的，比如string ，int是可比较的，而[]int是不可比较的，也就无法作为map的键。初始化一个map有两种方法，第一种是字面量，格式如下：\",\"map[keyType]valueType{}\",\"举几个例子\",\"mp := map[int]string{ 0: \\\"a\\\", 1: \\\"a\\\", 2: \\\"a\\\", 3: \\\"a\\\", 4: \\\"a\\\", } mp := map[string]int{ \\\"a\\\": 0, \\\"b\\\": 22, \\\"c\\\": 33, }\",\"第二种方法是使用内置函数make，对于map而言，接收两个参数，分别是类型与初始容量，例子如下：\",\"mp := make(map[string]int, 8) mp := make(map[string][]int, 10)\",\"map是引用类型，零值或未初始化的map可以访问，但是无法存放元素，所以必须要为其分配内存。\",\"func main() { var mp map[string]int mp[\\\"a\\\"] = 1 fmt.Println(mp) }\",\"panic: assignment to entry in nil map\",\"提示\",\"在初始化map时应当尽量分配一个合理的容量，以减少扩容次数。\"]},\"260\":{\"h\":\"访问\",\"t\":[\"访问一个map的方式就像通过索引访问一个数组一样。\",\"func main() { mp := map[string]int{ \\\"a\\\": 0, \\\"b\\\": 1, \\\"c\\\": 2, \\\"d\\\": 3, } fmt.Println(mp[\\\"a\\\"]) fmt.Println(mp[\\\"b\\\"]) fmt.Println(mp[\\\"d\\\"]) fmt.Println(mp[\\\"f\\\"]) }\",\"0 1 3 0\",\"通过代码可以观察到，即使map中不存在\\\"f\\\"这一键值对，但依旧有返回值。map对于不存的键其返回值是对应类型的零值，并且在访问map的时候其实有两个返回值，第一个返回值对应类型的值，第二个返回值一个布尔值，代表键是否存在，例如：\",\"func main() { mp := map[string]int{ \\\"a\\\": 0, \\\"b\\\": 1, \\\"c\\\": 2, \\\"d\\\": 3, } if val, exist := mp[\\\"f\\\"]; exist { fmt.Println(val) } else { fmt.Println(\\\"key不存在\\\") } }\",\"对map求长度\",\"func main() { mp := map[string]int{ \\\"a\\\": 0, \\\"b\\\": 1, \\\"c\\\": 2, \\\"d\\\": 3, } fmt.Println(len(mp)) }\"]},\"261\":{\"h\":\"存值\",\"t\":[\"map存值的方式也类似数组存值一样，例如：\",\"func main() { mp := make(map[string]int, 10) mp[\\\"a\\\"] = 1 mp[\\\"b\\\"] = 2 fmt.Println(mp) }\",\"存值时使用已存在的键会覆盖原有的值\",\"func main() { mp := make(map[string]int, 10) mp[\\\"a\\\"] = 1 mp[\\\"b\\\"] = 2 if _, exist := mp[\\\"b\\\"]; exist { mp[\\\"b\\\"] = 3 } fmt.Println(mp) }\",\"但是也存在一个特殊情况，那就是键为math.NaN()时\",\"func main() { mp := make(map[float64]string, 10) mp[math.NaN()] = \\\"a\\\" mp[math.NaN()] = \\\"b\\\" mp[math.NaN()] = \\\"c\\\" _, exist := mp[math.NaN()] fmt.Println(exist) fmt.Println(mp) }\",\"false map[NaN:c NaN:a NaN:b]\",\"通过结果可以观察到相同的键值并没有覆盖，反而还可以存在多个，也无法判断其是否存在，也就无法正常取值。因为NaN是IEE754标准所定义的，其实现是由底层的汇编指令UCOMISD完成，这是一个无序比较双精度浮点数的指令，该指令会考虑到NaN的情况，因此结果就是任何数字都不等于NaN，NaN也不等于自身，这也造成了每次哈希值都不相同。关于这一点社区也曾激烈讨论过，但是官方认为没有必要去修改，所以应当尽量避免使用NaN作为map的键。\"]},\"262\":{\"h\":\"删除\",\"t\":[\"func delete(m map[Type]Type1, key Type)\",\"删除一个键值对需要用到内置函数delete，例如\",\"func main() { mp := map[string]int{ \\\"a\\\": 0, \\\"b\\\": 1, \\\"c\\\": 2, \\\"d\\\": 3, } fmt.Println(mp) delete(mp, \\\"a\\\") fmt.Println(mp) }\",\"map[a:0 b:1 c:2 d:3] map[b:1 c:2 d:3]\",\"需要注意的是，如果值为NaN，甚至没法删除该键值对。\",\"func main() { mp := make(map[float64]string, 10) mp[math.NaN()] = \\\"a\\\" mp[math.NaN()] = \\\"b\\\" mp[math.NaN()] = \\\"c\\\" fmt.Println(mp) delete(mp, math.NaN()) fmt.Println(mp) }\",\"map[NaN:c NaN:a NaN:b] map[NaN:c NaN:a NaN:b]\"]},\"263\":{\"h\":\"遍历\",\"t\":[\"通过for range可以遍历map，例如\",\"func main() { mp := map[string]int{ \\\"a\\\": 0, \\\"b\\\": 1, \\\"c\\\": 2, \\\"d\\\": 3, } for key, val := range mp { fmt.Println(key, val) } }\",\"c 2 d 3 a 0 b 1\",\"可以看到结果并不是有序的，也印证了map是无序存储。值得一提的是，NaN虽然没法正常获取，但是可以通过遍历访问到，例如\",\"func main() { mp := make(map[float64]string, 10) mp[math.NaN()] = \\\"a\\\" mp[math.NaN()] = \\\"b\\\" mp[math.NaN()] = \\\"c\\\" for key, val := range mp { fmt.Println(key, val) } }\",\"NaN a NaN c NaN b\"]},\"264\":{\"h\":\"清空\",\"t\":[\"在go1.21之前，想要清空map，就只能对每一个map的key进行delete\",\"func main() { m := map[string]int{ \\\"a\\\": 1, \\\"b\\\": 2, } for k, _ := range m { delete(m, k) } fmt.Println(m) }\",\"但是go1.21更新了clear函数，就不用再进行之前的操作了，只需要一个clear就可以清空\",\"func main() { m := map[string]int{ \\\"a\\\": 1, \\\"b\\\": 2, } clear(m) fmt.Println(m) }\",\"输出\",\"map[]\"]},\"265\":{\"h\":\"Set\",\"t\":[\"Set是一种无序的，不包含重复元素的集合，Go中并没有提供类似的数据结构实现，但是map的键正是无序且不能重复的，所以也可以使用map来替代set。\",\"func main() { set := make(map[int]struct{}, 10) for i := 0; i < 10; i++ { set[rand.Intn(100)] = struct{}{} } fmt.Println(set) }\",\"map[0:{} 18:{} 25:{} 40:{} 47:{} 56:{} 59:{} 81:{} 87:{}]\",\"提示\",\"一个空的结构体不会占用内存\"]},\"266\":{\"h\":\"注意\",\"t\":[\"map并不是一个并发安全的数据结构，Go团队认为大多数情况下map的使用并不涉及高并发的场景，引入互斥锁会极大的降低性能，map内部有读写检测机制，如果冲突会触发fatal error。例如下列情况有非常大的可能性会触发fatal。\",\"func main() { group.Add(10) // map mp := make(map[string]int, 10) for i := 0; i < 10; i++ { go func() { // 写操作 for i := 0; i < 100; i++ { mp[\\\"helloworld\\\"] = 1 } // 读操作 for i := 0; i < 10; i++ { fmt.Println(mp[\\\"helloworld\\\"]) } group.Done() }() } group.Wait() }\",\"fatal error: concurrent map writes\",\"在这种情况下，需要使用sync.Map来替代。\",\"结构体可以存储一组不同类型的数据，是一种复合类型。Go抛弃了类与继承，同时也抛弃了构造方法，刻意弱化了面向对象的功能，Go并非是一个传统OOP的语言，但是Go依旧有着OOP的影子，通过结构体和方法也可以模拟出一个类。下面是一个简单的结构体的例子：\",\"type Programmer struct { Name string Age int Job string Language []string }\"]},\"267\":{\"h\":\"声明\",\"t\":[\"结构体的声明非常简单，例子如下：\",\"type Person struct { name string age int }\",\"结构体本身以及其内部的字段都遵守大小写命名的暴露方式。对于一些类型相同的相邻字段，可以不需要重复声明类型，如下：\",\"type Rectangle struct { height, width, area int color string }\",\"提示\",\"在声明结构体字段时，字段名不能与方法名重复\"]},\"268\":{\"h\":\"实例化\",\"t\":[\"Go不存在构造方法，大多数情况下采用如下的方式来实例化结构体，初始化的时候就像map一样指定字段名称再初始化字段值\",\"programmer := Programmer{ Name: \\\"jack\\\", Age: 19, Job: \\\"coder\\\", Language: []string{\\\"Go\\\", \\\"C++\\\"}, }\",\"不过也可以省略字段名称，当省略字段名称时，就必须初始化所有字段，通常不建议使用这种方式，因为可读性很糟糕。\",\"programmer := Programmer{ \\\"jack\\\", 19, \\\"coder\\\", []string{\\\"Go\\\", \\\"C++\\\"}}\",\"如果实例化过程比较复杂，你也可以编写一个函数来实例化结构体，就像下面这样，你也可以把它理解为一个构造函数\",\"type Person struct { Name string Age int Address string Salary float64 } func NewPerson(name string, age int, address string, salary float64) *Person { return &Person{Name: name, Age: age, Address: address, Salary: salary} }\",\"不过Go并不支持函数与方法重载，所以你无法为同一个函数或方法定义不同的参数。如果你想以多种方式实例化结构体，要么创建多个构造函数，要么建议使用options模式。\"]},\"269\":{\"h\":\"选项模式\",\"t\":[\"选项模式是Go语言中一种很常见的设计模式，可以更为灵活的实例化结构体，拓展性强，并且不需要改变构造函数的函数签名。假设有下面这样一个结构体\",\"type Person struct { Name string Age int Address string Salary float64 Birthday string }\",\"声明一个PersonOptions类型，它接受一个*Person类型的参数，它必须是指针，因为我们要在闭包中对Person赋值。\",\"type PersonOptions func(p *Person)\",\"接下来创建选项函数，它们一般是With开头，它们的返回值就是一个闭包函数。\",\"func WithName(name string) PersonOptions { return func(p *Person) { p.Name = name } } func WithAge(age int) PersonOptions { return func(p *Person) { p.Age = age } } func WithAddress(address string) PersonOptions { return func(p *Person) { p.Address = address } } func WithSalary(salary float64) PersonOptions { return func(p *Person) { p.Salary = salary } }\",\"实际声明的构造函数签名如下，它接受一个可变长PersonOptions类型的参数。\",\"func NewPerson(options ...PersonOptions) *Person { // 优先应用options p := &Person{} for _, option := range options { option(p) } // 默认值处理 if p.Age < 0 { p.Age = 0 } ...... return p }\",\"这样一来对于不同实例化的需求只需要一个构造函数即可完成，只需要传入不同的Options函数即可\",\"func main() { pl := NewPerson( WithName(\\\"John Doe\\\"), WithAge(25), WithAddress(\\\"123 Main St\\\"), WithSalary(10000.00), ) p2 := NewPerson( WithName(\\\"Mike jane\\\"), WithAge(30), ) }\",\"函数式选项模式在很多开源项目中都能看见，gRPC Server的实例化方式也是采用了该设计模式。函数式选项模式只适合于复杂的实例化，如果参数只有简单几个，建议还是用普通的构造函数来解决。\"]},\"270\":{\"h\":\"组合\",\"t\":[\"在Go中，结构体之间的关系是通过组合来表示的，可以显式组合，也可以匿名组合，后者使用起来更类似于继承，但本质上没有任何变化。例如：\",\"显式组合的方式\",\"type Person struct { name string age int } type Student struct { p Person school string } type Employee struct { p Person job string }\",\"在使用时需要显式的指定字段p\",\"student := Student{ p: Person{name: \\\"jack\\\", age: 18}, school: \\\"lili school\\\", } fmt.Println(student.p.name)\",\"而匿名组合可以不用显式的指定字段\",\"type Person struct { name string age int } type Student struct { Person school string } type Employee struct { Person job string }\",\"匿名字段的名称默认为类型名，调用者可以直接访问该类型的字段和方法，但除了更加方便以外与第一种方式没有任何的区别。\",\"student := Student{ Person: Person{name: \\\"jack\\\",age: 18}, school: \\\"lili school\\\", } fmt.Println(student.name)\"]},\"271\":{\"h\":\"指针\",\"t\":[\"对于结构体指针而言，不需要解引用就可以直接访问结构体的内容，例子如下：\",\"p := &Person{ name: \\\"jack\\\", age: 18, } fmt.Println(p.age,p.name)\",\"在编译的时候会转换为(*p).name ，(*p).age，其实还是需要解引用，不过在编码的时候可以省去，算是一种语法糖。\"]},\"272\":{\"h\":\"标签\",\"t\":[\"结构体标签是一种元编程的形式，结合反射可以做出很多奇妙的功能，格式如下\",\"`key1:\\\"val1\\\" key2:\\\"val2\\\"`\",\"标签是一种键值对的形式，使用空格进行分隔。结构体标签的容错性很低，如果没能按照正确的格式书写结构体，那么将会导致无法正常读取，但是在编译时却不会有任何的报错，下方是一个使用示例。\",\"type Programmer struct { Name string `json:\\\"name\\\"` Age int `yaml:\\\"age\\\"` Job string `toml:\\\"job\\\"` Language []string `properties:\\\"language\\\"` }\",\"结构体标签最广泛的应用就是在各种序列化格式中的别名定义，标签的使用需要结合反射才能完整发挥出其功能。\"]},\"273\":{\"h\":\"内存对齐\",\"t\":[\"Go结构体字段的内存分布遵循内存对齐的规则，这么做可以减少CPU访问内存的次数，相应的占用的内存要多一些，属于空间换时间的一种手段。假设有如下结构体\",\"type Num struct { A int64 B int32 C int16 D int8 E int32 }\",\"已知这些类型的占用字节数\",\"int64占8个字节\",\"int32占4个字节\",\"int16占2字节\",\"int8占一个字节\",\"整个结构体的内存占用似乎是8+4+2+1+4=19个字节吗，当然不是这样，根据内存对齐规则而言，结构体的内存占用长度至少是最大字段的整数倍，不足的则补齐。该结构体中最大的是int64占用8个字节，那么内存分布如下图所示\",\"所以实际上是占用24个字节，其中有5个字节是无用的。\",\"再来看下面这个结构体\",\"type Num struct { A int8 B int64 C int8 }\",\"明白了上面的规则后，可以很快的理解它的内存占用也是24个字节，尽管它只有三个字段，足足浪费了14个字节。\",\"但是我们可以调整字段，改成如下的顺序\",\"type Num struct { A int8 C int8 B int64 }\",\"如此一来就占用的内存就变为了16字节，浪费了6个字节，减少了8个字节的内存浪费。\",\"从理论上来说，让结构体中的字段按照合理的顺序分布，可以减少其内存占用。不过实际编码过程中，并没有必要的理由去这样做，它不一定能在减少内存占用这方面带来实质性的提升，但一定会提高开发人员的血压和心智负担，尤其是在业务中一些结构体的字段数可能多大几十个或者数百个，所以仅做了解即可。\",\"提示\",\"如果你真的想通过此种方法来节省内存，可以看看这两个库\",\"BetterAlign\",\"go-tools\",\"他们会检查你的源代码中的结构体，计算并重新排布结构体字段来最小化结构体占用的内存。\"]},\"274\":{\"h\":\"空结构体\",\"t\":[\"空结构体没有字段，不占用内存空间，我们可以通过unsafe.SizeOf函数来计算占用的字节大小\",\"func main() { type Empty struct {} fmt.Println(unsafe.Sizeof(Empty{})) }\",\"输出\",\"0\",\"空结构体的使用场景有很多，比如之前提到过的，作为map的值类型，可以将map作为set来进行使用，又或者是作为通道的类型，表示仅做通知类型的通道。\",\"Go保留了指针，在一定程度上保证了性能，同时为了更好的GC和安全考虑，又限制了指针的使用。\"]},\"275\":{\"h\":\"创建\",\"t\":[\"关于指针有两个常用的操作符，一个是取地址符&，另一个是解引用符*。对一个变量进行取地址，会返回对应类型的指针，例如：\",\"func main() { num := 2 p := &num fmt.Println(p) }\",\"指针存储的是变量num的地址\",\"0xc00001c088\",\"解引用符则有两个用途，第一个是访问指针所指向的元素，也就是解引用，例如\",\"func main() { num := 2 p := &num rawNum := *p fmt.Println(rawNum) }\",\"p是一个指针，对指针类型解引用就能访问到指针所指向的元素。还有一个用途就是声明一个指针，例如：\",\"func main() { var numPtr *int fmt.Println(numPtr) }\",\"<nil>\",\"*int即代表该变量的类型是一个int类型的指针，不过指针不能光声明，还得初始化，需要为其分配内存，否则就是一个空指针，无法正常使用。要么使用取地址符将其他变量的地址赋值给该指针，要么就使用内置函数new手动分配，例如：\",\"func main() { var numPtr *int numPtr = new(int) fmt.Println(numPtr) }\",\"更多的是使用短变量\",\"func main() { numPtr := new(int) fmt.Println(numPtr) }\",\"new函数只有一个参数那就是类型，并返回一个对应类型的指针，函数会为该指针分配内存，并且指针指向对应类型的零值，例如：\",\"func main() { fmt.Println(*new(string)) fmt.Println(*new(int)) fmt.Println(*new([5]int)) fmt.Println(*new([]float64)) }\",\"0 [0 0 0 0 0] []\"]},\"276\":{\"h\":\"禁止指针运算\",\"t\":[\"在Go中是不支持指针运算的，也就是说指针无法偏移，先来看一段C++代码：\",\"int main() { int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9}; int *p = &arr[0]; cout << &arr << endl << p << endl << p + 1 << endl << &arr[1] << endl; }\",\"0x31d99ff880 0x31d99ff880 0x31d99ff884 0x31d99ff884\",\"可以看出数组的地址与数字第一个元素的地址一致，并且对指针加一运算后，其指向的元素为数组第二个元素。Go中的数组也是如此，不过区别在于指针无法偏移，例如\",\"func main() { arr := [5]int{0, 1, 2, 3, 4} p := &arr println(&arr[0]) println(p) // 试图进行指针运算 p++ fmt.Println(p) }\",\"这样的程序将无法通过编译，报错如下\",\"main.go:10:2: invalid operation: p++ (non-numeric type *[5]int)\",\"提示\",\"标准库unsafe提供了许多用于低级编程的操作，其中就包括指针运算，前往标准库-unsafe了解细节。\"]},\"277\":{\"h\":\"new和make\",\"t\":[\"在前面的几节已经很多次提到过内置函数new和make，两者有点类似，但也有不同，下面复习下。\",\"func new(Type) *Type\",\"返回值是类型指针\",\"接收参数是类型\",\"专用于给指针分配内存空间\",\"func make(t Type, size ...IntegerType) Type\",\"返回值是值，不是指针\",\"接收的第一个参数是类型，不定长参数根据传入类型的不同而不同\",\"专用于给切片，映射表，通道分配内存。\",\"下面是一些例子：\",\"new(int) // int指针 new(string) // string指针 new([]int) // 整型切片指针 make([]int, 10, 100) // 长度为10，容量100的整型切片 make(map[string]int, 10) // 容量为10的映射表 make(chan int, 10) // 缓冲区大小为10的通道\",\"在Go中，函数是一等公民，函数是Go最基础的组成部分，也是Go的核心。\"]},\"278\":{\"h\":\"声明\",\"t\":[\"函数的声明格式如下\",\"func 函数名([参数列表]) [返回值] { 函数体 }\",\"声明函数有两种办法，一种是通过func关键字直接声明，另一种就是通过var关键字来声明，如下所示\",\"func sum(a int, b int) int { return a + b } var sum = func(a int, b int) int { return a + b }\",\"函数签名由函数名称，参数列表，返回值组成，下面是一个完整的例子，函数名称为Sum，有两个int类型的参数a，b，返回值类型为int。\",\"func Sum(a int, b int) int { return a + b }\",\"还有一个非常重要的点，即Go中的函数不支持重载，像下面的代码就无法通过编译\",\"type Person struct { Name string Age int Address string Salary float64 } func NewPerson(name string, age int, address string, salary float64) *Person { return &Person{Name: name, Age: age, Address: address, Salary: salary} } func NewPerson(name string) *Person { return &Person{Name: name} }\",\"Go的理念便是：如果签名不一样那就是两个完全不同的函数，那么就不应该取一样的名字，函数重载会让代码变得混淆和难以理解。这种理念是否正确见仁见智，至少在Go中你可以仅通过函数名就知道它是干什么的，而不需要去找它到底是哪一个重载。\"]},\"279\":{\"h\":\"参数\",\"t\":[\"Go中的参数名可以不带名称，一般这种是在接口或函数类型声明时才会用到，不过为了可读性一般还是建议尽量给参数加上名称\",\"type ExWriter func(io.Writer) error type Writer interface { ExWrite([]byte) (int, error) }\",\"对于类型相同的参数而言，可以只需要声明一次类型，不过条件是它们必须相邻\",\"func Log(format string, a1, a2 any) { ... }\",\"变长参数可以接收0个或多个值，必须声明在参数列表的末尾，最典型的例子就是fmt.Printf函数。\",\"func Printf(format string, a ...any) (n int, err error) { return Fprintf(os.Stdout, format, a...) }\",\"值得一提的是，Go中的函数参数是传值传递，即在传递参数时会拷贝实参的值。如果你觉得在传递切片或map时会复制大量的内存，我可以告诉你大可不必担心，因为这两个数据结构本质上都是指针。\"]},\"280\":{\"h\":\"返回值\",\"t\":[\"下面是一个简单的函数返回值的例子，Sum函数返回一个int类型的值。\",\"func Sum(a, b int) int { return a + b }\",\"当函数没有返回值时，不需要void，不带返回值即可。\",\"func ErrPrintf(format string, a ...any) { _, _ = fmt.Fprintf(os.Stderr, format, a...) }\",\"Go允许函数有多个返回值，此时就需要用括号将返回值围起来。\",\"func Div(a, b float64) (float64, error) { if a == 0 { return math.NaN(), errors.New(\\\"0不能作为被除数\\\") } return a / b, nil }\",\"Go也支持具名返回值，不能与参数名重复，使用具名返回值时，return关键字可以不需要指定返回哪些值。\",\"func Sum(a, b int) (ans int) { ans = a + b return }\",\"和参数一样，当有多个同类型的具名返回值时，可以省略掉重复的类型声明\",\"func SumAndMul(a, b int) (c, d int) { c = a + b d = a * b return }\",\"不管具名返回值如何声明，永远都是以return关键字后的值为最高优先级。\",\"func SumAndMul(a, b int) (c, d int) { c = a + b d = a * b // c，d将不会被返回 return a + b, a * b }\"]},\"281\":{\"h\":\"匿名函数\",\"t\":[\"匿名函数就是没有签名的函数，例如下面的函数func(a, b int) int，它没有名称，所以我们只能在它的函数体后紧跟括号来进行调用。\",\"func main() { func(a, b int) int { return a + b }(1, 2) }\",\"在调用一个函数时，当它的参数是一个函数类型时，这时名称不再重要，就可以直接传递一个匿名函数，如下所示\",\"type Person struct { Name string Age int Salary float64 } func main() { people := []Person{ {Name: \\\"Alice\\\", Age: 25, Salary: 5000.0}, {Name: \\\"Bob\\\", Age: 30, Salary: 6000.0}, {Name: \\\"Charlie\\\", Age: 28, Salary: 5500.0}, } slices.SortFunc(people, func(p1 Person, p2 Person) int { if p1.Name > p2.Name { return 1 } else if p1.Name < p2.Name { return -1 } return 0 }) }\",\"这是一个自定义排序规则的例子，slices.SortFunc接受两个参数，一个是切片，另一个就是比较函数，不考虑复用的话，我们就可以直接传递匿名函数。\"]},\"282\":{\"h\":\"闭包\",\"t\":[\"闭包（Closure）这一概念，在一些语言中又被称为Lamda表达式，与匿名函数一起使用，闭包 = 函数 + 环境引用吗，看下面一个例子：\",\"func main() { grow := Exp(2) for i := range 10 { fmt.Printf(\\\"2^%d=%d\\\\n\\\", i, grow()) } } func Exp(n int) func() int { e := 1 return func() int { temp := e e *= n return temp } }\",\"输出\",\"2^0=1 2^1=2 2^2=4 2^3=8 2^4=16 2^5=32 2^6=64 2^7=128 2^8=256 2^9=512\",\"Exp函数的返回值是一个函数，这里将称成为grow函数，每将它调用一次，变量e就会以指数级增长一次。grow函数引用了Exp函数的两个变量：e和n，它们诞生在Exp函数的作用域内，在正常情况下随着Exp函数的调用结束，这些变量的内存会随着出栈而被回收。但是由于grow函数引用了它们，所以它们无法被回收，而是逃逸到了堆上，即使Exp函数的生命周期已经结束了，但变量e和n的生命周期并没有结束，在grow函数内还能直接修改这两个变量，grow函数就是一个闭包函数。\",\"利用闭包，可以非常简单的实现一个求费波那契数列的函数，代码如下\",\"func main() { // 10个斐波那契数 fib := Fib(10) for n, next := fib(); next; n, next = fib() { fmt.Println(n) } } func Fib(n int) func() (int, bool) { a, b, c := 1, 1, 2 i := 0 return func() (int, bool) { if i >= n { return 0, false } else if i < 2 { f := i i++ return f, true } a, b = b, c c = a + b i++ return a, true } }\",\"输出为\",\"0 1 1 2 3 5 8 13 21 34\"]},\"283\":{\"h\":\"延迟调用\",\"t\":[\"defer关键字可以使得一个函数延迟一段时间调用，在函数返回之前这些defer描述的函数最后都会被逐个执行，看下面一个例子\",\"func main() { Do() } func Do() { defer func() { fmt.Println(\\\"1\\\") }() fmt.Println(\\\"2\\\") }\",\"输出\",\"2 1\",\"因为defer是在函数返回前执行的，你也可以在defer中修改函数的返回值\",\"func main() { fmt.Println(sum(3, 5)) } func sum(a, b int) (s int) { defer func() { s -= 10 }() s = a + b return }\",\"当有多个defer描述的函数时，就会像栈一样先进后出的顺序执行。\",\"func main() { fmt.Println(0) Do() } func Do() { defer fmt.Println(1) fmt.Println(2) defer fmt.Println(3) defer fmt.Println(4) fmt.Println(5) }\",\"0 2 5 4 3 1\",\"延迟调用通常用于释放文件资源，关闭网络连接等操作，还有一个用法是捕获panic，不过这是错误处理一节中才会涉及到的东西。\"]},\"284\":{\"h\":\"循环\",\"t\":[\"虽然没有明令禁止，一般建议不要在for循环中使用defer，如下所示\",\"func main() { n := 5 for i := range n { defer fmt.Println(i) } }\",\"输出如下\",\"4 3 2 1 0\",\"这段代码结果是正确的，但过程也许不对。在Go中，每创建一个defer，就需要在当前协程申请一片内存空间。假设在上面例子中不是简单的for n循环，而是一个较为复杂的数据处理流程，当外部请求数突然激增时，那么在短时间内就会创建大量的defer，在循环次数很大或次数不确定时，就可能会导致内存占用突然暴涨，这种我们一般称之为内存泄漏。\"]},\"285\":{\"h\":\"参数预计算\",\"t\":[\"对于延迟调用有一些反直觉的细节，比如下面这个例子\",\"func main() { defer fmt.Println(Fn1()) fmt.Println(\\\"3\\\") } func Fn1() int { fmt.Println(\\\"2\\\") return 1 }\",\"这个坑还是非常隐晦的，笔者以前就因为这个坑，半天排查不出来是什么原因，可以猜猜输出是什么，答案如下\",\"2 3 1\",\"可能很多人认为是下面这种输出\",\"3 2 1\",\"按照使用者的初衷来说，fmt.Println(Fn1())这部分应该是希望它们在函数体执行结束后再执行，fmt.Println确实是最后执行的，但Fn1()是在意料之外的，下面这个例子的情况就更加明显了。\",\"func main() { var a, b int a = 1 b = 2 defer fmt.Println(sum(a, b)) a = 3 b = 4 } func sum(a, b int) int { return a + b }\",\"它的输出一定是3而不是7，如果使用闭包而不是延迟调用，结果又不一样了\",\"func main() { var a, b int a = 1 b = 2 f := func() { fmt.Println(sum(a, b)) } a = 3 b = 4 f() }\",\"闭包的输出是7，那如果把延迟调用和闭包结合起来呢\",\"func main() { var a, b int a = 1 b = 2 defer func() { fmt.Println(sum(a, b)) }() a = 3 b = 4 }\",\"这次就正常了，输出的是7。下面再改一下，没有闭包了\",\"func main() { var a, b int a = 1 b = 2 defer func(num int) { fmt.Println(num) }(sum(a, b)) a = 3 b = 4 }\",\"输出又变回3了。通过对比上面几个例子可以发现这段代码\",\"defer fmt.Println(sum(a,b))\",\"其实等价于\",\"defer fmt.Println(3)\",\"go不会等到最后才去调用sum函数，sum函数早在延迟调用被执行以前就被调用了，并作为参数传递了fmt.Println。总结就是，对于defer直接作用的函数而言，它的参数是会被预计算的，这也就导致了第一个例子中的奇怪现象，对于这种情况，尤其是在延迟调用中将函数返回值作为参数的情况尤其需要注意。\",\"方法与函数的区别在于，方法拥有接收者，而函数没有，且只有自定义类型能够拥有方法。先来看一个例子。\",\"type IntSlice []int func (i IntSlice) Get(index int) int { return i[index] } func (i IntSlice) Set(index, val int) { i[index] = val } func (i IntSlice) Len() int { return len(i) }\",\"先声明了一个类型IntSlice，其底层类型为[]int，再声明了三个方法Get，Set和Len，方法的长相与函数并无太大的区别，只是多了一小段(i IntSlice) 。i就是接收者，IntSlice就是接收者的类型，接收者就类似于其他语言中的this或self，只不过在Go中需要显示的指明。\",\"func main() { var intSlice IntSlice intSlice = []int{1, 2, 3, 4, 5} fmt.Println(intSlice.Get(0)) intSlice.Set(0, 2) fmt.Println(intSlice) fmt.Println(intSlice.Len()) }\",\"方法的使用就类似于调用一个类的成员方法，先声明，再初始化，再调用。\"]},\"286\":{\"h\":\"值接收者\",\"t\":[\"接收者也分两种类型，值接收者和指针接收者，先看一个例子\",\"type MyInt int func (i MyInt) Set(val int) { i = MyInt(val) // 修改了，但是不会造成任何影响 } func main() { myInt := MyInt(1) myInt.Set(2) fmt.Println(myInt) }\",\"上述代码运行过后，会发现myInt的值依旧是1，并没有被修改成2。方法在被调用时，会将接收者的值传入方法中，上例的接收者就是一个值接收者，可以简单的看成一个形参，而修改一个形参的值，并不会对方法外的值造成任何影响，那么如果通过指针调用会如何呢？\",\"func main() { myInt := MyInt(1) (&myInt).Set(2) fmt.Println(myInt) }\",\"遗憾的是，这样的代码依旧不能修改内部的值，为了能够匹配上接收者的类型，Go会将其解引用，解释为(*(&myInt)).Set(2)。\"]},\"287\":{\"h\":\"指针接收者\",\"t\":[\"稍微修改了一下，就能正常修改myInt的值。\",\"type MyInt int func (i *MyInt) Set(val int) { *i = MyInt(val) } func main() { myInt := MyInt(1) myInt.Set(2) fmt.Println(myInt) }\",\"现在的接收者就是一个指针接收者，虽然myInt是一个值类型，在通过值类型调用指针接收者的方法时，Go会将其解释为(&myint).Set(2)。所以方法的接收者为指针时，不管调用者是不是指针，都可以修改内部的值。\",\"函数的参数传递过程中，是值拷贝的，如果传递的是一个整型，那就拷贝这个整型，如果是一个切片，那就拷贝这个切片，但如果是一个指针，就只需要拷贝这个指针，显然传递一个指针比起传递一个切片所消耗的资源更小，接收者也不例外，值接收者和指针接收者也是同样的道理。在大多数情况下，都推荐使用指针接收者，不过两者并不应该混合使用，要么都用，要么就都不用，看下面一个例子。\",\"提示\",\"需要先了解接口\",\"type Animal interface { Run() } type Dog struct { } func (d *Dog) Run() { fmt.Println(\\\"Run\\\") } func main() { var an Animal an = Dog{} // an = &Dog{} 正确方式 an.Run() }\",\"这一段代码将会无法通过编译，编译器将会输出如下错误\",\"cannot use Dog{} (value of type Dog) as type Animal in assignment: Dog does not implement Animal (Run method has pointer receiver)\",\"翻译过来就是，无法使用Dog{}初始化Animal类型的变量，因为Dog没有实现Animal ，解决办法有两种，一是将指针接收者改为值接收者，二是将Dog{}改为&Dog{}，接下来逐个讲解。\",\"type Dog struct { } func (d Dog) Run() { // 改为了值接收者 fmt.Println(\\\"Run\\\") } func main() { // 可以正常运行 var an Animal an = Dog{} // an = &Dog{} 同样可以 an.Run() }\",\"在原来的代码中，Run 方法的接收者是*Dog ，自然而然实现Animal接口的就是Dog指针，而不是Dog结构体，这是两个不同的类型，所以编译器就会认为Dog{}并不是Animal的实现，因此无法赋值给变量an，所以第二种解决办法就是赋值Dog指针给变量an。不过在使用值接收者时，Dog指针依然可以正常赋值给animal，这是因为Go会在适当情况下对指针进行解引用，因为通过指针可以找到Dog结构体，但是反过来的话，无法通过Dog结构体找到Dog指针。如果单纯的在结构体中混用值接收者和指针接收者的话无伤大雅，但是和接口一起使用后，就会出现错误，倒不如无论何时要么都用值接收者，要么就都用指针接收者，形成一个良好的规范，也可以减少后续维护的负担。\",\"还有一种情况，就是当值接收者是可寻址的时候，Go会自动的插入指针运算符来进行调用，例如切片是可寻址，依旧可以通过值接收者来修改其内部值。比如下面这个代码\",\"type Slice []int func (s Slice) Set(i int, v int) { s[i] = v } func main() { s := make(Slice, 1) s.Set(0, 1) fmt.Println(s) }\",\"输出\",\"[1]\",\"但这样会引发另一个问题，如果对其添加元素的话，情况就不同了。看下面的例子\",\"type Slice []int func (s Slice) Set(i int, v int) { s[i] = v } func (s Slice) Append(a int) { s = append(s, a) } func main() { s := make(Slice, 1, 2) s.Set(0, 1) s.Append(2) fmt.Println(s) }\",\"[1]\",\"它的输出还是和之前一样，append函数是有返回值的，向切片添加完元素后必须覆盖原切片，尤其是在扩容后，在方法中对值接收者修改并不会产生任何影响，这也就导致了例子中的结果，改成指针接收者就正常了。\",\"type Slice []int func (s *Slice) Set(i int, v int) { (*s)[i] = v } func (s *Slice) Append(a int) { *s = append(*s, a) } func main() { s := make(Slice, 1, 2) s.Set(0, 1) s.Append(2) fmt.Println(s) }\",\"输出\",\"[1 2]\"]},\"288\":{\"h\":\"接口\",\"t\":[\"接口是一个非常重要的概念，它描述了一组抽象的规范，而不提供具体的实现。对于项目而言会使得代码更加优雅可读，对于开发者而言也会减少很多心智负担，代码风格逐渐形成了规范，于是就有了现在人们所推崇的面向接口编程。\"]},\"289\":{\"h\":\"概念\",\"t\":[\"Go关于接口的发展历史有一个分水岭，在Go1.17及以前，官方在参考手册中对于接口的定义为：一组方法的集合。\",\"An interface type specifies a method set called its interface.\",\"接口实现的定义为\",\"A variable of interface type can store a value of any type with a method set that is any superset of the interface. Such a type is said to implement the interface\",\"翻译过来就是，当一个类型的方法集是一个接口的方法集的超集时，且该类型的值可以由该接口类型的变量存储，那么称该类型实现了该接口。\",\"不过在Go1.18时，关于接口的定义发生了变化，接口定义为：一组类型的集合。\",\"An interface type defines a type set.\",\"接口实现的定义为\",\"A variable of interface type can store a value of any type that is in the type set of the interface. Such a type is said to implement the interface\",\"翻译过来就是，当一个类型位于一个接口的类型集内，且该类型的值可以由该接口类型的变量存储，那么称该类型实现了该接口。并且还给出了如下的额外定义。\",\"当如下情况时，可以称类型T实现了接口I\",\"T不是一个接口，并且是接口I类型集中的一个元素\",\"T是一个接口，并且T的类型集是接口I类型集的一个子集\",\"如果T实现了一个接口，那么T的值也实现了该接口。\",\"Go在1.18最大的变化就是加入了泛型，新接口定义就是为了泛型而服务的，不过一点也不影响之前接口的使用，同时接口也分为了两类，\",\"基本接口(Basic Interface)：只包含方法集的接口就是基本接口\",\"通用接口(General Interface)：只要包含类型集的接口就是通用接口\",\"什么是方法集，方法集就是一组方法的集合，同样的，类型集就是一组类型的集合。\",\"提示\",\"这一堆概念很死板，理解的时候要根据代码来思考。\"]},\"290\":{\"h\":\"基本接口\",\"t\":[\"前面讲到了基本接口就是方法集，就是一组方法的集合。\"]},\"291\":{\"h\":\"声明\",\"t\":[\"先来看看接口长什么样子。\",\"type Person interface { Say(string) string Walk(int) }\",\"这是一个Person接口，有两个对外暴露的方法Walk和Say，在接口里，函数的参数名变得不再重要，当然如果想加上参数名和返回值名也是允许的。\"]},\"292\":{\"h\":\"初始化\",\"t\":[\"仅仅只有接口是无法被初始化的，因为它仅仅只是一组规范，并没有具体的实现，不过可以被声明。\",\"func main() { var person Person fmt.Println(person) }\",\"输出\",\" <nil>\"]},\"293\":{\"h\":\"实现\",\"t\":[\"先来看一个例子，一个建筑公司想一种特殊规格的起重机，于是给出了起重机的特殊规范和图纸，并指明了起重机应该有起重和吊货的功能，建筑公司并不负责造起重机，只是给出了一个规范，这就叫接口，于是公司A接下了订单，根据自家公司的独门技术造出了绝世起重机并交给了建筑公司，建筑公司不在乎是用什么技术实现的，也不在乎什么绝世起重机，只要能够起重和吊货就行，仅仅只是当作一台普通起重机来用，根据规范提供具体的功能，这就叫实现，。只根据接口的规范来使用功能，屏蔽其内部实现，这就叫面向接口编程。过了一段时间，绝世起重机出故障了，公司A也跑路了，于是公司B依据规范造了一台更厉害的巨无霸起重机，由于同样具有起重和吊货的功能，可以与绝世起重机无缝衔接，并不影响建筑进度，建筑得以顺利完成，内部实现改变而功能不变，不影响之前的使用，可以随意替换，这就是面向接口编程的好处。\",\"接下来会用Go描述上述情形\",\"// 起重机接口 type Crane interface { JackUp() string Hoist() string } // 起重机A type CraneA struct { work int //内部的字段不同代表内部细节不一样 } func (c CraneA) Work() { fmt.Println(\\\"使用技术A\\\") } func (c CraneA) JackUp() string { c.Work() return \\\"jackup\\\" } func (c CraneA) Hoist() string { c.Work() return \\\"hoist\\\" } // 起重机B type CraneB struct { boot string } func (c CraneB) Boot() { fmt.Println(\\\"使用技术B\\\") } func (c CraneB) JackUp() string { c.Boot() return \\\"jackup\\\" } func (c CraneB) Hoist() string { c.Boot() return \\\"hoist\\\" } type ConstructionCompany struct { Crane Crane // 只根据Crane类型来存放起重机 } func (c *ConstructionCompany) Build() { fmt.Println(c.Crane.JackUp()) fmt.Println(c.Crane.Hoist()) fmt.Println(\\\"建筑完成\\\") } func main() { // 使用起重机A company := ConstructionCompany{CraneA{}} company.Build() fmt.Println() // 更换起重机B company.Crane = CraneB{} company.Build() }\",\"输出\",\"使用技术A jackup 使用技术A hoist 建筑完成 使用技术B jackup 使用技术B hoist 建筑完成\",\"上面例子中，可以观察到接口的实现是隐式的，也对应了官方对于基本接口实现的定义：方法集是接口方法集的超集，所以在Go中，实现一个接口不需要implements关键字显式的去指定要实现哪一个接口，只要是实现了一个接口的全部方法，那就是实现了该接口。有了实现之后，就可以初始化接口了，建筑公司结构体内部声明了一个Crane类型的成员变量，可以保存所有实现了Crane接口的值，由于是Crane 类型的变量，所以能够访问到的方法只有JackUp 和Hoist，内部的其他方法例如Work和Boot都无法访问。\",\"之前提到过任何自定义类型都可以拥有方法，那么根据实现的定义，任何自定义类型都可以实现接口，下面举几个比较特殊的例子。\",\"type Person interface { Say(string) string Walk(int) } type Man interface { Exercise() Person }\",\"Man接口方法集是Person的超集，所以Man也实现了接口Person，不过这更像是一种\\\"继承\\\"。\",\"type Number int func (n Number) Say(s string) string { return \\\"bibibibibi\\\" } func (n Number) Walk(i int) { fmt.Println(\\\"can not walk\\\") }\",\"类型Number的底层类型是int，虽然这放在其他语言中看起来很离谱，但Number的方法集确实是Person 的超集，所以也算实现。\",\"type Func func() func (f Func) Say(s string) string { f() return \\\"bibibibibi\\\" } func (f Func) Walk(i int) { f() fmt.Println(\\\"can not walk\\\") } func main() { var function Func function = func() { fmt.Println(\\\"do somthing\\\") } function() }\",\"同样的，函数类型也可以实现接口。\"]},\"294\":{\"h\":\"空接口\",\"t\":[\"type Any interface{ }\",\"Any接口内部没有方法集合，根据实现的定义，所有类型都是Any接口的的实现，因为所有类型的方法集都是空集的超集，所以Any接口可以保存任何类型的值。\",\"func main() { var anything Any anything = 1 println(anything) fmt.Println(anything) anything = \\\"something\\\" println(anything) fmt.Println(anything) anything = complex(1, 2) println(anything) fmt.Println(anything) anything = 1.2 println(anything) fmt.Println(anything) anything = []int{} println(anything) fmt.Println(anything) anything = map[string]int{} println(anything) fmt.Println(anything) }\",\"输出\",\"(0xe63580,0xeb8b08) 1 (0xe63d80,0xeb8c48) something (0xe62ac0,0xeb8c58) (1+2i) (0xe62e00,0xeb8b00) 1.2 (0xe61a00,0xc0000080d8) [] (0xe69720,0xc00007a7b0) map[]\",\"通过输出会发现，两种输出的结果不一致，其实接口内部可以看成是一个由(val,type)组成的元组，type是具体类型，在调用方法时会去调用具体类型的具体值。\",\"interface{}\",\"这也是一个空接口，不过是一个匿名空接口，在开发时通常会使用匿名空接口来表示接收任何类型的值，例子如下\",\"func main() { DoSomething(map[int]string{}) } func DoSomething(anything interface{}) interface{} { return anything }\",\"在后续的更新中，官方提出了另一种解决办法，为了方便起见，可以使用any来替代interace{}，两者是完全等价的，因为前者仅仅只是一个类型别名，如下\",\"type any = interface{}\",\"在比较空接口时，会对其底层类型进行比较，如果类型不匹配的话则为false，其次才是值的比较，例如\",\"func main() { var a interface{} var b interface{} a = 1 b = \\\"1\\\" fmt.Println(a == b) a = 1 b = 1 fmt.Println(a == b) }\",\"输出为\",\"false true\",\"如果底层的类型是不可比较的，那么会panic，对于Go而言，内置数据类型是否可比较的情况如下\",\"类型\",\"可比较\",\"依据\",\"数字类型\",\"是\",\"值是否相等\",\"字符串类型\",\"是\",\"值是否相等\",\"数组类型\",\"是\",\"数组的全部元素是否相等\",\"切片类型\",\"否\",\"不可比较\",\"结构体\",\"是\",\"字段值是否全部相等\",\"map类型\",\"否\",\"不可比较\",\"通道\",\"是\",\"地址是否相等\",\"指针\",\"是\",\"指针存储的地址是否相等\",\"接口\",\"是\",\"底层所存储的数据是否相等\",\"在Go中有一个专门的接口类型用于代表所有可比较类型，即comparable\",\"type comparable interface{ comparable }\",\"提示\",\"如果尝试对不可比较的类型进行比较，则会panic\"]},\"295\":{\"h\":\"通用接口\",\"t\":[\"通用接口就是为了泛型服务的，只要掌握了泛型，就掌握了通用接口，请移步泛型\"]},\"296\":{\"h\":\"CGO\",\"t\":[\"由于go需要GC，对于一些性能要求更高的场景，go可能不太适合处理，c作为传统的系统编程语言性能是非常优秀的，而cgo可以将两者联系起来，相互调用，让go调用c，将性能敏感的任务交给c去完成，go负责处理上层逻辑，cgo同样支持c调用go，不过这种场景比较少见，也不太建议这么做。\",\"提示\",\"文中代码演示的环境是win10，命令行用的是gitbash，windows用户建议提前安装好mingw。\",\"关于cgo，官方有一个简单的介绍：C? Go? Cgo! - The Go Programming Language，如果想要更详细的介绍，可以在标准库cmd/cgo/doc.go中获取更加详细的信息，或者也可以直接看文档cgo command - cmd/cgo - Go Packages，两者内容是完全一样的。\"]},\"297\":{\"h\":\"代码调用\",\"t\":[\"看下面一个例子\",\"package main //#include <stdio.h> import \\\"C\\\" func main() { C.puts(C.CString(\\\"hello, cgo!\\\")) }\",\"想要使用cgo特性，通过导入语句import \\\"C\\\"即可开启，需要注意的是C必须是大写字母，且导入名称无法被重写，同时需要确保环境变量CGO_ENABLED是否设置为1，在默认情况下该环境变量是默认启用的。\",\"$ go env | grep CGO $ go env -w CGO_ENABLED=1\",\"除此之外，还需要确保本地拥有C/C++的构建工具链，也就是gcc，在windows平台就是mingw，这样才能确保程序正常通过编译。执行如下命令进行编译，开启了cgo以后编译时间是要比纯go要更久的。\",\"$ go build -o ./ main.go $ ./main.exe hello, cgo!\",\"另外要注意的一个点就是，开启cgo以后，将无法支持交叉编译。\"]},\"298\":{\"h\":\"go嵌入c代码\",\"t\":[\"cgo支持直接把c代码写在go源文件中，然后直接调用，看下面的例子，例子中编写了一个名为printSum的函数，然后在go中的main函数进行调用。\",\"package main /* #include <stdio.h> void printSum(int a, int b) { printf(\\\"c:%d+%d=%d\\\",a,b,a+b); } */ import \\\"C\\\" func main() { C.printSum(C.int(1), C.int(2)) }\",\"输出\",\"c:1+2=3\",\"这适用于简单的场景，如果c代码非常多，跟go代码糅杂在一起十分降低可读性，就不太适合这么做。\",\"错误处理\",\"在go语言中错误处理以返回值的形式返回，但c语言不允许有多返回值，为此可以使用c中的errno，表示在函数调用期间发生了错误，cgo对此做了兼容，在调用c函数时可以像go一样用返回值来处理错误。要使用errno，首先引入errno.h，看下面的一个例子\",\"package main /* #include <stdio.h> #include <stdint.h> #include <errno.h> int32_t sum_positive(int32_t a, int32_t b) { if (a <= 0 || b <= 0) { errno = EINVAL; return 0; } return a + b; } */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { sum, err := C.sum_positive(C.int32_t(0), C.int32_t(1)) if err != nil { fmt.Println(reflect.TypeOf(err)) fmt.Println(err) return } fmt.Println(sum) }\",\"输出\",\"syscall.Errno The device does not recognize the command.\",\"可以看到它的错误类型是syscall.Errno，errno.h中还定义了其它很多错误代码，可以自己去了解。\"]},\"299\":{\"h\":\"go引入c文件\",\"t\":[\"通过引入c文件，就可以很好的解决上述的问题，首先创建一个头文件sum.h，内容如下\",\"int sum(int a, int b);\",\"然后再创建sum.c，编写具体的函数\",\"#include \\\"sum.h\\\" int sum(int a, int b) { return a + b; }\",\"然后在main.go中导入头文件\",\"package main //#include \\\"sum.h\\\" import \\\"C\\\" import \\\"fmt\\\" func main() { res := C.sum(C.int(1), C.int(2)) fmt.Printf(\\\"cgo sum: %d\\\\n\\\", res) }\",\"现在进行编译的话，必须要指定当前文件夹，否则找不到c文件，如下\",\"$ go build -o sum.exe . && ./sum.exe cgo sum: 3\",\"代码中res是go中的一个变量，C.sum是c语言中的函数，它的返回值是c语言中的int而非go中的int，之所以能成功调用，是因为cgo从中做了类型转换。\"]},\"300\":{\"h\":\"c调用go\",\"t\":[\"c调用go，指的是在cgo中c调用go，而非原生的c程序调用go，它们是这样一个调用链go-cgo-c->cgo->go。go调用c是为了利用c的生态和性能，几乎没有原生的c程序调用go这种需求，如果有的话也建议通过网络通信来代替。\",\"cgo支持导出go函数让c调用，如果要导出go函数，需在函数签名上方加上//export func_name注释，并且其参数和返回值都得是cgo支持的类型，例子如下\",\"//export sum func sum(a, b C.int32_t) C.int32_t { return a + b }\",\"改写刚刚的sum.c文件为如下内容\",\"#include <stdint.h> #include <stdio.h> #include \\\"sum.h\\\" #include \\\"_cgo_export.h\\\" extern int32_t sum(int32_t a, int32_t b); void do_sum() { int32_t a = 10; int32_t b = 10; int32_t c = sum(a, b); printf(\\\"%d\\\", c); }\",\"同时修改头文件sum.h\",\"void do_sum();\",\"然后在go中导出函数\",\"package main /* #include <stdio.h> #include <stdint.h> #include \\\"sum.h\\\" */ import \\\"C\\\" func main() { C.do_sum() } //export sum func sum(a, b C.int32_t) C.int32_t { return a + b }\",\"现在c中使用的sum函数实际上是go提供的，输出结果如下\",\"20\",\"关键点在于sum.c文件中导入的_cgo_export.h，它包含了有关所有go导出的类型，如果不导入的话就无法使用go导出的函数。另一个注意点是_cgo_export.h不能在go文件导入，因为该头文件生成的前提是所有go源文件能够通过编译。因此下面这种写法是错误的\",\"package main /* #include <stdint.h> #include <stdio.h> #include \\\"_cgo_export.h\\\" void do_sum() { int32_t a = 10; int32_t b = 10; int32_t c = sum(a, b); printf(\\\"%d\\\", c); } */ import \\\"C\\\" func main() { C.do_sum() } //export sum func sum(a, b C.int32_t) C.int32_t { return a + b }\",\"编译器会提示头文件不存在\",\"fatal error: _cgo_export.h: No such file or directory #include \\\"_cgo_export.h\\\" ^~~~~~~~~~~~~~~ compilation terminated.\",\"倘若go函数具有多个返回值，那么c调用时将返回一个结构体。\",\"顺带一提，我们可以把go指针通过c函数参数传递给c，在c函数调用期间cgo会尽量保证内存安全，但是导出的go函数返回值不能带指针，因为在这种情况下cgo没法判断其是否被引用，也不好固定内存，如果返回的内存被引用了，然后在go中这段内存被GC掉了或者发生偏移，将导致指针越界，如下所示。\",\"//export newCharPtr func newCharPtr() *C.char { return new(C.char) }\",\"上面的写法默认是不允许通过编译的，如果想要关闭这个检查，可以如下设置。\",\"GODEBUG=cgocheck=0\",\"它有两种检查级别，可以设为1，2，级别越高检查造成运行时开销越大，可以 前往cgo command - passing_pointer了解细节。\"]},\"301\":{\"h\":\"类型转换\",\"t\":[\"cgo对c与go之间的类型做了一个映射，方便它们在运行时调用。对于c中的类型，在go中导入import \\\"C\\\"之后，大部分情况下可以通过\",\"C.typename\",\"这种方式来直接访问，比如\",\"C.int(1) C.char('a')\",\"但c语言类型可以由多个关键字组成，比如\",\"unsigned char\",\"这种情况就没法直接访问了，不过可以使用c中的typedef关键字来给类型取个别名，其功能等同于go中的类型别名。如下\",\"typedef unsigned char byte;\",\"这样一来，就可以通过C.byte来访问类型unsigned char了。例子如下\",\"package main /* #include <stdio.h> typedef unsigned char byte; void printByte(byte b) { printf(\\\"%c\\\\n\\\",b); } */ import \\\"C\\\" func main() { C.printByte(C.byte('a')) C.printByte(C.byte('b')) C.printByte(C.byte('c')) }\",\"输出\",\"a b c\",\"大部分情况下，cgo给常用类型（基本类型之类的）已经取好了别名，也可以根据上述的方法自己定义，不会冲突。\"]},\"302\":{\"h\":\"char\",\"t\":[\"c中的char对应go中的int8类型，unsigned char对应go中的uint8也就是byte类型。\",\"package main /* #include <stdio.h> #include<complex.h> char ch; char get() { return ch; } void set(char c) { ch = c; } */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { C.set(C.char('c')) res := C.get() fmt.Printf(\\\"type: %s, val: %v\\\", reflect.TypeOf(res), res) }\",\"输出\",\"type: main._Ctype_char, val: 99\",\"如果将set的参数换成C.char(math.MaxInt8 + 1)，那么编译就会失败，并提示如下错误\",\"cannot convert math.MaxInt8 + 1 (untyped int constant 128) to type _Ctype_char\"]},\"303\":{\"h\":\"字符串\",\"t\":[\"cgo提供了一些伪函数用于在c和go之间传递字符串和字节切片，这些函数实际上并不存在，你也没法找到它们的定义，就跟import \\\"C\\\"一样，C这个包也是不存在的，只是为了方便开发者使用，在编译后它们会被转换成其它的操作。\",\"// Go string to C string // The C string is allocated in the C heap using malloc. // It is the caller's responsibility to arrange for it to be // freed, such as by calling C.free (be sure to include stdlib.h // if C.free is needed). func C.CString(string) *C.char // Go []byte slice to C array // The C array is allocated in the C heap using malloc. // It is the caller's responsibility to arrange for it to be // freed, such as by calling C.free (be sure to include stdlib.h // if C.free is needed). func C.CBytes([]byte) unsafe.Pointer // C string to Go string func C.GoString(*C.char) string // C data with explicit length to Go string func C.GoStringN(*C.char, C.int) string // C data with explicit length to Go []byte func C.GoBytes(unsafe.Pointer, C.int) []byte\",\"go中的字符串本质上是一个结构体，里面持有着一个底层数组的引用，在传递给c函数时，需要使用C.CString()在c中使用malloc创建一个“字符串”，为其分配内存空间，然后返回一个c指针，因为c中没有字符串这个类型，通常会使用char*来表示字符串，也就是一个字符数组的指针，使用完毕后记得使用free释放内存。\",\"package main /* #include <stdio.h> #include <stdlib.h> void printfGoString(char* s) { puts(s); } */ import \\\"C\\\" import \\\"unsafe\\\" func main() { cstring := C.CString(\\\"this is a go string\\\") C.printfGoString(cstring) C.free(unsafe.Pointer(cstring)) }\",\"也可以是char数组类型，两者其实都一样，都是指向头部元素的指针。\",\"void printfGoString(char s[]) { puts(s); }\",\"也可以传递字节切片，由于C.CBytes()会返回一个unsafe.Pointer，在传递给c函数之前要将其转换为*C.char类型。\",\"package main /* #include <stdio.h> #include <stdlib.h> void printfGoString(char* s) { puts(s); } */ import \\\"C\\\" import \\\"unsafe\\\" func main() { cbytes := C.CBytes([]byte(\\\"this is a go string\\\")) C.printfGoString((*C.char)(cbytes)) C.free(unsafe.Pointer(cbytes)) }\",\"上面的例子输出都是一样的\",\"this is a go string\",\"上述这几种字符串传递方法涉及到了一次内存拷贝，在传递过后实际上是在c内存和go内存中各自保存了一份，这样做会更安全。话虽如此，我们依然可以直接传递指针给c函数，也可以在c中直接修改go中的字符串，看下面的例子\",\"package main /* #include <stdio.h> #include <stdlib.h> void printfGoString(char* s) { puts(s); } */ import \\\"C\\\" import \\\"unsafe\\\" func main() { ptr := unsafe.Pointer(unsafe.SliceData([]byte(\\\"this is a go string\\\"))) C.printfGoString((*C.char)(ptr)) }\",\"输出\",\"this is a go string\",\"例子通过unsafe.SliceData直接获取了字符串底层数组的指针，并将其转换为了c指针后传递给c函数，该字符串的内存是由go进行管理的，自然也就不再需要free，这样做的好处就是传递的过程不再需要拷贝，但有一定的风险。下面的例子演示了在c中修改go中的字符串\",\"package main /* #include <stdio.h> #include <stdlib.h> void printfGoString(char* s, int len) { puts(s); s[8] = 'c'; puts(s); } */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"unsafe\\\" ) func main() { var buf []byte buf = []byte(\\\"this is a go string\\\") ptr := unsafe.Pointer(unsafe.SliceData(buf)) C.printfGoString((*C.char)(ptr), C.int(len(buf))) fmt.Println(string(buf)) }\",\"输出\",\"this is a go string this is c go string this is c go string\"]},\"304\":{\"h\":\"整数\",\"t\":[\"go与c之间的整数映射关系如下表所示，关于整数的类型映射还在可以在标准库cmd/cgo/gcc.go看到一些相关信息。\",\"go\",\"c\",\"cgo\",\"int8\",\"singed char\",\"C.schar\",\"uint8\",\"unsigned char\",\"C.uchar\",\"int16\",\"short\",\"C.short\",\"uint16\",\"unsigned short\",\"C.ushort\",\"int32\",\"int\",\"C.int\",\"uint32\",\"unsigned int\",\"C.uint\",\"int32\",\"long\",\"C.long\",\"uint32\",\"unsigned long\",\"C.ulong\",\"int64\",\"long long int\",\"C.longlong\",\"uint64\",\"unsigned long long int\",\"C.ulonglong\",\"示例代码如下\",\"package main /* #include <stdio.h> void printGoInt8(signed char n) { printf(\\\"%d\\\\n\\\",n); } void printGoUInt8(unsigned char n) { printf(\\\"%d\\\\n\\\",n); } void printGoInt16(signed short n) { printf(\\\"%d\\\\n\\\",n); } void printGoUInt16(unsigned short n) { printf(\\\"%d\\\\n\\\",n); } void printGoInt32(signed int n) { printf(\\\"%d\\\\n\\\",n); } void printGoUInt32(unsigned int n) { printf(\\\"%d\\\\n\\\",n); } void printGoInt64(signed long long int n) { printf(\\\"%ld\\\\n\\\",n); } void printGoUInt64(unsigned long long int n) { printf(\\\"%ld\\\\n\\\",n); } */ import \\\"C\\\" func main() { C.printGoInt8(C.schar(1)) C.printGoInt8(C.schar(1)) C.printGoInt16(C.short(1)) C.printGoUInt16(C.ushort(1)) C.printGoInt32(C.int(1)) C.printGoUInt32(C.uint(1)) C.printGoInt64(C.longlong(1)) C.printGoUInt64(C.ulonglong(1)) }\",\"cgo同时也对<stdint.h>的整数类型提供了支持，这里的类型内存大小更为清晰明确，而且其命名风格也与go非常相似。\",\"go\",\"c\",\"cgo\",\"int8\",\"int8_t\",\"C.int8_t\",\"uint8\",\"uint8_t\",\"C.uint8_t\",\"int16\",\"int16_t\",\"C.int16_t\",\"uint16\",\"uint16_t\",\"C.uint16_t\",\"int32\",\"int32_t\",\"C.int32_t\",\"uint32\",\"uint32_t\",\"C.uint32_t\",\"int64\",\"int64_t\",\"C.int64_t\",\"uint64\",\"uint64_t\",\"C.uint64_t\",\"在使用cgo时，建议使用<stdint.h>中的整数类型。\"]},\"305\":{\"h\":\"浮点数\",\"t\":[\"go与c的浮点数类型映射如下\",\"go\",\"c\",\"cgo\",\"float32\",\"float\",\"C.float\",\"float64\",\"double\",\"C.double\",\"代码示例如下\",\"package main /* #include <stdio.h> void printGoFloat32(float n) { printf(\\\"%f\\\\n\\\",n); } void printGoFloat64(double n) { printf(\\\"%lf\\\\n\\\",n); } */ import \\\"C\\\" func main() { C.printGoFloat32(C.float(1.11)) C.printGoFloat64(C.double(3.14)) }\"]},\"306\":{\"h\":\"切片\",\"t\":[\"切片的情况的实际上跟上面讲到的字符串差不多，不过区别在于cgo没有提供伪函数来对切片进行拷贝，想让c访问到go中的切片就只能把切片的指针传过去。看下面的一个例子\",\"package main /* #include <stdio.h> #include <stdint.h> void printInt32Arr(int32_t* s, int32_t len) { for (int32_t i = 0; i < len; i++) { printf(\\\"%d \\\", s[i]); } } */ import \\\"C\\\" import ( \\\"unsafe\\\" ) func main() { var arr []int32 for i := 0; i < 10; i++ { arr = append(arr, int32(i)) } ptr := unsafe.Pointer(unsafe.SliceData(arr)) C.printInt32Arr((*C.int32_t)(ptr), C.int(len(arr))) }\",\"输出\",\"0 1 2 3 4 5 6 7 8 9\",\"这里将切片的底层数组的指针传递给了c函数，由于该数组的内存是由go管理，不建议c长期持有其指针引用。反过来，将c的数组作为go切片的底层数组的例子如下\",\"package main /* #include <stdio.h> #include <stdint.h> int32_t s[] = {1, 2, 3, 4, 5, 6, 7}; */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"unsafe\\\" ) func main() { l := unsafe.Sizeof(C.s) / unsafe.Sizeof(C.s[0]) fmt.Println(l) goslice := unsafe.Slice(&C.s[0], l) for i, e := range goslice { fmt.Println(i, e) } }\",\"输出\",\"7 0 1 1 2 2 3 3 4 4 5 5 6 6 7\",\"通过unsafe.Slice函数可以将数组指针转换为切片，按照直觉来说，c中的数组就是一个指向头部元素的指针，按照常理来说应该这样使用\",\"goslice := unsafe.Slice(&C.s, l)\",\"通过输出可以看到，如果这样做的话，除了第一个元素，剩下的内存全都越界了。\",\"0 [1 2 3 4 5 6 7] 1 [0 -1 0 0 0 3432824 0] 2 [0 0 -1 -1 0 0 -1] 3 [0 0 0 255 0 0 0] 4 [2 0 0 0 3432544 0 0] 5 [0 3432576 0 3432592 0 3432608 0] 6 [0 0 3432624 0 0 0 1422773729]\",\"即便c中的数组只是一个头指针，经过cgo包裹了一下就成了go数组，有了自己的地址，所以应该对数组头部元素取址。\",\"goslice := unsafe.Slice(&C.s[0], l)\"]},\"307\":{\"h\":\"结构体\",\"t\":[\"通过C.struct_前缀加上结构体名称，就可以访问c结构体，c结构体无法被当作匿名结构体嵌入go结构体。下面是一个简单的c结构体的例子\",\"package main /* #include <stdio.h> #include <stdint.h> struct person { int32_t age; char* name; }; */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { var p C.struct_person p.age = C.int32_t(18) p.name = C.CString(\\\"john\\\") fmt.Println(reflect.TypeOf(p)) fmt.Printf(\\\"%+v\\\", p) }\",\"输出\",\"main._Ctype_struct_person {age:18 name:0x1dd043b6e30}\",\"如果c结构体的某些成员包含bit-field，cgo就会忽略这类结构体成员，比如将person修改为下面这种\",\"struct person { int32_t age: 1; char* name; };\",\"再次执行就会报错\",\"p.age undefined (type _Ctype_struct_person has no field or method age)\",\"c和go的结构体字段的内存对齐规则并不相同，如果开启了cgo，大部分情况下会以c为主导。\"]},\"308\":{\"h\":\"联合体\",\"t\":[\"使用C.union_加上名称就可以访问c中的联合体，由于go并不支持联合体，它们在go中会以字节数组的形式存在。下面是一个简单的例子\",\"package main /* #include <stdio.h> #include <stdint.h> union data { int32_t age; char ch; }; */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { var u C.union_data fmt.Println(reflect.TypeOf(u), u) }\",\"输出\",\"[4]uint8 [0 0 0 0]\",\"通过unsafe.Pointer可以进行访问和修改\",\"func main() { var u C.union_data ptr := (*C.int32_t)(unsafe.Pointer(&u)) fmt.Println(*ptr) *ptr = C.int32_t(1024) fmt.Println(*ptr) fmt.Println(u) }\",\"输出\",\"0 1024 [0 4 0 0]\"]},\"309\":{\"h\":\"枚举\",\"t\":[\"通过前缀C.enum_加上枚举类型名就可以访问c中的枚举类型。下面是一个简单的例子\",\"package main /* #include <stdio.h> #include <stdint.h> enum player_state { alive, dead, }; */ import \\\"C\\\" import \\\"fmt\\\" type State C.enum_player_state func (s State) String() string { switch s { case C.alive: return \\\"alive\\\" case C.dead: return \\\"dead\\\" default: return \\\"unknown\\\" } } func main() { fmt.Println(C.alive, State(C.alive)) fmt.Println(C.dead, State(C.dead)) }\",\"输出\",\"0 alive 1 dead\"]},\"310\":{\"h\":\"指针\",\"t\":[\"谈到了指针避不开内存，cgo之间相互调用最大的问题就是两门语言的内存模型并不相同，c语言的内存完全是由开发者手动管理，用malloc()分配内存，free()释放内存，如果不去手动释放，它是绝对不会自己释放掉的，所以c的内存管理是非常稳定的。而go就不一样了，它带有GC，并且Goroutine的栈空间是会动态调整的，当栈空间不足时会进行增长，那么这样一来，内存地址就可能发生了变化，跟上图一样（图画的并不严谨），指针可能就成了c中常见的悬挂指针。即便cgo在大多数情况可以避免内存移动（由runtime.Pinner来固定内存），但go官方也不建议在c中长期引用go的内存。但是反过来，go中的指针引用c中的内存的话，是比较安全的，除非手动调用C.free()，否则这块内存是不会被自动释放掉的。\",\"如果要在c和go之间传递指针，就需要先将其转为unsafe.Pointer，然后再转换成对应的指针类型，就跟c中的void*一样。看两个例子，第一个是c指针引用go变量的例子，而且还对变量做了修改。\",\"package main /* #include <stdio.h> #include <stdint.h> void printNum(int32_t* s) { printf(\\\"%d\\\\n\\\", *s); *s = 3; printf(\\\"%d\\\\n\\\", *s); } */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"unsafe\\\" ) func main() { var num int32 = 1 ptr := unsafe.Pointer(&num) C.printNum((*C.int32_t)(ptr)) fmt.Println(num) }\",\"输出\",\"1 3 3\",\"第二个是go指针引用c变量，并对其修改的例子。\",\"package main /* #include <stdio.h> #include <stdint.h> int32_t num = 10; */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"unsafe\\\" ) func main() { fmt.Println(C.num) ptr := unsafe.Pointer(&C.num) iptr := (*int32)(ptr) *iptr++ fmt.Println(C.num) }\",\"输出\",\"10 11\",\"顺带一提，cgo不支持c中的函数指针。\"]},\"311\":{\"h\":\"链接库\",\"t\":[\"c语言并没有像go这样的依赖管理，想要直接使用别人写好的库除了直接获取源代码之外，还有个办法就是静态链接库和动态链接库，cgo也支持这些，得益于此，我们就可以在go程序中导入别人写好的库，而不需要源代码。\"]},\"312\":{\"h\":\"动态链接库\",\"t\":[\"动态链接库无法单独运行，它在运行时会与可执行文件一起加载到内存中，下面演示制作一个简单的动态链接库，并使用cgo进行调用。首先准备一个lib/sum.c文件，内容如下\",\"#include <stdint.h> int32_t sum(int32_t a, int32_t b) { return a + b; }\",\"编写头文件lib/sum.h\",\"#include <stdint.h> int sum(int32_t a, int32_t b);\",\"接下来使用gcc来制作动态链接库，首先编译生成目标文件\",\"$ cd lib $ gcc -c sum.c -o sum.o\",\"然后制作动态链接库\",\"$ gcc -shared -o libsum.dll sum.o\",\"制作完成后，然后在go代码中引入sum.h头文件，并且还得通过宏告诉cgo去哪里寻找库文件\",\"package main /* #cgo CFLAGS: -I ./lib #cgo LDFLAGS: -L${SRCDIR}/lib -llibsum #include \\\"sum.h\\\" */ import \\\"C\\\" import \\\"fmt\\\" func main() { res := C.sum(C.int32_t(1), C.int32_t(2)) fmt.Println(res) }\",\"CFLAGS: -I指的是搜索头文件的相对路径，\",\"-L指的是库搜索路径，${SRCDIR}代指当前路径的绝对路径，因为它的参数必须是绝对路径\",\"-l指的是库文件的名称，sum就是sum.dll。\",\"CFFLAGS和LDFLAGS这两个都是gcc的编译选项，出安全考虑，cgo禁用了一些参数，前往cgo command了解细节。\",\"把动态库放到exe的同级目录下\",\"$ ls go.mod go.sum lib/ libsum.dll* main.exe* main.go\",\"最后编译go程序并执行\",\"$ go build main.go && ./main.exe 3\",\"到此动态链接库调用成功。\"]},\"313\":{\"h\":\"静态链接库\",\"t\":[\"不同于动态链接库，使用cgo导入静态链接库时，它会与go的目标文件最终链接成一个可执行文件。还是拿sum.c举例，先将源文件编译成目标文件\",\"$ gcc -o sum.o -c sum.c\",\"然后将目标文件打包成静态链接库（必须是lib前缀开头，不然会找不到）\",\"$ ar rcs libsum.a sum.o\",\"go文件内容\",\"package main /* #cgo CFLAGS: -I ./lib #cgo LDFLAGS: -L${SRCDIR}/lib -llibsum #include \\\"sum.h\\\" */ import \\\"C\\\" import \\\"fmt\\\" func main() { res := C.sum(C.int32_t(1), C.int32_t(2)) fmt.Println(res) }\",\"编译\",\"$ go build && ./main.exe 3\",\"到此，静态链接库调用成功。\"]},\"314\":{\"h\":\"最后\",\"t\":[\"虽然使用cgo的出发点是为了性能，但在c与go之间切换也会不小的造成性能损失，对于一些十分简单的任务，cgo的效率并不如纯go。看一个例子\",\"package main /* #include <stdint.h> int32_t cgo_sum(int32_t a, int32_t b) { return a + b; } */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"time\\\" ) func go_sum(a, b int32) int32 { return a + b } func testSum(N int, do func()) int64 { var sum int64 for i := 0; i < N; i++ { start := time.Now() do() sum += time.Now().Sub(start).Nanoseconds() } return sum / int64(N) } func main() { N := 1000_000 nsop1 := testSum(N, func() { C.cgo_sum(C.int32_t(1), C.int32_t(2)) }) fmt.Printf(\\\"cgo_sum: %d ns/op\\\\n\\\", nsop1) nsop2 := testSum(N, func() { go_sum(1, 2) }) fmt.Printf(\\\"pure_go_sum: %d ns/op\\\\n\\\", nsop2) }\",\"这是一个非常简单的测试，分别用c和go编写了一个两数求和的函数，然后各自运行100w次，求其平均耗时，测试结果如下\",\"cgo_sum: 49 ns/op pure_go_sum: 2 ns/op\",\"从结果可以看到，cgo的平均耗时是纯go的二十几倍，倘若执行的不是单纯的两数相加，而是一个比较耗时的任务，cgo的优势会更大一些。除此之外，使用cgo还有以下缺点\",\"许多go配套工具链将无法使用，比如gotest，pprof，上面的测试例子就不能使用gotest，只能自己手写。\",\"编译速度变慢，自带的交叉编译也没法用了\",\"内存安全问题\",\"依赖问题，如果别人用了你的库，等于也要开启cgo。\",\"在没有考虑周全之前，不要在项目中引入cgo，对于一些十分复杂的任务，使用cgo确实可以带来好处，但如果只是一些简单的任务，还是老老实实用go吧。\"]},\"315\":{\"h\":\"性能分析\",\"t\":[\"当一个程序编写完毕后，我们对它的要求不仅仅只是能运行，还希望它是一个稳定高效的应用。通过各种各样的测试，我们可以保证程序大部分的稳定性，而程序是否高效，就需要我们对其进行性能分析，在此前的内容中，性能分析的唯一手段就只能通过Benchmark来测试某一个功能单元的平均执行耗时，内存分配情况等，然而现实中对程序性能分析的需求远远不止于此，有时候我们需要分析程序整体的CPU占用，内存占用，堆分配情况，协程状态，热点代码路径等等，这是Benchmark所不能满足的。好在go工具链集成了许多性能分析工具以供开发者使用，下面就来逐一讲解。\"]},\"316\":{\"h\":\"逃逸分析\",\"t\":[\"在go中，变量的内存分配是由编译器决定的，一般就分配到栈上和堆上这两个地方。如果一个本该分配到栈上的变量被分配到了堆上，那么这种情况就称之为逃逸，逃逸分析便是要分析程序中的内存分配情况，由于它是在编译期进行，所以是静态分析的一种。\",\"提示\",\"前往内存分配文章了解go具体是如分配内存的。\"]},\"317\":{\"h\":\"引用局部指针\",\"t\":[\"package main func main() { GetPerson() } type Person struct { Name string Mom *Person } func GetPerson() Person { mom := Person{Name: \\\"lili\\\"} son := Person{Name: \\\"jack\\\", Mom: &mom} return son }\",\"GetPerson函数中创建了mom变量，由于它是函数内创建的，本来应该是将其分配到栈上，但是它被son的Mom字段所引用了，并且son被作为了函数返回值返回出去，所以编译器就将其分配到了堆上。这是一个很简单的示例，所以理解起来不需要花费太多力气，但如果是一个大点的项目，代码行数有好几万，人工分析就不是那么的轻松了，为此就需要使用工具来进行逃逸分析。前面提到过内存的分配是由编译器主导的，所以逃逸分析也是由编译器来完成，使用起来十分简单，只需要执行如下命令：\",\"$ go build -gcflags=\\\"-m -m -l\\\"\",\"gcflags即编译器gc的参数，\",\"-m，打印出代码优化建议，同时出现两个会更加进行细节的输出\",\"-l，禁用内联优化\",\"输出如下\",\"$ go build -gcflags=\\\"-m -m -l\\\" . # golearn/example ./main.go:13:2: mom escapes to heap: ./main.go:13:2: flow: son = &mom: ./main.go:13:2: from &mom (address-of) at ./main.go:14:35 ./main.go:13:2: from Person{...} (struct literal element) at ./main.go:14:15 ./main.go:13:2: from son := Person{...} (assign) at ./main.go:14:6 ./main.go:13:2: flow: ~r0 = son: ./main.go:13:2: from return son (return) at ./main.go:15:2 ./main.go:13:2: moved to heap: mom\",\"编译器很明确的告诉了我们变量mom发生了逃逸，导致原因是因为返回值包含了函数内的局部指针，除了这种情况外还有其它情况可能会发生逃逸现象\",\"::: tips\",\"如果你对逃逸分析的细节感兴趣，可以在标准库cmd/compile/internal/escape/escape.go里面了解到更多内容。\",\":::\"]},\"318\":{\"h\":\"闭包引用\",\"t\":[\"闭包引用了函数外的变量，那么该变量也会逃逸到堆上，这个很好理解。\",\"package main func main() { a := make([]string, 0) do(func() []string { return a }) } func do(f func() []string) []string { return f() }\",\"输出\",\"$ go build -gcflags=\\\"-m -m -l\\\" . # golearn/example ./main.go:10:9: f does not escape ./main.go:4:2: main capturing by value: a (addr=false assign=false width=24) ./main.go:4:11: make([]string, 0) escapes to heap: ./main.go:4:11: flow: a = &{storage for make([]string, 0)}: ./main.go:4:11: from make([]string, 0) (spill) at ./main.go:4:11 ./main.go:4:11: from a := make([]string, 0) (assign) at ./main.go:4:4 ./main.go:4:11: flow: ~r0 = a: ./main.go:4:11: from return a (return) at ./main.go:6:3 ./main.go:4:11: make([]string, 0) escapes to heap ./main.go:5:5: func literal does not escape\"]},\"319\":{\"h\":\"空间不足\",\"t\":[\"栈空间不足时，也会发生逃逸现象，下面创建的切片申请了1<<15的容量\",\"package main func main() { _ = make([]int, 0, 1<<15) }\",\"输出\",\"$ go build -gcflags=\\\"-m -m -l\\\" . # golearn/example ./main.go:4:10: make([]int, 0, 32768) escapes to heap: ./main.go:4:10: flow: {heap} = &{storage for make([]int, 0, 32768)}: ./main.go:4:10: from make([]int, 0, 32768) (too large for stack) at ./main.go:4:10 ./main.go:4:10: make([]int, 0, 32768) escapes to heap\"]},\"320\":{\"h\":\"长度未知\",\"t\":[\"当切片的长度是一个变量的时候，由于其长度未知，便会发生逃逸现象（map并不会）\",\"package main func main() { n := 100 _ = make([]int, n) }\",\"输出\",\"$ go build -gcflags=\\\"-m -m -l\\\" . # golearn/example ./main.go:5:10: make([]int, n) escapes to heap: ./main.go:5:10: flow: {heap} = &{storage for make([]int, n)}: ./main.go:5:10: from make([]int, n) (non-constant size) at ./main.go:5:10 ./main.go:5:10: make([]int, n) escapes to heap\",\"还有一种特殊情况便是函数参数为...any类型时也可能会发生逃逸\",\"package main import \\\"fmt\\\" func main() { n := 100 fmt.Println(n) }\",\"输出\",\"$ go build -gcflags=\\\"-m -m -l\\\" . # golearn/example ./main.go:7:14: n escapes to heap: ./main.go:7:14: flow: {storage for ... argument} = &{storage for n}: ./main.go:7:14: from n (spill) at ./main.go:7:14 ./main.go:7:14: from ... argument (slice-literal-element) at ./main.go:7:13 ./main.go:7:14: flow: {heap} = {storage for ... argument}: ./main.go:7:14: from ... argument (spill) at ./main.go:7:13 ./main.go:7:14: from fmt.Println(... argument...) (call parameter) at ./main.go:7:13 ./main.go:7:13: ... argument does not escape ./main.go:7:14: n escapes to heap\",\"我们之所以要进行逃逸分析，把内存分配控制的这么细，主要是为了减轻GC压力，不过go并不是c语言，内存分配的最终决定权依旧掌握在编译器手里，除了极端的性能要求情况下，大多数时候我们也无需太过于专注内存分配的细节，毕竟GC诞生的目的就是为了解放开发者。\",\"小细节\",\"对于一些引用类型，当确认以后不会再用到它时，我们可以将其置为nil，来告诉GC可以将其回收。\",\"type Writer struct { buf []byte } func (w Writer) Close() error { w.buff = nil return nil }\"]},\"321\":{\"h\":\"pprof\",\"t\":[\"pprof（program profiling），是一个程序性能分析的利器，它会对程序运行时的数据进行部分采样，涵盖了cpu，内存，协程，锁，堆栈信息等许多方面，然后再使用工具对采样的数据进行分析并展示结果。\",\"所以pprof的使用步骤就只有两步：\",\"采集数据\",\"分析结果\"]},\"322\":{\"h\":\"采集\",\"t\":[\"数据采集的方式有两种，自动和手动，各有优劣。在此之前，编写一个简单的函数来模拟内存和cpu的消耗\",\"func Do() { for i := 0; i < 10; i++ { slice := makeSlice() sortSlice(slice) } } func makeSlice() []int { var s []int for range 1 << 24 { s = append(s, rand.Int()) } return s } func sortSlice(s []int) { slices.Sort(s) }\"]},\"323\":{\"h\":\"手动\",\"t\":[\"手动采集就是通过代码来控制，其优点是可控，灵活，可以自定义，直接在代码中使用pprof需要引入runtime/pprof包\",\"package main import ( \\\"log\\\" \\\"os\\\" \\\"runtime/pprof\\\" ) func main() { Do() w, _ := os.Create(\\\"heap.pb\\\") heapProfile := pprof.Lookup(\\\"heap\\\") err := heapProfile.WriteTo(w, 0) if err != nil { log.Fatal(err) } }\",\"pprof.Lookup支持的参数如下面代码所示\",\"profiles.m = map[string]*Profile{ \\\"goroutine\\\": goroutineProfile, \\\"threadcreate\\\": threadcreateProfile, \\\"heap\\\": heapProfile, \\\"allocs\\\": allocsProfile, \\\"block\\\": blockProfile, \\\"mutex\\\": mutexProfile, }\",\"该函数会将采集到的数据写入到指定文件中，在写入时传入的数字有以下几个含义\",\"0，写入压缩后的Protobuf数据，没有可读性\",\"1，写入文本格式的数据，能够阅读，http接口返回的就是这一种数据\",\"2，仅goroutine可用，表示打印panic风格的堆栈信息\",\"采集cpu数据需要单独使用 pprof.StartCPUProfile函数，它需要一定的时间进行采样，且其原始数据不可读，如下所示\",\"package main import ( \\\"log\\\" \\\"os\\\" \\\"runtime/pprof\\\" \\\"time\\\" ) func main() { Do() w, _ := os.Create(\\\"cpu.out\\\") err := pprof.StartCPUProfile(w) if err != nil { log.Fatal(err) } time.Sleep(time.Second * 10) pprof.StopCPUProfile() }\",\"采集trace的数据也是同样如此\",\"package main import ( \\\"log\\\" \\\"os\\\" \\\"runtime/trace\\\" \\\"time\\\" ) func main() { Do() w, _ := os.Create(\\\"trace.out\\\") err := trace.Start(w) if err != nil { log.Fatal(err) } time.Sleep(time.Second * 10) trace.Stop() }\"]},\"324\":{\"h\":\"自动\",\"t\":[\"net/http/pprof包将上面的分析函数包装成了http接口，并注册到了默认路由中，如下所示\",\"package pprof import ... func init() { http.HandleFunc(\\\"/debug/pprof/\\\", Index) http.HandleFunc(\\\"/debug/pprof/cmdline\\\", Cmdline) http.HandleFunc(\\\"/debug/pprof/profile\\\", Profile) http.HandleFunc(\\\"/debug/pprof/symbol\\\", Symbol) http.HandleFunc(\\\"/debug/pprof/trace\\\", Trace) }\",\"这使得我们可以直接一键运行pprof数据采集\",\"package main import ( \\\"net/http\\\" // 记得要导入这个包 _ \\\"net/http/pprof\\\" ) func main() { go func(){ http.ListenAndServe(\\\":8080\\\", nil) } for { Do() } }\",\"此时打开浏览器访问http://127.0.0.1:8080/debug/pprof，就会出现这样的页面\",\"页面中有几个可供选择的选项，它们分别代表了\",\"allocs：内存分配抽样\",\"block：同步原语的阻塞跟踪\",\"cmdline：当前程序的命令行调用\",\"goroutine：跟踪所有的协程\",\"heap：对于存活对象的内存分配抽样\",\"mutex：互斥锁相关信息的跟踪\",\"profile：cpu分析，会分析一段时间并下载一个文件\",\"threadcreate：分析导致创建新OS线程原因\",\"trace：当前程序执行情况的跟踪，同样会下载一个文件\",\"这里的数据大多数可读性并不高，主要是拿来给工具分析用的，如下所图\",\"具体的分析工作要留到后面再进行，除了profile和trace两个选项之外，如果你想要在网页中下载数据文件，可以将query参数debug=1去掉。也可以将这些接口集成到自己的路由中而不是使用默认路由，如下所示\",\"package main import ( \\\"net/http\\\" \\\"net/http/pprof\\\" ) func main() { mux := http.NewServeMux() mux.HandleFunc(\\\"/trace\\\", pprof.Trace) servre := &http.Server{ Addr: \\\":8080\\\", Handler: mux, } servre.ListenAndServe() }\",\"如此一来，也能其集成到其它的web框架中，比如gin，iris等等。\"]},\"325\":{\"h\":\"分析\",\"t\":[\"在得到了采集的数据文件后，有两种方式进行分析，命令行或网页，两者都需要借助pprof命令行工具，go默认集成该工具，所以不需要额外下载。\",\"pprof开源地址：google/pprof: pprof is a tool for visualization and analysis of profiling data (github.com)\"]},\"326\":{\"h\":\"命令行\",\"t\":[\"将此前收集到的数据文件作为参数\",\"$ go tool pprof heap.pb\",\"如果数据是由web采集的话，用web url替换掉文件名即可。\",\"$ go tool pprof -http :8080 http://127.0.0.1/debug/pprof/heap\",\"然后就会出现一个交互式的命令行\",\"15:27:38.3266862 +0800 CST Type: inuse_space Time: Apr 15, 2024 at 3:27pm (CST) No samples were found with the default sample value type. Try \\\"sample_index\\\" command to analyze different sample values. Entering interactive mode (type \\\"help\\\" for commands, \\\"o\\\" for options) (pprof)\",\"输入help，可以查看其它命令\",\" Commands: callgrind Outputs a graph in callgrind format comments Output all profile comments disasm Output assembly listings annotated with samples dot Outputs a graph in DOT format eog Visualize graph through eog evince Visualize graph through evince ...\",\"在命令行中查看数据一般使用top命令，也可以用traces命令不过它的输出很冗长，top命令只是简单的看个大概。\",\"(pprof) top 5 Showing nodes accounting for 117.49MB, 100% of 117.49MB total flat flat% sum% cum cum% 117.49MB 100% 100% 117.49MB 100% main.makeSlice (inline) 0 0% 100% 117.49MB 100% main.Do 0 0% 100% 117.49MB 100% main.main 0 0% 100% 117.49MB 100% runtime.main\",\"简单介绍一些其中的一些指标（cpu同理）\",\"flat，代表着当前函数所消耗的资源\",\"cum，当前函数及其后续调用链所消耗的资源总和\",\"flat%，flat/total\",\"cum%，cum/total\",\"我们可以很明显的看到整个调用栈的内存占用是117.49MB，由于Do函数本身什么都没做，只是调用了其它函数，所以其flat的指标是0，创建切片的事情是由makeSlice函数在负责，所以其flat指标是100%。\",\"我们可以将转换可视化的格式，pprof支持相当多的格式，比如pdf，svg，png，gif等等（需要安装Graphviz）。\",\"(pprof) png Generating report in profile001.png\",\"通过图片我们可以更加清晰的看到整个调用栈的内存情况。\",\"通过list命令以源代码的形式查看\",\"(pprof) list Do Total: 117.49MB ROUTINE ======================== main.Do in D:\\\\WorkSpace\\\\Code\\\\GoLeran\\\\golearn\\\\example\\\\main.go 0 117.49MB (flat, cum) 100% of Total . . 21:func Do() { . . 22: for i := 0; i < 10; i++ { . 117.49MB 23: slice := makeSlice() . . 24: sortSlice(slice) . . 25: } . . 26:} . . 27: . . 28:func makeSlice() []int {\",\"对于图片和源代码而言，还可以用web和weblist命令在浏览器中查看图片和源代码。\"]},\"327\":{\"h\":\"网页\",\"t\":[\"在此之前为了数据更加多样化，修改一下模拟的函数\",\"func Do1() { for i := 0; i < 10; i++ { slice := makeSlice() sortSlice(slice) } } func Do2() { for i := 0; i < 10; i++ { slice := makeSlice() sortSlice(slice) } } func makeSlice() []int { var s []int for range 1 << 12 { s = append(s, rand.Int()) } return s } func sortSlice(s []int) { slices.Sort(s) }\",\"网页分析可以可视化结果，免去了我们手动操作命令行，在使用网页分析时，只需执行如下命令\",\"$ go tool pprof -http :8080 heap.pb\",\"如果数据是由web采集的话，将web url替换掉文件名即可\",\"$ go tool pprof -http :8080 http://127.0.0.1:9090/debug/pprof/heap $ go tool pprof -http :8080 http://127.0.0.1:9090/debug/pprof/profile $ go tool pprof -http :8080 http://127.0.0.1:9090/debug/pprof/goroutine\",\"提示\",\"关于如何分析数据，前往pprof: How to read the graph了解更多\",\"网页中总共有6个可查看的项\",\"Top，同命令top\",\"Graph，直线图\",\"Flame Graph，火焰图\",\"Peek，\",\"Source，查看源代码\",\"Disassemble，反汇编查看\",\"对于内存而言四个维度可以分析\",\"alloc_objects：目前已分配的所有对象数量，包括已释放\",\"alloc_spcae：目前为止已分配的所有内存空间，包括已释放\",\"inuse_objects：正在使用的对象数量\",\"inuse_space：正在使用的内存空间\",\"内存分析图\",\"上图最下方的白色叶子节点代表着不同大小的对象占用。\",\"cpu分析图\",\"关于折线图，有几个点要注意\",\"块的颜色越深，占用越高，线越粗，占用越高\",\"实线代表着直接调用，虚线代表着略过了一些调用链。\",\"内存火焰图\",\"cpu火焰图\",\"对于火焰图而言，从上往下看是调用链，从左往右看是cum的占用百分比。\"]},\"328\":{\"h\":\"trace\",\"t\":[\"pprof主要负责分析程序的资源占用，而trace更适合跟踪程序的运行细节，它与前者的数据文件互不兼容，由go tool trace命令来完成相关的分析工作。\",\"如果是手动采集的数据，可以将文件名作为参数\",\"$ go tool trace trace.out\",\"如果是自动采集，也是同样的道理\",\"$ curl http://127.0.0.1:8080/debug/pprof/trace > trace.out && go tool trace trace.out\",\"执行后会开启一个web server\",\"2024/04/15 17:15:40 Preparing trace for viewer... 2024/04/15 17:15:40 Splitting trace for viewer... 2024/04/15 17:15:40 Opening browser. Trace viewer is listening on http://127.0.0.1:51805\",\"打开后页面大概如下所示\",\"这里面主要包含了以下几个部分，这些数据要看懂还挺不容易的。\",\"Event timelines for running goroutines\",\"trace by proc：显示每一时刻在该处理器上运行的协程时间线\",\"trace by thread：显示每一时刻在OS线程上运行的协程时间线\",\"Goroutine analysis：展示每组主函数的协程相关统计信息\",\"Profiles\",\"Network blocking profile： 因网络IO而阻塞的协程信息\",\"Synchronization blocking profile：因同步原语而阻塞的协程信息\",\"Syscall profile：因系统调用而阻塞的协程信息\",\"User-defined tasks and regions\",\"User-defined tasks：用户定义任务的相关协程信息\",\"User-defined regions：用户定义代码区域的相关协程信息\",\"Garbage collection metrics\",\"Minimum mutator utilization：展示最近GC的最大耗时\",\"、\"]},\"329\":{\"h\":\"后记\",\"t\":[\"如果你真的将语法篇和进阶篇都仔细阅读完了，并且动手敲了代码，那么你会认识到Go的语法其实并不难，特性也并不多，经验丰富的人可能几天就上手了，它完完全全是一门面向工程的语言，这一点你会在以后的编码中慢慢体会到。倘若你学习完后感到无处施展拳脚，想要更深一步学习，我可以给出下面几个学习路线和示例项目以供参考。\"]},\"330\":{\"h\":\"Web开发\",\"t\":[\"Web开发是Go语言中一个很常见的应用场景，你可以尝试以下的几个开源Web框架：\",\"Gin\",\"Echo\",\"Iris\",\"Hertz\",\"net/http， 或者不用框架，用Go自带的原生HTTP标准库\",\"如果你想要进行微服务开发，我推荐下面几个开源框架：\",\"GoZero\",\"go-kratos\",\"kitex\",\"然后你需要与数据库交互，我推荐下面几个开源库：\",\"sqlx\",\"Gorm\",\"Xorm\",\"Ent\",\"你可以参照下面这些项目来进行学习：\",\"gin vue admin\",\"go-zero-looklook\",\"gin-admin，单体Web项目我比较推荐参考该项目进行学习\",\"go-platform，微服务项目我推荐参考该项目进行学习\"]},\"331\":{\"h\":\"IM通讯\",\"t\":[\"使用Go进行IM开发，推荐下面这些开源项目：\",\"open-im-server\",\"gim\",\"xxim-server\",\"gochat\",\"TangSengDaoDaoServer\"]},\"332\":{\"h\":\"网络编程\",\"t\":[\"Go在网络编程这块也有非常多的应用，下面给出一些参考的开源项目：\",\"zinx\",\"nps\",\"caddy\",\"goproxy\",\"gws\",\"gev\"]},\"333\":{\"h\":\"游戏服务器\",\"t\":[\"在游戏服务器这个领域，有越来越多的企业转到Go这个方向\",\"agones\",\"leaf\",\"nano\",\"goworld\",\"pitaya\",\"origin\",\"gonet\"]},\"334\":{\"h\":\"数据库开发\",\"t\":[\"数据库开发需要一定的技术功底，基于Go语言的数据库或引擎同样也不少，光是阅读它们的源代码就需要花费不少时间\",\"badger，高速kv数据库\",\"dgraph，图数据库\",\"cayley，图数据库\",\"etcd，分布式键值数据库\",\"rosedb，键值数据库，入门的最佳选择\",\"nutsdb，键值数据库\",\"prometheus，时序数据库\",\"tidb，时序数据库\",\"cockroach，分布式SQL数据库\",\"rqlite，基于SQLite的分布式数据库\"]},\"335\":{\"h\":\"命令行工具\",\"t\":[\"Go非常适合用于命令行CLI工具开发，下面推荐几个命令行开发框架或库：\",\"flag，flag标准库\",\"cobra，强烈推荐使用cobra进行CLI开发，有许多著名项目都是基于cobra，比如Docker，K8S等\",\"go-pretty，用于在命令行进行美观的输出\",\"cli，轻量级的命令行框架\",\"kingpin，强大灵活的命令行解析库\",\"由于cobra十分常用，基于它进行命令行开发的项目非常多，随便都可以找到，下面只是一些参考项目：\",\"cobra-example\",\"govm\",\"hugo\",\"delve\",\"上面只是列出了比较常见的领域，你可以看到的是Go在服务端领域应用较为广泛，而客户端则较少，其实Go在其他领域也有不少的应用，比如webrtc，区块链，对象存储，云计算等等，感兴趣可以在Github上自行了解。\"]},\"336\":{\"h\":\"泛型\",\"t\":[\"最初的Go是没有泛型这一说法的，但自从诞生以来，社区关于Go呼声最高的事情就是希望加入泛型。终于Go在1.18版本加入了对泛型的支持，不过有一点怪。\"]},\"337\":{\"h\":\"示例\",\"t\":[\"在开始之前，先来看一个简单的例子。\",\"func Sum(a, b int) int { return a + b }\",\"这是一个功能十分简单的函数，作用就是将两个int类型的整数相加并返回结果，倘若想要传入两个float64类型的浮点数求和的话，显然是不可以的，因为类型不匹配。一种解决办法就是再定义一个新的函数，如下\",\"func SumFloat64(a, b float64) float64 { return a + b }\",\"那么问题来了，如果开发一个数学工具包，计算所有数字类型的两数之和，难道要每一个类型都要编写一个函数吗？显然是不太可能的，或者也可以使用any类型加反射来判断，如下\",\"func SumAny(a, b any) (any, error) { tA, tB := reflect.ValueOf(a), reflect.ValueOf(b) if tA.Kind() != tB.Kind() { return nil, errors.New(\\\"disMatch type\\\") } switch tA.Kind() { case reflect.Int: case reflect.Int32: ... } }\",\"但是这样写会显得十分复杂，而且性能低下。但是Sum函数的逻辑都是一模一样的，都只不过是将两个数相加而已，这时候就需要用到了泛型，所以为什么需要泛型，泛型是为了解决执行逻辑与类型无关的问题，这类问题不关心给出的类型是什么，只需要完成对应的操作就足够。所以泛型的写法如下\",\"func Sum[T int | float64](a, b T) T { return a + b }\",\"类型形参：T就是一个类型形参，形参具体是什么类型取决于传进来什么类型\",\"类型约束：int | float64构成了一个类型约束，这个类型约束内规定了哪些类型是允许的，约束了类型形参的类型范围\",\"类型实参：Sum[int](1,2)，手动指定了int类型，int就是类型实参。\",\"第一种用法，显式的指明使用哪种类型，如下\",\"Sum[int](2012, 2022)\",\"第二种用法，不指定类型，让编译器自行推断，如下\",\"Sum(3.1415926, 1.114514)\",\"看到这里后，应该对为什么要使用泛型，以及泛型解决了哪种问题有了一个大概的了解。将泛型引入项目后，开发上确实会比较方便，随之而来的是项目复杂度的增加，毫无节制的使用泛型会使得代码难以维护，所以应该在正确的地方使用泛型，而不是为了泛型而泛型。\"]},\"338\":{\"h\":\"泛型结构\",\"t\":[\"这是一个泛型切片，类型约束为int | int32 | int64\",\"type GenericSlice[T int | int32 | int64] []T\",\"这里使用时就不能省略掉类型实参\",\"GenericSlice[int]{1, 2, 3}\",\"这是一个泛型哈希表，键的类型必须是可比较的，所以使用comparable接口，值的类型约束为V int | string | byte\",\"type GenericMap[K comparable, V int | string | byte] map[K]V\",\"使用\",\"gmap1 := GenericMap[int, string]{1: \\\"hello world\\\"} gmap2 := make(GenericMap[string, byte], 0)\",\"这是一个泛型结构体，类型约束为T int | string\",\"type GenericStruct[T int | string] struct { Name string Id T }\",\"使用\",\"GenericStruct[int]{ Name: \\\"jack\\\", Id: 1024, } GenericStruct[string]{ Name: \\\"Mike\\\", Id: \\\"1024\\\", }\",\"这是一个泛型切片形参的例子\",\"type Company[T int | string, S []T] struct { Name string Id T Stuff S } //也可以如下 type Company[T int | string, S []int | string] struct { Name string Id T Stuff S }\",\"使用\",\"Company[int, []int]{ Name: \\\"lili\\\", Id: 1, Stuff: []int{1}, }\",\"提示\",\"在泛型结构体中，更推荐这种写法\",\"type Company[T int | string, S int | string] struct { Name string Id T Stuff []S }\",\"SayAble是一个泛型接口，Person实现了该接口。\",\"type SayAble[T int | string] interface { Say() T } type Person[T int | string] struct { msg T } func (p Person[T]) Say() T { return p.msg } func main() { var s SayAble[string] s = Person[string]{\\\"hello world\\\"} fmt.Println(s.Say()) }\"]},\"339\":{\"h\":\"泛型结构注意点\",\"t\":[\"泛型不能作为一个类型的基本类型\",\"以下写法是错误的，泛型形参T是不能作为基础类型的\",\"type GenericType[T int | int32 | int64] T\",\"虽然下列的写法是允许的，不过毫无意义而且可能会造成数值溢出的问题，所以并不推荐\",\"type GenericType[T int | int32 | int64] int\",\"泛型类型无法使用类型断言\",\"对泛型类型使用类型断言将会无法通过编译，泛型要解决的问题是类型无关的，如果一个问题需要根据不同类型做出不同的逻辑，那么就根本不应该使用泛型，应该使用interface{}或者any。\",\"func Sum[T int | float64](a, b T) T { ints,ok := a.(int) // 不被允许 switch a.(type) { // 不被允许 case int: case bool: ... } return a + b }\",\"匿名结构不支持泛型\",\"匿名结构体是不支持泛型的，如下的代码将无法通过编译\",\"testStruct := struct[T int | string] { Name string Id T }[int]{ Name: \\\"jack\\\", Id: 1 }\",\"匿名函数不支持自定义泛型\",\"以下两种写法都将无法通过编译\",\"var sum[T int | string] func (a, b T) T sum := func[T int | string](a,b T) T{ ... }\",\"但是可以使用已有的泛型类型，例如闭包中\",\"func Sum[T int | float64](a, b T) T { sub := func(c, d T) T { return c - d } return sub(a,b) + a + b }\",\"不支持泛型方法\",\"方法是不能拥有泛型形参的，但是receiver可以拥有泛型形参。如下的代码将会无法通过编译\",\"type GenericStruct[T int | string] struct { Name string Id T } func (g GenericStruct[T]) name[S int | float64](a S) S { return a }\"]},\"340\":{\"h\":\"类型集\",\"t\":[\"在1.18以后，接口的定义变为了类型集(type set)，含有类型集的接口又称为General interfaces即通用接口。\",\"An interface type defines a type set\",\"类型集主要用于类型约束，不能用作类型声明，既然是集合，就会有空集，并集，交集，接下来将会讲解这三种情况。\",\"并集\",\"接口类型SignedInt是一个类型集，有符号整数类型的并集就是SignedInt，反过来SignedInt就是它们的超集。\",\"type SignedInt interface { int8 | int16 | int | int32 | int64 }\",\"基本数据类型如此，对待其它通用接口也是如此\",\"type SignedInt interface { int8 | int16 | int | int32 | int64 } type UnSignedInt interface { uint8 | uint16 | uint32 | uint64 } type Integer interface { SignedInt | UnSignedInt }\",\"交集\",\"非空接口的类型集是其所有元素的类型集的交集，翻译成人话就是：如果一个接口包含多个非空类型集，那么该接口就是这些类型集的交集，例子如下\",\"type SignedInt interface { int8 | int16 | int | int32 | int64 } type Integer interface { int8 | int16 | int | int32 | int64 | uint8 | uint16 | uint | uint32 | uint64 } type Number interface { SignedInt Integer }\",\"例子中的交集肯定就是SignedInt，\",\"func Do[T Number](n T) T { return n } Do[int](2) DO[uint](2) //无法通过编译\",\"空集\",\"空集就是没有交集，例子如下，下面例子中的Integer就是一个类型空集。\",\"type SignedInt interface { int8 | int16 | int | int32 | int64 } type UnsignedInt interface { uint8 | uint16 | uint | uint32 | uint64 } type Integer interface { SignedInt UnsignedInt }\",\"因为无符号整数和有符号整数两个肯定没有交集，所以交集就是个空集，下方例子中不管传什么类型都无法通过编译。\",\"Do[Integer](1) Do[Integer](-100)\",\"空接口\",\"空接口与空集并不同，空接口是所有类型集的集合，即包含所有类型。\",\"func Do[T interface{}](n T) T { return n } func main() { Do[struct{}](struct{}{}) Do[any](\\\"abc\\\") }\",\"底层类型\",\"当使用type关键字声明了一个新的类型时，即便其底层类型包含在类型集内，当传入时也依旧会无法通过编译。\",\"type Int interface { int8 | int16 | int | int32 | int64 | uint8 | uint16 | uint | uint32 | uint64 } type TinyInt int8 func Do[T Int](n T) T { return n } func main() { Do[TinyInt](1) // 无法通过编译，即便其底层类型属于Int类型集的范围内 }\",\"有两种解决办法，第一种是往类型集中并入该类型，但是这毫无意义，因为TinyInt与int8底层类型就是一致的，所以就有了第二种解决办法。\",\"type Int interface { int8 | int16 | int | int32 | int64 | uint8 | uint16 | uint | uint32 | uint64 | TinyInt }\",\"使用~符号，来表示底层类型，如果一个类型的底层类型属于该类型集，那么该类型就属于该类型集，如下所示\",\"type Int interface { ~int8 | ~int16 | ~int | ~int32 | ~int64 | ~uint8 | ~uint16 | ~uint | ~uint32 | ~uint64 }\",\"修改过后就可以通过编译了。\",\"func main() { Do[TinyInt](1) // 可以通过编译，因为TinyInt在类型集Int内 }\"]},\"341\":{\"h\":\"类型集注意点\",\"t\":[\"带有方法集的接口无法并入类型集\",\"只要是带有方法集的接口，不论是基本接口，泛型接口，又或者是通用接口，都无法并入类型集中，同样的也无法在类型约束中并入。以下两种写法都是错误的，都无法通过编译。\",\"type Integer interface { Sum(int, int) int Sub(int, int) int } type SignedInt interface { int8 | int16 | int | int32 | int64 | Integer } func Do[T Integer | float64](n T) T { return n }\",\"类型集无法当作类型实参使用\",\"只要是带有类型集的接口，都无法当作类型实参。\",\"type SignedInt interface { int8 | int16 | int | int32 | int64 } func Do[T SignedInt](n T) T { return n } func main() { Do[SignedInt](1) // 无法通过编译 }\",\"类型集中的交集问题\",\"对于非接口类型，类型并集中不能有交集，例如下例中的TinyInt与~int8有交集。\",\"type Int interface { ~int8 | ~int16 | ~int | ~int32 | ~int64 | ~uint8 | ~uint16 | ~uint | ~uint32 | ~uint64 | TinyInt // 无法通过编译 } type TinyInt int8\",\"但是对于接口类型的话，就允许有交集，如下例\",\"type Int interface { ~int8 | ~int16 | ~int | ~int32 | ~int64 | ~uint8 | ~uint16 | ~uint | ~uint32 | ~uint64 | TinyInt // 可以通过编译 } type TinyInt interface { int8 }\",\"类型集不能直接或间接的并入自身\",\"以下示例中，Floats 直接的并入了自身，而Double又并入了Floats，所以又间接的并入了自身。\",\"type Floats interface { // 代码无法通过编译 Floats | Double } type Double interface { Floats }\",\"comparable接口无法并入类型集\",\"同样的，也无法并入类型约束中，所以基本上都是单独使用。\",\"func Do[T comparable | Integer](n T) T { //无法通过编译 return n } type Number interface { // 无法通过编译 Integer | comparable } type Comparable interface { // 可以通过编译但是毫无意义 comparable }\"]},\"342\":{\"h\":\"使用\",\"t\":[\"数据结构是泛型最常见的使用场景，下面借由两个数据结构来展示下泛型如何使用。\"]},\"343\":{\"h\":\"队列\",\"t\":[\"下面用泛型实现一个简单的队列，首先声明队列类型，队列中的元素类型可以是任意的，所以类型约束为any\",\"type Queue[T any] []T\",\"总共只有四个方法Pop ，Peek，Push，Size，代码如下。\",\"type Queue[T any] []T func (q *Queue[T]) Push(e T) { *q = append(*q, e) } func (q *Queue[T]) Pop(e T) (_ T) { if q.Size() > 0 { res := q.Peek() *q = (*q)[1:] return res } return } func (q *Queue[T]) Peek() (_ T) { if q.Size() > 0 { return (*q)[0] } return } func (q *Queue[T]) Size() int { return len(*q) }\",\"在Pop和Peek方法中，可以看到返回值是_ T，这是具名返回值的使用方式，但是又采用了下划线_表示这是匿名的，这并非多此一举，而是为了表示泛型零值。由于采用了泛型，当队列为空时，需要返回零值，但由于类型未知，不可能返回具体的类型，借由上面的那种方式就可以返回泛型零值。也可以声明泛型变量的方式来解决零值问题，对于一个泛型变量，其默认的值就是该类型的零值，如下\",\"func (q *Queue[T]) Pop(e T) T { var res T if q.Size() > 0 { res = q.Peek() *q = (*q)[1:] return res } return res }\"]},\"344\":{\"h\":\"堆\",\"t\":[\"上面队列的例子，由于对元素没有任何的要求，所以类型约束为any。但堆就不一样了，堆是一种特殊的数据结构，它可以在O(1)的时间内判断最大或最小值，所以它对元素有一个要求，那就是必须是可以排序的类型，但内置的可排序类型只有数字和字符串，并且go的泛型约束不允许存在带方法的接口，所以在堆的初始化时，需要传入一个自定义的比较器，比较器由调用者提供，并且比较器也必须使用泛型，如下\",\"type Comparator[T any] func(a, b T) int\",\"下面是一个简单二项堆的实现，先声明泛型结构体，依旧采用any进行约束，这样可以存放任意类型\",\"type Comparator[T any] func(a, b T) int type BinaryHeap[T any] struct { s []T c Comparator[T] }\",\"几个方法实现\",\"func (heap *BinaryHeap[T]) Peek() (_ T) { if heap.Size() > 0 { return heap.s[0] } return } func (heap *BinaryHeap[T]) Pop() (_ T) { size := heap.Size() if size > 0 { res := heap.s[0] heap.s[0], heap.s[size-1] = heap.s[size-1], heap.s[0] heap.s = heap.s[:size-1] heap.down(0) return res } return } func (heap *BinaryHeap[T]) Push(e T) { heap.s = append(heap.s, e) heap.up(heap.Size() - 1) } func (heap *BinaryHeap[T]) up(i int) { if heap.Size() == 0 || i < 0 || i >= heap.Size() { return } for parentIndex := i>>1 - 1; parentIndex >= 0; parentIndex = i>>1 - 1 { // greater than or equal to if heap.compare(heap.s[i], heap.s[parentIndex]) >= 0 { break } heap.s[i], heap.s[parentIndex] = heap.s[parentIndex], heap.s[i] i = parentIndex } } func (heap *BinaryHeap[T]) down(i int) { if heap.Size() == 0 || i < 0 || i >= heap.Size() { return } size := heap.Size() for lsonIndex := i<<1 + 1; lsonIndex < size; lsonIndex = i<<1 + 1 { rsonIndex := lsonIndex + 1 if rsonIndex < size && heap.compare(heap.s[rsonIndex], heap.s[lsonIndex]) < 0 { lsonIndex = rsonIndex } // less than or equal to if heap.compare(heap.s[i], heap.s[lsonIndex]) <= 0 { break } heap.s[i], heap.s[lsonIndex] = heap.s[lsonIndex], heap.s[i] i = lsonIndex } } func (heap *BinaryHeap[T]) Size() int { return len(heap.s) }\",\"使用起来如下\",\"type Person struct { Age int Name string } func main() { heap := NewHeap[Person](10, func(a, b Person) int { return cmp.Compare(a.Age, b.Age) }) heap.Push(Person{Age: 10, Name: \\\"John\\\"}) heap.Push(Person{Age: 18, Name: \\\"mike\\\"}) heap.Push(Person{Age: 9, Name: \\\"lili\\\"}) heap.Push(Person{Age: 32, Name: \\\"miki\\\"}) fmt.Println(heap.Peek()) fmt.Println(heap.Pop()) fmt.Println(heap.Peek()) }\",\"输出\",\"{9 lili} {9 lili} {10 John}\",\"有泛型的加持，原本不可排序的类型传入比较器后也可以使用堆了，这样做肯定比以前使用interface{}来进行类型转换和断言要优雅和方便很多。\"]},\"345\":{\"h\":\"小结\",\"t\":[\"go的一大特点就是编译速度非常快，编译快是因为编译期做的优化少，泛型的加入会导致编译器的工作量增加，工作更加复杂，这必然会导致编译速度变慢，事实上当初go1.18刚推出泛型的时候确实导致编译更慢了，go团队既想加入泛型又不想太拖累编译速度，开发者用的顺手，编译器就难受，反过来编译器轻松了（最轻松的当然是直接不要泛型），开发者就难受了，现如今的泛型就是这两者之间妥协后的产物。\",\"提示\",\"如果想要了解更多关于泛型的实际案例，可以看看这个泛型数据结构库246859/containers: base data structure in go genericity (github.com)。如果想要了解更多关于泛型的一些设计理念和细节，可以前往Type Parameters Proposal (googlesource.com)。\"]},\"346\":{\"h\":\"反射\",\"t\":[\"反射是一种在运行时检查语言自身结构的机制，它可以很灵活的去应对一些问题，但同时带来的弊端也很明显，例如性能问题等等。在Go中，反射与interface{}密切相关，很大程度上，只要有interface{}出现的地方，就会有反射。Go中的反射API是由标准库reflect包提供的。\"]},\"347\":{\"h\":\"接口\",\"t\":[\"在开始之前先简单的了解一下位于runtime包下的两个接口。在Go中，接口本质上是结构体，Go在运行时将接口分为了两大类，一类是没有方法集的接口，另一个类则是有方法集的接口。对于含有方法集的接口来说，在运行时由如下的结构体iface来进行表示\",\"type iface struct { tab *itab // 包含 数据类型，接口类型，方法集等 data unsafe.Pointer // 指向值的指针 }\",\"而对于没有方法集接口来说，在运行时由eface 结构体来进行表示，如下\",\"type eface struct { _type *_type // 类型 data unsafe.Pointer // 指向值的指针 }\",\"而这两个结构体在reflect包下都有与其对应的结构体类型，iface对应的是nonEmptyInterface\",\"type nonEmptyInterface struct { itab *struct { ityp *rtype // 静态接口类型 typ *rtype // 动态具体类型 hash uint32 // 类型哈希 _ [4]byte fun [100000]unsafe.Pointer // 方法集 } word unsafe.Pointer // 指向值的指针 }\",\"而eface对应的是emptyInterface\",\"type emptyInterface struct { typ *rtype // 动态具体类型 word unsafe.Pointer // 指向指针的值 }\",\"对于这两种类型，官方给出了很明确的定义\",\"nonEmptyInterface： nonEmptyInterface is the header for an interface value with methods\",\"emptyInterface：emptyInterface is the header for an interface{} value\",\"上述提到了动态具体类型这一词，原文为dynamic concrete type，首先Go语言是一个百分之百的静态类型语言，静态这一词是体现在对外表现的抽象的接口类型是不变的，而动态表示是接口底层存储的具体实现的类型是可以变化的。至此，对于接口的简单原理只需要了解到这里就足够满足后续反射的学习。\"]},\"348\":{\"h\":\"桥梁\",\"t\":[\"在reflect包下，分别有reflect.Type接口类型来表示Go中的类型，reflect.Value结构体类型来表示Go中的值\",\"type Type interface { ... Name() string PkgPath() string Size() uintptr String() string Kind() Kind ... } type Value struct { typ *rtype ptr unsafe.Pointer flag }\",\"上面的代码省略了很多细节，先只需要了解这两个类型的存在即可。Go中所有反射相关的操作都是基于这两个类型，reflect包提供了两个函数来将Go中的类型转换为上述的两种类型以便进行反射操作，分别是reflect.TypeOf函数\",\"func TypeOf(i any) Type\",\"与reflect.ValueOf函数\",\"func ValueOf(i any) Value\",\"可以看到两个函数的参数类型都是any，也就是interface{}的别名。如果想要进行反射操作，就需要先将其类型转换为interface{}，这也是为什么前面提到了只要有反射就离不开空接口。不严谨的说，空接口就是连接Go类型系统与反射的桥梁，下图很形象的描述了其过程。\",\"提示\",\"下文中为了方便，统一使用别名any来替代interface{}\"]},\"349\":{\"h\":\"核心\",\"t\":[\"在Go中有三个经典的反射定律，结合上面所讲的内容也就非常好懂，分别如下\",\"反射可以将interface{}类型变量转换成反射对象\",\"反射可以将反射对象还原成interface{}类型变量\",\"要修改反射对象，其值必须是可设置的\",\"这三个定律便是Go反射的核心，当需要访问类型相关信息时，便需要用到reflect.TypeOf，当需要修改反射值时，就需要用到reflect.ValueOf\"]},\"350\":{\"h\":\"类型\",\"t\":[\"reflect.Type代表着Go中的类型，使用reflect.TypeOf()函数可以将变量转换成reflect.Type。代码示例如下\",\"func main() { str := \\\"hello world!\\\" reflectType := reflect.TypeOf(str) fmt.Println(reflectType) }\",\"输出结果为\",\"string\"]},\"351\":{\"h\":\"Kind\",\"t\":[\"对于Type而言，Go内部使用reflect.Kind来表示Go中的基础类型，其本质上是无符号整型uint。\",\"type Kind uint\",\"reflect包使用Kind枚举出了Go中所有的基础类型，如下所示\",\"const ( Invalid Kind = iota Bool Int Int8 Int16 Int32 Int64 Uint Uint8 Uint16 Uint32 Uint64 Uintptr Float32 Float64 Complex64 Complex128 Array Chan Func Interface Map Pointer Slice String Struct UnsafePointer )\",\"Kind类型仅仅实现了Stringer接口的String()方法，该类型也仅有这一个方法，String()方法的返回值来自于一个其内部的map，如下所示\",\"var kindNames = []string{ Invalid: \\\"invalid\\\", Bool: \\\"bool\\\", Int: \\\"int\\\", Int8: \\\"int8\\\", Int16: \\\"int16\\\", Int32: \\\"int32\\\", Int64: \\\"int64\\\", Uint: \\\"uint\\\", Uint8: \\\"uint8\\\", Uint16: \\\"uint16\\\", Uint32: \\\"uint32\\\", Uint64: \\\"uint64\\\", Uintptr: \\\"uintptr\\\", Float32: \\\"float32\\\", Float64: \\\"float64\\\", Complex64: \\\"complex64\\\", Complex128: \\\"complex128\\\", Array: \\\"array\\\", Chan: \\\"chan\\\", Func: \\\"func\\\", Interface: \\\"interface\\\", Map: \\\"map\\\", Pointer: \\\"ptr\\\", Slice: \\\"slice\\\", String: \\\"string\\\", Struct: \\\"struct\\\", UnsafePointer: \\\"unsafe.Pointer\\\", }\",\"type Type interface{ Kind() Kind }\",\"通过Kind，可以知晓空接口存储的值究竟是什么基础类型，例如\",\"func main() { // 声明一个any类型的变量 var eface any // 赋值 eface = 100 // 通过Kind方法，来获取其类型 fmt.Println(reflect.TypeOf(eface).Kind()) }\",\"输出结果\",\"int\"]},\"352\":{\"h\":\"Elem\",\"t\":[\"type Type interface{ Elem() Type }\",\"使用Type.Elem()方法，可以判断类型为any的数据结构所存储的元素类型，可接收的底层参数类型必须是指针，切片，数组，通道，映射表其中之一，否则会panic。下面是代码示例\",\"func main() { var eface any eface = map[string]int{} rType := reflect.TypeOf(eface) // key()会返回map的键反射类型 fmt.Println(rType.Key().Kind()) fmt.Println(rType.Elem().Kind()) }\",\"输出为\",\"string int\",\"指针也可以理解为是一个容器，对于指针使用Elem()会获得其指向元素的反射类型，代码示例如下\",\"func main() { var eface any // 赋值指针 eface = new(strings.Builder) rType := reflect.TypeOf(eface) // 拿到指针所指向元素的反射类型 vType := rType.Elem() // 输出包路径 fmt.Println(vType.PkgPath()) // 输出其名称 fmt.Println(vType.Name()) }\",\"strings Builder\",\"对于数组，切片，通道用使用起来都是类似的。\"]},\"353\":{\"h\":\"Size\",\"t\":[\"type Type interface{ Size() uintptr }\",\"通过Size方法可以获取对应类型所占的字节大小，示例如下\",\"func main() { fmt.Println(reflect.TypeOf(0).Size()) fmt.Println(reflect.TypeOf(\\\"\\\").Size()) fmt.Println(reflect.TypeOf(complex(0, 0)).Size()) fmt.Println(reflect.TypeOf(0.1).Size()) fmt.Println(reflect.TypeOf([]string{}).Size()) }\",\"输出结果为\",\"8 16 16 8 24\",\"提示\",\"使用unsafe.Sizeof()可以达到同样的效果\"]},\"354\":{\"h\":\"Comparable\",\"t\":[\"type Type interface{ Comparable() bool }\",\"通过Comparable方法可以判断一个类型是否可以被比较，例子如下\",\"func main() { fmt.Println(reflect.TypeOf(\\\"hello world!\\\").Comparable()) fmt.Println(reflect.TypeOf(1024).Comparable()) fmt.Println(reflect.TypeOf([]int{}).Comparable()) fmt.Println(reflect.TypeOf(struct{}{}).Comparable()) }\",\"输出如下\",\"true true false true\"]},\"355\":{\"h\":\"Implements\",\"t\":[\"type Type interface{ Implements(u Type) bool }\",\"通过Implements方法可以判断一个类型是否实现了某一接口\",\"type MyInterface interface { My() string } type MyStruct struct { } func (m MyStruct) My() string { return \\\"my\\\" } type HisStruct struct { } func (h HisStruct) String() string { return \\\"his\\\" } func main() { rIface := reflect.TypeOf(new(MyInterface)).Elem() fmt.Println(reflect.TypeOf(new(MyStruct)).Elem().Implements(rIface)) fmt.Println(reflect.TypeOf(new(HisStruct)).Elem().Implements(rIface)) }\",\"输出结果\",\"true false\"]},\"356\":{\"h\":\"ConvertibleTo\",\"t\":[\"type Type interface{ ConvertibleTo(u Type) bool }\",\"使用ConvertibleTo方法可以判断一个类型是否可以被转换为另一个指定的类型\",\"type MyInterface interface { My() string } type MyStruct struct { } func (m MyStruct) My() string { return \\\"my\\\" } type HisStruct struct { } func (h HisStruct) String() string { return \\\"his\\\" } func main() { rIface := reflect.TypeOf(new(MyInterface)).Elem() fmt.Println(reflect.TypeOf(new(MyStruct)).Elem().ConvertibleTo(rIface)) fmt.Println(reflect.TypeOf(new(HisStruct)).Elem().ConvertibleTo(rIface)) }\",\"输出\",\"true false\"]},\"357\":{\"h\":\"值\",\"t\":[\"reflect.Value代表着反射接口的值，使用reflect.ValueOf()函数可以将变量转换成reflect.Value。代码示例如下\",\"func main() { str := \\\"hello world!\\\" reflectValue := reflect.ValueOf(str) fmt.Println(reflectValue) }\",\"输出结果为\",\"hello world!\"]},\"358\":{\"h\":\"Type\",\"t\":[\"func (v Value) Type() Type\",\"Type方法可以获取一个反射值的类型\",\"func main() { num := 114514 rValue := reflect.ValueOf(num) fmt.Println(rValue.Type()) }\",\"输出\",\"int\"]},\"359\":{\"h\":\"Elem\",\"t\":[\"func (v Value) Elem() Value\",\"获取一个反射值的元素反射值\",\"func main() { num := new(int) *num = 114514 // 以指针为例子 rValue := reflect.ValueOf(num).Elem() fmt.Println(rValue.Interface()) }\",\"输出\",\"114514\"]},\"360\":{\"h\":\"指针\",\"t\":[\"获取一个反射值的指针方式有两种\",\"// 返回一个表示v地址的指针反射值 func (v Value) Addr() Value // 返回一个指向v的原始值的uinptr 等价于 uintptr(Value.Addr().UnsafePointer()) func (v Value) UnsafeAddr() uintptr // 返回一个指向v的原始值的uintptr // 仅当v的Kind为 Chan, Func, Map, Pointer, Slice, UnsafePointer时，否则会panic func (v Value) Pointer() uintptr // 返回一个指向v的原始值的unsafe.Pointer // 仅当v的Kind为 Chan, Func, Map, Pointer, Slice, UnsafePointer时，否则会panic func (v Value) UnsafePointer() unsafe.Pointer\",\"示例如下\",\"func main() { num := 1024 ele := reflect.ValueOf(&num).Elem() fmt.Println(\\\"&num\\\", &num) fmt.Println(\\\"Addr\\\", ele.Addr()) fmt.Println(\\\"UnsafeAddr\\\", unsafe.Pointer(ele.UnsafeAddr())) fmt.Println(\\\"Pointer\\\", unsafe.Pointer(ele.Addr().Pointer())) fmt.Println(\\\"UnsafePointer\\\", ele.Addr().UnsafePointer()) }\",\"输出\",\"&num 0xc0000a6058 Addr 0xc0000a6058 UnsafeAddr 0xc0000a6058 Pointer 0xc0000a6058 UnsafePointer 0xc0000a6058\",\"提示\",\"fmt.Println会反射获取参数的类型，如果是reflect.Value类型的话，会自动调用Value.Interface()来获取其原始值。\",\"换成一个map再来一遍\",\"func main() { dic := map[string]int{} ele := reflect.ValueOf(&dic).Elem() println(dic) fmt.Println(\\\"Addr\\\", ele.Addr()) fmt.Println(\\\"UnsafeAddr\\\", *(*unsafe.Pointer)(unsafe.Pointer(ele.UnsafeAddr()))) fmt.Println(\\\"Pointer\\\", unsafe.Pointer(ele.Pointer())) fmt.Println(\\\"UnsafePointer\\\", ele.UnsafePointer()) }\",\"输出\",\"0xc00010e4b0 Addr &map[] UnsafeAddr 0xc00010e4b0 Pointer 0xc00010e4b0 UnsafePointer 0xc00010e4b0\"]},\"361\":{\"h\":\"设置值\",\"t\":[\"func (v Value) Set(x Value)\",\"倘若通过反射来修改反射值，那么其值必须是可取址的，这时应该通过指针来修改其元素值，而不是直接尝试修改元素的值。\",\"func main() { // *int num := new(int) *num = 114514 rValue := reflect.ValueOf(num) // 获取指针指向的元素 ele := rValue.Elem() fmt.Println(ele.Interface()) ele.SetInt(11) fmt.Println(ele.Interface()) }\",\"输出如下\",\"114514 11\"]},\"362\":{\"h\":\"获取值\",\"t\":[\"func (v Value) Interface() (i any)\",\"通过Interface()方法可以获取反射值原有的值\",\"func main() { var str string str = \\\"hello\\\" rValue := reflect.ValueOf(str) if v, ok := rValue.Interface().(string); ok { fmt.Println(v) } }\",\"输出\",\"hello\"]},\"363\":{\"h\":\"函数\",\"t\":[\"通过反射可以获取函数的一切信息，也可以反射调用函数\"]},\"364\":{\"h\":\"信息\",\"t\":[\"通过反射类型来获取函数的一切信息\",\"func Max(a, b int) int { if a > b { return a } return b } func main() { rType := reflect.TypeOf(Max) // 输出函数名称,字面量函数的类型没有名称 fmt.Println(rType.Name()) // 输出参数，返回值的数量 fmt.Println(rType.NumIn(), rType.NumOut()) rParamType := rType.In(0) // 输出第一个参数的类型 fmt.Println(rParamType.Kind()) rResType := rType.Out(0) // 输出第一个返回值的类型 fmt.Println(rResType.Kind()) }\",\"输出\",\" 2 1 int int\"]},\"365\":{\"h\":\"调用\",\"t\":[\"通过反射值来调用函数\",\"func (v Value) Call(in []Value) []Value\",\"func main() { // 获取函数的反射值 rType := reflect.ValueOf(Max) // 传入参数数组 rResValue := rType.Call([]reflect.Value{reflect.ValueOf(18), reflect.ValueOf(50)}) for _, value := range rResValue { fmt.Println(value.Interface()) } }\",\"输出\",\"50\"]},\"366\":{\"h\":\"结构体\",\"t\":[\"假设有如下结构体\",\"type Person struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` Address string `json:\\\"address\\\"` money int } func (p Person) Talk(msg string) string { return msg }\"]},\"367\":{\"h\":\"访问字段\",\"t\":[\"reflect.StructField结构的结构如下\",\"type StructField struct { // 字段名称 Name string // 包名 PkgPath string // 类型名 Type Type // Tag Tag StructTag // 字段的字节偏移 Offset uintptr // 索引 Index []int // 是否为嵌套字段 Anonymous bool }\",\"访问结构体字段的方法有两种，一种是通过索引来进行访问，另一种是通过名称。\",\"type Type interface{ Field(i int) StructField }\",\"通过索引访问的例子如下\",\"func main() { rType := reflect.TypeOf(new(Person)).Elem() // 输出结构体字段的数量 fmt.Println(rType.NumField()) for i := 0; i < rType.NumField(); i++ { structField := rType.Field(i) fmt.Println(structField.Index, structField.Name, structField.Type, structField.Offset, structField.IsExported()) } }\",\"输出\",\"4 [0] Name string 0 true [1] Age int 16 true [2] Address string 24 true [3] money int 40 false\",\"type Type interface{ FieldByName(name string) (StructField, bool) }\",\"通过名称访问的例子如下\",\"func main() { rType := reflect.TypeOf(new(Person)).Elem() // 输出结构体字段的数量 fmt.Println(rType.NumField()) if field, ok := rType.FieldByName(\\\"money\\\"); ok { fmt.Println(field.Name, field.Type, field.IsExported()) } }\",\"输出\",\"4 money int false\"]},\"368\":{\"h\":\"修改字段\",\"t\":[\"倘若要修改结构体字段值，则必须传入一个结构体指针，下面是一个修改字段的例子\",\"func main() { // 传入指针 rValue := reflect.ValueOf(&Person{ Name: \\\"\\\", Age: 0, Address: \\\"\\\", money: 0, }).Elem() // 获取字段 name := rValue.FieldByName(\\\"Name\\\") // 修改字段值 if (name != reflect.Value{}) { // 如果返回reflect.Value{}，则说明该字段不存在 name.SetString(\\\"jack\\\") } // 输出结构体 fmt.Println(rValue.Interface()) }\",\"输出\",\"{jack 0 0}\",\"对于修改结构体私有字段而言，需要进行一些额外的操作，如下\",\"func main() { // 传入指针 rValue := reflect.ValueOf(&Person{ Name: \\\"\\\", Age: 0, Address: \\\"\\\", money: 0, }).Elem() // 获取一个私有字段 money := rValue.FieldByName(\\\"money\\\") // 修改字段值 if (money != reflect.Value{}) { // 构造指向该结构体未导出字段的指针反射值 p := reflect.NewAt(money.Type(), money.Addr().UnsafePointer()) // 获取该指针所指向的元素，也就是要修改的字段 field := p.Elem() // 修改值 field.SetInt(164) } // 输出结构体 fmt.Printf(\\\"%+v\\\\n\\\", rValue.Interface()) }\"]},\"369\":{\"h\":\"访问Tag\",\"t\":[\"获取到StructField后，便可以直接访问其Tag\",\"// 如果不存在，ok为false func (tag StructTag) Lookup(key string) (value string, ok bool) // 如果不存在，返回空字符串 func (tag StructTag) Get(key string) string\",\"示例如下\",\"func main() { rType := reflect.TypeOf(new(Person)).Elem() name, ok := rType.FieldByName(\\\"Name\\\") if ok { fmt.Println(name.Tag.Lookup(\\\"json\\\")) fmt.Println(name.Tag.Get(\\\"json\\\")) } }\",\"输出\",\"name true name\"]},\"370\":{\"h\":\"访问方法\",\"t\":[\"访问方法与访问字段的过程很相似，只是函数签名略有区别。reflect.Method结构体如下\",\"type Method struct { // 方法名 Name string // 包名 PkgPath string // 方法类型 Type Type // 方法对应的函数，第一个参数是接收者 Func Value // 索引 Index int }\",\"访问方法信息示例如下\",\"func main() { // 获取结构体反射类型 rType := reflect.TypeOf(new(Person)).Elem() // 输出方法个数 fmt.Println(rType.NumMethod()) // 遍历输出方法信息 for i := 0; i < rType.NumMethod(); i++ { method := rType.Method(i) fmt.Println(method.Index, method.Name, method.Type, method.IsExported()) } }\",\"输出\",\"1 0 Talk func(main.Person, string) string true\",\"如果想要获取方法的参数和返回值细节，可以通过Method.Func来进行获取，过程与访问函数信息一致，将上面的代码稍微修改下\",\"func main() { // 获取结构体反射类型 rType := reflect.TypeOf(new(Person)).Elem() // 输出方法个数 fmt.Println(rType.NumMethod()) // 遍历输出方法信息 for i := 0; i < rType.NumMethod(); i++ { method := rType.Method(i) fmt.Println(method.Index, method.Name, method.Type, method.IsExported()) fmt.Println(\\\"方法参数\\\") for i := 0; i < method.Func.Type().NumIn(); i++ { fmt.Println(method.Func.Type().In(i).String()) } fmt.Println(\\\"方法返回值\\\") for i := 0; i < method.Func.Type().NumOut(); i++ { fmt.Println(method.Func.Type().Out(i).String()) } } }\",\"可以看到第一个参数是main.Person，也就是接收者类型\",\"1 0 Talk func(main.Person, string) string true 方法参数 main.Person string 方法返回值 string\"]},\"371\":{\"h\":\"调用方法\",\"t\":[\"调用方法与调用函数的过程相似，而且并不需要手动传入接收者，例子如下\",\"func main() { // 获取结构体反射类型 rValue := reflect.ValueOf(new(Person)).Elem() // 输出方法个数 fmt.Println(rValue.NumMethod()) // 遍历输出方法信息 talk := rValue.MethodByName(\\\"Talk\\\") if (talk != reflect.Value{}) { // 调用方法，并获取返回值 res := talk.Call([]reflect.Value{reflect.ValueOf(\\\"hello,reflect!\\\")}) // 遍历输出返回值 for _, re := range res { fmt.Println(re.Interface()) } } }\",\"输出\",\"1 hello,reflect!\"]},\"372\":{\"h\":\"创建\",\"t\":[\"通过反射可以构造新的值，reflect包同时根据一些特殊的类型提供了不同的更为方便的函数。\"]},\"373\":{\"h\":\"基本类型\",\"t\":[\"// 返回指向反射值的指针反射值 func New(typ Type) Value\",\"以string为例\",\"func main() { rValue := reflect.New(reflect.TypeOf(*new(string))) rValue.Elem().SetString(\\\"hello world!\\\") fmt.Println(rValue.Elem().Interface()) }\",\"hello world!\"]},\"374\":{\"h\":\"结构体\",\"t\":[\"结构体的创建同样用到reflect.New函数\",\"type Person struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` Address string `json:\\\"address\\\"` money int } func (p Person) Talk(msg string) string { return msg } func main() { // 创建结构体反射值 rType := reflect.TypeOf(new(Person)).Elem() person := reflect.New(rType).Elem() fmt.Println(person.Interface()) }\",\"输出\",\"{ 0 0}\"]},\"375\":{\"h\":\"切片\",\"t\":[\"反射创建切片\",\"func MakeSlice(typ Type, len, cap int) Value\",\"func main() { // 创建切片反射值 rValue := reflect.MakeSlice(reflect.TypeOf(*new([]int)), 10, 10) // 遍历赋值 for i := 0; i < 10; i++ { rValue.Index(i).SetInt(int64(i)) } fmt.Println(rValue.Interface()) }\",\"[0 1 2 3 4 5 6 7 8 9]\"]},\"376\":{\"h\":\"Map\",\"t\":[\"反射创建Map\",\"func MakeMapWithSize(typ Type, n int) Value\",\"func main() { //构建map反射值 rValue := reflect.MakeMapWithSize(reflect.TypeOf(*new(map[string]int)), 10) // 设置值 rValue.SetMapIndex(reflect.ValueOf(\\\"a\\\"), reflect.ValueOf(1)) fmt.Println(rValue.Interface()) }\",\"map[a:1]\"]},\"377\":{\"h\":\"管道\",\"t\":[\"反射创建管道\",\"func MakeChan(typ Type, buffer int) Value\",\"func main() { // 创建管道反射值 makeChan := reflect.MakeChan(reflect.TypeOf(new(chan int)).Elem(), 0) fmt.Println(makeChan.Interface()) }\"]},\"378\":{\"h\":\"函数\",\"t\":[\"反射创建函数\",\"func MakeFunc(typ Type, fn func(args []Value) (results []Value)) Value\",\"func main() { // 传入包装类型和函数体 fn := reflect.MakeFunc(reflect.TypeOf(new(func(int))).Elem(), func(args []reflect.Value) (results []reflect.Value) { for _, arg := range args { fmt.Println(arg.Interface()) } return nil }) fmt.Println(fn.Type()) fn.Call([]reflect.Value{reflect.ValueOf(1024)}) }\",\"输出\",\"func(int) 1024\"]},\"379\":{\"h\":\"完全相等\",\"t\":[\"reflect.DeepEqual是反射包下提供的一个用于判断两个变量是否完全相等的函数，签名如下。\",\"func DeepEqual(x, y any) bool\",\"该函数对于每一种基础类型都做了处理，下面是一些类型判断方式。\",\"数组：数组中的每一个元素都完全相等\",\"切片：都为nil时，判为完全相等，或者都不为空时，长度范围内的元素完全相等\",\"结构体：所有字段都完全相等\",\"映射表：都为nil时，为完全相等，都不为nil时，每一个键所映射的值都完全相等\",\"指针：指向同一个元素或指向的元素完全相等\",\"接口：接口的具体类型完全相等时\",\"函数：只有两者都为nil时才是完全相等，否则就不是完全相等\",\"下面是一些例子：\",\"切片\",\"func main() { a := make([]int, 100) b := make([]int, 100) fmt.Println(reflect.DeepEqual(a, b)) }\",\"输出\",\"true\",\"结构体\",\"func main() { mike := Person{ Name: \\\"mike\\\", Age: 39, Father: nil, } jack := Person{ Name: \\\"jack\\\", Age: 18, Father: &mike, } tom := Person{ Name: \\\"tom\\\", Age: 18, Father: &mike, } fmt.Println(reflect.DeepEqual(mike, jack)) fmt.Println(reflect.DeepEqual(tom, jack)) fmt.Println(reflect.DeepEqual(jack, jack)) }\",\"输出\",\"false false true\"]},\"380\":{\"h\":\"类型\",\"t\":[\"在之前的数据类型的小节中已经简单了介绍过了Go中的所有内置的数据类型，这些内置的基础类型，是后续自定义类型的基础。Go是一个典型的静态类型语言，所有变量的类型都会在编译期确定好，并且在整个程序的生命周期都不会再改变，这一小节会简单的介绍下Go的类型系统和基本使用。\"]},\"381\":{\"h\":\"静态强类型\",\"t\":[\"Go是一个静态强类型语言，静态指的是Go所有变量的类型早在编译期间就已经确定了，在程序的生命周期都不会再发生改变，尽管Go中的短变量声明有点类似动态语言的写法，但其变量类型是由编译器自行推断的，最根本的区别在于它的类型一旦推断出来后不会再发生变化，动态语言则完全相反。所以下面的代码完全无法通过编译，因为a是int类型的变量，不能赋值字符串。\",\"func main() { var a int = 64 a = \\\"64\\\" fmt.Println(a) // cannot use \\\"64\\\" (untyped string constant) as int value in assignment }\",\"强类型则指的是在程序中执行严格的类型检查，如果出现类型不匹配的情况时，会立即告诉程序员不应该这么做，而不是像动态语言一样去尝试推断可能的结果。所以下面的代码无法通过编译，因为两者类型不同，无法进行运算。\",\"func main() { fmt.Println(1 + \\\"1\\\") // invalid operation: 1 + \\\"1\\\" (mismatched types untyped int and untyped string) }\"]},\"382\":{\"h\":\"类型后置\",\"t\":[\"Go为什么要把类型声明放在后面而不是前面，很大程度上是从C语言吸取了教训，拿官方的一个例子展示效果，这是一个函数指针\",\"int (*(*fp)(int (*)(int, int), int))(int, int)\",\"说实话不认真看很难知道这是一个什么类型，在Go中类似的写法如下\",\"f func(func(int,int) int, int) func(int, int) int\",\"Go的声明方式始终遵循名字在前面，类型在后面的原则，从左往右读，大概第一眼就可以知道这是一个函数，且返回值为func(int,int) int。当类型变得越来越复杂时，类型后置在可读性上要好得多，Go在许多层面的设计都是为了可读性而服务的。\"]},\"383\":{\"h\":\"类型声明\",\"t\":[\"在Go中通过类型声明，可以声明一个自定义名称的新类型，声明一个新类型通常需要一个类型名称以及一个基础类型，简单的例子如下：\",\"type MyInt int64\",\"在上述类型声明中，通过type关键字声明了一个基础类型为int64名为MyInt的类型。在Go中，每一个新声明的类型都必须有一个与之对应的基础类型，且类型名称不建议与已有的内置标识符重复。\",\"type MyInt int64 type MyFloat64 float64 type MyMap map[string]int // 可以通过编译，但是不建议使用，这会覆盖原有的类型 type int int64\",\"通过类型声明的类型都是新类型，不同的类型无法进行运算，即便基础类型是相同的。\",\"type MyFloat64 float64 var f1 MyFloat64 var f float64 f1 = 0.2 f = 0.1 fmt.Println(f1 + f)\",\"invalid operation: f1 + f (mismatched types MyFloat64 and float64)\"]},\"384\":{\"h\":\"类型别名\",\"t\":[\"类型别名与类型声明则不同，类型别名仅仅只是一个别名，并不是创建了一个新的类型，简单的例子如下：\",\"type Int = int\",\"两者是都是同一个类型，仅仅叫的名字不同，所以也就可以进行运算，所以下例自然也就可以通过编译。\",\"type Int = int var a Int = 1 var b int = 2 fmt.Println(a + b)\",\"3\",\"类型别名对于一些特别复杂的类型有很大的用处，例如现在有一个类型map[string]map[string]int，这是一个二维map，现有一个函数参数是map[string]map[string]int类型，如下\",\"func PrintMyMap(mymap map[string]map[string]int) { fmt.Println(mymap) }\",\"这种情况下，就没有必要使用类型声明了，因为前者是声明了一个新的类型，无法作为该函数的参数，使用类型别名后的例子如下\",\"type TwoDMap = map[string]map[string]int func PrintMyMap(mymap TwoDMap) { fmt.Println(mymap) }\",\"使用类型别名后看起来会简洁一些。\",\"提示\",\"内置类型any就是interface{}的类型别名，两者完全等价，仅仅叫法不一样。\"]},\"385\":{\"h\":\"类型转换\",\"t\":[\"在Go中，只存在显式的类型转换，不存在隐式类型转换，因此不同类型的变量无法进行运算，无法作为参数传递。类型转换适用的前提是知晓被转换变量的类型和要转换成的目标类型，例子如下：\",\"type MyFloat64 float64 var f1 MyFloat64 var f float64 f1 = 0.2 f = 0.1 fmt.Println(float64(f1) + f)\",\"0.30000000000000004\",\"通过显式的将MyFloat64 转换为float64类型，才能进行加法运算。类型转换的另一个前提是：被转换类型必须是可以被目标类型代表的（Representability），例如int可以被int64类型所代表，也可以被float64类型代表，所以它们之间可以进行显式的类型转换，但是int类型无法被string和bool类型代表，因为也就无法进行类型转换。\",\"提示\",\"关于代表（Representabilitsy）的定义可以前往参考手册 - Representability以了解更多细节。\",\"即便两个类型可以相互代表，类型转换的结果也不总是正确的，看下面的一个例子：\",\"var num1 int8 = 1 var num2 int32 = 512 fmt.Println(int32(num1), int8(num2))\",\"1 0\",\"num1被正确的转换为了int32类型，但是num2并没有。这是一个典型的数值溢出问题，int32能够表示31位整数，int8只能表示7位整数，高精度整数在向低精度整数转换时会抛弃高位保留低位，因此num1的转换结果就是0。在数字的类型转换中，通常建议小转大，而不建议大转小。\",\"在使用类型转换时，对于一些类型需要避免歧义，例子如下：\",\"*Point(p) // 等价于 *(Point(p)) (*Point)(p) // 将p转换为类型 *Point <-chan int(c) // 等价于 <-(chan int(c)) (<-chan int)(c) // 将c转换为类型 <-chan int (func())(x) // 将x转换为类型 func() (func() int)(x) // 将x转换为类型 func() int\"]},\"386\":{\"h\":\"类型断言\",\"t\":[\"类型断言通常用于判断某一接口类型的变量是否属于某一个类型，示例如下\",\"var b int = 1 var a interface{} = b if intVal, ok := a.(int); ok { fmt.Println(intVal) } else { fmt.Println(\\\"error type\\\") }\",\"1\",\"由于interface{}是空接口类型，空接口类型可以代表所有的类型，但是int类型无法代表interface{}类型，所以无法使用类型转换。而类型断言就可以判断其底层类型是否为想要的类型，类型断言语句有两个返回值，一个是类型转换过后的值，另一个是转换结果的布尔值。\"]},\"387\":{\"h\":\"类型判断\",\"t\":[\"在Go中，switch语句还支持一种特殊的写法，通过这种写法可以根据不同的case做出不同的逻辑处理，使用的前提是入参必须是接口类型，示例如下：\",\"var a interface{} = 2 switch a.(type) { case int: fmt.Println(\\\"int\\\") case float64: fmt.Println(\\\"float\\\") case string: fmt.Println(\\\"string\\\") }\",\"int\",\"提示\",\"通过unsafe包下提供的操作，可以绕过Go的类型系统，就可以做到原本无法通过编译的类型转换操作。\"]},\"388\":{\"h\":\"错误\",\"t\":[\"在Go中的异常有三种级别：\",\"error：正常的流程出错，需要处理，直接忽略掉不处理程序也不会崩溃\",\"panic：很严重的问题，程序应该在处理完问题后立即退出\",\"fatal：非常致命的问题，程序应该立即退出\",\"准确的来说，Go语言并没有异常，它是通过错误来体现，同样的，Go中也并没有try-catch-finally这种语句，Go创始人希望能够将错误可控，他们不希望干什么事情都需要嵌套一堆try-catch，所以大多数情况会将其作为函数的返回值来返回，例如下方代码例子：\",\"func main() { // 打开一个文件 if file, err := os.Open(\\\"README.txt\\\"); err != nil { fmt.Println(err) return } fmt.Println(file.Name()) }\",\"这段代码的意图很明显，打开一个名为README.txt的文件，如果打开失败函数将会返回一个错误，输出错误信息，如果错误为nil的话那么就是打开成功，输出文件名。\",\"看起来似乎是要比try-catch简洁一些，那如果有特别多的函数调用，将会到处都充斥着if err != nil 这种判断语句，比如下面的例子，这是一个计算文件哈希值的demo，在这一小段代码中总共出现了三次if err != nil。\",\"func main() { sum, err := checksum(\\\"main.go\\\") if err != nil { fmt.Println(err) return } fmt.Println(sum) } func checksum(path string) (string, error) { file, err := os.Open(path) if err != nil { return \\\"\\\", err } defer file.Close() hash := sha256.New() _, err = io.Copy(hash, file) if err != nil { return \\\"\\\", err } var hexSum [64]byte sum := hash.Sum(nil) hex.Encode(hexSum[:], sum) return string(hexSum[:]), nil }\",\"正因如此，外界对于Go最诟病的点就在错误处理上，Go源代码里if err != nil就占了相当一部分。Rust同样也是返回错误值，但没有人会去说它这一点，因为它通过语法糖的方式解决了这类问题，与Rust相比之下，Go的语法糖不能说很多，只能说是几乎没有。\",\"不过我们看待事物要辩证的来看，凡事都是有好有坏的，Go的错误处理的优点有几个\",\"心智负担小：有错误就处理，不处理就返回\",\"可读性：因为处理的方式非常简单，大部分情况下都很容易读懂代码\",\"易于调试：每一个错误都是通过函数调用的返回值产生的，可以一层一层往回找到，很少会出现突然冒出一个错误却不知道是从哪里来的这种情况\",\"不过缺点也不少\",\"错误中没有堆栈信息（需要第三方包解决或者自己封装）\",\"丑陋，重复代码多（看个人喜好）\",\"自定义错误是通过var来声明的，它是一个变量而不是常量（确实不应该）\",\"变量遮蔽问题\",\"社区中有关于Go错误处理的提案和讨论自从Go诞生以来就从未停止过，有这么一句玩笑话：如果你能接受Go的错误处理，那么你才是个合格的Gopher了。\",\"提示\",\"这里有两篇Go团队关于错误处理的文章，感兴趣可以看看\",\"Errors are values - Rob Pike\",\"Error handling and Go - Andrew Gerrand\"]},\"389\":{\"h\":\"error\",\"t\":[\"error属于是一种正常的流程错误，它的出现是可以被接受的，大多数情况下应该对其进行处理，当然也可以忽略不管，error的严重级别不足以停止整个程序的运行。error本身是一个预定义的接口，该接口下只有一个方法Error()，该方法的返回值是字符串，用于输出错误信息。\",\"type error interface { Error() string }\",\"error在历史上也有过大改，在1.13版本时Go团队推出了链式错误，且提供了更加完善的错误检查机制，接下来都会一一介绍。\"]},\"390\":{\"h\":\"创建\",\"t\":[\"创建一个error有以下几种方法，第一种是使用errors包下的New函数。\",\"err := errors.New(\\\"这是一个错误\\\")\",\"第二种是使用fmt包下的Errorf函数，可以得到一个格式化参数的error。\",\"err := fmt.Errorf(\\\"这是%d个格式化参数的的错误\\\", 1)\",\"下面是一个完整的例子\",\"func sumPositive(i, j int) (int, error) { if i <= 0 || j <= 0 { return -1, errors.New(\\\"必须是正整数\\\") } return i + j, nil }\",\"大部分情况，为了更好的维护性，一般都不会临时创建error，而是会将常用的error当作全局变量使用，例如下方节选自os\\\\erros.go文件的代码\",\"var ( ErrInvalid = fs.ErrInvalid // \\\"invalid argument\\\" ErrPermission = fs.ErrPermission // \\\"permission denied\\\" ErrExist = fs.ErrExist // \\\"file already exists\\\" ErrNotExist = fs.ErrNotExist // \\\"file does not exist\\\" ErrClosed = fs.ErrClosed // \\\"file already closed\\\" ErrNoDeadline = errNoDeadline() // \\\"file type does not support deadline\\\" ErrDeadlineExceeded = errDeadlineExceeded() // \\\"i/o timeout\\\" )\",\"可以看到它们都是被var定义的变量\"]},\"391\":{\"h\":\"自定义错误\",\"t\":[\"通过实现Error()方法，可以很轻易的自定义error，例如erros包下的errorString就是一个很简单的实现。\",\"func New(text string) error { return &errorString{text} } // errorString结构体 type errorString struct { s string } func (e *errorString) Error() string { return e.s }\",\"因为errorString实现太过于简单，表达能力不足，所以很多开源库包括官方库都会选择自定义error，以满足不同的错误需求。\"]},\"392\":{\"h\":\"传递\",\"t\":[\"在一些情况中，调用者调用的函数返回了一个错误，但是调用者本身不负责处理错误，于是也将错误作为返回值返回，抛给上一层调用者，这个过程叫传递，错误在传递的过程中可能会层层包装，当上层调用者想要判断错误的类型来做出不同的处理时，可能会无法判别错误的类别或者误判，而链式错误正是为了解决这种情况而出现的。\",\"type wrapError struct { msg string err error } func (e *wrapError) Error() string { return e.msg } func (e *wrapError) Unwrap() error { return e.err }\",\"wrappError同样实现了error接口，也多了一个方法Unwrap，用于返回其内部对于原error的引用，层层包装下就形成了一条错误链表，顺着链表上寻找，很容易就能找到原始错误。由于该结构体并不对外暴露，所以只能使用fmt.Errorf函数来进行创建，例如\",\"err := errors.New(\\\"这是一个原始错误\\\") wrapErr := fmt.Errorf(\\\"错误，%w\\\", err)\",\"使用时，必须使用%w格式动词，且参数只能是一个有效的error。\"]},\"393\":{\"h\":\"处理\",\"t\":[\"错误处理中的最后一步就是如何处理和检查错误，errors包提供了几个方便函数用于处理错误。\",\"func Unwrap(err error) error\",\"errors.Unwrap()函数用于解包一个错误链，其内部实现也很简单\",\"func Unwrap(err error) error { u, ok := err.(interface { // 类型断言，是否实现该方法 Unwrap() error }) if !ok { //没有实现说明是一个基础的error return nil } return u.Unwrap() // 否则调用Unwrap }\",\"解包后会返回当前错误链所包裹的错误，被包裹的错误可能依旧是一个错误链，如果想要在错误链中找到对应的值或类型，可以递归进行查找匹配，不过标准库已经提供好了类似的函数。\",\"func Is(err, target error) bool\",\"errors.Is函数的作用是判断错误链中是否包含指定的错误，例子如下\",\"var originalErr = errors.New(\\\"this is an error\\\") func wrap1() error { // 包裹原始错误 return fmt.Errorf(\\\"wrapp error %w\\\", wrap2()) } func wrap2() error { // 原始错误 return originalErr } func main() { err := wrap1() if errors.Is(err, originalErr) { // 如果使用if err == originalErr 将会是false fmt.Println(\\\"original\\\") } }\",\"所以在判断错误时，不应该使用==操作符，而是应该使用errors.Is()。\",\"func As(err error, target any) bool\",\"errors.As()函数的作用是在错误链中寻找第一个类型匹配的错误，并将值赋值给传入的err。有些情况下需要将error类型的错误转换为具体的错误实现类型，以获得更详细的错误细节，而对一个错误链使用类型断言是无效的，因为原始错误是被结构体包裹起来的，这也是为什么需要As函数的原因。例子如下\",\"type TimeError struct { // 自定义error Msg string Time time.Time //记录发生错误的时间 } func (m TimeError) Error() string { return m.Msg } func NewMyError(msg string) error { return &TimeError{ Msg: msg, Time: time.Now(), } } func wrap1() error { // 包裹原始错误 return fmt.Errorf(\\\"wrapp error %w\\\", wrap2()) } func wrap2() error { // 原始错误 return NewMyError(\\\"original error\\\") } func main() { var myerr *TimeError err := wrap1() // 检查错误链中是否有*TimeError类型的错误 if errors.As(err, &myerr) { // 输出TimeError的时间 fmt.Println(\\\"original\\\", myerr.Time) } }\",\"target必须是指向error的指针，由于在创建结构体时返回的是结构体指针，所以error实际上*TimeError类型的，那么target就必须是**TimeError类型的。\",\"不过官方提供的errors包其实并不够用，因为它没有堆栈信息，不能定位，一般会比较推荐使用官方的另一个增强包\",\"github.com/pkg/errors\",\"例子\",\"import ( \\\"fmt\\\" \\\"github.com/pkg/errors\\\" ) func Do() error { return errors.New(\\\"error\\\") } func main() { if err := Do(); err != nil { fmt.Printf(\\\"%+v\\\", err) } }\",\"输出\",\"some unexpected error happened main.Do D:/WorkSpace/Code/GoLeran/golearn/main.go:9 main.main D:/WorkSpace/Code/GoLeran/golearn/main.go:13 runtime.main D:/WorkSpace/Library/go/root/go1.21.3/src/runtime/proc.go:267 runtime.goexit D:/WorkSpace/Library/go/root/go1.21.3/src/runtime/asm_amd64.s:1650\",\"通过格式化输出，就可以看到堆栈信息了，默认情况下是不会输出堆栈的。这个包相当于是标准库errors包的加强版，同样都是官方写的，不知道为什么没有并入标准库。\"]},\"394\":{\"h\":\"panic\",\"t\":[\"panic中文译为恐慌，表示十分严重的程序问题，程序需要立即停止来处理该问题，否则程序立即停止运行并输出堆栈信息，panic是Go是运行时异常的表达形式，通常在一些危险操作中会出现，主要是为了及时止损，从而避免造成更加严重的后果。不过panic在退出之前会做好程序的善后工作，同时panic也可以被恢复来保证程序继续运行。\",\"下方是一个向nil的map写入值的例子，肯定会触发panic\",\"func main() { var dic map[string]int dic[\\\"a\\\"] = 'a' }\",\"panic: assignment to entry in nil map\",\"提示\",\"当程序中存在多个协程时，只要任一协程发生panic，如果不将其捕获的话，整个程序都会崩溃\"]},\"395\":{\"h\":\"创建\",\"t\":[\"显式的创建panic十分简单，使用内置函数panic即可，函数签名如下\",\"func panic(v any)\",\"panic函数接收一个类型为 any的参数v，当输出错误堆栈信息时，v也会被输出。使用例子如下\",\"func main() { initDataBase(\\\"\\\", 0) } func initDataBase(host string, port int) { if len(host) == 0 || port == 0 { panic(\\\"非法的数据链接参数\\\") } // ...其他的逻辑 }\",\"当初始化数据库连接失败时，程序就不应该启动，因为没有数据库程序就运行的毫无意义，所以此处应该抛出panic\",\"panic: 非法的数据链接参数\"]},\"396\":{\"h\":\"善后\",\"t\":[\"程序因为panic退出之前会做一些善后工作，例如执行defer语句。\",\"func main() { defer fmt.Println(\\\"A\\\") defer fmt.Println(\\\"B\\\") fmt.Println(\\\"C\\\") panic(\\\"panic\\\") defer fmt.Println(\\\"D\\\") }\",\"输出为\",\"C B A panic: panic\",\"并且上游函数的defer语句同样会执行，例子如下\",\"func main() { defer fmt.Println(\\\"A\\\") defer fmt.Println(\\\"B\\\") fmt.Println(\\\"C\\\") dangerOp() defer fmt.Println(\\\"D\\\") } func dangerOp() { defer fmt.Println(1) defer fmt.Println(2) panic(\\\"panic\\\") defer fmt.Println(3) }\",\"输出\",\"C 2 1 B A panic: panic\",\"defer中也可以嵌套panic，下面是一个比较复杂的例子\",\"func main() { defer fmt.Println(\\\"A\\\") defer func() { func() { panic(\\\"panicA\\\") defer fmt.Println(\\\"E\\\") }() }() fmt.Println(\\\"C\\\") dangerOp() defer fmt.Println(\\\"D\\\") } func dangerOp() { defer fmt.Println(1) defer fmt.Println(2) panic(\\\"panicB\\\") defer fmt.Println(3) }\",\"defer中嵌套的panic 执行顺序依旧一致，发生panic时后续的逻辑将无法执行。\",\"C 2 1 A panic: panicB panic: panicA\",\"综上所述，当发生panic时，会立即退出所在函数，并且执行当前函数的善后工作，例如defer，然后层层上抛，上游函数同样的也进行善后工作，直到程序停止运行。\",\"当子协程发生panic时，不会触发当前协程的善后工作，如果直到子协程退出都没有恢复panic，那么程序将会直接停止运行。\",\"var waitGroup sync.WaitGroup func main() { demo() } func demo() { waitGroup.Add(1) defer func() { fmt.Println(\\\"A\\\") }() fmt.Println(\\\"C\\\") go dangerOp() waitGroup.Wait() // 父协程阻塞等待子协程执行完毕 defer fmt.Println(\\\"D\\\") } func dangerOp() { defer fmt.Println(1) defer fmt.Println(2) panic(\\\"panicB\\\") defer fmt.Println(3) waitGroup.Done() }\",\"输出为\",\"C 2 1 panic: panicB\",\"可以看到demo()中的defer语句一个都没有执行，程序就直接退出了。需要注意的是，如果没有waitGroup来阻塞父协程的话，demo()的执行速度可能会快于子协程的执行速度，输出的结果就会变得非常有迷惑性，下面稍微修改一下代码\",\"func main() { demo() } func demo() { defer func() { // 父协程善后工作要花费20ms time.Sleep(time.Millisecond * 20) fmt.Println(\\\"A\\\") }() fmt.Println(\\\"C\\\") go dangerOp() defer fmt.Println(\\\"D\\\") } func dangerOp() { // 子协程要执行一些逻辑，要花费1ms time.Sleep(time.Millisecond) defer fmt.Println(1) defer fmt.Println(2) panic(\\\"panicB\\\") defer fmt.Println(3) }\",\"输出为\",\"C D 2 1 panic: panicB\",\"在本例中，当子协程发生panic时，父协程早已完成的函数的执行，进入了善后工作，在执行最后一个defer时，碰巧遇到了子协程发生panic，所以程序就直接退出运行。\"]},\"397\":{\"h\":\"恢复\",\"t\":[\"当发生panic时，使用内置函数recover()可以及时的处理并且保证程序继续运行，必须要在defer语句中运行，使用示例如下。\",\"func main() { dangerOp() fmt.Println(\\\"程序正常退出\\\") } func dangerOp() { defer func() { if err := recover(); err != nil { fmt.Println(err) fmt.Println(\\\"panic恢复\\\") } }() panic(\\\"发生panic\\\") }\",\"调用者完全不知道dangerOp()函数内部发生了panic，程序执行剩下的逻辑后正常退出，所以输出如下\",\"发生panic panic恢复 程序正常退出\",\"但事实上recover()的使用有许多隐含的陷阱。例如在defer中再次闭包使用recover。\",\"func main() { dangerOp() fmt.Println(\\\"程序正常退出\\\") } func dangerOp() { defer func() { func() { if err := recover(); err != nil { fmt.Println(err) fmt.Println(\\\"panic恢复\\\") } }() }() panic(\\\"发生panic\\\") }\",\"闭包函数可以看作调用了一个函数，panic是向上传递而不是向下，自然闭包函数也就无法恢复panic，所以输出如下。\",\"panic: 发生panic\",\"除此之外，还有一种很极端的情况，那就是panic()的参数是nil。\",\"func main() { dangerOp() fmt.Println(\\\"程序正常退出\\\") } func dangerOp() { defer func() { if err := recover(); err != nil { fmt.Println(err) fmt.Println(\\\"panic恢复\\\") } }() panic(nil) }\",\"这种情况panic确实会恢复，但是不会输出任何的错误信息。\",\"输出\",\"程序正常退出\",\"总的来说recover函数有几个注意点\",\"必须在defer中使用\",\"多次使用也只会有一个能恢复panic\",\"闭包recover不会恢复外部函数的任何panic\",\"panic的参数禁止使用nil\"]},\"398\":{\"h\":\"fatal\",\"t\":[\"fatal是一种极其严重的问题，当发生fatal时，程序需要立刻停止运行，不会执行任何善后工作，通常情况下是调用os包下的Exit函数退出程序，如下所示\",\"func main() { dangerOp(\\\"\\\") } func dangerOp(str string) { if len(str) == 0 { fmt.Println(\\\"fatal\\\") os.Exit(1) } fmt.Println(\\\"正常逻辑\\\") }\",\"输出\",\"fatal\",\"fatal级别的问题一般很少会显式的去触发，大多数情况都是被动触发。\"]},\"399\":{\"h\":\"文件\",\"t\":[\"Go语言提供文件处理的标准库大致以下几个：\",\"os库，负责OS文件系统交互的具体实现\",\"io库，读写IO的抽象层\",\"fs库，文件系统的抽象层\",\"本文会讲解如何通过Go语言来进行基本的文件处理。\"]},\"400\":{\"h\":\"打开\",\"t\":[\"常见的两种打开文件的方式是使用os包提供的两个函数，Open函数返回值一个文件指针和一个错误，\",\"func Open(name string) (*File, error)\",\"后者OpenFile能够提供更加细粒度的控制，函数Open就是对OpenFile函数的一个简单封装。\",\"func OpenFile(name string, flag int, perm FileMode) (*File, error)\",\"先来介绍第一种使用方法，直接提供对应的文件名即可，代码如下\",\"func main() { file, err := os.Open(\\\"README.txt\\\") fmt.Println(file, err) }\",\"文件的查找路径默认为项目go.mod文件所在的路径，由于项目下并没有文件README.txt，所以自然会返回一个错误。\",\"<nil> open README.txt: The system cannot find the file specified.\",\"因为IO错误的类型有很多，所以需要手动的去判断文件是否存在，同样的os包也为此提供了方便函数，修改后的代码如下\",\"func main() { file, err := os.Open(\\\"README.txt\\\") if os.IsNotExist(err) { fmt.Println(\\\"文件不存在\\\") } else if err != nil { fmt.Println(\\\"文件访问异常\\\") } else { fmt.Println(\\\"文件读取成功\\\", file) } }\",\"再次运行输出如下\",\"文件不存在\",\"事实上第一种函数读取的文件仅仅只是只读的，无法被修改\",\"func Open(name string) (*File, error) { return OpenFile(name, O_RDONLY, 0) }\",\"通过OpenFile函数可以控制更多细节，例如修改文件描述符和文件权限，关于文件描述符，os包下提供了以下常量以供使用。\",\"const ( // 只读，只写，读写 三种必须指定一个 O_RDONLY int = syscall.O_RDONLY // 以只读的模式打开文件 O_WRONLY int = syscall.O_WRONLY // 以只写的模式打开文件 O_RDWR int = syscall.O_RDWR // 以读写的模式打开文件 // 剩余的值用于控制行为 O_APPEND int = syscall.O_APPEND // 当写入文件时，将数据添加到文件末尾 O_CREATE int = syscall.O_CREAT // 如果文件不存在则创建文件 O_EXCL int = syscall.O_EXCL // 与O_CREATE一起使用, 文件必须不存在 O_SYNC int = syscall.O_SYNC // 以同步IO的方式打开文件 O_TRUNC int = syscall.O_TRUNC // 当打开的时候截断可写的文件 )\",\"关于文件权限的则提供了以下常量。\",\"const ( ModeDir = fs.ModeDir // d: 目录 ModeAppend = fs.ModeAppend // a: 只能添加 ModeExclusive = fs.ModeExclusive // l: 专用 ModeTemporary = fs.ModeTemporary // T: 临时文件 ModeSymlink = fs.ModeSymlink // L: 符号链接 ModeDevice = fs.ModeDevice // D: 设备文件 ModeNamedPipe = fs.ModeNamedPipe // p: 具名管道 (FIFO) ModeSocket = fs.ModeSocket // S: Unix 域套接字 ModeSetuid = fs.ModeSetuid // u: setuid ModeSetgid = fs.ModeSetgid // g: setgid ModeCharDevice = fs.ModeCharDevice // c: Unix 字符设备, 前提是设置了 ModeDevice ModeSticky = fs.ModeSticky // t: 黏滞位 ModeIrregular = fs.ModeIrregular // ?: 非常规文件 // 类型位的掩码. 对于常规文件而言，什么都不会设置. ModeType = fs.ModeType ModePerm = fs.ModePerm // Unix 权限位, 0o777 )\",\"下面是一个以读写模式打开一个文件的代码例子，权限为0666，表示为所有人都可以对该文件进行读写，且不存在时会自动创建。\",\"func main() { file, err := os.OpenFile(\\\"README.txt\\\", os.O_RDWR|os.O_CREATE, 0666) if os.IsNotExist(err) { fmt.Println(\\\"文件不存在\\\") } else if err != nil { fmt.Println(\\\"文件访问异常\\\") } else { fmt.Println(\\\"文件打开成功\\\", file.Name()) file.Close() } }\",\"输出如下\",\"文件打开成功 README.txt\",\"倘若只是想获取该文件的一些信息，并不想读取该文件，可以使用os.Stat()函数进行操作，代码示例如下\",\"func main() { fileInfo, err := os.Stat(\\\"README.txt\\\") if err != nil { fmt.Println(err) } else { fmt.Println(fmt.Sprintf(\\\"%+v\\\", fileInfo)) } }\",\"输出如下\",\"&{name:README.txt FileAttributes:32 CreationTime:{LowDateTime:3603459389 HighDateTime:31016791} LastAccessTime:{LowDateTime:3603459389 HighDateTime:31016791} LastWriteTime:{LowDateTime:3603459389 HighDateTime:31016791} FileSizeHigh :0 FileSizeLow:0 Reserved0:0 filetype:0 Mutex:{state:0 sema:0} path:README.txt vol:0 idxhi:0 idxlo:0 appendNameToPath:false}\",\"注意\",\"打开一个文件后永远要记得关闭该文件，通常关闭操作会放在defer语句里\",\"defer file.Close()\"]},\"401\":{\"h\":\"读取\",\"t\":[\"当成功的打开文件后，便可以进行读取操作了，关于读取文件的操作，*os.File类型提供了以下几个公开的方法\",\"// 将文件读进传入的字节切片 func (f *File) Read(b []byte) (n int, err error) // 相较于第一种可以从指定偏移量读取 func (f *File) ReadAt(b []byte, off int64) (n int, err error)\",\"大多数情况第一种使用的较多。针对于第一种方法，需要自行编写逻辑来进行读取时切片的动态扩容，代码如下\",\"func ReadFile(file *os.File) ([]byte, error) { buffer := make([]byte, 0, 512) for { // 当容量不足时 if len(buffer) == cap(buffer) { // 扩容 buffer = append(buffer, 0)[:len(buffer)] } // 继续读取文件 offset, err := file.Read(buffer[len(buffer):cap(buffer)]) // 将已写入的数据归入切片 buffer = buffer[:len(buffer)+offset] // 发生错误时 if err != nil { if errors.Is(err, io.EOF) { err = nil } return buffer, err } } }\",\"剩余逻辑如下\",\"func main() { file, err := os.OpenFile(\\\"README.txt\\\", os.O_RDWR|os.O_CREATE, 0666) if err != nil { fmt.Println(\\\"文件访问异常\\\") } else { fmt.Println(\\\"文件打开成功\\\", file.Name()) bytes, err := ReadFile(file) if err != nil { fmt.Println(\\\"文件读取异常\\\", err) } else { fmt.Println(string(bytes)) } file.Close() } }\",\"输出为\",\"文件打开成功 README.txt hello world!\",\"除此之外，还可以使用两个方便函数来进行文件读取，分别是os包下的ReadFile函数，以及io包下的ReadAll函数。对于os.ReadFile而言，只需要提供文件路径即可，而对于io.ReadAll而言，则需要提供一个io.Reader类型的实现，\",\"os.ReadFile\",\"func ReadFile(name string) ([]byte, error)\",\"使用例子如下\",\"func main() { bytes, err := os.ReadFile(\\\"README.txt\\\") if err != nil { fmt.Println(err) } else { fmt.Println(string(bytes)) } }\",\"输出如下\",\"hello world!\",\"io.ReadAll\",\"func ReadAll(r Reader) ([]byte, error)\",\"使用例子如下\",\"func main() { file, err := os.OpenFile(\\\"README.txt\\\", os.O_RDWR|os.O_CREATE, 0666) if err != nil { fmt.Println(\\\"文件访问异常\\\") } else { fmt.Println(\\\"文件打开成功\\\", file.Name()) bytes, err := io.ReadAll(file) if err != nil { fmt.Println(err) } else { fmt.Println(string(bytes)) } file.Close() } }\",\"文件打开成功 README.txt hello world!\"]},\"402\":{\"h\":\"写入\",\"t\":[\"os.File结构体提供了以下几种方法以供写入数据\",\"// 写入字节切片 func (f *File) Write(b []byte) (n int, err error) // 写入字符串 func (f *File) WriteString(s string) (n int, err error) // 从指定位置开始写，当以os.O_APPEND模式打开时，会返回错误 func (f *File) WriteAt(b []byte, off int64) (n int, err error)\",\"如果想要对一个文件写入数据，则必须以O_WRONLY或O_RDWR的模式打开，否则无法成功写入文件。下面是一个以os.O_RDWR|os.O_CREATE|os.O_APPEND|os.O_TRUNC模式打开文件，且权限为0666向指定写入数据的例子\",\"func main() { file, err := os.OpenFile(\\\"README.txt\\\", os.O_RDWR|os.O_CREATE|os.O_APPEND|os.O_TRUNC, 0666) if err != nil { fmt.Println(\\\"文件访问异常\\\") } else { fmt.Println(\\\"文件打开成功\\\", file.Name()) for i := 0; i < 5; i++ { offset, err := file.WriteString(\\\"hello world!\\\\n\\\") if err != nil { fmt.Println(offset, err) } } fmt.Println(file.Close()) } }\",\"由于是以os.O_APPEND模式打开的文件，所以在写入文件时会将数据添加到文件尾部，执行完毕后文件内容如下\",\"hello world! hello world! hello world! hello world! hello world!\",\"向文件写入字节切片也是类似的操作，就不再赘述。对于写入文件的操作标准库同样提供了方便函数，分别是os.WriteFile与io.WriteString\",\"os.WriteFile\",\"func WriteFile(name string, data []byte, perm FileMode) error\",\"使用例子如下\",\"func main() { err := os.WriteFile(\\\"README.txt\\\", []byte(\\\"hello world!\\\\n\\\"), 0666) if err != nil { fmt.Println(err) } }\",\"此时文件内容如下\",\"hello world!\",\"io.WriteString\",\"func WriteString(w Writer, s string) (n int, err error)\",\"使用例子如下\",\"func main() { file, err := os.OpenFile(\\\"README.txt\\\", os.O_RDWR|os.O_CREATE|os.O_APPEND|os.O_TRUNC, 0666) if err != nil { fmt.Println(\\\"文件访问异常\\\") } else { fmt.Println(\\\"文件打开成功\\\", file.Name()) for i := 0; i < 5; i++ { offset, err := io.WriteString(file, \\\"hello world!\\\\n\\\") if err != nil { fmt.Println(offset, err) } } fmt.Println(file.Close()) } }\",\"hello world! hello world! hello world! hello world! hello world!\",\"函数os.Create函数用于创建文件，本质上也是对OpenFile的封装。\",\"func Create(name string) (*File, error) { return OpenFile(name, O_RDWR|O_CREATE|O_TRUNC, 0666) }\",\"注意\",\"在创建一个文件时，如果其父目录不存在，将创建失败并会返回错误。\"]},\"403\":{\"h\":\"复制\",\"t\":[\"对于复制文件而言，需要同时打开两个文件，第一种方法是将原文件中的数据读取出来，然后写入目标文件中，代码示例如下\",\"func main() { // 从原文件中读取数据 data, err := os.ReadFile(\\\"README.txt\\\") if err != nil { fmt.Println(err) return } // 写入目标文件 err = os.WriteFile(\\\"README(1).txt\\\", data, 0666) if err != nil { fmt.Println(err) } else { fmt.Println(\\\"复制成功\\\") } }\",\"*os.File.ReadFrom\",\"另一种方法是使用os.File提供的方法ReadFrom，打开文件时，一个只读，一个只写。\",\"func (f *File) ReadFrom(r io.Reader) (n int64, err error)\",\"使用示例如下\",\"func main() { // 以只读的方式打开原文件 origin, err := os.OpenFile(\\\"README.txt\\\", os.O_RDONLY, 0666) if err != nil { fmt.Println(err) return } defer origin.Close() // 以只写的方式打开副本文件 target, err := os.OpenFile(\\\"README(1).txt\\\", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666) if err != nil { fmt.Println(err) return } defer target.Close() // 从原文件中读取数据，然后写入副本文件 offset, err := target.ReadFrom(origin) if err != nil { fmt.Println(err) return } fmt.Println(\\\"文件复制成功\\\", offset) }\",\"这种复制方式需要先将源文件的全部内容读取到内存中，再写入目标文件，文件特别大的时候不建议这么做。\",\"io.Copy\",\"另一种方法就是使用io.Copy函数，它则是一边读一边写，先将内容读到缓冲区中，再写入到目标文件中，缓冲区默认大小为32KB。\",\"func Copy(dst Writer, src Reader) (written int64, err error)\",\"使用示例如下\",\"func main() { // 以只读的方式打开原文件 origin, err := os.OpenFile(\\\"README.txt\\\", os.O_RDONLY, 0666) if err != nil { fmt.Println(err) return } defer origin.Close() // 以只写的方式打开副本文件 target, err := os.OpenFile(\\\"README(1).txt\\\", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666) if err != nil { fmt.Println(err) return } defer target.Close() // 复制 written, err := io.Copy(target, origin) if err != nil { fmt.Println(err) } else { fmt.Println(written) } }\",\"你也可以使用io.CopyBuffer来指定缓冲区大小。\"]},\"404\":{\"h\":\"重命名\",\"t\":[\"重命名也可以理解为移动文件，会用到os包下的Rename函数。\",\"func Rename(oldpath, newpath string) error\",\"示例如下\",\"func main() { err := os.Rename(\\\"README.txt\\\", \\\"readme.txt\\\") if err != nil { fmt.Println(err) } else { fmt.Println(\\\"重命名成功\\\") } }\",\"该函数对于文件夹也是同样的效果。\"]},\"405\":{\"h\":\"删除\",\"t\":[\"删除操作相较于其他操作要简单的多，只会用到os包下的两个函数\",\"// 删除单个文件或者空目录，当目录不为空时会返回错误 func Remove(name string) error // 删除指定目录的所有文件和目录包括子目录与子文件 func RemoveAll(path string) error\",\"使用起来十分的简单，下面是删除目录的例子\",\"func main() { // 删除当前目录下所有的文件与子目录 err := os.RemoveAll(\\\".\\\") if err != nil { fmt.Println(err) }else { fmt.Println(\\\"删除成功\\\") } }\",\"下面是删除单个文件的例子\",\"func main() { // 删除当前目录下所有的文件与子目录 err := os.Remove(\\\"README.txt\\\") if err != nil { fmt.Println(err) } else { fmt.Println(\\\"删除成功\\\") } }\"]},\"406\":{\"h\":\"刷新\",\"t\":[\"os.Sync这一个函数封装了底层的系统调用Fsync，用于将操作系统中缓存的IO写入落实到磁盘上\",\"func main() { create, err := os.Create(\\\"test.txt\\\") if err != nil { panic(err) } defer create.Close() _, err = create.Write([]byte(\\\"hello\\\")) if err != nil { panic(err) } // 刷盘 if err := create.Sync();err != nil { return } }\"]},\"407\":{\"h\":\"文件夹\",\"t\":[\"文件夹的许多操作都与文件操作类似\"]},\"408\":{\"h\":\"读取\",\"t\":[\"对于文件夹而言，打开方式有两种，\",\"os.ReadDir\",\"第一种方式是使用os.ReadDir函数\",\"func ReadDir(name string) ([]DirEntry, error)\",\"func main() { // 当前目录 dir, err := os.ReadDir(\\\".\\\") if err != nil { fmt.Println(err) } else { for _, entry := range dir { fmt.Println(entry.Name()) } } }\",\"*os.File.ReadDir\",\"第二种方式是使用*os.File.ReadDir函数，os.ReadDir本质上也只是对*os.File.ReadDir的一层简单封装。\",\"// n < 0时，则读取文件夹下所有的内容 func (f *File) ReadDir(n int) ([]DirEntry, error)\",\"func main() { // 当前目录 dir, err := os.Open(\\\".\\\") if err != nil { fmt.Println(err) } defer dir.Close() dirs, err := dir.ReadDir(-1) if err != nil { fmt.Println(err) } else { for _, entry := range dirs { fmt.Println(entry.Name()) } } }\"]},\"409\":{\"h\":\"创建\",\"t\":[\"创建文件夹操作会用到os包下的两个函数\",\"// 用指定的权限创建指定名称的目录 func Mkdir(name string, perm FileMode) error // 相较于前者该函数会创建一切必要的父目录 func MkdirAll(path string, perm FileMode) error\",\"示例如下\",\"func main() { err := os.Mkdir(\\\"src\\\", 0666) if err != nil { fmt.Println(err) } else { fmt.Println(\\\"创建成功\\\") } }\"]},\"410\":{\"h\":\"复制\",\"t\":[\"我们可以自己写函数递归遍历整个文件夹，不过filepath标准库已经提供了类似功能的函数，所以可以直接使用，一个简单的文件夹复制的代码示例如下。\",\"func CopyDir(src, dst string) error { // 检查源文件夹的状态 _, err := os.Stat(src) if err != nil { return err } return filepath.Walk(src, func(path string, info fs.FileInfo, err error) error { if err != nil { return err } // 计算相对路径 rel, err := filepath.Rel(src, path) if err != nil { return err } // 拼接目标路径 destpath := filepath.Join(dst, rel) // 创建文件夹 var dirpath string var mode os.FileMode = 0755 if info.IsDir() { dirpath = destpath mode = info.Mode() } else if info.Mode().IsRegular() { dirpath = filepath.Dir(destpath) } if err := os.MkdirAll(dirpath, mode); err != nil { return err } // 创建文件 if info.Mode().IsRegular() { srcfile, err := os.Open(path) if err != nil { return err } // 一定要记得关闭文件 defer srcfile.Close() destfile, err := os.OpenFile(destpath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, info.Mode()) if err != nil { return err } defer destfile.Close() // 复制文件内容 if _, err := io.Copy(destfile, srcfile); err != nil { return err } return nil } return nil }) }\",\"filepath.Walk会递归遍历整个文件夹，在过程中，遇到文件夹就创建文件夹，遇到文件就创建新文件并复制，代码相比复制文件有点多但算不上复杂。\"]},\"411\":{\"h\":\"并发\",\"t\":[\"Go语言对于并发的支持是纯天然的，这是这门语言的核心所在，其上手难度相对较小，开发人员不太需要关注底层实现就能做出一个相当不错的并发应用，提高了开发人员的下限。\"]},\"412\":{\"h\":\"协程\",\"t\":[\"协程（coroutine）是一种轻量级的线程，或者说是用户态的线程，不受操作系统直接调度，由Go语言自身的调度器进行运行时调度，因此上下文切换开销非常小，这也是为什么Go的并发性能很不错的原因之一。协程这一概念并非Go首次提出，Go也不是第一个支持协程的语言，但Go是第一个能够将协程和并发支持的相当简洁和优雅的语言。\",\"在Go中，创建一个协程十分的简单，仅需要一个go关键字，就能够快速开启一个协程，go关键字后面必须是一个函数调用。例子如下\",\"提示\",\"具有返回值的内置函数不允许跟随在go关键字后面，例如下面的错误示范\",\"go make([]int,10) // go discards result of make([]int, 10) (value of type []int)\",\"func main() { go fmt.Println(\\\"hello world!\\\") go hello() go func() { fmt.Println(\\\"hello world!\\\") }() } func hello() { fmt.Println(\\\"hello world!\\\") }\",\"以上三种开启协程的方式都是可以的，但是其实这个例子执行过后在大部分情况下什么都不会输出，协程是并发执行的，系统创建协程需要时间，而在此之前，主协程早已运行结束，一旦主线程退出，其他子协程也就自然退出了。并且协程的执行顺序也是不确定的，无法预判的，例如下面的例子\",\"func main() { fmt.Println(\\\"start\\\") for i := 0; i < 10; i++ { go fmt.Println(i) } fmt.Println(\\\"end\\\") }\",\"这是一个在循环体中开启协程的例子，永远也无法精准的预判到它到底会输出什么。可能子协程还没开始运行，主协程就已经结束了，情况如下\",\"start end\",\"又或者只有一部分子协程在主协程退出前成功运行，情况如下\",\"start 0 1 5 3 4 6 7 end\",\"最简单的做法就是让主协程等一会儿，需要使用到time包下的Sleep函数，可以使当前协程暂停一段时间，例子如下\",\"func main() { fmt.Println(\\\"start\\\") for i := 0; i < 10; i++ { go fmt.Println(i) } // 暂停1ms time.Sleep(time.Millisecond) fmt.Println(\\\"end\\\") }\",\"再次执行输出如下，可以看到所有的数字都完整输出了，没有遗漏\",\"start 0 1 5 2 3 4 6 8 9 7 end\",\"但是顺序还是乱的，因此让每次循环都稍微的等一下。例子如下\",\"func main() { fmt.Println(\\\"start\\\") for i := 0; i < 10; i++ { go fmt.Println(i) time.Sleep(time.Millisecond) } time.Sleep(time.Millisecond) fmt.Println(\\\"end\\\") }\",\"现在的输出已经是正常的顺序了\",\"start 0 1 2 3 4 5 6 7 8 9 end\",\"上面的例子中结果输出很完美，那么并发的问题解决了吗，不，一点也没有。对于并发的程序而言，不可控的因素非常多，执行的时机，先后顺序，执行过程的耗时等等，倘若循环中子协程的工作不只是一个简单的输出数字，而是一个非常巨大复杂的任务，耗时的不确定的，那么依旧会重现之前的问题。例如下方代码\",\"func main() { fmt.Println(\\\"start\\\") for i := 0; i < 10; i++ { go hello(i) time.Sleep(time.Millisecond) } time.Sleep(time.Millisecond) fmt.Println(\\\"end\\\") } func hello(i int) { // 模拟随机耗时 time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) fmt.Println(i) }\",\"这段代码的输出依旧是不确定的，下面是可能的情况之一\",\"start 0 3 4 end\",\"因此time.Sleep并不是一种良好的解决办法，幸运的是Go提供了非常多的并发控制手段，常用的并发控制方法有三种：\",\"channel：管道\",\"WaitGroup：信号量\",\"Context：上下文\",\"三种方法有着不同的适用情况，WaitGroup可以动态的控制一组指定数量的协程，Context更适合子孙协程嵌套层级更深的情况，管道更适合协程间通信。对于较为传统的锁控制，Go也对此提供了支持：\",\"Mutex：互斥锁\",\"RWMutex ：读写互斥锁\"]},\"413\":{\"h\":\"管道\",\"t\":[\"channel，译为管道，Go对于管道的作用如下解释：\",\"Do not communicate by sharing memory; instead, share memory by communicating.\",\"即通过消息来进行内存共享，channel就是为此而生，它是一种在协程间通信的解决方案，同时也可以用于并发控制，先来认识下channel的基本语法。Go中通过关键字chan来代表管道类型，同时也必须声明管道的存储类型，来指定其存储的数据是什么类型，下面的例子是一个普通管道的模样。\",\"var ch chan int\",\"这是一个管道的声明语句，此时管道还未初始化，其值为nil，不可以直接使用。\"]},\"414\":{\"h\":\"创建\",\"t\":[\"在创建管道时，有且只有一种方法，那就是使用内置函数make，对于管道而言，make函数接收两个参数，第一个是管道的类型，第二个是可选参数为管道的缓冲大小。例子如下\",\"intCh := make(chan int) // 缓冲区大小为1的管道 strCh := make(chan string, 1)\",\"在使用完一个管道后一定要记得关闭该管道，使用内置函数close来关闭一个管道，该函数签名如下。\",\"func close(c chan<- Type)\",\"一个关闭管道的例子如下\",\"func main() { intCh := make(chan int) // do something close(intCh) }\",\"有些时候使用defer来关闭管道可能会更好。\"]},\"415\":{\"h\":\"读写\",\"t\":[\"对于一个管道而言，Go使用了两种很形象的操作符来表示读写操作：\",\"ch <-：表示对一个管道写入数据\",\"<- ch：表示对一个管道读取数据\",\"<-很生动的表示了数据的流动方向，来看一个对int类型的管道读写的例子\",\"func main() { // 如果没有缓冲区则会导致死锁 intCh := make(chan int, 1) defer close(intCh) // 写入数据 intCh <- 114514 // 读取数据 fmt.Println(<-intCh) }\",\"上面的例子中创建了一个缓冲区大小为1的int型管道，对其写入数据114514，然后再读取数据并输出，最后关闭该管道。对于读取操作而言，还有第二个返回值，一个布尔类型的值，用于表示数据是否读取成功\",\"ints, ok := <-intCh\",\"管道中的数据流动方式与队列一样，即先进先出（FIFO），协程对于管道的操作是同步的，在某一个时刻，只有一个协程能够对其写入数据，同时也只有一个协程能够读取管道中的数据。\"]},\"416\":{\"h\":\"无缓冲\",\"t\":[\"对于无缓冲管道而言，因为缓冲区容量为0，所以不会临时存放任何数据。正因为无缓冲管道无法存放数据，在向管道写入数据时必须立刻有其他协程来读取数据，否则就会阻塞等待，读取数据时也是同理，这也解释了为什么下面看起来很正常的代码会发生死锁。\",\"func main() { // 创建无缓冲管道 ch := make(chan int) defer close(ch) // 写入数据 ch <- 123 // 读取数据 n := <-ch fmt.Println(n) }\",\"无缓冲管道不应该同步的使用，正确来说应该开启一个新的协程来发送数据，如下例\",\"func main() { // 创建无缓冲管道 ch := make(chan int) defer close(ch) go func() { // 写入数据 ch <- 123 }() // 读取数据 n := <-ch fmt.Println(n) }\"]},\"417\":{\"h\":\"有缓冲\",\"t\":[\"当管道有了缓冲区，就像是一个阻塞队列一样，读取空的管道和写入已满的管道都会造成阻塞。无缓冲管道在发送数据时，必须立刻有人接收，否则就会一直阻塞。对于有缓冲管道则不必如此，对于有缓冲管道写入数据时，会先将数据放入缓冲区里，只有当缓冲区容量满了才会阻塞的等待协程来读取管道中的数据。同样的，读取有缓冲管道时，会先从缓冲区中读取数据，直到缓冲区没数据了，才会阻塞的等待协程来向管道中写入数据。因此，无缓冲管道中会造成死锁例子在这里可以顺利运行。\",\"func main() { // 创建有缓冲管道 ch := make(chan int, 1) defer close(ch) // 写入数据 ch <- 123 // 读取数据 n := <-ch fmt.Println(n) }\",\"尽管可以顺利运行，但这种同步读写的方式是非常危险的，一旦管道缓冲区空了或者满了，将会永远阻塞下去，因为没有其他协程来向管道中写入或读取数据。来看看下面的一个例子\",\"func main() { // 创建有缓冲管道 ch := make(chan int, 5) // 创建两个无缓冲管道 chW := make(chan struct{}) chR := make(chan struct{}) defer func() { close(ch) close(chW) close(chR) }() // 负责写 go func() { for i := 0; i < 10; i++ { ch <- i fmt.Println(\\\"写入\\\", i) } chW <- struct{}{} }() // 负责读 go func() { for i := 0; i < 10; i++ { // 每次读取数据都需要花费1毫秒 time.Sleep(time.Millisecond) fmt.Println(\\\"读取\\\", <-ch) } chR <- struct{}{} }() fmt.Println(\\\"写入完毕\\\", <-chW) fmt.Println(\\\"读取完毕\\\", <-chR) }\",\"这里总共创建了3个管道，一个有缓冲管道用于协程间通信，两个无缓冲管道用于同步父子协程的执行顺序。负责读的协程每次读取之前都会等待1毫秒，负责写的协程一口气做多也只能写入5个数据，因为管道缓冲区最大只有5，在没有协程来读取之前，只能阻塞等待。所以该示例输出如下\",\"写入 0 写入 1 写入 2 写入 3 写入 4 // 一下写了5个，缓冲区满了，等其他协程来读 读取 0 写入 5 // 读一个，写一个 读取 1 写入 6 读取 2 写入 7 读取 3 写入 8 写入 9 读取 4 写入完毕 {} // 所有的数据都发送完毕，写协程执行完毕 读取 5 读取 6 读取 7 读取 8 读取 9 读取完毕 {} // 所有的数据都读完了，读协程执行完毕\",\"可以看到负责写的协程刚开始就一口气发送了5个数据，缓冲区满了以后就开始阻塞等待读协程来读取，后面就是每当读协程1毫秒读取一个数据，缓冲区有空位了，写协程就写入一个数据，直到所有数据发送完毕，写协程执行结束，随后当读协程将缓冲区所有数据读取完毕后，读协程也执行结束，最后主协程退出。\",\"提示\",\"通过内置函数len可以访问管道缓冲区中数据的个数，通过cap可以访问管道缓冲区的大小。\",\"func main() { ch := make(chan int, 5) ch <- 1 ch <- 2 ch <- 3 fmt.Println(len(ch), cap(ch)) }\",\"输出\",\"3 5\",\"利用管道的阻塞条件，可以很轻易的写出一个主协程等待子协程执行完毕的例子\",\"func main() { // 创建一个无缓冲管道 ch := make(chan struct{}) defer close(ch) go func() { fmt.Println(2) // 写入 ch <- struct{}{} }() // 阻塞等待读取 <-ch fmt.Println(1) }\",\"输出\",\"2 1\",\"通过有缓冲管道还可以实现一个简单的互斥锁，看下面的例子\",\"var count = 0 // 缓冲区大小为1的管道 var lock = make(chan struct{}, 1) func Add() { // 加锁 lock <- struct{}{} fmt.Println(\\\"当前计数为\\\", count, \\\"执行加法\\\") count += 1 // 解锁 <-lock } func Sub() { // 加锁 lock <- struct{}{} fmt.Println(\\\"当前计数为\\\", count, \\\"执行减法\\\") count -= 1 // 解锁 <-lock }\",\"由于管道的缓冲区大小为1，最多只有一个数据存放在缓冲区中。Add和Sub函数在每次操作前都会尝试向管道中发送数据，由于缓冲区大小为1，倘若有其他协程已经写入了数据，缓冲区已经满了，当前协程就必须阻塞等待，直到缓冲区空出位置来，如此一来，在某一个时刻，最多只能有一个协程对变量count进行修改，这样就实现了一个简单的互斥锁。\"]},\"418\":{\"h\":\"注意点\",\"t\":[\"下面是一些总结，以下几种情况使用不当会导致管道阻塞：\",\"读写无缓冲管道\",\"当对一个无缓冲管道直接进行同步读写操作都会导致该协程阻塞\",\"func main() { // 创建了一个无缓冲管道 intCh := make(chan int) defer close(intCh) // 发送数据 intCh <- 1 // 读取数据 ints, ok := <-intCh fmt.Println(ints, ok) }\",\"读取空缓冲区的管道\",\"当读取一个缓冲区为空的管道时，会导致该协程阻塞\",\"func main() { // 创建的有缓冲管道 intCh := make(chan int, 1) defer close(intCh) // 缓冲区为空，阻塞等待其他协程写入数据 ints, ok := <-intCh fmt.Println(ints, ok) }\",\"写入满缓冲区的管道\",\"当管道的缓冲区已满，对其写入数据会导致该协程阻塞\",\"func main() { // 创建的有缓冲管道 intCh := make(chan int, 1) defer close(intCh) intCh <- 1 // 满了，阻塞等待其他协程来读取数据 intCh <- 1 }\",\"管道为nil\",\"当管道为nil时，无论怎样读写都会导致当前协程阻塞\",\"func main() { var intCh chan int // 写 intCh <- 1 }\",\"func main() { var intCh chan int // 读 fmt.Println(<-intCh) }\",\"关于管道阻塞的条件需要好好掌握和熟悉，大多数情况下这些问题隐藏的十分隐蔽，并不会像例子中那样直观。\",\"以下几种情况还会导致panic：\",\"关闭一个nil管道\",\"当管道为nil时，使用close函数对其进行关闭操作会导致panic`\",\"func main() { var intCh chan int close(intCh) }\",\"写入已关闭的管道\",\"对一个已关闭的管道写入数据会导致panic\",\"func main() { intCh := make(chan int, 1) close(intCh) intCh <- 1 }\",\"关闭已关闭的管道\",\"在一些情况中，管道可能经过层层传递，调用者或许也不知道到底该由谁来关闭管道，如此一来，可能会发生关闭一个已经关闭了的管道，就会发生panic。\",\"func main() { ch := make(chan int, 1) defer close(ch) go write(ch) fmt.Println(<-ch) } func write(ch chan<- int) { // 只能对管道发送数据 ch <- 1 close(ch) }\"]},\"419\":{\"h\":\"单向管道\",\"t\":[\"双向管道指的是既可以写，也可以读，即可以在管道两边进行操作。单向管道指的是只读或只写的管道，即只能在管道的一边进行操作。手动创建的一个只读或只写的管道没有什么太大的意义，因为不能对管道读写就失去了其存在的作用。单向管道通常是用来限制通道的行为，一般会在函数的形参和返回值中出现，例如用于关闭通道的内置函数close的函数签名就用到了单向通道。\",\"func close(c chan<- Type)\",\"又或者说常用到的time包下的After函数\",\"func After(d Duration) <-chan Time\",\"close函数的形参是一个只写通道，After函数的返回值是一个只读通道，所以单向通道的语法如下：\",\"箭头符号<-在前，就是只读通道，如<-chan int\",\"箭头符号<-在后，就是只写通道，如chan<- string\",\"当尝试对只读的管道写入数据时，将会无法通过编译\",\"func main() { timeCh := time.After(time.Second) timeCh <- time.Now() }\",\"报错如下，意思非常明确\",\"invalid operation: cannot send to receive-only channel timeCh (variable of type <-chan time.Time)\",\"对只写的管道读取数据也是同理。\",\"双向管道可以转换为单向管道，反过来则不可以。通常情况下，将双向管道传给某个协程或函数并且不希望它读取/发送数据，就可以用到单向管道来限制另一方的行为。\",\"func main() { ch := make(chan int, 1) go write(ch) fmt.Println(<-ch) } func write(ch chan<- int) { // 只能对管道发送数据 ch <- 1 }\",\"只读管道也是一样的道理\",\"提示\",\"chan是引用类型，即便Go的函数参数是值传递，但其引用依旧是同一个，这一点会在后续的管道原理中说明。\"]},\"420\":{\"h\":\"for range\",\"t\":[\"通过for range语句，可以遍历读取缓冲管道中的数据，如下例\",\"func main() { ch := make(chan int, 10) go func() { for i := 0; i < 10; i++ { ch <- i } }() for n := range ch { fmt.Println(n) } }\",\"通常来说，for range遍历其他可迭代数据结构时，会有两个返回值，第一个是索引，第二个元素值，但是对于管道而言，有且仅有一个返回值，for range会不断读取管道中的元素，当管道缓冲区为空或无缓冲时，就会阻塞等待，直到有其他协程向管道中写入数据才会继续读取数据。所以输出如下：\",\"0 1 2 3 4 5 6 7 8 9 fatal error: all goroutines are asleep - deadlock!\",\"可以看到上面的代码发生了死锁，因为子协程已经执行完毕了，而主协程还在阻塞等待其他协程来向管道中写入数据，所以应该管道在写入完毕后将其关闭。修改为如下代码\",\"func main() { ch := make(chan int, 10) go func() { for i := 0; i < 10; i++ { ch <- i } // 关闭管道 close(ch) }() for n := range ch { fmt.Println(n) } }\",\"写完后关闭管道，上述代码便不再会发生死锁。前面提到过读取管道是有两个返回值的，for range遍历管道时，当无法成功读取数据时，便会退出循环。第二个返回值指的是能否成功读取数据，而不是管道是否已经关闭，即便管道已经关闭，对于有缓冲管道而言，依旧可以读取数据，并且第二个返回值仍然为true。看下面的一个例子\",\"func main() { ch := make(chan int, 10) for i := 0; i < 5; i++ { ch <- i } // 关闭管道 close(ch) // 再读取数据 for i := 0; i < 6; i++ { n, ok := <-ch fmt.Println(n, ok) } }\",\"输出结果\",\"0 true 1 true 2 true 3 true 4 true 0 false\",\"由于管道已经关闭了，即便缓冲区为空，再读取数据也不会导致当前协程阻塞，可以看到在第六次遍历的时候读取的是零值，并且ok为false。\",\"提示\",\"关于管道关闭的时机，应该尽量在向管道发送数据的那一方关闭管道，而不要在接收方关闭管道，因为大多数情况下接收方只知道接收数据，并不知道该在什么时候关闭管道。\"]},\"421\":{\"h\":\"select\",\"t\":[\"select在Linux系统中，是一种IO多路复用的解决方案，类似的，在Go中，select是一种管道多路复用的控制结构。什么是多路复用，简单的用一句话概括：在某一时刻，同时监测多个元素是否可用，被监测的可以是网络请求，文件IO等。在Go中的select监测的元素就是管道，且只能是管道。select的语法与switch语句类似，下面看看一个select语句长什么样\",\"func main() { // 创建三个管道 chA := make(chan int) chB := make(chan int) chC := make(chan int) defer func() { close(chA) close(chB) close(chC) }() select { case n, ok := <-chA: fmt.Println(n, ok) case n, ok := <-chB: fmt.Println(n, ok) case n, ok := <-chC: fmt.Println(n, ok) default: fmt.Println(\\\"所有管道都不可用\\\") } }\",\"与switch类似，select由多个case和一个default组成，default分支可以省略。每一个case只能操作一个管道，且只能进行一种操作，要么读要么写，当有多个case可用时，select会伪随机的选择一个case来执行。如果所有case都不可用，就会执行default分支，倘若没有default分支，将会阻塞等待，直到至少有一个case可用。由于上例中没有对管道写入数据，自然所有的case都不可用，所以最终输出为default分支的执行结果。稍微修改下后如下：\",\"func main() { chA := make(chan int) chB := make(chan int) chC := make(chan int) defer func() { close(chA) close(chB) close(chC) }() // 开启一个新的协程 go func() { // 向A管道写入数据 chA <- 1 }() select { case n, ok := <-chA: fmt.Println(n, ok) case n, ok := <-chB: fmt.Println(n, ok) case n, ok := <-chC: fmt.Println(n, ok) } }\",\"上例开启了一个新的协程来向管道A写入数据，select由于没有默认分支，所以会一直阻塞等待直到有case可用。当管道A可用时，执行完对应分支后主协程就直接退出了。要想一直监测管道，可以配合for循环使用，如下。\",\"func main() { chA := make(chan int) chB := make(chan int) chC := make(chan int) defer func() { close(chA) close(chB) close(chC) }() go Send(chA) go Send(chB) go Send(chC) // for循环 for { select { case n, ok := <-chA: fmt.Println(\\\"A\\\", n, ok) case n, ok := <-chB: fmt.Println(\\\"B\\\", n, ok) case n, ok := <-chC: fmt.Println(\\\"C\\\", n, ok) } } } func Send(ch chan<- int) { for i := 0; i < 3; i++ { time.Sleep(time.Millisecond) ch <- i } }\",\"这样确实三个管道都能用上了，但是死循环+select会导致主协程永久阻塞，所以可以将其单独放到新协程中，并且加上一些其他的逻辑。\",\"func main() { chA := make(chan int) chB := make(chan int) chC := make(chan int) defer func() { close(chA) close(chB) close(chC) }() l := make(chan struct{}) go Send(chA) go Send(chB) go Send(chC) go func() { Loop: for { select { case n, ok := <-chA: fmt.Println(\\\"A\\\", n, ok) case n, ok := <-chB: fmt.Println(\\\"B\\\", n, ok) case n, ok := <-chC: fmt.Println(\\\"C\\\", n, ok) case <-time.After(time.Second): // 设置1秒的超时时间 break Loop // 退出循环 } } l <- struct{}{} // 告诉主协程可以退出了 }() <-l } func Send(ch chan<- int) { for i := 0; i < 3; i++ { time.Sleep(time.Millisecond) ch <- i } }\",\"上例中通过for循环配合select来一直监测三个管道是否可以用，并且第四个case是一个超时管道，超时过后便会退出循环，结束子协程。最终输出如下\",\"C 0 true A 0 true B 0 true A 1 true B 1 true C 1 true B 2 true C 2 true A 2 true\",\"超时\",\"上一个例子用到了time.After函数，其返回值是一个只读的管道，该函数配合select使用可以非常简单的实现超时机制，例子如下\",\"func main() { chA := make(chan int) defer close(chA) go func() { time.Sleep(time.Second * 2) chA <- 1 }() select { case n := <-chA: fmt.Println(n) case <-time.After(time.Second): fmt.Println(\\\"超时\\\") } }\",\"永久阻塞\",\"当select语句中什么都没有时，就会永久阻塞，例如\",\"func main() { fmt.Println(\\\"start\\\") select {} fmt.Println(\\\"end\\\") }\",\"end永远也不会输出，主协程会一直阻塞，这种情况一般是有特殊用途。\",\"提示\",\"在select的case中对值为nil的管道进行操作的话，并不会导致阻塞，该case则会被忽略，永远也不会被执行。例如下方代码无论执行多少次都只会输出timeout。\",\"func main() { var nilCh chan int select { case <-nilCh: fmt.Println(\\\"read\\\") case nilCh <- 1: fmt.Println(\\\"write\\\") case <-time.After(time.Second): fmt.Println(\\\"timeout\\\") } }\"]},\"422\":{\"h\":\"WaitGroup\",\"t\":[\"sync.WaitGroup是sync包下提供的一个结构体，WaitGroup即等待执行，使用它可以很轻易的实现等待一组协程的效果。该结构体只对外暴露三个方法。\",\"Add方法用于指明要等待的协程的数量\",\"func (wg *WaitGroup) Add(delta int)\",\"Done方法表示当前协程已经执行完毕\",\"func (wg *WaitGroup) Done()\",\"Wait方法等待子协程结束，否则就阻塞\",\"func (wg *WaitGroup) Wait()\",\"WaitGroup使用起来十分简单，属于开箱即用。其内部的实现是计数器+信号量，程序开始时调用Add初始化计数，每当一个协程执行完毕时调用Done，计数就-1，直到减为0，而在此期间，主协程调用Wait 会一直阻塞直到全部计数减为0，然后才会被唤醒。看一个简单的使用例子\",\"func main() { var wait sync.WaitGroup // 指定子协程的数量 wait.Add(1) go func() { fmt.Println(1) // 执行完毕 wait.Done() }() // 等待子协程 wait.Wait() fmt.Println(2) }\",\"这段代码永远都是先输出1再输出2，主协程会等待子协程执行完毕后再退出。\",\"1 2\",\"针对协程介绍中最开始的例子，可以做出如下修改\",\"func main() { var mainWait sync.WaitGroup var wait sync.WaitGroup // 计数10 mainWait.Add(10) fmt.Println(\\\"start\\\") for i := 0; i < 10; i++ { // 循环内计数1 wait.Add(1) go func() { fmt.Println(i) // 两个计数-1 wait.Done() mainWait.Done() }() // 等待当前循环的协程执行完毕 wait.Wait() } // 等待所有的协程执行完毕 mainWait.Wait() fmt.Println(\\\"end\\\") }\",\"这里使用了sync.WaitGroup替代了原先的time.Sleep，协程并发执行的的顺序更加可控，不管执行多少次，输出都如下\",\"start 0 1 2 3 4 5 6 7 8 9 end\",\"WaitGroup通常适用于可动态调整协程数量的时候，例如事先知晓协程的数量，又或者在运行过程中需要动态调整。WaitGroup的值不应该被复制，复制后的值也不应该继续使用，尤其是将其作为函数参数传递时，因该传递指针而不是值。倘若使用复制的值，计数完全无法作用到真正的WaitGroup上，这可能会导致主协程一直阻塞等待，程序将无法正常运行。例如下方的代码\",\"func main() { var mainWait sync.WaitGroup mainWait.Add(1) hello(mainWait) mainWait.Wait() fmt.Println(\\\"end\\\") } func hello(wait sync.WaitGroup) { fmt.Println(\\\"hello\\\") wait.Done() }\",\"错误提示所有的协程都已经退出，但主协程依旧在等待，这就形成了死锁，因为hello函数内部对一个形参WaitGroup调用Done并不会作用到原来的mainWait上，所以应该使用指针来进行传递。\",\"hello fatal error: all goroutines are asleep - deadlock!\",\"提示\",\"当计数变为负数，或者计数数量大于子协程数量时，将会引发panic。\"]},\"423\":{\"h\":\"Context\",\"t\":[\"Context译为上下文，是Go提供的一种并发控制的解决方案，相比于管道和WaitGroup，它可以更好的控制子孙协程以及层级更深的协程。Context本身是一个接口，只要实现了该接口都可以称之为上下文例如著名Web框架Gin中的gin.Context。context标准库也提供了几个实现，分别是：\",\"emptyCtx\",\"cancelCtx\",\"timerCtx\",\"valueCtx\"]},\"424\":{\"h\":\"Context\",\"t\":[\"先来看看Context接口的定义，再去了解它的具体实现。\",\"type Context interface { Deadline() (deadline time.Time, ok bool) Done() <-chan struct{} Err() error Value(key any) any }\",\"Deadline\",\"该方法具有两个返回值，deadline是截止时间，即上下文应该取消的时间。第二个值是是否设置deadline，如果没有设置则一直为false。\",\"Deadline() (deadline time.Time, ok bool)\",\"Done\",\"其返回值是一个空结构体类型的只读管道，该管道仅仅起到通知作用，不传递任何数据。当上下文所做的工作应该取消时，该通道就会被关闭，对于一些不支持取消的上下文，可能会返回nil。\",\"Done() <-chan struct{}\",\"Err\",\"该方法返回一个error，用于表示上下关闭的原因。当Done管道没有关闭时，返回nil，如果关闭过后，会返回一个err来解释为什么会关闭。\",\"Err() error\",\"Value\",\"该方法返回对应的键值，如果key不存在，或者不支持该方法，就会返回nil。\",\"Value(key any) any\"]},\"425\":{\"h\":\"emptyCtx\",\"t\":[\"顾名思义，emptyCtx就是空的上下文，context包下所有的实现都是不对外暴露的，但是提供了对应的函数来创建上下文。emptyCtx就可以通过context.Background和context.TODO来进行创建。两个函数如下\",\"var ( background = new(emptyCtx) todo = new(emptyCtx) ) func Background() Context { return background } func TODO() Context { return todo }\",\"可以看到仅仅只是返回了emptyCtx指针。emptyCtx的底层类型实际上是一个int，之所以不使用空结构体，是因为emptyCtx的实例必须要有不同的内存地址，它没法被取消，没有deadline，也不能取值，实现的方法都是返回零值。\",\"type emptyCtx int func (*emptyCtx) Deadline() (deadline time.Time, ok bool) { return } func (*emptyCtx) Done() <-chan struct{} { return nil } func (*emptyCtx) Err() error { return nil } func (*emptyCtx) Value(key any) any { return nil }\",\"emptyCtx通常是用来当作最顶层的上下文，在创建其他三种上下文时作为父上下文传入。context包中的各个实现关系如下图所示\"]},\"426\":{\"h\":\"valueCtx\",\"t\":[\"valueCtx实现比较简单，其内部只包含一对键值对，和一个内嵌的Context类型的字段。\",\"type valueCtx struct { Context key, val any }\",\"其本身只实现了Value方法，逻辑也很简单，当前上下文找不到就去父上下文找。\",\"func (c *valueCtx) Value(key any) any { if c.key == key { return c.val } return value(c.Context, key) }\",\"下面看一个valueCtx的简单使用案例\",\"var waitGroup sync.WaitGroup func main() { waitGroup.Add(1) // 传入上下文 go Do(context.WithValue(context.Background(), 1, 2)) waitGroup.Wait() } func Do(ctx context.Context) { // 新建定时器 ticker := time.NewTimer(time.Second) defer waitGroup.Done() for { select { case <-ctx.Done(): // 永远也不会执行 case <-ticker.C: fmt.Println(\\\"timeout\\\") return default: fmt.Println(ctx.Value(1)) } time.Sleep(time.Millisecond * 100) } }\",\"valueCtx多用于在多级协程中传递一些数据，无法被取消，因此ctx.Done永远会返回nil，select会忽略掉nil管道。最后输出如下\",\"2 2 2 2 2 2 2 2 2 2 timeout\"]},\"427\":{\"h\":\"cancelCtx\",\"t\":[\"cancelCtx以及timerCtx都实现了canceler接口，接口类型如下\",\"type canceler interface { // removeFromParent 表示是否从父上下文中删除自身 // err 表示取消的原因 cancel(removeFromParent bool, err error) // Done 返回一个管道，用于通知取消的原因 Done() <-chan struct{} }\",\"cancel方法不对外暴露，在创建上下文时通过闭包将其包装为返回值以供外界调用，就如context.WithCancel源代码中所示\",\"func WithCancel(parent Context) (ctx Context, cancel CancelFunc) { if parent == nil { panic(\\\"cannot create context from nil parent\\\") } c := newCancelCtx(parent) // 尝试将自身添加进父级的children中 propagateCancel(parent, &c) // 返回context和一个函数 return &c, func() { c.cancel(true, Canceled) } }\",\"cancelCtx译为可取消的上下文，创建时，如果父级实现了canceler，就会将自身添加进父级的children中，否则就一直向上查找。如果所有的父级都没有实现canceler，就会启动一个协程等待父级取消，然后当父级结束时取消当前上下文。当调用cancelFunc时，Done通道将会关闭，该上下文的任何子级也会随之取消，最后会将自身从父级中删除。下面是一个简单的示例：\",\"var waitGroup sync.WaitGroup func main() { bkg := context.Background() // 返回了一个cancelCtx和cancel函数 cancelCtx, cancel := context.WithCancel(bkg) waitGroup.Add(1) go func(ctx context.Context) { defer waitGroup.Done() for { select { case <-ctx.Done(): fmt.Println(ctx.Err()) return default: fmt.Println(\\\"等待取消中...\\\") } time.Sleep(time.Millisecond * 200) } }(cancelCtx) time.Sleep(time.Second) cancel() waitGroup.Wait() }\",\"输出如下\",\"等待取消中... 等待取消中... 等待取消中... 等待取消中... 等待取消中... context canceled\",\"再来一个层级嵌套深一点的示例\",\"var waitGroup sync.WaitGroup func main() { waitGroup.Add(3) ctx, cancelFunc := context.WithCancel(context.Background()) go HttpHandler(ctx) time.Sleep(time.Second) cancelFunc() waitGroup.Wait() } func HttpHandler(ctx context.Context) { cancelCtxAuth, cancelAuth := context.WithCancel(ctx) cancelCtxMail, cancelMail := context.WithCancel(ctx) defer cancelAuth() defer cancelMail() defer waitGroup.Done() go AuthService(cancelCtxAuth) go MailService(cancelCtxMail) for { select { case <-ctx.Done(): fmt.Println(ctx.Err()) return default: fmt.Println(\\\"正在处理http请求...\\\") } time.Sleep(time.Millisecond * 200) } } func AuthService(ctx context.Context) { defer waitGroup.Done() for { select { case <-ctx.Done(): fmt.Println(\\\"auth 父级取消\\\", ctx.Err()) return default: fmt.Println(\\\"auth...\\\") } time.Sleep(time.Millisecond * 200) } } func MailService(ctx context.Context) { defer waitGroup.Done() for { select { case <-ctx.Done(): fmt.Println(\\\"mail 父级取消\\\", ctx.Err()) return default: fmt.Println(\\\"mail...\\\") } time.Sleep(time.Millisecond * 200) } }\",\"例子中创建了3个cancelCtx，尽管父级cancelCtx在取消的同时会取消它的子上下文，但是保险起见，如果创建了一个cancelCtx，在相应的流程结束后就应该调用cancel函数。输出如下\",\"正在处理http请求... auth... mail... mail... auth... 正在处理http请求... auth... mail... 正在处理http请求... 正在处理http请求... auth... mail... auth... 正在处理http请求... mail... context canceled auth 父级取消 context canceled mail 父级取消 context canceled\"]},\"428\":{\"h\":\"timerCtx\",\"t\":[\"timerCtx在cancelCtx 的基础之上增加了超时机制，context包下提供了两种创建的函数，分别是WithDeadline和WithTimeout，两者功能类似，前者是指定一个具体的超时时间，比如指定一个具体时间2023/3/20 16:32:00，后者是指定一个超时的时间间隔，比如5分钟后。两个函数的签名如下\",\"func WithDeadline(parent Context, d time.Time) (Context, CancelFunc) func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)\",\"timerCtx会在时间到期后自动取消当前上下文，取消的流程除了要额外的关闭timer之外，基本与cancelCtx一致。下面是一个简单的timerCtx的使用示例\",\"var wait sync.WaitGroup func main() { deadline, cancel := context.WithDeadline(context.Background(), time.Now().Add(time.Second)) defer cancel() wait.Add(1) go func(ctx context.Context) { defer wait.Done() for { select { case <-ctx.Done(): fmt.Println(\\\"上下文取消\\\", ctx.Err()) return default: fmt.Println(\\\"等待取消中...\\\") } time.Sleep(time.Millisecond * 200) } }(deadline) wait.Wait() }\",\"尽管上下文到期会自动取消，但是为了保险起见，在相关流程结束后，最好手动取消上下文。输出如下\",\"等待取消中... 等待取消中... 等待取消中... 等待取消中... 等待取消中... 上下文取消 context deadline exceeded\",\"WithTimeout其实与WithDealine非常相似，它的实现也只是稍微封装了一下并调用WithDeadline，和上面例子中的WithDeadline用法一样，如下\",\"func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) { return WithDeadline(parent, time.Now().Add(timeout)) }\",\"提示\",\"就跟内存分配后不回收会造成内存泄漏一样，上下文也是一种资源，如果创建了但从来不取消，一样会造成上下文泄露，所以最好避免此种情况的发生。\"]},\"429\":{\"h\":\"锁\",\"t\":[\"先来看看的一个例子\",\"var wait sync.WaitGroup var count = 0 func main() { wait.Add(10) for i := 0; i < 10; i++ { go func(data *int) { // 模拟访问耗时 time.Sleep(time.Millisecond * time.Duration(rand.Intn(5000))) // 访问数据 temp := *data // 模拟计算耗时 time.Sleep(time.Millisecond * time.Duration(rand.Intn(5000))) ans := 1 // 修改数据 *data = temp + ans fmt.Println(*data) wait.Done() }(&count) } wait.Wait() fmt.Println(\\\"最终结果\\\", count) }\",\"对于上面的例子，开启了十个协程来对count进行+1操作，并且使用了time.Sleep来模拟不同的耗时，根据直觉来讲，10个协程执行10个+1操作，最终结果一定是10，正确结果也确实是10，但事实并非如此，上面的例子执行结果如下：\",\"1 2 3 3 2 2 3 3 3 4 最终结果 4\",\"可以看到最终结果为4，而这只是众多可能结果中的一种。由于每个协程访问和计算所需的时间不同，A协程访问数据耗费500毫秒，此时访问到的count值为1，随后又花费了400毫秒计算，但在这400毫秒内，B协程已经完成了访问和计算并成功更新了count的值，A协程在计算完毕后，A协程最初访问到的值已经过时了，但A协程并不知道这件事，依旧在原先访问到的值基础上加一，并赋值给count，这样一来，B协程的执行结果被覆盖了。多个协程读取和访问一个共享数据时，尤其会发生这样的问题，为此就需要用到锁。\",\"Go中sync包下的Mutex与RWMutex提供了互斥锁与读写锁两种实现，且提供了非常简单易用的API，加锁只需要Lock()，解锁也只需要Unlock()。需要注意的是，Go所提供的锁都是非递归锁，也就是不可重入锁，所以重复加锁或重复解锁都会导致fatal。锁的意义在于保护不变量，加锁是希望数据不会被其他协程修改，如下\",\"func DoSomething() { Lock() // 在这个过程中，数据不会被其他协程修改 Unlock() }\",\"倘若是递归锁的话，就可能会发生如下情况\",\"func DoSomething() { Lock() DoOther() Unlock() } func DoOther() { Lock() // do other Unlock() }\",\"DoSomthing函数显然不知道DoOther函数可能会对数据做点什么，从而修改了数据，比如再开几个子协程破坏了不变量。这在Go中是行不通的，一旦加锁以后就必须保证不变量的不变性，此时重复加锁解锁都会导致死锁。所以在编写代码时应该避免上述情况，必要时在加锁的同时立即使用defer语句解锁。\"]},\"430\":{\"h\":\"互斥锁\",\"t\":[\"sync.Mutex是Go提供的互斥锁实现，其实现了sync.Locker接口\",\"type Locker interface { // 加锁 Lock() // 解锁 Unlock() }\",\"使用互斥锁可以非常完美的解决上述问题，例子如下\",\"var wait sync.WaitGroup var count = 0 var lock sync.Mutex func main() { wait.Add(10) for i := 0; i < 10; i++ { go func(data *int) { // 加锁 lock.Lock() // 模拟访问耗时 time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) // 访问数据 temp := *data // 模拟计算耗时 time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) ans := 1 // 修改数据 *data = temp + ans // 解锁 lock.Unlock() fmt.Println(*data) wait.Done() }(&count) } wait.Wait() fmt.Println(\\\"最终结果\\\", count) }\",\"每一个协程在访问数据前，都先上锁，更新完成后再解锁，其他协程想要访问就必须要先获得锁，否则就阻塞等待。如此一来，就不存在上述问题了，所以输出如下\",\"1 2 3 4 5 6 7 8 9 10 最终结果 10\"]},\"431\":{\"h\":\"读写锁\",\"t\":[\"互斥锁适合读操作与写操作频率都差不多的情况，对于一些读多写少的数据，如果使用互斥锁，会造成大量的不必要的协程竞争锁，这会消耗很多的系统资源，这时候就需要用到读写锁，即读写互斥锁，对于一个协程而言：\",\"如果获得了读锁，其他协程进行写操作时会阻塞，其他协程进行读操作时不会阻塞\",\"如果获得了写锁，其他协程进行写操作时会阻塞，其他协程进行读操作时会阻塞\",\"Go中读写互斥锁的实现是sync.RWMutex，它也同样实现了Locker接口，但它提供了更多可用的方法，如下：\",\"// 加读锁 func (rw *RWMutex) RLock() // 尝试加读锁 func (rw *RWMutex) TryRLock() bool // 解读锁 func (rw *RWMutex) RUnlock() // 加写锁 func (rw *RWMutex) Lock() // 尝试加写锁 func (rw *RWMutex) TryLock() bool // 解写锁 func (rw *RWMutex) Unlock()\",\"其中TryRlock与TryLock两个尝试加锁的操作是非阻塞式的，成功加锁会返回true，无法获得锁时并不会阻塞而是返回false。读写互斥锁内部实现依旧是互斥锁，并不是说分读锁和写锁就有两个锁，从始至终都只有一个锁。下面来看一个读写互斥锁的使用案例\",\"var wait sync.WaitGroup var count = 0 var rw sync.RWMutex func main() { wait.Add(12) // 读多写少 go func() { for i := 0; i < 3; i++ { go Write(&count) } wait.Done() }() go func() { for i := 0; i < 7; i++ { go Read(&count) } wait.Done() }() // 等待子协程结束 wait.Wait() fmt.Println(\\\"最终结果\\\", count) } func Read(i *int) { time.Sleep(time.Millisecond * time.Duration(rand.Intn(500))) rw.RLock() fmt.Println(\\\"拿到读锁\\\") time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) fmt.Println(\\\"释放读锁\\\", *i) rw.RUnlock() wait.Done() } func Write(i *int) { time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) rw.Lock() fmt.Println(\\\"拿到写锁\\\") temp := *i time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) *i = temp + 1 fmt.Println(\\\"释放写锁\\\", *i) rw.Unlock() wait.Done() }\",\"该例开启了3个写协程，7个读协程，在读数据的时候都会先获得读锁，读协程可以正常获得读锁，但是会阻塞写协程，获得写锁的时候，则会同时阻塞读协程和写协程，直到释放写锁，如此一来实现了读协程与写协程互斥，保证了数据的正确性。例子输出如下：\",\"拿到读锁 拿到读锁 拿到读锁 拿到读锁 释放读锁 0 释放读锁 0 释放读锁 0 释放读锁 0 拿到写锁 释放写锁 1 拿到读锁 拿到读锁 拿到读锁 释放读锁 1 释放读锁 1 释放读锁 1 拿到写锁 释放写锁 2 拿到写锁 释放写锁 3 最终结果 3\",\"提示\",\"对于锁而言，不应该将其作为值传递和存储，应该使用指针。\"]},\"432\":{\"h\":\"条件变量\",\"t\":[\"条件变量，与互斥锁一同出现和使用，所以有些人可能会误称为条件锁，但它并不是锁，是一种通讯机制。Go中的sync.Cond对此提供了实现，而创建条件变量的函数签名如下：\",\"func NewCond(l Locker) *Cond\",\"可以看到创建一个条件变量前提就是需要创建一个锁，sync.Cond提供了如下的方法以供使用\",\"// 阻塞等待条件生效，直到被唤醒 func (c *Cond) Wait() // 唤醒一个因条件阻塞的协程 func (c *Cond) Signal() // 唤醒所有因条件阻塞的协程 func (c *Cond) Broadcast()\",\"条件变量使用起来非常简单，将上面的读写互斥锁的例子稍微修改下即可\",\"var wait sync.WaitGroup var count = 0 var rw sync.RWMutex // 条件变量 var cond = sync.NewCond(rw.RLocker()) func main() { wait.Add(12) // 读多写少 go func() { for i := 0; i < 3; i++ { go Write(&count) } wait.Done() }() go func() { for i := 0; i < 7; i++ { go Read(&count) } wait.Done() }() // 等待子协程结束 wait.Wait() fmt.Println(\\\"最终结果\\\", count) } func Read(i *int) { time.Sleep(time.Millisecond * time.Duration(rand.Intn(500))) rw.RLock() fmt.Println(\\\"拿到读锁\\\") // 条件不满足就一直阻塞 for *i < 3 { cond.Wait() } time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) fmt.Println(\\\"释放读锁\\\", *i) rw.RUnlock() wait.Done() } func Write(i *int) { time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) rw.Lock() fmt.Println(\\\"拿到写锁\\\") temp := *i time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) *i = temp + 1 fmt.Println(\\\"释放写锁\\\", *i) rw.Unlock() // 唤醒所有因条件变量阻塞的协程 cond.Broadcast() wait.Done() }\",\"在创建条件变量时，因为在这里条件变量作用的是读协程，所以将读锁作为互斥锁传入，如果直接传入读写互斥锁会导致写协程重复解锁的问题。这里传入的是sync.rlocker，通过RWMutex.RLocker方法获得。\",\"func (rw *RWMutex) RLocker() Locker { return (*rlocker)(rw) } type rlocker RWMutex func (r *rlocker) Lock() { (*RWMutex)(r).RLock() } func (r *rlocker) Unlock() { (*RWMutex)(r).RUnlock() }\",\"可以看到rlocker也只是把读写互斥锁的读锁操作封装了一下，实际上是同一个引用，依旧是同一个锁。读协程读取数据时，如果小于3就会一直阻塞等待，直到数据大于3，而写协程在更新数据后都会尝试唤醒所有因条件变量而阻塞的协程，所以最后的输出如下\",\"拿到读锁 拿到读锁 拿到读锁 拿到读锁 拿到写锁 释放写锁 1 拿到读锁 拿到写锁 释放写锁 2 拿到读锁 拿到读锁 拿到写锁 释放写锁 3 // 第三个写协程执行完毕 释放读锁 3 释放读锁 3 释放读锁 3 释放读锁 3 释放读锁 3 释放读锁 3 释放读锁 3 最终结果 3\",\"从结果中可以看到，当第三个写协程更新完数据后，七个因条件变量而阻塞的读协程都恢复了运行。\",\"提示\",\"对于条件变量，应该使用for而不是if，应该使用循环来判断条件是否满足，因为协程被唤醒时并不能保证当前条件就已经满足了。\",\"for !condition { cond.Wait() }\"]},\"433\":{\"h\":\"sync\",\"t\":[\"Go中很大一部分的并发相关的工具都是sync标准库提供的，上述已经介绍过了sync.WaitGroup，sync.Locker等，除此之外，sync包下还有一些其他的工具可以使用。\"]},\"434\":{\"h\":\"Once\",\"t\":[\"当在使用一些数据结构时，如果这些数据结构太过庞大，可以考虑采用懒加载的方式，即真正要用到它的时候才会初始化该数据结构。如下面的例子\",\"type MySlice []int func (m *MySlice) Get(i int) (int, bool) { if *m == nil { return 0, false } else { return (*m)[i], true } } func (m *MySlice) Add(i int) { // 当真正用到切片的时候，才会考虑去初始化 if *m == nil { *m = make([]int, 0, 10) } *m = append(*m, i) }\",\"那么问题就来了，如果只有一个协程使用肯定是没有任何问题的，但是如果有多个协程访问的话就可能会出现问题了。比如协程A和B同时调用了Add方法，A执行的稍微快一些，已经初始化完毕了，并且将数据成功添加，随后协程B又初始化了一遍，这样一来将协程A添加的数据直接覆盖掉了，这就是问题所在。\",\"而这就是sync.Once要解决的问题，顾名思义，Once译为一次，sync.Once保证了在并发条件下指定操作只会执行一次。它的使用非常简单，只对外暴露了一个Do方法，签名如下：\",\"func (o *Once) Do(f func())\",\"在使用时，只需要将初始化操作传入Do方法即可，如下\",\"var wait sync.WaitGroup func main() { var slice MySlice wait.Add(4) for i := 0; i < 4; i++ { go func() { slice.Add(1) wait.Done() }() } wait.Wait() fmt.Println(slice.Len()) } type MySlice struct { s []int o sync.Once } func (m *MySlice) Get(i int) (int, bool) { if m.s == nil { return 0, false } else { return m.s[i], true } } func (m *MySlice) Add(i int) { // 当真正用到切片的时候，才会考虑去初始化 m.o.Do(func() { fmt.Println(\\\"初始化\\\") if m.s == nil { m.s = make([]int, 0, 10) } }) m.s = append(m.s, i) } func (m *MySlice) Len() int { return len(m.s) }\",\"输出如下\",\"初始化 4\",\"从输出结果中可以看到，所有的数据等正常添加进切片，初始化操作只执行了一次。其实sync.Once的实现相当简单，去除注释真正的代码逻辑只有16行，其原理就是锁+原子操作。源代码如下：\",\"type Once struct { // 用于判断操作是否已经执行 done uint32 m Mutex } func (o *Once) Do(f func()) { // 原子加载数据 if atomic.LoadUint32(&o.done) == 0 { o.doSlow(f) } } func (o *Once) doSlow(f func()) { // 加锁 o.m.Lock() // 解锁 defer o.m.Unlock() // 判断是否执行 if o.done == 0 { // 执行完毕后修改done defer atomic.StoreUint32(&o.done, 1) f() } }\"]},\"435\":{\"h\":\"Pool\",\"t\":[\"sync.Pool的设计目的是用于存储临时对象以便后续的复用，是一个临时的并发安全对象池，将暂时用不到的对象放入池中，在后续使用中就不需要再额外的创建对象可以直接复用，减少内存的分配与释放频率，最重要的一点就是降低GC压力。sync.Pool总共只有两个方法，如下：\",\"// 申请一个对象 func (p *Pool) Get() any // 放入一个对象 func (p *Pool) Put(x any)\",\"并且sync.Pool有一个对外暴露的New字段，用于对象池在申请不到对象时初始化一个对象\",\"New func() any\",\"下面以一个例子演示\",\"var wait sync.WaitGroup // 临时对象池 var pool sync.Pool // 用于计数过程中总共创建了多少个对象 var numOfObject atomic.Int64 // BigMemData 假设这是一个占用内存很大的结构体 type BigMemData struct { M string } func main() { pool.New = func() any { numOfObject.Add(1) return BigMemData{\\\"大内存\\\"} } wait.Add(1000) // 这里开启1000个协程 for i := 0; i < 1000; i++ { go func() { // 申请对象 val := pool.Get() // 使用对象 _ = val.(BigMemData) // 用完之后再释放对象 pool.Put(val) wait.Done() }() } wait.Wait() fmt.Println(numOfObject.Load()) }\",\"例子中开启了1000个协程不断的在池中申请和释放对象，如果不采用对象池，那么1000个协程都需要各自实例化对象，并且这1000个实例化后的对象在使用完毕后都需要由GC来释放内存，如果有几十万个协程或者说创建该对象的成本十分的高昂，这种情况下就会占用很大的内存并且给GC带来非常大的压力，采用对象池后，可以复用对象减少实例化的频率，比如上述的例子输出可能如下：\",\"5\",\"即便开启了1000个协程，整个过程中也只创建了5个对象，如果不采用对象池的话1000个协程将会创建1000个对象，这种优化带来的提升是显而易见的，尤其是在并发量特别大和实例化对象成本特别高的时候更能体现出优势。\",\"在使用sync.Pool时需要注意几个点：\",\"临时对象：sync.Pool只适合存放临时对象，池中的对象可能会在没有任何通知的情况下被GC移除，所以并不建议将网络链接，数据库连接这类存入sync.Pool中。\",\"不可预知：sync.Pool在申请对象时，无法预知这个对象是新创建的还是复用的，也无法知晓池中有几个对象\",\"并发安全：官方保证sync.Pool一定是并发安全，但并不保证用于创建对象的New函数就一定是并发安全的，New函数是由使用者传入的，所以New函数的并发安全性要由使用者自己来维护，这也是为什么上例中对象计数要用到原子值的原因。\",\"提示\",\"最后需要注意的是，当使用完对象后，一定要释放回池中，如果用了不释放那么对象池的使用将毫无意义。\",\"标准库fmt包下就有一个对象池的使用案例，在fmt.Fprintf函数中\",\"func Fprintf(w io.Writer, format string, a ...any) (n int, err error) { // 申请一个打印缓冲区 p := newPrinter() p.doPrintf(format, a) n, err = w.Write(p.buf) // 使用完毕后释放 p.free() return }\",\"其中newPointer函数和free方法的实现如下\",\"func newPrinter() *pp { // 向对象池申请的一个对象 p := ppFree.Get().(*pp) p.panicking = false p.erroring = false p.wrapErrs = false p.fmt.init(&p.buf) return p } func (p *pp) free() { // 为了让对象池中的缓冲区大小大致相同以便更好的弹性控制缓冲区大小 // 过大的缓冲区就不用放回对象池 if cap(p.buf) > 64<<10 { return } // 字段重置后释放对象到池中 p.buf = p.buf[:0] p.arg = nil p.value = reflect.Value{} p.wrappedErr = nil ppFree.Put(p) }\"]},\"436\":{\"h\":\"Map\",\"t\":[\"sync.Map是官方提供的一种并发安全Map的实现，开箱即用，使用起来十分的简单，下面是该结构体对外暴露的方法：\",\"// 根据一个key读取值，返回值会返回对应的值和该值是否存在 func (m *Map) Load(key any) (value any, ok bool) // 存储一个键值对 func (m *Map) Store(key, value any) // 删除一个键值对 func (m *Map) Delete(key any) // 如果该key已存在，就返回原有的值，否则将新的值存入并返回，当成功读取到值时，loaded为true，否则为false func (m *Map) LoadOrStore(key, value any) (actual any, loaded bool) // 删除一个键值对，并返回其原有的值，loaded的值取决于key是否存在 func (m *Map) LoadAndDelete(key any) (value any, loaded bool) // 遍历Map，当f()返回false时，就会停止遍历 func (m *Map) Range(f func(key, value any) bool)\",\"下面用一个简单的示例来演示下sync.Map的基本使用\",\"func main() { var syncMap sync.Map // 存入数据 syncMap.Store(\\\"a\\\", 1) syncMap.Store(\\\"a\\\", \\\"a\\\") // 读取数据 fmt.Println(syncMap.Load(\\\"a\\\")) // 读取并删除 fmt.Println(syncMap.LoadAndDelete(\\\"a\\\")) // 读取或存入 fmt.Println(syncMap.LoadOrStore(\\\"a\\\", \\\"hello world\\\")) syncMap.Store(\\\"b\\\", \\\"goodbye world\\\") // 遍历map syncMap.Range(func(key, value any) bool { fmt.Println(key, value) return true }) }\",\"输出\",\"a true a true hello world false a hello world b goodbye world\",\"接下来看一个并发使用map的例子：\",\"func main() { myMap := make(map[int]int, 10) var wait sync.WaitGroup wait.Add(10) for i := 0; i < 10; i++ { go func(n int) { for i := 0; i < 100; i++ { myMap[n] = n } wait.Done() }(i) } wait.Wait() }\",\"上例中使用的普通map，开了10个协程不断的存入数据，显然这很可能会触发fatal，结果大概率会如下\",\"fatal error: concurrent map writes\",\"使用sync.Map就可以避免这个问题\",\"func main() { var syncMap sync.Map var wait sync.WaitGroup wait.Add(10) for i := 0; i < 10; i++ { go func(n int) { for i := 0; i < 100; i++ { syncMap.Store(n, n) } wait.Done() }(i) } wait.Wait() syncMap.Range(func(key, value any) bool { fmt.Println(key, value) return true }) }\",\"输出如下\",\"8 8 3 3 1 1 9 9 6 6 5 5 7 7 0 0 2 2 4 4\",\"为了并发安全肯定需要做出一定的牺牲，sync.Map的性能要比map低10-100倍左右。\"]},\"437\":{\"h\":\"原子\",\"t\":[\"在计算机学科中，原子或原语操作，通常用于表述一些不可再细化分割的操作，由于这些操作无法再细化为更小的步骤，在执行完毕前，不会被其他的任何协程打断，所以执行结果要么成功要么失败，没有第三种情况可言，如果出现了其他情况，那么它就是不是原子操作。例如下方的代码：\",\"func main() { a := 0 if a == 0 { a = 1 } fmt.Println(a) }\",\"上方的代码是一个简单的判断分支，尽管代码很少，但也不是原子操作，真正的原子操作是由硬件指令层面支持的。\"]},\"438\":{\"h\":\"类型\",\"t\":[\"好在大多情况下并不需要自行编写汇编，Go标准库sync/atomic包下已经提供了原子操作相关的API，其提供了以下几种类型以供进行原子操作。\",\"atomic.Bool{} atomic.Pointer[]{} atomic.Int32{} atomic.Int64{} atomic.Uint32{} atomic.Uint64{} atomic.Uintptr{} atomic.Value{}\",\"其中Pointer原子类型支持泛型，Value类型支持存储任何类型，除此之外，还提供了许多函数来方便操作。因为原子操作的粒度过细，在大多数情况下，更适合处理这些基础的数据类型。\",\"提示\",\"atmoic包下原子操作只有函数签名，没有具体实现，具体的实现是由plan9汇编编写。\"]},\"439\":{\"h\":\"使用\",\"t\":[\"每一个原子类型都会提供以下三个方法：\",\"Load()：原子的获取值\",\"Swap(newVal type) (old type)：原子的交换值，并且返回旧值\",\"Store(val type)：原子的存储值\",\"不同的类型可能还会有其他的额外方法，比如整型类型都会提供Add方法来实现原子加减操作。下面以一个int64类型演示为例：\",\"func main() { var aint64 atomic.Uint64 // 存储值 aint64.Store(64) // 交换值 aint64.Swap(128) // 增加 aint64.Add(112) // 加载值 fmt.Println(aint64.Load()) }\",\"或者也可以直接使用函数\",\"func main() { var aint64 int64 // 存储值 atomic.StoreInt64(&aint64, 64) // 交换值 atomic.SwapInt64(&aint64, 128) // 增加 atomic.AddInt64(&aint64, 112) // 加载 fmt.Println(atomic.LoadInt64(&aint64)) }\",\"其他的类型的使用也是十分类似的，最终输出为：\",\"240\"]},\"440\":{\"h\":\"CAS\",\"t\":[\"atmoic包还提供了CompareAndSwap操作，也就是CAS，它是乐观锁的一种典型实现。乐观锁本身并不是锁，是一种并发条件下无锁化并发控制方式。之所以被称作乐观锁，是因为它总是乐观的假设共享数据不会被修改，仅当发现数据未被修改时才会去执行对应操作，而前面了解到的互斥量就是悲观锁，互斥量总是悲观的认为共享数据肯定会被修改，所以在操作时会加锁，操作完毕后就会解锁。由于无锁化实现的并发安全效率相对于锁要高一些，许多并发安全的数据结构都采用了cAS来进行实现，不过真正的效率要结合具体使用场景来看。看下面的一个例子：\",\"var lock sync.Mutex var count int func Add(num int) { lock.Lock() count += num lock.Unlock() }\",\"这是一个使用互斥锁的例子，每次增加数字前都会先上锁，执行完毕后就会解锁，过程中会导致其他协程阻塞，接下来使用CAS改造一下：\",\"var count int64 func Add(num int64) { for { expect := atomic.LoadInt64(&count) if atomic.CompareAndSwapInt64(&count, expect, expect+num) { break } } }\",\"对于CAS而言，有三个参数，内存值，期望值，新值。执行时，CAS会将期望值与当前内存值进行比较，如果内存值与期望值相同，就会执行后续的操作，否则的话什么也不做。对于Go中atomic包下的原子操作，CAS相关的函数则需要传入地址，期望值，新值，且会返回是否成功替换的布尔值。例如int64类型的CAS 操作函数签名如下：\",\"func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)\",\"在CAS的例子中，首先会通过LoadInt64来获取期望值，随后使用CompareAndSwapInt64来进行比较交换，如果不成功的话就不断循环，直到成功。这样无锁化的操作虽然不会导致协程阻塞，但是不断的循环对于CPU而言依旧是一个不小的开销，所以在一些实现中失败达到了一定次数可能会放弃操作。但是对于上面的操作而言，仅仅只是简单的数字相加，涉及到的操作并不复杂，所以完全可以考虑无锁化实现。\",\"提示\",\"大多数情况下，仅仅只是比较值是无法做到并发安全的，比如因CAS引起ABA问题，就需要使用额外加入version来解决问题。\"]},\"441\":{\"h\":\"Value\",\"t\":[\"atomic.Value结构体，可以存储任意类型的值，结构体如下\",\"type Value struct { // any类型 v any }\",\"尽管可以存储任意类型，但是它不能存储nil，并且前后存储的值类型应当一致，下面两个例子都无法通过编译\",\"func main() { var val atomic.Value val.Store(nil) fmt.Println(val.Load()) } // panic: sync/atomic: store of nil value into Value\",\"func main() { var val atomic.Value val.Store(\\\"hello world\\\") val.Store(114154) fmt.Println(val.Load()) } // panic: sync/atomic: store of inconsistently typed value into Value\",\"除此之外，它的使用与其他的原子类型并无太大的差别，并且需要注意的是，所有的原子类型都不应该复制值，而是应该使用它们的指针。\"]},\"442\":{\"h\":\"模块\",\"t\":[\"每一个现代语言都会有属于自己的一个成熟的依赖管理工具，例如Java的Gradle，Python的Pip，NodeJs的Npm等，一个好的依赖管理工具可以为开发者省去不少时间并且可以提升开发效率。然而Go在早期并没有一个成熟的依赖管理解决方案，那时所有的代码都存放在GOPATH目录下，对于工程项目而言十分的不友好，版本混乱，依赖难以管理，为了解决这个问题，各大社区开发者百家争鸣，局面一时间混乱了起来，期间也不乏出现了一些佼佼者例如Vendor，直到Go1.11官方终于推出了Go Mod这款官方的依赖管理工具，结束了先前的混乱局面，并在后续的更新中不断完善，淘汰掉了曾经老旧的工具。时至今日，在撰写本文时，Go发行版本已经到了1.20，在今天几乎所有的Go项目都在采用Go Mod，所以在本文也只会介绍Go Mod，官方对于Go模块也编写了非常细致的文档：Go Modules Reference。\"]},\"443\":{\"h\":\"编写模块\",\"t\":[\"Go Module本质上是基于VCS（版本控制系统），当你在下载依赖时，实际上执行的是VCS命令，比如git，所以如果你想要分享你编写的库，只需要做到以下三点：\",\"源代码仓库可公开访问，且VCS属于以下的其中之一 \",\"git\",\"hg (Mercurial)\",\"bzr (Bazaar)\",\"svn\",\"fossil\",\"是一个符合规范的go mod项目\",\"符合语义化版本规范\",\"所以你只需要正常使用VCS开发，并为你的特定版本打上符合标准的Tag，其它人就可以通过模块名来下载你所编写的库，下面将通过示例来演示进行模块开发的几个步骤。\",\"示例仓库：246859/hello: say hello (github.com)\"]},\"444\":{\"h\":\"准备\",\"t\":[\"在开始之前确保你的版本足以完全支持go mod（go >= 1.17），并且启用了Go Module，通过如下命令来查看是否开启\",\"$ go env GO111MODULE\",\"如果未开启，通过如下命令开启用Go Module\",\"$ go env -w GO111MODULE=on\"]},\"445\":{\"h\":\"创建\",\"t\":[\"首先你需要一个可公网访问的源代码仓库，这个有很多选择，我比较推荐Github。在上面创建一个新项目，将其取名为hello，仓库名虽然没有什么特别限制，但建议还是不要使用特殊字符，因为这会影响到模块名。\",\"创建完成后，可以看到仓库的URL是https://github.com/246859/hello，对应的go模块名就是github.com/246859/hello。\",\"然后将其克隆到本地，通过go mod init命令初始化模块。\",\"$ git clone git@github.com:246859/hello.git Cloning into 'hello'... remote: Enumerating objects: 5, done. remote: Counting objects: 100% (5/5), done. remote: Compressing objects: 100% (4/4), done. remote: Total 5 (delta 0), reused 0 (delta 0), pack-reused 0 Receiving objects: 100% (5/5), done. $ cd hello && go mod init github.com/246859/hello go: creating new go.mod: module github.com/246859/hello\"]},\"446\":{\"h\":\"编写\",\"t\":[\"然后就可以进行开发工作了，它的功能非常简单，只有一个函数\",\"// hello.go package hello import \\\"fmt\\\" // Hello returns hello message func Hello(name string) string { if name == \\\"\\\" { name = \\\"world\\\" } return fmt.Sprintf(\\\"hello %s!\\\", name) }\",\"顺便写一个测试文件进行单元测试\",\"// hello_test.go package hello_test import ( \\\"testing\\\" \\\"fmt\\\" \\\"github.com/246859/hello\\\" ) func TestHello(t *testing.T) { data := \\\"jack\\\" expected := fmt.Sprintf(\\\"hello %s!\\\", data) result := hello.Hello(data) if result != expected { t.Fatalf(\\\"expected result %s, but got %s\\\", expected, result) } }\",\"接下来继续编写一个命令行程序用于输出hello，它的功能同样非常简单。对于命令行程序而言，按照规范是在项目cmd/app_name/中进行创建，所以hello命令行程序的文件存放在cmd/hello/目录下，然后在其中编写相关代码。\",\"// cmd/hello/main.go package main import ( \\\"flag\\\" \\\"github.com/246859/hello\\\" \\\"os\\\" ) var name string func init() { flag.StringVar(&name, \\\"name\\\", \\\"world\\\", \\\"name to say hello\\\") } func main() { flag.Parse() msg := hello.Hello(name) _, err := os.Stdout.WriteString(msg) if err != nil { os.Stderr.WriteString(err.Error()) } }\"]},\"447\":{\"h\":\"测试\",\"t\":[\"编写完后对源代码格式化并测试\",\"$ go fmt && go vet ./... $ go test -v . === RUN TestHello --- PASS: TestHello (0.00s) PASS ok github.com/246859/hello 0.023s\",\"运行命令行程序\",\"$ go run ./cmd/hello -name jack hello jack!\"]},\"448\":{\"h\":\"文档\",\"t\":[\"最后的最后，需要为这个库编写简洁明了的README，让其它开发者看一眼就知道怎么使用\",\"# hello just say hello ## Install import code ```bash go get github.com/246859/hello@latest ``` install cmd ````bash go install github.com/246859/hello/cmd/hello@latest ```` ## Example Here's a simple example as follows: ```go package main import ( \\\"fmt\\\" \\\"github.com/246859/hello\\\" ) func main() { result := hello.Hello(\\\"jack\\\") fmt.Println(result) } ```\",\"这是一个很简单的README文档，你也可以自己进行丰富。\"]},\"449\":{\"h\":\"上传\",\"t\":[\"当一切代码都编写并测试完毕过后，就可以将修改提交并推送到远程仓库。\",\"$ git add go.mod hello.go hello_test.go cmd/ example/ README.md $ git commit -m \\\"chore(mod): mod init\\\" go.mod [main 5087fa2] chore(mod): mod init 1 file changed, 3 insertions(+) create mode 100644 go.mod $ git commit -m \\\"feat(hello): complete Hello func\\\" hello.go [main 099a8bf] feat(hello): complete Hello func 1 file changed, 11 insertions(+) create mode 100644 hello.go $ git commit -m \\\"test(hello): complete hello testcase\\\" hello_test.go [main 76e8c1e] test(hello): complete hello testcase 1 file changed, 17 insertions(+) create mode 100644 hello_test.go $ git commit -m \\\"feat(hello): complete hello cmd\\\" cmd/hello/ [main a62a605] feat(hello): complete hello cmd 1 file changed, 22 insertions(+) create mode 100644 cmd/hello/main.go $ git commit -m \\\"docs(example): add hello example\\\" example/ [main 5c51ce4] docs(example): add hello example 1 file changed, 11 insertions(+) create mode 100644 example/main.go $ git commit -m \\\"docs(README): update README\\\" README.md [main e6fbc62] docs(README): update README 1 file changed, 27 insertions(+), 1 deletion(-)\",\"总共六个提交并不多，提交完毕后为最新提交创建一个tag\",\"$ git tag v1.0.0 $ git tag -l v1.0.0 $ git log --oneline e6fbc62 (HEAD -> main, tag: v1.0.0, origin/main, origin/HEAD) docs(README): update README 5c51ce4 docs(example): add hello example a62a605 feat(hello): complete hello cmd 76e8c1e test(hello): complete hello testcase 099a8bf feat(hello): complete Hello func 5087fa2 chore(mod): mod init 1f422d1 Initial commit\",\"最后再推送到远程仓库\",\"$ git push --tags Enumerating objects: 23, done. Counting objects: 100% (23/23), done. Delta compression using up to 16 threads Compressing objects: 100% (17/17), done. Writing objects: 100% (21/21), 2.43 KiB | 1.22 MiB/s, done. Total 21 (delta 5), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (5/5), done. To github.com:246859/hello.git 1f422d1..e6fbc62 main -> main * [new tag] v1.0.0 -> v1.0.0\",\"推送完毕后，再为其创建一个release（有一个tag就足矣，release只是符合github规范）\",\"如此一来，模块的编写就完成了，以上就是模块开发的一个基本流程，其它开发者便可以通过模块名来引入代码或安装命令行工具。\"]},\"450\":{\"h\":\"引用\",\"t\":[\"通过go get引用库\",\"$ go get github.com/246859/hello@latest go: downloading github.com/246859/hello v1.0.0 go: added github.com/246859/hello v1.0.0\",\"通过go intall安装命令行程序\",\"$ go install github.com/246859/hello/cmd/hello@latest && hello -name jack hello jack!\",\"或者使用go run直接运行\",\"$ go run -mod=mod github.com/246859/hello/cmd/hello -name jack hello jack!\",\"当一个库被引用过后，Go Package便会为其创建一个页面，这个过程是自动完成的，不需要开发者做什么工作，比如hello库就有一个专属的文档页面，如下图所示。\",\"关于上传模块的更多详细信息，前往Add a package。\",\"关于如何删除模块的信息，前往Removing a package。\"]},\"451\":{\"h\":\"设置代理\",\"t\":[\"Go虽然没有像Maven Repo，PyPi，NPM这样类似的中央仓库，但是有一个官方的代理仓库：Go modules services (golang.org)，它会根据版本及模块名缓存开发者下载过的模块。不过由于其服务器部署在国外，访问速度对于国内的用户不甚友好，所以我们需要修改默认的模块代理地址，目前国内做的比较好的有以下几家：\",\"GOPROXY.IO - 一个全球代理 为 Go 模块而生\",\"七牛云 - Goproxy.cn\",\"这里选择七牛云的代理，执行如下命令来修改Go代理，其中的direct表示代理下载失败后绕过代理缓存直接访问源代码仓库。\",\"$ go env -w GOPROXY=https://goproxy.cn,direct\",\"代理修改成功后，日后下载依赖就会非常的迅速。\"]},\"452\":{\"h\":\"下载依赖\",\"t\":[\"修改完代理后，接下来安装一个第三方依赖试试，Go官方有专门的依赖查询网站：Go Packages。\"]},\"453\":{\"h\":\"代码引用\",\"t\":[\"在里面搜索著名的Web框架Gin。\",\"这里会出现很多搜索结果，在使用第三方依赖时，需要结合引用次数和更新时间来决定是否采用该依赖，这里直接选择第一个\",\"进入对应的页面后，可以看出这是该依赖的一个文档页面，有着非常多关于它的详细信息，后续查阅文档时也可以来这里。\",\"这里只需要将它的地址复制下来，然后在之前创建的项目下使用go get命令，命令如下\",\"$ go get github.com/gin-gonic/gin\",\"过程中会下载很多的依赖，只要没有报错就说明下载成功。\",\"$ go get github.com/gin-gonic/gin go: added github.com/bytedance/sonic v1.8.0 go: added github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 go: added github.com/gin-contrib/sse v0.1.0 go: added github.com/gin-gonic/gin v1.9.0 go: added github.com/go-playground/locales v0.14.1 go: added github.com/go-playground/universal-translator v0.18.1 go: added github.com/go-playground/validator/v10 v10.11.2 go: added github.com/goccy/go-json v0.10.0 go: added github.com/json-iterator/go v1.1.12 go: added github.com/klauspost/cpuid/v2 v2.0.9 go: added github.com/leodido/go-urn v1.2.1 go: added github.com/mattn/go-isatty v0.0.17 go: added github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 go: added github.com/modern-go/reflect2 v1.0.2 go: added github.com/pelletier/go-toml/v2 v2.0.6 go: added github.com/twitchyliquid64/golang-asm v0.15.1 go: added github.com/ugorji/go/codec v1.2.9 go: added golang.org/x/arch v0.0.0-20210923205945-b76863e36670 go: added golang.org/x/crypto v0.5.0 go: added golang.org/x/net v0.7.0 go: added golang.org/x/sys v0.5.0 go: added golang.org/x/text v0.7.0 go: added google.golang.org/protobuf v1.28.1 go: added gopkg.in/yaml.v3 v3.0.1\",\"完成后查看go.mod文件\",\"$ cat go.mod module golearn go 1.20 require github.com/gin-gonic/gin v1.9.0 require ( github.com/bytedance/sonic v1.8.0 // indirect github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect github.com/gin-contrib/sse v0.1.0 // indirect github.com/go-playground/locales v0.14.1 // indirect github.com/go-playground/universal-translator v0.18.1 // indirect github.com/go-playground/validator/v10 v10.11.2 // indirect github.com/goccy/go-json v0.10.0 // indirect github.com/json-iterator/go v1.1.12 // indirect github.com/klauspost/cpuid/v2 v2.0.9 // indirect github.com/leodido/go-urn v1.2.1 // indirect github.com/mattn/go-isatty v0.0.17 // indirect github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 // indirect github.com/modern-go/reflect2 v1.0.2 // indirect github.com/pelletier/go-toml/v2 v2.0.6 // indirect github.com/twitchyliquid64/golang-asm v0.15.1 // indirect github.com/ugorji/go/codec v1.2.9 // indirect golang.org/x/arch v0.0.0-20210923205945-b76863e36670 // indirect golang.org/x/crypto v0.5.0 // indirect golang.org/x/net v0.7.0 // indirect golang.org/x/sys v0.5.0 // indirect golang.org/x/text v0.7.0 // indirect google.golang.org/protobuf v1.28.1 // indirect gopkg.in/yaml.v3 v3.0.1 // indirect )\",\"可以发现相较于之前多了很多东西，同时也会发现目录下多了一个名为go.sum的文件\",\"$ ls go.mod go.sum main.go\",\"这里先按下不表，修改main.go文件如下代码：\",\"package main import ( \\\"github.com/gin-gonic/gin\\\" ) func main() { gin.Default().Run() }\",\"再次运行项目\",\"$ go run golearn [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached. [GIN-debug] [WARNING] Running in \\\"debug\\\" mode. Switch to \\\"release\\\" mode in production. - using env: export GIN_MODE=release - using code: gin.SetMode(gin.ReleaseMode) [GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value. Please check https://pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details. [GIN-debug] Environment variable PORT is undefined. Using port :8080 by default [GIN-debug] Listening and serving HTTP on :8080\",\"于是，通过一行代码就运行起了一个最简单的Web服务器。当不再需要某一个依赖时，也可以使用go get命令来删除该依赖，这里以删除Gin为例子\",\"$ go get github.com/gin-gonic/gin@none go: removed github.com/gin-gonic/gin v1.9.0\",\"在依赖地址后面加上@none即可删除该依赖，结果也提示了删除成功，此时再次查看go.mod文件会发现没有了Gin依赖。\",\"$ cat go.mod | grep github.com/gin-gonic/gin\",\"当需要升级最新版本时，可以加上@latest后缀，或者可以自行查询可用的Release版本号\",\"$ go get -u github.com/gin-gonic/gin@latest\"]},\"454\":{\"h\":\"安装命令行\",\"t\":[\"go install命令会将第三方依赖下载到本地并编译成二进制文件，得益于go的编译速度，这一过程通常不会花费太多时间，然后go会将其存放在$GOPATH/bin或者$GOBIN目录下，以便在全局可以执行该二进制文件（前提是你将这些路径添加到了环境变量中）。\",\"提示\",\"在使用install命令时，必须指定版本号。\",\"例如下载由go语言编写的调试器delve\",\"$ go install github.com/go-delve/delve/cmd/dlv@latest go: downloading github.com/go-delve/delve v1.22.1 go: downloading github.com/cosiner/argv v0.1.0 go: downloading github.com/derekparker/trie v0.0.0-20230829180723-39f4de51ef7d go: downloading github.com/go-delve/liner v1.2.3-0.20231231155935-4726ab1d7f62 go: downloading github.com/google/go-dap v0.11.0 go: downloading github.com/hashicorp/golang-lru v1.0.2 go: downloading golang.org/x/arch v0.6.0 go: downloading github.com/cpuguy83/go-md2man/v2 v2.0.2 go: downloading go.starlark.net v0.0.0-20231101134539-556fd59b42f6 go: downloading github.com/cilium/ebpf v0.11.0 go: downloading github.com/mattn/go-runewidth v0.0.13 go: downloading github.com/russross/blackfriday/v2 v2.1.0 go: downloading github.com/rivo/uniseg v0.2.0 go: downloading golang.org/x/exp v0.0.0-20230224173230-c95f2b4c22f2 $ dlv -v Error: unknown shorthand flag: 'v' in -v Usage: dlv [command] Available Commands: attach Attach to running process and begin debugging. completion Generate the autocompletion script for the specified shell connect Connect to a headless debug server with a terminal client. core Examine a core dump. dap Starts a headless TCP server communicating via Debug Adaptor Protocol (DAP). debug Compile and begin debugging main package in current directory, or the package specified. exec Execute a precompiled binary, and begin a debug session. help Help about any command test Compile test binary and begin debugging program. trace Compile and begin tracing program. version Prints version. Additional help topics: dlv backend Help about the --backend flag. dlv log Help about logging flags. dlv redirect Help about file redirection. Use \\\"dlv [command] --help\\\" for more information about a command.\"]},\"455\":{\"h\":\"模块管理\",\"t\":[\"上述所有的内容都只是在讲述Go Mod的基本使用，但事实上要学会Go Mod仅仅只有这些是完全不够的。官方对于模块的定义为：一组被版本标记的包集合。上述定义中，包应该是再熟悉不过的概念了，而版本则是要遵循语义化版本号，定义为：v(major).(minor).(patch)的格式，例如Go的版本号v1.20.1，主版本号是1，小版本号是20，补丁版本是1，合起来就是v1.20.1，下面是详细些的解释：\",\"major：当major版本变化时，说明项目发生了不兼容的改动，老版本的项目升级到新版本大概率没法正常运行。\",\"minor：当minor版本变化时，说明项目增加了新的特性，只是先前版本的基础只是增加了新的功能。\",\"patch：当patch版本发生变化时，说明只是有bug被修复了，没有增加任何新功能。\"]},\"456\":{\"h\":\"常用命令\",\"t\":[\"命令\",\"说明\",\"go mod download\",\"下载当前项目的依赖包\",\"go mod edit\",\"编辑go.mod文件\",\"go mod graph\",\"输出模块依赖图\",\"go mod init\",\"在当前目录初始化go mod\",\"go mod tidy\",\"清理项目模块\",\"go mod verify\",\"验证项目的依赖合法性\",\"go mod why\",\"解释项目哪些地方用到了依赖\",\"go clean -modcache\",\"用于删除项目模块依赖缓存\",\"go list -m\",\"列出模块\",\"前往go mod cmd了解命令的更多有关信息\"]},\"457\":{\"h\":\"模块存储\",\"t\":[\"当使用Go Mod进行项目管理时，模块缓存默认存放在$GOPATH/pkg/mod目录下，也可以修改$GOMODCACHE来指定存放在另外一个位置。\",\"$ go env -w GOMODCACHE=你的模块缓存路径\",\"同一个机器上的所有Go Module项目共享该目录下的缓存，缓存没有大小限制且不会自动删除，在缓存中解压的依赖源文件都是只读的，想要清空缓存可以执行如下命令。\",\"$ go clean -modcache\",\"在$GOMODCACHE/cache/download目录下存放着依赖的原始文件，包括哈希文件，原始压缩包等，如下例：\",\"$ ls $(go env GOMODCACHE)/cache/download/github.com/246859/hello/@v -1 list v1.0.0.info v1.0.0.lock v1.0.0.mod v1.0.0.zip v1.0.0.ziphash\",\"解压过后的依赖组织形式如下所示，就是指定模块的源代码。\",\"$ ls $(go env GOMODCACHE)/github.com/246859/hello@v1.0.0 -1 LICENSE README.md cmd/ example/ go.mod hello.go hello_test.go\"]},\"458\":{\"h\":\"版本选择\",\"t\":[\"Go在依赖版本选择时，遵循最小版本选择原则。下面是一个官网给的例子，主模块引用了模块A的1.2版本和模块B的1.2版本，同时模块A的1.2版本引用了模块C的1.3版本，模块B的1.2版本引用了模块C的1.4版本，并且模块C的1.3和1.4版本都同时引用了模块D的1.2版本，根据最小可用版本原则，Go最终会选择的版本是A1.2，B1.2，C1.4和D1.2。其中淡蓝色的表示go.mod文件加载的，框选的表示最终选择的版本。\",\"官网中还给出了其他几个例子，大体意思都差不多。\"]},\"459\":{\"h\":\"go.mod\",\"t\":[\"每创建一个Go Mod项目都会生成一个go.mod文件，因此熟悉go.mod文件是非常有必要的，不过大部分情况并不需要手动的修改go.mod文件。\",\"module golearn go 1.20 require github.com/gin-gonic/gin v1.9.0 require ( github.com/bytedance/sonic v1.8.0 // indirect github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect github.com/gin-contrib/sse v0.1.0 // indirect github.com/go-playground/locales v0.14.1 // indirect github.com/go-playground/universal-translator v0.18.1 // indirect github.com/go-playground/validator/v10 v10.11.2 // indirect github.com/goccy/go-json v0.10.0 // indirect github.com/json-iterator/go v1.1.12 // indirect github.com/klauspost/cpuid/v2 v2.0.9 // indirect github.com/leodido/go-urn v1.2.1 // indirect github.com/mattn/go-isatty v0.0.17 // indirect github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 // indirect github.com/modern-go/reflect2 v1.0.2 // indirect github.com/pelletier/go-toml/v2 v2.0.6 // indirect github.com/twitchyliquid64/golang-asm v0.15.1 // indirect github.com/ugorji/go/codec v1.2.9 // indirect golang.org/x/arch v0.0.0-20210923205945-b76863e36670 // indirect golang.org/x/crypto v0.5.0 // indirect golang.org/x/net v0.7.0 // indirect golang.org/x/sys v0.5.0 // indirect golang.org/x/text v0.7.0 // indirect google.golang.org/protobuf v1.28.1 // indirect gopkg.in/yaml.v3 v3.0.1 // indirect )\",\"在文件中可以发现绝大多数的依赖地址都带有github等字眼，这是因为Go并没有一个公共的依赖仓库，大部分开源项目都是在托管在Gitub上的，也有部分的是自行搭建仓库，例如google.golang.org/protobuf，golang.org/x/crypto。通常情况下，这一串网址同时也是Go项目的模块名称，这就会出现一个问题，URL是不分大小写的，但是存储依赖的文件夹是分大小写的，所以go get github.com/gin-gonic/gin和go get github.com/gin-gonic/Gin两个引用的是同一个依赖但是本地存放的路径不同。发生这种情况时，Go并不会直接把大写字母当作存放路径，而是会将其转义为!小写字母，比如github.com\\\\BurntSushi最终会转义为github.com\\\\!burnt!sushi。\",\"module\",\"module关键字声明了当前项目的模块名，一个go.mod文件中只能出现一个module关键字。例子中的\",\"module golearn\",\"代表着当前模块名为golearn，例如打开Gin依赖的go.mod文件可以发现它的module名\",\"module github.com/gin-gonic/gin\",\"Gin的模块名就是下载依赖时使用的地址，这也是通常而言推荐模块名格式，域名/用户/仓库名。\",\"提示\",\"有一个需要注意的点是，当主版本大于1时，主版本号要体现在模块名中，例如\",\"github.com/my/example\",\"如果版本升级到了v2.0.0，那么模块名就需要修改成如下\",\"github.com/my/example/v2\",\"如果原有项目引用了老版本，且新版本不加以区分的话，在引用依赖时由于路径都一致，所以使用者并不能区分主版本变化所带来的不兼容变动，这样就可能会造成程序错误。\",\"Deprecation\",\"在module的上一行开头注释Deprecated来表示该模块已弃用，例如\",\"// Deprecated: use example.com/mod/v2 instead. module example.com/mod\",\"go\",\"go关键字表示了当前编写当前项目所用到的Go版本，版本号必须遵循语义化规则，根据go版本的不同，Go Mod会表现出不同的行为，下方是一个简单示例，关于Go可用的版本号自行前往官方查阅。\",\"go 1.20\",\"require\",\"require关键字表示引用了一个外部依赖，例如\",\"require github.com/gin-gonic/gin v1.9.0\",\"格式是require 模块名 版本号，有多个引用时可以使用括号括起来\",\"require ( github.com/bytedance/sonic v1.8.0 // indirect )\",\"带有// indirect注释的表示该依赖没有被当前项目直接引用，可能是项目直接引用的依赖引用了该依赖，所以对于当前项目而言就是间接引用。前面提到过主板变化时要体现在模块名上，如果不遵循此规则的模块被称为不规范模块，在require时，就会加上incompatible注释。\",\"require example.com/m v4.1.2+incompatible\",\"伪版本\",\"在上面的go.mod文件中，可以发现有一些依赖包的版本并不是语义化的版本号，而是一串不知所云的字符串，这其实是对应版本的CommitID，语义化版本通常指的是某一个Release。伪版本号则可以细化到指定某一个Commit，通常格式为vx.y.z-yyyyMMddHHmmss-CommitId，由于其vx.y.z并不一定真实存在，所以称为伪版本，例如下面例子中的v0.0.0并不存在，真正有效的是其后的12位CommitID。\",\"// CommitID一般取前12位 github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect\",\"同理，在下载依赖时也可以指定CommitID替换语义化版本号\",\"go get github.com/chenzhuoyu/base64x@fe3a3abad311\",\"exclude\",\"exclude关键字表示了不加载指定版本的依赖，如果同时有require引用了相同版本的依赖，也会被忽略掉。该关键字仅在主模块中才生效。例如\",\"exclude golang.org/x/net v1.2.3 exclude ( golang.org/x/crypto v1.4.5 golang.org/x/text v1.6.7 )\",\"replace\",\"replace将会替换掉指定版本的依赖，可以使用模块路径和版本替换又或者是其他平台指定的文件路径，例子\",\"replace golang.org/x/net v1.2.3 => example.com/fork/net v1.4.5 replace ( golang.org/x/net v1.2.3 => example.com/fork/net v1.4.5 golang.org/x/net => example.com/fork/net v1.4.5 golang.org/x/net v1.2.3 => ./fork/net golang.org/x/net => ./fork/net )\",\"仅=>左边的版本被替换，其他版本的同一个依赖照样可以正常访问，无论是使用本地路径还是模块路径指定替换，如果替换模块具有 go.mod 文件，则其module指令必须与所替换的模块路径匹配。\",\"retract\",\"retract指令表示，不应该依赖retract所指定依赖的版本或版本范围。例如在一个新的版本发布后发现了一个重大问题，这个时候就可以使用retract指令。\",\"撤回一些版本\",\"retract ( v1.0.0 // Published accidentally. v1.0.1 // Contains retractions only. )\",\"撤回版本范围\",\"retract v1.0.0 retract [v1.0.0, v1.9.9] retract ( v1.0.0 [v1.0.0, v1.9.9] )\"]},\"460\":{\"h\":\"go.sum\",\"t\":[\"go.sum文件在创建项目之初并不会存在，只有在真正引用了外部依赖后，才会生成该文件，go.sum文件并不适合人类阅读，也不建议手动修改该文件。它的作用主要是解决一致性构建问题，即不同的人在不同的环境中使用同一个的项目构建时所引用的依赖包必须是完全相同的，这单单靠一个go.mod文件是无法保证的。\",\"接下来看看下载一个依赖时，Go从头到尾都做了些什么事，首先使用如下命令下载一个依赖\",\"go get github.com/bytedance/sonic v1.8.0\",\"go get命令首先会将依赖包下载到本地的缓存目录中，通常该目录为$GOMODCACHE/cache/download/，该目录根据域名来划分不同网站的依赖包，所以你可能会看到如下的目录结构\",\"$ ls cloud.google.com/ go.opencensus.io/ gopkg.in/ nhooyr.io/ dmitri.shuralyov.com/ go.opentelemetry.io/ gorm.io/ rsc.io/ github.com/ go.uber.org/ honnef.co/ sumdb/ go.etcd.io/ golang.org/ lukechampine.com/ go.mongodb.org/ google.golang.org/ modernc.org/\",\"那么上例中下载的依赖包存放的路径就位于\",\"$GOMODCACHE/cache/download/github.com/bytedance/sonic/@v/\",\"可能的目录结构如下，会有好几个版本命名的文件\",\"$ ls list v1.8.0.lock v1.8.0.ziphash v1.8.3.mod v1.5.0.mod v1.8.0.mod v1.8.3.info v1.8.3.zip v1.8.0.info v1.8.0.zip v1.8.3.lock v1.8.3.ziphash\",\"通常情况下，该目录下一定有一个list文件，用于记录该依赖已知的版本号，而对于每一个版本而言，都会有如下的文件：\",\"zip：依赖的源码压缩包\",\"ziphash：根据依赖压缩包所计算出的哈希值\",\"info：json格式的版本元数据\",\"mod：该版本的go.mod文件\",\"lock：临时文件，官方也没说干什么用的\",\"一般情况下，Go会计算压缩包和go.mod两个文件的哈希值，然后再根据GOSUMDB所指定的服务器（默认是sum.golang.org）查询该依赖包的哈希值，如果本地计算出的哈希值与查询得到的结果不一致，那么就不会再向下执行。如果一致的话，就会更新go.mod文件，并向go.sum文件插入两条记录，大致如下：\",\"github.com/bytedance/sonic v1.8.0 h1:ea0Xadu+sHlu7x5O3gKhRpQ1IKiMrSiHttPF0ybECuA= github.com/bytedance/sonic v1.8.0/go.mod h1:i736AoUSYt75HyZLoJW9ERYxcy6eaN6h4BZXU064P/U=\",\"提示\",\"假如禁用了GOSUMDB，Go会直接将本地计算得到的哈希值写入go.sum文件中，一般不建议这么做。\",\"正常情况下每一个依赖都会有两条记录，第一个是压缩包的哈希值，第二个是依赖包的go.mod文件的哈希值，记录格式为模块名 版本号 算法名称:哈希值，有些比较古老的依赖包可能没有go.mod文件，所以就不会有第二条哈希记录。当这个项目在另一个人的环境中构建时，Go会根据go.mod中指定的本地依赖计算哈希值，再与go.sum中记录的哈希值进行比对，如果哈希值不一致，则说明依赖版本不同，就会拒绝构建。发生这种情况时，本地依赖和go.sum文件都有可能被修改过，但是由于go.sum是经过GOSUMDB查询记录的，所以会倾向于更相信go.sum文件。\"]},\"461\":{\"h\":\"私有模块\",\"t\":[\"Go Mod大多数工具都是针对开源项目而言的，不过Go也对私有模块进行了支持。对于私有项目而言，通常情况下需要配置以下几个环境配置来进行模块私有处理\",\"GOPROXY ：依赖的代理服务器集合\",\"GOPRIVATE ：私有模块的模块路径前缀的通用模式列表，如果模块名符合规则表示该模块为私有模块，具体行为与GONOPROXY和GONOSUMDB一致。\",\"GONOPROXY ：不从代理中下载的模块路径前缀的通用模式列表，如果符合规则在下载模块时不会走GOPROXY，尝试直接从版本控制系统中下载。\",\"GONOSUMDB ：不进行GOSUMDB公共校验的模块路径前缀的通用模式列表，如果符合在下载模块校验时不会走checksum的公共数据库。\",\"GOINSECURE ：可以通过 HTTP 和其他不安全协议检索的模块路径前缀的通用模式列表。\"]},\"462\":{\"h\":\"工作区\",\"t\":[\"前面提到了go.mod文件支持replace指令，这使得我们可以暂时使用一些本地来不及发版的修改，如下所示\",\"replace ( github.com/246859/hello v1.0.1 => ./hello )\",\"在编译时，go就会使用本地的hello模块，在日后发布新版本后再将其去掉。\",\"但如果使用了 replace指令的话会修改go.mod文件的内容，并且该修改可能会被误提交到远程仓库中，这一点是我们不希望看到的，因为replace指令所指定的target是一个文件路径而非网络URL，这台机器上能用的路径可能到另一台机器上就不能用了，文件路径在跨平台方面也会是一个大问题。为了解决这类问题，工作区便应运而生。\",\"工作区(workspace)，是Go在1.18引入的关于多模块管理的一个新的解决方案，旨在更好的进行本地的多模块开发工作，下面将通过一个示例进行讲解。\",\"示例仓库：246859/work: go work example (github.com)\"]},\"463\":{\"h\":\"示例\",\"t\":[\"首先项目下有两个独立的go模块，分别是auth，user\",\"$ ls -1 LICENSE README.md auth go.work user\",\"auth模块依赖于user模块的结构体User，内容如下\",\"package auth import ( \\\"errors\\\" \\\"github.com/246859/work/user\\\" ) // Verify user credentials if is ok func Verify(user user.User) (bool, error) { password, err := query(user.Name) if err != nil { return false, err } if password != user.Password { return false, errors.New(\\\"authentication failed\\\") } return true, nil } func query(username string) (string, error) { if username == \\\"jack\\\" { return \\\"jack123456\\\", nil } return \\\"\\\", errors.New(\\\"user not found\\\") }\",\"user模块内容如下\",\"package user type User struct { Name string Password string Age int }\",\"在这个项目中，我们可以这样编写go.work文件\",\"go 1.22 use ( ./auth ./user )\",\"其内容非常容易理解，使用use指令，指定哪些模块参与编译，接下来运行auth模块中的代码\",\"// auth/example/main.go package main import ( \\\"fmt\\\" \\\"github.com/246859/work/auth\\\" \\\"github.com/246859/work/user\\\" ) func main() { ok, err := auth.Verify(user.User{Name: \\\"jack\\\", Password: \\\"jack123456\\\"}) if err != nil { panic(err) } fmt.Printf(\\\"%v\\\", ok) }\",\"运行如下命令，通过结果得知成功导入了模块。\",\"$ go run ./auth/example true\",\"在以前的版本，对于这两个独立的模块，如果auth模块想要使用user模块中的代码只有两种办法\",\"提交user模块的修改并推送到远程仓库，发布新版本，然后修改go.mod文件为指定版本\",\"修改go.mod文件将依赖重定向到本地文件\",\"两种方法都需要修改go.mod文件，而工作区的存在就是为了能够在不修改go.mod文件的情况下导入其它模块。不过需要明白的一点是，go.work文件仅用在开发过程中，它的存在只是为了更加方便的进行本地开发，而不是进行依赖管理，它只是暂时让你略过了提交到发版的这一过程，可以让你马上使用user模块的新修改而无需进行等待，当user模块测试完毕后，最后依旧需要发布新版本，并且auth模块最后仍然要修改go.mod文件引用最新版本（这一过程可以用go work sync命令来完成），因此在正常的go开发过程中，go.work也不应该提交到VCS中（示例仓库中的go.work仅用于演示），因为其内容都是依赖于本地的文件，且其功能也仅限于本地开发。\"]},\"464\":{\"h\":\"命令\",\"t\":[\"下面是一些工作区的命令\",\"命令\",\"介绍\",\"edit\",\"编辑go.work\",\"init\",\"初始化一个新的工作区\",\"sync\",\"同步工作区的模块依赖\",\"use\",\"往go.work中添加一个新模块\",\"vendor\",\"将依赖按照vendor格式进行复制\",\"前往 go work cmd 了解命令的更多有关信息\"]},\"465\":{\"h\":\"指令\",\"t\":[\"go.work文件的内容很简单，只有三个指令\",\"go，指定go版本\",\"use，指定使用的模块\",\"replace，指定替换的模块\",\"除了use指令外，其它两个基本上等同于go.mod中的指令，只不过go.work中的的replace指令会作用于所有的模块，一个完整的go.work如下所示。\",\"go 1.22 use( ./auth ./user ) repalce github.com/246859/hello v1.0.0 => /home/jack/code/hello\"]},\"466\":{\"h\":\"测试\",\"t\":[\"对于开发者而言，良好的测试可以提前发现程序的中错误，避免后续因维护不及时产生Bug而造成的心智负担，所以写好测试非常有必要。Go在测试这一方面提供了非常简便实用的命令行工具go test，在标准库和许多开源框架都能看到测试的身影，该工具使用起来十分方便，目前支持以下几种测试：\",\"示例测试\",\"单元测试\",\"基准测试\",\"模糊测试\",\"在Go中大部分的API都是由标准库testing提供。\",\"提示\",\"在命令行中执行go help testfunc命令，可看Go官方对于上面四种测试类型的解释。\"]},\"467\":{\"h\":\"编写规范\",\"t\":[\"在开始编写测试之前，首先需要注意几点规范，这样在后续的学习中会更加方便。\",\"测试包：测试文件最好单独放在一个包中，这个包通常命名为test。\",\"测试文件：测试文件通常以_test.go结尾，例如要测试某一个功能，就将其命名为function_test.go，如果想根据测试类型再划分的更细一些也可以将测试类型为作为文件前缀，例如benchmark_marshaling_test.go，或者example_marshaling_test.go。\",\"测试函数：每一个测试文件中都会有若干个测试函数用于不同的测试。对于不同的测试类型，测试函数的命名的风格也不同。例如示例测试是ExampleXXXX，单元测试是TestXXXX，基准测试是BenchmarkXXXX，模糊测试是FuzzXXXX，这样一来即便不需要注释也可以知晓这是什么类型的测试。\",\"提示\",\"当包名为testdata时，该包通常是为了存储用于测试的辅助数据，在执行测试时，Go会忽略名为testdata的包。\",\"遵循上述的规范，养成良好的测试风格，可以为日后的维护省去不少的麻烦。\"]},\"468\":{\"h\":\"执行测试\",\"t\":[\"执行测试主要会用到go test命令，下面拿实际的代码举例，现在有待测试文件/say/hello.go代码如下\",\"package say import \\\"fmt\\\" func Hello() { fmt.Println(\\\"hello\\\") } func GoodBye() { fmt.Println(\\\"bye\\\") }\",\"和测试文件/test/example_test.go代码如下\",\"package test import ( \\\"golearn/say\\\" ) func ExampleHello() { say.Hello() // Output: // hello } func ExampleGoodBye() { say.GoodBye() // Output: // bye } func ExampleSay() { say.Hello() say.GoodBye() // Output: // hello // bye }\",\"执行这些测试有多种方法，比如想要执行test包下所有的测试用例，就可以直接在test目录下执行如下命令\",\"$ go test ./ PASS ok golearn/test 0.422s\",\"./表示当前目录，Go会将test目录下的所有测试文件重新编译后，然后再将所有测试用例全都执行，从结果可以看出所有的测试用例都通过了。其后的参数也可以跟多个目录，例如下方的命令，显然项目的主目录并没有测试文件可供执行。\",\"$ go test ./ ../ ok golearn/test ? golearn [no test files]\",\"提示\",\"当执行的参数有多个包时，Go并不会再次执行已经成功通过的测试用例，在执行时会行尾添加(cached)以表示输出结果是上一次的缓存。当测试的标志参数位于以下集合中时，Go就会缓存测试结果，否则就不会。\",\"-benchtime, -cpu,-list, -parallel, -run, -short, -timeout, -failfast, -v\",\"如果想要禁用缓存，可以加上参数 -count=1。\",\"当然也可以单独指定某一个测试文件来执行。\",\"$ go test example_test.go ok command-line-arguments 0.457s\",\"或者可以单独指定某一个测试文件的某一个测试用例，例如\",\"$ go test -run ExampleSay PASS ok golearn/test 0.038s\",\"上面三种情况虽然都完成了测试，但是输出结果太简介了，这时可以加上参数-v，来使输出结果更加详细一点，例如\",\"$ go test ./ -v === RUN ExampleHello --- PASS: ExampleHello (0.00s) === RUN ExampleGoodBye --- PASS: ExampleGoodBye (0.00s) === RUN ExampleSay --- PASS: ExampleSay (0.00s) PASS ok golearn/test 0.040s\",\"这下可以很清楚的看到每一个测试用例的执行顺序，耗时，执行情况，以及总体的耗时。\",\"提示\",\"go test命令默认运行所有的单元测试，示例测试，模糊测试，如果加上了-bench参数则会运行所有类型的测试，例如下方的命令\",\"$ go test -bench .\",\"所以需要使用-run参数来指定，例如只运行所有的基准测试的命令如下\",\"$ go test -bench . -run ^$\"]},\"469\":{\"h\":\"常用参数\",\"t\":[\"Go 测试有着非常多的标志参数，下面只会介绍常用的参数，想要了解更多细节建议使用go help testflag命令自行查阅。\",\"参数\",\"释义\",\"-o file\",\"指定编译后的二进制文件名称\",\"-c\",\"只编译测试文件，但不运行\",\"-json\",\"以json格式输出测试日志\",\"-exec xprog\",\"使用xprog运行测试，等价于go run\",\"-bench regexp\",\"选中regexp匹配的基准测试\",\"-fuzz regexp\",\"选中regexp匹配的模糊测试\",\"-fuzztime t\",\"模糊测试自动结束的时间，t为时间间隔，当单位为x时，表示次数，例如200x\",\"-fuzzminimizetime t\",\"模式测试运行的最小时间，规则同上\",\"-count n\",\"运行测试n次，默认1次\",\"-cover\",\"开启测试覆盖率分析\",\"-covermode set,count,atomic\",\"设置覆盖率分析的模式\",\"-cpu\",\"为测试执行GOMAXPROCS\",\"-failfast\",\"第一次测试失败后，不会开始新的测试\",\"-list regexp\",\"列出regexp匹配的测试用例\",\"-parallel n\",\"允许调用了t.Parallel的测试用例并行运行，n值为并行的最大数量\",\"-run regexp\",\"只运行regexp匹配的测试用例\",\"-skip regexp\",\"跳过regexp匹配的测试用例\",\"-timeout d\",\"如果单次测试执行时间超过了时间间隔d，就会panic。d为时间间隔，例1s,1ms,1ns等\",\"-shuffle off,on,N\",\"打乱测试的执行顺序，N为随机种子，默认种子为系统时间\",\"-v\",\"输出更详细的测试日志\",\"-benchmem\",\"统计基准测试的内存分配\",\"-blockprofile block.out\",\"统计测试中协程阻塞情况并写入文件\",\"-blockprofilerate n\",\"控制协程阻塞统计频率，通过命令go doc runtime.SetBlockProfileRate查看更多细节\",\"-coverprofile cover.out\",\"统计覆盖率测试的情况并写入文件\",\"-cpuprofile cpu.out\",\"统计cpu情况并写入文件\",\"-memprofile mem.out\",\"统计内存分配情况并写入文件\",\"-memprofilerate n\",\"控制内存分配统计的频率，通过命令go doc runtime.MemProfileRate查看更多细节\",\"-mutexprofile mutex.out\",\"统计锁竞争情况并写入文件\",\" -mutexprofilefraction n\",\"设置统计n个协程竞争一个互斥锁的情况\",\"-trace trace.out\",\"将执行追踪情况写入文件\",\"-outputdir directory\",\"指定上述的统计文件的输出目录，默认为go test的运行目录\"]},\"470\":{\"h\":\"示例测试\",\"t\":[\"示例测试并不像其他三种测试一样是为了发现程序的问题所在，它更多的是为了展示某一个功能的使用方法，起到文档作用。示例测试并不是一个官方定义的概念，也不是一个硬性的规范，更像是一种工程上的约定俗成，是否遵守只取决于开发者。示例测试在标准库中出现的非常多，通常是官方所编写的标准库代码示例，例如标准库context/example_test.go中的ExampleWithDeadline测试函数，该函数中展现了DeadlineContext的基本使用方法：\",\"// This example passes a context with an arbitrary deadline to tell a blocking // function that it should abandon its work as soon as it gets to it. func ExampleWithDeadline() { d := time.Now().Add(shortDuration) ctx, cancel := context.WithDeadline(context.Background(), d) // Even though ctx will be expired, it is good practice to call its // cancellation function in any case. Failure to do so may keep the // context and its parent alive longer than necessary. defer cancel() select { case <-time.After(1 * time.Second): fmt.Println(\\\"overslept\\\") case <-ctx.Done(): fmt.Println(ctx.Err()) } // Output: // context deadline exceeded }\",\"表面上看该测试函数就是一个普通的函数，不过示例测试主要是由Output注释来体现的，待测试函数只有一行输出时，使用Output注释来检测输出。首先创建一个hello.go的文化，写入如下代码\",\"package say import \\\"fmt\\\" func Hello() { fmt.Println(\\\"hello\\\") } func GoodBye() { fmt.Println(\\\"bye\\\") }\",\"SayHello函数就是待测函数，然后创建测试文件example_test.go，写入如下代码\",\"package test import ( \\\"golearn/say\\\" ) func ExampleHello() { say.Hello() // Output: // hello } func ExampleGoodBye() { say.GoodBye() // Output: // bye } func ExampleSay() { say.Hello() say.GoodBye() // Output: // hello // bye }\",\"函数中Output注释表明了检测函数输出是否为hello，接下来执行测试命令看看结果。\",\"$ go test -v === RUN ExampleHello --- PASS: ExampleHello (0.00s) === RUN ExampleGoodBye --- PASS: ExampleGoodBye (0.00s) === RUN ExampleSay --- PASS: ExampleSay (0.00s) PASS ok golearn/test 0.448s\",\"从结果可以看出全部测试都已经通过，关于Output有以下几种写法，第一种是只有一行输出，意为检测该函数的输出是不是hello\",\"// Output: // hello\",\"第二种是多行输出，即按顺序检测输出是否匹配\",\"// Output: // hello // bye\",\"第三种是无序输出，即不按照顺序多行输出匹配\",\"// Unordered output: // bye // hello\",\"需要注意的是，对于测试函数而言，仅当最后几行为Output注释才会被视为示例测试，否则就只是一个普通的函数，不会被Go执行。\"]},\"471\":{\"h\":\"单元测试\",\"t\":[\"单元测试就是对软件中的最小可测试单元进行测试，单元的大小定义取决于开发者，可能是一个结构体，或者是一个包，也可能是一个函数，或者是一个类型。下面依旧通过例子来演示，首先创建/tool/math.go文件，写入如下代码\",\"package tool type Number interface { ~int8 | ~int16 | ~int32 | ~int64 | ~int } func SumInt[T Number](a, b T) T { return a + b } func Equal[T Number](a, b T) bool { return a == b }\",\"然后创建测试文件/tool_test/unit_test.go，对于单元测试而言，命名可以为unit_test或者是想要测试的包或者功能作为文件前缀。\",\"package test_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) func TestSum(t *testing.T) { a, b := 10, 101 expected := 111 actual := tool.SumInt(a, b) if actual != expected { t.Errorf(\\\"Sum(%d,%d) expected %d,actual is %d\\\", a, b, expected, actual) } } func TestEqual(t *testing.T) { a, b := 10, 101 expected := false actual := tool.Equal(a, b) if actual != expected { t.Errorf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } }\",\"对于单元测试而言，每一个测试用例的命名风格为TestXXXX，且函数的入参必须是t *testing.T，testing.T是testing包提供的用于方便测试的结构体，提供了许多可用的方法，例子中的t.Errorf等同于t.Logf，用于格式化输出测试失败的日志信息，其他常用的还有t.Fail用于将当前用例标记为测试失败，功能类似的还有t.FailNow同样会标记为测试失败，但是前者失败后还会继续执行，后者则会直接停止执行，如下方的例子，将预期结果修改为错误的结果：\",\"package tool_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) func TestSum(t *testing.T) { a, b := 10, 101 expected := 110 actual := tool.SumInt(a, b) if actual != expected { // Errorf内部使用的是t.Fail() t.Errorf(\\\"Sum(%d,%d) expected %d,actual is %d\\\", a, b, expected, actual) } t.Log(\\\"test finished\\\") } func TestEqual(t *testing.T) { a, b := 10, 101 expected := true actual := tool.Equal(a, b) if actual != expected { // Fatalf内部使用的是t.FailNow() t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } t.Log(\\\"test finished\\\") }\",\"执行上述测试输出如下\",\"$ go test tool_test.go -v === RUN TestSum tool_test.go:14: Sum(10,101) expected 110,actual is 111 tool_test.go:16: test finished --- FAIL: TestSum (0.00s) === RUN TestEqual tool_test.go:25: Sum(10,101) expected true,actual is false --- FAIL: TestEqual (0.00s) FAIL command-line-arguments 0.037s\",\"从测试日志中可以看出TestSum用例尽管失败了还是输出了test finished，而TestEqual则没有，同样的还有t.SkipNow，会将当前用例标记为SKIP，然后停止执行，在下一轮测试中会继续执行。\",\"package tool_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) func TestSum(t *testing.T) { a, b := 10, 101 expected := 110 actual := tool.SumInt(a, b) if actual != expected { t.Skipf(\\\"Sum(%d,%d) expected %d,actual is %d\\\", a, b, expected, actual) } t.Log(\\\"test finished\\\") } func TestEqual(t *testing.T) { a, b := 10, 101 expected := true actual := tool.Equal(a, b) if actual != expected { t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } t.Log(\\\"test finished\\\") }\",\"在执行测试时，修改测试次数为2\",\"$ go test tool_test.go -v -count=2 === RUN TestSum tool_test.go:14: Sum(10,101) expected 110,actual is 111 --- SKIP: TestSum (0.00s) === RUN TestEqual tool_test.go:25: Sum(10,101) expected true,actual is false --- FAIL: TestEqual (0.00s) === RUN TestSum tool_test.go:14: Sum(10,101) expected 110,actual is 111 --- SKIP: TestSum (0.00s) === RUN TestEqual tool_test.go:25: Sum(10,101) expected true,actual is false --- FAIL: TestEqual (0.00s) FAIL command-line-arguments 0.468s\",\"上数的例子中在最后一行输出了test finished，用于表示测试完毕，其实可以使用t.Cleanup来注册一个收尾函数专门做此事，该函数会在测试用例结束时执行，如下。\",\"package tool_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) func finished(t *testing.T) { t.Log(\\\"test finished\\\") } func TestSum(t *testing.T) { t.Cleanup(func() { finished(t) }) a, b := 10, 101 expected := 111 actual := tool.SumInt(a, b) if actual != expected { t.Skipf(\\\"Sum(%d,%d) expected %d,actual is %d\\\", a, b, expected, actual) } } func TestEqual(t *testing.T) { t.Cleanup(func() { finished(t) }) a, b := 10, 101 expected := false actual := tool.Equal(a, b) if actual != expected { t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } }\",\"执行测试后输出如下\",\"$ go test tool_test.go -v === RUN TestSum tool_test.go:9: test finished --- PASS: TestSum (0.00s) === RUN TestEqual tool_test.go:9: test finished --- PASS: TestEqual (0.00s) PASS ok command-line-arguments 0.462s\"]},\"472\":{\"h\":\"Helper\",\"t\":[\"通过t.Helper()可以将当前函数标记为帮助函数，帮助函数不会单独作为一个测试用例用于执行，在记录日志时输出的行号也是帮助函数的调用者的行号，这样可以使得分析日志时定位更准确，避免的冗杂的其他信息。比如将上述t.Cleanup的例子就可以修改为帮助函数，如下。\",\"package tool_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) func CleanupHelper(t *testing.T) { t.Helper() t.Log(\\\"test finished\\\") } func TestSum(t *testing.T) { t.Cleanup(func() { CleanupHelper(t) }) a, b := 10, 101 expected := 111 actual := tool.SumInt(a, b) if actual != expected { t.Skipf(\\\"Sum(%d,%d) expected %d,actual is %d\\\", a, b, expected, actual) } } func TestEqual(t *testing.T) { t.Cleanup(func() { CleanupHelper(t) }) a, b := 10, 101 expected := false t.Helper() actual := tool.Equal(a, b) if actual != expected { t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } }\",\"执行测试后输出信息如下，与之前的区别在于test finished的行号变成了调用者的行号。\",\"$ go test tool_test.go -v === RUN TestSum tool_test.go:15: test finished --- PASS: TestSum (0.00s) === RUN TestEqual tool_test.go:30: test finished --- PASS: TestEqual (0.00s) PASS ok command-line-arguments 0.464s\",\"提示\",\"上述操作都只能在主测试中进行，即直接执行的测试用例，如果是子测试中使用将会panic。\"]},\"473\":{\"h\":\"子测试\",\"t\":[\"在一些情况下，会需要用到在一个测试用例中测试另外测试用例，这种嵌套的测试用例一般称为子测试，通过t.Run()方法，该方法签名如下\",\"// Run方法会开启一个新的协程用于运行子测试，阻塞等待函数f执行完毕后才会返回 // 返回值为是否通过测试 func (t *T) Run(name string, f func(t *T)) bool\",\"下面是一个例子\",\"func TestTool(t *testing.T) { t.Run(\\\"tool.Sum(10,101)\\\", TestSum) t.Run(\\\"tool.Equal(10,101)\\\", TestEqual) }\",\"执行后结果如下\",\"$ go test -run TestTool -v === RUN TestTool === RUN TestTool/tool.Sum(10,101) tool_test.go:15: test finished === RUN TestTool/tool.Equal(10,101) tool_test.go:30: test finished --- PASS: TestTool (0.00s) --- PASS: TestTool/tool.Sum(10,101) (0.00s) --- PASS: TestTool/tool.Equal(10,101) (0.00s) PASS ok golearn/tool_test 0.449s\",\"通过输出可以很清晰的看到父子的层级结构，在上述的例子中第一个子测试未执行完毕第二个子测试是不会执行的，可以使用t.Parallel()将测试用例标记为可并行运行，如此一来输出的顺序将会无法确定。\",\"package tool_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) func CleanupHelper(t *testing.T) { t.Helper() t.Log(\\\"test finished\\\") } func TestSum(t *testing.T) { t.Parallel() t.Cleanup(func() { CleanupHelper(t) }) a, b := 10, 101 expected := 111 actual := tool.SumInt(a, b) if actual != expected { t.Skipf(\\\"Sum(%d,%d) expected %d,actual is %d\\\", a, b, expected, actual) } } func TestEqual(t *testing.T) { t.Parallel() t.Cleanup(func() { CleanupHelper(t) }) a, b := 10, 101 expected := false actual := tool.Equal(a, b) if actual != expected { t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } } func TestToolParallel(t *testing.T) { t.Log(\\\"setup\\\") t.Run(\\\"tool.Sum(10,101)\\\", TestSum) t.Run(\\\"tool.Equal(10,101)\\\", TestEqual) t.Log(\\\"teardown\\\") }\",\"执行测试后输出如下\",\"$ go test -run TestTool -v === RUN TestToolParallel tool_test.go:46: setup === RUN TestToolParallel/tool.Sum(10,101) === PAUSE TestToolParallel/tool.Sum(10,101) === RUN TestToolParallel/tool.Equal(10,101) === PAUSE TestToolParallel/tool.Equal(10,101) === NAME TestToolParallel tool_test.go:49: teardown === CONT TestToolParallel/tool.Sum(10,101) === CONT TestToolParallel/tool.Equal(10,101) === NAME TestToolParallel/tool.Sum(10,101) tool_test.go:16: test finished === NAME TestToolParallel/tool.Equal(10,101) tool_test.go:32: test finished --- PASS: TestToolParallel (0.00s) --- PASS: TestToolParallel/tool.Sum(10,101) (0.00s) --- PASS: TestToolParallel/tool.Equal(10,101) (0.00s) PASS ok golearn/tool_test 0.444s\",\"从测试结果中就可以很明显的看出有一个阻塞等待的过程，在并发执行测试用例时，像上述的例子肯定是无法正常进行的，因为后续的代码无法保证同步运行，这时可以选择再嵌套一层t.Run()，如下\",\"func TestToolParallel(t *testing.T) { t.Log(\\\"setup\\\") t.Run(\\\"process\\\", func(t *testing.T) { t.Run(\\\"tool.Sum(10,101)\\\", TestSum) t.Run(\\\"tool.Equal(10,101)\\\", TestEqual) }) t.Log(\\\"teardown\\\") }\",\"再次执行，就可以看到正常的执行结果了。\",\"$ go test -run TestTool -v === RUN TestToolParallel tool_test.go:46: setup === RUN TestToolParallel/process === RUN TestToolParallel/process/tool.Sum(10,101) === PAUSE TestToolParallel/process/tool.Sum(10,101) === RUN TestToolParallel/process/tool.Equal(10,101) === PAUSE TestToolParallel/process/tool.Equal(10,101) === CONT TestToolParallel/process/tool.Sum(10,101) === CONT TestToolParallel/process/tool.Equal(10,101) === NAME TestToolParallel/process/tool.Sum(10,101) tool_test.go:16: test finished === NAME TestToolParallel/process/tool.Equal(10,101) tool_test.go:32: test finished === NAME TestToolParallel tool_test.go:51: teardown --- PASS: TestToolParallel (0.00s) --- PASS: TestToolParallel/process (0.00s) --- PASS: TestToolParallel/process/tool.Sum(10,101) (0.00s) --- PASS: TestToolParallel/process/tool.Equal(10,101) (0.00s) PASS ok golearn/tool_test 0.450s\"]},\"474\":{\"h\":\"表格风格\",\"t\":[\"在上述的单元测试中，测试的输入数据都是手动声明的一个个变量，当数据量小的时候无伤大雅，但如果想要测试多组数据时，就不太可能再去声明变量来创建测试数据，所以一般情况下都是尽量采用结构体切片的形式，结构体是临时声明的匿名结构体，因为这样的编码风格看起来就跟表格一样，所以称为table-driven，下面举个例子，这是一个手动声明多个变量来创建测试数据的例子，如果有多组数据狠起来就不是很直观，所以将其修改为表格风格\",\"func TestEqual(t *testing.T) { t.Cleanup(func() { CleanupHelper(t) }) a, b := 10, 101 expected := false actual := tool.Equal(a, b) if actual != expected { t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } }\",\"修改后的代码如下\",\"func TestEqual(t *testing.T) { t.Cleanup(func() { CleanupHelper(t) }) // table driven style testData := []struct { a, b int exp bool }{ {10, 101, false}, {5, 5, true}, {30, 32, false}, {100, 101, false}, {2, 3, false}, {4, 4, true}, } for _, data := range testData { if actual := tool.Equal(data.a, data.b); actual != data.exp { t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", data.a, data.b, data.exp, actual) } } }\",\"这样的测试数据看起来就要直观很多。\"]},\"475\":{\"h\":\"基准测试\",\"t\":[\"基准测试又称为性能测试，通常用于测试程序的内存占用，CPU使用情况，执行耗时等等性能指标。对于基准测试而言，测试文件通常以bench_test.go结尾，而测试用例的函数必须为BenchmarkXXXX格式。\",\"下面以一个字符串拼接的例子的性能比较来当作基准测试的例子。首先创建文件/tool/strConcat.go文件，众所周知直接使用字符串进行+拼接性能是很低的，而使用strings.Builder则要好很多，在/tool/strings.go文件分别创建两个函数进行两种方式的字符串拼接。\",\"package tool import \\\"strings\\\" func ConcatStringDirect(longString string) { res := \\\"\\\" for i := 0; i < 100_000.; i++ { res += longString } } func ConcatStringWithBuilder(longString string) { var res strings.Builder for i := 0; i < 100_000.; i++ { res.WriteString(longString) } }\",\"然后创建测试文件/tool_test/bench_tool_test.go ，代码如下\",\"package tool_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) var longString = \\\"longStringlongStringlongStringlongStringlongStringlongStringlongStringlongString\\\" func BenchmarkConcatDirect(b *testing.B) { for i := 0; i < b.N; i++ { tool.ConcatStringDirect(longString) } } func BenchmarkConcatBuilder(b *testing.B) { for i := 0; i < b.N; i++ { tool.ConcatStringWithBuilder(longString) } }\",\"执行测试命令，命令中开启了详细日志和内存分析，指定了使用的CPU核数列表，且每个测试用例执行两轮，输出如下\",\"$ go test -v -benchmem -bench . -run bench_tool_test.go -cpu=2,4,8 -count=2 goos: windows goarch: amd64 pkg: golearn/tool_test cpu: 11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz BenchmarkConcatDirect BenchmarkConcatDirect-2 4 277771375 ns/op 4040056736 B/op 10000 allocs/op BenchmarkConcatDirect-2 4 278500125 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-4 1 1153796000 ns/op 4040068784 B/op 10126 allocs/op BenchmarkConcatDirect-4 1 1211017600 ns/op 4040073104 B/op 10171 allocs/op BenchmarkConcatDirect-8 2 665460800 ns/op 4040077760 B/op 10219 allocs/op BenchmarkConcatDirect-8 2 679774450 ns/op 4040080064 B/op 10243 allocs/op BenchmarkConcatBuilder BenchmarkConcatBuilder-2 3428 344530 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 3579 351858 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-4 2448 736177 ns/op 4128185 B/op 29 allocs/op BenchmarkConcatBuilder-4 1688 662993 ns/op 4128185 B/op 29 allocs/op BenchmarkConcatBuilder-8 1958 550333 ns/op 4128199 B/op 29 allocs/op BenchmarkConcatBuilder-8 2174 552113 ns/op 4128196 B/op 29 allocs/op PASS ok golearn/tool_test 21.381s\",\"下面解释一下基准测试的输出结果，goos代表是运行的操作系统，goarh代表的是CPU架构，pkg为测试所在的包，cpu是一些关于CPU的信息。下面的每一个测试用例的结果由每一个基准测试的名称分隔，第一列BenchmarkConcatDirect-2中的2代表了使用的CPU核数，第二列的4代表了代码中b.N的大小，也就是基准测试中的循环次数，第三列277771375 ns/op代表了每一次循环所消耗的时间，ns为纳秒，第四列4040056736 B/op表示每一次循环所分配内存的字节大小，第五列10000 allocs/op表示每一次循环内存分配的次数。\",\"很显然，根据测试的结果看来，使用strings.Builder的性能要远远高于使用+拼接字符串，通过直观的数据对比性能正是基准测试的目的所在。\"]},\"476\":{\"h\":\"benchstat\",\"t\":[\"benchstat是一个开源的性能测试分析工具，上述性能测试的样本数只有两组，一旦样本多了起来人工分析就会十分的费时费力，该工具便是为了解决性能分析问题而生。\",\"首先需要下载该工具\",\"$ go install golang.org/x/perf/benchstat\",\"分两次执行基准测试，这次将样本数修改为5个，并且分别输出到old.txt和new.txt文件以做对比，第一次执行结果\",\"$ go test -v -benchmem -bench . -run bench_tool_test.go -cpu=2,4,8 -count=5 | tee -a old.txt goos: windows goarch: amd64 pkg: golearn/tool_test cpu: 11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz BenchmarkConcatDirect BenchmarkConcatDirect-2 4 290535650 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 298974625 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 299637800 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 276487000 ns/op 4040056784 B/op 10001 allocs/op BenchmarkConcatDirect-2 4 356465275 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-4 2 894723200 ns/op 4040077424 B/op 10216 allocs/op BenchmarkConcatDirect-4 2 785830400 ns/op 4040078288 B/op 10225 allocs/op BenchmarkConcatDirect-4 2 743634000 ns/op 4040077568 B/op 10217 allocs/op BenchmarkConcatDirect-4 2 953802700 ns/op 4040075408 B/op 10195 allocs/op BenchmarkConcatDirect-4 2 953028750 ns/op 4040077520 B/op 10217 allocs/op BenchmarkConcatDirect-8 2 684023150 ns/op 4040086784 B/op 10313 allocs/op BenchmarkConcatDirect-8 2 634380250 ns/op 4040090528 B/op 10352 allocs/op BenchmarkConcatDirect-8 2 685030600 ns/op 4040090768 B/op 10355 allocs/op BenchmarkConcatDirect-8 2 817909650 ns/op 4040089808 B/op 10345 allocs/op BenchmarkConcatDirect-8 2 600078100 ns/op 4040095664 B/op 10406 allocs/op BenchmarkConcatBuilder BenchmarkConcatBuilder-2 2925 419651 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 2961 423899 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 2714 422275 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 2848 452255 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 2612 454452 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-4 974 1158000 ns/op 4128189 B/op 29 allocs/op BenchmarkConcatBuilder-4 1098 1068682 ns/op 4128192 B/op 29 allocs/op BenchmarkConcatBuilder-4 1042 1056570 ns/op 4128194 B/op 29 allocs/op BenchmarkConcatBuilder-4 1280 978213 ns/op 4128191 B/op 29 allocs/op BenchmarkConcatBuilder-4 1538 1162108 ns/op 4128190 B/op 29 allocs/op BenchmarkConcatBuilder-8 1744 700824 ns/op 4128203 B/op 29 allocs/op BenchmarkConcatBuilder-8 2235 759537 ns/op 4128201 B/op 29 allocs/op BenchmarkConcatBuilder-8 1556 736455 ns/op 4128204 B/op 29 allocs/op BenchmarkConcatBuilder-8 1592 825794 ns/op 4128201 B/op 29 allocs/op BenchmarkConcatBuilder-8 2263 717285 ns/op 4128203 B/op 29 allocs/op PASS ok golearn/tool_test 56.742s\",\"第二次执行结果\",\"$ go test -v -benchmem -bench . -run bench_tool_test.go -cpu=2,4,8 -count=5 | tee -a new.txt goos: windows goarch: amd64 pkg: golearn/tool_test cpu: 11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz BenchmarkConcatDirect BenchmarkConcatDirect-2 4 285074900 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 291517150 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 281901975 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 292320625 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 286723000 ns/op 4040056952 B/op 10002 allocs/op BenchmarkConcatDirect-4 1 1188983000 ns/op 4040071856 B/op 10158 allocs/op BenchmarkConcatDirect-4 1 1080713900 ns/op 4040070800 B/op 10147 allocs/op BenchmarkConcatDirect-4 1 1203622300 ns/op 4040067344 B/op 10111 allocs/op BenchmarkConcatDirect-4 1 1045291300 ns/op 4040070224 B/op 10141 allocs/op BenchmarkConcatDirect-4 1 1123163300 ns/op 4040070032 B/op 10139 allocs/op BenchmarkConcatDirect-8 2 790421300 ns/op 4040076656 B/op 10208 allocs/op BenchmarkConcatDirect-8 2 659047300 ns/op 4040079488 B/op 10237 allocs/op BenchmarkConcatDirect-8 2 712991800 ns/op 4040077184 B/op 10213 allocs/op BenchmarkConcatDirect-8 2 706605350 ns/op 4040078000 B/op 10222 allocs/op BenchmarkConcatDirect-8 2 656195700 ns/op 4040085248 B/op 10297 allocs/op BenchmarkConcatBuilder BenchmarkConcatBuilder-2 2726 386412 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 3439 335358 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 3376 338957 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 3870 326301 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 4285 339596 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-4 1663 671535 ns/op 4128187 B/op 29 allocs/op BenchmarkConcatBuilder-4 1507 744885 ns/op 4128191 B/op 29 allocs/op BenchmarkConcatBuilder-4 1353 1097800 ns/op 4128187 B/op 29 allocs/op BenchmarkConcatBuilder-4 1388 1006019 ns/op 4128189 B/op 29 allocs/op BenchmarkConcatBuilder-4 1635 993764 ns/op 4128189 B/op 29 allocs/op BenchmarkConcatBuilder-8 1332 783599 ns/op 4128198 B/op 29 allocs/op BenchmarkConcatBuilder-8 1818 729821 ns/op 4128202 B/op 29 allocs/op BenchmarkConcatBuilder-8 1398 780614 ns/op 4128202 B/op 29 allocs/op BenchmarkConcatBuilder-8 1526 750513 ns/op 4128204 B/op 29 allocs/op BenchmarkConcatBuilder-8 2164 704798 ns/op 4128204 B/op 29 allocs/op PASS ok golearn/tool_test 50.387s\",\"再使用benchstat进行对比\",\"$ benchstat old.txt new.txt goos: windows goarch: amd64 pkg: golearn/tool_test cpu: 11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz │ old.txt │ new.txt │ │ sec/op │ sec/op vs base │ ConcatDirect-2 299.0m ± ∞ ¹ 286.7m ± ∞ ¹ ~ (p=0.310 n=5) ConcatDirect-4 894.7m ± ∞ ¹ 1123.2m ± ∞ ¹ +25.53% (p=0.008 n=5) ConcatDirect-8 684.0m ± ∞ ¹ 706.6m ± ∞ ¹ ~ (p=0.548 n=5) ConcatBuilder-2 423.9µ ± ∞ ¹ 339.0µ ± ∞ ¹ -20.04% (p=0.008 n=5) ConcatBuilder-4 1068.7µ ± ∞ ¹ 993.8µ ± ∞ ¹ ~ (p=0.151 n=5) ConcatBuilder-8 736.5µ ± ∞ ¹ 750.5µ ± ∞ ¹ ~ (p=0.841 n=5) geomean 19.84m 19.65m -0.98% ¹ need >= 6 samples for confidence interval at level 0.95 │ old.txt │ new.txt │ │ B/op │ B/op vs base │ ConcatDirect-2 3.763Gi ± ∞ ¹ 3.763Gi ± ∞ ¹ ~ (p=1.000 n=5) ConcatDirect-4 3.763Gi ± ∞ ¹ 3.763Gi ± ∞ ¹ -0.00% (p=0.008 n=5) ConcatDirect-8 3.763Gi ± ∞ ¹ 3.763Gi ± ∞ ¹ -0.00% (p=0.008 n=5) ConcatBuilder-2 3.937Mi ± ∞ ¹ 3.937Mi ± ∞ ¹ ~ (p=1.000 n=5) ² ConcatBuilder-4 3.937Mi ± ∞ ¹ 3.937Mi ± ∞ ¹ ~ (p=0.079 n=5) ConcatBuilder-8 3.937Mi ± ∞ ¹ 3.937Mi ± ∞ ¹ ~ (p=0.952 n=5) geomean 123.2Mi 123.2Mi -0.00% ¹ need >= 6 samples for confidence interval at level 0.95 ² all samples are equal │ old.txt │ new.txt │ │ allocs/op │ allocs/op vs base │ ConcatDirect-2 9.999k ± ∞ ¹ 9.999k ± ∞ ¹ ~ (p=1.000 n=5) ConcatDirect-4 10.22k ± ∞ ¹ 10.14k ± ∞ ¹ -0.74% (p=0.008 n=5) ConcatDirect-8 10.35k ± ∞ ¹ 10.22k ± ∞ ¹ -1.26% (p=0.008 n=5) ConcatBuilder-2 29.00 ± ∞ ¹ 29.00 ± ∞ ¹ ~ (p=1.000 n=5) ² ConcatBuilder-4 29.00 ± ∞ ¹ 29.00 ± ∞ ¹ ~ (p=1.000 n=5) ² ConcatBuilder-8 29.00 ± ∞ ¹ 29.00 ± ∞ ¹ ~ (p=1.000 n=5) ² geomean 543.6 541.7 -0.33% ¹ need >= 6 samples for confidence interval at level 0.95 ² all samples are equal\",\"从结果中可以看出benchstat将其分为了三组，分别是耗时，内存占用和内存分配次数，其中geomoean为平均值，p为 样本的显著性水平，临界区间通常为0.05，高于0.05就不太可信，取其中一条数据如下：\",\" │ sec/op │ sec/op vs base │ ConcatDirect-4 894.7m ± ∞ ¹ 1123.2m ± ∞ ¹ +25.53% (p=0.008 n=5)\",\"可以看到old执行耗时为894.7ms，new执行耗时1123.2ms，相比之下还增加了25.53%的耗时。\"]},\"477\":{\"h\":\"模糊测试\",\"t\":[\"模糊测试是GO1.18推出的一个新功能，属于是单元测试和基准测试的一种增强，区别在于前两者的测试数据都需要开发者手动编写，而模糊测试可以通过语料库来生成随机的测试数据，关于Go中的模糊测试可以前往Go Fuzzing来了解更多概念。模糊测试的好处在于，相比于固定的测试数据，随机数据可以更好的测试程序的边界条件。下面拿官方教程的例子来讲解，这次需要测试的是一个反转字符串的函数，首先创建文件/tool/strings.go，写入如下代码\",\"package tool func Reverse(s string) string { b := []byte(s) for i, j := 0, len(b)-1; i < len(b)/2; i, j = i+1, j-1 { b[i], b[j] = b[j], b[i] } return string(b) }\",\"创建模糊测试文件/tool_test/fuzz_tool_test.go，写入如下代码\",\"package tool import ( \\\"golearn/tool\\\" \\\"testing\\\" \\\"unicode/utf8\\\" ) func FuzzReverse(f *testing.F) { testdata := []string{\\\"hello world!\\\", \\\"nice to meet you\\\", \\\"good bye!\\\"} for _, data := range testdata { f.Add(data) } f.Fuzz(func(t *testing.T, str string) { first := tool.Reverse(str) second := tool.Reverse(first) t.Logf(\\\"str:%q,first:%q,second:%q\\\", str, first, second) if str != second { t.Errorf(\\\"before: %q, after: %q\\\", str, second) } if utf8.ValidString(str) && !utf8.ValidString(first) { t.Errorf(\\\"Reverse produced invalid UTF-8 string %q %q\\\", str, first) } }) }\",\"在模糊测试中，首先需要给语料种子库添加数据，示例中使用f.Add()来添加，有助于后续生成随机的测试数据。然后使用f.Fuzz(fn)来进行测试，函数签名如下：\",\"func (f *F) Fuzz(ff any) func (f *F) Add(args ...any)\",\"fn就类似于一个单元测试函数的逻辑，函数的第一个入参必须是t *testing.T，其后跟想要生成的参数。由于传入的字符串是不可预知的，这里采用反转两次的方法来进行验证。执行如下命令\",\"$ go test -run Fuzz -v === RUN FuzzReverse === RUN FuzzReverse/seed#0 fuzz_tool_test.go:18: str:\\\"hello world!\\\",first:\\\"!dlrow olleh\\\",second:\\\"hello world!\\\" === RUN FuzzReverse/seed#1 fuzz_tool_test.go:18: str:\\\"nice to meet you\\\",first:\\\"uoy teem ot ecin\\\",second:\\\"nice to meet you\\\" === RUN FuzzReverse/seed#2 fuzz_tool_test.go:18: str:\\\"good bye!\\\",first:\\\"!eyb doog\\\",second:\\\"good bye!\\\" --- PASS: FuzzReverse (0.00s) --- PASS: FuzzReverse/seed#0 (0.00s) --- PASS: FuzzReverse/seed#1 (0.00s) --- PASS: FuzzReverse/seed#2 (0.00s) PASS ok golearn/tool_test 0.539s\",\"当参数不带-fuzz时，将不会生成随机的测试数据，只会给测试函数传入语料库中的数据，可以从结果中看到测试全部通过了，这样使用就等同于单元测试，但其实是有问题的，下面加上-fuzz参数再次执行。\",\"$ go test -fuzz . -fuzztime 30s -run Fuzz -v === RUN FuzzReverse fuzz: elapsed: 0s, gathering baseline coverage: 0/217 completed fuzz: minimizing 91-byte failing input file fuzz: elapsed: 0s, gathering baseline coverage: 15/217 completed --- FAIL: FuzzReverse (0.13s) --- FAIL: FuzzReverse (0.00s) fuzz_tool_test.go:18: str:\\\"𐑄\\\",first:\\\"\\\\x84\\\\x91\\\\x90\\\\xf0\\\",second:\\\"𐑄\\\" fuzz_tool_test.go:23: Reverse produced invalid UTF-8 string \\\"𐑄\\\" \\\"\\\\x84\\\\x91\\\\x90\\\\xf0\\\" Failing input written to testdata\\\\fuzz\\\\FuzzReverse\\\\d856c981b6266ba2 To re-run: go test -run=FuzzReverse/d856c981b6266ba2 === NAME FAIL exit status 1 FAIL golearn/tool_test 0.697s\",\"提示\",\"模糊测试中失败的用例会输出到当前测试文件夹下的testdata目录下的某个语料文件中，例如上述例子中的\",\"Failing input written to testdata\\\\fuzz\\\\FuzzReverse\\\\d856c981b6266ba2 To re-run: go test -run=FuzzReverse/d856c981b6266ba2\",\"testdata\\\\fuzz\\\\FuzzReverse\\\\d856c981b6266ba2便是输出的语料文件路径，文件的内容如下\",\"go test fuzz v1 string(\\\"𐑄\\\")\",\"可以看到这一次并没有通过，原因是字符串反转后变成了非utf8格式，所以通过模糊测试就发现了这个问题所在。由于一些字符占用并不止一个字节，如果将其以字节为单位反转后肯定是乱码，所以将待测试的源代码修改为如下，将字符串转换为[]rune，这样就可以避免出现上述问题。\",\"func Reverse(s string) string { r := []rune(s) for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 { r[i], r[j] = r[j], r[i] } return string(r) }\",\"接下来直接运行根据上次模糊测试失败的用例\",\"$ go test -run=FuzzReverse/d856c981b6266ba2 -v === RUN FuzzReverse === RUN FuzzReverse/d856c981b6266ba2 fuzz_tool_test.go:18: str:\\\"𐑄\\\",first:\\\"𐑄\\\",second:\\\"𐑄\\\" --- PASS: FuzzReverse (0.00s) --- PASS: FuzzReverse/d856c981b6266ba2 (0.00s) PASS ok golearn/tool_test 0.033s\",\"可以看到这一次通过了测试，再次执行模糊测试看看还有没有问题\",\"$ go test -fuzz . -fuzztime 30s -run Fuzz -v === RUN FuzzReverse fuzz: elapsed: 0s, gathering baseline coverage: 0/219 completed fuzz: minimizing 70-byte failing input file failure while testing seed corpus entry: FuzzReverse/d97214ce235bfcf5 fuzz: elapsed: 0s, gathering baseline coverage: 2/219 completed --- FAIL: FuzzReverse (0.15s) --- FAIL: FuzzReverse (0.00s) fuzz_tool_test.go:18: str:\\\"\\\\xe4\\\",first:\\\"�\\\",second:\\\"�\\\" fuzz_tool_test.go:20: before: \\\"\\\\xe4\\\", after: \\\"�\\\" === NAME FAIL exit status 1 FAIL golearn/tool_test 0.184s\",\"可以发现又出错了，这次的问题是对字符串做了两次反转后不相等，原字符为\\\\xe4，期望的结果是4ex\\\\ ，但结果是乱码，如下\",\"func main() { fmt.Println(\\\"\\\\xe4\\\") fmt.Println([]byte(\\\"\\\\xe4\\\")) fmt.Println([]rune(\\\"\\\\xe4\\\")) fmt.Printf(\\\"%q\\\\n\\\", \\\"\\\\xe4\\\") fmt.Printf(\\\"%x\\\\n\\\", \\\"\\\\xe4\\\") }\",\"它的执行结果是\",\"� [65533] \\\"\\\\xe4\\\" e4\",\"究其原因在于Go在字符串单位是字节，而不是字符。所以再次修改待测源代码，如果传入的是非utf8字符串，直接返回错误。\",\"func Reverse(s string) (string, error) { if !utf8.ValidString(s) { return s, errors.New(\\\"input is not valid UTF-8\\\") } r := []rune(s) for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 { r[i], r[j] = r[j], r[i] } return string(r), nil }\",\"测试代码也需要稍作修改\",\"func FuzzReverse(f *testing.F) { testdata := []string{\\\"hello world!\\\", \\\"nice to meet you\\\", \\\"good bye!\\\"} for _, data := range testdata { f.Add(data) } f.Fuzz(func(t *testing.T, str string) { first, err := tool.Reverse(str) if err != nil { t.Skip() } second, err := tool.Reverse(first) if err != nil { t.Skip() } t.Logf(\\\"str:%q,first:%q,second:%q\\\", str, first, second) if str != second { t.Errorf(\\\"before: %q, after: %q\\\", str, second) } if utf8.ValidString(str) && !utf8.ValidString(first) { t.Errorf(\\\"Reverse produced invalid UTF-8 string %q %q\\\", str, first) } }) }\",\"当反转函数返回error时，就跳过测试，再来进行模糊测试\",\"$ go test -fuzz . -fuzztime 30s -run Fuzz -v === RUN FuzzReverse fuzz: elapsed: 0s, gathering baseline coverage: 0/219 completed fuzz: elapsed: 0s, gathering baseline coverage: 219/219 completed, now fuzzing with 16 workers fuzz: elapsed: 3s, execs: 895571 (297796/sec), new interesting: 32 (total: 251) fuzz: elapsed: 6s, execs: 1985543 (363120/sec), new interesting: 37 (total: 256) fuzz: elapsed: 9s, execs: 3087837 (367225/sec), new interesting: 38 (total: 257) fuzz: elapsed: 12s, execs: 4090817 (335167/sec), new interesting: 40 (total: 259) fuzz: elapsed: 15s, execs: 5132580 (346408/sec), new interesting: 44 (total: 263) fuzz: elapsed: 18s, execs: 6248486 (372185/sec), new interesting: 45 (total: 264) fuzz: elapsed: 21s, execs: 7366827 (373305/sec), new interesting: 46 (total: 265) fuzz: elapsed: 24s, execs: 8439803 (358059/sec), new interesting: 47 (total: 266) fuzz: elapsed: 27s, execs: 9527671 (361408/sec), new interesting: 47 (total: 266) fuzz: elapsed: 30s, execs: 10569473 (348056/sec), new interesting: 48 (total: 267) fuzz: elapsed: 30s, execs: 10569473 (0/sec), new interesting: 48 (total: 267) --- PASS: FuzzReverse (30.16s) === NAME PASS ok golearn/tool_test 30.789s\",\"然后这次就可以得到一个比较完整的模糊测试输出日志，其中一些概念的解释如下：\",\"elapsed: 一个轮次完成后已经流逝的时间\",\"execs: 运行的输入总数，297796/sec表示多少个输入每秒\",\"new interesting: 在测试中，已经添加语料库中的”有趣“输入的总数。（有趣的输入指的是该输入能够将代码覆盖率扩大到现有语料库所能覆盖的范围之外，随着覆盖范围的不断扩大，它的增长趋势总体上而言会持续变缓）\",\"提示\",\"如果没有-fuzztime参数限制时间，模糊测试将会永远的运行下去。\"]},\"478\":{\"h\":\"类型支持\",\"t\":[\"Go Fuzz中的支持的类型如下：\",\"string, []byte\",\"int, int8, int16, int32/rune, int64\",\"uint, uint8/byte, uint16, uint32, uint64\",\"float32, float64\",\"bool\"]},\"479\":{\"h\":\"单元测试基础必备\"},\"480\":{\"h\":\"01、概述\",\"t\":[\"测试旨在发现 bug，而不是证明其不存在。一个工程质量良好的项目，一定会有充分的单元测试和合理的测试覆盖率，单元测试就是业务逻辑。\",\"go test 命令用来对程序进行测试。\"]},\"481\":{\"h\":\"规则\",\"t\":[\"在一个目录中，以 _test.go 结尾的文件是 go test 编译的目标，go build 将会自动忽略。go test 工具扫描以 _test.go 结尾的文件来寻找特殊函数，并生成一个临时的 main 包来编译和运行，最后清除过程中产生的临时文件。\"]},\"482\":{\"h\":\"常用规则:\",\"t\":[\"运行当前目录对应的包下面某个测试用例: go test run='^Pattern$'，其中单引号中为正则表达式\",\"运行当前目录下的测试用例: go test .\",\"运行子目录下的测试用例: go test ./package_name\",\"运行当前目录以及所有子目录下的测试用例: go test ./...\"]},\"483\":{\"h\":\"四种函数\",\"t\":[\"在以 _test.go 结尾的文件中，一共有 4 种类型的函数:\",\"功能测试函数: Test 前缀命名，用来测试程序逻辑的正确性\",\"基准测试函数: Benchmark 前缀命名，用来测试程序的性能\",\"示例函数: Example 前缀命名，用来提供文档\",\"模糊测试函数: Fuzz 前缀命名，用来提供自动化测试技术\"]},\"484\":{\"h\":\"02、功能测试\",\"t\":[\"为了简化演示代码的复杂性，这里直接将测试函数写在 main.go 文件。\"]},\"485\":{\"h\":\"常用参数\"},\"486\":{\"h\":\"count\",\"t\":[\"运行测试的次数，默认为 1。\",\"多次运行 go test 命令，可以看到输出的结果中有了一个 (cache) 标识\",\"$ go test . ok helloworld (cached) $ go test . ok helloworld (cached) $ go test . ok helloworld (cached)\",\"这是因为源文件 main.go 和测试文件 main_test.go 都未发生变化，所以这里直接读取了测试的缓存结果。 通过使用参数 -count=1 可以达到 \\\"禁用缓存\\\" 的效果。\",\"$ go test -count=1 . # 输出如下 ok helloworld 0.001s\"]},\"487\":{\"h\":\"v\",\"t\":[\"输出测试运行的详细信息。\",\"$ go test -v . # 输出如下 === RUN Test_sum --- PASS: Test_sum (0.00s) PASS ok helloworld 0.001s # 配合 -count 使用 $ go test -v -count=3 . # 输出如下 === RUN Test_sum --- PASS: Test_sum (0.00s) === RUN Test_sum --- PASS: Test_sum (0.00s) === RUN Test_sum --- PASS: Test_sum (0.00s) PASS ok helloworld 0.002s\",\"通过使用参数 -v, 可以从输出结果中清晰地看到每个测试用例的运行情况。\"]},\"488\":{\"h\":\"timeout\",\"t\":[\"测试运行超时时间，默认为 10 分钟。\"]},\"489\":{\"h\":\"run\",\"t\":[\"运行特定的测试函数，比如 -run sum 只测试函数名称中包含 sum 的函数。\"]},\"490\":{\"h\":\"普通测试方法\"},\"491\":{\"h\":\"测试未通过\",\"t\":[\"首先写一个空方法，不实现具体的功能，来演示 测试未通过。\",\"创建 main.go 文件，将如下代码写入:\",\"package main func sum(numbers ...int) int { return 0 } func main() { }\",\"创建 main_test.go 文件，将如下代码写入:\",\"package main import \\\"testing\\\" // 引入 testing 包 func Test_sum(t *testing.T) { // 功能测试以 `Test` 前缀命名 if v := sum(); v != 0 { // t.Errorf 类似fmt.Printf() t.Errorf(\\\"sum() = %v, want %v\\\", v, 0) } if v := sum(1); v != 1 { t.Errorf(\\\"sum() = %v, want %v\\\", v, 1) } if v := sum(1, 2, 3); v != 6 { t.Errorf(\\\"sum() = %v, want %v\\\", v, 6) } }\",\"使用 go test 命令运行测试\",\"$ go test . # 输出如下 --- FAIL: Test_sum (0.00s) main_test.go:12: sum() = 0, want 1 main_test.go:16: sum() = 0, want 6 FAIL FAIL helloworld 0.001s FAIL\",\"通过输出可以看到测试失败了，主要原因在于 sum 函数的实现，接下来我们修正 sum 函数。\"]},\"492\":{\"h\":\"修正失败用例\",\"t\":[\"将如下代码写入 main.go 文件:\",\"package main func sum(numbers ...int) int { total := 0 for _, n := range numbers { total += n } return total } func main() { }\"]},\"493\":{\"h\":\"测试通过\",\"t\":[\"使用 go test 命令运行测试\",\"$ go test . # 输出如下 ok helloworld 0.001s\"]},\"494\":{\"h\":\"基于表的测试用例\",\"t\":[\"在刚才的测试方法中，只写了 3 个测试用例，却写了 3 个不同的 if 语句，如果测试用例有几十上百个，那这种方法显然太不灵活了。 仔细观察 3 个 if 语句会发现除了参数有变化外， 其他部分都是一样的的，这时候就可以将相同的部分剥离出来，进行合并。\",\"将如下代码写入 main_test.go 文件:\",\"package main import \\\"testing\\\" // 引入 testing 包 func Test_sum(t *testing.T) { // 功能测试以 `Test` 前缀命名 tests := []struct { numbers []int // 将可变参数转换为一个切片 want int // 正确的返回值，用于和结果进行比较 }{ { []int{}, 0, }, { []int{1}, 1, }, { []int{1, 2, 3}, 6, }, } for _, tt := range tests { if got := sum(tt.numbers...); got != tt.want { // t.Errorf 类似fmt.Printf() t.Errorf(\\\"sum() = %v, want %v\\\", got, tt.want) } } }\",\"$ go test -v . # 输出如下 === RUN Test_sum --- PASS: Test_sum (0.00s) PASS ok helloworld 0.001s\",\"在上述代码中，将 3 个测试用例合并到了一起，这样断言部分就只剩下 1 个 if 语句了，最重要的是，如果以后需要对测试用例增加/修改/删除， 仅需修改 tests 结构体切片就可以，其余部分无需改动。\",\"比如可以增加一个负数测试用例，只需要追加一个结构体即可:\",\"{ []int{}, 0, }, ... ... { []int{-1, -2, -3}, -6, },\"]},\"495\":{\"h\":\"测试失败时终止\",\"t\":[\"默认情况下，所有测试用例都是独立的，如果其中一个用例测试失败，其他用例会继续运行测试，这样可以捕获到所有的失败测试用例。 如果希望测试失败时终止测试，可以将 t.Errorf() 函数更换为 t.Fatalf()。\"]},\"496\":{\"h\":\"03、基准测试\",\"t\":[\"默认情况下，不会运行任何基准测试，参数 -bench 指定要运行的基准测试。\"]},\"497\":{\"h\":\"常用参数:\",\"t\":[\"benchtime 表示时间或运行次数，比如 -benchtime=10s 表示基准测试运行 10 秒，-benchtime=100x 表示基准测试运行 100 次\",\"benchmem 统计内存分配情况\",\"cpuprofile CPU 性能剖析 -cpuprofile=cpu.out\",\"memprofile=$FILE 内存 性能剖析 -memprofile=mem.out\",\"blockprofile=$FILE 阻塞 性能剖析 blockprofile=block.out\"]},\"498\":{\"h\":\"基准测试用例\",\"t\":[\"将如下代码追加到 main_test.go 文件中:\",\"func Benchmark_sum(b *testing.B) { for i := 0; i < b.N; i++ { // b.N 表示测试用例运行的次数 sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) } }\",\"# 运行基准测试 $ go test -v -bench=. # 输出如下 === RUN Test_sum --- PASS: Test_sum (0.00s) goos: linux goarch: amd64 pkg: helloworld cpu: Intel(R) Core(TM) i5-8300H CPU @ 2.30GHz Benchmark_sum Benchmark_sum-8 305606659 4.020 ns/op PASS ok helloworld 1.631s\",\"输出结果中的 Benchmark_sum-8 表示 GOMAXPROCS 的值为 8，也就是默认的 CPU 核数，这个值会影响到并发测试结果。 可以通过 -cpu 参数改变 GOMAXPROCS，-cpu 支持传入一个列表作为参数，如 -cpu=2,4。 除此之外，结果中还给出了相关的时间数据: 测试总用时 1.631 秒，sum 函数调用耗费 4.020 纳秒 (305606659 次调用的平均值),\",\"因为基准测试运行器起初并不了解函数调用的具体耗时，所以 b.N 的值从一个小的数字慢慢增长到足够大的数字，直到能检测到稳定的调用耗时。 一般来说，b.N 的值从 1 开始，如果该用例能够在 1s 内完成，b.N 的值便会增加继续执行，越往后面，每次增加的值越大。\"]},\"499\":{\"h\":\"ResetTimer\",\"t\":[\"如果在 Benchmark 运行开始前，需要一些初始化准备工作 (例如初始化一些配置信息)，可以调用 ResetTimer 方法忽略掉这部分工作，不计入基准测试耗时中。\",\"func Benchmark_sum(b *testing.B) { time.Sleep(time.Second * 3) // 模拟耗时准备任务, 这个时间不会被计入基准测试耗时 b.ResetTimer() // 重置定时器 for i := 0; i < b.N; i++ { // b.N 表示测试用例运行的次数 sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) } }\"]},\"500\":{\"h\":\"StartTimer, StopTimer\",\"t\":[\"除了函数的初始化操作外，还有一种场景是: 函数每次调用前需要一些工作 (例如创建一些资源)，调用后需要一些工作 (例如关闭和释放这些资源)， 这两者的耗时同样不应该计入基准测试耗时中。\",\"func Benchmark_sum(b *testing.B) { b.StopTimer() time.Sleep(time.Second) // 模拟创建资源耗时 b.StartTimer() for i := 0; i < b.N; i++ { // b.N 表示测试用例运行的次数 sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) } b.StopTimer() time.Sleep(time.Second) // 模拟释放资源耗时 b.StartTimer() }\"]},\"501\":{\"h\":\"04、示例函数\",\"t\":[\"示例函数没有参数和返回值，可以给 sum 函数新增一个 示例函数 作为文档，例如像下面这个例子一样。\",\"func Example_sum() { fmt.Println(sum(0)) fmt.Println(sum(1, 2, 3)) // Output: // 0 // 6 }\"]},\"502\":{\"h\":\"三个作用\",\"t\":[\"文档 (主要目的)\",\"可以通过 go test 运行的可执行测试 \",\"如果示例函数内含有类似上面例子中的 // Output: 格式的注释，测试工具会执行示例函数，然后检查标准输出与示例函数的注释是否匹配。\",\" # 例如将 `// Output:` 改为如下代码: Output: 0 66 # 运行测试 $ go test -v -count=1 . # 输出如下，报错了 === RUN Test_sum --- PASS: Test_sum (0.00s) === RUN Example_sum --- FAIL: Example_sum (0.00s) got: 0 6 want: 0 66 FAIL FAIL helloworld 0.002s FAIL\",\"提供手动实验代码 \",\"http://golang.org 是由 godoc 提供的文档服务，使用了 Go Playground 让用户可以在浏览器中在线编辑和运行每个示例函数。\"]},\"503\":{\"h\":\"先编译出 .test 文件\",\"t\":[\"使用场景\",\"这台机器上编译，另一个地方跑单测；\",\"debug 单测程序；\",\"go test -c -o example.test # 运行 ./example.test # 指定运行某一个文件 -test.timeout=10m0s -test.v=true -test.run=TestPutAndGetKeyValue\"]},\"504\":{\"h\":\"最佳实践\",\"t\":[\"测试用例失败时，应该输出有用的内容: 错误信息，输出参数，返回值以及正确的返回值\",\"测试用例修复后，应该运行所有测试，确保没有引入新的问题 - 回归测试\",\"测试代码中不要调用 log.Fatal, os.Exit, 因为这两个调用会阻止跟踪过程(一般来说，这两个函数只在 main 函数中调用)\",\"测试不应该在失败时终止，而是要在一次运行中尝试报告多个错误，因为错误发生的方式本身会揭露错误的原因\",\"测试真正需要关心的数据，保持测试代码的简洁和内部结构的稳定性\"]},\"505\":{\"h\":\"05、小结\",\"t\":[\"本小节介绍了 Go 测试的 3 中相关函数: 功能测试函数, 基准测试函数, 示例函数 (模糊测试后面会单独讲)，还有几个常用的测试参数。 功能测试函数结果分为两种: ok, pass (通过), FAIL (测试未通过)，基准测试函数会输出程序耗时相关数据，示例函数可以作为文档， 同时可以通过添加 // Output: 注释来提供精确的函数返回值或输出结果，并在 go test 命令运行时自动对注释进行测试校验， 保证了调用方看到的文档示例中的输出结果一定是正确的。\",\"题外话: 笔者在第一次了解到 // Output: 这个功能时，不得不惊叹于 Go 的工程化设计，细节决定成败。\"]},\"506\":{\"h\":\"Reference\",\"t\":[\"Go 圣经\"]},\"507\":{\"h\":\"基础面试\"},\"508\":{\"h\":\"语法基础的使用强化\"},\"509\":{\"h\":\"循环控制-for\",\"t\":[\"三种用法：常规、for range （语法糖使用最多，用于可遍历的类型）、死循环（一般在通道使用）\",\"结合break和continue控制循环\",\"注意：for range来遍历如切片、map、数组等等底层会调用len函数判断这个类型的长度，若是切片大小为0会直接跳过\"]},\"510\":{\"h\":\"字符串string\",\"t\":[\"没啥特别的简单描述一下吧\",\"普通字符串：\\\"xxx\\\" 单行写，支持转义\",\"原生字符串：使用反引号 支持多行写，但不支持转义\",\"注意\",\"本质是字节数组，可按索引访问、遍历、‘+’拼接\",\"下面引用类型初始化一般直接使用make函数\"]},\"511\":{\"h\":\"切片slice\",\"t\":[\"使用只要知道是可变长数组，底层是需要优化再考虑\",\"初始化\",\"// 推荐使用make内建函数 arr := make([]int,0,0) // 可直接使用 arr := []int{1,2,3} //短声明可直接使用 var arr []int //显式声明，不能直接使用需要初始化 arr := new([]int) //只分配内存，没有初始化，不能使用\",\"使用\",\"// 添加append函数、切割、结合前面完成删除、拷贝copy函数(引用类型赋值底层直接就是同一个)、for循环 // ppend函数添加元素，超出会自动扩容 arr := make([]int,0,0) arr = append(arr,1,2,3,4,5) // 切割使用: 左右是索引值，注意是左闭右开 arr = arr[1:4] //切割遵循左闭右开，即索引取值为1-3. arr:2,3,4 // 切片是引用类型，直接赋值底层是同一个数组，使用copy函数解决浅拷贝 arrC := make([]int,0,0) boolVule := copy(arrC,arr) // 可以直接使用for range来遍历 for k,v := range arrC{ arrC[k] = 6 } // 注意for range底层会判断大小决定遍历次数，大小为0直接会跳过 arrD:= make([]int,0,10) for k,v := range arrD { fmt.Println(\\\"这个遍历会进入这里吗？为什么？\\\") } // 字符串转字符切片 noC := \\\"www.baidu.com\\\" converStr := []byte(noC) ...转字节切片后进行处理(字节存储的是ascll码) aimStr := string(converStr) haveC := \\\"hell,世界\\\" converStr2 := []rune(haveC) ...rune切片中rune是int32可以存储中文这个3个字节的大小 中文是需要3字节大小，而标准的utf-8是4字节，为此需要使用4字节来处理中文字符串问题 然后rune其实是int32别名，大小就是4字节大小\",\"底层原理\",\"切片底层很简单的数据结构：数组地址、大小、容量\"]},\"512\":{\"h\":\"映射map\",\"t\":[\"golang的map是基于哈希桶，是一种无序map（具体原理看下面原理部分，这里只说使用）\",\"// 初始化：短变量声明 或 make函数 mapInt := map[int]string { 0:\\\"hello\\\", 1:\\\" \\\", 3:\\\"world\\\", } mapInt := make(map[int]string) // 增/改 用法和数组一样 mapInt[4] = \\\"!\\\" // 删 使用内置函数delete（map,key） delete(mapInt,4) // 取 str := mapInt[0] // 遍历 for key,value := range mapInt {} // 注意：golang有个math.NaN()是特殊的浮点数值（但不是数值），用来表示未定义或不可表示的值，这个作为值可存储多个值，但是没法删除\",\"注意：map是非并发安全，在并发操作时候需要用锁或者sync.map结构体来替代使用，具体看原理部分\"]},\"513\":{\"h\":\"结构体\",\"t\":[\"一种复合类型，用于存储一组不同的数据类型，弱化了面向对象的功能不属于传统的OOP语言，但是OOP的影子，通过结构体和方法组合模拟一个类出来\",\"// 声明 type Person struct{ Name string Age int } // 实例化 (可省略字段名，但是可读性差，不推荐) xiaoming := Person{ Name:\\\"xiaoming\\\", Age:20 } // 可使用一个函数来实例化一个对象 func NewPerson (name string,age int) *person { return &Person{Name:name,Age:age} } // go不支持函数方法的重载，就无法同一个函数定义不同的参数，要么定义多个上面的构造方法，要么使用选项模型（扩展性强避免多个构造函数，可读性代码维护性强） //---------------------------------------------------------------------- //选项模型：定义一个目标对象、定义选项类型为函数，设置动态属性、构造函数接收可变参数逐一应用 type PersonOptions func(*Persion) func WithName(name string) PersonOptions{ return func(p *Person){ p.Name = name } } func WithAge(age int) PersonOptions{ return func(p *Person){ p.Age = age } } func NewPerson(options ...PersonOptions) *Person{ p := &Person{} for _,option := range options{ option(p) } } //---------------------------------------------------------------------- // 组合，结构体支持组合 type student struct{ Person ID int32 grade int } // 指针，在结构体不需要解引用就可直接使用(编译会自动将p转为*p) p := &Person{Name:\\\"xiaohong\\\",Age:19} fmt.Println(p.Age) // ==标签tag==，在各种序列化中取别名，结合反射可以实现很多功能，比如结构体转json，转mysql字段，比如下面这个两个tag一个结合反射转为json结构体，一个是gorm中转为sql语句 type Person struct{ Name string `json:\\\"name\\\" gorm:\\\"not null ; index; comment:名字\\\"` }\",\"内存对齐\",\"内存对齐其实是合理排列结构体布局减少内存浪费\",\"为什么对齐？\",\"提升性能：数据跟数据总线同宽，可提升效率。\",\"兼容平台：有些没有对齐会报错，go直接全部要求分配内存时要内存对齐。\",\"对齐缺点：\",\"内存浪费：可能会引入额外的填充字节。为此开发需要了解内存对齐来手动布局来优化\",\"规则（参考数据类型和硬件）\",\"数据大小：基础数据类型是其大小的整数倍，而结构体是最大对齐系数的整数倍\",\"硬件限制：如X86架构有32位和64位，对于32位只有4字节为此对齐系数只是4\",\"对齐方式 -- 根据对齐规则可知道每一种数据结构的最大对齐系数，即偏移量是系数的整数倍\",\"// 64位设备上最大支持8字节 type temp1 struct{ a int8 // 1 字节 从偏移量0开始 b int64 // 8 字节 从偏移量8开始 c int32 // 4 字节 从偏移量16开始 } // temp1对齐系数是8，然后每一个数据类型都是其对齐系数的整数倍 // unsafe.Sizeof()--查询结构体占多大内存 // unsafe.Alignof()--查询结构体的某个数据类型大小 // unsafe.Offsetof()--查询结构体的某个数据的偏移量\",\"总结：内存对齐规则是由编译器决定的，我们需要知道规则然后优化结构体体排序，减少内存的浪费\",\"空结构体\",\"空结构体不占内存空间。一般使用场景有：\",\"map的键值对的键是唯一的，将值设置空结构体，就是set结构体（无序且无重复的对象）\",\"最为chan的类型，当做一个通知类型的通道\"]},\"514\":{\"h\":\"函数\",\"t\":[\"作为一等公民，函数是Go最基础的组成部分，也是Go的核心，也是作为数据类型使用很灵活，注意一下闭包和延迟调用即可\",\"// 初始化 func 函数名 ([参数])([返回值]){ 函数体 } func2 := 函数名 // 参数或返回值可以直接定义类型，可不写参数名或返回值类型 函数也可以当做参数,而且可以是一个匿名函数，甚至匿名函数后加括号表示运行后的结果作为参数\",\"闭包\",\"闭包的基础：函数作为一等公民（可做参数、返回值、赋值给变量）+捕获变量发生逃逸（可在多次调用都可保持其状态）\",\"一般是普通函数结合匿名函数\",\"func counter() func() int { count := 0 // 外部变量 return func() int { count++ // 闭包引用并修改 count return count } } 坑：捕获的是变量的引用而不是值，如for循环的i时，最终得到的数据是i最大的值，解决这个问题将这个复制到闭包内的局部变量即可\",\"总结：就是利用捕获变量进行逃逸到堆上，后续可保持状态的特性，可以巧妙完成很多东西比如求斐波那契数列等等。但是问题也是明显逃逸的话会造成GC压力，为此要合理设计\",\"延迟调用\",\"go中使用关键字**defer **将函数调用注册为延迟执行，可实现延迟函数在当前函数返回之前执行，特别适合用于：清理资源、关闭文件、解锁、捕获错误并恢复等场景\",\"特点：\",\"注册时候立即求值参数，即函数的参数会立即求值，但函数本身会延迟执行（坑位！！）\",\"按栈顺序执行\",\"file, err := os.Open(\\\"test.txt\\\") if err != nil { fmt.Println(\\\"Error:\\\", err) return } defer file.Close() // 延迟关闭文件 mu.Lock() defer mu.Unlock() // 确保互斥锁在函数退出时解锁 //------------------------捕获painc--------------------------- defer func() { if r := recover(); r != nil { fmt.Println(\\\"Recovered from panic:\\\", r) } }() fmt.Println(\\\"Before panic\\\") panic(\\\"Something went wrong!\\\") // 触发 panic fmt.Println(\\\"After panic\\\") // 不会执行 捕获异常使用defer结合recover使用\",\"总结\",\"defer 的核心功能：将某些操作（如资源清理、解锁等）延迟到函数退出时执行。\",\"参数求值时机：在 defer 注册时完成，而非延迟执行时。\",\"执行顺序：按后进先出的顺序执行延迟调用。\",\"适用场景： \",\"资源清理（如文件关闭、互斥锁解锁）。\",\"错误捕获和恢复。\",\"统一代码逻辑，避免重复清理代码。\"]},\"515\":{\"h\":\"方法\",\"t\":[\"和函数的区别是方法是有接受者的（两种方式），只是定义规范没有具体实现且只是自定义类型才有方法\",\"接受者方式\",\"值接收者\",\"// 特点：方法会接收类型的一个副本，对副本的修改不会影响原值 // 适用场景：不用修改接受者内部的值、接收者是小数据结构（拷贝成本低） type Rectangle struct { Width, Height int } // 尝试修改接收者内部值 func (r Rectangle) Modify() { r.Width = 100 r.Height = 100 } func main() { rect := &Rectangle{Width: 10, Height: 20} rect.Modify() // 自动解引用，并调用方法 fmt.Println(\\\"After Modify:\\\", rect) // rect 未修改，输出 {10 20} } 注意：rect.Modify()可直接用指针来调用值的方法，是因为go会自动解引用\",\"指针接收者\",\"// 方法接收的是类型的指针，可以直接修改接收者的字段值 // 适用场景：需要修改接收者的值、接收者是较大的数据结构（拷贝成本高） type Rectangle struct { Width, Height int } // 指针接收者的方法 func (r *Rectangle) Scale(factor int) { r.Width *= factor r.Height *= factor } func main() { rect := Rectangle{Width: 10, Height: 20} rect.Scale(2) // 调用指针接收者方法 fmt.Println(\\\"After Scale:\\\", rect) // rect 被修改，输出 {20 40} } 注意：rect.Scale(2)用值来调用而不是(*rect).Scale(2)这样的指针,是因为go会自动转换为指针\",\"注意：go的自动转换的行为（将接收者类型自动转换为指或指针），为此两者方法调用都是可行的\",\"总结：大多数情况下，推荐使用指针接收者，传递指针消耗的资源会更小。然后就是两者不推荐混用（混用时IDEA工具也会提示），要么全部值类型要么全部指针类型，不然会有坑，如下面\",\"type Animal interface { Run() } type Dog struct {} func (d *Dog) Run() { // Dog 类型实现了 Run 方法,而这里用指针来接收 fmt.Println(\\\"Run\\\") } func main() { var a Animal dog := Dog{} // Dog 类型 a = dog // 编译错误：Dog does not implement Animal (Run method has pointer receiver) // 正确做法是：a = &dog 与其注意这个不然上面就统一接收者类型呢 }\"]},\"516\":{\"h\":\"接口\",\"t\":[\"用于定义和规范一组方法集，只要莫一个类型实现接口内所有的方法就被认为实现该接口（隐式实现），不用显示声明\",\"比如：USB-if组织不负责制造type-C数据线，只定义规范，这叫做接口；一些公司根据规范设计具体的数据线，这叫做实现。而我们只要根据规范使用type-C数据线充电就行，屏蔽内部实现细节，这叫做面向接口编程；当我们发现苹果的type-C巨贵，那我可以购买其他任意品牌的type-C的数据线就行，内部改变而功能一样，新旧都不需要改动内部细节，这就是面向接口编程的好处\",\"接口类型（1.18之后）：基本接口，空接口、通用接口\",\"基本接口：一组方法集\",\"// 声明 type Speaker interface { Speak() // 方法集：Speak } // 定义一个Person去实现Speak方法 type Person struct { Name string } func (p Person) Speak() { fmt.Println(\\\"Hello, my name is\\\", p.Name) } func main() { var s Speaker s := Person{Name: \\\"John\\\"} s.Speak() // 输出：Hello, my name is John }\",\"空接口：不包含任何方法的接口，也是所有类型的接口，常存储不确定的类型\",\"type enpty interface{} // 空接口的别名：any类型，两者等价 一般使用场景：用于定义一些通用的函数，还有断言 func printValue(T interface{}) { fmt.Println(T) } var x interface{} = 42 i := x.(int) // 单值断言，若是不是这个类型会panic i,ok := x.(int) // 双值断言，是这个类型返回ok为true，否则返回false\",\"通用接口：Go 1.18 后接口又分用于泛型的类型约束接口（通用接口），泛型是为了解决执行逻辑与类型无关的问题（传统的做法是运行时反射或者断言，但是这样代码复杂且开销特别高）\",\"泛型提供了更高效、安全的静态类型约束，无需依赖运行时反射，解决了接口动态类型判定的痛点。\",\"// 定义类型需要两个：类型形参T、类型约束:类型a|类型b type GenericStruct[T int | string] struct { Name string Id T } // 使用时候指定类型，可省让编译器判断 st := GenericStruct[int]{Name:\\\"wu\\\",Id:12} // 函数形参使用泛型 func sum[T int|float](a,b T) T{ return a+b } aim := sum[int](12,6) //这个可以省略[int]让编译器自己判断 // 泛型实现一个简单的==队列==（入队、出队、大小） type Queue[T any] []T func (q *Queue[T]) Push(e T) { *q = append(*q, e) } func (q *Queue[T]) Pop(e T) (_ T) { if len(*q) > 0 { res := (*q)[0] *q = (*q)[1:] return res } return } //泛型结构注意： 泛型不能作为一个类型的基本类型 泛型类型无法使用类型断言 匿名结构不支持泛型 匿名函数不支持自定义泛型 不支持泛型方法 //泛型集注意：（接口类型的约束） 带有方法集的接口无法并入类型集 类型集无法当作类型实参使用 类型集中的交集问题 类型集不能直接或间接的并入自身\",\"总结：不要为了泛型而泛型，合理使用是可以很方便解决一些问题，但是无节制使用会导致编译变慢而且代码维护成本增加\"]},\"517\":{\"h\":\"通道channel\"},\"518\":{\"c\":[\"golang\"]},\"519\":{\"h\":\"进阶面试\"},\"520\":{\"h\":\"面试流程：\",\"t\":[\"自我介绍\",\"聊几道基础八股文⭐\",\"聊聊项目和进阶八股文🌟\",\"场景设计题\",\"写两道代码题\",\"判断是否有戏：\",\"判断面试时间：若是10来分钟直接写代码了，大概率是不满意不想继续聊了\",\"提问：快结束时候，面试官会问有什么想问的？可以提问下面一些问题\",\"岗位工作内容 进去具体做啥\",\"用什么技术栈\",\"若是面试官详细介绍了，或者说招你进去安排哪些工作就很有机会；若是敷衍几句就不用报太大希望了\",\"语言特点、数据类型及其特点、类型转换\"]},\"521\":{\"h\":\"语言基础\",\"t\":[\"go语言的特性，对比其他语言有上面优势？\",\"go开发需要注意什么？\",\"go的数据类型是怎么样的？\"]},\"522\":{\"h\":\"与其他语⾔相⽐，使⽤ Go 有什么好处？\",\"t\":[\"与其他作为学术实验开始的语⾔不同，Go 代码的设计是务实的。每个功能和语法决策都旨在让程序员的⽣活更轻松\",\"Golang 针对并发进⾏了优化，并且在规模上运⾏良好\",\"由于单⼀的标准代码格式，Golang 通常被认为⽐其他语⾔更具可读性。\",\"⾃动垃圾收集明显⽐ Java 或 Python 更有效，因为它与程序同时执⾏。\"]},\"523\":{\"h\":\"Golang开发新⼿常犯的50个错误\",\"t\":[\"博客地址：https://blog.csdn.net/gezhonglei2007/article/details/52237582\"]},\"524\":{\"h\":\"Golang 使⽤什么数据类型？\",\"t\":[\"Golang 使⽤以下类型：\",\"String\",\"int、float、double\",\"Boolean\",\"Array\",\"Slice\",\"Map\",\"Struct\",\"Channel\",\"Pointer\",\"Method\",\"Function\",\"Interface\"]},\"525\":{\"h\":\"Go 程序中的包是什么？\",\"t\":[\"包 ( pkg ) 是 Go ⼯作区中包含 Go 源⽂件或其他包的⽬录。源⽂件中的每个函数、变量和类型都存储在链接包中。每个 Go 源⽂件都属于⼀个包，该包在⽂件顶部使⽤以下命令声明：\",\"package <packagename>\",\"您可以使⽤以下⽅法导⼊和导出包以重⽤导出的函数或类型：\",\"import <packagename>\"]},\"526\":{\"h\":\"变量大小写的区别\",\"t\":[\"变量首字母大写是public，全局访问\",\"变量首字母小写是private，只能包内访问\",\"注意：\",\"我们在定义结构体需要映射的时候必须首字母大写，否则得不到反射信息，无法转为我们需要的类型\"]},\"527\":{\"h\":\"go语言中的值类型和引用类型\",\"t\":[\"值类型和引用类型分别有哪些，这个在拷贝赋值有一个深拷贝和浅拷贝问题，初始化方式和使用的问题，数据底层数据结构情况，内存分配。实际使用时候会在new和make函数中需要考虑\"]},\"528\":{\"h\":\"值类型\",\"t\":[\"一般是一些基本数据类型，然后传递赋值是直接拷贝数据即深拷贝，原对象和新对象不是同一个内存地址，各自独立\",\"未初始化时总有零值（go默认提供），不存在nil\"]},\"529\":{\"h\":\"引用类型\",\"t\":[\"数据类型底层的话都会使用到指针，如切片，map，chan等等。传递赋值只是复制引用（指针）即浅拷贝，共享底层数据，修改这个会影响其他引用\",\"未初始化时为nil，表示无效引用，需要初始化后才能使用\",\"特性\",\"值类型\",\"引用类型\",\"赋值或传参\",\"数据复制，彼此独立\",\"共享底层数据，互相影响\",\"内存分配\",\"数据存储在栈或堆上\",\"引用存储在栈上，数据存储在堆上\",\"常见类型\",\"基本类型（int、float 等）、数组、结构体\",\"切片、映射、通道、接口\"]},\"530\":{\"h\":\"高级语法\",\"t\":[\"实例对象中，make和new的区别是什么？\",\"channel使用需要注意什么？\",\"Map的底层实现\",\"编程题中的string的一般用法\"]},\"531\":{\"h\":\"new和make有什么区别？\"},\"532\":{\"h\":\"new函数\",\"t\":[\"适用所有类型，仅对数据类型分配内存空间，不进行初始化；返回这个内存的指针。\",\"区别：值类型go默认提供零值可直接使用，引用类型没有初始化返回的指针为nil不能直接使用\",\"注意：引用类型使用new不能直接使用会报错\"]},\"533\":{\"h\":\"make函数\",\"t\":[\"仅用于引用类型，进行分配内存并完成初始化操作（初始化底层数据结构），返回的是引用类型的实例\",\"注意：值类型不能使用make函数编译会报错\"]},\"534\":{\"h\":\"引用类型如切片，nil切片和空切片有什么不一样？\",\"t\":[\"nil切片和空切片两者指向内存地址是不一样的\",\"nil切片：引用数组的指针是nil（无指向任何实际地址，不可用）\",\"空切片：引用的数组指针地址是有的，且所有的空切片指向的是同一个地址（特殊的共享内存地址）\"]},\"535\":{\"h\":\"channel的使用注意\",\"t\":[\"说到channel就需要了解设计它是干嘛的？有什么特性？\",\"go经典一句话：不用共享内存来通信，要通过通信来共享内存。这句话也意味着channel是为了解决协程间的通信问题，类似于管道，channel也是并发安全的（由于它的收发数据都是原子性的）\",\"特性\",\"无缓冲：发送和接收操作是同步的，两者必须同步进行\",\"有缓冲：可指定缓冲大小。缓冲满了，发送操作阻塞；缓冲为空，接收操作阻塞\",\"给一个nil的channel发送或接收数据，都会造成永久阻塞，进行关闭操作会直接panic\",\"给关闭的channel发送数据，会引起panic\",\"从已经关闭的channel读取数据，缓冲区为空返回一个零值，有值则正常返回\"]},\"536\":{\"h\":\"map的实现\",\"t\":[\"map底层是一个散列表，主要是两个结构体hamp和bmap\"]},\"537\":{\"h\":\"处理字符串\",\"t\":[\"问题1：字符串转byte数组会发生内存拷贝吗？\",\"问题2：处理字符串包含中文怎么办？\",\"// 问题1 ：严格来说发生类型强转都会发生内存拷贝，但是频繁内存拷贝又有性能问题--解决：使用unsafe包转两者的底层数据类型 // -------------------------------------------------------------------------------------------------- // 问题2：处理中文需要使用到 rune 关键字（底层是int32），rune表示范围更大 func reverse(s string) []rune { tem := []rune(s) for i, j := 0, len(tem)-1; i < j; i, j = i+1, j-1 { tem[i], tem[j] = tem[j], tem[i] } return tem } // 这个问题直接for range 遍历字符串也是转为[]rune切片，\",\"垃圾回收（CG的三色标记和读写屏障）、并发模型（协程、waitgroup、context）、GMP模型、常用数据结构底层原理（map、slice）、并发安全、锁\"]},\"538\":{\"h\":\"1、🌟协程\",\"t\":[\"协程是什么？\",\"协程与线程进程区别是什么？\",\"协程之间的通讯是怎么样的？\",\"协程调度的GMP模型是怎么样的？\"]},\"539\":{\"h\":\"什么是 Goroutine？你如何停⽌它？\",\"t\":[\"一个goroutine是一个函数或者方法，是实现并行计算的核心，通过函数方法前加go关键字启动协程\",\"协程有自己的寄存器上下文和栈，协程调度切换是有runtime控制的，而且创建和切换成本很低\",\"goroutine即协程 拥有强大的并发实现是通过GMP调度模型实现的\",\"需要停止一个协程需要向协程发送一个信号\"]},\"540\":{\"h\":\"协程与线程的区别？\",\"t\":[\"调度 \",\"线程由操作系统参与调度，抢占式。\",\"协程是由go运行时调度，协作式\",\"开销 \",\"线程不管在内存、创建还是调度上面开销都是很大的，其中栈的大小通常是1MB，成本是很高的\",\"协程在上面的开销很低，栈的大小初始只有2KB，可轻松处理上千个协程，结合GMP调度模型使得并发效率更高\",\"通信方式 \",\"线程的通信方式是通过共享内存\",\"协程通过channel进行通信，简洁高效\",\"由于线程的调度和管理高度依赖与操作系统，为此可移植性差，而协程是由go运行时管理，为此go开发就无需关系操作系统实现，可移植性更好\"]},\"541\":{\"h\":\"GMP模型\",\"t\":[\"GMP\",\"GMP调度模型三个重要结构G、M、P\",\"G：代表一个goroutine\",\"M：代表内核级的线程\",\"P：运行时的一个调度单位，维护一个G的本地队列用于管理和分配G到M上运行\"]},\"542\":{\"h\":\"工作原理\",\"t\":[\"调度流程\",\"当创建一个G，会被放入某一个P的本地队列中，本地队列满了就会放入到全局队列\",\"每一个M绑定一个P。M会从P的本地队列获取G来执行\",\"M执行完G后，发现P的本地队列为空，优先会从全局队列获取否则从其他P的本地队列窃取一半的G来运行（这种机制叫工作窃取，保证负载均衡）\",\"P的数量与M的数量\",\"P的数量由GOMAXPROCS控制，默认会根据CPU核心数决定P和M的数量，可以收到设置runtime.GOMAXPROCS(n)调节并发数量，数量固定的（最大并发度），多个P是为了更好利用多核CPU的性能\",\"M的数量是动态调整的，根据需要动态调整\",\"N:M 即使只有少数的M依旧可以处理大量的并发任务\",\"优点\",\"高效的并发模型：协程+工作窃取，最大限度提高CPU利用率，避免线程切换的开销\",\"低开销：使用协程，极低的上下文切换成本使得可以处理大量的并发任务\",\"易于使用：协程+channel提供简易的并发模型\",\"优化考虑：极端并发场景要合理设置GOMAXPROCS、合理控制协程的数量\"]},\"543\":{\"h\":\"2、🌟并发\",\"t\":[\"常用的三个并发模型是哪些？--channel、waitgroup、context\"]},\"544\":{\"h\":\"Channel通知 实现并发控制\",\"t\":[\"特点：\",\"可以通过无缓冲的channel 控制并发顺序\",\"可以通过有缓冲的 channel 限制并发任务的数量\",\"无缓冲通道也称为同步通道，发送方的协程和接收方的协程必须是同步，可解决两个协程执行先后顺序\"]},\"545\":{\"h\":\"WaitGroup 实现并发控制\",\"t\":[\"特点：\",\"WaitGroup可用于等待一组协程完成任务\",\"Add 增加任务数量，Done 表示任务完成，Wait 阻塞直到所有任务完成。\",\"可解决控制一组协程同时完成任务，在批量任务的处理应用\",\"// 举例：交替打印奇偶数 func printNum (nums []int) { // 定义两个信号量控制循序 evenCh := make(chan struct{}) oddCh := make(chan struct{}) // 定义一个waitgroup控制两个协程完成后一起退出 var wg sync.WaitGroup wg.Add(2) // 1、奇数协程 go func(){ defer wg.Done() for _,num := range nums { if num%2 ==1 { fmt.Printf(\\\"奇数协程：%d\\\",num) evenCh <- struct{}{} // 向evenCh传一个空对象，让偶协程执行 <- oddCh // 向oddCh 读取，阻塞到这里知道，偶协程传递信号过来 } } } // 2、偶数协程 go func(){ defer wg.Done() for _,num := range nums{ if num%2 ==0 { evenCh <- fmt.Printf(\\\"偶数协程：%d\\\",num) oddCh <- struct{}{} } } } wg.Wait() }\"]},\"546\":{\"h\":\"Context\",\"t\":[\"特点：\",\"context.Context 用于管理 goroutines 的生命周期，特别适用于需要取消操作或传递元数据的场景。\",\"提供了超时控制、取消信号和上下文数据传递功能。\",\"上面两个可应用在大部分场景下，但是在web并发下不好处理了（每个请求开启一个协程处理，这个协程可能又会开启其他协程，如数据库或rpc服务等等），我们就需要可跟踪的协程的方案\",\"context上下文可以处理子孙的协程，\",\"// 在父协程中创建一些协程时候创建一些参数 // WithValue 传递参数：原来的上下文附加上键值对，然后创建新的上下文 func WithValue(parent Context, key, val any) Context {} // WithCancel 设置取消信号 func WithCancel(parent Context) (ctx Context, cancel CancelFunc) {} // WithDeadline 设置cancel时间点 func WithDeadline(parent Context, d time.Time) (Context, CancelFunc) {} // WithTimeout 设置超时时间 func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc){} // Context 的一些接口也就是我们一般在子协程会根据上下文调用的方法 type Context interface { // Deadline 设置context cancel的时间 Deadline() (deadline time.Time, ok bool) // Done 关闭或者超时，channel会有一个取消信号 Done() <-chan struct{} // Err 执行done方法后返回一个取消原因 Err() error // Value 上下文对象携带并发安全的数据 Value() } // 其他框架中的context（如gin会自己实现一个功能更强大的contex） 比如传递参数会使用锁+map实现存储并传递参数到子协程中去使用\"]},\"547\":{\"h\":\"3、⭐内存\",\"t\":[\"内存逃逸是什么？怎么避免内存逃逸？\",\"垃圾回收机制是怎么样的？（三色标记法）\",\"性能分析\",\"内存对齐\"]},\"548\":{\"h\":\"内存逃逸是什么？会有什么影响？\",\"t\":[\"内存逃逸是指：变量或者对象超出了原本的范围内，导致它被分配在堆内存上了，后面由GC负责回收\",\"正常的局部变量是分配在栈内存，变量会随着函数执行结束后释放内存\",\"内存逃逸场景\",\"变量的地址被返回或者传递到外部函数\",\"func createSlice() []int { s := []int{1, 2, 3} // s 是局部变量 return s // s 的地址被返回，生命周期超出了当前函数 }\",\"在闭包场景下\",\"func main() { var f func() int { x := 10 // x 是局部变量 f = func() int { return x } // 闭包引用了 x } fmt.Println(f()) // x 的生命周期超出了它所在的作用域，因此需要逃逸到堆 }\",\"切片或map作为函数参数\",\"内存逃逸让变量或对象从栈内存变成堆内存，会导致GC的压力增加，降低性能，如是大量的GC会导致CPU毛刺（瞬间飙升很高）\"]},\"549\":{\"h\":\"怎么分析内存逃逸？以及优化\",\"t\":[\"Go编译器有内制动额逃逸分析器，使用命令进行逃逸分析：go run -gcflags=-m file.go编译器会自动执行并标记哪些变量需要逃逸到堆上，这个命令会给出逃逸分析报告\",\"怎么才能避免呢？\",\"本质就是：尽量将变量分配到栈上\",\"尽量避免返回局部变量的地址\",\"函数传参：传值会拷贝整个对象，传指针只会拷贝指针地址，可减少值拷贝，但是会导致内存逃逸，增加GC的压力 特别是在对象频繁创建和删除的场景下，传递指针会导致GC开销严重影响性能，\",\"一般情况下，需要修改对象值，或者占用内存较大的结构体，选择传指针。对于只读的占用内存小的结构体直接传值会更好\"]},\"550\":{\"h\":\"GC原理--三色标记+增量式标记清除\"},\"551\":{\"h\":\"三色标记\",\"t\":[\"大致的过程：首先将所有的对象放入白色集合。\",\"1、从根节点遍历对象，遍历到的放入到灰色集合。（最终是进入黑色，暂时放入黑色是为了查它所有引用的对象）\",\"2、遍历灰色集合的对象所引用到的白色对象放入到灰色，然后将遍历过的灰色对象放入黑色对象\",\"3、循环步骤2，直到灰色集合为空\",\"结束：剩下的白色就是垃圾，进行回收\",\"白色：不可达即垃圾\",\"灰色：可能是垃圾\",\"黑色：不是垃圾\"]},\"552\":{\"h\":\"并发标记与增量式标记\",\"t\":[\"标记和应用程序的执行是并行执行的，有点减少停顿时间，标记工作分成多个小的增量任务避免长时间阻塞\",\"虽然是通过并发方式但是任然需要stw来暂停程序的执行保证标记的正确性\"]},\"553\":{\"h\":\"分代收集\",\"t\":[\"Go的垃圾回收器通过分代收集来优化回收过程\",\"对于年轻代，新分配的对象，这些一般存活时间短，更可能是垃圾\",\"对于老年代，已经存活一段时间的对象，更可能长时间存在\",\"提示\",\"GC的控制方式 被动：环境变量GOGC控制，当栈内存增长到触发的阈值，就会触发，GOGC表示触发频率\",\"主动：可代码上手动触发runtime.GC() ，但是这样做法不推荐。 （runtime.ReadMemStats()可获取内存使用和GC相关信息）\"]},\"554\":{\"h\":\"内存对齐\",\"t\":[\"go编译会自动内存对齐，为此结构体类型需要注意内存对齐，合理的顺序可减少内存浪费\",\"CPU访问内存时，并不是逐字节访问，而是以机器字长为单位访问。（如64位的CPU一次都是读取8字节，还有没有对齐可能会触发总线错误）内存对齐可以提高内存读写性能，也方便实现原子性操作（类型若是被拆开就需要多次读写）\",\"Go编译器会自动根据规则进行内存对齐但不进行优化（即不改变顺序），为此我们只要了解规则进行合理安排类型的顺序即可\",\"合适的内存对齐可以提高内存访问效率，减少程序运行时间。go编译时候会自动处理内存对齐\",\"对齐规则（插入填充字节实现空间换时间）：\",\"对齐规则：Go会根据每个类型大小确定对齐方式（大小的倍数）\",\"bool：1字节\",\"int N、uint N、float N：通常按照 N/8 字节对齐\",\"int、map、chan、func、*T：1字（根据机器字长）\",\"string：2字（数据长度）\",\"[]T:3字（数据、长度、容量）\",\"interface:2字（类型、值）\",\"根据实际机器字长判断：32位最大是4字节、64位是8字节\",\"// 不进行合理排序：占用 32 个字节 type person struct { hasMoney bool // 1 个字节 name string // 16 个字节 age int16 // 2 个字节 } // 进行合理的排序：占用24字节 type person struct { name string // 16 个字节 age int16 // 2 个字节 hasMoney bool // 1 个字节 }\"]},\"555\":{\"h\":\"4、锁\",\"t\":[\"互斥锁\",\"读写锁\",\"sync.map的安全锁\"]},\"556\":{\"h\":\"互斥锁\",\"t\":[\"在Go并发程序对共享资源进行控制访问的手段，如并发操作非并发安全的map就要用mutex加锁\",\"用法也简单，只提供两个方法：加锁（Lock）和解锁（Unlock）\",\"func main() { // 1、声明一个互斥锁 var mu sync.Mutex m := make(map[int]bool) var wg sync.WaitGroup for j := 0; j < 100; j++ { wg.Add(1) go func(key int) { defer func() { wg.Done() }() mu.Lock() // 写入前加锁 m[key] = true // 对 Map 进行并发写入 mu.Unlock() // 写入完成解锁 }(j) } wg.Wait() fmt.Printf(\\\"Map size = %d\\\\n\\\", len(m)) }\"]},\"557\":{\"h\":\"读写锁\",\"t\":[\"读写锁是针对读写操作的互斥锁。\",\"特性及注意：\",\"持有锁：由任意数量的读操作或者单个写操作\",\"唤醒操作：Unlock（写解锁）方法会唤醒所有要进行读而被锁定的协程；而RUnlock（读解锁）方法只会在没有任何读锁的情况下唤醒一个想要写操作而被阻塞的协程\",\"解锁：多读操作是不互斥的，为此获得多少读锁，就要等量给多少个读解锁，否则其他写操作就无法获得读写锁了\",\"func main() { var rwm sync.RWMutex for i := 0; i < 5; i++ { go func(i int) { fmt.Printf(\\\"当前是第%d个协程 \\\", i) rwm.RLock() fmt.Printf(\\\"获得读锁的索引是%d \\\", i) time.Sleep(time.Second * 2) // --休眠2秒 fmt.Printf(\\\"进行读解锁的索引是%d \\\", i) rwm.RUnlock() fmt.Printf(\\\"锁：%d 已经释放 \\\", i) }(i) } time.Sleep(time.Second * 2) fmt.Println(\\\"试图获取写锁进行，写操作\\\") rwm.Lock() fmt.Println(\\\"解锁\\\") }\"]},\"558\":{\"h\":\"sync.map的安全锁\",\"t\":[\"sync.map内部不直接使用map结构，而是进行读写分离优化后的解决方案：分为两部分的存储结构\",\"只读的存储区域\",\"带锁的写入区域\",\"好处：高并发条件下，大多数读操作是无锁的，只有写入操作才会进行加锁（算是读写锁的应用吧）减少锁的争用提高并发\",\"使用：sync.map是开箱即用的，直接对外提供对应的操作\",\"Store(key, value)：将 k 和 v 存储到 sync.Map 中\",\"Load(key)：读取指定k的值，有则返回值和true，没有则返回零值和false\",\"LoadOrStore(key, value)：存在就返回值即可，不存在就存储k-v并返回value值\",\"Delete(key)：删除指定的key这项\",\"Range(f func(key, value interface{}) bool)：遍历所有的键值对\"]},\"559\":{\"c\":[\"golang\"]},\"560\":{\"h\":\"大厂面试题\"},\"561\":{\"h\":\"腾讯一面\",\"t\":[\"协程池的作用?\",\"内存逃逸分析?\",\"go的内存回收什么条件会触发? go的GC能够手动触发吗?\",\"channel的底层实现? 有缓冲的,无缓冲的channel, 如果管道已经关闭了, 读取会不会发生错误?\",\"切片使用的时候需要注意什么?\",\"go中的参数传递是值传递还是引用传递?\",\"defer的执行顺序?\",\"100G的文件, 统计出所有英文字母, 按照字母表顺序输出\",\"linux如何分割文件?\",\"接口性能如何优化?\",\"什么情况会全表扫描?\",\"主丛同步的原理? mysql还有什么相关的log文件?\",\"分布式锁的原理?\"]},\"562\":{\"h\":\"腾讯二面\",\"t\":[\"项目拷打15分钟\",\"Kafka的消息丢失和消息重复消费。\",\"Kafka和Rabbitmq的区别在哪？（架构、推和拉）\",\"拉的模式有什么好处（控制消费速度）\",\"使用分布式锁的过程中应用挂了？\",\"优雅启停+defer\",\"使用过期时间+自动续期\",\"对象存储和文件存储的主要区别是什么？\",\"分片上传是怎么实现的（文件合并hash一致性校验，引出文件秒传）\",\"邮箱验证码功能怎么实现的。（redis+邮箱组件）\",\"jwt的格式。加密算法、内容、过期时间\",\"讲一下defer的原理\",\"讲一下map的底层结构\",\"map中hash冲突怎么解决（链表、红黑树）\",\"讲一下go性能调优的案例（pprof，线程日志）\",\"通过线程日志延伸出，怎么看一个线程在线程日志里是卡在循环还是事件等待？\",\"线程日志上面会有标记。\",\"讲一下mysql的事务隔离级别？\",\"解释一下什么是可重复读？\",\"事务实现的底层原理？\",\"Redis持久化机制（RDB，AOF）\",\"为什么持久化的时候是fork子进程处理\",\"讲一下docker实现容器的基本原理\",\"用过其他容器运行时吗\",\"K8s有哪些组件？\"]},\"563\":{\"h\":\"腾讯一面（校招）\",\"t\":[\"map怎么去做并发安全\",\"外层的协程能捕获子协程的panic吗？\",\"panic都会被捕获吗？哪些panic不会捕获？\",\"slice和数组的区别？底层结构？\",\"go哪些内置类型是并发安全的？\",\"go的结构体可以嵌套组合吗？\",\"两个结构体可以等值比较吗？\",\"你如何理解interface类型\",\"1.18版本后interface有什么增强？\",\"interface可以进行等值比较吗？\",\"说说逃逸分析\",\"channel有缓冲和无缓冲的区别\",\"map并发访问会怎么样?这个异常可以捕获吗？\",\"GMP模型\",\"GMP模型中什么时候把G放全局队列？\",\"go的gc\",\"gc扫描是并发的吗？\",\"gc中的根对象是什么？\",\"项目中etcd用来干什么的？\",\"mysql索引B＋T\",\"索引的优缺点\",\"redis用来做什么的?\",\"用户信息怎么存的？都走缓存吗？\",\"redis过期淘汰策略\"]},\"564\":{\"h\":\"腾讯二面（校招）\",\"t\":[\"会什么语言？\",\"tcp和udp的本质区别\",\"tcp可靠通信怎么实现的\",\"说一说拥塞控制\",\"滑动窗口的作用\",\"什么是粘包，怎么解决\",\"堆和栈有什么区别\",\"进程的进程空间是怎么样的？\",\"进程，线程，协程的区别\",\"链表额线性表的区别\",\"有序双向链表如何高效查询？\",\"kafka如何实现高吞吐的？\",\"介绍最近的项目\",\"缓存击穿，雪崩，穿透\"]},\"565\":{\"h\":\"腾讯三面（校招）\",\"t\":[\"项目中比较有挑战性的事？\",\"什么是伪随机？\",\"c＋＋里面的继承和虚函数，抽象封装，和go的interface有什么区别？\",\"为什么go不是传统意义上的面向对象语言？\",\"c＋＋多重继承可能导致循环继承，go用interface实现有这种问题吗？\",\"单例模式？什么情况用饿汉模式，什么时候用懒汉模式？\",\"表的主键用什么类型的字段？用字符串不可以吗？\",\"消息队列是什么?\",\"有了解过其他消息队列吗？\",\"kafka你们是怎么部署的呢？\",\"能说一说你们怎么使用devops的吗？\",\"不用kafka可以吗？\",\"ES是干什么的？\",\"前后端通信用的什么协议？\",\"grpc相比http的优势在什么地方呢？\"]},\"566\":{\"h\":\"腾讯QQ一面\",\"t\":[\"自我介绍\",\"算法：20有效括号，240搜索二维矩阵Ⅱ\",\"项目在运行了吗？数据表的设计？简单画一下\",\"数据库外键关联不同表吗？\",\"抢单的设计是怎么做的？\",\"Redis里缓存了所有悬赏的订单？\",\"怎样防止多人抢单？没有很理解递减是怎么实现的\",\"悬赏下单的用户？\",\"为什么有订单数量的概念？\",\"如果Redis抢单成功但是后面的逻辑失败怎么办？即发消息队列的失败了会怎么样？会出现什么问题？\",\"上述问题有没有什么解决办法？\",\"直接用Mysql实现多人抢单可以吗？\",\"使用Mysql的话有没有不通过数量控制的方案？\",\"上个问题相对更优雅的解决方案，如根据订单状态\",\"QPS提升3倍，为什么只提升了3倍？所有服务搭载在个人机上，提升比较小，这样测试是不合理的\",\"点赞是怎么设计的？点赞的底层逻辑怎么存的？\",\"评论怎么设计的？\",\"评论可以折叠吗？只有一个层级？\",\"如果你考虑针对评论进行回复的话，他可能的数据表结构是怎样的？\",\"设计完成以后怎么查这些不同层级的评论？\",\"所以其实实现不同层级的评论只需要一个表就行了，只不过子评论要记录其对应的主评论的id\",\"Go了解的多不多？\",\"Java的集合大概讲一讲\",\"ArrayList的底层怎么实现，数据结构怎么样，扩容策略是怎样的\",\"HashMap的底层实现呢，Hash冲突怎么处理的？扩容策略？加载因子多大？为什么是0.75\",\"Java的垃圾收集机制\",\"新生代老年代是怎么划分的？\",\"网络相关的HTTP了解的不多吗？Get和Post的区别？\",\"登录请求的话用什么请求？用Get会有什么问题\",\"从浏览器输入个网址到显示页面的过程\",\"TCP和UDP的区别？\",\"操作系统相关的了解吗？\",\"Redis常用的数据结构有哪些？如果要实现一个排行榜，用什么数据结构？\",\"如果实现分布式锁呢？什么命令？setnx\",\"Redis实现简易的布隆过滤器是怎么实现的？\",\"Redis常见的穿透击穿雪崩问题？\",\"击穿的解决方案\",\"逻辑过期的话怎么更新呢？逻辑过期的时间点有很多请求过来，是不是都会去数据库请求更新数据？\",\"Redis的过期淘汰策略\",\"Redis过期数据的删除策略？\",\"Mysql的索引通常是怎么划分的？从数据结构上可以划分为哪些索引？是指这些索引数据结构不一样，比如InnoDB的？MyISAM的？哈希的？\",\"聚簇索引和非聚簇索引的区别？\",\"数据和索引放一起的优点\",\"什么是回表？\",\"Mysql事务的隔离级别\",\"未提交读有什么问题？\",\"什么是不可重复读？什么是幻读？\",\"反问\"]},\"567\":{\"h\":\"腾讯QQ二面（电话面）\",\"t\":[\"自我介绍\",\"Golang协程与线程的区别\",\"专业问题\",\"中间漏了几个问题\",\"Redis缓存击穿解决方案在项目中是否用过，用在什么地方\",\"检查到key过期了，都请求数据库不就击穿了吗\",\"怎么加锁\",\"这个锁放在本地吗？内存里面吗？\",\"MySQL支持的最大并发数\",\"Redis支持的最大并发数\",\"算法：文件里面有20亿个整数，找到前1000个最大的，要求时间复杂度尽可能低\",\"上述算法时间复杂度多少\",\"项目背景\",\"Jmter压测的哪个接口\",\"QPS\",\"具体是怎么优化的呢\",\"压测后qps提升了3倍，瓶颈在哪个地方，为什么不能再多了\",\"阿里云用的是Cos服务是吧\",\"订单超卖是什么意思\",\"项目大概多少人参与\",\"这个服务有几个系统\",\"这个项目是用来给自己学校的吗？还是各个学校通用的项目？\",\"这个项目打通了学校里面的账号体系了吗？\",\"反问\"]},\"568\":{\"h\":\"腾讯云智\"},\"569\":{\"h\":\"一面\",\"t\":[\"自我介绍\",\"第一个项目是实习项目吗\",\"你在里面负责的部分\",\"用户悬赏下单的业务流程讲一下\",\"RabbitMQ写库失败了会怎么处理\",\"Redis的数据与数据库里的数据是怎么保持一致的\",\"什么时候写库什么时候写Redis，数据库中有库存吗\",\"Redis是在哪部署的\",\"Redis用的哪种数据类型，项目中Redis哪些地方用了\",\"SpringCache依赖Redis，那用的是什么数据类型\",\"登录注册是怎么实现的\",\"什么是JWT\",\"鉴权是怎么做的\",\"退出登录是怎么实现的\",\"简易短视频都负责什么？登录注册是怎么实现的\",\"TCP的三次握手和四次挥手的过程\",\"Time wait的作用是什么\",\"断开连接是客户端发起还是服务端发起？服务端可以断开吗？\",\"HTTP和HTTPS的区别\",\"HTTPS是怎么加密的了解吗\",\"Session，Cookie，token的区别\",\"Session是在哪存的\",\"进程线程协程这三个的区别\",\"CPU调度是哪个\",\"数据库事务的隔离级别\",\"什么是幻读\",\"MySQL主键索引和普通索引的区别\",\"怎么避免回表操作\",\"索引失效的场景\",\"B树和B+树的区别\",\"如何实现一个HashMap（HashMap的底层结构以及一些扩容操作）\",\"HashMap和ConcurrentHashMap的区别\",\"深拷贝和浅拷贝的区别\",\"说一说使用逻辑过期解决缓存击穿问题\",\"key逻辑过期后，与数据库的一致性怎么保证\",\"缓存穿透问题及解决方案\",\"ThreadLocal实现线程信息隔离说一下\",\"用户登录以后，再请求其他接口，这时是同一个线程吗？\",\"不把用户id放到threadlocal可以吗？\",\"算法题\"]},\"570\":{\"h\":\"二面\",\"t\":[\"自我介绍\",\"挑一个项目聊一下\",\"第一版方案为什么会超卖呢\",\"Redis中的库存还没有递减完成，出现了比如OOM的情况，数据库怎么获得已经抢成功的数据？\",\"数据库和缓存数据一致性的问题\",\"如果数据库更新完成了，但是删除缓存时没有成功，这时会怎么办\",\"项目有实际需求吗？还是找的课题\",\"RabbitMQ在项目里是干嘛用的？\",\"抢单的人怎么知道要查哪个key呢？\",\"具体压测的数据\",\"简易短视频是怎样的项目\",\"反问\"]},\"571\":{\"h\":\"腾讯\"},\"572\":{\"h\":\"某不知名组一面（电话面）\",\"t\":[\"简单的自我介绍\",\"Java判断相等使用==和使用equals的区别\",\"Java里面接口和抽象类的区别，属性、方法、继承限制等方面回答\",\"详细介绍下项目用户注册和登录的流程\",\"密码存到数据库中是用的哪种方式进行的加密\",\"不加盐的问题\",\"登录成功以后返回的什么数据\",\"返回的token是怎么生成的\",\"token里面包含了什么信息\",\"客户端和后台通信走什么协议\",\"对于HTTP协议有多少了解\",\"Redis提供了哪些基础的数据类型\",\"这些数据类型底层是基于什么数据结构实现的\",\"使用Redis做性能优化具体是怎么做的\",\"对Linux操作系统熟悉吗\",\"项目后台不是部署在Linux上的吗\",\"反问\"]},\"573\":{\"h\":\"二面\",\"t\":[\"自我介绍\",\"对面介绍自己的组，问可以接受Go语言吗？\",\"算法：53最大子数组和，239滑动窗口最大值，136只出现一次的数字\",\"进程和线程是怎么理解的？\",\"协程是什么意思？这三者对比一下\",\"在设计程序的时候如何抉择呢？比如应该用多进程的方式还是单进程多线程的方式？\",\"线程池中的核心参数\",\"线程池的执行流程\",\"开发过程中用过线程池吗？线程池的这几个参数是如何确定的？\",\"为什么是n+1和2n和？\",\"你的项目你认为是CPU密集型还是IO密集型\",\"项目v2要上线了，项目v1中还有任务在线程池中，这个时候要怎么办呢？【回答的shutdown和shutdownNow的区别，使用shutdown，等待任务队列里的任务执行完再关闭v1版本的项目】\",\"线程的超时时间设置\",\"你的项目的请求上限是多少？上限多少是右哪些因素决定的？\",\"springBoot可以调吗，让他的上限多一些\",\"Java中的反射解决的问题？使用的场景？\",\"C/C++不支持反射，了解过为什么有些语言持支反射有些不支持反射吗？有什么编程语言的特性决定了他可以用反射吗？\",\"Java中如何判断一个对象可以被回收了？\",\"判断对象是不是被引用标记了，扫一遍的时间可能会非常长，如何来优化它或者现有的机制是如何做的？\",\"如何入手MySQL的优化？看Explain的什么内容？\",\"索引的底层数据结构是什么样子？\",\"B+树为什么比较合适？为什么不用二叉树？红黑树？B树？\",\"MySQL里开启了两个事务，第一个事务插入一条记录并返回了id，此时这个事务还没有提交，第二个事务可以查询到id为2的记录吗？什么隔离级别可以查到，什么隔离级别查不到？\",\"Redis是单线程的为什么比较快？【内存，多线程切换，IO多路复用，Redis的数据结构】\",\"怎么理解IO多路复用？相对于什么IO多路复用性能更高\",\"git的合并的命令？git merge 和 git rebase 用过吗？\",\"假设一个场景：我合入了一个版本，其他同学在之后也合入了三四个版本，这个时候发现我合入的版本有bug，需要把这个撤回，要怎么做呢？\",\"反问\"]},\"574\":{\"h\":\"腾讯音乐\"},\"575\":{\"h\":\"（一）开场\",\"t\":[\"面试官介绍岗位\",\"岗位为腾讯音乐 - 全民K歌 - 国际版 - 直播歌房后台研发工程师，主要负责直播相关功能，开发语言为Go和C++。\",\"关于求职者基本情况\",\"要求5分钟以内的自我介绍。\",\"被问到所在公司技术团队裁撤后为何会留下自己。\",\"岗位base深圳能否接受。\"]},\"576\":{\"h\":\"（二）项目相关\",\"t\":[\"系统重构 - 数据迁移项目\",\"微服务相关\",\"如何理解微服务，为什么微服务能提升系统可拓展性。\",\"微服务相比于单体服务的缺点。\",\"服务间通信成本指的是什么，成本体现在哪。\",\"数据库迁移原因与成本评估\",\"把数据库从MongoDB迁移到MySQL的原因。\",\"如何评估迁移异构数据库（MongoDB到MySQL）的成本，是否仅考虑成熟度和被接受程度，因为迁移涉及数据同步工作量巨大。\",\"技术选型相关\",\"如果采用最终一致性方案，MySQL支持事务而MongoDB不支持事务，有什么原因不使用最终一致性方案。\",\"数据同步与异常处理\",\"迁移过程中数据同步怎么做（新数据库写MySQL，写脚本迁移Mongo数据到MySQL）。\",\"业务要读写新旧数据时怎么办。\",\"迁移比较暴力，如何发现数据异常，异构数据库迁移时如何保证每条数据正常迁移到MySQL。\",\"唯一键场景下（Mongo已有数据，切换到MySQL写时可能重复写入）的处理。\",\"优化服务器项目\",\"分布式缓存实现\",\"优化服务器引入分布式缓存技术（具体是Redis），如何实现的。\",\"缓存与数据库一致性\",\"如何保证Redis缓存和数据库的数据一致性（回答缓存先写数据库后写存在问题）。\",\"写缓存成功数据库失败时缓存是否为脏数据。\",\"先写数据库成功再写Redis，缓存更新失败怎么办，如何知道何时将数据库数据同步到缓存及同步的做法。\",\"缓存是否有过期时间机制，有没有不过期一直生效的情况，有过期的话多久过期。\",\"缓存同时过期会有什么问题以及如何解决。\",\"数据抓取业务项目\",\"Kafka相关\",\"Kafka在业务中的角色。\",\"业务为什么要经过Kafka这一层，账号量有多大。\",\"定时任务可分散执行时间，Kafka在这种情况下削峰意义不大，是否有其他考虑使用Kafka的因素。\",\"防止账号丢失已有确认机制，当作下游处理失败重新触发即可，为何还需要Kafka。\",\"抖音微信小游戏归因业务项目\",\"Token缓存相关\",\"微信小游戏的token存于sync.map（服务内存），为何使用服务内存而不使用Redis或其他外部缓存方案。\",\"用户量相关，当有一定数量实例和用户量时这种方案是否有缺陷（此处存在理解偏差导致回答失误）。\"]},\"577\":{\"h\":\"（三）Go和MySQL\",\"t\":[\"MySQL中索引如何实现，为什么MySQL里不使用B树。\",\"切片如何实现\",\"Go里并发读写map会出现问题，如何解决\",\"Go里的sort排序如何实现\",\"协程和线程的区别，线程开销大的原因，协程有上下文切换为何线程消耗更多CPU资源\"]},\"578\":{\"h\":\"（四）算法与反问\",\"t\":[\"算法手撕\",\"反问\"]},\"579\":{\"h\":\"腾讯互娱 一面/Go\",\"t\":[\"Go的接口作用，用处，实现\",\"空struct用途，会不会分配内存\",\"Go原生支持默认参数或可选参数吗，如何实现\",\"Go defer执行顺序\",\"协程，协程间信息如何同步\",\"Go GMP\",\"性能开销大原因 \",\"GM\",\"GMP\",\"go生成一个协程，此时放在P中还是M中\",\"G阻塞，M、P如何\",\"操作系统中大端编码、小端编码\",\"TCP、UDP\",\"三次握手、四次挥手\",\"为什么挥手是四次，会不会合并\",\"流量控制\",\"Redis项目中使用（主数据库还是缓存）\",\"Redis与MySQL数据如何同步\",\"MySQL索引建立原则\",\"Explain，字段\",\"Redis持久化方式\",\"Redis过期删除策略\",\"Redis高可用设计\",\"主从复制方式，模式\",\"kafka业务使用\",\"Redis常用数据结构\",\"zset使用场景，具体实现\",\"部署方式，k8s部署（相关概念）\",\"Go性能优化方式\",\"请求耗时过长，有无使用到链路观测\",\"单链表判断有没有环\",\"玩家积分排序topN实现算法\",\"项目中遇到的困难较高的场景\",\"微服务r如何理解，有何问题\",\"服务端崩溃检测\"]},\"580\":{\"h\":\"腾讯外包 /后端开发/一面\",\"t\":[\"自我介绍\",\"go开发几年（1年半）\",\"熟悉到什么程度（增删改查不是问题）\",\"map是否安全（不安全）\",\"为什么不安全\",\"slice的底层结构\",\"apendslice会安全吗\",\"automatic有用过（用过+1-1）\",\"说一下什么是原子性（要么成功要么失败）\",\"怎么做有一个有序的排序（结构里搞个切片，然后用sort排序）\",\"mysql主从同步机制（不会）\",\"redis常用数据结构（string、list、hash、set、zset、bitmap）\",\"有序列表的底层结构（不会，跳表）\",\"常用的索引数据结构（哈希、b+树、二叉树）\",\"微服务的服务发现（客户端服务、服务端服务）\",\"怎么感知服务集群的变化（服务注册中心、轮询服务健康、监控系统）\",\"注册中心如何感知服务的变化(心跳推送？触发机制之类的）\",\"会不会k8s（不会）\"]},\"581\":{\"h\":\"字节跳动\",\"t\":[\"介绍一下业务表的字段\",\"定时任务刷新字段, 是怎么实现的?\",\"分布式锁? 分布式死锁如何解决? 看门狗机制? 如何避免当前线程加的锁, 被其它线程解锁?\",\"乐观锁和悲观锁的区别? 写多读少的情况, 应该使用乐观锁还是悲观锁?\",\"分布式场景下, 如何实现乐观锁?\",\"kafka的幂等性? 如何避免消息被重复消费?\",\"两个线程, 同时向mysql中插入一条数据?\",\"kafka如何保证消息不丢失\",\"sql优化场景:\",\"select id,name,balance from account where update_time > '2020-09-19' limit 100000, 10\",\"该语句为什么查询慢? 有什么优化思路?\",\"算法题: 子集\"]},\"582\":{\"h\":\"字节一面（技术）\",\"t\":[\"make和new的区别？\",\"mutex锁有几种模式？\",\"讲一下GMP调度模型\",\"两道语法纠错题（牛客上可以多刷一下）并解释为什么\",\"一道算法爬楼梯\",\"一道编程题：有100个并发线程，需要控制最多只有10个执行（有缓冲channel实现）并解释思路\",\"知道哪些设计者模式？\"]},\"583\":{\"h\":\"字节二面（技术+人事）\",\"t\":[\"技术：\",\"讲一下一个系统访问的整个链路过程\",\"K8s有哪些组件？\",\"怎么把node里的pod暴露给外面使用？\",\"我对监控的理解，怎么判断一个系统是否已经挂调了？\",\"如果让你对系统进行一个巡检，你会怎么做？\",\"举例数据库巡检\",\"用过云产品吗？讲一下你对公有云的理解\",\"用过OPEN AI吗？你一般怎么使用？\",\"人事：\",\"从技术上和工作上上一家公司对你有什么成长？\",\"在工作中和技术上学到哪些技能？举例说明\",\"离职原因，未来职业规划\"]},\"584\":{\"h\":\"字节\",\"t\":[\"自我介绍\",\"选择一个项目或者需求详细介绍一下\",\"代码题，输出什么内容\",\"package main import ( \\\"encoding/json\\\" \\\"fmt\\\" ) func main() { jsonStr := `{\\\"id\\\":321789788912372911233,\\\"name\\\":\\\"John\\\",\\\"age\\\":30,\\\"city\\\":\\\"New York\\\"}` var person map[string]interface{} json.Unmarshal([]byte(jsonStr), &person) person[\\\"married\\\"] = true person[\\\"children\\\"] = []string{\\\"Tom\\\", \\\"Jerry\\\"} fmt.Println(person) jsonB,_ := json.Marshal(person) fmt.Println(string(jsonB)) }\",\"tcp 拥塞控制算法\",\"mvcc 底层实现原理\",\"在有些实际生产中会将默认隔离级别调整至读提交，为什么，有什么好处\",\"mysql 怎么实现乐观锁和悲观锁\",\"一条 sql 语句，匹配到了一条语句，会加什么锁，锁表还是锁行\",\"es 里面是怎么实现分页的，分页有哪几种方式\",\"算法题 力扣 42 接雨水\"]},\"585\":{\"h\":\"美团 一面\",\"t\":[\"自我介绍\",\"leetcode141 环形链表，判断是否有环路\",\"延申leetcode142 环形链表2，找到入口位置\",\"判断一个sql（左右模糊查询）能否命中索引\",\"为什么左右模糊不能命中索引\",\"如何优化这个sql（左右模糊查询）\",\"全文索引底层怎么实现的\",\"建立分词后，如何进行快速的模糊检索\",\"分词用的什么数据结构\",\"跳表的时间复杂度，哈希表呢\",\"哈希表有什么问题\",\"说一下MySQL的索引\",\"什么是聚簇索引、非聚簇索引\",\"事务隔离级别\",\"InnoDB如何实现可重复读\",\"死锁是什么，如何解决死锁\",\"拷打项目\",\"你觉得科研中什么能力比较重要\"]},\"586\":{\"h\":\"美团 二面\",\"t\":[\"自我介绍\",\"拷打项目\",\"socket、TCP/IP 的关系\",\"输入 url 的到浏览器显示网页的过程\",\"反问\"]},\"587\":{\"h\":\"美团\",\"t\":[\"Go中Map的数据结构?扩容机制?key为什么是无序的?\",\"简述-下rune类型\",\"什么是协程泄露?\",\"select 底层数据结构和一些特性?\",\"对已经关闭的的chan进行读写，会怎么样?为什么?\",\"除了加Mutex锁以外还有哪些方式安全读写共享变量?\",\"互斥锁正常模式和饥饿模式的区别 ?\",\"原子操作和锁的区别 ?\",\"一条select语句的执行流程?\",\"CHAR 和 VARCHAR的区别?\",\"MYISAM和INNODB的不同?\",\"binlog的工作模式有哪些?\",\"持久化机制?各自的优缺点?\",\"怎么理解Redis事务?\"]},\"588\":{\"h\":\"美团\",\"t\":[\"自我介绍\",\"项目做完了吗？背景是什么？项目初期的背景调研是怎么做的？现在这个系统做到哪一步了？\",\"用户下单用户派送的优劣了解过吗？怎么管理？\",\"项目里面遇到的最大的难题是什么？为什么？\",\"为什么使用乐观锁？你了解乐观锁的使用场景和实现逻辑吗？\",\"乐观锁怎么实现的你了解吗？\",\"了解悲观锁吗？\",\"最开始有没有考虑乐观锁的适用场景和悲观锁的适用场景？\",\"乐观锁会不会导致频繁的冲突啊？这种情况下和悲观锁谁的性能更好一些呢？\",\"关于 Redis 的递减特性你了解哪些？\",\"关于 Redis 的指令还用到过其他哪些呢？\",\"setnx 的原理你知道吗？\",\"有个场景你了解吗：锁获取后程序退出了，这样锁永远不会释放，导致死锁\",\"看你简历里说比较了解集合，对集合的了解简单说一下\",\"怎样判断内存是否需要回收？（对象死亡的判断方法？）\",\"可达性分析是如何对对象进行标记的？三色标记法了解吗？\",\"垃圾回收的过程（针对某一个具体的垃圾收集器 CMS 或 G1）\",\"清除的过程呢？\",\"标记清除算法的优点和缺点？\",\"CMS 标记阶段比较长，如果产生了过多的浮动垃圾，有可能会出现回收赶不上分配的情况，从而导致 GC 失败，这种要怎么解决？\",\"CMS 和 G1 的比对了解吗？为什么废除了 CMS？\",\"G1 怎么做到指定具体的垃圾清除时间的？\",\"线程的生命周期你了解吗？\",\"每个状态之间怎么流转的你了解吗？\"]},\"589\":{\"h\":\"饿了么\"},\"590\":{\"h\":\"一面\",\"t\":[\"自我介绍\",\"Java面向对象的三个特性，什么是多态\",\"双亲委派机制\",\"HashMap在JDK1.7以前有线程不安全，怎么个情况\",\"保证线程安全用什么Map\",\"ConcurrentHashMap是怎样的\",\"线程池用过吗？核心参数以及有啥作用\",\"使用线程池有什么好处\",\"悲观锁和乐观锁是怎么样子的\",\"Java中怎么实现悲观锁和乐观锁\",\"HTTP和HTTPS的区别，加密过程是怎样的\",\"TCP的粘包是怎样的现象\",\"Cookie和session的区别\",\"用户登录之后怎么找到对应的Session的呢\",\"两个项目哪个有挑战一点，挑一个讲一讲\",\"平时做项目或科研会遇到什么困难，遇到困难一般自己解决吗\",\"最近有了解一些新的技术或者看一些技术书籍之类的吗\",\"算法题：反转链表\",\"其他的offer\",\"之后有往上海发展的打算吗\",\"反问\"]},\"591\":{\"h\":\"阿里巴巴\"},\"592\":{\"h\":\"数字零售技术部-ERP技术一面（电话面）\",\"t\":[\"自我介绍\",\"项目背景？\",\"你觉得项目难点是哪些？\",\"第一版是怎么实现的？为什么会出现超卖问题？\",\"记录抢单结果的表是怎么设计的？\",\"这张表的索引和其他的约束是怎么做的？\",\"乐观锁为什么不是加在抢单关系表而是在订单表里的？\",\"你现在数据库的设计上似乎有些问题\",\"你们的订单允许取消吗？\",\"如果要取消的话应该怎么设计呢？\",\"简易短视频做了哪些东西\",\"用户登录的处理流程是怎么个样子\",\"接收登录请求是HTTP吗\",\"HTTP里面登录的状态保持是怎么做的？\",\"怎么判断JWT的合法性\",\"JWT里面保持了哪些东西？数据结构大概是什么样子？\",\"JWT和普通的Session的方式有什么区别？\",\"session的方式了解过吗？\",\"使用JWT要实现一个状态只能一个设备登录，这应该怎么做呢？\",\"怎么设置JWT的校验不通过呢？\",\"JWT对于登录数量有要求的就很痛苦\",\"Java的双亲委派，为什么要这么设计呢？\",\"类如果重复加载会有什么问题呢？\",\"有遇到过非双亲委派模型的场景吗？\",\"类加载的过程一般会做哪些事情？每一步具体都在做些什么呢？\",\"对JVM的调优有了解过吗？\",\"说说你对Redis的了解\",\"bitmap是个什么样的东西\",\"项目里的Redis是怎么用的？\",\"抢单为什么会有库存数量\",\"使用Redis防止超卖的流程是怎样的，会不会有并发的问题？\",\"递减是怎么操作的？\",\"这样会不会有问题，递减完成时的并发判断库存大小的时候出问题，因为递减和判断不是原子性的\",\"ThreadLocal的作用\",\"什么样的情况下会使用ThreadLocal？\",\"后面怎么使用的？\",\"这么设计（使用ThreadLocal）的原因？目前来说ThreadLocal是能不用就不用的\",\"内部起个线程池，这时能拿到ThreadLocal的内容吗？\",\"SpringCache和Redis有什么区别？（考虑业务上的合理性）\",\"MySQL有哪些储存引擎了解吗？有什么区别\",\"聚簇索引和非聚簇索引有什么区别？\",\"回表的优化了解过吗？\",\"为什么不要使用select * 呢？\",\"没有被索引覆盖是什么？\",\"什么是索引下推\",\"反问\"]},\"593\":{\"h\":\"二面（电话面）\",\"t\":[\"自我介绍\",\"这里面比较有挑战的是哪个系统\",\"在Redis里怎么做库存的扣减\",\"怎么保证是不超卖的呢\",\"面试官举了个例子表示对Redis递减防止超卖的不理解\",\"HashMap底层是什么数据结构组成的\",\"红黑树有什么好处\",\"28个元素放到HashMap里面，那么HashMap初始化的容量为多少比较好\",\"初始化了一个固定线程数的线程池，线程数是5个，把6个任务扔进去，线程池怎么处理\",\"MySQL有个表，里面四个字段有abc三个字段，d是主键，我要查询ab，条件是bc，这时怎么设计索引\",\"什么是回表\",\"假设还是这个表，数据量很大，这时要做分页，每页100条，你怎么设计这个查询语句\",\"子查询怎么设计\",\"比如要查第10000页，你会怎么写这个sql\",\"用过limit查询吗\",\"项目里Redis防止超卖的方案，Redis就类似一个锁了\",\"解释缓存穿透和缓存雪崩\",\"上述情况的解决方案\",\"刷新视频时系统会推荐20条用户没看过的视频，这时怎么设计会让性能更优呢\",\"考虑位图或者布隆过滤器，使用二进制数组来保存视频，实现筛选没看过的视频\",\"笔试题：输出每个url最多的访问次数（类似华子实习笔试第一题，但是简单一些）\",\"反问\"]},\"594\":{\"h\":\"阿里\",\"t\":[\"分别介绍一下MySOL、ES、Mongo数据库各自的特点以及适合的使用场景是什么?\",\"倒排索引了解吗?\",\"ES的分页功能有什么特性?\",\"ES的分词检索?\",\"Kafka与Zookeeper是什么关系?\",\"多个同样的消息被发送到Kafka如何控制他们只消费一个?\",\"什么是Kafka的羊群效应 ?\",\"Redis相比Memcached有哪些优势?\",\"阐述缓存穿透?怎么解决?\",\"什么是bigkey?会有什么影响?\"]},\"595\":{\"h\":\"阿里外包/一面\",\"t\":[\"自我介绍\",\"遇到过高并发？（网站大访问量用redis缓存，表单做提交）\",\"进程、线程、协程（随便说说）\",\"go的协程设置原理（说了gmp模型）\",\"go的锁,用到什么锁（mutex、rwmutex）\",\"锁怎么实现的，有没有看过源码（莫得）\",\"innodb和myisam区别（事务支持、查询速度、表文件结构、外键支持、innodb有主键，查询效率高）\",\"为什么查询效率高（叶子节点存储索引和数据，避免回表二次查询）\",\"mysql优化（说了分表和覆盖索引）\",\"explain关注的字段（命中索引、可能命中索引、全表扫描、用到覆盖索引）\",\"redis和kafka的区别（说了redis和kafka的特点）\",\"用过k8s吗（没）\",\"mysql的版本控制（说了mvcc，以及怎么实现的）\",\"前期用php?(公司转型）\",\"php和go哪个好用（说了go协程用起来方便，php的麻烦一点，编译型语言，安全比php明文安全）\",\"goroutine+channel依次输出小猫小狗100次（设置猫狗channel，先读猫channel输出，狗输出的时候先读猫channel来保证顺序，没说好这一块）\",\"map怎么用？线程安全？怎么扩容？（不是安全的，用sync.map安全，说了双倍扩容）\",\"怎么解决他的哈希冲突？（重新扩容、哈希函数重新生成）\",\"设计模式（说了单例模式、策略模式）\",\"php用什么框架（tp、laravel）\",\"laravel的依赖注入\"]},\"596\":{\"h\":\"蚂蚁\"},\"597\":{\"h\":\"工具开发一面（电话面）\",\"t\":[\"自我介绍\",\"项目背景\",\"JMeter做了压测，压测是怎么设计的\",\"500压测线程的设置和服务器以及JVM的规格和设置有什么关系吗\",\"优化了50%，那么优化点主要体现在哪里呢\",\"RabbitMQ在写DB时如果出现了异常，导致了数据不一致，有什么补偿的机制吗\",\"在线程池中线程复用的情况下，ThreadLocal会不会有什么问题\",\"代码里面会是什么时机做ThreadLocal的remove呢\",\"在使用AOP的时候，对于接口会有一些规范的要求吗？比如方法签名中的参数会不会有一些规范？\",\"如果要依赖一些参数做做一些权限的控制的话，对于参数的规范会有一些怎样的考虑\",\"具体讲一下使用逻辑过期方案解决Redis的缓存击穿问题\",\"这个跟Redis里面看门狗的机制有什么区别吗\",\"如果内存不够大了会选择使用什么方案来解决呢（逻辑过期不让缓存过期）\",\"如果是要开一个线程来同步数据库从而解决逻辑过期的话，新开的线程与其他读取缓存的线程之间的协作关系怎么处理呢\",\"JDK的类库里面有没有了解到可以做线程之间协作关系的\",\"除了synchronized还有其他更加灵活的方案吗？\",\"怎么理解乐观锁和悲观锁的\",\"怎么考量用乐观锁还是悲观锁的？\",\"项目中有没有遇到JVM相关的问题，比如内存溢出等问题\",\"万一有OOM或者线程卡住了，我们排查的手段和步骤是怎么样的？\",\"在设置JVM参数的时候，考虑机器有4G的内存，那我设置会有什么样的原则吗\",\"对自己职业的预期，更偏向算法还是更偏向工程\",\"互联网+的比赛做的是什么？控制平衡还是视觉识别\",\"对于具象智能有什么想法吗\",\"算法题：使用多线程统计一个文件中不同的词出现的次数，记不清了\",\"反问\"]},\"598\":{\"h\":\"工具开发二面（电话面）\",\"t\":[\"自我介绍\",\"这三个项目的时间顺序\",\"项目背景\",\"Java的list有哪些以及他们的区别和原理\",\"HashMap和HashTable的区别\",\"一个类在JVM的生命周期，按照这个说一下类的加载过程\",\"验证这个阶段会加载到JVM的内存结构的哪个部分去\",\"用过命令去打过jar包吗\",\"介绍双亲委派机制\",\"有自己写一个类加载器吗\",\"知道可以拓展类加载器吗\",\"说一下对于AOP和IOC的理解\",\"AOP的实际的应用有哪些\",\"SpringBoot你常用的注解有哪些\",\"有了解过注解的原理吗？注解的本质是什么\",\"Spring里面有很多SDK，你常用的有哪些？比如MyBatis\",\"这块原理有了解过吗\",\"这里有没有对哪一块比较熟悉并且研究过原理的\",\"设计模式有了解过吗\",\"数据库索引的原理了解吗\",\"讲一下你对b+树的理解\",\"项目中有遇到过一些慢sql的情况吗\",\"除了explain还有其他定位慢sql的方式吗\",\"一般是什么原因会导致慢sql\",\"介绍项目中Redis是怎么用的\",\"Redis是单线程还是多线程的\",\"Redis的持久化有了解过吗\",\"有没有了解过Redis的集群\",\"数据库这块除了MySQL有没有了解过Mongo\",\"Redis里面的事务原理有了解过吗\",\"Redis的缓存穿透、雪崩怎么解决\",\"shell这一块有了解吗\",\"大模型这块有了解过相关的技术或者产品吗\",\"transform有了解过吗\",\"你觉得你过去做的最有挑战的事是什么\",\"你觉得你成就感最大的事情是什么\",\"自己的性格有测过吗MBTI\",\"对base地有要求吗\",\"手头有其他offer吗？对蚂蚁这边的意向怎样\",\"反问\"]},\"599\":{\"h\":\"工具开发三面\",\"t\":[\"自我介绍\",\"论文的层次，参加的比赛，专利\",\"介绍实验室的科研项目\",\"已经拿到的offer，base选择\",\"为什么不继续科研方向\",\"参加过开源项目吗？github有账号吗\",\"为什么没有参加实习\",\"项目的收获\",\"项目收获比较大的地方\",\"反问\"]},\"600\":{\"h\":\"百度\",\"t\":[\"1.GMP模型?\",\"2.协程创建后如何调度?\",\"先进入p的私有队列, 如果满了, 进入全局队列\",\"3.context的结构和用法\",\"4.一次url的请求过程?\",\"5.请求到达项目服务器后的调用链路\",\"6.nginx是否为单例的.\",\"7.算法: 两数相除\",\"8.平时mysql优化的案例?\",\"9.in, exist的使用\",\"10.联合索引\",\"11.binlog日志\",\"12.分布式事务: 下游两个db使用redis, 需要更新这两个不同的db, 如何自己实现最终一致性\",\"13.两阶段提交, 三阶段提交?\"]},\"601\":{\"h\":\"百度后端研发工程师\",\"t\":[\"自我介绍\",\"操作系统处理死锁的方法\",\"操作系统内存管理的方法\",\"Redis持久化\",\"Memcache知道吗\",\"使用shell统计文件中top3的ip地址\",\"磁盘满了写不进去，排查命令\",\"找出文件夹中最大的几个文件，命令是什么\",\"说-下ES和Redis的区别\",\"编程题 //Go两个goroutine交替打印1-10 //G1 1 //G2 2 //G1 3 //G2 4 //.. //G1 9 //G2 10\"]},\"602\":{\"h\":\"京东 golang\"},\"603\":{\"h\":\"一面 60min\",\"t\":[\"讲一下项目\",\"go语言的掌握程度\",\"数据结构\",\"空间利用率提高，但是发生冲突的可能性也增大了\",\"go语言的map\",\"拉链法的优缺点\",\"拉链法如何优化\",\"负载因子调到1会有什么后果\",\"数据库\",\"数据库索引有哪些\",\"ql建表\",\"设计一张字生表：表需求是可以记录学生姓名、出生日明、手机 号、是否在读。邮箱。家庭地址、生表现评价 常见查询条件为姓名、出生日期、手机号、是否在读\",\"这个表有什么缺陷\",\"新加一个学号字段要考虑什么\",\"数据库四大特性\",\"innodb默认隔离级别\",\"rr是怎么实现的\",\"网络\",\"tcp三次握手\",\"ip位于哪层？icmp位于哪层？ping命令位于哪层？\",\"telnet是什么操作？位于哪层？\",\"https加密过程 (这个我不太清楚 如果有大佬知道 麻烦评论区指点一下)\"]},\"604\":{\"h\":\"二面 35mn\",\"t\":[\"二面面试官：\\\"看你简历感觉你对go的接触程度不是特别深 你需要在接下来的过程中说服我\\\"\",\"对哪些语言比较熟悉\",\"为什么很多大厂都用go\",\"说一说对slice的认识\",\"slice如何做深拷贝\",\"数据库\",\"如何避免回表\",\"标识性差的字段一定不能做索引列吗？\",\"标识性差的字段为什么不能用来做索引列？\",\"b和b+树的区别\",\"mysql默认隔离级别\",\"rr如何解决不可重复读\"]},\"605\":{\"h\":\"京东\"},\"606\":{\"h\":\"一面\",\"t\":[\"算法题：leetcode16.最接近的三数之和，leetcode234.回文链表，leetcode72.编辑距离\",\"自我介绍\",\"前面两个项目是自己发起的还是什么契机去做这个项目的\",\"ThreadLocal怎样保证其线程安全\",\"怎样保证多线程来使用他？？\",\"如果主线程中有信息，其他线程怎么获取主线程中的信息\",\"项目中Redis哪些地方用到了\",\"Redis的哪些操作有原子性\",\"除了递减指令还有哪些指令具有原子性呢\",\"两个项目里面你觉得那部分是有技术难点的\",\"超卖问题还有什么别的解决方案呢\",\"如果是两个应用都要写数据库，加锁怎么解决超卖问题呢\",\"聊一聊乐观锁和悲观锁\",\"两种锁各自的应用场景\",\"ArrayList和LinkedList说一说吧\",\"String类可以被继承吗？为什么？\",\"JVM的组成部分\",\"说一说使用的垃圾回收器\",\"G1垃圾回收期和CMS的改进或者说不一样的地方\",\"G1的分区，有哪些区（堆的分区）\",\"G1的清除算法\",\"什么情况下会产生full GC\",\"原空间是用来做什么的？\",\"TCP的四次挥手是怎么样的\",\"为什么要等待\",\"有没有主动去了解过一些新的技术？\",\"从大学到现在做的最有成就感的事情\",\"第三个项目是主导地位？可以安排别人的工作\",\"你觉得你的优势是什么\",\"学习成绩怎么样\",\"反问\"]},\"607\":{\"h\":\"二面\",\"t\":[\"自我介绍，介绍一个项目\",\"这两个项目是自己开发的还是给公司做的\",\"哪个项目是自己承担的更多\",\"超卖问题是怎么发现的，解决思路，怎么找到的方案\",\"网上的成熟方案你觉得有没有更好的方案或者现有的方案有没有什么问题\",\"Redis失效后怎么保证与数据库中数据的一致性\",\"Redis持久化可以解决这种突发的情况吗？这个没有调研过吗\",\"一般去哪里找这些解决方案，不同地方有什么倾向性吗\",\"做的这两个项目里面比较大的收获是什么\",\"这个项目后面会继续做吗\",\"自己对未来一两年的规划是怎样的\",\"行业或者技术方向会有考虑吗\",\"为什么是Java和Go呢\",\"当前行业的语言都了解过哪些\",\"你觉得自己的最大的优势是什么\",\"反问\"]},\"608\":{\"h\":\"京东一面 （30min ）\"},\"609\":{\"h\":\"微服务中间件开发部门\",\"t\":[\"自我介绍\",\"实习项目中确保结果准确性\",\"实习项目上游数据有问题怎么办\",\"Golang new 和make的区别\",\"为什么多协程优化，不使用协程呢？\",\"实习项目过程中还有什么可以优化的地方\",\"微服务的优势，为什么用微服务\",\"怎么确保线程安全\",\"信号量和锁的区别\",\"你有什么问题吗？\"]},\"610\":{\"h\":\"PDD 一面/Java\",\"t\":[\"MySQL\",\"提交了怎么样的事务有可能导致死锁\",\"怎样用？什么情况使用\",\"数据同步怎么实现\",\"使用null作为条件查询问题\",\"最左前缀原则\",\"索引下推、索引覆盖\",\"join原理实现\",\"索引设计讲究/原则\",\"聚簇索引\",\"InnoDB为什么建议用自增整数作为主键\",\"MySQL内存磁盘同步机制\",\"数据页在内存中是完整的数据吗？\",\"分库分表\",\"MySQL主从架构\",\"MySQL什么时候会死锁\",\"表中有业务主键、逻辑删除标志，逻辑删除后又插入同样的一条记录，平衡业务主键和逻辑删除的问题\",\"项目工程\",\"业务背景\",\"系统QPS\",\"项目中算法如何使用\",\"项目中的架构设计有何问题\",\"业务修改后 MySQL、Redis数据如何更新\",\"如何进行数据持久化\",\"哪一部分占比较高\",\"如何重新设计MySQL、Redis架构\",\"设计模式（工程上使用）\",\"单体应用多层异常处理原则（异常管理原则）\",\"Redis、MySQL配合使用，如何确保数据一致性\",\"项目介绍\",\"系统故障问题、如何解决\",\"服务器部署情况\",\"代码迭代过程中防止代码腐化\",\"关注的业务指标\"]},\"611\":{\"h\":\"PDD服务端开发\",\"t\":[\"自我介绍\",\"项目的各种细节\",\"服务发现一般可以怎么做!\",\"InnoDB 引擎的特性\",\"MySQL 数据库支持高并发的读写，设计上有哪些可以用的方案?\",\"了解哪些缓存淘汰策略?\",\"go 的 defer 机制\",\"go 的 map 是有序还是无序?为什么?\",\"GET、POST 区别\",\"HTTP 是无状态的，如何做到有状态?(cookie session)\",\"HTTPS 过程\",\"算法题:\",\"LRU\",\"LeetCode 62 不同路径\"]},\"612\":{\"h\":\"酷狗音乐\"},\"613\":{\"h\":\"一面\",\"t\":[\"mysql存储引擎?\",\"mysql隔离级别? 分别解决了什么问题?\",\"2pc, 3pc 算法\",\"10亿个数据获取前100个最大数据?\",\"单个表到达多大要进行拆分? 为什么需要拆表?\",\"redis哪些使用场景?\",\"服务的熔断降级?\",\"平时如何提升和学习?\",\"TCP和UDP可以绑定同一个端口吗?\",\"linux如何查看cpu, 内存负载?\",\"进程间通信有哪些方式?\",\"redis的数据类型?\",\"redis和mysql的一致性问题?\"]},\"614\":{\"h\":\"二面\",\"t\":[\"项目中涉及到哪些监控? prometheus\",\"队列出现消息积压, 如何处理?\",\"消息幂等性?\",\"一个sql语句, 已经建立了索引, 但是突然查询很慢, 如何排查?\",\"索引失效场景?\",\"mysql如何解决的幻读?\",\"select ... for update: 保证当前事务中查询的范围加锁, 不被其它事务修改\",\"做索引优化, 如何减少回表次数--索引下推\",\"索引下推: 指将上层(服务层)负责的事情, 交给下层(引擎层)处理.\",\"不使用索引下推: 根据索引中的主键值, 定位并读取完整的行记录, 然后将记录交给server层去检测该记录是否满足where条件\",\"使用索引下推: 获取索引, 判断索引是否符合条件范围, 如果满足, 再进行对应的回表查询获取主键, 如果不满足, 直接过滤掉\",\"分布式事务, 二阶段提交, 三阶段提交的区别?\",\"linux查看网络io的命令? netstat\",\"如果出现大量time-wait状态, 如何处理?\",\"网络的拥塞控制?\"]},\"615\":{\"h\":\"b站外包/go开发/一面\",\"t\":[\"自我介绍\",\"在百度什么级别？t几？（没有技术级别，当时忘记自己是什么级别了，说了个m，然后他说m是经理hhh）\",\"怎么设计一个api的（没答好，已读乱回）\",\"怎么去防那个ddos（redis限流+nginx层做处理，最后还是花钱买服务）\",\"怎么部署那个安全拦截服务的（领导买了，在控制台做的服务，点点点）\",\"cdn的理解（加快访问速度之类的，问我还有没有别的，我说没有）\",\"负载均衡怎么做的（领导在控制台点点点）\",\"说项目没难度（我说是，不像b站外包用到这么多技术）\",\"分表是怎么分的\"]},\"616\":{\"h\":\"b站外包\",\"t\":[\"旋转数组\",\"mysql索引相关。\",\"B+树有什么特点？\",\"为什么不用B树（查询的速度差不多，因为b+树数据都在叶子节点）。\",\"非聚簇索引和聚簇索引的区别。\",\"索引为什么要用id不用字符\",\"Linux相关命令和场景\",\"docker和k8s\"]},\"617\":{\"h\":\"360 一面\",\"t\":[\"协程池的作用?\",\"内存逃逸分析?\",\"go的内存回收什么条件会触发? go的GC能够手动触发吗?\",\"channel的底层实现? 有缓冲的,无缓冲的channel, 如果管道已经关闭了, 读取会不会发生错误?\",\"切片使用的时候需要注意什么?\",\"go中的参数传递是值传递还是引用传递?\",\"defer的执行顺序?\",\"100G的文件, 统计出所有英文字母, 按照字母表顺序输出\",\"linux如何分割文件?\",\"接口性能如何优化?\",\"什么情况会全表扫描?\",\"主丛同步的原理? mysql还有什么相关的log文件?\",\"分布式锁的原理?\"]},\"618\":{\"h\":\"360 二面\",\"t\":[\"自我介绍\",\"实现LRU算法\",\"这个lru算法用在生产环境会出现什么问题\",\"如果十万个线程同时put，会出现什么问题\",\"如何控制并发，加什么锁，读写锁还是互斥锁\",\"进程、线程、协程\",\"程序从加载到运行的过程\",\"为什么线程消耗比协程大，具体体现在哪些方面\",\"生产中哪些服务用的 进程、线程，为什么要这么做，有什么好处（今天第二次问到）\",\"nginx master-worker进程、进程与redis 进程、线程\",\"数据库事务，隔离级别\",\"各个隔离级别怎么实现的，原理\",\"RR能解决幻读吗，为什么\",\"MVCC\",\"数据库中的锁\",\"乐观锁、悲观锁适用于什么情况，并发，读多写少\",\"分布式锁\",\"zookeeper、mysql、redis 、etcd 怎么实现分布式锁，各有什么优缺点，生产中一般用那个\",\"zookeeper原理，怎么保持高可用\",\"tcp三次握手、四次挥手\",\"timewait、closewait出现，怎么处理\",\"tcp调优相关参数\",\"拥塞控制算法、滑动窗口、零窗口报文\",\"http1.0 - http3.0 改进，优缺点\"]},\"619\":{\"h\":\"360 三面\",\"t\":[\"说说 Linux 常用操作，ps 是干嘛的\",\"Go map 为什么是无序的？\",\"MySQL 索引分类，索引的优点和缺点\",\"分库分表\",\"Cookie 和 Session 的区别和应用，分布式 Session 的实现\",\"TCP三次握手/四次挥手\",\"Redis 的数据类型及其数据结构，Bitmap 是什么\",\"Redis 的雪崩效应 ，是什么，怎么解决\",\"线程，进程，协程区别\",\"算法：用 Go 手撕快速排序\"]},\"620\":{\"h\":\"好未来\",\"t\":[\"为什么要自己实现大顶堆? 大顶堆和小顶堆的使用场景?\",\"如何利用堆, 获取第k大的元素? 堆如何删除某一个特定的节点? 大顶堆如何转换为一个小顶堆?\",\"引入mq, 实现异步提速, 如何理解?\",\"协程池使用的是第三方包吗? 如果自己实现一个协程池, 描述你的思路?\",\"recover能捕获到其它协程的panic吗?\",\"说一下对grpc的理解? grpc互相调用, 如何实现互相的权限验证和授权?\",\"http2.0 的tsl三次握手过程?\",\"grpc中, 如果客户端需要向服务端发送大文件, 如何实现? (使用客户端流模式)\",\"http2.0的相关特性? 其中的多路复用为了解决什么问题? (解决对头阻塞问题)\",\"grpc中的deadLine和timeout, 应该怎么用? grpc的流控是如何处理的? 滑动窗口控制发送和接收速速率?\",\"go-zero中的服务熔断和限流是怎么做的?\",\"以下两个代码片段输出的结果:\",\"func test() int { result := 1 defer func() { result++ } return 0 } func test() (result int) { result = 1 defer func() { result++ } return 0 }\"]},\"621\":{\"h\":\"深信服\",\"t\":[\"slice原理 底层数据机构\",\"map 原理 底层数据结构 _ a.扩容机制 b.并发会导致什么问题？为什么？ c. Map的key是有顺序的？为什么？ d. 能否实现map key的序\",\"Go垃圾回收，算法 三色标记是哪三色，分别代表什么？\",\"堆和栈区别？内存何时分配在栈上？何时分配在堆上？\",\"如何保证缓存一致性？\",\"redis 有哪些数据结构？常见用途\",\"虚拟机和docker区别 Docker 底层原理 通过什么实现\",\"二叉树前序中序后序遍历怎么回事？\",\"写代码实现两个协程交替打印100以内数字\",\"Mysql如何优化慢查询\",\"Shell命令考察 a.如何判断一台服务器还是活的 B. 给一个文本文件 取出其中特定的列数据 然后排序\",\"kafka如何保证消息不丢失\",\"udp报文头部有哪些字段？\"]},\"622\":{\"h\":\"北京贝壳外包\",\"t\":[\"自我介绍\",\"项目拷打\",\"Redis 跟 MySQL 以及 Kafka 之间是什么关系?\",\"Kafka partion的概念\",\"Kafka 偏移量\",\"比如说有你在线上发现一条慢SQL，你怎么分析它?\",\"索引的最左前缀原则是什么意思?a>1and b=1andc=1,你看这个能命中这个索引吗?\",\"Redis 常见的数据结构?他们的应用场景?\",\"zset 你一般在什么场景下会用?底层的数据结构是什么?\",\"JWT 是什么东西?\",\"协程了解吗?和线程对比\",\"一道算法题\",\" 找到具有最大和的连续子数组，并返回该子数组\",\"编程颖\",\" 用两个协程，两个channel分别接收1，2，并打印\"]},\"623\":{\"h\":\"网易外包/Go后端开发\"},\"624\":{\"h\":\"一面\",\"t\":[\"自我介绍\",\"mysql查询慢是什么原因（没索引、表数据量大、死锁）\",\"mysql插入慢什么原因（表数据量大，sql语句多，表索引量大）\",\"抽奖逻辑是怎么样的\",\"怎么实现用户登录\",\"用户登录安全有了解过吗（乱说一通）\",\"redis击穿\",\"redis穿透\",\"redis其他数据结构有用过吗？hmap、zet\",\"短信发送失败怎么处理的（记录发送状态+重试机制）\"]},\"625\":{\"h\":\"二面\",\"t\":[\"自我介绍\",\"cms系统0-1开发的？（开源框架二次开发）\",\"做了哪些功能（栏目、文章、配置、模型管理之类的）\",\"登录的过程说一下\",\"session登录有什么弊端，怎么改（多台服务器拿不到session，用redis做缓存）\",\"客户端拿着token，你是怎么通过token获取客户的信息（校验token，获取token作为key的信息）\",\"有没有难一点的功能，说一下（没有，单体项目量不大，只是业务复杂度的难，技术上的难点没有）\",\"用户信息怎么做加密，token怎么生成之类的（md5+拼接指定的key或者之类的）\",\"200个券码，发送客户，怎么设计？（分布式锁，数据库唯一索引兜底）\",\"还可以怎么优化（redis布隆过滤器，避免大量重复请求，处理逻辑做幂等方案）【睡不着想起来还可以做mysql的乐观锁，数据做缓存预热，减轻数据库请求压力】\",\"长连接做成短连接，怎么设计，怎么做到短连接唯一（说了和自己的 短信生成方法（用户id活动id，二进制），php的uuid，时间戳，uuid截取？引用第三方库之类的）\",\"面试官说要短的，要唯一的，答不出来\"]},\"626\":{\"h\":\"面经详解跳转链接\",\"t\":[\"腾讯校招面经详解\",\"腾讯互娱面经详解\",\"腾讯后台秋招面经详解\",\"腾讯面经详解\",\"好未来面经详解\",\"PDD面经详解\",\"PDD服务端开发面经详解\",\"百度面经详解\",\"百度面经详解2\",\"百度面经详解3\",\"阿里校招面经详解\",\"阿里社招面经详解\",\"贝壳外包面经详解\",\"字节跳动面经详解\",\"字节跳动面经详解2\",\"字节跳动面经详解3\",\"得物面经详解\",\"美团面经详解\",\"深信服面经详解\"]},\"627\":{\"c\":[\"golang\"]},\"628\":{\"h\":\"对象池\"},\"629\":{\"h\":\"对象池\",\"t\":[\"基本概念\",\"Sync.Pool是一个可以存储和复用的临时对象的容器，它能够有效减少 GC 压力和内存分配，\"]},\"630\":{\"h\":\"对象池的应用-内存优化\",\"t\":[\"// 示例代码 package main func Search (keyWord string) []int { result := make([]int,0) for i:=0; i<10000; i++{ result = append(result,i) } return result } // 基准测试 package main import \\\"testing\\\" func BenchmarkSyncPool (b *testing.B){ for i:=0; i<b.N; i++{ result := Search(\\\"\\\") _ = result //使用result } }\",\"使用命令执行基准测试：\",\"go test ./basic -bench=^BanchmarkSyncPool$ -timeout=3m -count=1 -benchmem -run=^$ -cpuprofile=data/cpu1 -memprofile=data/mem1 # 解释： 1、`go test` - Go 语言的测试命令行工具 2、`./basic` - 测试目标目录，这里是 basic 目录 3、-bench=^BanchmarkSyncPool$ -bench 参数用于运行基准测试,后面是一个正则表示（^开头$结尾），即只运行文件名匹配的基准测试 4、`-timeout=3m` - 设置测试超时时间为 3 分钟,如果测试运行时间超过 3 分钟将被强制终止 5、`-count=1` -指定基准测试运行的次数 6、`-benchmem` -在基准测试结果中包含内存分配统计信息,包括内存分配次数和分配的字节数 7、-run=^$ -这里用一个空的正则表示，可跳过单元测试，只运行基准测试 8、`-cpuprofile=data/cpu1` -生成CPU性能分析文件并保存到data/cpu1文件，方便后期使用go tool pprof来分析文件 9、`-memprofile=data/mem1` -生成内存性能分析文件并保存到data/mem1文件，方便后期使用go tool pprof来分析文件 即使用测试命令只运行指定名字的基准测试，并生成性能分析文件，方便后期查看分析\"]},\"631\":{\"c\":[\"golang\"]},\"632\":{\"h\":\"面试题（答案）\"},\"633\":{\"h\":\"腾讯一面\",\"t\":[\"协程池的作用?\",\"内存逃逸分析?\",\"go的内存回收什么条件会触发? go的GC能够手动触发吗?\",\"channel的底层实现? 有缓冲的,无缓冲的channel, 如果管道已经关闭了, 读取会不会发生错误?\",\"切片使用的时候需要注意什么?\",\"go中的参数传递是值传递还是引用传递?\",\"defer的执行顺序?\",\"100G的文件, 统计出所有英文字母, 按照字母表顺序输出\",\"linux如何分割文件?\",\"接口性能如何优化?\",\"什么情况会全表扫描?\",\"主丛同步的原理? mysql还有什么相关的log文件?\",\"分布式锁的原理?\",\"1. 协程池的作用? 协程池主要用于控制和复用大量的轻量级线程（协程），从而减少频繁创建和销毁协程的开销。协程池限制了同时运行的协程数量，并根据任务的数量动态调整，防止协程数量过多导致系统资源（如内存）过度消耗。 作用： 资源管理：避免创建过多协程消耗系统资源。 任务调度：将任务按需分配到协程池中的协程中执行，增加并发度。 性能优化：通过复用协程，减少协程创建和销毁的开销。 2. 内存逃逸分析? 内存逃逸分析是 Go 编译器在编译时进行的一项优化技术。它用于分析变量的生命周期，判断一个变量是否逃逸到堆上。 逃逸到堆：当一个变量的引用被返回到函数外部，或者存在多线程的共享情况时，变量会逃逸到堆上，不能使用栈空间进行管理。 优化：通过逃逸分析，Go 编译器可以决定将某些变量分配到栈上而不是堆上，从而减少 GC 的负担，提高性能。 3. Go 的内存回收触发条件及手动触发 GC 内存回收触发条件： Go 的垃圾回收（GC）基于 标记-清除 算法，主要依赖于 堆内存的分配量 和 可达对象的数量。 当堆内存达到一定的阈值时（即触发垃圾回收），Go 会启动 GC 过程。 另外，GC 还会在内存分配的增量超过一个特定比例时触发。 手动触发 GC： 可以通过 runtime.GC() 来手动触发垃圾回收，通常不推荐这么做，除非有特殊需求（比如在内存泄漏怀疑时排查）。 4. Channel 的底层实现? 有缓冲的、无缓冲的 Channel，管道关闭后的读取行为 底层实现： Go 的 channel 是通过 环形缓冲区 来实现的。对于无缓冲的 channel（同步 channel），发送操作会阻塞直到另一个 goroutine 进行接收；而对于有缓冲的 channel，发送操作只有在缓冲区已满时才会阻塞。 管道关闭后的读取行为： 无缓冲 channel：如果管道已关闭且所有数据已被读取，后续的接收操作会返回零值，并且不会阻塞。 有缓冲 channel：如果管道已关闭且缓冲区中的数据被消费完，后续接收会返回零值，并且不会阻塞。若缓冲区中仍有数据，接收操作会继续读取数据直到缓冲区为空。 5. 切片使用时需要注意什么? 容量问题：切片有容量和长度的区别，修改切片的长度时，如果超过了容量，会导致新的切片分配内存。 切片扩容：切片扩容时，会分配新的内存，并可能导致指向旧切片的引用失效。 切片的共享内存：切片底层数组是共享的，修改切片元素时可能会影响到其他切片（指向同一底层数组的切片）。 避免内存泄漏：切片扩大时，旧的切片如果不再使用，容易造成内存泄漏。 6. Go 中的参数传递是值传递还是引用传递? 值传递：Go 的函数参数默认是值传递，即传递的是变量的副本。 引用传递：如果传递的是指针，实质上是引用传递，函数内部修改指针所指向的值会影响原始数据。 7. defer 的执行顺序? 执行顺序：defer 语句的执行顺序是 后进先出（LIFO） 的。即当函数执行结束时，所有的 defer 语句会按照定义的顺序逆序执行。 例如： func example() { defer fmt.Println(\\\"first\\\") defer fmt.Println(\\\"second\\\") } 执行时会先输出 second，再输出 first。 8. 100G 的文件，统计出所有英文字母，按照字母表顺序输出 思路：逐行读取文件，统计每个字母的出现频次，然后按照字母表顺序输出结果。 package main import ( \\\"fmt\\\" \\\"os\\\" \\\"bufio\\\" \\\"strings\\\" ) func main() { file, _ := os.Open(\\\"bigfile.txt\\\") defer file.Close() counts := make(map[rune]int) scanner := bufio.NewScanner(file) for scanner.Scan() { line := scanner.Text() for _, char := range line { if char >= 'a' && char <= 'z' { counts[char]++ } } } if err := scanner.Err(); err != nil { fmt.Println(err) } for letter := 'a'; letter <= 'z'; letter++ { fmt.Printf(\\\"%c: %d\\\\n\\\", letter, counts[letter]) } } 9. Linux 如何分割文件? 可以使用 split 命令来分割大文件。例如： split -b 10M largefile.txt part_ 这将把 largefile.txt 按 10MB 大小分割成多个文件，前缀为 part_。 10. 接口性能如何优化? 避免频繁的类型断言：类型断言的性能较差，尽量避免在性能关键路径中频繁使用。 接口缓存：尽量避免在接口类型的集合中进行频繁的类型转换操作。 具体类型替代接口：在性能敏感的地方，考虑使用具体类型而非接口，以避免接口的额外开销。 11. 什么情况会全表扫描? 没有索引：查询条件没有对应的索引，数据库只能扫描整个表。 不使用索引：查询条件虽然有索引，但由于查询条件设计不合理（比如范围查询），数据库无法利用索引。 强制全表扫描：有时为了避免不合理的索引使用，数据库可能强制执行全表扫描。 12. 主从同步的原理? MySQL 还有什么相关的 log 文件? 主从同步原理： 主服务器将修改写入到二进制日志（binlog），然后从服务器读取 binlog 并执行相应的操作以保持数据一致性。 相关 log 文件： binlog：记录所有对数据库的修改操作（INSERT、UPDATE、DELETE）。 relay log：从服务器读取并执行的 binlog 内容。 error log：记录 MySQL 启动、停止以及错误信息。 slow query log：记录执行时间较长的 SQL 查询。 13. 分布式锁的原理? 原理：分布式锁用于在多个分布式系统中确保同一时刻只有一个系统或服务能够访问某资源。常见的实现方式包括： 基于数据库的锁：通过数据库表记录锁状态，其他节点通过查询锁表来竞争资源。 基于 Redis 的锁：使用 Redis 的 SETNX 命令或者 Redlock 算法来实现分布式锁。 基于 Zookeeper 的锁：通过创建临时有序节点来实现分布式锁。\"]},\"634\":{\"h\":\"腾讯二面\",\"t\":[\"项目拷打15分钟\",\"Kafka的消息丢失和消息重复消费。\",\"Kafka和Rabbitmq的区别在哪？（架构、推和拉）\",\"拉的模式有什么好处（控制消费速度）\",\"使用分布式锁的过程中应用挂了？\",\"优雅启停+defer\",\"使用过期时间+自动续期\",\"对象存储和文件存储的主要区别是什么？\",\"分片上传是怎么实现的（文件合并hash一致性校验，引出文件秒传）\",\"邮箱验证码功能怎么实现的。（redis+邮箱组件）\",\"jwt的格式。加密算法、内容、过期时间\",\"讲一下defer的原理\",\"讲一下map的底层结构\",\"map中hash冲突怎么解决（链表、红黑树）\",\"讲一下go性能调优的案例（pprof，线程日志）\",\"通过线程日志延伸出，怎么看一个线程在线程日志里是卡在循环还是事件等待？\",\"线程日志上面会有标记。\",\"讲一下mysql的事务隔离级别？\",\"解释一下什么是可重复读？\",\"事务实现的底层原理？\",\"Redis持久化机制（RDB，AOF）\",\"为什么持久化的时候是fork子进程处理\",\"讲一下docker实现容器的基本原理\",\"用过其他容器运行时吗\",\"K8s有哪些组件？\",\"1. Kafka的消息丢失和消息重复消费 消息丢失： 生产者端丢失：可能发生在 Kafka 的生产者在消息成功发送前失败，且没有开启足够的重试机制（如设置 acks=all）。 消费者端丢失：消费者读取了消息并处理完，但处理未完成时发生故障，且未提交消费进度。 解决方案：开启生产者的重试机制，使用合适的消费者提交策略（例如“手动提交”偏移量）。 消息重复消费： 消费者多次消费同一条消息。发生的原因包括消费者重复读取已提交的消息、偏移量的回退或系统重启。 解决方案：使用“幂等生产者”特性和“精确一次”语义，消费者记录偏移量并保证幂等消费。 2. Kafka和RabbitMQ的区别（架构、推和拉） Kafka： 架构：Kafka 是分布式流平台，支持高吞吐量的日志存储和消息传递。数据是以日志的形式存储到磁盘上的，消费者按需读取。 拉模式：消费者定期从 Kafka 中拉取消息。适合高吞吐量的场景。 顺序消费：消息顺序保证在单个分区内。 RabbitMQ： 架构：RabbitMQ 是传统的消息队列系统，基于 AMQP 协议，支持消息的路由、发布-订阅和工作队列模式。 推模式：消费者从 RabbitMQ 中推送消息。适合需要实时消息传递的场景。 消息路由：支持复杂的路由规则，适合多种消息传递模式。 3. 拉模式的好处（控制消费速度） 控制消费速度：消费者控制从消息队列拉取消息的频率和速度，而不是被推送控制。可以根据系统负载调整消费速率，避免消息堆积。 高效利用资源：拉模式让消费者可以主动请求数据，控制资源的分配，避免系统过载。 4. 使用分布式锁的过程中应用挂了？ 问题：应用崩溃或挂起时，分布式锁可能未释放，导致其他服务无法获取锁，出现死锁。 解决方案： 超时设置：为分布式锁设置过期时间，确保在应用崩溃时锁会自动释放。 看门狗机制：应用持有锁时，定期刷新锁的有效期。 5. 优雅启停+defer 优雅启动：确保服务初始化完成后再开始处理请求，通常需要等待外部依赖（如数据库、缓存等）就绪。 优雅停机：确保正在处理的请求完成后再关闭服务，避免中断。 使用 defer 关闭资源、解除注册服务等清理工作： func main() { defer cleanup() startServer() } 6. 使用过期时间+自动续期 过期时间：对于缓存或锁，设置过期时间防止资源无限占用。 自动续期：在资源还需要占用时，自动延长过期时间。常用于分布式锁，避免在操作过程中锁被释放。 实现方法：定时器定期检查并延长过期时间，或者采用 Redis 的 expire 命令。 7. 对象存储和文件存储的主要区别是什么？ 文件存储：传统的文件系统（如 NFS、SAN），文件存储以目录树的结构组织，适合存储大量的小文件。 对象存储：对象存储（如 AWS S3）是以对象的形式存储数据，没有目录结构。每个对象有一个唯一的标识符，适合存储大文件，具有高扩展性和持久性。 8. 分片上传是怎么实现的（文件合并、hash一致性校验，引出文件秒传） 分片上传：大文件分成多个小块（片段），每个片段单独上传，上传完毕后服务器将这些片段合并为一个完整的文件。 哈希一致性校验：上传每个分片时，计算哈希值并校验数据一致性，确保文件没有丢失或损坏。 文件秒传：通过文件的哈希值，检测文件是否已经上传过，如果上传过则跳过上传过程，直接返回。 9. 邮箱验证码功能怎么实现的（Redis+邮箱组件） 流程： 生成验证码并发送到用户邮箱。 将验证码存储到 Redis，并设置过期时间（如 5 分钟）。 用户提交验证码时，先从 Redis 中获取验证，并与用户输入的验证码进行对比。 使用 邮件发送组件（如 SendGrid, SMTP）发送验证码邮件，Redis 缓存验证码用于快速验证。 10. JWT的格式。加密算法、内容、过期时间 格式：JWT 由三部分组成：头部（header）、载荷（payload）、签名（signature）。 头部：通常包含 alg（加密算法）和 typ（token 类型）信息。 载荷：包含声明（如 sub、exp 等）。 签名：用密钥对头部和载荷进行加密，确保数据未被篡改。 加密算法：通常使用 HS256（HMAC SHA-256）或 RS256（RSA）等。 过期时间：通过 exp 字段设置 JWT 的过期时间。 11. 讲一下defer的原理 原理：defer 语句会延迟函数调用直到外围函数返回时执行，且会按照 LIFO（后进先出）顺序执行。 在调用 defer 时，传入的参数会在 defer 执行时计算（而不是在声明时计算）。 12. 讲一下map的底层结构 底层实现：Go 中的 map 是基于哈希表实现的。 哈希表的桶（bucket）存储数据，使用哈希函数将键映射到桶中。桶内的数据以链表的形式存储，若有多个相同哈希值的数据，会出现哈希冲突。 13. map中hash冲突怎么解决（链表、红黑树） 链表：传统的哈希冲突解决方式，通过在同一个桶中使用链表来存储多个具有相同哈希值的元素。 红黑树：Go 1.18 版本以后，当一个桶中的元素过多时，哈希冲突会通过红黑树进行解决，以减少查找时间复杂度。 14. 讲一下go性能调优的案例（pprof，线程日志） pprof：使用 Go 的 pprof 包来收集和分析性能数据，如 CPU、内存、goroutine 等。 示例：go tool pprof 用于分析 CPU 和内存的性能瓶颈。 线程日志：查看 goroutine 在某时刻的状态，可以帮助定位死锁、卡住的 goroutine 等问题。 15. 通过线程日志延伸出，怎么看一个线程在线程日志里是卡在循环还是事件等待？ 卡在循环：线程日志中，看到 goroutine 一直在执行某一函数的相同代码行，且没有其他阻塞操作。 事件等待：线程日志中，goroutine 会显示在某个 select 或 chan 操作上，表明它正在等待事件。 16. 线程日志上面会有标记 线程日志中的标记通常指示每个 goroutine 的状态，常见的标记包括 running、waiting、sleeping 等，用于帮助分析线程的行为。 17. 讲一下 MySQL 的事务隔离级别 隔离级别： READ UNCOMMITTED：允许脏读（读取未提交事务的数据）。 READ COMMITTED：不允许脏读，但可能出现不可重复读。 REPEATABLE READ：不允许脏读和不可重复读，但可能出现幻读。\"]},\"635\":{\"h\":\"腾讯一面（校招）\",\"t\":[\"map怎么去做并发安全\",\"外层的协程能捕获子协程的panic吗？\",\"panic都会被捕获吗？哪些panic不会捕获？\",\"slice和数组的区别？底层结构？\",\"go哪些内置类型是并发安全的？\",\"go的结构体可以嵌套组合吗？\",\"两个结构体可以等值比较吗？\",\"你如何理解interface类型\",\"1.18版本后interface有什么增强？\",\"interface可以进行等值比较吗？\",\"说说逃逸分析\",\"channel有缓冲和无缓冲的区别\",\"map并发访问会怎么样?这个异常可以捕获吗？\",\"GMP模型\",\"GMP模型中什么时候把G放全局队列？\",\"go的gc\",\"gc扫描是并发的吗？\",\"gc中的根对象是什么？\",\"项目中etcd用来干什么的？\",\"mysql索引B＋T\",\"索引的优缺点\",\"redis用来做什么的?\",\"用户信息怎么存的？都走缓存吗？\",\"redis过期淘汰策略\",\"1. map怎么做并发安全 Go 原生的 map 是不并发安全的，在多个 goroutine 中并发读写会导致程序崩溃或不确定行为。 解决方案： 使用 sync.Mutex 或 sync.RWMutex 来加锁同步访问。 使用 sync.Map，Go 提供的并发安全的 map，适合在多个 goroutine 中共享。 代码示例： var mu sync.Mutex var m = make(map[string]int) func safeMapAccess(key string) int { mu.Lock() defer mu.Unlock() return m[key] } 2. 外层的协程能捕获子协程的 panic 吗？ 外层协程无法捕获子协程的 panic。Go 的 panic 是局部的，只在发生 panic 的 goroutine 中生效。 如果你想捕获子协程的 panic，需要在子协程内使用 defer 和 recover 来处理。 示例： go func() { defer func() { if r := recover(); r != nil { fmt.Println(\\\"Recovered from panic:\\\", r) } }() panic(\\\"Something went wrong!\\\") }() 3. panic都会被捕获吗？哪些panic不会捕获？ panic 会在程序的调用栈中逐层向上冒泡，直到有 defer 和 recover 捕获到为止。 不能捕获的 panic： 如果在 main 函数中发生的 panic，并且没有 defer 捕获，程序会直接退出。 如果在协程外层没有 defer 或者 recover，则也无法捕获。 如果 panic 发生在 goroutine 启动过程中，外层的主线程无法捕获。 4. slice和数组的区别？底层结构？ 数组是固定长度的类型，一旦定义后长度不可改变，大小为编译时已知，不能动态扩展。 切片 (slice) 是对数组的抽象，提供了动态扩展的能力，底层是一个指向数组的指针，切片的长度和容量是可以动态变化的。 底层结构： 数组：连续的内存块，长度固定。 切片：包含指针（指向底层数组）、长度和容量。切片指向的是数组的一部分，可以动态增长。 5. Go哪些内置类型是并发安全的？ sync.Map：Go 1.9 引入，专为并发设计的 map 类型，适合并发读写。 atomic 包中的原子操作：如 atomic.Int32、atomic.Int64 等。 Channel（只要操作是同步的，无论有无缓冲，channel 在单个操作时是并发安全的）。 6. Go的结构体可以嵌套组合吗？ 可以，Go 支持结构体的嵌套（组合），允许一个结构体作为另一个结构体的字段。 示例： type Address struct { Street string City string } type Person struct { Name string Address // 匿名字段，自动嵌套 } 7. 两个结构体可以等值比较吗？ 可以，Go 支持结构体的比较，只要结构体中的所有字段都可以比较。 不能比较的情况： 包含无法比较的类型（如 func、map、slice）的结构体不能比较。 示例： type Person struct { Name string Age int } p1 := Person{Name: \\\"Alice\\\", Age: 30} p2 := Person{Name: \\\"Alice\\\", Age: 30} fmt.Println(p1 == p2) // true 8. 你如何理解interface类型 接口（interface）是 Go 中的一个类型，代表一组方法的集合。类型可以实现接口，而不需要显式声明。接口是 Go 的核心特性之一，它使得 Go 支持多态。 示例： type Speaker interface { Speak() string } type Person struct { Name string } func (p Person) Speak() string { return \\\"Hello, \\\" + p.Name } var s Speaker = Person{\\\"Alice\\\"} // 隐式实现 fmt.Println(s.Speak()) // 输出 \\\"Hello, Alice\\\" 9. 1.18版本后interface有什么增强？ Go 1.18 引入了类型参数（泛型），使得接口支持类型参数化。这允许你在接口中使用泛型类型，提高了灵活性和可复用性。 另外，type parameters 可以用于接口中作为类型约束。 示例： type Adder[T any] interface { Add(a, b T) T } 10. interface可以进行等值比较吗？ 可以，但有一些限制： 接口值是比较的对象时，接口内部的类型和值都必须相同。 接口值为 nil 的时候需要特别注意，nil 接口与非 nil 接口是不同的。 11. 说说逃逸分析 逃逸分析是 Go 编译器的一项优化，用来确定一个变量是否需要分配到堆上。 栈分配：如果一个变量仅在函数内部使用并且不逃逸到函数外部，则可以分配到栈上。 堆分配：如果一个变量的地址会在函数外部使用，或者在多个 goroutine 中共享，则需要分配到堆上。 12. channel有缓冲和无缓冲的区别 无缓冲 channel：发送操作会阻塞，直到接收方准备好接收数据。适用于同步任务。 有缓冲 channel：有固定大小的缓冲区，发送方只有在缓冲区满时才会阻塞，接收方只有在缓冲区为空时才会阻塞。适用于解耦任务。 13. map并发访问会怎么样?这个异常可以捕获吗？ 如果多个 goroutine 同时读写一个普通的 map，会导致程序崩溃。Go 本身没有提供机制来捕获这类错误，因此必须通过加锁来保证并发安全。 14. GMP模型 GMP（Goroutine、Scheduler、Processor）是 Go 的运行时调度模型。 G：goroutine，是 Go 中的轻量级线程。 M：机器线程，实际执行任务的操作系统线程。 P：处理器，是执行 goroutine 的上下文。每个 P 可以处理多个 G。 GMP 调度的目标是提高性能，避免过多的线程创建开销。 15. GMP模型中什么时候把G放全局队列？ 如果当前 P 上没有可执行的 G（goroutine），则 G 会被放到全局队列（Gqueue）等待分配到其它 P 上去执行。 16. Go的GC Go 使用 标记-清除算法进行垃圾回收。GC 会在后台自动进行，通过标记活动对象并清除不再引用的对象来回收内存。 Go 1.5+ 引入了并发 GC，通过分代收集和并发标记/清除来减少停顿时间。 17. GC扫描是并发的吗？ 是的，Go 的 GC 是并发的。它在后台并发地进行垃圾回收，尽量避免长时间停顿应用。GC 会通过 三色标记算法，并结合 并发标记 来提高回收效率。 18. GC中的根对象是什么？ 根对象是垃圾回收的起始点，包括： 活跃的 goroutine 栈 全局变量 本地变量（如果它们在堆上分配） 19. 项目中etcd用来干什么的？ etcd 是一个分布式的键值存储系统，通常用于存储配置数据、服务发现、分布式锁等。它的强一致性和高可用性使其成为分布式系统中常用的基础设施组件。 20. MySQL索引B＋T B+树是一种平衡的树数据结构，是 MySQL 默认的索引结构。它有以下特点： 所有值都在叶子节点，叶子节点形成一个链表。 内部节点只存储键，用于索引查找。 21. 索引的优缺点 优点： 提高查询效率，特别是对于范围查询和排序。 可以加速数据的检索操作。 缺点： 占用更多的内存。 插入、更新、删除操作较慢，因为需要更新索引。 22. Redis用来做什么的？ Redis 是一个高性能的键值对存储系统，通常用来做缓存、消息队列、会话存储、排行榜等。 23. 用户信息怎么存的？都走缓存吗？ 通常用户信息存储在数据库中，缓存用于存储常用数据和提高访问速度。大部分场景下，缓存优先，通过缓存减少数据库负载。 24. Redis过期淘汰策略 LRU：最近最少使用淘汰。 TTL：设置过期时间，时间到期自动删除。 LFU：最不常用淘汰策略。\"]},\"636\":{\"h\":\"腾讯二面（校招）\",\"t\":[\"会什么语言？\",\"tcp和udp的本质区别\",\"tcp可靠通信怎么实现的\",\"说一说拥塞控制\",\"滑动窗口的作用\",\"什么是粘包，怎么解决\",\"堆和栈有什么区别\",\"进程的进程空间是怎么样的？\",\"进程，线程，协程的区别\",\"链表额线性表的区别\",\"有序双向链表如何高效查询？\",\"kafka如何实现高吞吐的？\",\"介绍最近的项目\",\"缓存击穿，雪崩，穿透\",\"1. 会什么语言？ 用户专注于 Golang 开发，也可能有其他编程语言的知识和经验，具体可以进一步确认。 2. TCP和UDP的本质区别 TCP（传输控制协议）是一种面向连接的协议，提供可靠的数据传输。它保证数据的顺序和完整性，使用 三次握手 建立连接，并在数据传输中进行重传、校验和流量控制。 UDP（用户数据报协议）是无连接的协议，传输时不保证数据的顺序或完整性，适用于对实时性要求较高的场景，如视频流、在线游戏等。 3. TCP可靠通信怎么实现的 可靠性通过以下几种机制实现： 三次握手：确保连接的双方都能确认彼此的存在。 数据重传：丢失的数据包会通过重传机制重新发送。 序列号：通过序列号保证数据包的顺序。 校验和：每个数据包都会进行校验，确保数据的完整性。 确认应答（ACK）：接收方确认接收到数据后发送 ACK 信号。 流量控制：通过滑动窗口机制控制发送方的发送速率。 4. 说一说拥塞控制 拥塞控制是为了避免网络中出现过多的流量，导致网络拥塞或崩溃。TCP 使用以下几种策略： 慢启动：初始时发送速度较慢，每次成功的包确认后，增加发送速率。 拥塞避免：当检测到网络拥塞时，降低发送速率。 快速重传：在丢包时迅速重传，而不是等待超时。 快速恢复：丢包后，恢复发送速率的过程。 5. 滑动窗口的作用 滑动窗口机制主要用于流量控制，限制发送方的发送速率。接收方会向发送方告知自己可以接收的数据量，发送方根据接收方的反馈调整发送的数据量。窗口的大小可以动态调整，以适应当前网络状态。 6. 什么是粘包，怎么解决 粘包指的是在 TCP 通信中，由于数据包的边界不明确，多个包被一起发送到接收端，导致接收方无法正确区分数据包的边界。 解决办法： 固定长度包：发送数据包时固定每个包的长度。 分隔符：在数据包之间添加特定的分隔符，接收端根据分隔符识别包边界。 长度字段：每个包前面加上表示数据包长度的字段。 7. 堆和栈有什么区别 栈：由操作系统自动管理，用于存储局部变量、函数调用等。栈内存分配和回收速度快，但容量有限。 堆：用于动态分配内存，程序员需要手动管理（在一些语言中是由垃圾回收机制来管理）。堆内存的管理更灵活，容量大，但性能较栈慢。 8. 进程的进程空间是怎么样的？ 进程空间是每个进程独立的内存区域，通常包括： 代码段：存储程序代码。 数据段：存储程序运行时使用的全局变量、静态变量。 堆：动态分配内存区域。 栈：存储函数调用相关的局部变量和控制信息。 内核空间：操作系统内核使用的内存空间。 9. 进程，线程，协程的区别 进程是操作系统分配资源的最小单位，每个进程拥有独立的内存空间。 线程是进程中的执行单元，共享进程的内存空间。线程之间的通信相对简单，但线程切换开销较大。 协程是比线程更轻量的执行单元，它们共享线程的栈内存，并由程序调度器管理。协程切换开销小，适用于大量并发任务。 10. 链表和线性表的区别 链表是一个由节点组成的数据结构，每个节点包含数据和指向下一个节点的指针。链表的插入和删除操作时间复杂度为 O(1)，但随机访问效率差。 线性表是一个数据元素按顺序排列的数据结构，包括数组和链表。链表是线性表的一种实现形式。 11. 有序双向链表如何高效查询？ 有序双向链表可以通过从头或尾部查找来提高查询效率，通常会使用指针来遍历链表。对于高效查询，可以通过二分查找（在某些情况下）或引入索引等机制来优化查询速度。 12. Kafka如何实现高吞吐的？ Kafka 高吞吐的实现依赖于以下几个关键因素： 顺序写入：Kafka 优化了磁盘的顺序写入操作，相比随机写入，顺序写入可以极大提高吞吐量。 消息压缩：通过压缩消息（如使用 Snappy、LZ4 等算法），减少了网络和磁盘的负载。 分区和副本机制：Kafka 通过将消息分区，并利用副本保证高可用，且可以实现数据的并行处理和存储。 批量处理：Kafka 支持将多个消息打包成一个批量发送，提高了网络吞吐。 13. 介绍最近的项目 最近的项目涉及到 Golang 和 Kubernetes，主要是开发和部署后端微服务，使用 Kafka 做消息队列，解决了高并发数据处理的问题。 14. 缓存击穿，雪崩，穿透 缓存击穿：缓存中的某个热点数据失效，导致大量请求直接打到数据库上，造成数据库压力过大。 解决方法：使用互斥锁、请求合并、设置合理的缓存过期时间。 缓存雪崩：大量缓存同时失效，导致大量请求直接访问数据库，可能导致数据库崩溃。 解决方法：缓存的过期时间错开，使用预热策略。 缓存穿透：查询一个不存在的数据，缓存和数据库都没有，导致每次查询都去数据库查询。 解决方法：对不存在的数据设置一个较短的缓存时间，或者缓存空数据。\"]},\"637\":{\"h\":\"腾讯三面（校招）\",\"t\":[\"项目中比较有挑战性的事？\",\"什么是伪随机？\",\"c＋＋里面的继承和虚函数，抽象封装，和go的interface有什么区别？\",\"为什么go不是传统意义上的面向对象语言？\",\"c＋＋多重继承可能导致循环继承，go用interface实现有这种问题吗？\",\"单例模式？什么情况用饿汉模式，什么时候用懒汉模式？\",\"表的主键用什么类型的字段？用字符串不可以吗？\",\"消息队列是什么?\",\"有了解过其他消息队列吗？\",\"kafka你们是怎么部署的呢？\",\"能说一说你们怎么使用devops的吗？\",\"不用kafka可以吗？\",\"ES是干什么的？\",\"前后端通信用的什么协议？\",\"grpc相比http的优势在什么地方呢？\",\"1. 项目中比较有挑战性的事？ 项目中比较具有挑战性的部分通常是如何优化高并发的数据处理和网络通信。在某个项目中，我们使用 Kafka 作为消息队列时，需要确保消息的顺序和高吞吐量，同时要处理 Kafka 的 消费者负载均衡 和 消息重复消费 问题，这需要做大量的性能测试和容错处理。 2. 什么是伪随机？ 伪随机是指由算法生成的随机数，它看起来是随机的，但实际上是可预测的。伪随机数的生成通常依赖于初始种子（种子不同，生成的伪随机数也不同）。常见的伪随机生成算法有 线性同余法 和 梅森旋转算法。 3. C++里面的继承和虚函数，抽象封装，和 Go 的 interface 有什么区别？ C++的继承和虚函数： C++ 支持类的继承，使用虚函数（virtual）来实现多态。基类的虚函数可以在派生类中被重写，并通过基类指针或引用进行动态绑定。 Go的接口： Go 不支持传统的继承，而是通过接口来实现多态。类型不需要显式声明实现了某个接口，Go 会自动检测类型是否实现了接口的所有方法。 区别： C++ 采用静态继承和虚函数机制，而 Go 更加灵活，接口实现是隐式的，不需要继承关系。 C++ 允许多重继承，而 Go 通过组合和接口避免了多重继承的问题。 4. 为什么Go不是传统意义上的面向对象语言？ Go 并不完全符合传统面向对象语言（如 Java 或 C++）的定义，原因包括： 没有类：Go 使用结构体和接口来代替类的功能。 没有继承：Go 不支持类的继承，而是通过组合和接口来实现代码重用。 没有访问控制：Go 的成员字段首字母大小写决定了其访问权限，但没有类似 private 或 protected 的明确访问修饰符。 5. C++多重继承可能导致循环继承，Go用interface实现有这种问题吗？ C++多重继承问题：C++ 中的多重继承可能导致循环继承或菱形继承问题，产生二义性。C++ 通过虚拟继承来解决这个问题。 Go中的接口：Go 不支持多重继承，因此不会出现循环继承的问题。Go 的接口实现是隐式的，避免了继承链上的复杂性和问题。 6. 单例模式？什么情况用饿汉模式，什么时候用懒汉模式？ 单例模式：确保某个类只有一个实例，并提供全局访问点。 饿汉模式：在类加载时就创建实例，线程安全，但可能会浪费资源。 懒汉模式：在第一次需要时创建实例，适用于实例化开销较大或资源密集型对象的情况。 使用饿汉模式：当你能确定类的实例化不依赖外部条件，且加载时没有性能问题时。 使用懒汉模式：当实例化较为昂贵或初始化过程依赖外部条件时。 7. 表的主键用什么类型的字段？用字符串不可以吗？ 通常情况下，主键字段使用 整数类型（如 int、bigint）因为其具有较高的性能和存储效率。字符串虽然可以作为主键，但会增加存储空间和查询开销。对于需要全局唯一标识符的情况，可以使用 UUID。 8. 消息队列是什么？ 消息队列是一种通信机制，允许不同系统或不同组件之间异步地传递消息。消息队列可以解耦系统，提供更高的可扩展性和容错能力。常见的消息队列系统有 RabbitMQ、Kafka、ActiveMQ。 9. 有了解过其他消息队列吗？ 是的，除了 Kafka，我们还使用过 RabbitMQ、RocketMQ 等消息队列系统。每种消息队列都有其特点： RabbitMQ：基于 AMQP 协议，支持复杂的路由和消息确认，适合高可靠性场景。 RocketMQ：阿里开源的消息队列，提供高吞吐量和低延迟的能力，适用于大规模分布式系统。 10. Kafka你们是怎么部署的呢？ Kafka 通常部署在多个节点上以实现高可用性。我们会部署一个 Kafka 集群，通过 Zookeeper 管理集群的元数据。为了确保高吞吐量和容错性，会将消息进行 分区，并在不同节点之间 副本。 11. 能说一说你们怎么使用 DevOps 吗？ 我们使用 DevOps 来自动化软件开发和运维流程，包括： CI/CD：通过 Jenkins、GitLab CI 或 GitHub Actions 实现自动化构建、测试和部署。 容器化：使用 Docker 来打包应用程序，确保开发和生产环境的一致性。 Kubernetes：使用 Kubernetes 部署和管理容器化应用，实现自动化的扩展、负载均衡和高可用性。 监控：通过 Prometheus 和 Grafana 进行系统监控，并结合 ELK Stack（Elasticsearch、Logstash、Kibana）进行日志分析。 12. 不用 Kafka 可以吗？ 当然可以，消息队列并非必需。如果业务场景中没有分布式系统、异步消息处理、解耦需求等，那么可以不使用 Kafka，转而使用传统的 数据库 或 HTTP 请求 等机制。但对于高吞吐量、分布式环境下，Kafka 能提供很好的性能和可靠性。 13. ES是干什么的？ Elasticsearch (ES) 是一个开源的全文搜索和分析引擎，适用于实时搜索和分析大规模数据。它广泛应用于日志分析、网站搜索、数据挖掘等场景。 14. 前后端通信用的什么协议？ 我们通常使用 HTTP/HTTPS 协议进行前后端通信，前端通过 RESTful API 或 GraphQL 与后端进行数据交换。在某些实时性要求较高的场景下，使用 WebSocket 来实现双向通信。 15. gRPC相比HTTP的优势在什么地方呢？ gRPC 相比传统的 HTTP/REST 在以下几个方面具有优势： 性能：gRPC 基于 Protocol Buffers 进行高效的序列化，性能比 JSON 更高。 双向通信：gRPC 支持双向流，允许客户端和服务器之间进行实时通信。 强类型：gRPC 使用 IDL （接口定义语言）来定义服务，具有强类型，易于生成客户端和服务端代码。 跨语言支持：gRPC 支持多种编程语言，可以轻松实现跨语言通信。\"]},\"638\":{\"h\":\"腾讯QQ一面\",\"t\":[\"自我介绍\",\"算法：20有效括号，240搜索二维矩阵Ⅱ\",\"项目在运行了吗？数据表的设计？简单画一下\",\"数据库外键关联不同表吗？\",\"抢单的设计是怎么做的？\",\"Redis里缓存了所有悬赏的订单？\",\"怎样防止多人抢单？没有很理解递减是怎么实现的\",\"悬赏下单的用户？\",\"为什么有订单数量的概念？\",\"如果Redis抢单成功但是后面的逻辑失败怎么办？即发消息队列的失败了会怎么样？会出现什么问题？\",\"上述问题有没有什么解决办法？\",\"直接用Mysql实现多人抢单可以吗？\",\"使用Mysql的话有没有不通过数量控制的方案？\",\"上个问题相对更优雅的解决方案，如根据订单状态\",\"QPS提升3倍，为什么只提升了3倍？所有服务搭载在个人机上，提升比较小，这样测试是不合理的\",\"点赞是怎么设计的？点赞的底层逻辑怎么存的？\",\"评论怎么设计的？\",\"评论可以折叠吗？只有一个层级？\",\"如果你考虑针对评论进行回复的话，他可能的数据表结构是怎样的？\",\"设计完成以后怎么查这些不同层级的评论？\",\"所以其实实现不同层级的评论只需要一个表就行了，只不过子评论要记录其对应的主评论的id\",\"Go了解的多不多？\",\"Java的集合大概讲一讲\",\"ArrayList的底层怎么实现，数据结构怎么样，扩容策略是怎样的\",\"HashMap的底层实现呢，Hash冲突怎么处理的？扩容策略？加载因子多大？为什么是0.75\",\"Java的垃圾收集机制\",\"新生代老年代是怎么划分的？\",\"网络相关的HTTP了解的不多吗？Get和Post的区别？\",\"登录请求的话用什么请求？用Get会有什么问题\",\"从浏览器输入个网址到显示页面的过程\",\"TCP和UDP的区别？\",\"操作系统相关的了解吗？\",\"Redis常用的数据结构有哪些？如果要实现一个排行榜，用什么数据结构？\",\"如果实现分布式锁呢？什么命令？setnx\",\"Redis实现简易的布隆过滤器是怎么实现的？\",\"Redis常见的穿透击穿雪崩问题？\",\"击穿的解决方案\",\"逻辑过期的话怎么更新呢？逻辑过期的时间点有很多请求过来，是不是都会去数据库请求更新数据？\",\"Redis的过期淘汰策略\",\"Redis过期数据的删除策略？\",\"Mysql的索引通常是怎么划分的？从数据结构上可以划分为哪些索引？是指这些索引数据结构不一样，比如InnoDB的？MyISAM的？哈希的？\",\"聚簇索引和非聚簇索引的区别？\",\"数据和索引放一起的优点\",\"什么是回表？\",\"Mysql事务的隔离级别\",\"未提交读有什么问题？\",\"什么是不可重复读？什么是幻读？\",\"反问\",\"1. 自我介绍 我是一个专注于 Go 语言的后端开发工程师，拥有丰富的 Golang 开发经验，涉及的领域包括微服务架构、容器化部署、消息队列等。除了 Go 语言，我也有一定的前端开发、数据库设计和 DevOps 实践经验。 2. 算法：20有效括号，240搜索二维矩阵Ⅱ 20. 有效括号：通过栈来实现，逐个检查括号的匹配情况。遇到左括号就入栈，遇到右括号就从栈中弹出并检查是否匹配。 240. 搜索二维矩阵Ⅱ：可以利用从右上角开始的查找方式，逐步排除无效区域，时间复杂度为 O(m+n)，其中 m 和 n 分别是矩阵的行和列。 3. 项目在运行了吗？数据表的设计？简单画一下 如果需要设计数据库表，通常会根据业务需求进行设计，保证数据的完整性和查询效率。例如设计一个“订单表”包括订单ID、用户ID、商品ID、订单状态等字段。 4. 数据库外键关联不同表吗？ 是的，数据库中的外键用于在不同表之间建立关联，确保数据的完整性。外键约束确保子表中的数据引用主表中的有效数据。 5. 抢单的设计是怎么做的？ 抢单的设计可以使用 Redis 来实现原子操作。例如，通过 Redis 锁 或 Redis 的计数器 来限制抢单的数量，并防止并发问题。 6. Redis里缓存了所有悬赏的订单？ 是的，通常在高并发的场景下，订单的状态可以缓存到 Redis 中，以减少数据库的查询压力。 7. 怎样防止多人抢单？没有很理解递减是怎么实现的 防止多人抢单可以通过 Redis 原子递减操作（如 DECR 或 DECRBY 命令）来实现。每次抢单时，数量会递减，确保抢单者不会超过上限。 8. 悬赏下单的用户？ 悬赏下单的用户是指发起订单请求的用户。订单信息通常会包括用户ID、商品ID、订单金额等字段。 9. 为什么有订单数量的概念？ 订单数量通常用于跟踪订单的状态和处理数量。例如，可以防止订单数量超过实际可处理数量，保证订单的正常流转。 10. 如果Redis抢单成功但是后面的逻辑失败怎么办？即发消息队列的失败了会怎么样？会出现什么问题？ 如果 Redis 中抢单成功后，消息队列发送失败，可能会导致订单状态不一致。常见的问题是订单的状态已更新，但消息未成功投递到其他服务，可能导致订单未被正确处理。 11. 上述问题有没有什么解决办法？ 可以使用 事务 或 补偿机制 来处理这种情况。例如，可以使用消息队列的重试机制，或将失败的消息存入死信队列（DLQ）以便后续处理。 12. 直接用MySQL实现多人抢单可以吗？ 使用 MySQL 实现多人抢单是可以的，但可能会面临性能瓶颈，特别是在高并发情况下。MySQL 的 锁机制 可以确保数据的一致性，但会影响性能，尤其是当抢单数量较大时。 13. 使用MySQL的话有没有不通过数量控制的方案？ 不通过数量控制的方案可以使用 订单状态 来控制。例如，抢单后直接将订单的状态更新为“已抢”，并且保证后续逻辑中不会对该订单进行二次抢占。 14. 上个问题相对更优雅的解决方案，如根据订单状态 更优雅的解决方案是使用 订单状态 来控制，例如将订单状态设置为“未抢”、“已抢”或“已完成”，并在每次请求时检查订单状态，避免重复抢单。 15. QPS提升3倍，为什么只提升了3倍？所有服务搭载在个人机上，提升比较小，这样测试是不合理的 这个问题表明可能存在 瓶颈，例如网络带宽、CPU 或内存资源的限制。个人机器上运行多个服务可能导致资源竞争，性能提升受限。应该在分布式环境下进行测试，以获得更准确的性能结果。 16. 点赞是怎么设计的？点赞的底层逻辑怎么存的？ 点赞功能一般使用 Redis 或 MySQL 存储，具体实现方式可以是： 使用 计数器（如 Redis 的 INCR 命令）来统计点赞数。 使用 Redis 哈希表来记录每个用户对某个对象的点赞状态。 17. 评论怎么设计的？ 评论通常可以设计为一个独立的表，字段包括：评论ID、用户ID、评论内容、时间戳、评论对象ID（如商品ID或帖子ID）等。 18. 评论可以折叠吗？只有一个层级？ 评论可以设计成 多层级，支持折叠和展开。可以通过设置评论的父评论ID来支持树形结构。 19. 如果你考虑针对评论进行回复的话，他可能的数据表结构是怎样的？ 回复评论的数据表结构可以包括：评论ID、父评论ID、用户ID、评论内容、时间戳等。父评论ID 用来关联主评论，形成树形结构。 20. 设计完成以后怎么查这些不同层级的评论？ 查询评论时，可以使用 递归查询（如果使用 SQL）或通过 树形结构 来查询评论和回复。 21. 所以其实实现不同层级的评论只需要一个表就行了，只不过子评论要记录其对应的主评论的id 是的，使用一个表即可实现多层级评论。子评论通过记录父评论ID 来关联主评论。 22. Go了解的多不多？ 是的，我有丰富的 Go 语言开发经验，熟悉其并发编程模型、内存管理和性能优化。 23. Java的集合大概讲一讲 Java 集合框架包括： List（如 ArrayList、LinkedList）：有序集合，允许重复元素。 Set（如 HashSet、TreeSet）：无序集合，不允许重复元素。 Map（如 HashMap、TreeMap）：键值对集合，键唯一，值可重复。 24. ArrayList的底层怎么实现，数据结构怎么样，扩容策略是怎样的 ArrayList 使用动态数组实现，初始容量为 10。当容量不足时，数组会 扩容，通常是原容量的 1.5 倍。 25. HashMap的底层实现呢，Hash冲突怎么处理的？扩容策略？加载因子多大？为什么是0.75 HashMap 使用数组 + 链表或红黑树实现。哈希冲突通过链表法或树化法解决。扩容策略：当填充因子超过 0.75 时，HashMap 会扩容为原来的两倍。 26. Java的垃圾收集机制 Java 垃圾收集机制基于 分代收集，将堆内存分为 年轻代 和 老年代。年轻代使用 Minor GC，老年代使用 Major GC。 27. 新生代老年代是怎么划分的？ 新生代用于存储新创建的对象，老年代存储长时间存活的对象。大部分对象在新生代被回收，只有少部分存活对象晋升到老年代。 28. 网络相关的HTTP了解的不多吗？Get和Post的区别？ GET 用于请求数据，参数暴露在 URL 中；POST 用于提交数据，数据放在请求体中。POST 比 GET 更安全、数据量也较大。 29. 登录请求的话用什么请求？用Get会有什么问题 登录请求应该使用 POST，因为登录信息（如密码）需要保护，GET 会将敏感信息暴露在 URL 中。 30. 从浏览器输入个网址到显示页面的过程 过程包括：DNS 解析 -> TCP 连接 -> 发送 HTTP 请求 -> 服务器响应 -> 浏览器渲染页面。\"]},\"639\":{\"h\":\"腾讯QQ二面（电话面）\",\"t\":[\"自我介绍\",\"Golang协程与线程的区别\",\"专业问题\",\"中间漏了几个问题\",\"Redis缓存击穿解决方案在项目中是否用过，用在什么地方\",\"检查到key过期了，都请求数据库不就击穿了吗\",\"怎么加锁\",\"这个锁放在本地吗？内存里面吗？\",\"MySQL支持的最大并发数\",\"Redis支持的最大并发数\",\"算法：文件里面有20亿个整数，找到前1000个最大的，要求时间复杂度尽可能低\",\"上述算法时间复杂度多少\",\"项目背景\",\"Jmter压测的哪个接口\",\"QPS\",\"具体是怎么优化的呢\",\"压测后qps提升了3倍，瓶颈在哪个地方，为什么不能再多了\",\"阿里云用的是Cos服务是吧\",\"订单超卖是什么意思\",\"项目大概多少人参与\",\"这个服务有几个系统\",\"这个项目是用来给自己学校的吗？还是各个学校通用的项目？\",\"这个项目打通了学校里面的账号体系了吗？\",\"反问\",\"1. Golang协程与线程的区别 协程是轻量级的执行单元，由 Go 运行时调度。协程的创建和销毁开销小，可以通过 go 关键字并发执行。 线程是操作系统的执行单元，由操作系统调度。线程比协程更重，切换代价较大。 区别： 协程的开销远小于线程，通常可以创建成千上万的协程。 线程由操作系统管理，协程由 Go 运行时调度。 2. 专业问题 具体问题可以根据需要详细提问，通常涉及到技术架构、系统设计、性能优化等领域。 3. 中间漏了几个问题 你可以补充或提醒漏掉的问题，我会继续回答。 4. Redis缓存击穿解决方案在项目中是否用过，用在什么地方 解决方案： 设置 互斥锁（如 Redis 的 SETNX）防止多个请求同时访问数据库。 使用 标记失效时间，让请求只有在缓存失效时才去数据库查询。 应用场景： 在高并发的场景下，如商品详情页缓存中，如果商品信息过期，多个请求会同时访问数据库，我们可以用 Redis 锁来避免多次查询。 5. 检查到key过期了，都请求数据库不就击穿了吗 为避免击穿，可以使用 缓存穿透 和 缓存预加载 的策略。 例如，设置一个 合理的过期时间 和 过期后的重新加载，并在缓存数据过期前提前加载。 6. 怎么加锁 在多线程环境下，可以使用以下方式加锁： 互斥锁：使用 sync.Mutex 锁定共享资源，确保同一时刻只有一个 goroutine 可以访问该资源。 读写锁：使用 sync.RWMutex 实现多个读线程并行，写线程独占。 7. 这个锁放在本地吗？内存里面吗？ 锁通常是放在内存中，如 内存锁 (sync.Mutex) 用于保护内存中的共享资源。 分布式锁（如 Redis）用于在多台服务器上同步操作。 8. MySQL支持的最大并发数 MySQL 的最大并发数与 max_connections 配置项有关，默认值通常是 151，但可以通过配置增加，理论上 MySQL 可以支持上千并发连接。 9. Redis支持的最大并发数 Redis 的最大并发数与其配置的硬件资源（CPU、内存）有关，通常可以处理数万到数十万的并发请求，具体取决于服务器的性能和配置。 10. 算法：文件里面有20亿个整数，找到前1000个最大的，要求时间复杂度尽可能低 使用 最小堆（Min-Heap）来存储前1000个最大的整数。遍历所有数据，每次与堆顶元素比较，若大于堆顶，则替换堆顶元素并调整堆。 时间复杂度：O(n log k)，其中 n 是文件中的整数数量，k 是前1000个最大的数。 11. 上述算法时间复杂度多少 时间复杂度为 O(n log k)，其中： n 是整数数量（20亿）。 k 是前1000个最大的数。 12. 项目背景 项目背景可以根据具体的业务需求和目标来定，通常包括目标用户群、项目功能、技术栈等。 13. JMeter压测的哪个接口 JMeter 通常用于压测 API 接口，具体测试的接口可能包括：登录、查询、下单等高并发操作。 14. QPS QPS（Queries per Second）是衡量每秒查询次数的指标，通常用于评估系统的吞吐量。 15. 具体是怎么优化的呢 优化方式： 数据库优化：如增加索引、优化查询。 缓存：使用 Redis 缓存热点数据。 并发控制：减少锁竞争，使用分布式锁。 异步处理：将耗时操作异步化，如消息队列。 16. 压测后qps提升了3倍，瓶颈在哪个地方，为什么不能再多了 压测后，QPS提升3倍说明系统已接近瓶颈，可能瓶颈在： 数据库性能：数据库成为瓶颈，可能由于查询、连接数限制、IO 等原因。 网络带宽：网络带宽不足，无法承载更多的请求。 硬件资源：CPU、内存等硬件资源达到了极限。 17. 阿里云用的是Cos服务是吧 阿里云提供的是 OSS（对象存储服务），而 COS（Cloud Object Storage）是腾讯云的对象存储服务。 18. 订单超卖是什么意思 订单超卖指的是在库存不足的情况下，系统仍然允许用户下单，导致最终库存不足，无法满足订单需求。 19. 项目大概多少人参与 项目团队的规模通常取决于项目的复杂度，一般中型项目的团队规模在 5~20人 之间。 20. 这个服务有几个系统 通常一个项目会包含多个子系统，如用户系统、订单系统、支付系统等，具体数量视业务需求而定。 21. 这个项目是用来给自己学校的吗？还是各个学校通用的项目？ 项目的目标用户群体可以是特定学校，也可以是多个学校通用。具体需求可根据业务情况而定。 22. 这个项目打通了学校里面的账号体系了吗？ 如果涉及到多个学校，通常会有统一的账号体系（如 SSO 单点登录）来打通不同系统间的用户身份认证。\"]},\"640\":{\"h\":\"腾讯云智\"},\"641\":{\"h\":\"一面\",\"t\":[\"自我介绍\",\"第一个项目是实习项目吗\",\"你在里面负责的部分\",\"用户悬赏下单的业务流程讲一下\",\"RabbitMQ写库失败了会怎么处理\",\"Redis的数据与数据库里的数据是怎么保持一致的\",\"什么时候写库什么时候写Redis，数据库中有库存吗\",\"Redis是在哪部署的\",\"Redis用的哪种数据类型，项目中Redis哪些地方用了\",\"SpringCache依赖Redis，那用的是什么数据类型\",\"登录注册是怎么实现的\",\"什么是JWT\",\"鉴权是怎么做的\",\"退出登录是怎么实现的\",\"简易短视频都负责什么？登录注册是怎么实现的\",\"TCP的三次握手和四次挥手的过程\",\"Time wait的作用是什么\",\"断开连接是客户端发起还是服务端发起？服务端可以断开吗？\",\"HTTP和HTTPS的区别\",\"HTTPS是怎么加密的了解吗\",\"Session，Cookie，token的区别\",\"Session是在哪存的\",\"进程线程协程这三个的区别\",\"CPU调度是哪个\",\"数据库事务的隔离级别\",\"什么是幻读\",\"MySQL主键索引和普通索引的区别\",\"怎么避免回表操作\",\"索引失效的场景\",\"B树和B+树的区别\",\"如何实现一个HashMap（HashMap的底层结构以及一些扩容操作）\",\"HashMap和ConcurrentHashMap的区别\",\"深拷贝和浅拷贝的区别\",\"说一说使用逻辑过期解决缓存击穿问题\",\"key逻辑过期后，与数据库的一致性怎么保证\",\"缓存穿透问题及解决方案\",\"ThreadLocal实现线程信息隔离说一下\",\"用户登录以后，再请求其他接口，这时是同一个线程吗？\",\"不把用户id放到threadlocal可以吗？\",\"算法题\",\"1. RabbitMQ写库失败了会怎么处理 在写库失败时，RabbitMQ通常会采取以下几种措施： 消息重试机制：通过设置 死信队列（DLX）和消息重试机制，RabbitMQ 会在写库失败后将消息放入死信队列，并定期重新尝试。 事务或补偿机制：如果操作数据库的事务回滚，可能会触发 补偿机制 来修复失败操作，确保系统的一致性。 2. Redis的数据与数据库里的数据是怎么保持一致的 缓存更新策略： 写入时更新：每次数据写入数据库时，同时更新缓存。 定期同步：使用定时任务定期从数据库同步数据到 Redis。 异步同步：通过消息队列触发，保证缓存和数据库的一致性。 3. 什么时候写库什么时候写Redis，数据库中有库存吗 写库时：主要负责保存持久化的数据，比如用户的交易数据、订单信息等，数据会直接写入数据库。 写Redis时：用于存储频繁读取的数据，比如缓存热点数据（如用户信息、商品信息、库存等）。 库存：通常库存存储在数据库中，但为了减少数据库压力，可以在 Redis 中使用 缓存库存，并且通过定期同步和一致性控制来确保数据一致。 4. Redis是在哪部署的 Redis 可以部署在 本地服务器、容器化环境、云服务等不同的环境中。部署时通常使用 主从复制 或 集群模式 来提高可用性和扩展性。 5. Redis用的哪种数据类型，项目中Redis哪些地方用了 常用数据类型： 字符串：用于存储简单的缓存数据。 哈希：适合存储对象数据，如用户信息。 列表、集合：适用于任务队列、排行榜等应用。 有序集合：用于存储需要排序的集合，如排行榜。 应用场景： 存储用户信息、商品详情、热点查询数据等。 6. SpringCache依赖Redis，那用的是什么数据类型 Spring Cache 使用 Redis 作为缓存时，通常会使用 字符串 类型来缓存数据。但也可以根据需要，使用 哈希 或 列表 等数据类型。 7. 登录注册是怎么实现的 登录：用户提供用户名和密码，系统验证密码是否正确，若正确则生成一个 JWT 或 Session ID，将其返回给客户端，客户端存储在 Cookie 或 LocalStorage 中。 注册：用户填写信息后，系统验证信息的合法性，若合法，则将用户信息写入数据库，并生成初始密码或通过其他方式激活账户。 8. 什么是JWT JWT（JSON Web Token）是一种用于认证和信息交换的开放标准。它通过 头部、载荷、签名 组成，常用于无状态的身份验证和信息传输。 9. 鉴权是怎么做的 用户通过 用户名和密码 登录后，系统会生成一个 JWT 或 Session ID，客户端将该令牌存储在 Cookie 或 LocalStorage 中，后续的请求会携带该令牌，服务器验证令牌的有效性来完成鉴权。 10. 退出登录是怎么实现的 客户端：删除存储在 Cookie 或 LocalStorage 中的令牌。 服务器：在使用 JWT 时，通常不需要主动删除令牌，只要令牌过期即可；若使用 Session，服务器会清除 Session 数据。 11. 简易短视频都负责什么？登录注册是怎么实现的 功能： 视频上传、播放、评论、点赞、分享、搜索等。 用户注册、登录、视频发布、评论和社交功能。 登录注册：使用邮箱或手机号注册，用户通过邮箱验证码或短信验证码进行注册，登录时使用 JWT 进行身份验证。 12. TCP的三次握手和四次挥手的过程 三次握手： 客户端发送 SYN 请求，表示请求建立连接。 服务器回复 SYN-ACK，表示同意连接。 客户端发送 ACK 确认，连接建立完成。 四次挥手： 客户端发送 FIN 请求，表示数据发送完毕。 服务器回复 ACK 确认，表示准备关闭连接。 服务器发送 FIN 请求，表示数据发送完毕。 客户端回复 ACK 确认，连接关闭。 13. Time wait的作用是什么 Time Wait 是在四次挥手后的最后状态，确保客户端接收到服务器的 ACK。它的作用是确保在最后的 ACK 被正确接收，防止由于延迟的 TCP 包 导致数据冲突。 14. 断开连接是客户端发起还是服务端发起？服务端可以断开吗？ 连接的断开可以由客户端或服务端发起，通常服务端可以主动关闭连接。在应用层中，服务端主动关闭连接通常出现在长连接场景中。 15. HTTP和HTTPS的区别 HTTP：超文本传输协议，数据以明文传输。 HTTPS：HTTP的安全版，通过 SSL/TLS 协议加密传输，保证数据的安全性和完整性。 16. HTTPS是怎么加密的了解吗 HTTPS加密：通过 SSL/TLS 协议对数据进行加密，分为三部分： 对称加密：用于加密数据传输。 非对称加密：用于加密对称加密的密钥交换。 数字证书：验证服务器身份，防止中间人攻击。 17. Session，Cookie，token的区别 Session：服务器端保存会话信息，每个客户端有一个唯一的 Session ID。 Cookie：客户端存储信息，常用于保存 Session ID 或其他小数据。 Token：用于身份验证的令牌，如 JWT，常存储在客户端，携带用户的身份信息。 18. Session是在哪存的 Session 通常存储在 服务器端的内存 或 数据库 中，客户端存储一个 Session ID，用于标识用户。 19. 进程线程协程这三个的区别 进程：操作系统资源分配的最小单位。 线程：进程中的执行单元，共享进程资源。 协程：比线程更加轻量级的执行单元，协程通过调度器管理并发执行。 20. CPU调度是哪个 CPU调度是操作系统中的核心任务，决定哪一个进程或线程获得CPU资源。 21. 数据库事务的隔离级别 READ UNCOMMITTED：读取未提交数据。 READ COMMITTED：读取已提交数据。 REPEATABLE READ：保证读取的数据不会发生变化，但可能会有幻读。 SERIALIZABLE：完全隔离，事务顺序执行。 22. 什么是幻读 幻读是指事务在读取数据时，由于其他事务的插入，导致原本不存在的数据变得可见。 23. MySQL主键索引和普通索引的区别 主键索引：主键索引是 唯一的，并且 不可为空，它是数据表的聚簇索引，数据存储顺序与索引顺序一致。 普通索引：普通索引是非聚簇索引，数据存储顺序与索引顺序无关。 24. 怎么避免回表操作 使用 覆盖索引：查询字段全部包含在索引中，避免回表。 25. 索引失效的场景 使用 OR、LIKE（开头含 %）等，或者 函数 和 类型转换 等，会导致索引失效。 26. B树和B+树的区别 B树：每个节点可以有多个子节点，数据存储在叶子节点和内部节点中。 B+树：所有数据存储在叶子节点中，内部节点仅作为索引，适合范围查询。 27. 如何实现一个HashMap（HashMap的底层结构以及一些扩容操作） HashMap 使用数组和链表/红黑树结合的方式存储数据。通过 哈希函数 将键映射到数组的索引位置，冲突的键会以链表的形式存储。扩容时，哈希表大小翻倍，且重新计算哈希值。 28. HashMap和ConcurrentHashMap的区别 HashMap 是 非线程安全 的。 ConcurrentHashMap 使用分段锁技术（或更先进的技术）来实现高效的线程安全。 29. 深拷贝和浅拷贝的区别 浅拷贝：只拷贝对象的引用，原对象和拷贝对象共享引用的资源。 深拷贝：拷贝对象及其所有的引用对象，避免引用共享。 30. 使用逻辑过期解决缓存击穿问题 逻辑过期：将缓存设置为一定的逻辑过期时间，在缓存过期时，不立即删除，而是由后台异步更新缓存。 31. key逻辑过期后，与数据库的一致性怎么保证 可以使用 缓存预热 或 后台定时同步，在缓存过期时，不会直接从数据库获取，而是通过异步更新来保证一致性。 32. 缓存穿透问题及解决方案 缓存穿透：缓存和数据库都没有数据，导致每次都查询数据库。 解决方案：使用 布隆过滤器 检查是否存在该数据，避免无效查询。 33. ThreadLocal实现线程信息隔离说一下 ThreadLocal 是每个线程独立拥有自己的变量副本，确保每个线程不会互相影响。 34. 用户登录以后，再请求其他接口，这时是同一个线程吗？ 通常情况下，HTTP 请求是 无状态的，每个请求可能由不同的线程处理。 35. 不把用户id放到threadlocal可以吗？ 可以，但使用 ThreadLocal 可以让每个线程独立存储数据，避免在多线程环境下频繁传递用户ID，提高性能。\"]},\"642\":{\"h\":\"二面\",\"t\":[\"自我介绍\",\"挑一个项目聊一下\",\"第一版方案为什么会超卖呢\",\"Redis中的库存还没有递减完成，出现了比如OOM的情况，数据库怎么获得已经抢成功的数据？\",\"数据库和缓存数据一致性的问题\",\"如果数据库更新完成了，但是删除缓存时没有成功，这时会怎么办\",\"项目有实际需求吗？还是找的课题\",\"RabbitMQ在项目里是干嘛用的？\",\"抢单的人怎么知道要查哪个key呢？\",\"具体压测的数据\",\"简易短视频是怎样的项目\",\"反问\"]},\"643\":{\"h\":\"腾讯\"},\"644\":{\"h\":\"某不知名组一面（电话面）\",\"t\":[\"简单的自我介绍\",\"Java判断相等使用==和使用equals的区别\",\"Java里面接口和抽象类的区别，属性、方法、继承限制等方面回答\",\"详细介绍下项目用户注册和登录的流程\",\"密码存到数据库中是用的哪种方式进行的加密\",\"不加盐的问题\",\"登录成功以后返回的什么数据\",\"返回的token是怎么生成的\",\"token里面包含了什么信息\",\"客户端和后台通信走什么协议\",\"对于HTTP协议有多少了解\",\"Redis提供了哪些基础的数据类型\",\"这些数据类型底层是基于什么数据结构实现的\",\"使用Redis做性能优化具体是怎么做的\",\"对Linux操作系统熟悉吗\",\"项目后台不是部署在Linux上的吗\",\"反问\",\"1. 第一版方案为什么会超卖呢 超卖问题通常发生在并发访问时，多个请求几乎同时抢购库存，且库存数据更新没有及时同步，导致系统无法保证库存的正确性。可能原因包括： Redis库存没有及时更新：多个用户几乎同时读取缓存，导致它们看到相同的库存量，进而导致超卖。 数据库库存更新的延迟：在高并发的情况下，缓存和数据库之间的同步可能会滞后。 没有合适的锁机制：没有保证在更新库存时的排他性，多个请求并发地修改库存数据。 2. Redis中的库存还没有递减完成，出现了比如OOM的情况，数据库怎么获得已经抢成功的数据？ OOM（内存溢出）：如果 Redis 在库存递减过程中遇到内存不足，可以采用如下措施： 持久化到数据库：在每次库存更新时，除了更新 Redis，也同步更新数据库，防止内存问题导致数据丢失。 补偿机制：在库存更新过程中，如果出现 Redis OOM 或其他异常，系统可以通过 事务 或 消息队列 来确保数据的可靠性，将未能正确更新的数据进行补偿。 乐观锁：使用数据库的 乐观锁 或 悲观锁 机制，确保数据一致性。 3. 数据库和缓存数据一致性的问题 缓存与数据库一致性是分布式系统中的一个经典问题，常见的解决方案包括： 双写策略：每次更新数据库时，也更新缓存。但这种方式容易导致缓存与数据库之间的数据不一致。 缓存预热/回源策略：当缓存失效时，直接回源到数据库，重新加载数据到缓存。 延迟删除缓存：修改数据库后，不立即删除缓存，而是等到缓存过期时再删除。 消息队列：使用消息队列来确保数据库和缓存的同步更新，例如通过消息通知来更新缓存。 4. 如果数据库更新完成了，但是删除缓存时没有成功，这时会怎么办 缓存不一致问题：如果数据库更新成功但缓存删除失败，可以采取以下措施： 异步删除缓存：删除缓存操作可以异步执行，确保数据库更新成功后，延迟删除缓存操作，以减少缓存不一致的时间窗口。 定期扫描缓存：可以设置定时任务或后台进程，定期检查缓存与数据库的同步情况，若发现不一致，主动去同步。 事务机制：在一些场景下，可以使用事务机制或消息队列的 最终一致性 来处理缓存与数据库的不一致问题。 5. 项目有实际需求吗？还是找的课题 项目通常会有实际需求，尤其是解决高并发的业务场景，比如抢单、库存管理等。然而，如果这是一个课题，可能是为了研究特定技术（如分布式缓存、一致性、消息队列等）在实际业务中的应用。 6. RabbitMQ在项目里是干嘛用的？ RabbitMQ 在项目中通常用于： 异步处理：将某些耗时操作（如发送通知、邮件、数据处理等）放入消息队列，由消费者异步处理，避免阻塞主流程。 解耦：通过消息队列的方式解耦不同模块之间的依赖，提升系统的可维护性和扩展性。 流量削峰：在高并发的场景下，使用 RabbitMQ 来缓解瞬时流量的压力，确保系统稳定运行。 7. 抢单的人怎么知道要查哪个key呢？ Redis中的库存数据通常是基于商品的唯一标识来存储的，比如 product:{productId}:stock，当用户请求抢单时，系统会基于商品ID生成特定的 Redis key，所有用户都通过相同的 key 来操作库存数据。通过 hash key 和 field，可以保证每个商品的库存数据唯一且易于管理。 8. 具体压测的数据 压测数据通常会包含以下几项： QPS（每秒请求数）：系统每秒钟能够处理多少请求。 响应时间：每个请求的平均响应时间，通常以毫秒为单位。 TPS（每秒事务数）：系统每秒能处理多少个事务。 系统资源使用情况：CPU、内存、磁盘等资源的占用情况。 并发用户数：在特定时间段内能够支持的最大并发用户数。 吞吐量：系统处理的总数据量。 9. 简易短视频是怎样的项目 简易短视频项目：通常包括以下几个核心模块： 用户系统：用户注册、登录、认证、个人资料管理等。 视频上传与处理：用户上传视频文件，系统进行视频格式转换、压缩等处理。 视频播放：前端播放视频，支持快进、暂停、加载等基本功能。 评论与互动：用户可以对视频进行评论、点赞、转发等操作。 社交功能：用户可以关注其他用户、推荐视频等。 数据存储与分发：使用分布式存储方案（如对象存储）存储视频文件，并通过CDN加速分发。\"]},\"645\":{\"h\":\"二面\",\"t\":[\"自我介绍\",\"对面介绍自己的组，问可以接受Go语言吗？\",\"算法：53最大子数组和，239滑动窗口最大值，136只出现一次的数字\",\"进程和线程是怎么理解的？\",\"协程是什么意思？这三者对比一下\",\"在设计程序的时候如何抉择呢？比如应该用多进程的方式还是单进程多线程的方式？\",\"线程池中的核心参数\",\"线程池的执行流程\",\"开发过程中用过线程池吗？线程池的这几个参数是如何确定的？\",\"为什么是n+1和2n和？\",\"你的项目你认为是CPU密集型还是IO密集型\",\"项目v2要上线了，项目v1中还有任务在线程池中，这个时候要怎么办呢？【回答的shutdown和shutdownNow的区别，使用shutdown，等待任务队列里的任务执行完再关闭v1版本的项目】\",\"线程的超时时间设置\",\"你的项目的请求上限是多少？上限多少是右哪些因素决定的？\",\"springBoot可以调吗，让他的上限多一些\",\"Java中的反射解决的问题？使用的场景？\",\"C/C++不支持反射，了解过为什么有些语言持支反射有些不支持反射吗？有什么编程语言的特性决定了他可以用反射吗？\",\"Java中如何判断一个对象可以被回收了？\",\"判断对象是不是被引用标记了，扫一遍的时间可能会非常长，如何来优化它或者现有的机制是如何做的？\",\"如何入手MySQL的优化？看Explain的什么内容？\",\"索引的底层数据结构是什么样子？\",\"B+树为什么比较合适？为什么不用二叉树？红黑树？B树？\",\"MySQL里开启了两个事务，第一个事务插入一条记录并返回了id，此时这个事务还没有提交，第二个事务可以查询到id为2的记录吗？什么隔离级别可以查到，什么隔离级别查不到？\",\"Redis是单线程的为什么比较快？【内存，多线程切换，IO多路复用，Redis的数据结构】\",\"怎么理解IO多路复用？相对于什么IO多路复用性能更高\",\"git的合并的命令？git merge 和 git rebase 用过吗？\",\"假设一个场景：我合入了一个版本，其他同学在之后也合入了三四个版本，这个时候发现我合入的版本有bug，需要把这个撤回，要怎么做呢？\",\"反问\",\" 1. 算法：53最大子数组和，239滑动窗口最大值，136只出现一次的数字 53. 最大子数组和：问题要求找出数组中和最大的连续子数组，使用动态规划来解决。设 dp[i] 为以第 i 个元素结尾的最大子数组和。公式为： css 复制代码 dp[i] = max(nums[i], dp[i-1] + nums[i]) 结果为 dp 数组中的最大值。 239. 滑动窗口最大值：使用双端队列（deque）存储滑动窗口中的最大元素的索引，确保队列中的元素按降序排列。每次窗口移动时，更新队列。 136. 只出现一次的数字：使用异或运算的特性：相同的数字异或结果为零，任何数字与零异或结果是该数字本身。将数组中的所有元素异或，最终结果即为只出现一次的数字。 2. 进程和线程是怎么理解的？ 进程：是操作系统分配资源的基本单位，每个进程拥有独立的内存空间。 线程：是进程中的执行单元，同一个进程中的线程共享内存空间和资源。线程是 CPU 调度的最小单位。 3. 协程是什么意思？这三者对比一下 协程：是一种轻量级的线程，调度由程序员控制，通常在一个线程内运行多个协程。与线程相比，协程更轻便，创建和销毁的开销更小。 进程与线程的区别在于资源的独立性，协程则通过单线程来实现多任务，优于传统的多线程。 对比： 进程：资源独立，开销大，互相隔离。 线程：共享进程资源，开销较小，调度依赖操作系统。 协程：轻量级线程，调度由程序员控制，不依赖操作系统，适用于 I/O 密集型任务。 4. 在设计程序的时候如何抉择呢？比如应该用多进程的方式还是单进程多线程的方式？ 多进程适合 CPU 密集型 任务，因为它能有效利用多核 CPU，每个进程独立执行，避免了 GIL（全局解释器锁）的问题。 单进程多线程适合 I/O 密集型 任务，减少上下文切换和内存开销，同时可以通过线程池控制并发量。 5. 线程池中的核心参数 核心线程数：线程池中始终保持的线程数量。 最大线程数：线程池中可以创建的最大线程数。 线程存活时间：非核心线程在空闲时最大存活时间。 队列长度：任务队列的长度，用于缓存等待执行的任务。 拒绝策略：当线程池已满且队列也满时的处理方式，如抛出异常、丢弃任务等。 6. 线程池的执行流程 当任务提交到线程池时，线程池首先判断是否有空闲线程处理该任务。如果没有且当前线程池中的线程数小于最大线程数，则创建新线程执行任务。如果线程池已达到最大线程数，则任务将被放入任务队列，等待执行。 7. 开发过程中用过线程池吗？线程池的这几个参数是如何确定的？ 线程池的核心参数根据任务的特性来调整： 核心线程数：根据并发量、任务的响应时间和硬件资源来调整。对于 I/O 密集型任务，核心线程数可以设置较大。 最大线程数：根据系统的 CPU 核数和可用资源决定，避免过多线程造成 CPU 或内存的压力。 队列长度：根据系统的处理能力和任务的大小来决定，长队列有助于平滑流量，但可能增加延迟。 8. 为什么是 n+1 和 2n 和？ 这个问题可能涉及到计算机算法的复杂度。一般来说，n+1 是常数时间复杂度的一部分，2n 通常是指某些问题的双倍处理时间，或者是递归分治法中的两个子问题。 9. 你的项目你认为是CPU密集型还是IO密集型？ CPU 密集型：涉及大量的计算操作，如加密、数据分析、图像处理等。 I/O 密集型：涉及大量的磁盘操作或网络操作，如 Web 服务、数据库操作、文件传输等。我的项目大多数是 I/O 密集型，因为涉及到大量的数据库操作和网络请求。 10. 项目 v2 要上线了，项目 v1 中还有任务在线程池中，这个时候要怎么办呢？【回答的 shutdown 和 shutdownNow 的区别，使用 shutdown，等待任务队列里的任务执行完再关闭 v1 版本的项目】 shutdown：调用 shutdown() 方法后，线程池不再接受新的任务，但会继续执行已经提交的任务，直到队列中的任务执行完毕。 shutdownNow：调用 shutdownNow() 会立即尝试停止所有正在执行的任务，未执行的任务会被丢弃。 在 v2 上线之前，使用 shutdown 方法可以优雅地结束 v1 项目中的任务，确保在平滑过渡期间不丢失任何任务。 11. 线程的超时时间设置 线程池中的线程有一个 存活时间，即线程在空闲时保持的最大时间。通过设置超时时间，能够避免线程池中大量空闲线程占用资源，从而优化性能。可以通过 ThreadPoolExecutor 中的 setKeepAliveTime 方法来设置。 12. 你的项目的请求上限是多少？上限多少是由哪些因素决定的？ 请求上限通常是由以下几个因素决定的： 硬件资源：服务器的 CPU、内存、磁盘 I/O 能力。 数据库性能：数据库的吞吐量和并发能力。 网络带宽：网络带宽和延迟限制。 应用程序的优化：应用代码的效率和缓存的使用。 14. Java中的反射解决的问题？使用的场景？ 反射允许程序在运行时动态地加载类、获取类信息、创建对象、调用方法、访问字段等。使用场景： 插件化框架：动态加载类。 依赖注入：如 Spring 框架，通过反射实现 Bean 的自动注入。 对象序列化与反序列化。 15. C/C++不支持反射，了解过为什么有些语言支持反射而有些不支持反射吗？ 反射是动态语言的一大特性。支持反射的语言（如 Java、Python、Go）通常提供了运行时类型信息和反射 API，允许程序在运行时获取类型、方法等信息。而 C/C++ 这种静态语言，不提供运行时类型信息，因此无法直接支持反射。需要在编译时知道类型信息。 16. Java中如何判断一个对象可以被回收了？ 垃圾回收器通过 引用计数 或 可达性分析 来判断一个对象是否可以回收。对象的引用计数为零或从根对象不可达时，认为该对象可以被回收。 17. 判断对象是不是被引用标记了，扫一遍的时间可能会非常长，如何来优化它或者现有的机制是如何做的？ 标记-清除算法 是垃圾回收的常用算法，现有的优化方法包括： 分代回收：将对象分为年轻代和老年代，针对不同年龄的对象采用不同的回收策略。 增量回收：将回收工作分成多个小步骤，避免一次性回收导致的长时间停顿。 18. 如何入手MySQL的优化？看Explain的什么内容？ 通过 EXPLAIN 分析 SQL 查询的执行计划，关键点包括： 类型（type）：查询的访问类型，ALL 是最差的，表示全表扫描。 可能的键（possible_keys）：查询时可使用的索引。 实际使用的键（key）：实际使用的索引。 行数（rows）：扫描的行数，\"]},\"646\":{\"h\":\"腾讯音乐\"},\"647\":{\"h\":\"（一）开场\",\"t\":[\"面试官介绍岗位\",\"岗位为腾讯音乐 - 全民K歌 - 国际版 - 直播歌房后台研发工程师，主要负责直播相关功能，开发语言为Go和C++。\",\"关于求职者基本情况\",\"要求5分钟以内的自我介绍。\",\"被问到所在公司技术团队裁撤后为何会留下自己。\",\"岗位base深圳能否接受。\"]},\"648\":{\"h\":\"（二）项目相关\",\"t\":[\"系统重构 - 数据迁移项目\",\"微服务相关\",\"如何理解微服务，为什么微服务能提升系统可拓展性。\",\"微服务相比于单体服务的缺点。\",\"服务间通信成本指的是什么，成本体现在哪。\",\"数据库迁移原因与成本评估\",\"把数据库从MongoDB迁移到MySQL的原因。\",\"如何评估迁移异构数据库（MongoDB到MySQL）的成本，是否仅考虑成熟度和被接受程度，因为迁移涉及数据同步工作量巨大。\",\"技术选型相关\",\"如果采用最终一致性方案，MySQL支持事务而MongoDB不支持事务，有什么原因不使用最终一致性方案。\",\"数据同步与异常处理\",\"迁移过程中数据同步怎么做（新数据库写MySQL，写脚本迁移Mongo数据到MySQL）。\",\"业务要读写新旧数据时怎么办。\",\"迁移比较暴力，如何发现数据异常，异构数据库迁移时如何保证每条数据正常迁移到MySQL。\",\"唯一键场景下（Mongo已有数据，切换到MySQL写时可能重复写入）的处理。\",\"优化服务器项目\",\"分布式缓存实现\",\"优化服务器引入分布式缓存技术（具体是Redis），如何实现的。\",\"缓存与数据库一致性\",\"如何保证Redis缓存和数据库的数据一致性（回答缓存先写数据库后写存在问题）。\",\"写缓存成功数据库失败时缓存是否为脏数据。\",\"先写数据库成功再写Redis，缓存更新失败怎么办，如何知道何时将数据库数据同步到缓存及同步的做法。\",\"缓存是否有过期时间机制，有没有不过期一直生效的情况，有过期的话多久过期。\",\"缓存同时过期会有什么问题以及如何解决。\",\"数据抓取业务项目\",\"Kafka相关\",\"Kafka在业务中的角色。\",\"业务为什么要经过Kafka这一层，账号量有多大。\",\"定时任务可分散执行时间，Kafka在这种情况下削峰意义不大，是否有其他考虑使用Kafka的因素。\",\"防止账号丢失已有确认机制，当作下游处理失败重新触发即可，为何还需要Kafka。\",\"抖音微信小游戏归因业务项目\",\"Token缓存相关\",\"微信小游戏的token存于sync.map（服务内存），为何使用服务内存而不使用Redis或其他外部缓存方案。\",\"用户量相关，当有一定数量实例和用户量时这种方案是否有缺陷（此处存在理解偏差导致回答失误）。\"]},\"649\":{\"h\":\"（三）Go和MySQL\",\"t\":[\"MySQL中索引如何实现，为什么MySQL里不使用B树。\",\"切片如何实现\",\"Go里并发读写map会出现问题，如何解决\",\"Go里的sort排序如何实现\",\"协程和线程的区别，线程开销大的原因，协程有上下文切换为何线程消耗更多CPU资源\",\"1. MySQL中索引如何实现，为什么MySQL里不使用B树？ MySQL中的索引实现： InnoDB 默认使用 B+ 树（而不是传统的 B 树）来实现索引。B+ 树的所有叶子节点都在同一层次，并且通过链表相连，保证了更高的查询效率。 MyISAM 存储引擎使用的是 B 树，但它在处理大数据量时的效率低于 B+ 树。 B树与B+树的区别： 在 B 树中，节点存储数据和指向子节点的指针，而 B+ 树中，非叶子节点只存储索引信息，所有实际数据都保存在叶子节点中。这使得 B+ 树的范围查询（例如 BETWEEN）更加高效，因为叶子节点通过链表连接，范围查询时只需要在叶子节点之间跳转。 为什么MySQL使用B+树：B+树的最大优势在于它能提高范围查询的效率，且因为所有数据都在叶子节点，因此数据的访问更加有序，便于高效扫描。 2. 切片如何实现 Go 中的切片实现： 切片是对数组的一种抽象，它是动态的，不像数组那样大小固定。切片包含了三个主要部分： 指针：指向底层数组的起始位置。 长度：切片中元素的数量。 容量：从切片的起始位置到底层数组的结尾部分的元素数量。 当切片扩展时，如果切片的长度超出其容量，Go 会重新分配一个更大的底层数组，并将切片的内容复制到新的数组中。 3. Go里并发读写map会出现问题，如何解决 问题：Go中的 map 是非并发安全的，意味着如果多个 goroutine 同时读写同一个 map，可能会导致数据竞争、崩溃或错误的结果。 解决方法： 使用 sync.Mutex 或 sync.RWMutex 来加锁保护 map。Mutex 可以在读写操作时进行互斥锁定，确保同一时刻只有一个 goroutine 访问 map。 使用 sync.Map，Go 1.9 引入了并发安全的 sync.Map，它适用于多个 goroutine 同时访问的场景。 示例： go 复制代码 var m = make(map[string]int) var mu sync.Mutex // 写操作 mu.Lock() m[\\\"key\\\"] = 42 mu.Unlock() // 读操作 mu.Lock() value := m[\\\"key\\\"] mu.Unlock() 4. Go里的sort排序如何实现 Go 提供了 sort 包来进行排序，最常用的排序方法是通过实现 sort.Interface 来定义排序规则。sort.Interface 包含三个方法： Len()：返回集合的元素数量。 Less(i, j int) bool：比较集合中的第 i 和第 j 个元素。 Swap(i, j int)：交换集合中的第 i 和第 j 个元素。 通过实现这三个方法，Go 会使用 堆排序、归并排序 或 快速排序 等算法来完成排序。 示例： go 复制代码 type ByLength []string func (s ByLength) Len() int { return len(s) } func (s ByLength) Less(i, j int) bool { return len(s[i]) < len(s[j]) } func (s ByLength) Swap(i, j int) { s[i], s[j] = s[j], s[i] } func main() { strs := []string{\\\"dog\\\", \\\"cat\\\", \\\"fish\\\", \\\"bird\\\"} sort.Sort(ByLength(strs)) fmt.Println(strs) // [dog cat fish bird] } 5. 协程和线程的区别，线程开销大的原因，协程有上下文切换为何线程消耗更多CPU资源 协程与线程的区别： 线程：操作系统调度的基本单位，通常由操作系统内核管理。线程在执行时需要独立的堆栈，调度切换的开销较大。 协程：是用户级别的线程，调度由程序自己管理，不依赖操作系统。协程通常在同一个线程中运行，它比线程更轻量，切换的开销较小。 线程开销大的原因： 线程需要独立的内存栈空间。 线程的创建和销毁比协程要慢。 线程切换时，需要保存和恢复大量的上下文信息，涉及的系统调用和调度开销较大。 协程有上下文切换为何线程消耗更多CPU资源： 线程 的上下文切换涉及保存和恢复整个线程的状态（如寄存器、栈等），并且操作系统内核需要进行调度，这些操作需要消耗更多的 CPU 资源。 协程 切换时只需要保存最少的状态（通常是堆栈指针），因为它们是轻量级的，且由程序而非操作系统调度，所以不会有那么大的开销。 总结： 协程的优点在于其轻量性，减少了操作系统调度的开销，特别适合大量 I/O 密集型任务。 线程在需要利用多核 CPU 或执行 CPU 密集型任务时更有优势，但线程的开销更大。\"]},\"650\":{\"h\":\"（四）算法与反问\",\"t\":[\"算法手撕\",\"反问\"]},\"651\":{\"h\":\"腾讯互娱 一面/Go\",\"t\":[\"Go的接口作用，用处，实现\",\"空struct用途，会不会分配内存\",\"Go原生支持默认参数或可选参数吗，如何实现\",\"Go defer执行顺序\",\"协程，协程间信息如何同步\",\"Go GMP\",\"性能开销大原因 \",\"GM\",\"GMP\",\"go生成一个协程，此时放在P中还是M中\",\"G阻塞，M、P如何\",\"操作系统中大端编码、小端编码\",\"TCP、UDP\",\"三次握手、四次挥手\",\"为什么挥手是四次，会不会合并\",\"流量控制\",\"Redis项目中使用（主数据库还是缓存）\",\"Redis与MySQL数据如何同步\",\"MySQL索引建立原则\",\"Explain，字段\",\"Redis持久化方式\",\"Redis过期删除策略\",\"Redis高可用设计\",\"主从复制方式，模式\",\"kafka业务使用\",\"Redis常用数据结构\",\"zset使用场景，具体实现\",\"部署方式，k8s部署（相关概念）\",\"Go性能优化方式\",\"请求耗时过长，有无使用到链路观测\",\"单链表判断有没有环\",\"玩家积分排序topN实现算法\",\"项目中遇到的困难较高的场景\",\"微服务r如何理解，有何问题\",\"服务端崩溃检测\",\"1. Go的接口作用，用处，实现 作用：Go的接口（interface）是一种抽象类型，它定义了一个对象的行为，但不关心具体的实现。接口在Go中主要用于实现多态和解耦。通过接口，Go可以处理不同类型的对象，只要它们实现了接口规定的方法。 用处： 解耦合：接口允许不同模块之间没有直接的依赖，只需要依赖接口而不关心具体的实现。 多态：通过接口，函数可以接收不同类型的值，只要它们实现了相同的接口方法。 替代传统面向对象语言中的继承：Go没有传统的继承机制，接口则提供了类似于多态和抽象的功能。 实现： Go的接口是隐式实现的，也就是说，不需要显示声明某个类型实现了某个接口，只要类型实现了接口的所有方法，就自动实现了该接口。 go 复制代码 type Animal interface { Speak() string } type Dog struct {} func (d Dog) Speak() string { return \\\"Woof\\\" } func main() { var a Animal a = Dog{} fmt.Println(a.Speak()) // Output: Woof } 2. 空struct用途，会不会分配内存 空结构体（struct{}）在Go中是一个零占用的类型，它没有任何字段，占用的内存为0字节。空结构体通常用于以下场景： 信号量：空结构体作为信号量标志，例如，通道中发送空结构体来传递信号。 占位符：用于表示某种逻辑上的存在，但不需要占用实际内存。 会不会分配内存：空结构体不会占用内存，因为它没有任何字段。它通常用于表示某些标记或信号，且被广泛用于map的键类型或通道的值类型。 go 复制代码 type MySignal struct{} var m map[int]MySignal m = make(map[int]MySignal) 3. Go原生支持默认参数或可选参数吗，如何实现 Go没有原生支持默认参数或可选参数，但可以通过以下方法实现： 变长参数（...）：通过变长参数（类似数组或切片）可以接受可选参数，然后在函数内根据参数的数量进行判断，手动实现默认值。 函数重载的模拟：通过创建多个同名但参数不同的函数来模拟不同的参数组合。 示例： go 复制代码 func greet(name string, greeting string) string { if greeting == \\\"\\\" { greeting = \\\"Hello\\\" } return greeting + \\\", \\\" + name } 4. Go defer执行顺序 Go中的 defer 语句会在函数退出时按 后进先出（LIFO） 的顺序执行，即最后声明的 defer 最先执行。 示例： go 复制代码 func test() { defer fmt.Println(\\\"First\\\") defer fmt.Println(\\\"Second\\\") fmt.Println(\\\"Third\\\") } // 输出： // Third // Second // First 5. 协程，协程间信息如何同步 协程：是Go中比线程更轻量的执行单元，由Go的运行时调度系统管理。 协程间信息同步： 通道（Channel）：Go中通过 channel 实现协程间的通信和同步，协程可以通过通道传递数据来协调工作。 WaitGroup：用于等待多个协程执行完毕。 Mutex：用于保护共享资源，防止竞态条件。 示例（使用通道进行同步）： go 复制代码 ch := make(chan int) go func() { ch <- 1 }() result := <-ch fmt.Println(result) // 输出 1 6. Go GMP Go的 GMP 模型（Goroutine, Machine, Processor）是Go的调度模型： G：Goroutine，一个轻量级的线程。 M：Machine，操作系统线程。 P：Processor，Go运行时的执行上下文，表示一个逻辑CPU。 调度过程： Go运行时根据P的数量来决定运行多少个goroutine。如果P的数量很少，M就能运行多个goroutine，尽可能利用CPU资源。 7. 性能开销大原因 GM (Goroutine, Machine, Processor)： GM模型的调度：每个goroutine在P上执行。G阻塞时，M和P如何调度新的G。 GM开销原因： Goroutine 调度和上下文切换比线程轻量，但仍然需要一定的开销（例如栈分配和调度）。 M 是操作系统线程，在处理 I/O 操作时可能导致阻塞。 P 是逻辑CPU的映射，一个P通常对应一个操作系统线程，如果P不足，调度会受到影响。 8. 操作系统中大端编码、小端编码 大端编码（Big-endian）：将数据的高位字节存储在低地址中，低位字节存储在高地址中。 小端编码（Little-endian）：将数据的低位字节存储在低地址中，高位字节存储在高地址中。 示例： 对于一个16位整数 0x1234： 大端：12 34（高位在前） 小端：34 12（低位在前） 9. TCP、UDP TCP：面向连接的、可靠的、流式协议，保证数据传输的顺序和完整性。使用三次握手建立连接，四次挥手关闭连接。 UDP：无连接、不可靠的协议，传输数据时不保证顺序或可靠性。 三次握手： SYN：客户端发送连接请求。 SYN-ACK：服务器确认连接请求。 ACK：客户端确认服务器响应，连接建立。 四次挥手： FIN：客户端发送关闭连接的请求。 ACK：服务器确认关闭连接。 FIN：服务器发送关闭连接请求。 ACK：客户端确认，连接关闭。 流量控制： TCP 使用滑动窗口进行流量控制，保证发送方不会超出接收方的接收能力。 10. Redis项目中使用（主数据库还是缓存） 在项目中，Redis通常作为缓存系统来使用，存储频繁访问的数据以减少数据库查询压力。也可以用于会话存储、消息队列等场景。 11. Redis与MySQL数据如何同步 Redis与MySQL的数据同步通常是通过以下几种方式实现： 应用层控制：在应用程序中，操作Redis之前先更新MySQL，或在MySQL更新后更新Redis。 异步同步：通过消息队列（如Kafka）异步同步Redis与MySQL的变化。 定时同步：定期将MySQL的数据同步到Redis中。 12. MySQL索引建立原则 选择性高：对于字段选择性高（唯一值多）的列，创建索引更有效。 频繁查询的列：经常用作查询条件的列，尤其是WHERE、JOIN和ORDER BY中使用的列，应建立索引。 避免过多索引：虽然索引能加速查询，但会增加插入、删除、更新的开销。 13. Explain，字段 EXPLAIN 语句用于显示 MySQL 查询优化器的执行计划，帮助分析查询的执行效率。EXPLAIN 的字段包括： id：查询的顺序。 select_type：查询类型，如 SIMPLE（简单查询）、PRIMARY（主查询）等。 table：涉及的表。 type：连接类型，如 ALL、index、range 等，越优的类型越有助于查询优化。 possible_keys：查询可能使用的索引。 key：实际使用的索引。 rows：扫描的行数。 14. Redis持久化方式 RDB (Redis DataBase)：快照持久化，将内存中的数据定期保存到磁盘。 AOF (Append Only File)：逐条记录写入操作到日志文件，能够提供更高的持久化保证。 混合模式：同时使用RDB和AOF，提供更好的持久化和恢复能力。 15. Redis过期删除策略 惰性删除：当访问某个键时，检查是否过期，如果过期则删除。 定期删除：定期扫描所有过期键，并删除它们。 16. Redis高可用设计 主从复制：主节点负责读写，多个从节点同步主节点的数据，用于读写分离和容错。 哨兵模式：Redis Sentinel 监控主从节点，自动进行故障转移。 17. Kafka业务使用 Kafka 作为消息队列，在业务中通常用于日志收集、事件驱动架构、异步任务处理等场景。 18. Redis常用数据结构 String：最基本的数据类型。 Hash：适用于存储对象。 List：双端队列，用于实现生产者消费者模式。 Set：无序集合。 ZSet：有序集合，用于排名和计数。 19. zset使用场景，具体实现 使用场景：排行榜、计数器等需要排序的场景。 实现：内部使用跳表（skip list）实现，支持按分数进行排序。\"]},\"652\":{\"h\":\"腾讯外包 /后端开发/一面\",\"t\":[\"自我介绍\",\"go开发几年（1年半）\",\"熟悉到什么程度（增删改查不是问题）\",\"map是否安全（不安全）\",\"为什么不安全\",\"slice的底层结构\",\"apendslice会安全吗\",\"automatic有用过（用过+1-1）\",\"说一下什么是原子性（要么成功要么失败）\",\"怎么做有一个有序的排序（结构里搞个切片，然后用sort排序）\",\"mysql主从同步机制（不会）\",\"redis常用数据结构（string、list、hash、set、zset、bitmap）\",\"有序列表的底层结构（不会，跳表）\",\"常用的索引数据结构（哈希、b+树、二叉树）\",\"微服务的服务发现（客户端服务、服务端服务）\",\"怎么感知服务集群的变化（服务注册中心、轮询服务健康、监控系统）\",\"注册中心如何感知服务的变化(心跳推送？触发机制之类的）\",\"会不会k8s（不会）\"]},\"653\":{\"h\":\"字节跳动\",\"t\":[\"介绍一下业务表的字段\",\"定时任务刷新字段, 是怎么实现的?\",\"分布式锁? 分布式死锁如何解决? 看门狗机制? 如何避免当前线程加的锁, 被其它线程解锁?\",\"乐观锁和悲观锁的区别? 写多读少的情况, 应该使用乐观锁还是悲观锁?\",\"分布式场景下, 如何实现乐观锁?\",\"kafka的幂等性? 如何避免消息被重复消费?\",\"两个线程, 同时向mysql中插入一条数据?\",\"kafka如何保证消息不丢失\",\"sql优化场景:\",\"select id,name,balance from account where update_time > '2020-09-19' limit 100000, 10\",\"该语句为什么查询慢? 有什么优化思路?\",\"算法题: 子集\",\"1. 介绍一下业务表的字段 业务表字段设计应根据业务需求来进行，典型的字段可能包括： 主键字段：通常是ID字段，作为表中记录的唯一标识（通常使用自增ID或UUID）。 创建时间（created_at）：记录创建时间，用于追踪数据的生命周期。 更新时间（updated_at）：记录最后更新时间，便于进行数据同步或检查变化。 状态字段（status）：用于表示业务实体的当前状态（如“已支付”、“待处理”等）。 业务数据字段：与业务逻辑相关的字段，比如用户信息表可能包含user_id、user_name等字段，订单表可能包含order_number、product_id等字段。 外键字段：如果数据表与其他表相关联，外键字段可能用于表示表间的关系。 例子： sql 复制代码 CREATE TABLE orders ( id INT PRIMARY KEY AUTO_INCREMENT, user_id INT NOT NULL, order_number VARCHAR(50), total DECIMAL(10, 2), status VARCHAR(20), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users(id) ); 2. 定时任务刷新字段，是怎么实现的? 定时任务刷新字段通常是通过定时任务调度工具（如 Cron、Quartz、GoCron）来定期执行SQL更新操作或调用接口。 数据库更新：可以创建一个后台服务，每隔固定时间运行SQL语句来更新字段，如更新时间、标记字段等。 示例（MySQL）： sql 复制代码 UPDATE orders SET status = 'expired' WHERE status = 'pending' AND update_time < NOW() - INTERVAL 1 DAY; 定时任务：可以使用框架（如Go的time.Tick，Java的ScheduledExecutorService，或Quartz）来定期执行任务。 3. 分布式锁? 分布式死锁如何解决? 看门狗机制? 如何避免当前线程加的锁, 被其它线程解锁? 分布式锁：在分布式系统中，为了确保多个节点/实例间的协作，避免并发冲突，需要使用分布式锁来控制资源访问。 常见实现：Redis（SETNX、RedLock）、Zookeeper等。 分布式死锁：多个节点可能会互相等待对方释放锁，从而导致死锁。 解决方案：可以设置锁的过期时间（例如Redis的SETNX设置EX参数），超时自动释放锁；使用看门狗机制。 看门狗机制：设置一个定时器，定期刷新锁的有效期，防止锁被提前释放，避免因业务执行时间较长而被误释放。 如何避免锁被解锁： 锁的获取与释放应该由同一个线程负责，锁的释放通过唯一标识来防止其它线程解锁。 在Redis中，可以存储唯一标识（如UUID），并在释放锁时检查标识是否匹配，确保只有获取锁的线程才能释放。 4. 乐观锁和悲观锁的区别? 写多读少的情况, 应该使用乐观锁还是悲观锁? 乐观锁：假设数据在操作期间不会发生冲突，适合冲突较少的场景。通过版本号或时间戳机制来控制并发修改，冲突时会重试。适用于读多写少的场景。 示例：在每次更新时，检查数据库中的版本号是否匹配，如果不匹配，则认为发生了冲突。 悲观锁：假设数据会发生冲突，因此会在操作期间锁住数据。适合冲突较多的场景。通过数据库的行锁、表锁等方式实现。适用于写多读少的场景。 写多读少的情况下，应使用悲观锁，因为这种情况下数据修改较多，使用乐观锁可能会频繁触发重试机制，降低性能。 5. 分布式场景下, 如何实现乐观锁? 分布式场景下的乐观锁一般会依赖外部系统来实现版本控制。常见方式包括： 版本号控制：每次修改时，检查版本号，只有版本号匹配才允许修改，版本号不匹配则认为数据冲突，触发重试机制。 时间戳机制：通过检查更新时间戳，判断数据是否已经被修改，避免修改过时的数据。 Redis等存储系统：通过使用SETNX或RedLock等分布式锁来控制并发，或者通过更新操作时验证版本号、时间戳等条件。 6. Kafka的幂等性? 如何避免消息被重复消费? Kafka的幂等性：Kafka自2.0版本支持幂等性，生产者可以通过配置acks=all和enable.idempotence=true来确保消息的生产是幂等的，即不会出现重复消息。 避免消息重复消费： 幂等消费者：消费者可以在处理消息时，记录消息的唯一标识（如消息ID），如果相同的消息再次消费，跳过重复的处理。 消息去重：可以使用数据库的唯一约束、Redis缓存等方式来保证消息的幂等性。 7. 两个线程, 同时向MySQL中插入一条数据? 如果两个线程同时向MySQL插入相同的数据，并且没有任何约束（如唯一键、事务等），可能会导致： 重复数据：两条记录会插入到数据库中，尽管它们可能是相同的。 解决方法：通过使用唯一索引、事务控制、乐观锁或悲观锁来防止冲突。 例如，使用唯一索引： sql 复制代码 CREATE TABLE users ( id INT PRIMARY KEY AUTO_INCREMENT, username VARCHAR(50) UNIQUE ); 8. Kafka如何保证消息不丢失 Kafka通过以下几种方式来保证消息不丢失： 复制：Kafka的每个主题都有多个副本，数据会在多个节点上进行复制，以保证节点故障时数据不丢失。 持久化：消息默认持久化到磁盘，即使在节点重启后也可以恢复。 ACK机制：可以设置生产者的acks参数，确保消息写入到Kafka时得到确认。 acks=1：只有主节点确认。 acks=all：所有副本节点确认。 9. SQL优化场景 该查询慢的原因可能是： 全表扫描：没有合适的索引导致MySQL扫描了大量记录。 Limit位置不对：在LIMIT之前做了较大的数据过滤，导致OFFSET跳过大量数据，效率较低。 优化思路： 加索引：在update_time列上加索引，确保查询可以通过索引快速定位。 避免大偏移量：尽量避免LIMIT 100000, 10这种查询，特别是在数据量大的情况下。可以通过分页查询来解决此问题，或者利用主键ID范围分页。 优化后的查询： sql 复制代码 SELECT id, name, balance FROM account WHERE update_time > '2020-09-19' AND id > ? -- 使用主键ID分页 ORDER BY id LIMIT 10; 10. 算法题：子集 题目要求找到一个集合的所有子集。 解法：可以用回溯算法或位运算来求解。 回溯算法： go 复制代码 func subsets(nums []int) [][]int { result := [][]int{} var backtrack func(start int, current []int) backtrack = func(start int, current []int) { result = append(result, append([]int(nil), current...)) for i := start; i < len(nums); i++ { backtrack(i+1, append(current, nums[i])) } } backtrack(0, []int{}) return result } 位运算： 每个元素都有两种状态，选中或不选中，因此可以利用位运算来生成所有子集。 go 复制代码 func subsets(nums []int) [][]int { n := len(nums) result := [][]int{} for i := 0; i < (1 << n); i++ { subset := []int{} for j := 0; j < n; j++ { if i&(1<<j) != 0 { subset = append(subset, nums[j]) } } result = append(result, subset) } return result }\"]},\"654\":{\"h\":\"字节一面（技术）\",\"t\":[\"make和new的区别？\",\"mutex锁有几种模式？\",\"讲一下GMP调度模型\",\"两道语法纠错题（牛客上可以多刷一下）并解释为什么\",\"一道算法爬楼梯\",\"一道编程题：有100个并发线程，需要控制最多只有10个执行（有缓冲channel实现）并解释思路\",\"知道哪些设计者模式？\",\" 1. make和new的区别？ new：用于分配内存，并返回指向类型的指针。默认值为零值。例如： go 复制代码 var p *int p = new(int) // p指向一个类型为int的零值（即0）的内存 new(T)返回一个指向类型T的指针，内存已分配但初始化为零值。 make：只用于切片、映射和通道（slice, map, chan）。make初始化这些类型并返回引用，而不是指针。make分配内存并为对象初始化值，而new只是分配内存。例如： go 复制代码 m := make(map[string]int) // 创建并初始化一个map 总结： new(T)返回类型为*T的指针，初始化为零值。 make(T, size)返回类型为T的引用（不是指针），并初始化为合适的结构。 2. mutex锁有几种模式？ 在Go语言中，sync.Mutex是常用的互斥锁类型。其主要模式包括： 锁定模式（Lock）：线程对资源加锁，确保其他线程不能访问这段资源。使用mutex.Lock()进行加锁，直到执行mutex.Unlock()释放锁。 解锁模式（Unlock）：当不再需要访问共享资源时，释放锁，允许其他线程访问该资源。 重入锁：sync.Mutex本身不支持重入锁（即同一线程在已经加锁的情况下不能再次加锁），如果一个线程试图对同一个mutex加锁，可能会导致死锁。 锁等待（TryLock）：sync.Mutex本身没有提供直接的TryLock()方法，但可以通过channel和自定义逻辑模拟非阻塞的锁。 3. 讲一下GMP调度模型 Go语言的调度模型是基于Goroutine、M（机器），P（处理器）模型的。 G（Goroutine）：每一个轻量级线程都是一个G。Go的并发编程是基于Goroutine的，它比操作系统线程更轻量，因此可以创建大量的Goroutine。 M（Machine）：M表示操作系统线程，Go运行时的线程池负责管理操作系统的线程。每个M对应一个操作系统线程。 P（Processor）：P是Go调度器的抽象，用于执行Goroutine。每个P拥有一个本地队列，存放着准备好执行的Goroutine。P的数量可以通过runtime.GOMAXPROCS()来设置。 调度模型的工作流程： 一个Goroutine会被分配到一个P，P会将其交给M执行。M可以在多个P上调度执行。 Go调度器会自动选择一个M与P组合来运行Goroutine。 如果一个P没有工作要做，Go调度器会尝试从其他P的队列中偷取Goroutine来执行。 GMP调度流程的优点： 高效的调度使得Go能够高效地运行大量并发任务。 M与P的解耦，使得Go能够在不同机器和线程上高效地运行。 4. 两道语法纠错题（牛客上可以多刷一下）并解释为什么 问题1： 错误代码： go 复制代码 var a = [3]int{1, 2, 3} var b = []int{4, 5, 6} b = append(a, b...) 解释：数组a是一个固定长度的数组，而切片b是动态大小的，不能直接将数组a与切片b拼接。应该将数组a转换为切片类型来执行： go 复制代码 b = append(a[:], b...) // a[:] 是将数组 a 转换为切片 问题2： 错误代码： go 复制代码 var arr = []int{1, 2, 3, 4} arr[5] = 10 解释：arr[5] = 10试图访问arr的索引5，但切片arr的最大索引为3（长度为4）。越界访问会导致运行时错误。正确做法是： go 复制代码 arr = append(arr, 10) // 使用append扩展切片 5. 一道算法爬楼梯 问题描述：假设你正在爬楼梯，每次可以爬1步或2步。给定一个整数n，表示楼梯的总阶数，求有多少种方法可以爬到楼顶。 解法：这个问题实际上是斐波那契数列问题。爬到第n阶，可以从第n-1阶爬1步或从第n-2阶爬2步。因此，f(n) = f(n-1) + f(n-2)。 代码实现： go 复制代码 func climbStairs(n int) int { if n == 1 { return 1 } a, b := 1, 2 for i := 3; i <= n; i++ { a, b = b, a+b } return b } 6. 一道编程题：有100个并发线程，需要控制最多只有10个执行（有缓冲channel实现）并解释思路 问题描述：有100个并发线程，每次最多允许10个线程同时执行。 解决思路： 使用一个有缓冲区的channel来控制并发量。channel的缓冲区大小限制了同时能够处理的Goroutine数量。 每当一个线程执行时，向channel中发送一个信号，控制执行的数量。 代码实现： go 复制代码 package main import ( \\\"fmt\\\" \\\"sync\\\" ) func main() { var wg sync.WaitGroup ch := make(chan struct{}, 10) // 控制并发，最多允许10个线程同时执行 for i := 1; i <= 100; i++ { wg.Add(1) go func(i int) { defer wg.Done() ch <- struct{}{} // 向channel发送信号，锁定一个位置 fmt.Printf(\\\"Processing task %d\\\\n\\\", i) <-ch // 完成任务后释放信号 }(i) } wg.Wait() } 解释： ch := make(chan struct{}, 10)：创建一个容量为10的缓冲channel，确保每次最多只有10个Goroutine可以执行。 ch <- struct{}{}：每个Goroutine执行时向channel发送一个信号，占用一个位置。 <-ch：任务完成后，从channel中取出一个信号，释放一个位置。 7. 知道哪些设计模式？ 常见的设计模式包括： ==创建型模式：== 单例模式：确保一个类只有一个实例，并提供一个全局访问点。 工厂方法模式：定义一个接口用于创建对象，但让子类决定实例化哪个类。 抽象工厂模式：提供一个创建一系列相关或互相依赖对象的接口，而无需指定具体类。 建造者模式：使用多个简单的对象一步步构建成一个复杂的对象。 原型模式：通过复制现有对象来创建新对象，而不是通过构造。 结构型模式： 适配器模式：将一个类的接口转换成客户端期望的接口，使得两个不兼容的接口能够合作。 桥接模式：将抽象部分与实现部分分离，使它们可以独立变化。 装饰器模式：动态地给一个对象添加额外的职责。 外观模式：为复杂的子系统提供一个简单的接口。 享元模式：通过共享相同的对象来节省内存，适用于大量相似对象。 代理模式：为其他对象提供一种代理以控制对这个对象的访问。 行为型模式： 策略模式：定义一系列算法，把它们一个个封装起来，并使它们可以互相替换。 观察者模式：当一个对象改变状态时，所有依赖于它的对象都会得到通知并自动更新。 状态模式：允许一个对象在其内部状态改变时改变其行为。 模板方法模式：定义一个操作中的算法框架，允许子类为一个或多个步骤提供具体实现。 命令模式：将请求封装为一个对象，从而使你能够使用不同的请求、队列或日志请求。 责任链模式：使多个对象有机会处理请求，避免了请求的发送者与接收者之间的耦合。 这些设计模式可以帮助我们写出更加清晰、可维护、可扩展的代码。\"]},\"655\":{\"h\":\"字节二面（技术+人事）\",\"t\":[\"技术：\",\"讲一下一个系统访问的整个链路过程\",\"K8s有哪些组件？\",\"怎么把node里的pod暴露给外面使用？\",\"我对监控的理解，怎么判断一个系统是否已经挂调了？\",\"如果让你对系统进行一个巡检，你会怎么做？\",\"举例数据库巡检\",\"用过云产品吗？讲一下你对公有云的理解\",\"用过OPEN AI吗？你一般怎么使用？\",\"人事：\",\"从技术上和工作上上一家公司对你有什么成长？\",\"在工作中和技术上学到哪些技能？举例说明\",\"离职原因，未来职业规划\",\"技术相关 讲一下一个系统访问的整个链路过程 客户端发起请求，通过 DNS 查询获取目标服务器 IP 地址。 请求通过网络传输到目标服务器，通常是通过负载均衡器进行流量分发。 请求被路由到后端应用服务器，进行业务逻辑处理。 如果需要数据库操作，应用服务器会查询数据库，数据库返回数据。 数据返回给应用服务器，再通过负载均衡器返回给客户端。 系统日志和监控数据在过程中也会被记录和分析，以便优化和故障排查。 K8s有哪些组件？ Master组件：API Server、Controller Manager、Scheduler、etcd。 Node组件：Kubelet、Kube Proxy、Container Runtime（如Docker、containerd）。 其他组件：Ingress Controller、CoreDNS等。 怎么把node里的pod暴露给外面使用？ 使用 Service 类型为 LoadBalancer 或 NodePort，可以将 Pod 暴露给外部网络。 LoadBalancer 类型适用于云环境，自动分配外部 IP。 NodePort 类型在集群节点上分配一个端口，外部通过该端口访问。 我对监控的理解，怎么判断一个系统是否已经挂掉了？ 监控主要是通过收集系统指标（如 CPU、内存、磁盘、网络等）和应用指标（如请求量、响应时间、错误率等）来评估系统健康状态。 如果系统出现服务宕机、响应超时、或指标异常（如 CPU 使用率过高、内存泄漏等），可以认为系统出现故障。 如果让你对系统进行一个巡检，你会怎么做？ 检查系统日志：查看错误日志、警告信息、异常堆栈等。 资源使用情况：检查 CPU、内存、磁盘和网络使用情况，查看是否有异常。 依赖服务状态：检查数据库、缓存、消息队列等依赖服务是否正常运行。 监控和报警配置：确保监控系统正常运行，报警阈值合理。 数据库巡检：检查慢查询日志、表的健康状态、索引和数据一致性。 举例数据库巡检 查询性能：检查慢查询日志，优化慢查询 SQL。 索引优化：检查索引的使用情况，确保常用查询有合适的索引。 数据库表状态：检查表的碎片，定期进行表的优化。 数据库备份：确认备份是否完整、是否定期进行，并且备份可恢复。 用过云产品吗？讲一下你对公有云的理解 公有云提供了弹性的计算、存储和网络资源，通常按需付费，能够根据业务需求进行扩展。 公有云提供了高可用、容灾、负载均衡等功能，且不需要用户自己管理基础设施，简化了运维。 常见的云服务商有 AWS、Azure、Google Cloud、阿里云、腾讯云等。 用过 OpenAI 吗？你一般怎么使用？ 是的，OpenAI 提供了强大的语言模型，常用于自然语言处理任务，如文本生成、翻译、问答、内容创作等。 通常使用 OpenAI 进行对话生成，代码自动补全，数据分析等，帮助提高工作效率。 人事相关 从技术上和工作上上一家公司对你有什么成长？ 在上一家公司，我主要接触了高并发、高可用系统的架构设计与实现，提升了我的系统设计和架构能力。 深入了解了 Kubernetes 和容器化的实践，掌握了微服务架构、CI/CD等现代化开发流程。 参与了多个性能优化和问题排查项目，增强了我在高压场景下的调试和解决问题的能力。 在工作中和技术上学到哪些技能？举例说明 学会了如何设计分布式系统，包括数据库分片、消息队列、缓存等技术栈。 深入理解了微服务架构，特别是在服务发现、API网关、负载均衡等方面的实际应用。 在性能优化方面，学到了通过日志分析、压力测试、代码优化来提升系统性能。 离职原因，未来职业规划 离职的原因是希望寻找更具挑战性的项目，提升自己的技术深度，尤其是在云计算、人工智能和大规模分布式系统方面的能力。 未来的职业规划是向架构师方向发展，特别是在云原生架构、微服务设计和高可用系统方面积累更多经验。\"]},\"656\":{\"h\":\"字节\",\"t\":[\"自我介绍\",\"选择一个项目或者需求详细介绍一下\",\"代码题，输出什么内容\",\"package main import ( \\\"encoding/json\\\" \\\"fmt\\\" ) func main() { jsonStr := `{\\\"id\\\":321789788912372911233,\\\"name\\\":\\\"John\\\",\\\"age\\\":30,\\\"city\\\":\\\"New York\\\"}` var person map[string]interface{} json.Unmarshal([]byte(jsonStr), &person) person[\\\"married\\\"] = true person[\\\"children\\\"] = []string{\\\"Tom\\\", \\\"Jerry\\\"} fmt.Println(person) jsonB,_ := json.Marshal(person) fmt.Println(string(jsonB)) }\",\"tcp 拥塞控制算法\",\"mvcc 底层实现原理\",\"在有些实际生产中会将默认隔离级别调整至读提交，为什么，有什么好处\",\"mysql 怎么实现乐观锁和悲观锁\",\"一条 sql 语句，匹配到了一条语句，会加什么锁，锁表还是锁行\",\"es 里面是怎么实现分页的，分页有哪几种方式\",\"算法题 力扣 42 接雨水\",\"自我介绍 我是一个专注于后端开发的工程师，主要使用 Golang 开发高性能、高并发的系统，熟悉常见的技术栈，如 MySQL、Redis、Kafka 等。近年来，特别关注微服务架构和容器化部署，了解 Kubernetes 和 DevOps 流程。 选择一个项目或需求详细介绍一下 我曾经参与过一个基于微服务的电商平台项目。在这个项目中，我们使用了 Golang 实现后端服务，前后端分离，利用 Kubernetes 部署和管理容器化的服务。项目的核心需求是实现高并发的订单处理系统，通过消息队列（Kafka）进行解耦，并使用 Redis 缓存来提高响应速度。为了保证系统的高可用性，我们设计了分布式锁来确保数据一致性。 代码题输出解释 go 复制代码 package main import ( \\\"encoding/json\\\" \\\"fmt\\\" ) func main() { jsonStr := `{\\\"id\\\":321789788912372911233,\\\"name\\\":\\\"John\\\",\\\"age\\\":30,\\\"city\\\":\\\"New York\\\"}` var person map[string]interface{} json.Unmarshal([]byte(jsonStr), &person) person[\\\"married\\\"] = true person[\\\"children\\\"] = []string{\\\"Tom\\\", \\\"Jerry\\\"} fmt.Println(person) jsonB,_ := json.Marshal(person) fmt.Println(string(jsonB)) } 输出解释 第一行输出： person 是一个 map[string]interface{}，通过 json.Unmarshal 将 JSON 字符串解析为 map 类型。添加了 married 和 children 字段后，打印出的 map 包含这些新增字段。 输出： json 复制代码 map[age:30 children:[Tom Jerry] city:New York id:321789788912372911233 married:true name:John] 第二行输出： 使用 json.Marshal 将 map 转换回 JSON 字符串。注意字段的顺序不会保证，与原始输入 JSON 字符串的顺序不同，但数据内容是相同的。 输出： json 复制代码 {\\\"id\\\":321789788912372911233,\\\"name\\\":\\\"John\\\",\\\"age\\\":30,\\\"city\\\":\\\"New York\\\",\\\"married\\\":true,\\\"children\\\":[\\\"Tom\\\",\\\"Jerry\\\"]} 其他技术相关问题回答： TCP 拥塞控制算法 TCP 拥塞控制是通过以下四个算法实现的：慢启动（Slow Start）、拥塞避免（Congestion Avoidance）、快重传（Fast Retransmit）、快恢复（Fast Recovery）。慢启动用于避免开始时网络过载，拥塞避免用于平稳增长窗口大小，快重传和快恢复则用于丢包后的恢复。 MVCC 底层实现原理 MVCC（多版本并发控制）通过为每个数据库操作提供一个版本号（或时间戳）来实现并发控制。当多个事务修改同一数据时，数据库会创建不同版本的数据，允许事务在其视图下读取数据的旧版本，而不会干扰其他事务。 调整隔离级别为读提交的原因 读提交（Read Committed）可以防止脏读，但允许不可重复读。生产环境中，为了提高性能和减少死锁的发生，很多系统会将隔离级别设置为读提交。在某些情况下，读提交能满足业务需求，避免了较高的性能开销。 MySQL 实现乐观锁和悲观锁 乐观锁：通常通过版本号或时间戳实现，事务开始时不加锁，提交时检查数据是否被其他事务修改。如果没有修改，则提交成功，否则重试。 悲观锁：通过数据库提供的锁机制（如 FOR UPDATE）来实现，事务会在读取数据时加锁，直到事务结束。 SQL语句加锁问题 对于查询操作，若没有明确指定锁类型（如 FOR UPDATE），MySQL 默认不会加锁。加锁通常是在修改数据时进行的，比如 INSERT、UPDATE 或 DELETE，这些操作默认会加行级锁。 Elasticsearch 分页实现方式 Elasticsearch 提供了多种分页方式： from/size：常见的分页方式，通过指定 from 和 size 来控制查询的起始位置和返回记录数。 search_after：适用于深分页，避免了 from/size 的性能瓶颈，通常与排序结合使用。 算法题：力扣 42 接雨水 该题目需要计算下雨后能够积水的总量。解法通常使用双指针方法，维护两个指针从两端向中间移动，计算当前位置的最大可容积水量，最终得到积水的总量。\"]},\"657\":{\"h\":\"美团 一面\",\"t\":[\"自我介绍\",\"leetcode141 环形链表，判断是否有环路\",\"延申leetcode142 环形链表2，找到入口位置\",\"判断一个sql（左右模糊查询）能否命中索引\",\"为什么左右模糊不能命中索引\",\"如何优化这个sql（左右模糊查询）\",\"全文索引底层怎么实现的\",\"建立分词后，如何进行快速的模糊检索\",\"分词用的什么数据结构\",\"跳表的时间复杂度，哈希表呢\",\"哈希表有什么问题\",\"说一下MySQL的索引\",\"什么是聚簇索引、非聚簇索引\",\"事务隔离级别\",\"InnoDB如何实现可重复读\",\"死锁是什么，如何解决死锁\",\"拷打项目\",\"你觉得科研中什么能力比较重要（解决问题能力、系统设计能力、学习能力和技术使用能力、沟通协作能力）\"]},\"658\":{\"h\":\"美团 二面\",\"t\":[\"自我介绍\",\"拷打项目\",\"socket、TCP/IP 的关系\",\"输入 url 的到浏览器显示网页的过程\",\"反问\"]},\"659\":{\"h\":\"美团\",\"t\":[\"Go中Map的数据结构?扩容机制?key为什么是无序的?\",\"简述-下rune类型\",\"什么是协程泄露?\",\"select 底层数据结构和一些特性?\",\"对已经关闭的的chan进行读写，会怎么样?为什么?\",\"除了加Mutex锁以外还有哪些方式安全读写共享变量?\",\"互斥锁正常模式和饥饿模式的区别 ?\",\"原子操作和锁的区别 ?\",\"一条select语句的执行流程?\",\"CHAR 和 VARCHAR的区别?\",\"MYISAM和INNODB的不同?\",\"binlog的工作模式有哪些?\",\"持久化机制?各自的优缺点?\",\"怎么理解Redis事务?\"]},\"660\":{\"h\":\"美团\",\"t\":[\"自我介绍\",\"项目做完了吗？背景是什么？项目初期的背景调研是怎么做的？现在这个系统做到哪一步了？\",\"用户下单用户派送的优劣了解过吗？怎么管理？\",\"项目里面遇到的最大的难题是什么？为什么？\",\"为什么使用乐观锁？你了解乐观锁的使用场景和实现逻辑吗？\",\"乐观锁怎么实现的你了解吗？\",\"了解悲观锁吗？\",\"最开始有没有考虑乐观锁的适用场景和悲观锁的适用场景？\",\"乐观锁会不会导致频繁的冲突啊？这种情况下和悲观锁谁的性能更好一些呢？\",\"关于 Redis 的递减特性你了解哪些？\",\"关于 Redis 的指令还用到过其他哪些呢？\",\"setnx 的原理你知道吗？\",\"有个场景你了解吗：锁获取后程序退出了，这样锁永远不会释放，导致死锁\",\"看你简历里说比较了解集合，对集合的了解简单说一下\",\"怎样判断内存是否需要回收？（对象死亡的判断方法？）\",\"可达性分析是如何对对象进行标记的？三色标记法了解吗？\",\"垃圾回收的过程（针对某一个具体的垃圾收集器 CMS 或 G1）\",\"清除的过程呢？\",\"标记清除算法的优点和缺点？\",\"CMS 标记阶段比较长，如果产生了过多的浮动垃圾，有可能会出现回收赶不上分配的情况，从而导致 GC 失败，这种要怎么解决？\",\"CMS 和 G1 的比对了解吗？为什么废除了 CMS？\",\"G1 怎么做到指定具体的垃圾清除时间的？\",\"线程的生命周期你了解吗？\",\"每个状态之间怎么流转的你了解吗？\"]},\"661\":{\"h\":\"饿了么\"},\"662\":{\"h\":\"一面\",\"t\":[\"自我介绍\",\"Java面向对象的三个特性，什么是多态\",\"双亲委派机制\",\"HashMap在JDK1.7以前有线程不安全，怎么个情况\",\"保证线程安全用什么Map\",\"ConcurrentHashMap是怎样的\",\"线程池用过吗？核心参数以及有啥作用\",\"使用线程池有什么好处\",\"悲观锁和乐观锁是怎么样子的\",\"Java中怎么实现悲观锁和乐观锁\",\"HTTP和HTTPS的区别，加密过程是怎样的\",\"TCP的粘包是怎样的现象\",\"Cookie和session的区别\",\"用户登录之后怎么找到对应的Session的呢\",\"两个项目哪个有挑战一点，挑一个讲一讲\",\"平时做项目或科研会遇到什么困难，遇到困难一般自己解决吗\",\"最近有了解一些新的技术或者看一些技术书籍之类的吗\",\"算法题：反转链表\",\"其他的offer\",\"之后有往上海发展的打算吗\",\"反问\"]},\"663\":{\"h\":\"阿里巴巴\"},\"664\":{\"h\":\"数字零售技术部-ERP技术一面（电话面）\",\"t\":[\"自我介绍\",\"项目背景？\",\"你觉得项目难点是哪些？\",\"第一版是怎么实现的？为什么会出现超卖问题？\",\"记录抢单结果的表是怎么设计的？\",\"这张表的索引和其他的约束是怎么做的？\",\"乐观锁为什么不是加在抢单关系表而是在订单表里的？\",\"你现在数据库的设计上似乎有些问题\",\"你们的订单允许取消吗？\",\"如果要取消的话应该怎么设计呢？\",\"简易短视频做了哪些东西\",\"用户登录的处理流程是怎么个样子\",\"接收登录请求是HTTP吗\",\"HTTP里面登录的状态保持是怎么做的？\",\"怎么判断JWT的合法性\",\"JWT里面保持了哪些东西？数据结构大概是什么样子？\",\"JWT和普通的Session的方式有什么区别？\",\"session的方式了解过吗？\",\"使用JWT要实现一个状态只能一个设备登录，这应该怎么做呢？\",\"怎么设置JWT的校验不通过呢？\",\"JWT对于登录数量有要求的就很痛苦\",\"Java的双亲委派，为什么要这么设计呢？\",\"类如果重复加载会有什么问题呢？\",\"有遇到过非双亲委派模型的场景吗？\",\"类加载的过程一般会做哪些事情？每一步具体都在做些什么呢？\",\"对JVM的调优有了解过吗？\",\"说说你对Redis的了解\",\"bitmap是个什么样的东西\",\"项目里的Redis是怎么用的？\",\"抢单为什么会有库存数量\",\"使用Redis防止超卖的流程是怎样的，会不会有并发的问题？\",\"递减是怎么操作的？\",\"这样会不会有问题，递减完成时的并发判断库存大小的时候出问题，因为递减和判断不是原子性的\",\"ThreadLocal的作用\",\"什么样的情况下会使用ThreadLocal？\",\"后面怎么使用的？\",\"这么设计（使用ThreadLocal）的原因？目前来说ThreadLocal是能不用就不用的\",\"内部起个线程池，这时能拿到ThreadLocal的内容吗？\",\"SpringCache和Redis有什么区别？（考虑业务上的合理性）\",\"MySQL有哪些储存引擎了解吗？有什么区别\",\"聚簇索引和非聚簇索引有什么区别？\",\"回表的优化了解过吗？\",\"为什么不要使用select * 呢？\",\"没有被索引覆盖是什么？\",\"什么是索引下推\",\"反问\"]},\"665\":{\"h\":\"二面（电话面）\",\"t\":[\"自我介绍\",\"这里面比较有挑战的是哪个系统\",\"在Redis里怎么做库存的扣减\",\"怎么保证是不超卖的呢\",\"面试官举了个例子表示对Redis递减防止超卖的不理解\",\"HashMap底层是什么数据结构组成的\",\"红黑树有什么好处\",\"28个元素放到HashMap里面，那么HashMap初始化的容量为多少比较好\",\"初始化了一个固定线程数的线程池，线程数是5个，把6个任务扔进去，线程池怎么处理\",\"MySQL有个表，里面四个字段有abc三个字段，d是主键，我要查询ab，条件是bc，这时怎么设计索引\",\"什么是回表\",\"假设还是这个表，数据量很大，这时要做分页，每页100条，你怎么设计这个查询语句\",\"子查询怎么设计\",\"比如要查第10000页，你会怎么写这个sql\",\"用过limit查询吗\",\"项目里Redis防止超卖的方案，Redis就类似一个锁了\",\"解释缓存穿透和缓存雪崩\",\"上述情况的解决方案\",\"刷新视频时系统会推荐20条用户没看过的视频，这时怎么设计会让性能更优呢\",\"考虑位图或者布隆过滤器，使用二进制数组来保存视频，实现筛选没看过的视频\",\"笔试题：输出每个url最多的访问次数（类似华子实习笔试第一题，但是简单一些）\",\"反问\"]},\"666\":{\"h\":\"阿里\",\"t\":[\"分别介绍一下MySOL、ES、Mongo数据库各自的特点以及适合的使用场景是什么?\",\"倒排索引了解吗?\",\"ES的分页功能有什么特性?\",\"ES的分词检索?\",\"Kafka与Zookeeper是什么关系?\",\"多个同样的消息被发送到Kafka如何控制他们只消费一个?\",\"什么是Kafka的羊群效应 ?\",\"Redis相比Memcached有哪些优势?\",\"阐述缓存穿透?怎么解决?\",\"什么是bigkey?会有什么影响?\"]},\"667\":{\"h\":\"阿里外包/一面\",\"t\":[\"自我介绍\",\"遇到过高并发？（网站大访问量用redis缓存，表单做提交）\",\"进程、线程、协程（随便说说）\",\"go的协程设置原理（说了gmp模型）\",\"go的锁,用到什么锁（mutex、rwmutex）\",\"锁怎么实现的，有没有看过源码（莫得）\",\"innodb和myisam区别（事务支持、查询速度、表文件结构、外键支持、innodb有主键，查询效率高）\",\"为什么查询效率高（叶子节点存储索引和数据，避免回表二次查询）\",\"mysql优化（说了分表和覆盖索引）\",\"explain关注的字段（命中索引、可能命中索引、全表扫描、用到覆盖索引）\",\"redis和kafka的区别（说了redis和kafka的特点）\",\"用过k8s吗（没）\",\"mysql的版本控制（说了mvcc，以及怎么实现的）\",\"前期用php?(公司转型）\",\"php和go哪个好用（说了go协程用起来方便，php的麻烦一点，编译型语言，安全比php明文安全）\",\"goroutine+channel依次输出小猫小狗100次（设置猫狗channel，先读猫channel输出，狗输出的时候先读猫channel来保证顺序，没说好这一块）\",\"map怎么用？线程安全？怎么扩容？（不是安全的，用sync.map安全，说了双倍扩容）\",\"怎么解决他的哈希冲突？（重新扩容、哈希函数重新生成）\",\"设计模式（说了单例模式、策略模式）\",\"php用什么框架（tp、laravel）\",\"laravel的依赖注入\"]},\"668\":{\"h\":\"蚂蚁\"},\"669\":{\"h\":\"工具开发一面（电话面）\",\"t\":[\"自我介绍\",\"项目背景\",\"JMeter做了压测，压测是怎么设计的\",\"500压测线程的设置和服务器以及JVM的规格和设置有什么关系吗\",\"优化了50%，那么优化点主要体现在哪里呢\",\"RabbitMQ在写DB时如果出现了异常，导致了数据不一致，有什么补偿的机制吗\",\"在线程池中线程复用的情况下，ThreadLocal会不会有什么问题\",\"代码里面会是什么时机做ThreadLocal的remove呢\",\"在使用AOP的时候，对于接口会有一些规范的要求吗？比如方法签名中的参数会不会有一些规范？\",\"如果要依赖一些参数做做一些权限的控制的话，对于参数的规范会有一些怎样的考虑\",\"具体讲一下使用逻辑过期方案解决Redis的缓存击穿问题\",\"这个跟Redis里面看门狗的机制有什么区别吗\",\"如果内存不够大了会选择使用什么方案来解决呢（逻辑过期不让缓存过期）\",\"如果是要开一个线程来同步数据库从而解决逻辑过期的话，新开的线程与其他读取缓存的线程之间的协作关系怎么处理呢\",\"JDK的类库里面有没有了解到可以做线程之间协作关系的\",\"除了synchronized还有其他更加灵活的方案吗？\",\"怎么理解乐观锁和悲观锁的\",\"怎么考量用乐观锁还是悲观锁的？\",\"项目中有没有遇到JVM相关的问题，比如内存溢出等问题\",\"万一有OOM或者线程卡住了，我们排查的手段和步骤是怎么样的？\",\"在设置JVM参数的时候，考虑机器有4G的内存，那我设置会有什么样的原则吗\",\"对自己职业的预期，更偏向算法还是更偏向工程\",\"互联网+的比赛做的是什么？控制平衡还是视觉识别\",\"对于具象智能有什么想法吗\",\"算法题：使用多线程统计一个文件中不同的词出现的次数，记不清了\",\"反问\"]},\"670\":{\"h\":\"工具开发二面（电话面）\",\"t\":[\"自我介绍\",\"这三个项目的时间顺序\",\"项目背景\",\"Java的list有哪些以及他们的区别和原理\",\"HashMap和HashTable的区别\",\"一个类在JVM的生命周期，按照这个说一下类的加载过程\",\"验证这个阶段会加载到JVM的内存结构的哪个部分去\",\"用过命令去打过jar包吗\",\"介绍双亲委派机制\",\"有自己写一个类加载器吗\",\"知道可以拓展类加载器吗\",\"说一下对于AOP和IOC的理解\",\"AOP的实际的应用有哪些\",\"SpringBoot你常用的注解有哪些\",\"有了解过注解的原理吗？注解的本质是什么\",\"Spring里面有很多SDK，你常用的有哪些？比如MyBatis\",\"这块原理有了解过吗\",\"这里有没有对哪一块比较熟悉并且研究过原理的\",\"设计模式有了解过吗\",\"数据库索引的原理了解吗\",\"讲一下你对b+树的理解\",\"项目中有遇到过一些慢sql的情况吗\",\"除了explain还有其他定位慢sql的方式吗\",\"一般是什么原因会导致慢sql\",\"介绍项目中Redis是怎么用的\",\"Redis是单线程还是多线程的\",\"Redis的持久化有了解过吗\",\"有没有了解过Redis的集群\",\"数据库这块除了MySQL有没有了解过Mongo\",\"Redis里面的事务原理有了解过吗\",\"Redis的缓存穿透、雪崩怎么解决\",\"shell这一块有了解吗\",\"大模型这块有了解过相关的技术或者产品吗\",\"transform有了解过吗\",\"你觉得你过去做的最有挑战的事是什么\",\"你觉得你成就感最大的事情是什么\",\"自己的性格有测过吗MBTI\",\"对base地有要求吗\",\"手头有其他offer吗？对蚂蚁这边的意向怎样\",\"反问\"]},\"671\":{\"h\":\"工具开发三面\",\"t\":[\"自我介绍\",\"论文的层次，参加的比赛，专利\",\"介绍实验室的科研项目\",\"已经拿到的offer，base选择\",\"为什么不继续科研方向\",\"参加过开源项目吗？github有账号吗\",\"为什么没有参加实习\",\"项目的收获\",\"项目收获比较大的地方\",\"反问\"]},\"672\":{\"h\":\"百度\",\"t\":[\"1.GMP模型?\",\"2.协程创建后如何调度?\",\"先进入p的私有队列, 如果满了, 进入全局队列\",\"3.context的结构和用法\",\"4.一次url的请求过程?\",\"5.请求到达项目服务器后的调用链路\",\"6.nginx是否为单例的.\",\"7.算法: 两数相除\",\"8.平时mysql优化的案例?\",\"9.in, exist的使用\",\"10.联合索引\",\"11.binlog日志\",\"12.分布式事务: 下游两个db使用redis, 需要更新这两个不同的db, 如何自己实现最终一致性\",\"13.两阶段提交, 三阶段提交?\"]},\"673\":{\"h\":\"百度后端研发工程师\",\"t\":[\"自我介绍\",\"操作系统处理死锁的方法\",\"操作系统内存管理的方法\",\"Redis持久化\",\"Memcache知道吗\",\"使用shell统计文件中top3的ip地址\",\"磁盘满了写不进去，排查命令\",\"找出文件夹中最大的几个文件，命令是什么\",\"说-下ES和Redis的区别\",\"编程题 //Go两个goroutine交替打印1-10 //G1 1 //G2 2 //G1 3 //G2 4 //.. //G1 9 //G2 10\"]},\"674\":{\"h\":\"京东 golang\"},\"675\":{\"h\":\"一面 60min\",\"t\":[\"讲一下项目\",\"go语言的掌握程度\",\"数据结构\",\"空间利用率提高，但是发生冲突的可能性也增大了\",\"go语言的map\",\"拉链法的优缺点\",\"拉链法如何优化\",\"负载因子调到1会有什么后果\",\"数据库\",\"数据库索引有哪些\",\"ql建表\",\"设计一张字生表：表需求是可以记录学生姓名、出生日明、手机 号、是否在读。邮箱。家庭地址、生表现评价 常见查询条件为姓名、出生日期、手机号、是否在读\",\"这个表有什么缺陷\",\"新加一个学号字段要考虑什么\",\"数据库四大特性\",\"innodb默认隔离级别\",\"rr是怎么实现的\",\"网络\",\"tcp三次握手\",\"ip位于哪层？icmp位于哪层？ping命令位于哪层？\",\"telnet是什么操作？位于哪层？\",\"https加密过程 (这个我不太清楚 如果有大佬知道 麻烦评论区指点一下)\"]},\"676\":{\"h\":\"二面 35mn\",\"t\":[\"二面面试官：\\\"看你简历感觉你对go的接触程度不是特别深 你需要在接下来的过程中说服我\\\"\",\"对哪些语言比较熟悉\",\"为什么很多大厂都用go\",\"说一说对slice的认识\",\"slice如何做深拷贝\",\"数据库\",\"如何避免回表\",\"标识性差的字段一定不能做索引列吗？\",\"标识性差的字段为什么不能用来做索引列？\",\"b和b+树的区别\",\"mysql默认隔离级别\",\"rr如何解决不可重复读\"]},\"677\":{\"h\":\"京东\"},\"678\":{\"h\":\"一面\",\"t\":[\"算法题：leetcode16.最接近的三数之和，leetcode234.回文链表，leetcode72.编辑距离\",\"自我介绍\",\"前面两个项目是自己发起的还是什么契机去做这个项目的\",\"ThreadLocal怎样保证其线程安全\",\"怎样保证多线程来使用他？？\",\"如果主线程中有信息，其他线程怎么获取主线程中的信息\",\"项目中Redis哪些地方用到了\",\"Redis的哪些操作有原子性\",\"除了递减指令还有哪些指令具有原子性呢\",\"两个项目里面你觉得那部分是有技术难点的\",\"超卖问题还有什么别的解决方案呢\",\"如果是两个应用都要写数据库，加锁怎么解决超卖问题呢\",\"聊一聊乐观锁和悲观锁\",\"两种锁各自的应用场景\",\"ArrayList和LinkedList说一说吧\",\"String类可以被继承吗？为什么？\",\"JVM的组成部分\",\"说一说使用的垃圾回收器\",\"G1垃圾回收期和CMS的改进或者说不一样的地方\",\"G1的分区，有哪些区（堆的分区）\",\"G1的清除算法\",\"什么情况下会产生full GC\",\"原空间是用来做什么的？\",\"TCP的四次挥手是怎么样的\",\"为什么要等待\",\"有没有主动去了解过一些新的技术？\",\"从大学到现在做的最有成就感的事情\",\"第三个项目是主导地位？可以安排别人的工作\",\"你觉得你的优势是什么\",\"学习成绩怎么样\",\"反问\"]},\"679\":{\"h\":\"二面\",\"t\":[\"自我介绍，介绍一个项目\",\"这两个项目是自己开发的还是给公司做的\",\"哪个项目是自己承担的更多\",\"超卖问题是怎么发现的，解决思路，怎么找到的方案\",\"网上的成熟方案你觉得有没有更好的方案或者现有的方案有没有什么问题\",\"Redis失效后怎么保证与数据库中数据的一致性\",\"Redis持久化可以解决这种突发的情况吗？这个没有调研过吗\",\"一般去哪里找这些解决方案，不同地方有什么倾向性吗\",\"做的这两个项目里面比较大的收获是什么\",\"这个项目后面会继续做吗\",\"自己对未来一两年的规划是怎样的\",\"行业或者技术方向会有考虑吗\",\"为什么是Java和Go呢\",\"当前行业的语言都了解过哪些\",\"你觉得自己的最大的优势是什么\",\"反问\"]},\"680\":{\"h\":\"京东一面 （30min ）\"},\"681\":{\"h\":\"微服务中间件开发部门\",\"t\":[\"自我介绍\",\"实习项目中确保结果准确性\",\"实习项目上游数据有问题怎么办\",\"Golang new 和make的区别\",\"为什么多协程优化，不使用协程呢？\",\"实习项目过程中还有什么可以优化的地方\",\"微服务的优势，为什么用微服务\",\"怎么确保线程安全\",\"信号量和锁的区别\",\"你有什么问题吗？\"]},\"682\":{\"h\":\"PDD 一面/Java\",\"t\":[\"MySQL\",\"提交了怎么样的事务有可能导致死锁\",\"怎样用？什么情况使用\",\"数据同步怎么实现\",\"使用null作为条件查询问题\",\"最左前缀原则\",\"索引下推、索引覆盖\",\"join原理实现\",\"索引设计讲究/原则\",\"聚簇索引\",\"InnoDB为什么建议用自增整数作为主键\",\"MySQL内存磁盘同步机制\",\"数据页在内存中是完整的数据吗？\",\"分库分表\",\"MySQL主从架构\",\"MySQL什么时候会死锁\",\"表中有业务主键、逻辑删除标志，逻辑删除后又插入同样的一条记录，平衡业务主键和逻辑删除的问题\",\"项目工程\",\"业务背景\",\"系统QPS\",\"项目中算法如何使用\",\"项目中的架构设计有何问题\",\"业务修改后 MySQL、Redis数据如何更新\",\"如何进行数据持久化\",\"哪一部分占比较高\",\"如何重新设计MySQL、Redis架构\",\"设计模式（工程上使用）\",\"单体应用多层异常处理原则（异常管理原则）\",\"Redis、MySQL配合使用，如何确保数据一致性\",\"项目介绍\",\"系统故障问题、如何解决\",\"服务器部署情况\",\"代码迭代过程中防止代码腐化\",\"关注的业务指标\"]},\"683\":{\"h\":\"PDD服务端开发\",\"t\":[\"自我介绍\",\"项目的各种细节\",\"服务发现一般可以怎么做!\",\"InnoDB 引擎的特性\",\"MySQL 数据库支持高并发的读写，设计上有哪些可以用的方案?\",\"了解哪些缓存淘汰策略?\",\"go 的 defer 机制\",\"go 的 map 是有序还是无序?为什么?\",\"GET、POST 区别\",\"HTTP 是无状态的，如何做到有状态?(cookie session)\",\"HTTPS 过程\",\"算法题:\",\"LRU\",\"LeetCode 62 不同路径\"]},\"684\":{\"h\":\"酷狗音乐\"},\"685\":{\"h\":\"一面\",\"t\":[\"mysql存储引擎?\",\"mysql隔离级别? 分别解决了什么问题?\",\"2pc, 3pc 算法\",\"10亿个数据获取前100个最大数据?\",\"单个表到达多大要进行拆分? 为什么需要拆表?\",\"redis哪些使用场景?\",\"服务的熔断降级?\",\"平时如何提升和学习?\",\"TCP和UDP可以绑定同一个端口吗?\",\"linux如何查看cpu, 内存负载?\",\"进程间通信有哪些方式?\",\"redis的数据类型?\",\"redis和mysql的一致性问题?\"]},\"686\":{\"h\":\"二面\",\"t\":[\"项目中涉及到哪些监控? prometheus\",\"队列出现消息积压, 如何处理?\",\"消息幂等性?\",\"一个sql语句, 已经建立了索引, 但是突然查询很慢, 如何排查?\",\"索引失效场景?\",\"mysql如何解决的幻读?\",\"select ... for update: 保证当前事务中查询的范围加锁, 不被其它事务修改\",\"做索引优化, 如何减少回表次数--索引下推\",\"索引下推: 指将上层(服务层)负责的事情, 交给下层(引擎层)处理.\",\"不使用索引下推: 根据索引中的主键值, 定位并读取完整的行记录, 然后将记录交给server层去检测该记录是否满足where条件\",\"使用索引下推: 获取索引, 判断索引是否符合条件范围, 如果满足, 再进行对应的回表查询获取主键, 如果不满足, 直接过滤掉\",\"分布式事务, 二阶段提交, 三阶段提交的区别?\",\"linux查看网络io的命令? netstat\",\"如果出现大量time-wait状态, 如何处理?\",\"网络的拥塞控制?\"]},\"687\":{\"h\":\"b站外包/go开发/一面\",\"t\":[\"自我介绍\",\"在百度什么级别？t几？（没有技术级别，当时忘记自己是什么级别了，说了个m，然后他说m是经理hhh）\",\"怎么设计一个api的（没答好，已读乱回）\",\"怎么去防那个ddos（redis限流+nginx层做处理，最后还是花钱买服务）\",\"怎么部署那个安全拦截服务的（领导买了，在控制台做的服务，点点点）\",\"cdn的理解（加快访问速度之类的，问我还有没有别的，我说没有）\",\"负载均衡怎么做的（领导在控制台点点点）\",\"说项目没难度（我说是，不像b站外包用到这么多技术）\",\"分表是怎么分的\"]},\"688\":{\"h\":\"b站外包\",\"t\":[\"旋转数组\",\"mysql索引相关。\",\"B+树有什么特点？\",\"为什么不用B树（查询的速度差不多，因为b+树数据都在叶子节点）。\",\"非聚簇索引和聚簇索引的区别。\",\"索引为什么要用id不用字符\",\"Linux相关命令和场景\",\"docker和k8s\"]},\"689\":{\"h\":\"360 一面\",\"t\":[\"协程池的作用?\",\"内存逃逸分析?\",\"go的内存回收什么条件会触发? go的GC能够手动触发吗?\",\"channel的底层实现? 有缓冲的,无缓冲的channel, 如果管道已经关闭了, 读取会不会发生错误?\",\"切片使用的时候需要注意什么?\",\"go中的参数传递是值传递还是引用传递?\",\"defer的执行顺序?\",\"100G的文件, 统计出所有英文字母, 按照字母表顺序输出\",\"linux如何分割文件?\",\"接口性能如何优化?\",\"什么情况会全表扫描?\",\"主丛同步的原理? mysql还有什么相关的log文件?\",\"分布式锁的原理?\"]},\"690\":{\"h\":\"360 二面\",\"t\":[\"自我介绍\",\"实现LRU算法\",\"这个lru算法用在生产环境会出现什么问题\",\"如果十万个线程同时put，会出现什么问题\",\"如何控制并发，加什么锁，读写锁还是互斥锁\",\"进程、线程、协程\",\"程序从加载到运行的过程\",\"为什么线程消耗比协程大，具体体现在哪些方面\",\"生产中哪些服务用的 进程、线程，为什么要这么做，有什么好处（今天第二次问到）\",\"nginx master-worker进程、进程与redis 进程、线程\",\"数据库事务，隔离级别\",\"各个隔离级别怎么实现的，原理\",\"RR能解决幻读吗，为什么\",\"MVCC\",\"数据库中的锁\",\"乐观锁、悲观锁适用于什么情况，并发，读多写少\",\"分布式锁\",\"zookeeper、mysql、redis 、etcd 怎么实现分布式锁，各有什么优缺点，生产中一般用那个\",\"zookeeper原理，怎么保持高可用\",\"tcp三次握手、四次挥手\",\"timewait、closewait出现，怎么处理\",\"tcp调优相关参数\",\"拥塞控制算法、滑动窗口、零窗口报文\",\"http1.0 - http3.0 改进，优缺点\"]},\"691\":{\"h\":\"360 三面\",\"t\":[\"说说 Linux 常用操作，ps 是干嘛的\",\"Go map 为什么是无序的？\",\"MySQL 索引分类，索引的优点和缺点\",\"分库分表\",\"Cookie 和 Session 的区别和应用，分布式 Session 的实现\",\"TCP三次握手/四次挥手\",\"Redis 的数据类型及其数据结构，Bitmap 是什么\",\"Redis 的雪崩效应 ，是什么，怎么解决\",\"线程，进程，协程区别\",\"算法：用 Go 手撕快速排序\"]},\"692\":{\"h\":\"好未来\",\"t\":[\"为什么要自己实现大顶堆? 大顶堆和小顶堆的使用场景?\",\"如何利用堆, 获取第k大的元素? 堆如何删除某一个特定的节点? 大顶堆如何转换为一个小顶堆?\",\"引入mq, 实现异步提速, 如何理解?\",\"协程池使用的是第三方包吗? 如果自己实现一个协程池, 描述你的思路?\",\"recover能捕获到其它协程的panic吗?\",\"说一下对grpc的理解? grpc互相调用, 如何实现互相的权限验证和授权?\",\"http2.0 的tsl三次握手过程?\",\"grpc中, 如果客户端需要向服务端发送大文件, 如何实现? (使用客户端流模式)\",\"http2.0的相关特性? 其中的多路复用为了解决什么问题? (解决对头阻塞问题)\",\"grpc中的deadLine和timeout, 应该怎么用? grpc的流控是如何处理的? 滑动窗口控制发送和接收速速率?\",\"go-zero中的服务熔断和限流是怎么做的?\",\"以下两个代码片段输出的结果:\",\"func test() int { result := 1 defer func() { result++ } return 0 } func test() (result int) { result = 1 defer func() { result++ } return 0 }\"]},\"693\":{\"h\":\"深信服\",\"t\":[\"slice原理 底层数据机构\",\"map 原理 底层数据结构 _ a.扩容机制 b.并发会导致什么问题？为什么？ c. Map的key是有顺序的？为什么？ d. 能否实现map key的序\",\"Go垃圾回收，算法 三色标记是哪三色，分别代表什么？\",\"堆和栈区别？内存何时分配在栈上？何时分配在堆上？\",\"如何保证缓存一致性？\",\"redis 有哪些数据结构？常见用途\",\"虚拟机和docker区别 Docker 底层原理 通过什么实现\",\"二叉树前序中序后序遍历怎么回事？\",\"写代码实现两个协程交替打印100以内数字\",\"Mysql如何优化慢查询\",\"Shell命令考察 a.如何判断一台服务器还是活的 B. 给一个文本文件 取出其中特定的列数据 然后排序\",\"kafka如何保证消息不丢失\",\"udp报文头部有哪些字段？\"]},\"694\":{\"h\":\"北京贝壳外包\",\"t\":[\"自我介绍\",\"项目拷打\",\"Redis 跟 MySQL 以及 Kafka 之间是什么关系?\",\"Kafka partion的概念\",\"Kafka 偏移量\",\"比如说有你在线上发现一条慢SQL，你怎么分析它?\",\"索引的最左前缀原则是什么意思?a>1and b=1andc=1,你看这个能命中这个索引吗?\",\"Redis 常见的数据结构?他们的应用场景?\",\"zset 你一般在什么场景下会用?底层的数据结构是什么?\",\"JWT 是什么东西?\",\"协程了解吗?和线程对比\",\"一道算法题\",\" 找到具有最大和的连续子数组，并返回该子数组\",\"编程颖\",\" 用两个协程，两个channel分别接收1，2，并打印\"]},\"695\":{\"h\":\"网易外包/Go后端开发\"},\"696\":{\"h\":\"一面\",\"t\":[\"自我介绍\",\"mysql查询慢是什么原因（没索引、表数据量大、死锁）\",\"mysql插入慢什么原因（表数据量大，sql语句多，表索引量大）\",\"抽奖逻辑是怎么样的\",\"怎么实现用户登录\",\"用户登录安全有了解过吗（乱说一通）\",\"redis击穿\",\"redis穿透\",\"redis其他数据结构有用过吗？hmap、zet\",\"短信发送失败怎么处理的（记录发送状态+重试机制）\"]},\"697\":{\"h\":\"二面\",\"t\":[\"自我介绍\",\"cms系统0-1开发的？（开源框架二次开发）\",\"做了哪些功能（栏目、文章、配置、模型管理之类的）\",\"登录的过程说一下\",\"session登录有什么弊端，怎么改（多台服务器拿不到session，用redis做缓存）\",\"客户端拿着token，你是怎么通过token获取客户的信息（校验token，获取token作为key的信息）\",\"有没有难一点的功能，说一下（没有，单体项目量不大，只是业务复杂度的难，技术上的难点没有）\",\"用户信息怎么做加密，token怎么生成之类的（md5+拼接指定的key或者之类的）\",\"200个券码，发送客户，怎么设计？（分布式锁，数据库唯一索引兜底）\",\"还可以怎么优化（redis布隆过滤器，避免大量重复请求，处理逻辑做幂等方案）【睡不着想起来还可以做mysql的乐观锁，数据做缓存预热，减轻数据库请求压力】\",\"长连接做成短连接，怎么设计，怎么做到短连接唯一（说了和自己的 短信生成方法（用户id活动id，二进制），php的uuid，时间戳，uuid截取？引用第三方库之类的）\",\"面试官说要短的，要唯一的，答不出来\"]},\"698\":{\"h\":\"面经详解跳转链接\",\"t\":[\"腾讯校招面经详解\",\"腾讯互娱面经详解\",\"腾讯后台秋招面经详解\",\"腾讯面经详解\",\"好未来面经详解\",\"PDD面经详解\",\"PDD服务端开发面经详解\",\"百度面经详解\",\"百度面经详解2\",\"百度面经详解3\",\"阿里校招面经详解\",\"阿里社招面经详解\",\"贝壳外包面经详解\",\"字节跳动面经详解\",\"字节跳动面经详解2\",\"字节跳动面经详解3\",\"得物面经详解\",\"美团面经详解\",\"深信服面经详解\"]},\"699\":{\"c\":[\"golang\"]},\"700\":{\"h\":\"ElasticSearch - Go\",\"t\":[\"待定\",\"官方网址：Elasticsearch：官方分布式搜索和分析引擎 | Elastic\",\"Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。作为 Elastic Stack 的核心，Elasticsearch 会集中存储您的数据，让您飞快完成搜索，微调相关性，进行强大的分析，并轻松缩放规模。本文会讲解如何用Go来进行对Elastisearch的一些基本操作，比如增删改查之类的，如果你对Elasticsearch并不了解，请先自行学习。\"]},\"701\":{\"h\":\"依赖\",\"t\":[\"下载官方的依赖库\",\"$ github.com/elastic/go-elasticsearch/v7\",\"如果你是ES8，就换个版本\",\"$ github.com/elastic/go-elasticsearch/v8\",\"提示\",\"本文用ES8来进行演示\"]},\"702\":{\"h\":\"连接\",\"t\":[\"使用函数elasticsearch.NewClient来建立一个新的连接\",\"func NewClient(cfg Config) (*Client, error)\",\"ES8+默认使用HTTPS连接了，在建立HTTPS连接时，要么使用CA证书，要么用CA指纹，两者都是在Elaticsearch服务端生成的，一个例子如下\",\"client, err := elasticsearch.NewClient(elasticsearch.Config{ Addresses: []string{\\\"https://192.168.153.132:9200\\\"}, Username: \\\"elastic\\\", Password: \\\"TETJ8IY+ifbt8SLc+RRQ\\\", CertificateFingerprint: \\\"C0E9867C7D446BFF72FE46E7E9FE3455E970A8ADB0D3DF0E1472D55DB2612CD5\\\", })\",\"elasticsearch提供的Go API基本上都是选项式函数，比如通过ping API测试服务是否可以用\",\"pingResp, err := client.Ping(client.Ping.WithPretty(), client.Ping.WithHuman()) if err != nil { panic(err) } fmt.Println(pingResp)\",\"输出\",\"[200 OK]\",\"再比如，通过Info API查看服务状态\",\"infoResp, err := client.Info(client.Info.WithHuman()) if err != nil { panic(err) } fmt.Println(infoResp)\",\"输出\",\"[200 OK] { \\\"name\\\" : \\\"db-debian12\\\", \\\"cluster_name\\\" : \\\"docker-cluster\\\", \\\"cluster_uuid\\\" : \\\"OMbDIsNwTFiuyjNF9Xnpbw\\\", \\\"version\\\" : { \\\"number\\\" : \\\"8.15.0\\\", \\\"build_flavor\\\" : \\\"default\\\", \\\"build_type\\\" : \\\"docker\\\", \\\"build_hash\\\" : \\\"1a77947f34deddb41af25e6f0ddb8e830159c179\\\", \\\"build_date\\\" : \\\"2024-08-05T10:05:34.233336849Z\\\", \\\"build_snapshot\\\" : false, \\\"lucene_version\\\" : \\\"9.11.1\\\", \\\"minimum_wire_compatibility_version\\\" : \\\"7.17.0\\\", \\\"minimum_index_compatibility_version\\\" : \\\"7.0.0\\\" }, \\\"tagline\\\" : \\\"You Know, for Search\\\" }\",\"提示\",\"有关ES API的任何问题，请查阅官方文档ES Restful API。\"]},\"703\":{\"h\":\"索引\",\"t\":[\"通过go api操作索引，所有关于索引操作的API都位于esapi.Indices结构体中\",\"// Indices contains the Indices APIs type Indices struct { AddBlock IndicesAddBlock Analyze IndicesAnalyze ClearCache IndicesClearCache Clone IndicesClone Close IndicesClose ... ... ValidateQuery IndicesValidateQuery }\"]},\"704\":{\"h\":\"创建\",\"t\":[\"创建一个索引，如下所示\",\"{ \\\"settings\\\": { \\\"number_of_shards\\\": 3, \\\"number_of_replicas\\\": 2 }, \\\"mappings\\\": { \\\"properties\\\": { \\\"name\\\": { \\\"type\\\": \\\"text\\\" }, \\\"age\\\": { \\\"type\\\": \\\"long\\\" }, \\\"salary\\\": { \\\"type\\\": \\\"double\\\" } } } }\",\"实际操作，就跟发HTTP请求一样差不多\",\"func main() { client, err := newClient() if err != nil { panic(err) } dsl := bytes.NewBufferString(`{ \\\"settings\\\": { \\\"number_of_shards\\\": 3, \\\"number_of_replicas\\\": 2 }, \\\"mappings\\\": { \\\"properties\\\": { \\\"name\\\": { \\\"type\\\": \\\"text\\\" }, \\\"age\\\": { \\\"type\\\": \\\"long\\\" }, \\\"salary\\\": { \\\"type\\\": \\\"double\\\" } } } }`) createIndices := client.Indices.Create resp, err := createIndices(\\\"user\\\", createIndices.WithBody(dsl)) if err != nil { panic(err) } fmt.Println(resp) }\",\"输出\",\"[200 OK] {\\\"acknowledged\\\":true,\\\"shards_acknowledged\\\":true,\\\"index\\\":\\\"user\\\"}\"]},\"705\":{\"h\":\"获取\",\"t\":[\"获取若干个索引的信息\",\"func main() { client, err := newClient() if err != nil { panic(err) } get := client.Indices.Get response, err := get([]string{\\\"user\\\"}, get.WithPretty(), get.WithHuman()) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[200 OK] { \\\"user\\\" : { \\\"aliases\\\" : { }, \\\"mappings\\\" : { \\\"properties\\\" : { \\\"age\\\" : { \\\"type\\\" : \\\"long\\\" }, \\\"name\\\" : { \\\"type\\\" : \\\"text\\\" }, \\\"salary\\\" : { \\\"type\\\" : \\\"double\\\" } } }, \\\"settings\\\" : { \\\"index\\\" : { \\\"creation_date_string\\\" : \\\"2024-09-23T04:35:04.528Z\\\", \\\"routing\\\" : { \\\"allocation\\\" : { \\\"include\\\" : { \\\"_tier_preference\\\" : \\\"data_content\\\" } } }, \\\"number_of_shards\\\" : \\\"3\\\", \\\"provided_name\\\" : \\\"user\\\", \\\"creation_date\\\" : \\\"1727066104528\\\", \\\"number_of_replicas\\\" : \\\"2\\\", \\\"uuid\\\" : \\\"AvhhuqV2ShGkRP9z7XbdDA\\\", \\\"version\\\" : { \\\"created_string\\\" : \\\"8.14.4-snapshot[8512000]\\\", \\\"created\\\" : \\\"8512000\\\" } } } } }\"]},\"706\":{\"h\":\"分析\",\"t\":[\"针对指定索引对文本字符串进行分析，并返回结果，文本如下\",\"{ \\\"analyzer\\\" : \\\"standard\\\", \\\"text\\\" : [\\\"this is a test\\\", \\\"the second text\\\"] }\",\"代码\",\"func main() { client, err := newClient() if err != nil { panic(err) } analyze := client.Indices.Analyze dsl := bytes.NewBufferString(`{ \\\"analyzer\\\" : \\\"standard\\\", \\\"text\\\" : [\\\"this is a test\\\", \\\"the second text\\\"] }`) response, err := analyze(analyze.WithIndex(\\\"user\\\"), analyze.WithBody(dsl), analyze.WithPretty(), analyze.WithHuman()) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[200 OK] { \\\"tokens\\\" : [ { \\\"token\\\" : \\\"this\\\", \\\"start_offset\\\" : 0, \\\"end_offset\\\" : 4, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 0 }, { \\\"token\\\" : \\\"is\\\", \\\"start_offset\\\" : 5, \\\"end_offset\\\" : 7, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 1 }, { \\\"token\\\" : \\\"a\\\", \\\"start_offset\\\" : 8, \\\"end_offset\\\" : 9, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 2 }, { \\\"token\\\" : \\\"test\\\", \\\"start_offset\\\" : 10, \\\"end_offset\\\" : 14, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 3 }, { \\\"token\\\" : \\\"the\\\", \\\"start_offset\\\" : 15, \\\"end_offset\\\" : 18, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 104 }, { \\\"token\\\" : \\\"second\\\", \\\"start_offset\\\" : 19, \\\"end_offset\\\" : 25, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 105 }, { \\\"token\\\" : \\\"text\\\", \\\"start_offset\\\" : 26, \\\"end_offset\\\" : 30, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 106 } ] }\"]},\"707\":{\"h\":\"删除\",\"t\":[\"删除若干个指定的索引\",\"func main() { client, err := newClient() if err != nil { panic(err) } indicesDelete := client.Indices.Delete response, err := indicesDelete([]string{\\\"user\\\"}) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[200 OK] {\\\"acknowledged\\\":true}\",\"在上面这些API中，可以看到请求体是需要自己手动序列化的，官方并没有映射成Go结构体，响应体也是需要自己手动处理的。这些是比较常用的API，其他的使用起来都大差不差，没有太大区别。\"]},\"708\":{\"h\":\"文档\"},\"709\":{\"h\":\"创建\",\"t\":[\"创建一个如下的文档\",\"{ \\\"name\\\": \\\"jack\\\", \\\"age\\\": 12, \\\"salary\\\": 5701.1 }\",\"代码\",\"func main() { client, err := newClient() if err != nil { panic(err) } doc := bytes.NewBufferString(`{ \\\"name\\\": \\\"jack\\\", \\\"age\\\": 12, \\\"salary\\\": 5701.1 }`) create := client.Create response, err := create(\\\"user\\\", \\\"1\\\", doc, create.WithPretty()) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[201 Created] { \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1\\\", \\\"_version\\\" : 1, \\\"result\\\" : \\\"created\\\", \\\"_shards\\\" : { \\\"total\\\" : 3, \\\"successful\\\" : 1, \\\"failed\\\" : 0 }, \\\"_seq_no\\\" : 0, \\\"_primary_term\\\" : 1 }\"]},\"710\":{\"h\":\"获取\",\"t\":[\"获取一个指定ID的文档\",\"func main() { client, err := newClient() if err != nil { panic(err) } get := client.Get response, err := get(\\\"user\\\", \\\"1\\\", get.WithPretty()) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[200 OK] { \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1\\\", \\\"_version\\\" : 1, \\\"_seq_no\\\" : 0, \\\"_primary_term\\\" : 1, \\\"found\\\" : true, \\\"_source\\\" : { \\\"name\\\" : \\\"jack\\\", \\\"age\\\" : 12, \\\"salary\\\" : 5701.1 } }\"]},\"711\":{\"h\":\"更新\",\"t\":[\"更新文档内容\",\"{ \\\"doc\\\": { \\\"name\\\": \\\"jack\\\", \\\"age\\\": 35, \\\"salary\\\": 5701.1 } }\",\"代码\",\"func main() { client, err := newClient() if err != nil { panic(err) } doc := bytes.NewBufferString(`{ \\\"doc\\\": { \\\"name\\\": \\\"jack\\\", \\\"age\\\": 35, \\\"salary\\\": 5701.1 }}`) update := client.Update response, err := update(\\\"user\\\", \\\"1\\\", doc, update.WithPretty()) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[200 OK] { \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1\\\", \\\"_version\\\" : 2, \\\"result\\\" : \\\"updated\\\", \\\"_shards\\\" : { \\\"total\\\" : 3, \\\"successful\\\" : 1, \\\"failed\\\" : 0 }, \\\"_seq_no\\\" : 1, \\\"_primary_term\\\" : 1 }\",\"Update API还可以支持script实现upsert等之类的操作，前往Update API了解更多信息。\"]},\"712\":{\"h\":\"删除\",\"t\":[\"通过ID删除一个指定的文档\",\"func main() { client, err := newClient() if err != nil { panic(err) } deleteDoc := client.Delete response, err := deleteDoc(\\\"user\\\", \\\"1\\\", deleteDoc.WithPretty()) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[200 OK] { \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1\\\", \\\"_version\\\" : 3, \\\"result\\\" : \\\"deleted\\\", \\\"_shards\\\" : { \\\"total\\\" : 3, \\\"successful\\\" : 1, \\\"failed\\\" : 0 }, \\\"_seq_no\\\" : 2, \\\"_primary_term\\\" : 1 }\"]},\"713\":{\"h\":\"搜索\",\"t\":[\"ES API最常用的就是搜索API，下面会简单演示用法，先准备数据。\",\"func main() { client, err := newClient() if err != nil { panic(err) } for i := range 10 { doc := bytes.NewBufferString(fmt.Sprintf(`{ \\\"name\\\": \\\"%s\\\", \\\"age\\\": %d, \\\"salary\\\": %f }`, randomName(), rand.Intn(18)+18, rand.Float64())) create := client.Create response, err := create(\\\"user\\\", string('0'+i), doc, create.WithPretty()) if err != nil { panic(err) } fmt.Println(response) } } func randomName() string { var b []byte for range 10 { b = append(b, byte(rand.Intn(26)+'a')) } return string(b) }\",\"搜索API就跟平时HTTP API用起来完全一样。\",\"查询所有文档\",\"func main() { client, err := newClient() if err != nil { panic(err) } dsl := bytes.NewBufferString(`{\\\"query\\\": {\\\"match_all\\\":{}}, \\\"size\\\": 1}`) search := client.Search response, err := search(search.WithBody(dsl), search.WithPretty()) if err != nil { panic(err) } fmt.Println(response) }\",\"匹配某一字段\",\"func main() { client, err := newClient() if err != nil { panic(err) } dsl := bytes.NewBufferString(`{\\\"query\\\": {\\\"term\\\":{ \\\"age\\\": 22 } }, \\\"size\\\": 1}`) search := client.Search response, err := search(search.WithBody(dsl), search.WithPretty()) if err != nil { panic(err) } fmt.Println(response) }\"]},\"714\":{\"h\":\"小结\",\"t\":[\"基础操作差不多就是这些，用起来跟HTTP API完全一样，把ES学会了，操作Go API完全没问题，像一些比较高级的操作比如cluster，data stream等之类的API，就请自行探索。\"]},\"715\":{\"c\":[\"golang\"]},\"716\":{\"h\":\"ElasticSearch - Go\",\"t\":[\"说在前面: Elasticsearch中每个field都要精确对应一个数据类型. 本文的所有演示, 都是基于Elasticsearch 6.6.0进行的, 不同的版本可能存在API发生修改、不支持的情况, 还请注意.\"]},\"717\":{\"h\":\"1.1 字符串类型 - string(不再支持)\",\"t\":[\"(1) 使用示例:\",\"PUT website { \\\"mappings\\\": { \\\"blog\\\": { \\\"properties\\\": { \\\"title\\\": {\\\"type\\\": \\\"string\\\"}, // 全文本 \\\"tags\\\": {\\\"type\\\": \\\"string\\\", \\\"index\\\": \\\"not_analyzed\\\"} // 关键字, 不分词 } } } }\",\"(2) ES 5.6.10中的响应信息:\",\"#! Deprecation: The [string] field is deprecated, please use [text] or [keyword] instead on [tags] #! Deprecation: The [string] field is deprecated, please use [text] or [keyword] instead on [title] { \\\"acknowledged\\\": true, \\\"shards_acknowledged\\\": true, \\\"index\\\": \\\"website\\\" }\",\"(3) ES 6.6.10中的响应信息:\",\"{ \\\"error\\\": { \\\"root_cause\\\": [ { \\\"type\\\": \\\"mapper_parsing_exception\\\", \\\"reason\\\": \\\"No handler for type [string] declared on field [title]\\\" } ], \\\"type\\\": \\\"mapper_parsing_exception\\\", \\\"reason\\\": \\\"Failed to parse mapping [blog]: No handler for type [string] declared on field [title]\\\", \\\"caused_by\\\": { \\\"type\\\": \\\"mapper_parsing_exception\\\", \\\"reason\\\": \\\"No handler for type [string] declared on field [title]\\\" } }, \\\"status\\\": 400 }\",\"可知string类型的field已经被移除了, 我们需要用text或keyword类型来代替string.\"]},\"718\":{\"h\":\"1.1.1 文本类型 - text\",\"t\":[\"在Elasticsearch 5.4 版本开始, text取代了需要分词的string.\",\"—— 当一个字段需要用于全文搜索(会被分词), 比如产品名称、产品描述信息, 就应该使用text类型.\",\"text的内容会被分词, 可以设置是否需要存储: \\\"index\\\": \\\"true|false\\\". text类型的字段不能用于排序, 也很少用于聚合.\",\"使用示例:\",\"PUT website { \\\"mappings\\\": { \\\"blog\\\": { \\\"properties\\\": { \\\"summary\\\": {\\\"type\\\": \\\"text\\\", \\\"index\\\": \\\"true\\\"} } } } }\"]},\"719\":{\"h\":\"1.1.2 关键字类型 - keyword\",\"t\":[\"在Elasticsearch 5.4 版本开始, keyword取代了不需要分词的string.\",\"—— 当一个字段需要按照精确值进行过滤、排序、聚合等操作时, 就应该使用keyword类型.\",\"keyword的内容不会被分词, 可以设置是否需要存储: \\\"index\\\": \\\"true|false\\\".\",\"使用示例:\",\"PUT website { \\\"mappings\\\": { \\\"blog\\\": { \\\"properties\\\": { \\\"tags\\\": {\\\"type\\\": \\\"keyword\\\", \\\"index\\\": \\\"true\\\"} } } } }\"]},\"720\":{\"h\":\"1.2 数字类型 - 8种\",\"t\":[\"数字类型有如下分类:\",\"类型\",\"说明\",\"byte\",\"有符号的8位整数, 范围: [-128 ~ 127]\",\"short\",\"有符号的16位整数, 范围: [-32768 ~ 32767]\",\"integer\",\"有符号的32位整数, 范围: [$-2^{31}$ ~ $2^{31}$-1]\",\"long\",\"有符号的32位整数, 范围: [$-2^{63}$ ~ $2^{63}$-1]\",\"float\",\"32位单精度浮点数\",\"double\",\"64位双精度浮点数\",\"half_float\",\"16位半精度IEEE 754浮点类型\",\"scaled_float\",\"缩放类型的的浮点数, 比如price字段只需精确到分, 57.34缩放因子为100, 存储结果为5734\",\"使用注意事项:\",\"尽可能选择范围小的数据类型, 字段的长度越短, 索引和搜索的效率越高; 优先考虑使用带缩放因子的浮点类型.\",\"使用示例:\",\"PUT shop { \\\"mappings\\\": { \\\"book\\\": { \\\"properties\\\": { \\\"name\\\": {\\\"type\\\": \\\"text\\\"}, \\\"quantity\\\": {\\\"type\\\": \\\"integer\\\"}, // integer类型 \\\"price\\\": { \\\"type\\\": \\\"scaled_float\\\", // scaled_float类型 \\\"scaling_factor\\\": 100 } } } } }\"]},\"721\":{\"h\":\"1.3 日期类型 - date\",\"t\":[\"JSON没有日期数据类型, 所以在ES中, 日期可以是:\",\"包含格式化日期的字符串, \\\"2018-10-01\\\", 或\\\"2018/10/01 12:10:30\\\".\",\"代表时间毫秒数的长整型数字.\",\"代表时间秒数的整数.\",\"如果时区未指定, 日期将被转换为UTC格式, 但存储的却是长整型的毫秒值. 可以自定义日期格式, 若未指定, 则使用默认格式: strict_date_optional_time||epoch_millis\",\"(1) 使用日期格式示例:\",\"// 添加映射 PUT website { \\\"mappings\\\": { \\\"blog\\\": { \\\"properties\\\": { \\\"pub_date\\\": {\\\"type\\\": \\\"date\\\"} // 日期类型 } } } } // 添加数据 PUT website/blog/11 { \\\"pub_date\\\": \\\"2018-10-10\\\" } PUT website/blog/12 { \\\"pub_date\\\": \\\"2018-10-10T12:00:00Z\\\" } // Solr中默认使用的日期格式 PUT website/blog/13 { \\\"pub_date\\\": \\\"1589584930103\\\" } // 时间的毫秒值\",\"(2) 多种日期格式:\",\"多个格式使用双竖线||分隔, 每个格式都会被依次尝试, 直到找到匹配的. 第一个格式用于将时间毫秒值转换为对应格式的字符串.\",\"使用示例:\",\"// 添加映射 PUT website { \\\"mappings\\\": { \\\"blog\\\": { \\\"properties\\\": { \\\"date\\\": { \\\"type\\\": \\\"date\\\", // 可以接受如下类型的格式 \\\"format\\\": \\\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\\\" } } } } }\"]},\"722\":{\"h\":\"1.4 布尔类型 - boolean\",\"t\":[\"可以接受表示真、假的字符串或数字:\",\"真值: true, \\\"true\\\", \\\"on\\\", \\\"yes\\\", \\\"1\\\"...\",\"假值: false, \\\"false\\\", \\\"off\\\", \\\"no\\\", \\\"0\\\", \\\"\\\"(空字符串), 0.0, 0\"]},\"723\":{\"h\":\"1.5 二进制型 - binary\",\"t\":[\"二进制类型是Base64编码字符串的二进制值, 不以默认的方式存储, 且不能被搜索.\",\"使用示例:\",\"// 添加映射 PUT website { \\\"mappings\\\": { \\\"blog\\\": { \\\"properties\\\": { \\\"blob\\\": {\\\"type\\\": \\\"binary\\\"} // 二进制 } } } } // 添加数据 PUT website/blog/1 { \\\"title\\\": \\\"Some binary blog\\\", \\\"blob\\\": \\\"hED903KSrA084fRiD5JLgY==\\\" }\",\"注意: Base64编码的二进制值不能嵌入换行符\\\\n.\"]},\"724\":{\"h\":\"1.6 范围类型 - range\",\"t\":[\"range类型支持以下几种:\",\"类型\",\"范围\",\"integer_range\",\"$-2^{31}$ ~ $2^{31}-1$\",\"long_range\",\"$-2^{63}$ ~ $2^{63}-1$\",\"float_range\",\"32位单精度浮点型\",\"double_range\",\"64位双精度浮点型\",\"date_range\",\"64位整数, 毫秒计时\",\"ip_range\",\"IP值的范围, 支持IPV4和IPV6, 或者这两种同时存在\",\"(1) 添加映射:\",\"PUT company { \\\"mappings\\\": { \\\"department\\\": { \\\"properties\\\": { \\\"expected_number\\\": { // 预期员工数 \\\"type\\\": \\\"integer_range\\\" }, \\\"time_frame\\\": { // 发展时间线 \\\"type\\\": \\\"date_range\\\", \\\"format\\\": \\\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\\\" }, \\\"ip_whitelist\\\": { // ip白名单 \\\"type\\\": \\\"ip_range\\\" } } } } }\",\"(2) 添加数据:\",\"PUT company/department/1 { \\\"expected_number\\\" : { \\\"gte\\\" : 10, \\\"lte\\\" : 20 }, \\\"time_frame\\\" : { \\\"gte\\\" : \\\"2018-10-01 12:00:00\\\", \\\"lte\\\" : \\\"2018-11-01\\\" }, \\\"ip_whitelist\\\": \\\"192.168.0.0/16\\\" }\",\"(3) 查询数据:\",\"GET company/department/_search { \\\"query\\\": { \\\"term\\\": { \\\"expected_number\\\": { \\\"value\\\": 12 } } } } GET company/department/_search { \\\"query\\\": { \\\"range\\\": { \\\"time_frame\\\": { \\\"gte\\\": \\\"208-08-01\\\", \\\"lte\\\": \\\"2018-12-01\\\", \\\"relation\\\": \\\"within\\\" } } } }\",\"查询结果：\",\"{ \\\"took\\\": 26, \\\"timed_out\\\": false, \\\"_shards\\\": { \\\"total\\\": 5, \\\"successful\\\": 5, \\\"skipped\\\": 0, \\\"failed\\\": 0 }, \\\"hits\\\": { \\\"total\\\": 1, \\\"max_score\\\": 1.0, \\\"hits\\\": [ { \\\"_index\\\": \\\"company\\\", \\\"_type\\\": \\\"department\\\", \\\"_id\\\": \\\"1\\\", \\\"_score\\\": 1.0, \\\"_source\\\": { \\\"expected_number\\\": { \\\"gte\\\": 10, \\\"lte\\\": 20 }, \\\"time_frame\\\": { \\\"gte\\\": \\\"2018-10-01 12:00:00\\\", \\\"lte\\\": \\\"2018-11-01\\\" }, \\\"ip_whitelist\\\" : \\\"192.168.0.0/16\\\" } } ] } }\"]},\"725\":{\"h\":\"2.1 数组类型 - array\",\"t\":[\"ES中没有专门的数组类型, 直接使用[]定义即可;\",\"数组中所有的值必须是同一种数据类型, 不支持混合数据类型的数组:\",\"① 字符串数组: [\\\"one\\\", \\\"two\\\"]; ② 整数数组: [1, 2]; ③ 由数组组成的数组: [1, [2, 3]], 等价于[1, 2, 3]; ④ 对象数组: [{\\\"name\\\": \\\"Tom\\\", \\\"age\\\": 20}, {\\\"name\\\": \\\"Jerry\\\", \\\"age\\\": 18}].\",\"注意:\",\"动态添加数据时, 数组中第一个值的类型决定整个数组的类型;\",\"不支持混合数组类型, 比如[1, \\\"abc\\\"];\",\"数组可以包含null值, 空数组[]会被当做missing field —— 没有值的字段.\"]},\"726\":{\"h\":\"2.2 对象类型 - object\",\"t\":[\"JSON文档是分层的: 文档可以包含内部对象, 内部对象也可以包含内部对象.\",\"(1) 添加示例:\",\"PUT employee/developer/1 { \\\"name\\\": \\\"ma_shoufeng\\\", \\\"address\\\": { \\\"region\\\": \\\"China\\\", \\\"location\\\": {\\\"province\\\": \\\"GuangDong\\\", \\\"city\\\": \\\"GuangZhou\\\"} } }\",\"(2) 存储方式:\",\"{ \\\"name\\\": \\\"ma_shoufeng\\\", \\\"address.region\\\": \\\"China\\\", \\\"address.location.province\\\": \\\"GuangDong\\\", \\\"address.location.city\\\": \\\"GuangZhou\\\" }\",\"(3) 文档的映射结构类似为:\",\"PUT employee { \\\"mappings\\\": { \\\"developer\\\": { \\\"properties\\\": { \\\"name\\\": { \\\"type\\\": \\\"text\\\", \\\"index\\\": \\\"true\\\" }, \\\"address\\\": { \\\"properties\\\": { \\\"region\\\": { \\\"type\\\": \\\"keyword\\\", \\\"index\\\": \\\"true\\\" }, \\\"location\\\": { \\\"properties\\\": { \\\"province\\\": { \\\"type\\\": \\\"keyword\\\", \\\"index\\\": \\\"true\\\" }, \\\"city\\\": { \\\"type\\\": \\\"keyword\\\", \\\"index\\\": \\\"true\\\" } } } } } } } } }\"]},\"727\":{\"h\":\"2.3 嵌套类型 - nested\",\"t\":[\"嵌套类型是对象数据类型的一个特例, 可以让array类型的对象被独立索引和搜索.\"]},\"728\":{\"h\":\"2.3.1 对象数组是如何存储的\",\"t\":[\"① 添加数据:\",\"PUT game_of_thrones/role/1 { \\\"group\\\": \\\"stark\\\", \\\"performer\\\": [ {\\\"first\\\": \\\"John\\\", \\\"last\\\": \\\"Snow\\\"}, {\\\"first\\\": \\\"Sansa\\\", \\\"last\\\": \\\"Stark\\\"} ] }\",\"② 内部存储结构:\",\"{ \\\"group\\\": \\\"stark\\\", \\\"performer.first\\\": [ \\\"john\\\", \\\"sansa\\\" ], \\\"performer.last\\\": [ \\\"snow\\\", \\\"stark\\\" ] }\",\"③ 存储分析:\",\"可以看出, user.first和user.last会被平铺为多值字段, 这样一来, John和Snow之间的关联性就丢失了.\",\"在查询时, 可能出现John Stark的结果.\"]},\"729\":{\"h\":\"2.3.2 用nested类型解决object类型的不足\",\"t\":[\"如果需要对以最对象进行索引, 且保留数组中每个对象的独立性, 就应该使用嵌套数据类型.\",\"—— 嵌套对象实质是将每个对象分离出来, 作为隐藏文档进行索引.\",\"① 创建映射:\",\"PUT game_of_thrones { \\\"mappings\\\": { \\\"role\\\": { \\\"properties\\\": { \\\"performer\\\": {\\\"type\\\": \\\"nested\\\" } } } } }\",\"② 添加数据:\",\"PUT game_of_thrones/role/1 { \\\"group\\\" : \\\"stark\\\", \\\"performer\\\" : [ {\\\"first\\\": \\\"John\\\", \\\"last\\\": \\\"Snow\\\"}, {\\\"first\\\": \\\"Sansa\\\", \\\"last\\\": \\\"Stark\\\"} ] }\",\"③ 检索数据:\",\"GET game_of_thrones/_search { \\\"query\\\": { \\\"nested\\\": { \\\"path\\\": \\\"performer\\\", \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ { \\\"match\\\": { \\\"performer.first\\\": \\\"John\\\" }}, { \\\"match\\\": { \\\"performer.last\\\": \\\"Snow\\\" }} ] } }, \\\"inner_hits\\\": { \\\"highlight\\\": { \\\"fields\\\": {\\\"performer.first\\\": {}} } } } } }\"]},\"730\":{\"h\":\"3.1 地理点类型 - geo point\",\"t\":[\"地理点类型用于存储地理位置的经纬度对, 可用于:\",\"查找一定范围内的地理点;\",\"通过地理位置或相对某个中心点的距离聚合文档;\",\"将距离整合到文档的相关性评分中;\",\"通过距离对文档进行排序.\",\"(1) 添加映射:\",\"PUT employee { \\\"mappings\\\": { \\\"developer\\\": { \\\"properties\\\": { \\\"location\\\": {\\\"type\\\": \\\"geo_point\\\"} } } } }\",\"(2) 存储地理位置:\",\"// 方式一: 纬度 + 经度键值对 PUT employee/developer/1 { \\\"text\\\": \\\"小蛮腰-键值对地理点参数\\\", \\\"location\\\": { \\\"lat\\\": 23.11, \\\"lon\\\": 113.33 // 纬度: latitude, 经度: longitude } } // 方式二: \\\"纬度, 经度\\\"的字符串参数 PUT employee/developer/2 { \\\"text\\\": \\\"小蛮腰-字符串地理点参数\\\", \\\"location\\\": \\\"23.11, 113.33\\\" // 纬度, 经度 } // 方式三: [\\\"经度, 纬度\\\"] 数组地理点参数 PUT employee/developer/3 { \\\"text\\\": \\\"小蛮腰-数组参数\\\", \\\"location\\\": [ 113.33, 23.11 ] // 经度, 纬度 }\",\"(3) 查询示例:\",\"GET employee/_search { \\\"query\\\": { \\\"geo_bounding_box\\\": { \\\"location\\\": { \\\"top_left\\\": { \\\"lat\\\": 24, \\\"lon\\\": 113 }, // 地理盒子模型的上-左边 \\\"bottom_right\\\": { \\\"lat\\\": 22, \\\"lon\\\": 114 } // 地理盒子模型的下-右边 } } } }\"]},\"731\":{\"h\":\"3.2 地理形状类型 - geo_shape\",\"t\":[\"是多边形的复杂形状. 使用较少, 这里省略.\",\"可以参考这篇文章: Elasticsearch地理位置总结\"]},\"732\":{\"h\":\"4.1 IP类型\",\"t\":[\"IP类型的字段用于存储IPv4或IPv6的地址, 本质上是一个长整型字段.\",\"(1) 添加映射:\",\"PUT employee { \\\"mappings\\\": { \\\"customer\\\": { \\\"properties\\\": { \\\"ip_addr\\\": { \\\"type\\\": \\\"ip\\\" } } } } }\",\"(2) 添加数据:\",\"PUT employee/customer/1 { \\\"ip_addr\\\": \\\"192.168.1.1\\\" }\",\"(3) 查询数据:\",\"GET employee/customer/_search { \\\"query\\\": { \\\"term\\\": { \\\"ip_addr\\\": \\\"192.168.0.0/16\\\" } } }\"]},\"733\":{\"h\":\"4.2 计数数据类型 - token_count\",\"t\":[\"token_count类型用于统计字符串中的单词数量.\",\"本质上是一个整数型字段, 接受并分析字符串值, 然后索引字符串中单词的个数.\",\"(1) 添加映射:\",\"PUT employee { \\\"mappings\\\": { \\\"customer\\\": { \\\"properties\\\": { \\\"name\\\": { \\\"type\\\": \\\"text\\\", \\\"fields\\\": { \\\"length\\\": { \\\"type\\\": \\\"token_count\\\", \\\"analyzer\\\": \\\"standard\\\" } } } } } } }\",\"(2) 添加数据:\",\"PUT employee/customer/1 { \\\"name\\\": \\\"John Snow\\\" } PUT employee/customer/2 { \\\"name\\\": \\\"Tyrion Lannister\\\" }\",\"(3) 查询数据:\",\"GET employee/customer/_search { \\\"query\\\": { \\\"term\\\": { \\\"name.length\\\": 2 } }\"]},\"734\":{\"h\":\"01、 什么是ElasticSearch\",\"t\":[\"Elasticsearch是一个分布式文档存储。Elasticsearch存储的是序列化为JSON文档的复杂数据结构，而不是以列行数据的形式存储信息。当集群中有多个Elasticsearch节点时，存储的文档分布在整个集群中，可以立即从任何节点访问。\",\"当存储文档时，它几乎是实时的——在1秒内就可以被索引和完全搜索。Elasticsearch使用了一种名为反向索引的数据结构，它支持非常快速的全文搜索。反向索引列出任何文档中出现的每个惟一单词，并标识每个单词出现的所有文档。\",\"可以将索引看作是文档的优化集合，每个文档是字段的集合，这些字段是包含数据的键值对。默认情况下，Elasticsearch对每个字段中的所有数据进行索引，每个索引字段都有一个专用的、优化的数据结构。例如，文本字段存储在倒排索引中，数字和地理字段存储在BKD树中。使用每个字段的数据结构来组装和返回搜索结果的能力是Elasticsearch如此快速的原因\",\"Elasticsearch还具有无模式的能力，这意味着可以对文档进行索引，而不必显式地指定如何处理文档中可能出现的每个不同字段。当动态映射被启用时，Elasticsearch会自动检测并向索引添加新的字段。这种默认行为使得创建索引和浏览数据变得很容易——只要开始创建索引文档，Elasticsearch就会检测布尔值、浮点值和整数值、日期和字符串，并将它们映射到合适的Elasticsearch数据类型。\"]},\"735\":{\"h\":\"02、MySQL与ElasticSearch对比\",\"t\":[\"Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎，无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。 Elasticsearch不仅仅是Lucene和全文搜索引擎，它还提供： ●分布式的实时文件存储，每个字段都被索引并可被搜索 ●实时分析的分布式搜索引擎 ●可以扩展到上百台服务器，处理PB级结构化或非结构化数据\",\"ES和MySQL使用场景的比较\",\"1、MySQL更擅长的是事务类型的操作，可以确保数据的安全和一致性；如果是有事务要求，如商品的下单支付等业务操作，无疑使用MySQL。\",\"2、ES更擅长的是海量数据的搜索，分析和计算；如果是复杂搜索，无疑可以使用Elasticsearch。\",\"3、两者是一个互补而不是替代的关系。\"]},\"736\":{\"h\":\"03、 下载和安装\",\"t\":[\"下载：https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-17-7 官网：https://www.elastic.co/cn/elasticsearch/\",\"如果出现需要java_home话，必须在你电脑中安装一个jdk1.8。并且配置环境变量。否则会造成es启动失败。\",\"原因是：ElasticSearch是java开发的。如何去配置java_home百度即可。\",\"如何证明安装成功es呢？\",\"访问：http://localhost:9200/\"]},\"737\":{\"h\":\"03 、下载可视化工具Kibana\",\"t\":[\"下载地址：https://www.elastic.co/cn/downloads/past-releases#kibana\"]},\"738\":{\"h\":\"启动 Kibana\",\"t\":[\"运行 bin/kibana (or bin\\\\kibana.bat on Windows)\"]},\"739\":{\"h\":\"打开Kibana\",\"t\":[\"在浏览器访问 http://localhost:5601 然后在 enrollment instructions去关联Elasticsearch\"]},\"740\":{\"h\":\"04、集成和整合IK\",\"t\":[\"下载地址：https://github.com/medcl/elasticsearch-analysis-ik\",\"可选方式1：下载与之对应的版本: https://github.com/medcl/elasticsearch-analysis-ik/releases\",\"然后在es的目录下载创建一个ik努力\",\"cd your-es-root/plugins/ && mkdir ik\",\"解压插件到当前目录中your-es-root/plugins/ik\",\"可选方式2： 使用插件的方式安装，如下：\",\"./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.3.0/elasticsearch-analysis-ik-6.3.0.zip\",\"然后重启es即可\"]},\"741\":{\"h\":\"05、如何证明IK集成成功？\",\"t\":[\"1.create a index\",\"PUT /index\",\"2.create a mapping\",\"POST http://localhost:9200/index/_mapping { \\\"properties\\\": { \\\"content\\\": { \\\"type\\\": \\\"text\\\", \\\"analyzer\\\": \\\"ik_max_word\\\", \\\"search_analyzer\\\": \\\"ik_smart\\\" } } }\",\"3.index some docs\",\"POST /index/_create/1 {\\\"content\\\":\\\"美国留给伊拉克的是个烂摊子吗\\\"} POST /index/_create/2 {\\\"content\\\":\\\"公安部：各地校车将享最高路权\\\"} POST /index/_create/3 {\\\"content\\\":\\\"中韩渔警冲突调查：韩警平均每天扣1艘中国渔船\\\"} POST /index/_create/4 {\\\"content\\\":\\\"中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首\\\"}\",\"4.query with highlighting\",\"POST /index/_search { \\\"query\\\" : { \\\"match\\\" : { \\\"content\\\" : \\\"中国\\\" }}, \\\"highlight\\\" : { \\\"pre_tags\\\" : [\\\"<tag1>\\\", \\\"<tag2>\\\"], \\\"post_tags\\\" : [\\\"</tag1>\\\", \\\"</tag2>\\\"], \\\"fields\\\" : { \\\"content\\\" : {} } } } '\",\"Result\",\"{ \\\"took\\\": 14, \\\"timed_out\\\": false, \\\"_shards\\\": { \\\"total\\\": 5, \\\"successful\\\": 5, \\\"failed\\\": 0 }, \\\"hits\\\": { \\\"total\\\": 2, \\\"max_score\\\": 2, \\\"hits\\\": [ { \\\"_index\\\": \\\"index\\\", \\\"_type\\\": \\\"fulltext\\\", \\\"_id\\\": \\\"4\\\", \\\"_score\\\": 2, \\\"_source\\\": { \\\"content\\\": \\\"中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首\\\" }, \\\"highlight\\\": { \\\"content\\\": [ \\\"<tag1>中国</tag1>驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首 \\\" ] } }, { \\\"_index\\\": \\\"index\\\", \\\"_type\\\": \\\"fulltext\\\", \\\"_id\\\": \\\"3\\\", \\\"_score\\\": 2, \\\"_source\\\": { \\\"content\\\": \\\"中韩渔警冲突调查：韩警平均每天扣1艘中国渔船\\\" }, \\\"highlight\\\": { \\\"content\\\": [ \\\"均每天扣1艘<tag1>中国</tag1>渔船 \\\" ] } } ] } }\"]},\"742\":{\"h\":\"Dictionary Configuration\",\"t\":[\"IKAnalyzer.cfg.xml` can be located at `{conf}/analysis-ik/config/IKAnalyzer.cfg.xml` or `{plugins}/elasticsearch-analysis-ik-*/config/IKAnalyzer.cfg.xml <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!DOCTYPE properties SYSTEM \\\"http://java.sun.com/dtd/properties.dtd\\\"> <properties> <comment>IK Analyzer 扩展配置</comment> <!--用户可以在这里配置自己的扩展字典 --> <entry key=\\\"ext_dict\\\">custom/mydict.dic;custom/single_word_low_freq.dic</entry> <!--用户可以在这里配置自己的扩展停止词字典--> <entry key=\\\"ext_stopwords\\\">custom/ext_stopword.dic</entry> <!--用户可以在这里配置远程扩展字典 --> <entry key=\\\"remote_ext_dict\\\">location</entry> <!--用户可以在这里配置远程扩展停止词字典--> <entry key=\\\"remote_ext_stopwords\\\">http://xxx.com/xxx.dic</entry> </properties>\"]},\"743\":{\"h\":\"热更新 IK 分词使用方法\",\"t\":[\"目前该插件支持热更新 IK 分词，通过上文在 IK 配置文件中提到的如下配置\",\" <!--用户可以在这里配置远程扩展字典 --> <entry key=\\\"remote_ext_dict\\\">location</entry> <!--用户可以在这里配置远程扩展停止词字典--> <entry key=\\\"remote_ext_stopwords\\\">location</entry>\",\"其中 location 是指一个 url，比如 http://yoursite.com/getCustomDict，该请求只需满足以下两点即可完成分词热更新。\",\"该 http 请求需要返回两个头部(header)，一个是 Last-Modified，一个是 ETag，这两者都是字符串类型，只要有一个发生变化，该插件就会去抓取新的分词进而更新词库。\",\"该 http 请求返回的内容格式是一行一个分词，换行符用 \\\\n 即可。\",\"满足上面两点要求就可以实现热更新分词了，不需要重启 ES 实例。\",\"可以将需自动更新的热词放在一个 UTF-8 编码的 .txt 文件里，放在 nginx 或其他简易 http server 下，当 .txt 文件修改时，http server 会在客户端请求该文件时自动返回相应的 Last-Modified 和 ETag。可以另外做一个工具来从业务系统提取相关词汇，并更新这个 .txt 文件。\"]},\"744\":{\"h\":\"06、go如何操作ES\",\"t\":[\"官网网址：https://pkg.go.dev/github.com/olivere/elastic#section-readme\",\"1： 下载组件\",\"go get github.com/olivere/elastic/v7\",\"2：快速入门\",\"package main import \\\"fmt\\\" import \\\"github.com/olivere/elastic/v7\\\" func main() { // 创建ES client用于后续操作ES client, err := elastic.NewClient( // 设置ES服务地址，支持多个地址 elastic.SetURL(\\\"http://127.0.0.1:9200\\\", \\\"http://127.0.0.1:9201\\\"), // 设置基于http base auth验证的账号和密码 elastic.SetBasicAuth(\\\"user\\\", \\\"secret\\\")) if err != nil { // Handle error fmt.Printf(\\\"连接失败: %v\\\\n\\\", err) } else { fmt.Println(\\\"连接成功\\\") } }\"]},\"745\":{\"h\":\"07、创建索引映射Mapping\",\"t\":[\"package es import ( \\\"context\\\" \\\"errors\\\" ) // 索引mapping定义，这里仿微博消息结构定义 const mapping = ` { \\\"mappings\\\": { \\\"properties\\\": { \\\"title\\\": { \\\"type\\\": \\\"text\\\", \\\"analyzer\\\": \\\"ik_max_word\\\" }, \\\"message\\\": { \\\"type\\\": \\\"text\\\" }, \\\"categoryId\\\": { \\\"type\\\": \\\"integer\\\" }, \\\"categoryName\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"status\\\": { \\\"type\\\": \\\"integer\\\" }, \\\"retweets\\\": { \\\"type\\\": \\\"integer\\\" }, \\\"image\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"created\\\": { \\\"type\\\": \\\"date\\\" }, \\\"tags\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"location\\\": { \\\"type\\\": \\\"geo_point\\\" }, \\\"suggest_field\\\": { \\\"type\\\": \\\"completion\\\" } } } }` /*创建索引*/ func (esService *EsService) CreateIndex() (bool, error) { client, _ := esService.NewClient() // 执行ES请求需要提供一个上下文对象 ctx := context.Background() // 首先检测下weibo索引是否存在 exists, err := client.IndexExists(\\\"article\\\").Do(ctx) if err != nil { return false, err } if !exists { // weibo索引不存在，则创建一个 do, err := client.CreateIndex(\\\"article\\\").BodyString(mapping).Do(ctx) if err != nil { return false, err } return do.Acknowledged, nil } return false, errors.New(\\\"索引已经存在了\\\") }\",\"测试代码\",\"package main import ( \\\"fmt\\\" \\\"goes/es\\\" ) func main() { es := new(es.EsService) // 创建索引文件 ack1, _ := es.CreateIndex() fmt.Println(ack1) }\"]},\"746\":{\"h\":\"08、创建文档\",\"t\":[\"先定义文章的的struct, 跟前面创建的article索引结构一一对应。\",\"package model import ( \\\"github.com/olivere/elastic/v7\\\" \\\"time\\\" ) type Article struct { Title string `json:\\\"title\\\"` // 标题 Content string `json:\\\"content\\\"` // 内容 CategoryId int `json:\\\"categoryId\\\"` // 分类ID CategoryName string `json:\\\"categoryName\\\"` // 分类名称 Status int `json:\\\"status\\\"` // 发布状态 Retweets int `json:\\\"retweets\\\"` // 转发数 Image string `json:\\\"image,omitempty\\\"` // 封面 Created time.Time `json:\\\"created,omitempty\\\"` // 创建时间 Tags []string `json:\\\"tags,omitempty\\\"` // 标签 Location string `json:\\\"location,omitempty\\\"` //位置 Suggest *elastic.SuggestField `json:\\\"suggest_field,omitempty\\\"` }\",\"上面struct定义的时候，都定义了json结构，因为ES请求使用的是json格式，在发送ES请求的时候，会自动转换成json格式。\",\"使用struct结构插入一条ES文档数据，\",\"// 插入文章数据到article索引库中 func (esService *EsService) SaveAtricle() (bool, error) { // 创建创建一条微博 msg1 := model.Article{ Title: \\\"Go是一门非常优秀的语音\\\", Content: \\\"打酱油的一天\\\", CategoryId: 1, CategoryName: \\\"java\\\", Status: 1, Image: \\\"aaa.jpg\\\", Created: time.Now(), Tags: []string{\\\"go\\\", \\\"计算机\\\", \\\"语言\\\"}, Location: \\\"\\\", Retweets: 0, } client, _ := esService.NewClient() // 执行ES请求需要提供一个上下文对象 ctx := context.Background() // 使用client创建一个新的文档 put1, err := client.Index(). Index(\\\"article\\\"). // 设置索引名称 Id(\\\"1\\\"). // 设置文档id BodyJson(msg1). // 指定前面声明的微博内容 Do(ctx) // 执行请求，需要传入一个上下文对象 if err != nil { // Handle error panic(err) } fmt.Printf(\\\"文档Id %s, 索引名 %s\\\\n\\\", put1.Id, put1.Index) return true, nil }\",\"测试代码\",\"package main import ( \\\"fmt\\\" \\\"goes/es\\\" ) func main() { es := new(es.EsService) // 添加数据 ack1, _ := es.SaveAtricle() fmt.Println(ack1) }\",\"如下：\"]},\"747\":{\"h\":\"09、更新文档\"},\"748\":{\"h\":\"根据文档id更新内容\",\"t\":[\"// 根根据文档id更新内容 func (esService *EsService) UpdateAtricleById(id string) (bool, error) { client, _ := esService.NewClient() // 执行ES请求需要提供一个上下文对象 ctx := context.Background() // 根据文档id更新内容 put1, err := client.Update(). Index(\\\"article\\\"). // 设置索引名称 Id(id). // 设置文档id Doc(map[string]interface{}{\\\"retweets\\\": 100}). // 更新retweets=0，支持传入键值结构 Do(ctx) // 执行请求，需要传入一个上下文对象 if err != nil { panic(err) } fmt.Printf(\\\"文档Id %s, 索引名 %s\\\\n\\\", put1.Id, put1.Index) return true, nil }\",\"测试\",\"package main import ( \\\"fmt\\\" \\\"goes/es\\\" ) func main() { es := new(es.EsService) // 修改数据 ack1, _ := es.UpdateAtricleById(\\\"1\\\") fmt.Println(ack1) }\"]},\"749\":{\"h\":\"根据条件更新文档\",\"t\":[\"// 根据条件更新文档 func (esService *EsService) UpdateQueryAtricle() (bool, error) { client, _ := esService.NewClient() // 执行ES请求需要提供一个上下文对象 ctx := context.Background() // 根据文档id更新内容 put1, err := client.UpdateByQuery(\\\"article\\\"). // 设置查询条件，这里设置categoryId=1 Query(elastic.NewTermQuery(\\\"categoryId\\\", 1)). // 通过脚本更新内容，将retweets字段改为101 Script(elastic.NewScript(\\\"ctx._source['retweets']=101\\\")). // 如果文档版本冲突继续执行 ProceedOnVersionConflict(). Do(ctx) // 执行请求，需要传入一个上下文对象 if err != nil { panic(err) } fmt.Printf(\\\"影响行数 %s, 执行是 %s\\\\n\\\", put1.Total, put1.Updated) return true, nil }\"]},\"750\":{\"h\":\"10、删除文档\"},\"751\":{\"h\":\"根据id删除一条数据\",\"t\":[\"// 根据ID删除数据 func (esService *EsService) DelAtricleById(id string) (bool, error) { client, _ := esService.NewClient() // 执行ES请求需要提供一个上下文对象 ctx := context.Background() // 根据id删除一条数据 put1, err := client.Delete(). Index(\\\"article\\\"). // 设置索引名称 Id(id). // 设置文档id Do(ctx) // 执行请求，需要传入一个上下文对象 if err != nil { panic(err) } fmt.Printf(\\\"文档Id %s, 索引名 %s\\\\n\\\", put1.Id, put1.Index) return true, nil }\",\"测试\",\"package main import ( \\\"fmt\\\" \\\"goes/es\\\" ) func main() { es := new(es.EsService) // 根据ID删除数据 ack1, _ := es.DelAtricleById(\\\"1\\\") fmt.Println(ack1) }\"]},\"752\":{\"h\":\"根据指定条件删除\",\"t\":[\"_, _ = client.DeleteByQuery(\\\"blogs\\\"). // 设置索引名 // 设置查询条件为: Author = tizi Query(elastic.NewTermQuery(\\\"Author\\\", \\\"tizi\\\")). // 文档冲突也继续删除 ProceedOnVersionConflict(). Do(ctx)\"]},\"753\":{\"h\":\"11、查询文档\"},\"754\":{\"h\":\"根据id查询文档\",\"t\":[\"// 根据id查询文档 func (esService EsService) getArticleById(docId string) (article model.Article) { client, _ := esService.NewClient() // 执行ES请求需要提供一个上下文对象 ctx := context.Background() // 根据id查询文档 get1, err := client.Get(). Index(\\\"article\\\"). // 指定索引名 Id(docId). // 设置文档id Do(ctx) // 执行请求 if err != nil { // Handle error panic(err) } if get1.Found { fmt.Printf(\\\"文档id=%s 版本号=%d 索引名=%s\\\\n\\\", get1.Id, get1.Version, get1.Index) } // 提取文档内容，原始类型是json数据 data, _ := get1.Source.MarshalJSON() // 将json转成struct结果 json.Unmarshal(data, &article) // 打印结果 return article }\",\"测试代码\",\"package main import ( \\\"fmt\\\" \\\"goes/es\\\" ) func main() { es := new(es.EsService) // 根据id查询文档 article := es.GetArticleById(\\\"1\\\") fmt.Println(article) }\"]},\"755\":{\"h\":\"12、高级查询\",\"t\":[\"lasticsearch的查询语法比较丰富，下面分别介绍golang 的各种查询用法。\",\"如果对ES的查询语法和概念不了解，请阅读：ES教程\"]},\"756\":{\"h\":\"1.精确匹配单个字段\",\"t\":[\"elasticsearch的term查询，下面给出完整的代码\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"github.com/olivere/elastic/v7\\\" \\\"log\\\" \\\"os\\\" \\\"reflect\\\" \\\"time\\\" ) type Article struct { Title string // 文章标题 Content string // 文章内容 Author string // 作者 Created time.Time // 发布时间 } func main() { // 创建Client, 连接ES client, err := elastic.NewClient( // elasticsearch 服务地址，多个服务地址使用逗号分隔 elastic.SetURL(\\\"http://127.0.0.1:9200\\\", \\\"http://127.0.0.1:9201\\\"), // 基于http base auth验证机制的账号和密码 elastic.SetBasicAuth(\\\"user\\\", \\\"secret\\\"), // 启用gzip压缩 elastic.SetGzip(true), // 设置监控检查时间间隔 elastic.SetHealthcheckInterval(10*time.Second), // 设置请求失败最大重试次数 elastic.SetMaxRetries(5), // 设置错误日志输出 elastic.SetErrorLog(log.New(os.Stderr, \\\"ELASTIC \\\", log.LstdFlags)), // 设置info日志输出 elastic.SetInfoLog(log.New(os.Stdout, \\\"\\\", log.LstdFlags))) if err != nil { // Handle error fmt.Printf(\\\"连接失败: %v\\\\n\\\", err) } else { fmt.Println(\\\"连接成功\\\") } // 执行ES请求需要提供一个上下文对象 ctx := context.Background() // 创建term查询条件，用于精确查询 termQuery := elastic.NewTermQuery(\\\"Author\\\", \\\"tizi\\\") searchResult, err := client.Search(). Index(\\\"blogs\\\"). // 设置索引名 Query(termQuery). // 设置查询条件 Sort(\\\"Created\\\", true). // 设置排序字段，根据Created字段升序排序，第二个参数false表示逆序 From(0). // 设置分页参数 - 起始偏移量，从第0行记录开始 Size(10). // 设置分页参数 - 每页大小 Pretty(true). // 查询结果返回可读性较好的JSON格式 Do(ctx) // 执行请求 if err != nil { // Handle error panic(err) } fmt.Printf(\\\"查询消耗时间 %d ms, 结果总数: %d\\\\n\\\", searchResult.TookInMillis, searchResult.TotalHits()) if searchResult.TotalHits() > 0 { // 查询结果不为空，则遍历结果 var b1 Article // 通过Each方法，将es结果的json结构转换成struct对象 for _, item := range searchResult.Each(reflect.TypeOf(b1)) { // 转换成Article对象 if t, ok := item.(Article); ok { fmt.Println(t.Title) } } } }\",\"提示：后续章节，仅给出关键代码片段，其他代码结构参考本节即可\"]},\"757\":{\"h\":\"2.通过terms实现SQL的in查询\",\"t\":[\"通过terms查询语法实现，多值查询效果\",\"例子：\",\"// 创建terms查询条件 termsQuery := elastic.NewTermsQuery(\\\"Author\\\", \\\"tizi\\\", \\\"tizi365\\\") searchResult, err := client.Search(). Index(\\\"blogs\\\"). // 设置索引名 Query(termsQuery). // 设置查询条件 Sort(\\\"Created\\\", true). // 设置排序字段，根据Created字段升序排序，第二个参数false表示逆序 From(0). // 设置分页参数 - 起始偏移量，从第0行记录开始 Size(10). // 设置分页参数 - 每页大小 Do(ctx) // 执行请求\"]},\"758\":{\"h\":\"3.匹配单个字段\",\"t\":[\"某个字段使用全文搜索，也就是ES的match语法\",\"例子：\",\"// 创建match查询条件 matchQuery := elastic.NewMatchQuery(\\\"Title\\\", \\\"golang es教程\\\") searchResult, err := client.Search(). Index(\\\"blogs\\\"). // 设置索引名 Query(matchQuery). // 设置查询条件 Sort(\\\"Created\\\", true). // 设置排序字段，根据Created字段升序排序，第二个参数false表示逆序 From(0). // 设置分页参数 - 起始偏移量，从第0行记录开始 Size(10). // 设置分页参数 - 每页大小 Do(ctx)\"]},\"759\":{\"h\":\"4.范围查询\",\"t\":[\"实现类似Created > '2020-07-20' and Created < '2020-07-22'的范围查询条件\",\"创建查询表达式例子：\",\"// 例1 等价表达式： Created > \\\"2020-07-20\\\" and Created < \\\"2020-07-29\\\" rangeQuery := elastic.NewRangeQuery(\\\"Created\\\"). Gt(\\\"2020-07-20\\\"). Lt(\\\"2020-07-29\\\") // 例2 等价表达式： id >= 1 and id < 10 rangeQuery := elastic.NewRangeQuery(\\\"id\\\"). Gte(1). Lte(10)\"]},\"760\":{\"h\":\"5、单关键词搜索\"},\"761\":{\"h\":\"6、多属性关键词搜索\"},\"762\":{\"h\":\"7、bool组合查询\",\"t\":[\"bool组合查询，实际上就是组合了前面的查询条件，然后通过类似SQL语句的and和or将查询条件组合起来，不熟悉ES查询语法，请参考ES教程\"]},\"763\":{\"h\":\"5.1. must条件\",\"t\":[\"类似SQL的and，代表必须匹配的条件。\",\"// 创建bool查询 boolQuery := elastic.NewBoolQuery().Must() // 创建term查询 termQuery := elastic.NewTermQuery(\\\"Author\\\", \\\"tizi\\\") matchQuery := elastic.NewMatchQuery(\\\"Title\\\", \\\"golang es教程\\\") // 设置bool查询的must条件, 组合了两个子查询 // 表示搜索匹配Author=tizi且Title匹配\\\"golang es教程\\\"的文档 boolQuery.Must(termQuery, matchQuery) searchResult, err := client.Search(). Index(\\\"blogs\\\"). // 设置索引名 Query(boolQuery). // 设置查询条件 Sort(\\\"Created\\\", true). // 设置排序字段，根据Created字段升序排序，第二个参数false表示逆序 From(0). // 设置分页参数 - 起始偏移量，从第0行记录开始 Size(10). // 设置分页参数 - 每页大小 Do(ctx) // 执行请求\"]},\"764\":{\"h\":\"5.2. must_not条件\",\"t\":[\"跟must的作用相反，用法和must类似\",\"// 创建bool查询 boolQuery := elastic.NewBoolQuery().Must() // 创建term查询 termQuery := elastic.NewTermQuery(\\\"Author\\\", \\\"tizi\\\") // 设置bool查询的must not条件 boolQuery.MustNot(termQuery)\"]},\"765\":{\"h\":\"5.2. should条件\",\"t\":[\"类似SQL中的 or， 只要匹配其中一个条件即可\",\"// 创建bool查询 boolQuery := elastic.NewBoolQuery().Must() // 创建term查询 termQuery := elastic.NewTermQuery(\\\"Author\\\", \\\"tizi\\\") matchQuery := elastic.NewMatchQuery(\\\"Title\\\", \\\"golang es教程\\\") // 设置bool查询的should条件, 组合了两个子查询 // 表示搜索Author=tizi或者Title匹配\\\"golang es教程\\\"的文档 boolQuery.Should(termQuery, matchQuery)\"]},\"766\":{\"h\":\"13、搜索词条高亮处理\",\"t\":[\"func TestHighlightWithTermQuery(t *testing.T) { client := setupTestClientAndCreateIndex(t) //, SetTraceLog(log.New(os.Stdout, \\\"\\\", 0))) tweet1 := tweet{User: \\\"olivere\\\", Message: \\\"Welcome to Golang and Elasticsearch.\\\"} tweet2 := tweet{User: \\\"olivere\\\", Message: \\\"Another unrelated topic.\\\"} tweet3 := tweet{User: \\\"sandrae\\\", Message: \\\"Cycling is fun to do.\\\"} // Add all documents _, err := client.Index().Index(testIndexName).Id(\\\"1\\\").BodyJson(&tweet1).Do(context.TODO()) if err != nil { t.Fatal(err) } _, err = client.Index().Index(testIndexName).Id(\\\"2\\\").BodyJson(&tweet2).Do(context.TODO()) if err != nil { t.Fatal(err) } _, err = client.Index().Index(testIndexName).Id(\\\"3\\\").BodyJson(&tweet3).Do(context.TODO()) if err != nil { t.Fatal(err) } _, err = client.Refresh().Index(testIndexName).Do(context.TODO()) if err != nil { t.Fatal(err) } // Specify highlighter hl := NewHighlight() hl = hl.Fields(NewHighlighterField(\\\"message\\\")) hl = hl.PreTags(\\\"<em>\\\").PostTags(\\\"</em>\\\") // Match all should return all documents query := NewPrefixQuery(\\\"message\\\", \\\"golang\\\") searchResult, err := client.Search(). Index(testIndexName). Highlight(hl). Query(query). Pretty(true). Do(context.TODO()) if err != nil { t.Fatal(err) } if searchResult.Hits == nil { t.Fatalf(\\\"expected SearchResult.Hits != nil; got nil\\\") } if searchResult.TotalHits() != 1 { t.Fatalf(\\\"expected SearchResult.TotalHits() = %d; got %d\\\", 1, searchResult.TotalHits()) } if len(searchResult.Hits.Hits) != 1 { t.Fatalf(\\\"expected len(SearchResult.Hits.Hits) = %d; got %d\\\", 1, len(searchResult.Hits.Hits)) } hit := searchResult.Hits.Hits[0] var tw tweet if err := json.Unmarshal(hit.Source, &tw); err != nil { t.Fatal(err) } if hit.Highlight == nil || len(hit.Highlight) == 0 { t.Fatal(\\\"expected hit to have a highlight; got nil\\\") } if hl, found := hit.Highlight[\\\"message\\\"]; found { if len(hl) != 1 { t.Fatalf(\\\"expected to have one highlight for field \\\\\\\"message\\\\\\\"; got %d\\\", len(hl)) } expected := \\\"Welcome to <em>Golang</em> and Elasticsearch.\\\" if hl[0] != expected { t.Errorf(\\\"expected to have highlight \\\\\\\"%s\\\\\\\"; got \\\\\\\"%s\\\\\\\"\\\", expected, hl[0]) } } else { t.Fatal(\\\"expected to have a highlight on field \\\\\\\"message\\\\\\\"; got none\\\") } }\"]},\"767\":{\"h\":\"14、elasticsearch集群配置\",\"t\":[\"集群包的准备 新建一个elasticsearch-cluster文件夹\",\"把elasticsearch-7.17.7-windows-x86_64.zip文件解压三份, 分别命名为 node1 node2 node3 如下\"]},\"768\":{\"h\":\"启动第一个节点\",\"t\":[\"对node1的config目录下的elasticsearch.yml进行修改\",\"#集群名称，节点之间要保持一致 cluster.name: my-elasticsearch # 当前节点名称 是否能 成为master node.name: node-1001 node.master: true node.data: true network.host: localhost http.port: 1001 # tcp通信端口 transport.tcp.port: 9301 #跨域配置 #action.destructive_requires_name: true http.cors.enabled: true http.cors.allow-origin: \\\"*\\\"\",\"修改完成上面的配置后, 即可启动第一个节点. 从启动日志中, 可以看到集群的名称\",\"使用get请求, 可以查看集群的状态http://localhost:1001/_cluster/health 响应结果如下\",\"{ \\\"cluster_name\\\": \\\"my-elasticsearch\\\", \\\"status\\\": \\\"yellow\\\", \\\"timed_out\\\": false, \\\"number_of_nodes\\\": 1, \\\"number_of_data_nodes\\\": 1, \\\"active_primary_shards\\\": 6, \\\"active_shards\\\": 6, \\\"relocating_shards\\\": 0, \\\"initializing_shards\\\": 0, \\\"unassigned_shards\\\": 3, \\\"delayed_unassigned_shards\\\": 0, \\\"number_of_pending_tasks\\\": 0, \\\"number_of_in_flight_fetch\\\": 0, \\\"task_max_waiting_in_queue_millis\\\": 0, \\\"active_shards_percent_as_number\\\": 66.66666666666666 }\"]},\"769\":{\"h\":\"启动第二个节点\",\"t\":[\"修改第二个节点的配置, 与第一个节点要增加配置. 增加了主节点的配置信息 并且修改相关端口. 集群名称不变.\",\"#集群名称，节点之间要保持一致 cluster.name: my-elasticsearch # 当前节点名称 是否能 成为master node.name: node-1002 node.master: true node.data: true network.host: localhost http.port: 1002 # tcp通信端口 transport.tcp.port: 9302 # 主节点的信息 discovery.seed_hosts: [\\\"localhost:9301\\\"] discovery.zen.fd.ping_timeout: 1m discovery.zen.fd.ping_retries: 5 #跨域配置 #action.destructive_requires_name: true http.cors.enabled: true http.cors.allow-origin: \\\"*\\\"\",\"修改完上面配置后, 进行启动, 从如下启动日志可以看出 , 集群名称为my-elasticsearch, 并且master节点为node1.\",\"再次查询集群状态, 可以看到有两个节点了.\"]},\"770\":{\"h\":\"启动第三个节点\",\"t\":[\"修改第三个解压包的配置文件如下. 在discovery.seed_hosts中, 修改为可以查找9301 和9302 即可以去查找node1 node2 两个节点信息.\",\"#集群名称，节点之间要保持一致 cluster.name: my-elasticsearch # 当前节点名称 是否能 成为master node.name: node-1003 node.master: true node.data: true network.host: localhost http.port: 1003 # tcp通信端口 transport.tcp.port: 9303 # 主节点的信息 discovery.seed_hosts: [\\\"localhost:9301\\\",\\\"localhost:9302\\\"] discovery.zen.fd.ping_timeout: 1m discovery.zen.fd.ping_retries: 5 #跨域配置 #action.destructive_requires_name: true http.cors.enabled: true http.cors.allow-origin: \\\"*\\\"\",\"修改完成后, 即可启动.\",\"启动完成后, 查看集群信息. 执行请求http://localhost:1001/_cluster/health 可以看到节点数为三个了.\",\"切记记得每个节点都要安装：ik的插件，否则会造成失效\"]},\"771\":{\"h\":\"15、golang elasticsearch连接配置\",\"t\":[\"client, err := elastic.NewClient( // elasticsearch 服务地址，多个服务地址使用逗号分隔 elastic.SetURL(\\\"http://10.0.1.1:9200\\\", \\\"http://10.0.1.2:9200\\\"), // 基于http base auth验证机制的账号和密码 elastic.SetBasicAuth(\\\"user\\\", \\\"secret\\\"), // 启用gzip压缩 elastic.SetGzip(true), // 设置监控检查时间间隔 elastic.SetHealthcheckInterval(10*time.Second), // 设置请求失败最大重试次数 elastic.SetMaxRetries(5), // 设置错误日志输出 elastic.SetErrorLog(log.New(os.Stderr, \\\"ELASTIC \\\", log.LstdFlags)), // 设置info日志输出 elastic.SetInfoLog(log.New(os.Stdout, \\\"\\\", log.LstdFlags))) if err != nil { // Handle error panic(err) } _ = client\",\"https://github.com/olivere/elastic\",\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-settings.html\"]},\"772\":{\"c\":[\"golang\"]},\"773\":{\"h\":\"MySQL高级\"},\"774\":{\"h\":\"01、Docker 安装\",\"t\":[\"（1）yum 包更新到最新 > yum update （2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 > yum install -y yum-utils device-mapper-persistent-data lvm2 （3）设置yum源为阿里云 > yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo （4）安装docker > yum install docker-ce -y （5）安装后查看docker版本 > docker -v\",\"阿里镜像加速\",\"sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json <<-'EOF' { \\\"registry-mirrors\\\": [\\\"https://0wrdwnn6.mirror.aliyuncs.com\\\"] } EOF sudo systemctl daemon-reload sudo systemctl restart docker\"]},\"775\":{\"h\":\"02、Docker安装MYSQL\",\"t\":[\"（1）拉取mysql镜像\",\"docker pull centos/mysql-57-centos7 docker pull mysql\",\"（2）创建容器\",\"> docker run -di --name=tensquare_mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=mkxiaoer centos/mysql-57-centos7 # 或者 > docker run -di --name=tensquare_mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=mkxiaoer mysql 启动成功日志 d81df2492094 centos/mysql-57-centos7 \\\"container-entrypoin…\\\" 6 seconds ago Up 5 seconds 0.0.0.0:33306->3306/tcp mymysql # 查看日志 docker logs -f mymysql\",\"p 代表端口映射，格式为 宿主机映射端口:容器运行端口\",\"-e 代表添加环境变量 MYSQL_ROOT_PASSWORD 是root用户的登陆密码\",\"（3）远程登录mysql\",\"连接宿主机的IP ,指定端口为33306\",\"首先，需要了解一下MySQL的逻辑架构，当执行一条SQL语句时，我们知道它的执行过程，可以对MySQL有更深入的了解，在出现异常，错误的时候，可以更快速的定位问题所在。 下面是MySQL的简单架构示意图，从图中可以看到一条SQL语句的执行和MySQL之间的关系。\",\"MySQL主要分为Server层和存储引擎层。 （1）Server层包含连接器、查询缓存、分析器、优化器、执行器等，涵盖MySQL大多核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等）。所有跨存储引擎的功能都在这一层，如存储转发，视图，触发器等。 （2）存储引擎层负责数据的存储和提取，其架构是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。（你也可以选择存储引擎，来指定内存引擎创建表） 从图中可以看出，不同存储引擎共用一个Server层，从连接器到执行器。下面介绍一下Server层的各个功能。\"]},\"776\":{\"h\":\"1）连接器\",\"t\":[\"连接器负责跟客户端建立连接、获取权限、维持和管理连接。代码命令如下：\",\"mysql -h$ip -P$port -u$user -p\",\"输完命令之后，需要在交互对话里面输入密码，不建议直接p后接密码。 连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。\",\"连接完成后，如果你没有后续的动作，这个连接就处于空闲状态。客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果要继续，就需要重连，然后再执行请求了。\",\"下面讲一下数据库的长连接和短连接：\",\"长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。 短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。 建立连接的过程比较复杂，建议使用长连接，但使用长连接，MySQL的占用内存涨的很快，因为MySQL 在执行过程中临时使用的内存是管理在连接对象里面的，这些资源会在连接断开的时候才释放。所以长连接累计下来，内存占用特别大，可能会被系统强行杀掉（OOM），就是 MySQL 异常重启。 为了解决这个问题，有两种方案：\",\"定期断开长连接。\",\"如果是MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这样可以恢复到连接刚刚创建完成的状态。\"]},\"777\":{\"h\":\"2）查询缓存\",\"t\":[\"建立连接成功后，可以执行select命令，逻辑则执行查询缓存。MySQL拿到一个查询请求，会先查找查询缓存，看是否是之前执行过的语句，如果之前执行过，则会以（key,value）对存储在内存中，key是查询语句，value是查询结果。如果语句不在查询缓存中，则执行后面的过程。虽然看起来查询缓存的效率非常高，但建议不要使用查询缓存。因为查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。\",\"MySQL 8.0 版本直接将查询缓存 的整块功能删掉了。\"]},\"778\":{\"h\":\"3）分析器（做什么）\",\"t\":[\"分析器先进行词法分析，输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL需要识别出里面的字符串分别是什么，代表什么。MySQL从你输入的\\\"select\\\"这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。 然后是语法分析。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。\"]},\"779\":{\"h\":\"4）优化器（怎么做）\",\"t\":[\"经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。 优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。 优化器就是决定执行的方案，在不同执行方法相同的逻辑结果下，选择一种执行方案。 优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。\"]},\"780\":{\"h\":\"5）执行器（开始做）\",\"t\":[\"MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。 开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误。如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。 样例：\",\"select * from T where ID=10;\",\"如果这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：\",\"调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中。 调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。 执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。 对于有索引的表，则是第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。\",\"在数据库的慢查询日志中可以看到一个 == rows_examined== 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。但是在有些场景下，执行器调用一次，引擎内部扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。\"]},\"781\":{\"h\":\"6）存储引擎（落盘）\",\"t\":[\"存储引擎的任务是将执行器的指令落在数据库文件上\",\"不同的存储引擎的原理和执行的方法有很大不同（这个是后续课程要着重去讲解和分析的问题）\"]},\"782\":{\"h\":\"小结\",\"t\":[\"SQL语句执行的过程设计到了MYSQL几乎所有的模块\",\"一个SQL语句是按照，分析-优化-执行-落盘的步骤执行的\",\"在MYSQL8.0之后已经停用了查询缓存的功能\",\"不同的存储引擎执行的方式不同\"]},\"783\":{\"h\":\"\",\"t\":[\"数据库主要是用来存储的，我们应避免让数据库做运算，比如写定时任务，存储过程等。复杂的计算应该在程序代码中实现。我们应该尽量简单的使用数据库。\"]},\"784\":{\"h\":\"\",\"t\":[\"一年内单表数据量一般含char不超过500W条\"]},\"785\":{\"h\":\"\",\"t\":[\"单表的字段应该少而精，那多少合适呢？一般单表字段上限控制在20到50个。\",\"在开发中，我们要注意避免使用大SQL、大事务。\"]},\"786\":{\"h\":\"\",\"t\":[\"为什么在数据库表字段设计的时候尽量都加上NOT NULL DEFAULT ''，这里面不得不说用NULL字段的弊端：\",\"很难进行查询优化\",\"NULL列加索引，需要额外空间\",\"含NULL复合索引无效\",\"count(age) age=null是不会统计的\",\"举例：\",\"1）a char(32) DEFAULT NULL 【不推荐】\",\"2）b int(10) NOT NULL 【不推荐】\",\"3）c int(10) NOT NULL DEFAULT 0 【推荐】\",\"`a` char(32) DEFAULT NULL`b` int(10) NOT NULL\",\"比如上面这种。\"]},\"787\":{\"h\":\"\",\"t\":[\"TEXT类型处理性能远低于VARCHAR\",\"强制生成硬盘临时表\",\"浪费更多空间\",\"VARCHAR(65535)==>64K(注意UTF-8)\",\"尽量不用TEXT/BLOB数据类型\",\"如果业务需要必须用，建议拆分到单独的表\"]},\"788\":{\"h\":\"尽量控制表字段数量\",\"t\":[\"单表的字段数量也不能太多，根据业务场景进行优化调整，尽量调整表字段数少而精，这样有以下好处：\",\"IO高效\",\"全表遍历\",\"表修复快\",\"提高并发\",\"alter table更快\",\"那究竟单表多少字段合适呢？\",\"按照单表1G体积，500W行数据量进行评估：\",\"顺序读1G文件需N秒\",\"单行不超过200Byte\",\"单表不超50个纯INT字段\",\"单表不超20个CHAR(10)字段\",\"==>建议单表字段数上限控制在20~50个\"]},\"789\":{\"h\":\"平衡范式与冗余\",\"t\":[\"数据库表结构的设计也讲究平衡，以往我们经常说要严格遵循三大范式，所以先来说说什么是范式：\",\"第一范式：单个字段不可再分。唯一性。\",\"第二范式：不存在非主属性只依赖部分主键。消除不完全依赖。\",\"第三范式：消除传递依赖。\",\"用一句话来总结范式和冗余：\",\"冗余是以存储换取性能，\",\"范式是以性能换取存储。\",\"所以，一般在实际工作中冗余更受欢迎一些。\",\"模型设计时，这两方面的具体的权衡，首先要以企业提供的计算能力和存储资源为基础。\",\"其次，一般互联网行业中都根据Kimball模式实施数据仓库，建模也是以任务驱动的，因此冗余和范式的权衡符合任务需要。\",\"例如，一份指标数据，必须在早上8点之前处理完成，但计算的时间窗口又很小，要尽可能减少指标的计算耗时，这时在计算过程中要尽可能减少多表关联，模型设计时需要做更多的冗余。\"]},\"790\":{\"h\":\"拒绝3B\",\"t\":[\"数据库的并发就像城市交通，呈非线性增长\",\"这就要求我们在做数据库开发的时候一定要注意高并发下的瓶颈，防止因高并发造成数据库瘫痪。\",\"这里的拒绝3B是指：\",\"大SQL（BIG SQL）：要减少\",\"大事务（BIG Transaction）\",\"大批量（BIG Batch）\"]},\"791\":{\"h\":\"用好数值字段类型\",\"t\":[\"三类数值类型：\",\"整型：TINYINT(1Byte)、TINYINT(1Byte)、SMALLINT(2B)、MEDIUMINT(3B)、INT(4B)、BIGINT(8B)\",\"浮点型：FLOAT(4B)、DOUBLE(8B)\",\"DECIMAL(M,D)\",\"以几个常见的例子来进行说明：\",\"1）INT(1) VS INT(11)\",\"很多人都分不清INT(1)和INT(11)的区别，想必大家也很好奇吧，其实1和11其实只是显示长度的却别而已，也就是不管int（x）x的值是什么值，存储数字的取值范围还是int本身数据类型的取值范围，x只是数据显示的长度而已。\",\"2）BIGINT AUTO_INCREMENT\",\"大家都知道，有符号int最大可以支持到约22亿，远远大于我们的需求和MySQL单表所能支持的性能上限。对于OLTP应用来说，单表的规模一般要保持在千万级别，不会达到22亿上限。如果要加大预留量，可以把主键改为改为无符号int，上限为42亿，这个预留量已经是非常的充足了。\",\"使用bigint，会占用更大的磁盘和内存空间，内存空间毕竟有限，无效的占用会导致更多的数据换入换出，额外增加了IO的压力，对性能是不利的。\",\"因此推荐自增主键使用int unsigned类型，但不建议使用bigint。\",\"3）DECIMAL(N,0)\",\"当采用DECIMAL数据类型的时候，一般小数位数不会是0，如果小数位数设置为0，那建议使用INT类型\"]},\"792\":{\"h\":\"不在数据库里存图片\",\"t\":[\"可见，如果将图片全部存在数据库，将使得数据库体积变大，会造成读写速度变慢。\",\"图片存数据库的弊端：\",\"对数据库的读/写的速度永远都赶不上文件系统处理的速度\",\"数据库备份变的巨大，越来越耗时间\",\"对文件的访问需要穿越你的应用层和数据库层\"]},\"793\":{\"h\":\"数据表的设计原则其它参考\",\"t\":[\"1、数据表的个数越少越好\",\"RDBMS的核心在于对实体和联系的定义，也就是E-R图（Entity Relationship Diagram），数据表越少，证明实体和联系设计得越简洁，既方便理解又方便操作。\",\"2、数据表中的字段个数越少越好\",\"字段个数越多，数据冗余的可能性越大。设置字段个数少的前提是各个字段相互独立，而不是某个字段的取值可以由其他字段计算出来，当然字段个数少是相对的，我们通常会在数据冗余和检索效率中进行平衡。\",\"3、数据表中联合主键的字段个数越少越好\",\"设置主键是为了确定唯一性，当一个字段无法确定唯一性的时候，就需要采用联合主键的方式（也就是用多个字段来定义一个主键）。联合主键中的字段越多，占用的索引空间越大，不仅会加大理解难度，还会增加运行时间和索引空间，因此联合主键的字段个数越少越好。\",\"4、使用主鍵和外鍵越多越好\",\"数据库的设计实际上就是定义各种表，以及各种字段之间的关系。这些关系越多，证明这些实体之间的冗余度越低，利用度越高，这样做的好处在于不仅保证了数据表之间的独立性，还能提升相互之间的关联使用率。\",\"“三少一多\\\"原则的核心就是简单可复用。简单指的是用更少的表、更少的字段、更少的联合主键字段来完成数据表的设计。可复用则是通过主键、外键的使用来增强数据表之间的复用率。因为一个主键可以理解是一张表的代表。键设计得越多，证明它们之间的利用率越高。\",\"注意：这个原则并不是绝对的，有时候我们需要牺牲数据的冗余度来换取数据处理的效率。\"]},\"794\":{\"h\":\"数据库对象编写建议\",\"t\":[\"关于库 【强制】库的名称必须控制在32个字符以内，只能使用英文字母、数字和下划线，建议以英文字 母开头。 【强制】库名中英文 一律小写 ，不同单词采用 下划线 分割。须见名知意。 【强制】库的名称格式：业务系统名称_子系统名。 _ 【强制】库名禁止使用关键字（如type,order等）。 【强制】创建数据库时必须 显式指定字符集 ，并且字符集只能是utf8或者utf8mb4。 创建数据库SQL举例：CREATE DATABASE crm_fund DEFAULT CHARACTER SET ‘utf8’ ; 【建议】对于程序连接数据库账号，遵循 权限最小原则 使用数据库账号只能在一个DB下使用，不准跨库。程序使用的账号 原则上不准有drop权限 。 【建议】临时库以 tmp_ 为前缀，并以日期为后缀； 备份库以 bak_ 为前缀，并以日期为后缀。 关于表、列 1.【强制】表和列的名称必须控制在32个字符以内，表名只能使用英文字母、数字和下划线，建议 以 英文字母开头 。\",\"2.【强制】表和列的名称必须控制在32个字符以内，表名只能使用英文字母、数字和下划线，建议 以 英文字母开头 。\",\"3.【强制】表名要求有模块名强相关，同一模块的表名尽量使用 统一前缀 。比如：crm_fund_item\",\"4.【强制】创建表时必须 显式指定字符集 为utf8或utf8mb4。\",\"5.【强制】表名、列名禁止使用关键字（如type,order等）。\",\"6.【强制】创建表时必须 显式指定表存储引擎 类型。如无特殊需求，一律为InnoDB。\",\"7.【强制】建表必须有comment。\",\"8.【强制】字段命名应尽可能使用表达实际含义的英文单词或 缩写 。如：公司 ID，不要使用 corporation_id, 而用corp_id 即可。\",\"9.【强制】布尔值类型的字段命名为 is_描述 。如member表上表示是否为enabled的会员的字段命 名为 is_enabled。\",\"10.【强制】禁止在数据库中存储图片、文件等大的二进制数据\",\"通常文件很大，短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随 机IO操作，文件很大时，IO操作很耗时。通常存储于文件服务器，数据库只存储文件地址信息。 11.【建议】建表时关于主键： 表必须有主键 (1)强制要求主键为id，类型为int或bigint，且为 auto_increment 建议使用unsigned无符号型。 (2)标识表里每一行主体的字段不要设为主键，建议 设为其他字段如user_id，order_id等，并建立unique key索引。因为如果设为主键且主键值为随机 插入，则会导致innodb内部页分裂和大量随机I/O，性能下降。\",\"12.【建议】核心表（如用户表）必须有行数据的 创建时间字段 （create_time）和 最后更新时间字段 （update_time），便于查问题。\",\"13.【建议】表中所有字段尽量都是 NOT NULL 属性，业务可以根据需要定义 DEFAULT值 。 因为使用 NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问 题。\",\"14.【建议】所有存储相同数据的 列名和列类型必须一致 （一般作为关联列，如果查询时关联列类型 不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）。\",\"15.【建议】中间表（或临时表）用于保留中间结果集，名称以 tmp_ 开头。\",\"备份表用于备份或抓取源表快照，名称以 bak_ 开头。中间表和备份表定期清理。 16.【建议】创建表时，可以使用可视化工具。这样可以确保表、字段相关的约定都能设置上。\",\"实际上，我们通常很少自己写 DDL 语句，可以使用一些可视化工具来创建和操作数据库和数据表。 可视化工具除了方便，还能直接帮我们将数据库的结构定义转化成 SQL 语言，方便数据库和数据表结构 的导出和导入。\"]},\"795\":{\"h\":\"关于索引\",\"t\":[\"【强制】InnoDB表必须主键为id int/bigint auto_increment，且主键值 禁止被更新 。 【强制】InnoDB和MyISAM存储引擎表，索引类型必须为 BTREE 。 【建议】主键的名称以 pk_ 开头，唯一键以 uni_ 或 uk_ 开头，普通索引以 idx_ 开头，一律 使用小写格式，以字段的名称或缩写作为后缀。 【建议】多单词组成的columnname，取前几个单词首字母，加末单词组成column_name。如: sample 表 member_id 上的索引：idx_sample_mid。 【建议】单个表上的索引个数 不能超过6个 。 【建议】在建立索引时，多考虑建立 联合索引 ，并把区分度最高的字段放在最前面。 【建议】在多表 JOIN 的SQL里，保证被驱动表的连接列上有索引，这样JOIN 执行效率最高。 【建议】建表或加索引时，保证表里互相不存在 冗余索引 。 比如：如果表里已经存在key(a,b)， 则key(a)为冗余索引，需要删除。\"]},\"796\":{\"h\":\"SQL编写\",\"t\":[\"【强制】程序端SELECT语句必须指定具体字段名称，禁止写成 *。 【建议】程序端insert语句指定具体字段名称，不要写成INSERT INTO t1 VALUES(…)。 【建议】除静态表或小表（100行以内），DML语句必须有WHERE条件，且使用索引查找。 【建议】INSERT INTO…VALUES(XX),(XX),(XX)… 这里XX的值不要超过5000个。 值过多虽然上线很 快，但会引起主从同步延迟。 【建议】SELECT语句不要使用UNION，推荐使用UNION ALL，并且UNION子句个数限制在5个以 内。 【建议】线上环境，多表 JOIN 不要超过5个表。 【建议】减少使用ORDER BY，和业务沟通能不排序就不排序，或将排序放到程序端去做。ORDER BY、GROUP BY、DISTINCT 这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。 【建议】包含了ORDER BY、GROUP BY、DISTINCT 这些查询的语句，WHERE 条件过滤出来的结果 集请保持在1000行以内，否则SQL会很慢。 【建议】对单表的多次alter操作必须合并为一次 对于超过100W行的大表进行alter table，必须经过DBA审核，并在业务低峰期执行，多个alter需整 合在一起。 因为alter table会产生 表锁 ，期间阻塞对于该表的所有写入，对于业务可能会产生极 大影响。 【建议】批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep。 【建议】事务里包含SQL不超过5个。 因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等问题。\",\"【建议】事务里更新语句尽量基于主键或UNIQUE KEY，如UPDATE… WHERE id=XX;否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。\"]},\"797\":{\"h\":\"\",\"t\":[\"MySQL是一种广泛使用的开源关系型数据库管理系统，可以用于存储和管理大量的数据。在MySQL中，我们可以创建多个表来组织数据，每个表可以包含多个字段来描述和定义数据的结构。但是，每张表能够拥有的字段数量是有限制的。\"]},\"798\":{\"h\":\"字段数量限制\",\"t\":[\"在MySQL中，每张表的字段数量是有限制的。具体的限制取决于所使用的MySQL版本和表的存储引擎。对于InnoDB存储引擎，MySQL 5.7及之前的版本中，每张表的字段数量最多为4096个。而对于MySQL 8.0及更高版本，这一限制被扩大到了16384个。如果使用的是MyISAM存储引擎，每张表的字段数量最多为65535个。\",\"除了字段数量的限制外，还需要考虑其他方面的因素，例如表的行大小和表的总数据大小。在实际应用中，通常不会出现需要使用如此巨大数量的字段的情况。如果表的字段数量超过几十个，通常可以考虑进行表结构的优化，将一些重复或冗余的字段合并，以减少字段数量。\"]},\"799\":{\"h\":\"总结\",\"t\":[\"MySQL中每张表的字段数量是有限制的，具体限制取决于MySQL版本和使用的存储引擎。对于InnoDB存储引擎，MySQL 5.7及之前的版本中，每张表的字段数量最多为4096个，而MySQL 8.0及更高版本中，这一限制被扩大到了16384个。如果使用的是MyISAM存储引擎，每张表的字段数量最多为65535个。在实际应用中，一般不会出现需要使用如此巨大数量的字段的情况。通常可以通过对表结构进行优化，合并重复或冗余的字段，以减少字段数量。\",\"除了字段数量的限制外，还要考虑其他方面的因素，例如表的行大小和表的总数据大小。在设计数据库表结构时，应根据实际需求合理安排字段，并进行适当的优化，以提高数据库的性能和可维护性。\",\"在应用开发的过程中，由于前期数据量少，开发人员编写的SQL语句或者数据库整体解决方案都更重视在功能上的实 现，但是当应用系统正式上线后，随着生成数据量的急剧增长，很多SQL语句和数据库整体方案开始逐渐显露出了性 能问题，对生成的影响也越来越大，此时Mysql数据库的性能问题成为系统应用的瓶颈，因此需要进行Mysql数据库 的性能优化。\",\"1.1 性能下降的表现\",\"执行时间长 等待时间长\",\"1.2 性能下降的原因\",\"查询语句写的不好，各种连接，各种子查询导致用不上索引或者没有建立索引 建立的索引失效，建立了索引,在真正执行时,没有用上建立的索引 关联查询太多join 服务器调优及配置参数导致，如果设置的不合理,比例不恰当,也会导致性能下降,sql变慢 系统架构的问题\",\"1.3 通用的优化方案\",\"生产数据库的mysql的并发数\",\"优化分为：\",\"设计优化: 表的设计合理化(符合3NF，有时候要进行反三范式操作)\",\"索引优化: 添加适当索引(index）(重点)\",\"Sql优化: 写出高质量的sql，避免索引失效 (重点)\",\"架构优化: 分表技术(水平分割、垂直分割) 主从复制，读写分离\",\"配置优化: 对mysql配置优化 [配置最大并发数my.ini, 调整缓存大小 ]\",\"硬件优化: 服务器的硬件优化\"]},\"800\":{\"h\":\"01、MySQL索引原理及概念\",\"t\":[\"分析\",\"索引是解决SQL性能问题的重要手段之一，使用索引可以帮助用户解决大多数的SQL性能问题。索引就是数据结构， 索引是Mysql高效获取数据的数据结构,,==类似新华字典的索引目录,==可以通过索引目录快速查到你想要的字.排好序的快 速查找数据\",\"索引对数据库得性能得影响还是非常的关键 ，索引主要作用：告知存储引擎如何快速的找到我们所需的数据。\",\"当表中得数据还比较小得时候，索引还不足以发挥它得意义和价值。因为这个时候表中的数据会村部缓存到内存中。就算是全表扫描也不会太慢。而随着表中的数据越来越多。查询也越来越频繁，内存也不能完全的缓存表中的数据，这个时候索引就会显得越来越重要。\",\"在实际的开发中，往往很多时候会忽略或者过度的强调索引。形成了两个极端，要么就是除了主键以外的都不建设索引，要么就是泛滥建设索引。这些都是不好的优化体验，索引太少数据量越大的时候，性能可能得不到提升，太多维护索引的时间就会很长，消耗的内存和cpu也会越多。也不利于查询的性能提升。\",\"磁盘存取示意图\",\"每次从磁盘中查找数据称为磁盘I/O， 而磁盘IO 至少要经历磁盘寻道、磁盘旋转、数据读取等等操作，非常消耗性能，所以对于读取数据，最大的优化就是减少磁盘I/O\",\"执行sql的过程\",\"会发起一起磁盘IO = 寻道 + 旋转 + 读取数据 + 返回数据存储内存的过程。\",\"如果条件不满足就会不停的寻道和发起IO。\",\"怎么解决这个问题，来解决这个问题呢？没错就是优化表，对表的数据进行重新编排和建立目录映射。其实就是优化数据的存储的结构，就是建立索引。\"]},\"801\":{\"h\":\"02、MySQL索引的底层实现\",\"t\":[\"底层数据结构分析\"]},\"802\":{\"h\":\"\",\"t\":[\"为了加快数据的查找,可以维护二叉查找树, 每个节点分别包含索引键值和一个指向对应数据记录的物理地址的指针,这样就可以运用二叉查找在一定的复杂度内获取相应的数据,从而快速的检索出符合条件 的记录\",\"左子树的键值小于根的键值 右子树的键值大于根的键值\",\"从二叉树的查找过程了来看，最坏的情况下磁盘IO的次数由树的高度来决定。从前面分析情况来看，减少磁盘IO的次数就必须要压缩树的高度，让瘦高的树尽量变成矮胖的树，所以引出B-Tree强势登场\",\"参考网站： https://www.cs.usfca.edu/~galles/visualization/BST.html\",\"缺点\",\"二叉树是一种偏向树，会造成层级过深，给查询其实并没用提高性能。\",\"二叉树也只能存两个节点，层级越来越大越来越深，发生磁盘的IO会越频繁。\"]},\"803\":{\"h\":\"\",\"t\":[\"B树是一种多路自平衡搜索树，它类似普通的二叉树，但是B书允许每个节点有更多的子节点。B树示意图如下：\",\"为了提升度的长度，还需要对这种数据结构进行优化，所以它的升华版B+Tree诞生了\",\"特点\",\"和二叉树一样比父节点大的数据存储在右边，小的存储在左边。\",\"平衡查询树，它对数据会进行自我平衡。它比二叉树的层级要低。所以查询的性能要比二叉树高很多。\",\"度（degree)节点的数据存储个数。度越深代表存储的数据越密，树的层级和高度就越低。越利于搜索和存储数据。评价一个索引的好坏一定是进入索引的次数越小越快。\",\"节点具有相同的深度\",\"节点中数据key从左到有递增排列\",\"叶节点的指针为空.\",\"参考： https://www.cs.usfca.edu/~galles/visualization/BTree.html\",\"缺点\",\"Btree数据是存储到每个节点自己，所以每次查询的和维护的时候就会维护索引值又维护了数据，这样会就是造成内存的浪费和性能的消耗。这也是B+TREE优化的地方。\"]},\"804\":{\"h\":\"\",\"t\":[\"也就是我们通常数据库所说的索引。\",\"b-tree索引底层：采用b+tree的方式进行结构存储数据\",\"在说B+树之前我们先了解一下为什么要有B树，其实这些树最开始都是为了解决某种系统中，查询效率低的问题。B树其实最开始源于的是二叉树，二叉树是只有左右孩子的树，当数据量越大的时候，二叉树的节点越多，那么当从根节点搜索的时候，影响查询效率。所以如果这些节点存储在外存储器中的话，每访问一个节点，相当于进行了一次I/O操作。\"]},\"805\":{\"h\":\"外存储器和内存储器：\",\"t\":[\"**外存储器：**就是将数据存储到磁盘中，每次查找的某个元素的时候都要取磁盘中查找，然后再写入内存中，容量大，但是查询效率低。\",\"**内存储器：**就是将数据放在内存中，查询快，但是容量小。\",\"我们大致了解了B树和什么是外存储器，内存储器，那么就知道其实B+树就是为了解决数据量大的时候存储在外存储器时候，查找效率低的问题。接下来就说下B+树的特点：\",\"中间元素不存数据，只是当索引用，所有数据都保存在叶子结点中。\",\"所有的中间节点在子节点中要么是最大的元素要么是最小的元素 。\",\"叶子结点包含所有的数据，和指向这些元素的指针，而且叶子结点的元素形成了自小向大这样子的链表。\",\"B+树是B树的变体，也是一种多路平衡查找树，B+树的示意图为：\",\"特点\",\"非叶子节点不存储data,只存储key,可以增大度 叶子节点不存储指针 顺序访问指针，提高区间访问能力\",\"B+Tree索引的性能分析\",\"一般使用磁盘I/O次数评价索引结构的优劣 预读：磁盘一般会顺序向后读取一定长度的数据(页的整数倍)放入内存 局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用 B+Tree的度一般会超过100，因此h非常小 (一般为3到5之间)，性能就会非常稳定 B+Tree叶子节点有顺序指针，更容易做范围查询 存储器读取数据按 磁盘块读取 每个磁盘块的大小为 扇区（页）的2的N次方 每个扇区的最小单位 512B 或 4096B 不同的生产厂家不同\",\"参考网站： https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\",\"如下这个图就很好的说明了B+的特点\",\"看图其实可以看到一个节点可以存放多个数据，查找一个节点的时候可以有多个元素，大大提升查找效率，这就是为什么数据库索引用的就是B+树，因为索引很大，不可能都放在内存中，所以通常是以索引文件的形式放在磁盘上，所以当查找数据的时候就会有磁盘I/O的消耗，而B+树正可以解决这种问题，减少与磁盘的交互，因为进行一次I/O操作可以得到很多数据，增大查找数据的命中率。\",\"这就可以很明显的看出B+树的优势：\",\"单个节点可以存储更多的数据，减少I/O的次数。\",\"查找性能更稳定，因为都是要查找到叶子结点。\",\"叶子结点形成了有序链表，便于查询。\",\"B+树是怎么进行查找的呢，分为单元素查找和范围查找\",\"单元素查找是从根一直查找到叶子结点，即使中间结点有这个元素也要查到叶子结点，因为中间结点只是索引，不存数据。比如要查元素3，如图：\",\"范围查找是直接从链表查，比如要查元素3到元素8的，如图：\"]},\"806\":{\"h\":\"Btree索引的遵循原则和使用限制\",\"t\":[\"遵循最左原则开始查找，否则无法命中索引\",\"name+age+email建设了一个联合索引 select * from tab where age = 12 and email ='xxx@qq.com'//命中不到索引\",\"使用索引时，不能跳过索引中的列\",\"name+age+email建设了一个联合索引 select * from tab where name = 12 and email ='xxx@qq.com'//只会命中name的索引不会命中email的索引了\",\"not int和<>操作无法使用索引\",\"name+age+email建设了一个联合索引 select * from tab where name <> 12 and email ='xxx@qq.com'//索引失效\",\"如果查询中有某个列的范围查询，则其右边所有列都无法使用索引。\",\"name+age+email建设了一个联合索引 select * from tab where name = 'zhangsan' and age > 10 and email ='xxx@qq.com'//name+age命中，email失效\"]},\"807\":{\"h\":\"\",\"t\":[\"使用hash结构存储索引，查找单行数据很快，但缺点也很明显。 1：无法用于排序 2：只支持等值查找 3.存在Hash冲突 Hash索引只适用于某些特定场景，我们使用不多\"]},\"808\":{\"h\":\"03、MySQL的索引实现\",\"t\":[\"MyISAM索引(非聚簇)\",\"MyISAM 索引文件和数据文件是分离的\",\"InnoDB索引(聚簇)\",\"数据文件本身就是索引文件 表数据文件本身就是按照B+Tree组织的一个索引结构文件 聚集索引-叶节点包含了完整的数据记录\",\"联合索引\"]},\"809\":{\"h\":\"04、MySQL索引的优劣势\",\"t\":[\"优势\",\"1.可以通过建立唯一索引或者主键索引,保证数据库表中每一行数据的唯一性. 2.建立索引可以大大提高检索的数据,以及减少表的检索行数 3.在表连接的连接条件 可以加速表与表直接的相连 4.在分组和排序字句进行数据检索,可以减少查询时间中 分组 和 排序时所消耗的时间(数据库的记录会重新排序) 5.建立索引,在查询中使用索引 可以提高性能\",\"劣势\",\"1.在创建索引和维护索引 会耗费时间,随着数据量的增加而增加 2.索引文件会占用物理空间,除了数据表需要占用物理空间之外,每一个索引还会占用一定的物理空间 3.当对表的数据进行INSERT,UPDATE,DELETE 的时候,索引也要动态的维护,这样就会降低数据的维护速度,(建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快)。\",\"索引的分类\",\"1.普通索引index :加速查找 2.唯一索引 主键索引：primary key ：加速查找+约束（不为空且唯一） 唯一索引：unique：加速查找+约束 （唯一） 3.联合索引（组合索引） -primary key(id,name):联合主键索引 -unique(id,name):联合唯一索引 -index(id,name):联合普通索引 4.全文索引fulltext :用于搜索很长一篇文章的时候，效果最好。 ---Elasticsearch\"]},\"810\":{\"h\":\"05、MySQL索引的操作\",\"t\":[\"创建索引\",\"create [UNIQUE|primary|fulltext] index 索引名称 ON 表名(字段(长度))\",\"CREATE INDEX emp_name_index ON employee(NAME);\",\"测试脚本\",\"资料中 testemployee.sql文件\",\"没有使用索引查询的时间如下：\",\"select cus_id from testemployee where cus_id=5 # 时间: 0.311ms\",\"创建索引后查询的时间如下：\",\"-- 为num创建一个索引 create index idx_cusid on testemployee(cusid) -- 再次查询耗时 select cus_id from testemployee where cus_id=5 # 时间: 0.041ms\",\"查看索引\",\"show index from 表名\",\"删除索引\",\"drop index[索引名称] on 表名 DROP INDEX emp_name_index ON employee;\",\"更改索引\",\"alter table tab_name add primary key(column_list) -- 添加一个主键,索引必须是唯一索引,不能为NULL alter table tab_name add unque index_name(column_list) -- 创建的索引是唯一索引,可以为NULL alter table tab_name add index index_name(column_list) -- 普通索引,索引值可出现多次 alter table tab_name add fulltext index_name(column_list)\"]},\"811\":{\"h\":\"01、MySQL索引列什么样子的列适合选择成为索引\",\"t\":[\"适合建立索引\",\"1.主键自动建立唯一索引:primary 2.频繁作为查询条件的字段应该创建索引 比如银行系统银行帐号,电信系统的手机号 3.查询中与其它表关联的字段,外键关系建立索引 比如员工表的部门外键 4.频繁更新的字段不适合建立索引 每次更新不单单更新数据,还要更新索引 5.where条件里用不到的字段不建立索引 6.查询中排序的字段,排序的字段若通过索引去访问将大大提升排序速度 索引能够提高检索的速度和排序的速度 7. 查询中统计或分组的字段\",\"不适合建立索引\",\"1：记录比较少 2：经常增删改的表 3：索引提高了查询的速度，同时却会降低更新表的速度,因为建立索引后, 如果对表进行INSERT,UPDATE DELETE, MYSQL不仅要保存数据,还要保存一下索引文件 4：数据重复的表字段 5：如果某个数据列包含了许多重复的内容,为它建立索引 就没有太大在的实际效果，比如表中的某一个字段为国籍,性别，数据的差异率不高,这种建立索引就没有太多意义。\"]},\"812\":{\"h\":\"02、常见的MySQL性能分析工具和配置\"},\"813\":{\"h\":\"\",\"t\":[\"mysql的慢查询日志是mysql提供的一种日志记录，它用来记录在mysql中响应时间超过阀值的语句,mysql 的日志是跟踪mysql性能瓶颈的最快和最直接的方式了，系统性能出现瓶颈的时候，首先要打开慢查询日志，进行跟踪，尽快的分析和排查出执行效率较慢的SQL ,及时解决避免造成不好的影响。 **作用**： 记录具体执行效率较低的SQL语句的日志信息。 注意： 在默认情况下mysql的慢查询日志记录是关闭的。 同时慢查询日志默认不记录管理语句和不使用索引进行查询的语句\",\"查看是否开启慢查询日志\",\"show variables like '%slow_query_log%' 开启 set global slow_query_log=1; 只对当前数据库生效,如果重启后，则会失效 如果想永久生效，必须修改配置文件 slow_query_log=1 slow_query_log_file=地址\",\"设置慢查询的阀值\",\"默认情况下是：10s\",\"show variables like 'long_query_time' set global long_query_time=4;\",\"要断开连接后, 才能生效\",\"show global variables like 'long_query_time'; select sleep(4) show global status like '%slow_queries%';\",\"慢查询日志分析\",\"慢查询日志中可能会出现很多的日志记录，我们可以通过慢查询日志工具进行分析，MySQL默认安装了 mysqldumpslow工具实现对慢查询日志信息的分析。\",\"-- 得到返回记录集最多的10个SQL。 mysqldumpslow.pl -s r -t 10 /var/lib/mysql/data/61d50d6107ef-slow.log -- 得到访问次数最多的10个SQL mysqldumpslow.pl -s c -t 10 /var/lib/mysql/data/61d50d6107ef-slow.log -- 得到按照时间排序的前10条里面含有左连接的查询语句。 mysqldumpslow.pl -s t -t 10 -g “left join” C:\\\\soft\\\\DESKTOP-8GVEK4U-slow.log -- 另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现刷屏的情况。 mysqldumpslow.pl -s r -t 20 C:\\\\soft\\\\DESKTOP-8GVEK4U-slow.log Count: 4（执行了多少次） Time=375.01s（每次执行的时间） (1500s)（一共执行了多少时间） Lock=0.00s(0s)（等待锁的时间） Rows=10200.3（每次返回的记录数） (40801)（总共返回的记录 数）, username[password]@[10.194.172.41]\",\"参数说明\",\"参数 -s 按照那种方式排序 c：访问计数 l：锁定时间 r:返回记录 al：平均锁定时间 ar：平均访问记录数 at：平均查询时间 -t 是top n的意思，返回多少条数据。 -g 可以跟上正则匹配模式，大小写不敏感。\",\"第三方的慢查询日志分析工具：mysqlsla，myprofi，pt-query-diges等等\"]},\"814\":{\"h\":\"执行计划Explain\",\"t\":[\"概念及作用\",\"使用explain关键字,可以模拟优化器执行的SQL语句 从而知道MYSQL是如何处理sql语句的 通过Explain可以分析查询语句或表结构的性能瓶颈 具体作用： 查看表的读取顺序 数据读取操作的操作类型 查看哪些索引可以使用 查看哪些索引被实际使用 查看表之间的引用 查看每张表有多少行被优化器执行\",\"使用方法\",\"使用Explain关键字 放到sql语句前 explain select cus_id from testemployee where cus_id > 10\",\"参数详解\",\"id​ （重要）\",\" select查询的序列号，包含一组数字,表示查询中执行select子句或操作表的顺序 值分为三种情况 **id值相同** 执行顺序由上到下 **id不同** 如果是子查询,id的序号会递增,id值越大优先级越高,优先被执行 **id相同不同,同时存在** 可以认为是一组,从上往下顺序执行 在所有组中,id值越大,优先级越高,越先执行\",\"-- id值相同 EXPLAIN SELECT * from employee e,department d,customer c where e.dep_id = d.id and e.cus_id = c.id;\",\"-- id值不同 EXPLAIN SELECT * from department WHERE id = (SELECT id from employee WHERE id=(SELECT id from customer WHERE id = 1))\",\"-- id值相同 不同都存在 deriverd 衍生出来的虚表 EXPLAIN select * from department d, (select * from employee group by dep_id) t where d.id = t.dep_id;\",\"select_type\",\"查询类型,主要用于区别普通查询,联合查询,子查询等复杂查询 结果值 SIMPLE 简单select查询,查询中不包含子查询或者UNION PRIMARY 查询中若包含任何复杂的子查询,最外层查询则被标记为primary SUBQUERY 在select或where中包含了子查询 DERIVED 在from列表中包含的子查询被标记为derived(衍生)把结果放在临时表当中 UNION 若第二个select出现的union之后,则被标记为union 若union包含在from子句的子查询中,外层select将被标记为deriver UNION RESULT 从union表获取结果select,两个UNION合并的结果集在最后\",\"-- union 和 union result 示例 EXPLAIN select * from employee e LEFT JOIN department d on e.dep_id = d.id UNION select * from employee e RIGHT JOIN department D ON e.dep_id = d.id\",\"table\",\"显示这一行的数据是关于哪张表的\",\"**partitions **\",\"如果查询是基于分区表的话, 会显示查询访问的分区\",\"type (重要)\",\"访问类型排列 结果值:(最好到最差) system > const > eq_ref > ref > range > index > ALL\",\"-- system 表中有一行记录(系统表) 这是const类型的特例,平时不会出现 explain select HOST from mysql.db where HOST='localhost'\",\"-- const 表示通过索引一次就找到了，const用于比较primary 或者 unique索引. 直接查询主键或者唯一索引，因为只匹配一行数据,所以很快 EXPLAIN select id from testemployee where id=1000\",\"-- eq_ref 唯一性索引扫描 对于每个索引键,表中只有一条记录与之匹配, 常见于主键或唯一索引扫描 EXPLAIN select * from employee e,department d where e.id=d.id\",\"-- ref 非唯一性索引扫描,返回匹配某个单独值的所有行,本质上也是一种索引访问,它返回所有匹配某个单独值的行可能会找到多个符合条件的行,所以它应该属于查找和扫描的混合体 EXPLAIN select e.id,e.dep_id,d.id from employee e,department d where e.dep_id = d.id\",\"-- range 只检索给定范围的行,使用一个索引来选择行 一般就是在你的where语句中出现between\\\\<\\\\>\\\\ in等查询,这种范围扫描索引比全表扫描要好,因为它只需要开始于索引的某一点.而结束语另一点,不用扫描全部索引 explain select * from employee where id>2\",\"-- index index与All区别为index类型只遍历索引树,通常比All要快,因为索引文件通常比数据文件要小all和index都是读全表,但index是从索引中读取,all是从硬盘当中读取 explain select id from employee\",\"-- ALL 将全表进行扫描,从硬盘当中读取数据,如果出现了All 切数据量非常大, 一定要去做优化 explain select * from employee\",\"要求: 一般来说,保证查询至少达到range级别 最好能达到ref\",\"possible_keys\",\"显示可能应用在这张表中的索引,一个或者多个 查询涉及到的字段上若存在索引,则该索引将被列出,但不一定被查询实际使用 可能自己创建了4个索引,在执行的时候,可能根据内部的自动判断,只使用了3个\",\"-- 可能不会用到索引，实际用到索引 explain select dep_id from employee\",\"-- 可能会使用索引，实际没用到索引 EXPLAIN select * from employee e,department d where e.dep_id = d.id\",\"key （重要）\",\"实际使用的索引,如果为NULL,则没有使用索引,查询中若使用了覆盖索引 ,则该索引仅出现在key列表 possible_keys与key关系,理论应该用到哪些索引 实际用到了哪些索引 覆盖索引 查询的字段和建立的字段刚好吻合,这种我们称为覆盖索引\",\"key_len\",\"-- 表示索引中使用的字节数,可通过该列计算查询中使用的索引长度 . explain select * from employee where dep_id=1 and name='鲁班' and age=10\",\"ref\",\"索引是否被引入到, 到底引用到了哪几个索引\",\"Explain select * from employee e,department d where e.dep_id = d.id and e.cus_id = 1\",\"Explain select e.dep_id from employee e,department d,customer c where e.dep_id = d.id and e.cus_id = c.id and e.name='鲁班'\",\"rows\",\"根据表统计信息及索引选用情况,大致估算出找到所需的记录所需要读取的行数,每张表有多少行被优化器查询过\",\"filtered\",\"-- 满足查询的记录数量的比例，注意是百分比，不是具体记录数 . 值越大越好，filtered列的值依赖统计信息，并不十分准确 Explain select e.dep_id from employee e,department d where e.dep_id = d.id\",\"Extra （重要）\",\"注意：语句中出现了Using Filesort 和 Using Temporary说明没有使用到索引\",\"产生的值:\",\" /* Using filesort (需要优化) 说明mysql会对数据使用一个外部的索引排序, 而不是按照表内的索引顺序进行 Mysql中无法利用索引完成排序操作称为\\\"文件排序\\\" */ explain select * from employee where dep_id =1 ORDER BY cus_id\",\" /* Using temporary (需要优化) 使用了临时表保存中间结果,Mysql在对查询结果排序时, 使用了临时表, 常见于排序orderby 和分组查询group by */ explain select name from employee where dep_id in (1,2,3) GROUP BY cus_id\",\" /* impossible where (需要优化) where 子句的值总是false 不能用来获取任何元组 */ explain select name from employee where name='鲁班' and name='zs'\",\" use index 表示相应的select中使用了覆盖索引,避免访问了表的数据行, 效率很好 如果同时出现using where 表明索引被用来执行索引键值的查找 如果没有同时出现using where 表明索引 用来读取数据而非执行查找动作 示例 using where 表明使用了where过滤 using join buffer 使用了连接缓存\"]},\"815\":{\"h\":\"MySQL前缀索引和索引列的选择性\",\"t\":[\"索引很长的字符列(很长的varchar、text、blob)，必须使用前缀索引(MyISAM 727字节，Innodb 1000字节)，因为MySQL不允许索引这些、列的完整长度，使用前面所说的伪哈希索引是不行的，通常是索引开始的部分字符，可以节省索引空间，提高索引效率，但是会降低索引的选择性所以需要在前缀索引的大小和选择性之间找到平衡\",\"create index index_name on table(col_name(n))\",\"在开发中如何选择一个列作为索引列，一般就看这列的重复行，重复性越低越适合做索引列。也就是：不重复的索引值和表的记录数的比值 。如果这个表中记录的唯一性越高说明越适合做索引。比如：主键和唯一列，都特别适合做索引。比值越高索引的效率越好，因为选择性高的索引可以在查找时过滤掉更多的行，唯一索引的值是1，这是性能最好的\"]},\"816\":{\"h\":\"联合索引：很多列都建立索引不如建立联合索引\",\"t\":[\"在多个单独列建立独立索引大多数情况不能提高MySQL查询性能，因为需要更多地内存和磁盘IO\",\"1、当服务器对多个索引做相交操作(多个and)的时候，通常需要一个包含多个列的多列索引，而不是多个独立的单独索引\",\"2、多个or(联合操作)，会消耗大量CPU和内存资源在算法的缓存、排序和合并操作上，这种情况下，还可能有查询的并发性，还不如没有索引，使用union\",\"3、如果在explain中看到索引合并，就要检查一下查询和表结构。可以通过optimizer_switch来关闭索引合并功能，也可以使用ignore index\",\"来让优化器忽略掉某些索引。如何选择索引列的顺序：在不考虑排序和分组的情况下\",\"1、经常使用的列放在最左边，因为索引列是按照 从左到右去使用的\",\"2、选择性高的列优先\",\"3、宽度小，意味着每一页的数据更多，磁盘IO消耗更少\"]},\"817\":{\"h\":\"覆盖索引\",\"t\":[\"如果一个索引包含、覆盖所需要查询的列的值，就称为\\\"覆盖索引\\\"\",\"优点：\",\"可以优化缓存，减少磁盘IO操作\",\"因为B-tree索引可以减少随机IO，变随机IO访问为顺序IO操作，有利于数据的查询速度\",\"避免InnoDB索引的二次查询，这点和Hash索引不同\",\"避免MyISAM表进行系统调用，因为MySQL只是缓存索引的信息，数据要依赖操作系统缓存，所以访问数据的时候，需要进行一次系统调用，而系统调用的性能通常不好\",\"覆盖索引的限制：\",\"存在存储引擎不支持覆盖索引，Memory、hash、全文、空间索引都不能做覆盖索引，只能使用B-Tree索引做覆盖索引\",\"查询中使用太多的列，只有索引的大小远远小于数据本身才能发挥索引的作用\",\"使用了like '%%'这种双百分号的查询，因为存储引擎底层的API限制的，只能提取数据行的值并加载内存中，然后在内存中进行where过滤\",\"例如：\",\"CREATE TABLE `house_detail` ( `id` bigint(11) NOT NULL AUTO_INCREMENT, `description` varchar(255) DEFAULT NULL COMMENT '详细描述', `layout_desc` varchar(255) DEFAULT NULL COMMENT '户型介绍', `traffic` varchar(255) DEFAULT NULL COMMENT '交通出行', `round_service` varchar(255) DEFAULT NULL COMMENT '周边配套', `rent_way` int(2) NOT NULL COMMENT '租赁方式', `address` varchar(32) NOT NULL COMMENT '详细地址 ', `subway_line_id` bigint(11) DEFAULT NULL, `subway_line_name` varchar(32) DEFAULT NULL COMMENT '附近地铁线名称', `subway_station_id` bigint(11) DEFAULT NULL, `subway_station_name` varchar(32) DEFAULT NULL COMMENT '地铁站名', `house_id` bigint(11) DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `index_on_house_id` (`house_id`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\",\"查询如下：EXPLAIN SELECT house_id FROM house_detail WHERE house_id = 15;\",\"可以在Extra中看到Using index，还有使用的索引名称\",\"如果是EXPLAIN SELECT house_id FROM house_detail WHERE house_id LIKE '%1%';\",\"我们看到Using where和Using index\"]},\"818\":{\"h\":\"MySQL优化实战之避免索引失效\",\"t\":[\"目标\",\"实战索引\",\"全值匹配\",\"-- 创建组合索引 create index idx_name_dep_age on employee(name,dep_id,age) -- 索引字段全部使用上 explain select * from employee where name='鲁班' and dep_id=1 and age=10\",\"最左匹配原则\",\"-- 去掉name条件 索引全部失效 explain select * from employee where dep_id=1 and age=10\",\"-- 去掉dep_id name索引生效 explain select * from employee where name='鲁班' and age=10\",\"-- 顺序错乱不会影响最左匹配 explain select * from employee where dep_id=1 and age=10 and name='鲁班'\",\"不再索引列上做任何操作\",\"-- 在name字段上 加上去除空格的函数 索引失效 explain select * from employee where TRIM(name)='鲁班' and dep_id=1 and age=10\",\"范围条件右边的索引失效\",\"-- 范围查找 会造成该组合索引字段的右侧索引全部失效 explain select * from employee where name = '鲁班' and dep_id>1 and age=10\",\"mysql在使用不等于(!=或者<>)索引失效\",\"explain select * from employee where age != 10\",\"is null,is not null无法使用索引\",\"explain select * from employee where name is not NULL\",\"like以通配符开头(%qw)索引失效\",\"explain select * from employee where name like '%鲁'\",\"字符串不加引号索引失效\",\"explain select * from employee where name = 200\",\"使用or连接索引失效\",\"explain select * from employee where name = '鲁班' or age>10\",\"尽量使用覆盖索引\",\"-- 覆盖索引: 要查询的字段全部是索引字段 -- 上面情况会触发全表扫描，不过若使用了覆盖索引，则会只扫描索引文件 explain select name,dep_id,age from employee where name = '鲁班' or age>10\"]},\"819\":{\"h\":\"MySQL优化实战之排序与分组优化\",\"t\":[\"使用order by出现Using filesort\",\"-- 没有使用索引排序，而是内部创建新文件进行文件排序，所以需要优化 -- 如果select语句未使用到索引，会出现 filesort explain select * from employee order by name,dep_id,age -- 组合索引缺少索引字段 会出现 filesort explain select * from employee where name='鲁班' order by dep_id,age explain select * from employee order by dep_id,age -- 组合索引顺序不一致(order by的后面) 会出现 filesort explain select * from employee where name='鲁班' order by dep_id,age explain select * from employee where name='鲁班' order by age,dep_id -- 当索引出现范围查找时 可能会出现 filesort explain select * from employee where name='鲁班' and dep_id>1 order by age -- 排序使用一升一降会造成filesort explain select * from employee where name='鲁班' order by dep_id desc,age\",\"使用group by出现Using temporary\",\"-- 同order by情况类似， 分组必定触发排序\"]},\"820\":{\"h\":\"MySQL优化实战之大数据量分页优化\",\"t\":[\"-- 分页是我们经常使用的功能，在数据量少时单纯的使用limit m,n 不会感觉到性能的影响 -- 但我们的数据达到成百上千万时 ， 就会明显查询速度越来越低\",\"-- 使用存储过程导入数据 -- 查看是否开启函数功能 show variables like 'log_bin_trust_function_creators'; -- 设置开启函数功能 set global log_bin_trust_function_creators=1; -- 创建函数用于生成随机字符串 delimiter $$ create function rand_string(n int) returns varchar(255) begin declare chars_str varchar(100) default 'qwertyuiopasdfghjklzxcvbnm'; declare return_str varchar(255) default ''; declare i int default 0; while i<n do set return_str=concat(return_str,substring(chars_str,floor(1+rand()*52),1)); set i=i+1; end while; return return_str; end $$ -- 创建存储过程用于插入数据 delimiter $$ create procedure insert_emp(in start int(10),in max_num int(10)) begin declare i int default 0; /*把autocommit设置成0*/ set autocommit= 0; repeat set i=i+1; insert into testemployee(name,dep_id,age,salary,cus_id) values(rand_string(6),'2',24,3000,6); until i=max_num end repeat; commit; end $$ -- 调用存储过程插入数据 call insert_emp(1,1000000);\",\"-- 测试一下分页数据的相应时间 -- limit 0,20 时间: 0.001ms select * from testemployee limit 0,20 -- limit 10000,20 时间: 0.004ms select * from testemployee limit 10000,20 -- limit 100000,20 时间: 0.044ms select * from testemployee limit 100000,20 -- limit 1000000,20 时间: 0.370ms select * from testemployee limit 1000000,20 -- limit 3000000,20 时间: 1.068ms select * from testemployee limit 3000000,20\",\"子查询优化\",\"-- 子查询优化 -- 通过Explain发现，之前我们没有利用到索引，这次我们利用索引查询出对应的所有ID -- 在通过关联查询，查询出对应的全部数据，性能有了明显提升 -- limit 3000000,20 时间: 1.068ms -> 时间: 0.742ms select * from testemployee e,(select id from testemployee limit 3000000,20) tmp where e.id=tmp.id -- 自增ID也可以用如下方式 select * from testemployee where id> (select id from testemployee t limit 3000000,1) LIMIT 10\",\"使用id限定方案\",\"-- 使用id限定方案，将上一页的ID传递过来 根据id范围进行分页查询 -- 通过程序的设计，持续保留上一页的ID，并且ID保证自增 -- 时间: 0.010ms select * from testemployee where id>3000109 limit 20 -- 虽然使用条件有些苛刻 但效率非常高，可以和方案一组合使用 ，跳转某页使用方案一 下一页使用方案2\"]},\"821\":{\"h\":\"MySQL优化实战之小表驱动大表\",\"t\":[\"3.2.4.1 表关联查询\",\"MySQL 表关联的算法是 Nest Loop Join，是通过驱动表的结果集作为循环基础数据，然后一条一条地通过该结果集中的数据作为过滤条件到下一个表中查询数据，然后合并结果。如果小的循环在外层，对于数据库连接来说就只连接5次，进行5000次操作，如果1000在外，则需要进行1000次数据库连接，从而浪费资源，增加消耗。这就是为什么要小表驱动大表。\",\"总结： 多表查询中，一定要让小表驱动大表\",\"3.2.4.2 in和exits查询\",\"-- 使用in 时间: 3.292ms explain select * from testemployee where dep_id in (select id from department) 使用department表中数据作为外层循环 10次 for( select id from department d) 每次循环执行employee表中的查询 for( select * from employee e where e.dep_id=d.id)\",\"-- 使用exits 时间: 14.771ms select * from employee e where exists (select 1 from department d where d.id = e.dep_id) 使用employee表中数据作为外层循环 3000000万次 for(select * from employee e) 每次循环执行department表中的查询 for( select 1 from department d where d.id = e.dep_id)\",\"总结： 当A表数据多于B表中的数据时，这是我们使用in优于Exists 当B表数据多于A表中的数据时,这时我们使用Exists优于in 如果数据量差不多，那么它们的执行性能差不多 Exists子查询只返回true或false,因此子查询中的select * 可以是select 1或其它\",\"3.2.5 max函数优化\",\"-- 给max函数中的字段添加索引 select max(age) from testemployee\"]},\"822\":{\"h\":\"\",\"t\":[\"资源有限\",\"虚拟机搭建对机器配置有要求，并且安装mysql步骤繁琐\",\"一台机器上可以运行多个Docker容器\",\"Docker容器之间相互独立，有独立ip，互不冲突\",\"Docker使用步骤简便，启动容器在秒级别\",\"步骤\",\"1：首先拉取mysql5.7的镜像\",\"docker pull mysql:5.7\",\"2：使用docker安装准备两台mysql服务器\",\"Master(主)：\",\"docker run -p 3306:3306 --name mymysql-master -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7\",\"Slave(从)：\",\"docker run -p 3307:3306 --name mymysql-slave-01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 docker run -p 3308:3306 --name mymysql-slave-02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7\",\"Master对外映射的端口是3306，Slave对外映射的端口是3307。因为docker容器是相互独立的，每个容器有其独立的ip，所以不同容器使用相同的端口并不会冲突。这里我们应该尽量使用mysql默认的3306端口，否则可能会出现无法通过ip连接docker容器内mysql的问题。 注意如果是：阿里云服务器必须在安全组开放3340和3339的端口。\",\"使用docker ps命令查看正在运行的容器：\",\"此时可以使用Navicat等工具测试连接mysql\",\"3：创建两个主从的配置文件/opt/mysql/mysqlmaster.cnf和/opt/mysql/mysqlslave.cnf\",\"mysqlmaster.cnf配置如下\",\"[mysqld] ## 同一局域网内注意要唯一 server-id=100 ## 开启二进制日志功能，可以随便取（关键） log-bin=mysql-bin ## 复制过滤：不需要备份的数据库，不输出（mysql库一般不同步） binlog-ignore-db=mysql ## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存 binlog_cache_size=1M ## 主从复制的格式（mixed,statement,row，默认格式是statement） binlog_format=mixed\",\"mysqlslave01.cnf\",\"[mysqld] ## 设置server_id,注意要唯一 server-id=102 ## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用 log-bin=mysql-slave-bin ## relay_log配置中继日志 relay_log=edu-mysql-relay-bin ##复制过滤：不需要备份的数据库，不输出（mysql库一般不同步） binlog-ignore-db=mysql ## 如果需要同步函数或者存储过程 log_bin_trust_function_creators=true ## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存 binlog_cache_size=1M ## 主从复制的格式（mixed,statement,row，默认格式是statement） binlog_format=mixed ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。 ## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致 slave_skip_errors=1062\",\"mysqlslave02.cnf\",\"[mysqld] ## 设置server_id,注意要唯一 server-id=103 ## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用 log-bin=mysql-slave-bin ## relay_log配置中继日志 relay_log=edu-mysql-relay-bin ##复制过滤：不需要备份的数据库，不输出（mysql库一般不同步） binlog-ignore-db=mysql ## 如果需要同步函数或者存储过程 log_bin_trust_function_creators=true ## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存 binlog_cache_size=1M ## 主从复制的格式（mixed,statement,row，默认格式是statement） binlog_format=mixed ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。 ## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致 slave_skip_errors=1062\",\"4：将两个文件复制到两个mysql容器内部。\",\"将两个文件分别拷贝到各自的容器下即可(当然你也可以使用卷 volume的方式也可以)\",\"docker cp /opt/mysql/mysqlmaster.cnf mymysql-master:/etc/mysql/conf.d docker cp /opt/mysql/mysqlslave01.cnf mymysql-slave-01:/etc/mysql/conf.d docker cp /opt/mysql/mysqlslave02.cnf mymysql-slave-02:/etc/mysql/conf.d\",\"然后重新启动两个服务器即可。\",\"5：进入到slave服务器就行binlog文件复制和启动slave复制功能\",\"进入slave的mysql数据库\",\"mysql -uroot -p123456\",\"进行master数据库和slave数据库的复制功能\",\"这里注意一下 master_log_file 和 master_log_pos 都是通过 master服务器通过show master status获得。\",\"获取主节点的IP地址：\",\"docker inspect 2763daa6ad2a\",\"change master to master_host='172.17.0.2', master_user='root', master_password='123456', master_port=3306, master_log_file='mysql-bin.000001',master_log_pos=1448;\",\"master_host='39.105.15.89' ## Master的IP地址 master_user='root' ## 用于同步数据的用户（在Master中授权的用户） master_password='xxxx' ## 同步数据用户的密码 master_port=3306 ## Master数据库服务的端口 master_log_file='edu-mysql-bin.000001'\",\"7：查看主从同步状态\",\"## 查看同步状态 > show slave status\\\\G; ## 开启主从同步 > start slave; Query OK, 0 rows affected (0.00 sec) ## 再查看主从同步状态 > show slave status\\\\G;\",\"正常情况下，SlaveIORunning 和 SlaveSQLRunning 都是No，因为我们还没有开启主从复制过程。使用start slave开启主从复制过程，然后再次查询主从同步状态show slave status \\\\G;。\",\"&nbsp；\",\"SlaveIORunning 和 SlaveSQLRunning 都是Yes，说明主从复制已经开启。此时可以测试数据同步是否成功。\"]},\"823\":{\"h\":\"主从复制排错\",\"t\":[\"使用start slave开启主从复制过程后，如果SlaveIORunning一直是Connecting，则说明主从复制一直处于连接状态，这种情况一般是下面几种原因造成的，我们可以根据 Last_IO_Error提示予以排除。\",\"网络不通\",\"检查ip,端口\",\"密码不对\",\"检查是否创建用于同步的用户和用户密码是否正确\",\"pos不对\",\"检查Master的 Position\"]},\"824\":{\"h\":\"测试主从复制\",\"t\":[\"测试主从复制方式就十分多了，最简单的是在Master创建一个数据库，然后检查Slave是否存在此数据库。\",\"Master:\",\"&nbsp；\",\"Slave:\",\"&nbsp；\"]},\"825\":{\"h\":\"常见错误排查\",\"t\":[\"MYSQL镜像服务器因错误停止的恢复 --Slave_SQL_Running: No\",\"先stop slave，然后执行了一下提示的语句，再 > stop slave; > set global sql_slave_skip_counter=1; > start slave; > show slave status\\\\G ;\",\"从MYSQL服务器Slave_IO_Running: No的解决2\",\"尝试从损坏之前的位置开始 > stop slave; > CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000008', MASTER_LOG_POS=519086591; > start slave; 无效！ 只好从新的日志开始 SLAVE STOP; CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000008', MASTER_LOG_POS=519260687; SLAVE START; 此时Slave_IO_Running恢复为Yes，同步进行了！观察了会儿，没有任何出错迹象，问题解决。\",\"mysql数据主从同步失败解决方案\",\"打开数据从库（slave），运行 mysql>show slave status\\\\G; 可以看到\",\"slave_IO_Running:No 说明数据库同步操作失败 报错提示： Got fatal error 1236 from master when reading data from binary log: ‘Could not find first log file name in binary log index file’解决方案 1.在主库那边（master）清除日志 flush logs; 2.查看主库状态 show master status; 3.记下对应的File, Position的值，下面会用到 4.在从库（slave)，执行： CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000002',MASTER_LOG_POS=2079; slave start; show slave status \\\\G 查看是否同步成功了\"]},\"826\":{\"c\":[\"db\"]},\"827\":{\"h\":\"MongoDB - Go\",\"t\":[\"MongoDB是一个文档数据库，它的基本数据单位就是文档，存储格式是BSON（Binary JSON）一种类似JSON的结构，松散的结构可以存储不同类型的数据，相较于关系数据库更为灵活，并且使用js作为脚本语言，可以通过脚本来完成组合操作。本文主要介绍使用在Go中使用官方的mongo驱动操作mongodb数据库，并不是mongodb教程，如果你没有mongo基础，请先自行了解和学习。\",\"mongodb文档：Introduction to MongoDB — MongoDB Manual\"]},\"828\":{\"h\":\"驱动\",\"t\":[\"mongodb在go这方面的库比较少，早期有些社区维护的库，后面都停止维护了，不过官方的mongo驱动库已经完全足够使用了。\",\"开源仓库：mongodb/mongo-go-driver: The Official Golang driver for MongoDB (github.com)\",\"文档地址：mongodb/mongo-go-driver: The Official Golang driver for MongoDB (github.com)\"]},\"829\":{\"h\":\"安装\",\"t\":[\"下载依赖的话使用下面的地址就行了。\",\"$ go get go.mongodb.org/mongo-driver/mongo\"]},\"830\":{\"h\":\"连接\",\"t\":[\"下面是一个简单的mongo客户端与服务端建立连接的例子。\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"go.mongodb.org/mongo-driver/mongo\\\" \\\"go.mongodb.org/mongo-driver/mongo/options\\\" \\\"go.mongodb.org/mongo-driver/mongo/readpref\\\" \\\"log\\\" ) func main() { ctx := context.Background() // 使用URI建立连接 client, err := mongo.Connect(ctx, options.Client().ApplyURI(\\\"mongodb://admin:123456@192.168.48.138:27017/\\\")) if err != nil { log.Panicln(err) } // 关闭连接 defer client.Disconnect(ctx) // ping测试连接是否可用 fmt.Println(client.Ping(ctx, readpref.Primary())) }\"]},\"831\":{\"h\":\"bson\",\"t\":[\"mongodb在go里面使用了以下几种类型来映射数据库中的文档，位于bson/bson.go\",\"// BSON文档的有序表示 type D = primitive.D // 一对键值，BSON文档的有序表示的基本单位 type E = primitive.E // BSON文档的无序表示 type M = primitive.M // BSON数据的有序表示 type A = primitive.A\",\"它们的实际类型如下\",\"// BSON文档的有序表示 type D []E // 一对键值，BSON文档的有序表示的基本单位 type E struct { Key string Value interface{} } // BSON文档的无序表示 type M map[string]interface{} // BSON数据的有序表示 type A []interface{}\",\"通过以上几种类型，即可以构造查询SQL，也可以用来映射数据。\",\"提示\",\"驱动examples目录下有着相当多的使用示例，官方非常详细的演示了如何使用上述四种类型。\",\"地址：mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)\"]},\"832\":{\"h\":\"查询文档\",\"t\":[\"官方查询示例：mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)\",\"首先创建user数据库，向集合users插入如下数据\",\"> use user > db.users.insertMany([ { name: \\\"mike\\\", age: 12, }, { name: \\\"jenny\\\", age: 14, }, { name: \\\"jack\\\", age: 18, address: \\\"usa\\\" } ])\"]},\"833\":{\"h\":\"查询单个\",\"t\":[\"type User struct { Name string `bson:\\\"name\\\"` Age int `bson:\\\"age\\\"` Address string `bson:\\\"address\\\"` } var user User result := client.Database(\\\"user\\\"). // 选中数据库 Collection(\\\"users\\\"). // 选中集合 FindOne(ctx, bson.D{{\\\"address\\\", \\\"usa\\\"}}) // 过滤条件 // 反序列化 if err := result.Decode(&user); err != nil { log.Panicln(err) } fmt.Printf(\\\"%+v\\\\n\\\", user)\",\"上面那段查询代码等价于\",\"db.users.findOne({ address: \\\"usa\\\" })\",\"输出结果\",\"{Name:jack Age:18 Address:usa}\"]},\"834\":{\"h\":\"查询多个\",\"t\":[\"type User struct { Name string `bson:\\\"name\\\"` Age int `bson:\\\"age\\\"` Address string `bson:\\\"address\\\"` } var users []User cursor, err := client.Database(\\\"user\\\"). // 选中数据库 Collection(\\\"users\\\"). // 选中集合 Find(ctx, bson.D{}) // 过滤条件 if err != nil { log.Panicln(err) } if err := cursor.All(ctx, &users); err != nil { log.Panicln(err) } fmt.Printf(\\\"%+v\\\\n\\\", users)\",\"等价于\",\"db.users.find({})\",\"输出\",\"[{Name:jack Age:18 Address:usa} {Name:mike Age:12 Address:} {Name:jenny Age:14 Address:}]\",\"在构造查询条件的时候，也可以使用options\",\"type User struct { Name string `bson:\\\"name\\\"` Age int `bson:\\\"age\\\"` Address string `bson:\\\"address\\\"` } var users []User find := options.Find() find.SetSort(bson.M{\\\"age\\\": 1}) find.SetLimit(1) cursor, err := client.Database(\\\"user\\\"). // 选中数据库 Collection(\\\"users\\\"). // 选中集合 Find(ctx, bson.D{}, find) // 过滤条件 if err != nil { log.Panicln(err) } if err := cursor.All(ctx, &users); err != nil { log.Panicln(err) } fmt.Printf(\\\"%+v\\\\n\\\", users)\",\"等价于\",\"db.users.find({}).sort({age:1}).limit(1)\",\"输出\",\"[{Name:mike Age:12 Address:}]\"]},\"835\":{\"h\":\"创建文档\",\"t\":[\"官方创建实例：mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)\",\"下面是创建一个文档的例子\",\"one, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").InsertOne(ctx, User{ Name: \\\"lili\\\", Age: 20, Address: \\\"china\\\", }) if err != nil { log.Panicln(err) } fmt.Println(one.InsertedID)\",\"创建成功后会返回文档的ObjectID\",\"ObjectID(\\\"64c60fa01e2548d9e4de6cf4\\\")\",\"下面是创建多个文档的例子\",\"users := []any{User{ Name: \\\"john\\\", Age: 10, Address: \\\"usa\\\", }, User{ Name: \\\"pop\\\", Age: 30, Address: \\\"uk\\\", }} one, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").InsertMany(ctx, users) if err != nil { log.Panicln(err) } fmt.Println(one.InsertedIDs)\",\"创建成功后返回返回一组ObjectID\",\"[ObjectID(\\\"64c610d5aec2618d6ca0b515\\\") ObjectID(\\\"64c610d5aec2618d6ca0b516\\\")]\",\"上面两段代码就等价于db.users.insertOne和db.users.insertMany。\"]},\"836\":{\"h\":\"更新文档\",\"t\":[\"官方更新示例：mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)\",\"下面是更新单个文档的示例，将名为lili人更名为mark\",\"upres, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").UpdateOne(ctx, bson.D{ {\\\"name\\\", \\\"mark\\\"}, }, bson.D{ {\\\"$set\\\", bson.D{ {\\\"name\\\", \\\"lili\\\"}, }}, }) if err != nil { log.Panicln(err) } fmt.Printf(\\\"%+v\\\", upres)\",\"等价于\",\"db.users.updateOne({ name: \\\"lili\\\" }, { $set: { name: \\\"mark\\\" }, })\",\"输出\",\"&{MatchedCount:1 ModifiedCount:1 UpsertedCount:0 UpsertedID:<nil>}\",\"下面是更新多个文档的示例，将年龄为10的人地址更新为cn\",\"upres, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").UpdateMany(ctx, bson.D{ {\\\"age\\\", 10}, }, bson.D{ {\\\"$set\\\", bson.D{ {\\\"address\\\", \\\"cn\\\"}, }}, }) if err != nil { log.Panicln(err) } fmt.Printf(\\\"%+v\\\", upres)\",\"除了使用Update，mongo还提供了Replace，两者的区别在于前者是更新文档字段，后者是直接替换文档。例如下面的代码，就不再需要操作符了。\",\"upres, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").ReplaceOne(ctx, bson.D{ {\\\"age\\\", 10}, }, bson.D{ {\\\"address\\\", \\\"cn\\\"}, }) if err != nil { log.Panicln(err) } fmt.Printf(\\\"%+v\\\", upres)\",\"同时mongo还提供了FindOneAndUpdate和FindOneAndReplace来获取文档和更新文档。如下\",\"res := client.Database(\\\"user\\\").Collection(\\\"users\\\").FindOneAndReplace(ctx, bson.D{ {\\\"address\\\", \\\"cn\\\"}, }, bson.D{ {\\\"address\\\", \\\"uk\\\"}, }) if err := res.Err(); err != nil { log.Panicln(err) } var user User res.Decode(&user) fmt.Printf(\\\"%+v\\\", user)\",\"输出\",\"Name: Age:0 Address:cn}\",\"此操作会先查询文档再进行修改文档。\"]},\"837\":{\"h\":\"删除文档\",\"t\":[\"官方删除示例：mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)\",\"下面是删除一个文档的例子\",\"result, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").DeleteOne(ctx, bson.D{ {\\\"name\\\", \\\"jack\\\"}, }) if err != nil { log.Panicln(err) } fmt.Println(result.DeletedCount)\",\"下面是删除多个文档的例子\",\"result, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").DeleteMany(ctx, bson.D{ {\\\"age\\\", \\\"10\\\"}, }) if err != nil { log.Panicln(err) } fmt.Println(result.DeletedCount)\"]},\"838\":{\"h\":\"聚合\",\"t\":[\"官方聚合示例：mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)\",\"聚合操作会用到mongo.Pipeline类型，它的本质是[]bson.D\",\"type Pipeline []bson.D\",\"pipline := mongo.Pipeline{ { {\\\"$match\\\", bson.D{ {\\\"address\\\", \\\"uk\\\"}, }}, }, { {\\\"$sort\\\", bson.D{ {\\\"age\\\", 1}, }}, }, } aggregate, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").Aggregate(ctx, pipline) if err != nil { log.Panicln(err) } var users []User if err := aggregate.All(ctx, &users); err != nil { log.Panicln(err) } log.Println(users)\",\"输出\",\"[{lili 20 uk} {kak 30 uk}]\",\"这段聚合操作就是匹配所有address为uk的用户，然后按照年龄排序。\"]},\"839\":{\"c\":[\"db\"]},\"840\":{\"h\":\"MongoDB\"},\"841\":{\"h\":\"01、Mongodb是什么\",\"t\":[\"官网：https://www.mongodb.com/zh-cn\",\"MongoDB是一个基于分布式文件存储 [1] 的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。\",\"MongoDB是一个基于文档的数据库，其中文档是指一组键值（JSON）对（类似于关系型数据库中的一行记录），其中值可以是字符串、整数、数组、嵌套文档等各种数据类型。MongoDB中的文档可以是动态的，即不需要提前定义文档的结构。MongoDB将文档组织为集合（类似于关系型数据库中的表），集合中的文档可以根据需要进行添加、删除、更新和查询等操作。\"]},\"842\":{\"h\":\"01、\",\"t\":[\"**1.高度可扩展：**MongoDB是一种分布式数据库，可以轻松地将数据分布到多个节点上，从而实现数据的高可用和负载均衡。MongoDB还支持水平扩展，即在需要时可以添加更多的节点来扩展数据存储和处理能力。\",\"**2.灵活的数据模型：**MongoDB的文档是基于BSON（二进制JSON）格式存储的，因此可以支持各种数据类型和数据结构。MongoDB还支持嵌套文档和数组，从而实现更复杂的数据结构和查询。\",\"**3.高性能：**MongoDB使用内存映射文件（MMAP）来管理数据存储和读写，从而实现高效的数据访问和查询。MongoDB还支持索引和聚合操作，可以更快速地处理大量数据。\",\"**4.多样化的查询：**MongoDB支持各种类型的查询，包括范围查询、文本搜索、地理位置查询等，从而满足不同应用场景下的数据需求。\",\"**5.容易学习和使用：**MongoDB的语法简单、直观，可以通过命令行工具、图形界面或各种语言的驱动程序进行操作。\"]},\"843\":{\"h\":\"02、\",\"t\":[\"MongoDB的高度可扩展性、灵活的数据模型和高性能优势，使其成为一种广泛应用于各种领域的数据库。以下是一些MongoDB的应用场景：\",\"**1.社交网络和内容管理：**MongoDB可以存储和管理用户信息、帖子、评论、图片和视频等多媒体数据。其灵活的数据模型和高性能优势，可以满足高并发、高吞吐量的需求。\",\"**2.物联网和实时数据分析：**MongoDB可以存储和管理传感器数据、设备信息、物流数据等实时数据，其高性能查询和聚合操作可以实时分析和处理数据。\",\"**3.电子商务和金融服务：**MongoDB可以存储和管理用户订单、产品信息、支付记录等数据，其多样化的查询和索引机制可以满足各种复杂的查询需求。\",\"**4.游戏开发和在线教育：**MongoDB可以存储和管理游戏数据、学生信息、课程内容等数据，其高度可扩展性和灵活的数据模型，可以应对各种复杂的数据存储需求。\",\"**5.数据集成和分析平台：**MongoDB可以作为数据集成和分析平台的数据存储引擎，与各种数据源和分析工具进行集成，支持实时数据流和批处理数据分析。\"]},\"844\":{\"h\":\"02、Mongodb的核心概念\"},\"845\":{\"h\":\"1.1 库\",\"t\":[\"mongodb中的库就类似于传统关系型数据库中库的概念，用来通过不同库隔离不同应用数据。mongodb中可以建立多个数据库。每一个库都有自己的集合和权限，不同的数据库也放置在不同的文件中。默认的数据库为\\\"test\\\"，数据库存储在启动指定的data目录中。\"]},\"846\":{\"h\":\"1.2 集合\",\"t\":[\"集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表的概念。\",\"集合存在于数据库中，一个库中可以创建多个集合。每个集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。\"]},\"847\":{\"h\":\"1.3 文档\",\"t\":[\"文档集合中一条条记录，是一组键值(key-value)对(即 BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。\",\"一个简单的文档例子如下：\",\"{\\\"site\\\":\\\"www.kuangstudy.com\\\", \\\"name\\\":\\\"学相伴\\\"} {\\\"site\\\":1, \\\"name\\\":\\\"学相伴\\\",age:10}\"]},\"848\":{\"h\":\"1.4 关系总结\",\"t\":[\"RDBMS\",\"MongoDB\",\"数据库(DataBase)\",\"数据库(DataBase)\",\"表(Table)\",\"集合(Collection)\",\"行(Row)\",\"文档(Document)\",\"列(Column)\",\"字段(Filed)\"]},\"849\":{\"h\":\"03、下载和安装\",\"t\":[\"下载地址：https://www.mongodb.com/try/download/community\",\"2.打开下载的文件，找到 msi 后缀双击，进入安装\",\"3.Custom 可以指定想安装在D盘或其他盘中\",\"3.默认 'Run service as Network Service user’\",\"4.取消勾选左下角图形化工具**（Install MongoDB Compass）**，要不然安装时间会很长很长...\",\"5.点击next ，finish就结束安装了\",\"6.安装完的文件夹目录，config文件是后期加上去的，稍后会介绍\"]},\"850\":{\"h\":\"\",\"t\":[\"1.右击桌面图标 “我的电脑” ，找到 环境变量 在 系统变量 里面找到 path，点击 编辑\",\"2.添加MongoDB的bin地址（ps：注意自己电脑存放mongodb的文件夹路径）\"]},\"851\":{\"h\":\"最后一步运行MongoDB服务\",\"t\":[\"1.创建数据库文件的存放位置\",\"在data文件夹下创建 db 文件夹（启动 MongoDB 服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功）\",\"2.启动 MongoDB 服务（Win+R键），输入cmd\",\"3.进入命令编辑模式，找到db文件，按如下方式输入\",\"4.输入命令，来启动MongoDB 服务\",\"mongod --dbpath D:\\\\MyApp\\\\Mongodb\\\\Server\\\\data\\\\db --logpath\",\"5.按Enter键之后显示，一般端口是27017\",\"6.浏览器中输入地址和端口号为：\",\"http://localhost:27017\",\"7.显示结果如下，就说明安装成功并结束\",\"8.按两次的 ‘Ctrl + C’，结束该次进程\"]},\"852\":{\"h\":\"再配置本地 Windows MongoGB 服务\",\"t\":[\"这样可设置为开机自启动，可直接手动启动关闭，可通过命令行net start MongoDB 启动，不需要再进入bin的目录下启动了；\",\"1.在 data 文件下创建新文件夹log（用来存放日志文件）\",\"2.在 MongoGB 中新建配置文件 mongo.config，用记事本打开编辑即可\",\"#数据库数据存放目录 dbpath=D:\\\\MyApp\\\\Mongodb\\\\Server\\\\data\\\\db #数据库日志存放目录 logpath=D:\\\\MyApp\\\\Mongodb\\\\Server\\\\data\\\\log\\\\mongo.log #以追加的方式记录日志 logappend = true #端口号 默认为 27017 port=27017 #开启用户认证 auth=false #mongodb所绑定的ip地址，绑定后只能通过127访问 bind_ip = 0.0.0.0 #启用日志，默认启用 journal=true #过滤掉一些无用的日志信息，若需要调试使用请设置为false quiet=true #不允许全表扫描 notablescan=false\",\"3.用管理员身份打开 cmd，然后找到 bin 文件地址为：\\\"D:\\\\MyApp\\\\Mongodb\\\\Server\\\\bin ‘’，并输入代码为：mongod -dbpath \\\"D:\\\\MyApp\\\\Mongodb\\\\Server\\\\data\\\\db\\\" -logpath \\\"D:\\\\MyApp\\\\Mongodb\\\\Server\\\\data\\\\log\\\\mongo.log\\\" -install -serviceName \\\"MongoDB\\\"；\",\"‘MongoDB’ 就是之后启动 MongoDB 服务的名字\",\"4.在cmd 管理员中启动和关闭 MongoDB 服务\",\"（1）启动 MongoDB 命令为：net start MongoDB\",\"（2）在浏览器中输入地址和端口号为：http://localhost:27017，显示如下，说明 MongoDB 服务已启动\",\"5.MongoDB启动是 Win+R 键输入 services.msc 也可以判断是否启动\",\"6.关闭 MongoDB 命令为：net stop MongoDB 查看启动的网页没有显示英文了就表示已经关闭了。\"]},\"853\":{\"h\":\"04、MongoDb的命令行工具和客户端工具\",\"t\":[\"命令行工具的下载：https://www.mongodb.com/try/download/shell\",\"下载以后，把bin目录的内容复制到mongodb的安装目录下的bin目录。然后启动\",\"> mongodsh\"]},\"854\":{\"h\":\"05、Mongodb命令使用方法\"},\"855\":{\"h\":\"一 show和help命令\",\"t\":[\"#显示数据库列表 show dbs show databases #显示库中的集合 show tables show collections #显示当前用户 show users #显示帮助信息 db.help() 显示数据库操作命令 db.foo.help() 显示集合操作命令,foo代指某个集合 #查找数据 db.foo.find() 查找foo集合中所有数据,默认一次新手20条 db.foo.find({a:1}) 查找集合中a=1的数据 db.foo.find().pretty() 格式化输出的数据 db.log.findOne() 查看第1条记录 db.log.count() 查询总的记录数 DBQuery.shellBatchSize=50 修改为每页显示50条记录 #查看集合存储信息 db.log.stats() db.log.totalSize() 集合中索引+数据压缩存储之后的大小 db.log.storageSize() 集合中数据压缩存储的大小\"]},\"856\":{\"h\":\"\",\"t\":[\"#切换数据库和创建数据库 use dbname #查看当前数据库 dbs db.getName() #查看数据库状态 db.stats() #删除当前数据库 db.dropDatabase() #查看当前数据库版本 db.version() #从其他主机上克隆数据库 db.cloneDatabase(\\\"10.0.0.11\\\") db.cloneDatabase(\\\"mydb\\\", \\\"temp\\\", \\\"127.0.0.1\\\") #修复数据库 db.repairDatabase()\"]},\"857\":{\"h\":\"\",\"t\":[\"#查看当前库下的所有集合 show collections db.getCollectionNames() #创建集合(非必须) db.createCollection('a') #向集合插入数据(集合不存在则创建) db.stu.insert({id:102,name:\\\"lisi\\\"}) #查询集合中的数据 db.stu.find({}).pretty() db.stu.find({id:101}).pretty() #集合重命名 db.stu.renameCollection(\\\"abc\\\") #集合删除 db.abc.drop() 删除集合 db.log.remove({}) 删除集合中所有记录\"]},\"858\":{\"h\":\"\",\"t\":[\"语法: db.集合名称.insert(document)\",\"插⼊⽂档时， 如果不指定_id参数， MongoDB会为⽂档分配⼀个唯⼀的ObjectId类型的_id\",\"插入单条数据使用字典, 插入多条数据使用列表\",\"> db.abc.insert({name:'luogang',age:22}) > db.abc.find().pretty() { \\\"_id\\\" : ObjectId(\\\"5def4d765feff0d32634b2a7\\\"), \\\"name\\\" : \\\"luogang\\\", \\\"age\\\" : 22 } #批量插入数据 for(i=0;i<10000;i++){db.log.insert({\\\"uid\\\":i,\\\"name\\\":\\\"mongodb\\\",\\\"age\\\":6,\\\"date\\\":newDate()})}\"]},\"859\":{\"h\":\"\",\"t\":[\"语法: db.集合名称.update(<query> ,<update>,{multi: <boolean>})\",\"参数query:查询条件\",\"参数update:更新一条数据,加$set表示未更新数据保留,否则未更新数据丢弃\",\"参数multi:可选， 默认false只更新找到的第⼀条记录,true表示把满⾜条件的⽂档全部更新\",\"> db.abc.update({name:'luogang'},{$set:{passwd:'123456'}}) WriteResult({ \\\"nMatched\\\" : 1, \\\"nUpserted\\\" : 0, \\\"nModified\\\" : 1 }) > db.abc.find().pretty() { \\\"_id\\\" : ObjectId(\\\"5def4d765feff0d32634b2a7\\\"), \\\"name\\\" : \\\"luogang\\\", \\\"age\\\" : 22, \\\"passwd\\\" : \\\"123456\\\" }\"]},\"860\":{\"h\":\"\",\"t\":[\"语法: db.集合名称.remove(<query>,{justOne: <boolean>})\",\"参数query:可选，删除的⽂档的条件,不加条件删除所有记录\",\"参数justOne:可选，默认false表示删除多条, true或1则只删除⼀条，\",\"> db.abc.remove({name:'luogang'}) WriteResult({ \\\"nRemoved\\\" : 1 })\"]},\"861\":{\"h\":\"四 数据查询\",\"t\":[\"语法：db.表名.find({'key':'value'})\",\"1、查询所有记录 db.userInfo.find(); 相当于：select* from userInfo; 默认每页显示20条记录，当显示不下的情况下，可以用it迭代命令查询下一页数据。注意：键入it命令不能带“；” 但是你可以设置每页显示数据的大小，用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。 2、查询去掉后的当前聚集集合中的某列的重复数据 db.userInfo.distinct(\\\"name\\\"); 会过滤掉name中的相同数据 相当于：select distict name from userInfo; 3、查询age = 22的记录 db.userInfo.find({\\\"age\\\": 22}); 相当于： select * from userInfo where age = 22; 4、查询age > 22的记录 db.userInfo.find({age: {$gt: 22}}); 相当于：select * from userInfo where age >22; 5、查询age < 22的记录 db.userInfo.find({age: {$lt: 22}}); 相当于：select * from userInfo where age <22; 6、查询age >= 25的记录 db.userInfo.find({age: {$gte: 25}}); 相当于：select * from userInfo where age >= 25; 7、查询age <= 25的记录 db.userInfo.find({age: {$lte: 25}}); 8、查询age >= 23 并且 age <= 26 db.userInfo.find({age: {$gte: 23, $lte: 26}}); 9、查询name中包含 mongo的数据 db.userInfo.find({name: /mongo/}); //相当于%% select * from userInfo where name like ‘%mongo%’; 10、查询name中以mongo开头的 db.userInfo.find({name: /^mongo/}); select * from userInfo where name like ‘mongo%’; 11、查询指定列name、age数据 db.userInfo.find({}, {name: 1, age: 1}); 相当于：select name, age from userInfo; 当然name也可以用true或false,当用ture的情况下河name:1效果一样，如果用false就是排除name，显示name以外的列信息。 12、查询指定列name、age数据, age > 25 db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1}); 相当于：select name, age from userInfo where age >25; 13、按照年龄排序 升序：db.userInfo.find().sort({age: 1}); 降序：db.userInfo.find().sort({age: -1}); 14、查询name = zhangsan, age = 22的数据 db.userInfo.find({name: 'zhangsan', age: 22}); 相当于：select * from userInfo where name = ‘zhangsan’ and age = ‘22’; 15、查询前5条数据 db.userInfo.find().limit(5); 相当于：selecttop 5 * from userInfo; 16、查询10条以后的数据 db.userInfo.find().skip(10); 相当于：select * from userInfo where id not in ( selecttop 10 * from userInfo ); 17、查询在5-10之间的数据 db.userInfo.find().limit(10).skip(5); 可用于分页，limit是pageSize，skip是第几页*pageSize 18、or与 查询 db.userInfo.find({$or: [{age: 22}, {age: 25}]}); 相当于：select * from userInfo where age = 22 or age = 25; 19、查询第一条数据 db.userInfo.findOne(); 相当于：selecttop 1 * from userInfo; db.userInfo.find().limit(1); 20、查询某个结果集的记录条数 db.userInfo.find({age: {$gte: 25}}).count(); 相当于：select count(*) from userInfo where age >= 20; 21、按照某列进行排序 db.userInfo.find({sex: {$exists: true}}).count(); 相当于：select count(sex) from userInfo;\"]},\"862\":{\"h\":\"五 索引相关命令\",\"t\":[\"1、创建索引 db.userInfo.ensureIndex({name: 1}); db.userInfo.ensureIndex({name: 1, ts: -1}); 2、查询当前聚集集合所有索引 db.userInfo.getIndexes(); 3、查看总索引记录大小 db.userInfo.totalIndexSize(); 4、读取当前集合的所有index信息 db.users.reIndex(); 5、删除指定索引 db.users.dropIndex(\\\"name_1\\\"); 6、删除所有索引索引 db.users.dropIndexes();\"]},\"863\":{\"h\":\"附 语句块操作命令\",\"t\":[\"1、简单Hello World print(\\\"Hello World!\\\"); 这种写法调用了print函数，和直接写入\\\"Hello World!\\\"的效果是一样的； 2、将一个对象转换成json tojson(new Object()); tojson(new Object('a')); 3、循环添加数据 > for (var i = 0; i < 30; i++) { ... db.users.save({name: \\\"u_\\\" + i, age: 22 + i, sex: i % 2}); ... }; 这样就循环添加了30条数据，同样也可以省略括号的写法 > for (var i = 0; i < 30; i++) db.users.save({name: \\\"u_\\\" + i, age: 22 + i, sex: i % 2}); 也是可以的，当你用db.users.find()查询的时候，显示多条数据而无法一页显示的情况下，可以用it查看下一页的信息； 4、find 游标查询 >var cursor = db.users.find(); > while (cursor.hasNext()) { printjson(cursor.next()); } 这样就查询所有的users信息，同样可以这样写 var cursor = db.users.find(); while (cursor.hasNext()) { printjson(cursor.next); } 同样可以省略{}号 5、forEach迭代循环 db.users.find().forEach(printjson); forEach中必须传递一个函数来处理每条迭代的数据信息 6、将find游标当数组处理 var cursor = db.users.find(); cursor[4]; 取得下标索引为4的那条数据 既然可以当做数组处理，那么就可以获得它的长度：cursor.length();或者cursor.count(); 那样我们也可以用循环显示数据 for (var i = 0, len = c.length(); i < len; i++) printjson(c[i]); 7、将find游标转换成数组 > var arr = db.users.find().toArray(); > printjson(arr[2]); 用toArray方法将其转换为数组 8、定制我们自己的查询结果 只显示age <= 28的并且只显示age这列数据 db.users.find({age: {$lte: 28}}, {age: 1}).forEach(printjson); db.users.find({age: {$lte: 28}}, {age: true}).forEach(printjson); 排除age的列 db.users.find({age: {$lte: 28}}, {age: false}).forEach(printjson); 9、forEach传递函数显示信息 db.things.find({x:4}).forEach(function(x) {print(tojson(x));});\"]},\"864\":{\"h\":\"06、添加管理员账号\"},\"865\":{\"h\":\"一、创建管理员账号\"},\"866\":{\"h\":\"1.以系统管理员的身份运行powershell (在cmd也可以操作)\"},\"867\":{\"h\":\"2.连接数据库\",\"t\":[\"mongosh --host 127.0.0.1 --port 27017\"]},\"868\":{\"h\":\"3.查看数据库\",\"t\":[\"show dbs\"]},\"869\":{\"h\":\"4.切换到admin数据库\",\"t\":[\"use admin\"]},\"870\":{\"h\":\"5.创建超级管理员账户\",\"t\":[\"如果已经分配过了，想删除\",\"db.dropUser(\\\"usename\\\")\",\"新创一个管理员账号：\",\"db.createUser({user:\\\"root\\\",pwd:\\\"mkxiaoer\\\",roles:[{role:\\\"userAdminAnyDatabase\\\",db:\\\"admin\\\"}]})\"]},\"871\":{\"h\":\"06\\\\修改配置文件C:\\\\MongoDB\\\\bin\\\\mongod.cfg(可以不操作)\",\"t\":[\"#增加开启权限配置 security: authorization: enabled\"]},\"872\":{\"h\":\"07、重启mongodb服务\",\"t\":[\"通过mongodb shell连接mongodb\",\"切换到admin数据库，则可用管理员账号登录\",\"注意：必须要先切换到对应的数据库，才能登录对应的账号\"]},\"873\":{\"h\":\"二、创建普通账号\",\"t\":[\"通过管理员账号登录后 切换到自己对应的业务数据库，比如exa\",\"use exa\",\"创建普通账号\",\"db.createUser({user:\\\"exa\\\",pwd:\\\"123456\\\",roles:[{role:\\\"readWrite\\\",db:\\\"exa\\\"}]})\",\"可通过以下命令查看所有用户\",\"db.getUsers()\",\"在mongodb shell用普通账号登录也要先切换到对应数据库\",\"use exa db.auth('exa','123456')\"]},\"874\":{\"h\":\"06、客户端工具\",\"t\":[\"MongoDB数据库默认的管理工具是（CLI）Shell命令行，对于专业的DBA来说比较容易上手，但是对于普通人员GUI可视化工具更方便使用。我们就来介绍13个好用的MongoDB可视化工具。\"]},\"875\":{\"h\":\"\",\"t\":[\"Robo 3T前身是Robomongo。支持Windows，MacOS和Linux系统。Robo 3T 1.3为您提供了对MongoDB 4.0和SCRAM-SHA-256（升级的mongo shell）的支持，支持从MongoDB SRV连接字符串导入，以及许多其他修复和改进。大家也可以找到之前的Robomongo，完全免费的版本使用。\"]},\"876\":{\"h\":\"\",\"t\":[\"Navicat是一种收费数据库管理工具，大家应该使用过Navicat For MySQL版本，比较好用。\",\"Navicat 支持连接所有流行的数据库系统（如MySQL，MariaDB，MongoDB，SQL Server，SQLite，Oracle和PostgreSQL）的功能。关注公众号互联网架构师，回复2T，获取最新架构师视频。\",\"下载地址：https://www.navicat.com/en/products/navicat-for-mongodb 它提供14天的免费试用版，长期使用建议购买序列号。\"]},\"877\":{\"h\":\"\",\"t\":[\"MongoDB Compass也有社区版， 可以编写查询命令，也可以监视服务器的负载，它提供了数据库操作的实时统计信息。适用于Linux，Mac或Windows。中国大陆安装MongoDB数据库，可以选择安装Compass，但是容易卡死，原因是从美国服务器在线安装。可以手动下载在离线安装。\"]},\"878\":{\"h\":\"07、Go整合mongodb\",\"t\":[\"1: 创建一个项目工程\",\"2：下载mongodb的组件\",\"https://www.mongodb.com/docs/drivers/go/current/usage-examples/insertOne/\",\"go get go.mongodb.org/mongo-driver/mongo\",\"依赖安装\",\"go get github.com/joho/godotenv\"]},\"879\":{\"h\":\"08、mongodb-保存\"},\"880\":{\"h\":\"01、单数据保存\",\"t\":[\"1: 定义一个结构体\",\"type Restaurant struct { Name string RestaurantId string `bson:\\\"restaurant_id,omitempty\\\"` Cuisine string `bson:\\\"cuisine,omitempty\\\"` Address interface{} `bson:\\\"address,omitempty\\\"` Borough string `bson:\\\"borough,omitempty\\\"` Grades []interface{} `bson:\\\"grades,omitempty\\\"` }\"]},\"881\":{\"h\":\"02、批量保存\",\"t\":[\"2: 添加数据\",\"// 保存方法 func (resp *RestaurantResponsitory) SaveData() string { // 1: 获取集合操作对象 collection := global.MongoDb.Collection(\\\"restaurant\\\") // 2: 准备结构体的数据 newRestaurant := model.Restaurant{Name: \\\"8282\\\", Cuisine: \\\"Korean\\\"} // 3： 调用mongodb组件库中InsertOne方法来完成数据保存 one, err := collection.InsertOne(context.TODO(), newRestaurant) if err != nil { fmt.Println(\\\"保存数据失败\\\", err.Error()) return \\\"\\\" } // 返回一个数据的唯一标识objectId return one.InsertedID.(primitive.ObjectID).Hex() }\",\"3: 批量添加\",\" // 保存方法 func (resp *RestaurantResponsitory) SaveDataMany() []string { // 1: 获取集合操作对象 collection := global.MongoDb.Collection(\\\"restaurant\\\") // 2: 准备结构体的数据 newRestaurant := []interface{}{ model.Restaurant{Cuisine: \\\"feige\\\"}, model.Restaurant{Name: \\\"8281\\\", Cuisine: \\\"kuangshen\\\"}, model.Restaurant{Name: \\\"8282\\\", Cuisine: \\\"xiaoming\\\"}, model.Restaurant{Name: \\\"8283\\\", Cuisine: \\\"Korean\\\"}, } // 3： 调用mongodb组件库中InsertOne方法来完成数据保存 many, err := collection.InsertMany(context.TODO(), newRestaurant) if err != nil { fmt.Println(\\\"保存数据失败\\\", err.Error()) return nil } // 返回一个数据的唯一标识objectId ObjectIds := []string{} for _, data := range many.InsertedIDs { ObjectIds = append(ObjectIds, data.(primitive.ObjectID).Hex()) } return ObjectIds }\"]},\"882\":{\"h\":\"09、mongodb-修改\",\"t\":[\"1: 单个更新\",\" // 根据id修改数据 func (resp *RestaurantResponsitory) UpdateByID(id string, field string, val string) int64 { // 1: 获取集合操作对象 collection := global.MongoDb.Collection(\\\"restaurant\\\") // 2: 把字符串的id转换成objectId _id, _ := primitive.ObjectIDFromHex(id) // 3: 修改 filter := bson.D{{\\\"_id\\\", _id}} // 4: 更新内容 update := bson.D{{\\\"$set\\\", bson.D{{field, val}}}} // 5: 执行更新UpdateOne one, err := collection.UpdateOne(context.TODO(), filter, update) if err != nil { fmt.Println(\\\"保存数据失败\\\", err.Error()) return -1 } // 返回一个数据的唯一标识objectId return one.MatchedCount }\",\"2: 条件更新\",\"// 条件修改 func (resp *RestaurantResponsitory) UpdateMany(field string, val string) int64 { // 1: 获取集合操作对象 collection := global.MongoDb.Collection(\\\"restaurant\\\") // 2: 修改 where := bson.D{{\\\"cuisine\\\", \\\"Korean\\\"}} // 3: 更新内容 update := bson.D{{\\\"$set\\\", bson.D{{field, val}}}} // 4: 执行更新UpdateMany one, err := collection.UpdateMany(context.TODO(), where, update) if err != nil { fmt.Println(\\\"保存数据失败\\\", err.Error()) return -1 } // 返回一个数据的唯一标识objectId return one.MatchedCount }\"]},\"883\":{\"h\":\"10、mongodb-删除\",\"t\":[\"1: 单个删除\",\" // 根据id删除数据 func (resp *RestaurantResponsitory) DeleteById(id string) int64 { // 1: 获取集合操作对象 collection := global.MongoDb.Collection(\\\"restaurant\\\") // 2: 把字符串的id转换成objectId _id, _ := primitive.ObjectIDFromHex(id) // 3: 修改 filter := bson.D{{\\\"_id\\\", _id}} // 4: 执行更新UpdateOne one, err := collection.DeleteOne(context.TODO(), filter) if err != nil { fmt.Println(\\\"保存数据失败\\\", err.Error()) return -1 } // 返回一个数据的唯一标识objectId return one.DeletedCount }\",\"2: 条件删除\",\" // 根据id删除数据 func (resp *RestaurantResponsitory) DeleteMany(val string) int64 { // 1: 获取集合操作对象 collection := global.MongoDb.Collection(\\\"restaurant\\\") // 3: 修改 filter := bson.D{{\\\"cuisine\\\", val}} // 4: 执行更新UpdateOne one, err := collection.DeleteMany(context.TODO(), filter) if err != nil { fmt.Println(\\\"保存数据失败\\\", err.Error()) return -1 } // 返回一个数据的唯一标识objectId return one.DeletedCount }\"]},\"884\":{\"h\":\"11、mongodb-查询\",\"t\":[\"1：查看单个\",\"func (resp *RestaurantResponsitory) GetByID(id string) *model.Restaurant { // 1: 获取集合操作对象 collection := global.MongoDb.Collection(\\\"restaurant\\\") // 2: 把字符串的id转换成objectId _id, _ := primitive.ObjectIDFromHex(id) filter := bson.D{{\\\"_id\\\", _id}} var result model.Restaurant // 查询 err := collection.FindOne(context.TODO(), filter).Decode(&result) if err != nil { fmt.Println(\\\"查询出错了\\\") return nil } // 返回数据结构体 return &result }\",\"2：查看多个\",\"// 条件查询 func (resp *RestaurantResponsitory) FindMany(val string) *[]model.Restaurant { // 1: 获取集合操作对象 collection := global.MongoDb.Collection(\\\"restaurant\\\") // 2: 把字符串的id转换成objectId filter := bson.D{{\\\"cuisine\\\", val}} var result []model.Restaurant // 查询 cursor, err := collection.Find(context.TODO(), filter) if err != nil { fmt.Println(\\\"查询出错了\\\") return nil } // 把所有查询出来的数据注入到结构体中 cursor.All(context.TODO(), &result) // 返回数据结构体 return &result }\",\"3：求count\",\" // 统计count func (resp *RestaurantResponsitory) CountData(val string) int64 { // 1: 获取集合操作对象 collection := global.MongoDb.Collection(\\\"restaurant\\\") filter := bson.D{{\\\"cuisine\\\", val}} // 查询 count, err := collection.CountDocuments(context.TODO(), filter) if err != nil { fmt.Println(\\\"查询出错了\\\") return 0 } // 把所有查询出来的数据注入到结构体中 // 返回数据结构体 return count }\",\"整体的测试\",\"package main import ( \\\"fmt\\\" \\\"gomongodbpro/initilzation\\\" \\\"gomongodbpro/respository\\\" ) func main() { // 初始化mongodb initilzation.InitMongodb() responsitory := respository.RestaurantResponsitory{} // 开始测试保存 //objectId := responsitory.SaveData() //fmt.Println(objectId) // 批量保存 //objectIds := responsitory.SaveDataMany() //fmt.Println(objectIds) // 根据id更新 //objectIds1 := responsitory.UpdateByID(\\\"6505bb90bc443128143945c5\\\", \\\"address\\\", \\\"chagnsah\\\") //objectIds2 := responsitory.UpdateByID(\\\"6505bb90bc443128143945c5\\\", \\\"restaurant_id\\\", \\\"100\\\") //objectIds3 := responsitory.UpdateByID(\\\"6505bb90bc443128143945c5\\\", \\\"borough\\\", \\\"haochi\\\") //objectIds4 := responsitory.UpdateByID(\\\"6505bb90bc443128143945c5\\\", \\\"grades\\\", \\\"98\\\") //fmt.Println(objectIds1) //fmt.Println(objectIds2) //fmt.Println(objectIds3) //fmt.Println(objectIds4) // 批量更新 //many := responsitory.UpdateMany(\\\"grades\\\", \\\"1000\\\") //many2 := responsitory.UpdateMany(\\\"address\\\", \\\"长沙\\\") //fmt.Println(many) //fmt.Println(many2) //根据id删除 //count1 := responsitory.DeleteById(\\\"6505bfc20adf16425ff4d762\\\") //count2 := responsitory.DeleteById(\\\"6505bfc20adf16425ff4d763\\\") //fmt.Println(count1) //fmt.Println(count2) //根据条件删除 //count1 := responsitory.DeleteMany(\\\"Korean\\\") //fmt.Println(count1) // 根据id查询数据 //restaurantResponsitory := responsitory.GetByID(\\\"6505bfc20adf16425ff4d764\\\") //fmt.Println(restaurantResponsitory.ID.Hex()) // 查询多个 //restaurants := responsitory.FindMany(\\\"Korean\\\") //fmt.Println(restaurants) // 求总数 countData := responsitory.CountData(\\\"Korean\\\") fmt.Println(countData) }\"]},\"885\":{\"h\":\"12、关于高级查询中会使用的操作符\",\"t\":[\"https://www.mongodb.com/docs/manual/reference/operator/query/\"]},\"886\":{\"h\":\"13、聚合查询\",\"t\":[\"https://www.mongodb.com/docs/drivers/go/current/fundamentals/aggregation/\"]},\"887\":{\"h\":\"14、小结\",\"t\":[\"MongoDB是一个基于分布式文件存储 [1] 的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。\",\"MongoDB是一个基于文档的数据库，其中文档是指一组键值（JSON）对（类似于关系型数据库中的一行记录），其中值可以是字符串、整数、数组、嵌套文档等各种数据类型。MongoDB中的文档可以是动态的，即不需要提前定义文档的结构。MongoDB将文档组织为集合（类似于关系型数据库中的表），集合中的文档可以根据需要进行添加、删除、更新和查询等操作。\"]},\"888\":{\"c\":[\"db\"]},\"889\":{\"h\":\"MySQL-Go\",\"t\":[\"Mysql是当下最流行的开源关系型数据库，具体的sql知识这里不会做过多的赘述，如果你不会请先自行学习，本文只是简单讲解如何利用go进行sql操作。在项目中的话一般不会直接使用驱动来进行数据库操作，而是会使用ORM框架，这里使用的是sqlx库，是对标准sql库的增强，没有ORM功能那么丰富但是胜在简洁。如果你想使用ORM，可以去了解Gorm，Xorm，Ent这些库。\"]},\"890\":{\"h\":\"依赖\",\"t\":[\"下载sqlx库\",\"$ go get github.com/jmoiron/sqlx\",\"sqlx或者说标准库database/sql支持的数据库不止MySQL，任何实现了driver.Driver接口的类型都支持，比如：\",\"PostgreSQL\",\"Oracle\",\"MariaDB\",\"SQLite\",\"等其他关系数据库\",\"要使用对应的数据库，就需要实现数据库驱动，驱动可以是你自己写的，也可以是第三方库，在使用之前你就要先使用sql.Register注册驱动，然后才能使用。不过一般下载的驱动库都会自动注册驱动，不需要你来手动注册。\",\"func Register(name string, driver driver.Driver)\",\"由于MySQL比较流行，也最为简单，所以本文采用MySQL来讲解，其他关系数据库操作起来都是大差不大差的，下载MySQL驱动库\",\"$ go get github.com/go-sql-driver/mysql\"]},\"891\":{\"h\":\"连接到数据库\",\"t\":[\"通过sqlx.Open函数，就可以打开一个数据库连接，它接受两个参数，第一个是驱动名称，第二个就是数据源（一般简称DSN）。\",\"func Open(driverName, dataSourceName string) (*DB, error)\",\"驱动名称就是注册驱动时使用的名称，需要保持一致，DSN就是数据库的连接地址，每种数据库都可能会不一样，对于MySQL而言就是下面这样\",\"db,err := sqlx.Open(\\\"mysql\\\",\\\"root:123456@tcp(127.0.0.1:3306)/test\\\")\"]},\"892\":{\"h\":\"准备数据\",\"t\":[\"SET NAMES utf8mb4; SET FOREIGN_KEY_CHECKS = 0; -- ---------------------------- -- Table structure for user -- ---------------------------- DROP TABLE IF EXISTS `user`; CREATE TABLE `user` ( `id` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL, `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL, `age` tinyint(0) NULL DEFAULT NULL, `address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_bin ROW_FORMAT = Dynamic; -- ---------------------------- -- Records of user -- ---------------------------- INSERT INTO `user` VALUES ('12132', '张三', 35, '北京市'); INSERT INTO `user` VALUES ('16162', '王五', 22, '上海市'); SET FOREIGN_KEY_CHECKS = 1;\"]},\"893\":{\"h\":\"查询\",\"t\":[\"查询，并将结果映射到结构体中\",\"var db *sqlx.DB type Person struct { UserId string `db:\\\"id\\\"` Username string `db:\\\"name\\\"` Age int `db:\\\"age\\\"` Address string `db:\\\"address\\\"` } func init() { conn, err := sqlx.Open(\\\"mysql\\\", \\\"root:wyh246859@tcp(127.0.0.1:3306)/test\\\") if err != nil { fmt.Println(\\\"Open mysql failed\\\", err) return } db = conn } func main() { query() defer db.Close() } func query() { var person Person //查询一个是Get，多个是Select err := db.Get(&person, \\\"select * from user where id = ?\\\", \\\"12132\\\") if err != nil { fmt.Println(\\\"query failed:\\\", err) return } fmt.Printf(\\\"query succ:%+v\\\", person) } func list() { var perons []Person err := db.Select(&perons, \\\"select * from user\\\") if err != nil { fmt.Println(\\\"list err\\\", err) return } fmt.Printf(\\\"list succ,%+v\\\", perons) }\"]},\"894\":{\"h\":\"新增\",\"t\":[\"新增数据\",\"func insert() { result, err := db.Exec(\\\"insert into user value (?,?,?,?)\\\", \\\"120230\\\", \\\"李四\\\", 12, \\\"广州市\\\") if err != nil { fmt.Println(\\\"insert err:\\\", err) return } id, err := result.LastInsertId() if err != nil { fmt.Println(\\\"insert err:\\\", err) return } fmt.Println(\\\"insert succ:\\\", id) }\"]},\"895\":{\"h\":\"更新\",\"t\":[\"更新数据\",\"func update() { res, err := db.Exec(\\\"update user set name = ? where id = ?\\\", \\\"赵六\\\", \\\"120230\\\") if err != nil { fmt.Println(\\\"update err:\\\", err) return } eff, err := res.RowsAffected() if err != nil || eff == 0 { fmt.Println(\\\"update err:\\\", err) return } fmt.Println(\\\"Update succ\\\") }\"]},\"896\":{\"h\":\"删除\",\"t\":[\"删除数据\",\"func delete() { res, err := db.Exec(\\\"delete from user where id = ?\\\", \\\"120230\\\") if err != nil { fmt.Println(\\\"delete err:\\\", err) return } eff, err := res.RowsAffected() if err != nil || eff == 0 { fmt.Println(\\\"delete err:\\\", err) return } fmt.Println(\\\"delete succ\\\") }\"]},\"897\":{\"h\":\"事务\",\"t\":[\"func (db *DB) Begin() (*Tx, error) //开始一个事务 func (tx *Tx) Commit() error //提交一个事务 func (tx *Tx) Rollback() error //回滚一个事务\",\"当开启一个事务后，为了保险都会加一句defer tx.Rollback()，如果如果过程出错了，就会回滚，要是事务成功提交了，这个回滚自然是无效的。\",\"func main() { transation, err := db.Begin() if err != nil { fmt.Println(\\\"transation err\\\") } defer transation.Rollback() insert() query() update() query() delete() transation.Commit() }\"]},\"898\":{\"c\":[\"db\"]},\"899\":{\"h\":\"MySQL-基础\"},\"900\":{\"h\":\"优化\"},\"901\":{\"h\":\"慢查询\",\"t\":[\"问：在一个sql语句我们可以通过执行计划分析出慢查询，若是系统运行起来，怎么查找定位是具体哪个sql出现慢查询？\",\"回答维度：\",\"先说明怎么发现和定位问题（监控、日志分析）\",\"讲解如何分析问题（执行计划、性能分析工具）\",\"最后说明优化方案（从索引、SQL、表结构、配置等多个维度）\",\"补充说明预防（如SQL审核、监控警告等等）\",\"首相要了解只一个sql的过程\",\"服务会与MySQL建立一个链接\"]},\"902\":{\"c\":[\"db\"]},\"903\":{\"h\":\"数据库\",\"t\":[\"提示\",\"数据库模块：每个数据库将概念和go实际使用两个模块，另外有高级使用再另写一个文件\"]},\"904\":{\"h\":\"关系型数据库\",\"t\":[\"关系数据库（RDBMS）特点：\",\"结构化数据: 数据以表格形式存储，每个表有固定的列和行，数据之间通过外键关联。\",\"ACID属性: 支持原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），确保事务的完整性和数据的准确性。\",\"SQL支持: 使用结构化查询语言（SQL）进行数据操作和查询，学习曲线相对平缓。\",\"Schema固定: 表的结构一旦确定，修改比较困难。\",\"适合复杂查询: 对于复杂的多表联接、子查询等操作表现优秀。\",\"数据一致性强: 适合需要严格数据完整性和事务处理的应用场景。\",\"扩展性: 传统上扩展性不如NoSQL，但在现代通过分片（sharding）等技术也可以实现水平扩展。\"]},\"905\":{\"h\":\"目录\",\"t\":[\"MySQL ：开源，广泛用于Web应用\",\"SQLite: 轻量级的嵌入式数据库，适合移动和小型应用\",\"PostgreSQL: 开源，功能丰富，支持复杂查询\"]},\"906\":{\"h\":\"非关系型数据库\",\"t\":[\"非关系数据库（NoSQL）特点：\",\"灵活的数据模型: 支持多种数据类型（键值对、文档、宽列、图等），允许更灵活的数据存储。\",\"高扩展性: 设计上更适合分布式系统，容易水平扩展（添加更多节点来处理更多数据）。\",\"BASE原则: 强调基本可用性（Basically Available）、软状态（Soft state）和最终一致性（Eventual consistency），这意味着在某些情况下可以牺牲一些数据一致性以换取更高的可用性和性能。\",\"没有固定的Schema: 允许数据结构的变化和扩展，适用于处理动态或半结构化数据。\",\"高性能读写: 特别是在处理大量数据时，NoSQL数据库在读写性能上可能优于RDBMS。\",\"多种查询语言: 虽然有些NoSQL数据库支持SQL，但更多的是使用特定的查询语言或API。\",\"适合大数据应用: 像日志分析、内容管理、实时大数据处理等场景。\"]},\"907\":{\"h\":\"目录\",\"t\":[\"Redis: 内存中的数据结构存储系统，常用于缓存和实时分析\",\"MongoDB: 文档型NoSQL数据库，灵活的数据模型，适合处理大量非结构化数据\",\"Elasticsearch: 搜索和分析引擎，基于Lucene，擅长全文搜索、日志分析。\",\"Neo4j: 图数据库，擅长处理复杂关系数据\"]},\"908\":{\"h\":\"Redis - Go\",\"t\":[\"Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API，Redis即可以当作一个NoSQL数据库，又可以是当作高速缓存存储，还支持简单的消息队列。\",\"本文仅仅讲解如何使用Go语言驱动来操作Redis数据库，不会对Redis本身做任何讲解。\",\"官方文档：Golang Redis client (uptrace.dev)\",\"官方仓库：go-redis/redis: Type-safe Redis client for Golang (github.com)\"]},\"909\":{\"h\":\"安装\",\"t\":[\"关于Redis的驱动有很多，本文使用的是github.com/go-redis/redis（Star：20.3K，相比至下其他都在10k之下）。\",\"如果你使用的Redis版本号为6\",\"go get github.com/go-redis/redis/v8\",\"如果你使用的Redis版本号为7\",\"go get github.com/go-redis/redis/v9\"]},\"910\":{\"h\":\"快速开始\",\"t\":[\"import ( \\\"fmt\\\" \\\"log\\\" \\\"testing\\\" \\\"github.com/go-redis/redis\\\" ) func TestQuickStart(t *testing.T) { // 创建Redis连接客户端 redisClient := redis.NewClient(&redis.Options{ Addr: \\\"192.168.48.134:6379\\\", Password: \\\"123456\\\", DB: 0, // 使用默认DB }) // 设置键值对，0就是永不过期 redisClient.Set(\\\"hello\\\", \\\"world\\\", 0) // 读取值 result, err := redisClient.Get(\\\"hello\\\").Result() if err == redis.Nil { fmt.Println(\\\"ket not exist\\\") } else if err != nil { log.Panic(err) } fmt.Println(result) }\"]},\"911\":{\"h\":\"连接配置\",\"t\":[\"type Options struct { // 网络类型 tcp 或者 unix. // 默认是 tcp. Network string // redis地址，格式 host:port Addr string // Dialer 创建一个新的网络连接且比Network和Addr有着更高的优先级 // Network and Addr options. Dialer func() (net.Conn, error) // 新建一个redis连接的时候，会回调这个函数 OnConnect func(*Conn) error // redis密码，redis server没有设置可以为空。 Password string // redis数据库，序号从0开始，默认是0，可以不用设置 DB int // redis操作失败最大重试次数，默认0。 MaxRetries int // 最小重试时间间隔. // 默认是 8ms ; -1 表示关闭. MinRetryBackoff time.Duration // 最大重试时间间隔 // 默认是 512ms; -1 表示关闭. MaxRetryBackoff time.Duration // redis新连接超时时间. // 默认是 5 秒. DialTimeout time.Duration // socket读取超时时间 // 默认 3 秒. ReadTimeout time.Duration // socket写超时时间 WriteTimeout time.Duration // redis连接池的最大连接数. // 默认连接池大小等于 cpu个数 * 10 PoolSize int // redis连接池最小空闲连接数. MinIdleConns int // redis连接最大的存活时间，默认不会关闭过时的连接. MaxConnAge time.Duration // 当你从redis连接池获取一个连接之后，连接池最多等待这个拿出去的连接多长时间。 // 默认是等待 ReadTimeout + 1 秒. PoolTimeout time.Duration // redis连接池多久会关闭一个空闲连接. // 默认是 5 分钟. -1 则表示关闭这个配置项 IdleTimeout time.Duration // 多长时间检测一下，空闲连接 // 默认是 1 分钟. -1 表示关闭空闲连接检测 IdleCheckFrequency time.Duration // 只读设置，如果设置为true， 在当前节点实例上，redis只能查询缓存不能更新。 readOnly bool // TLS配置 TLSConfig *tls.Config }\"]},\"912\":{\"h\":\"建立连接\",\"t\":[\"// 创建Redis连接客户端 redisClient := redis.NewClient(&redis.Options{ Addr: \\\"192.168.48.134:6379\\\", Password: \\\"123456\\\", DB: 0, // 使用默认DB })\"]},\"913\":{\"h\":\"关闭连接\",\"t\":[\"驱动内部维护着一个连接池，不需要操作一次就关闭一次连接。\",\"defer redisClient.Close()\",\"这个Redis驱动几乎将所有的操作封装好了，Redis命令和方法名一一对应，基本上只要知道Redis命令怎么用，驱动对应的方法都也差不多会了。\",\"Redis命令：redis 命令手册\"]},\"914\":{\"h\":\"基本操作\"},\"915\":{\"h\":\"删除键\",\"t\":[\"redisClient.Set(\\\"name\\\", \\\"jack\\\", 0) fmt.Println(redisClient.Del(\\\"name\\\").Result())\"]},\"916\":{\"h\":\"过期时间\",\"t\":[\"redisClient.Set(\\\"name\\\", \\\"jack\\\", 0) // 设置过期时间 redisClient.Expire(\\\"name\\\", time.Second*2) fmt.Println(redisClient.Get(\\\"name\\\").Val()) time.Sleep(time.Second * 3) fmt.Println(redisClient.Get(\\\"name\\\").Val())\"]},\"917\":{\"h\":\"取消过期时间\",\"t\":[\"redisClient.Set(\\\"name\\\", \\\"jack\\\", 2) // 取消过期时间 redisClient.Persist(\\\"name\\\") time.Sleep(time.Second * 2) fmt.Println(redisClient.Get(\\\"name\\\"))\"]},\"918\":{\"h\":\"查询过期时间\",\"t\":[\"fmt.Println(redisClient.TTL(\\\"name\\\")) fmt.Println(redisClient.PTTL(\\\"name\\\"))\"]},\"919\":{\"h\":\"重命名\",\"t\":[\"redisClient.Rename(\\\"name\\\", \\\"newName\\\")\"]},\"920\":{\"h\":\"查询类型\",\"t\":[\"redisClient.Type(\\\"name\\\")\"]},\"921\":{\"h\":\"扫描\",\"t\":[\"fmt.Println(redisClient.Scan(0, \\\"\\\", 4))\"]},\"922\":{\"h\":\"字符串\"},\"923\":{\"h\":\"简单存取\",\"t\":[\"redisClient.Set(\\\"token\\\", \\\"abcefghijklmn\\\", 0) fmt.Println(redisClient.Get(\\\"token\\\").Val())\"]},\"924\":{\"h\":\"批量存取\",\"t\":[\"redisClient.MSet(\\\"cookie\\\", \\\"12345\\\", \\\"token\\\", \\\"abcefg\\\") fmt.Println(redisClient.MGet(\\\"cookie\\\", \\\"token\\\").Val())\"]},\"925\":{\"h\":\"数字增减\",\"t\":[\"redisClient.Set(\\\"age\\\", \\\"1\\\", 0) // 自增 redisClient.Incr(\\\"age\\\") fmt.Println(redisClient.Get(\\\"age\\\").Val()) // 自减 redisClient.Decr(\\\"age\\\") fmt.Println(redisClient.Get(\\\"age\\\").Val())\"]},\"926\":{\"h\":\"哈希表\"},\"927\":{\"h\":\"读写操作\",\"t\":[\"// 单个设置 redisClient.HSet(\\\"map\\\", \\\"name\\\", \\\"jack\\\") // 批量设置 redisClient.HMSet(\\\"map\\\", map[string]interface{}{\\\"a\\\": \\\"b\\\", \\\"c\\\": \\\"d\\\", \\\"e\\\": \\\"f\\\"}) // 单个访问 fmt.Println(redisClient.HGet(\\\"map\\\", \\\"a\\\").Val()) // 批量访问 fmt.Println(redisClient.HMGet(\\\"map\\\", \\\"a\\\", \\\"b\\\").Val()) // 获取整个map fmt.Println(redisClient.HGetAll(\\\"map\\\").Val())\",\"输出\",\"b [b <nil>] map[a:b c:d e:f name:jack]\"]},\"928\":{\"h\":\"删除键\",\"t\":[\"// 删除map的一个字段 redisClient.HDel(\\\"map\\\", \\\"a\\\")\"]},\"929\":{\"h\":\"判断键是否存在\",\"t\":[\"// 判断字段是否存在 redisClient.HExists(\\\"map\\\", \\\"a\\\")\"]},\"930\":{\"h\":\"获取所有的键\",\"t\":[\"// 获取所有的map的键 redisClient.HKeys(\\\"map\\\")\"]},\"931\":{\"h\":\"获取哈希表键长度\",\"t\":[\"// 获取map长度 redisClient.HLen(\\\"map\\\")\"]},\"932\":{\"h\":\"遍历哈希表的键值对\",\"t\":[\"// 遍历map中的键值对 redisClient.HScan(\\\"map\\\", 0, \\\"\\\", 1)\"]},\"933\":{\"h\":\"列表\"},\"934\":{\"h\":\"修改元素\",\"t\":[\"// 左边添加 redisClient.LPush(\\\"list\\\", \\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\") // 右边添加 redisClient.RPush(\\\"list\\\", \\\"g\\\", \\\"i\\\", \\\"a\\\") // 在参考值前面插入值 redisClient.LInsertBefore(\\\"list\\\", \\\"a\\\", \\\"aa\\\") // 在参考值后面插入值 redisClient.LInsertAfter(\\\"list\\\", \\\"a\\\", \\\"gg\\\") // 设置指定下标的元素的值 redisClient.LSet(\\\"list\\\", 0, \\\"head\\\")\"]},\"935\":{\"h\":\"访问长度\",\"t\":[\"// 访问列表长度 redisClient.LLen(\\\"list\\\")\"]},\"936\":{\"h\":\"访问元素\",\"t\":[\"// 左边弹出元素 redisClient.LPop(\\\"list\\\") // 右边弹出元素 redisClient.RPop(\\\"list\\\") // 访问指定下标的元素 redisClient.LIndex(\\\"list\\\", 1) // 访问指定范围内的元素 redisClient.LRange(\\\"list\\\", 0, 1)\"]},\"937\":{\"h\":\"删除元素\",\"t\":[\"// 删除指定元素 redisClient.LRem(\\\"list\\\", 0, \\\"a\\\") // 删除指定范围的元素 redisClient.LTrim(\\\"list\\\", 0, 1) // 保留指定范围的元素 redisClient.LTrim(\\\"list\\\", 0, 1)\"]},\"938\":{\"h\":\"集合\"},\"939\":{\"h\":\"新增元素\",\"t\":[\"// 往一个集合里面添加元素 redisClient.SAdd(\\\"set\\\", \\\"a\\\", \\\"b\\\", \\\"c\\\") redisClient.SAdd(\\\"set2\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\")\"]},\"940\":{\"h\":\"访问集合元素\",\"t\":[\"// 获取集合中的所有成员 redisClient.SMembers(\\\"set\\\") // 判断一个元素是否属于这个集合 redisClient.SIsMember(\\\"set\\\", \\\"a\\\") // 随机返回count个元素 redisClient.SRandMemberN(\\\"set\\\", 1) // 获取一个集合的元素个数 redisClient.SCard(\\\"set\\\")\"]},\"941\":{\"h\":\"集合操作\",\"t\":[\"// 返回给定集合的差集 redisClient.SDiff(\\\"set\\\", \\\"set2\\\") // 将给定集合的差集保存在结果集里，返回结果集的长度 redisClient.SDiffStore(\\\"store\\\", \\\"set\\\", \\\"se2\\\") // 返回给定集合的交集 redisClient.SInter(\\\"set\\\", \\\"set2\\\") // 将给定集合的交集保存在结果集里，返回结果集的长度 redisClient.SInterStore(\\\"store\\\", \\\"set\\\", \\\"set2\\\") // 返回给定集合的并集 redisClient.SUnion(\\\"set\\\", \\\"set2\\\") // 将给定集合的并集保存在结果集里，返回结果集的长度 redisClient.SUnionStore(\\\"store\\\", \\\"set\\\", \\\"store\\\")\"]},\"942\":{\"h\":\"删除元素\",\"t\":[\"// 弹出并删除该元素 redisClient.SPop(\\\"set\\\") // 弹出并删除N给元素 redisClient.SPopN(\\\"set\\\", 2)\"]},\"943\":{\"h\":\"移动元素\",\"t\":[\"// 从源集合移动指定元素刀目标集合 redisClient.SMove(\\\"set\\\", \\\"set2\\\", \\\"a\\\")\"]},\"944\":{\"h\":\"删除元素\",\"t\":[\"// 删除指定元素 redisClient.SRem(\\\"set\\\", \\\"a\\\", \\\"b\\\")\"]},\"945\":{\"h\":\"遍历\",\"t\":[\"// 遍历集合 redisClient.SScan(\\\"set\\\", 0, \\\"\\\", 2)\"]},\"946\":{\"h\":\"有序集合\"},\"947\":{\"h\":\"加入元素\",\"t\":[\"// 往有序集合中加入元素 redisClient.ZAdd(\\\"ss\\\", redis.Z{ Score: 1, Member: \\\"a\\\", }, redis.Z{ Score: 2, Member: \\\"b\\\", })\"]},\"948\":{\"h\":\"元素排名\",\"t\":[\"// 返回有序集合中该元素的排名，从低到高排列 redisClient.ZRank(\\\"ss\\\", \\\"1\\\") // 返回有序集合中该元素的排名，从高到低排列 redisClient.ZRevRank(\\\"ss\\\", \\\"1\\\")\"]},\"949\":{\"h\":\"访问元素\",\"t\":[\"// 返回介于min和max之间的成员数量 redisClient.ZCount(\\\"ss\\\", \\\"1\\\", \\\"2\\\") // 返回对元素的权值 redisClient.ZScore(\\\"ss\\\", \\\"a\\\") // 返回指定区间的元素 redisClient.ZRange(\\\"ss\\\", 1, 2) // 返回介于min和max之间的所有成员列表 redisClient.ZRangeByScore(\\\"ss\\\", redis.ZRangeBy{ Min: \\\"1\\\", Max: \\\"2\\\", Offset: 0, Count: 1, })\"]},\"950\":{\"h\":\"修改权值\",\"t\":[\"// 给一个对应的元素增加相应的权值 redisClient.ZIncr(\\\"ss\\\", redis.Z{ Score: 2, Member: \\\"b\\\", })\"]},\"951\":{\"h\":\"删除元素\",\"t\":[\"// 删除指定元素 redisClient.ZRem(\\\"ss\\\", \\\"a\\\") // 删除指定排名区间的元素 redisClient.ZRemRangeByRank(\\\"ss\\\", 1, 2) // 删除权值在min和max区间的元素 redisClient.ZRemRangeByScore(\\\"ss\\\", \\\"1\\\", \\\"2\\\")\"]},\"952\":{\"h\":\"脚本\",\"t\":[\"// 加载脚本，返回sha值 redisClient.ScriptLoad(\\\"return 0\\\") // 根据sha值执行脚本 redisClient.EvalSha(\\\"sha\\\", []string{}, \\\"\\\") // 直接执行脚本 redisClient.Eval(\\\"return 0\\\", []string{}, \\\"\\\") // 清除脚本缓存 redisClient.ScriptFlush() // 杀死当前正在运行的脚本 redisClient.ScriptKill() // 验证对应哈希值的脚本是否存在 redisClient.ScriptExists(\\\"\\\")\"]},\"953\":{\"h\":\"发布订阅\",\"t\":[\"// 发送消息到指定频道 redisClient.Publish(\\\"channel\\\", \\\"message\\\") // 订阅指定频道 redisClient.Subscribe(\\\"channel\\\") // 查看订阅状态 redisClient.PubSubNumSub(\\\"channel\\\")\"]},\"954\":{\"c\":[\"db\"]},\"955\":{\"h\":\"Redis\",\"t\":[\"官方网站：https://redis.io/\",\"中文网站：https://www.redis.net.cn/\"]},\"956\":{\"h\":\"01、Redis 简介\",\"t\":[\"Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。\",\"Redis 特点：\",\"Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。\",\"Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\",\"Redis支持数据的备份，即master-slave模式的数据备份。\"]},\"957\":{\"h\":\"Redis 优势\",\"t\":[\"性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。\",\"丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。\",\"原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。\",\"丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。\"]},\"958\":{\"h\":\"为什么用redis\"},\"959\":{\"h\":\"高性能\",\"t\":[\"单线程简单、无线程开销 使用单线程简单，避免了多线程的竞争；同时还省去了多线程切换带来的时间和性能上的开销。\",\"redis主要基于内存操作内存的执行效率本身就很快，并且redis还采用了高效的数据结构。\",\"在请求上采用I\\\\O多路复用机制多路复用机制是一种基于非阻塞I/O模型，可以使redis高效的进行网络通信，I/O的读写也不再阻塞，就可以处理大量的客户端socket请求。\"]},\"960\":{\"h\":\"高并发\",\"t\":[\"mysql单机一般只能支撑到2000Qps，而redis由于是K/V式的操作，单机可以支撑并发量几万到十几万。\",\"redis分布式集群化扩展性极高，而且稳定，能够支撑大量的数据吞吐，只要硬件支持。\"]},\"961\":{\"h\":\"与传统关系型数据库对比：\",\"t\":[\"redis 的优势比较多，如高性能，高可用，丰富的数据类型、原子性、扩展性比较强、可持久化、生态完善等等，但是比较有决定性的还是高性能和丰富的数据类型支持（string、list、set、sortedset（有序集合）、hash等），\",\"一般一个东西好不好用，多数比较出来的，一般我们项目中引入redis 多数是为了减轻关系型数据库压力的，那就跟关系型数据库来比较，常见的关系型数据库是基于磁盘存储的，数据存取IO较高，\"]},\"962\":{\"h\":\"02、Redis的下载和安装\"},\"963\":{\"h\":\"1.window下安装Redis服务\",\"t\":[\"Github获取redis安装包，地址：Redis\",\"双击点击安装msi格式的安装包，开始进行安装\",\"安装注意：添加redis目录到环境变量方便系统自动识别、使用默认端口、设置最大内存学习就100MB\",\"对Redis进行配置： \",\"编辑器编辑redis.windows-service.conf文件\",\"找到requirepass配置（设置密码），如：输入requirepass 12345。（测试环境可以不用密码）\",\"确保服务正常启动即可\",\"可正常在命令行操作Redis了\",\"输入命令：redis-cli ---（客户端程序） 127.0.0.1:6379> 输入密码回车：auth 12345 返回提示OK表示验证通过 127.0.0.1:6379> auth 12345 Ok\"]},\"964\":{\"h\":\"2.Linux下安装Redis服务\",\"t\":[\"安装编译环境gcc （Redis是C编写的，需要C的环境）\",\"yum install gcc-c++\",\"下载，解压，编译（redis下载地址为：https://redis.io/download/）\",\"$ wget https://github.com/redis/redis/archive/7.0.8.tar.gz $ tar xzf 7.0.8.tar.gz $ cd redis-7.0.8 $ make\",\"二进制文件是编译完成后在src目录下. 运行如下\",\"$ src/redis-server\",\"使用客户端连接服务\",\"# 本地连接 $ src/redis-cli redis> # 远程连接 $ redis-cli -h host -p port -a password\"]},\"965\":{\"h\":\"3.Redis配置文件详解\",\"t\":[\"Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。\",\"你可以通过 CONFIG 命令查看或设置配置项。\",\"参数说明 redis.conf 配置项说明如下： 1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程 daemonize no 2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定 pidfile /var/run/redis.pid 3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字 port 6379 4. 绑定的主机地址 bind 127.0.0.1 5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能 timeout 300 6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose loglevel verbose 7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null logfile stdout 8. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id databases 16 9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合 save <seconds> <changes> Redis默认配置文件中提供了三个条件： save 900 1 900秒（15分钟）内有1个更改， save 300 10 300秒（5分钟）内有10个更改 save 60 10000 60秒内有10000个更改。 10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大 rdbcompression yes 11. 指定本地数据库文件名，默认值为dump.rdb dbfilename dump.rdb 12. 指定本地数据库存放目录 dir ./ 13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步 slaveof <masterip> <masterport> 14. 当master服务设置了密码保护时，slav服务连接master的密码 masterauth <master-password> 15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭 requirepass foobared 16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息 maxclients 128 17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区 maxmemory <bytes> 18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no appendonly no 19. 指定更新日志文件名，默认为appendonly.aof appendfilename appendonly.aof 20. 指定更新日志条件，共有3个可选值： no：表示等操作系统进行数据缓存同步到磁盘（快） always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） everysec：表示每秒同步一次（折衷，默认值） appendfsync everysec 21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制） vm-enabled no 22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享 vm-swap-file /tmp/redis.swap 23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0 vm-max-memory 0 24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值 vm-page-size 32 25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。 vm-pages 134217728 26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4 vm-max-threads 4 27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启 glueoutputbuf yes 28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法 hash-max-zipmap-entries 64 hash-max-zipmap-value 512 29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍） activerehashing yes 30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件 include /path/to/local.conf\"]},\"966\":{\"h\":\"03、关于Redis 命令\"},\"967\":{\"h\":\"a.Key命令\",\"t\":[\"命令文档：https://redis.io/commands/\",\"下表给出了与 Redis 键相关的基本命令：\",\"序号\",\"命令及描述\",\"1\",\"DEL key 该命令用于在 key 存在是删除 key。\",\"2\",\"DUMP key 序列化给定 key ，并返回被序列化的值。\",\"3\",\"EXISTS key 检查给定 key 是否存在。\",\"4\",\"EXPIRE key seconds 为给定 key 设置过期时间。\",\"5\",\"EXPIREAT key timestamp EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。\",\"6\",\"PEXPIRE key milliseconds 设置 key 的过期时间亿以毫秒计。\",\"7\",\"PEXPIREAT key milliseconds-timestamp 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计\",\"8\",\"KEYS pattern 查找所有符合给定模式( pattern)的 key 。\",\"9\",\"MOVE key db 将当前数据库的 key 移动到给定的数据库 db 当中。\",\"10\",\"PERSIST key 移除 key 的过期时间，key 将持久保持。\",\"11\",\"PTTL key 以毫秒为单位返回 key 的剩余的过期时间。\",\"12\",\"TTL key 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。\",\"13\",\"RANDOMKEY 从当前数据库中随机返回一个 key 。\",\"14\",\"RENAME key newkey 修改 key 的名称\",\"15\",\"RENAMENX key newkey 仅当 newkey 不存在时，将 key 改名为 newkey 。\",\"16\",\"TYPE key 返回 key 所储存的值的类型。\",\"1、查看所有的key\",\"keys *\",\"2、删除的key\",\"del key\",\"3、检查给定 key 是否存在\",\"EXISTS key\",\"4、 为给定 key 设置过期时间\",\"EXPIRE key seconds\",\"5、PERSIST 用户删除key的过期时间\",\"PERSIST age\",\"6、将当前数据库的 key 移动到给定的数据库 db 当中。\",\"move key db\",\"7、以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。\",\"ttl key\",\"8、以毫秒为单位返回 key 的剩余的过期时间\",\"PTTL key\",\"9、从当前数据库中随机返回一个 key\",\"RANDOMKEY\",\"10、修改 key 的名称\",\"RENAME key newkey\",\"11、返回 key 所储存的值的类型\",\"TYPE key\",\"12、用于选择数据库，数据库一共0~15\",\"select 1\"]},\"968\":{\"h\":\"b.服务端命令\",\"t\":[\"1、ping，如果服务器运行正常的话，使用ping 返回一个pong\",\"ping\",\"2、QUIT 可以通过命令退出当前Redis的客户端链接\",\"QUIT\",\"3、DBSIZE 查看当前数据库中key的条目，类似于keys\",\"dbsize\",\"4、INFO 用于查看Redis服务器各种信息和统计数值\",\"info\",\"5、CONFIG GET 查看redis服务器的配置信息\",\"# 查看redis安装的位置，如果你想获取所有的redis服务配置的信息使用:config get * config get dir\",\"6、FLUSHDB 用于删除当前选择的数据库所有的key\",\"flush db\",\"7、FLUSHALL 用于删除所有数据库中的key\",\"flushall\"]},\"969\":{\"h\":\"04、数据结构\",\"t\":[\"上面我们说过redis采用了高效的数据结构，Redis支持5种数据类型：string，hash，list，set，zset。\",\"数据类型\"]},\"970\":{\"h\":\"1. 字符串String\",\"t\":[\"表列出了常用的 redis 字符串命令：\",\"序号\",\"命令及描述\",\"--1--\",\"set key value 设置指定 key 的值\",\"--2--\",\"get key 获取指定 key 的值。\",\"3\",\"getrange key start end返回 key 中字符串值的子字符\",\"4\",\"getset key value 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。\",\"--5--\",\"getbit key offset 对 key 所储存的字符串值，获取指定偏移量上的位(bit)。\",\"--6--\",\"mget key1 [key2..] 获取所有(一个或多个)给定 key 的值。\",\"--7--\",\"setbit key offset value对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。\",\"--8--\",\"setex key seconds value将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。\",\"--9--!\",\"setnx key value 只有在 key 不存在时设置 key 的值。\",\"10\",\"setrange key offset value用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。\",\"11\",\"strlen key 返回 key 所储存的字符串值的长度。\",\"12\",\"mset key value key value ... 同时设置一个或多个 key-value 对。\",\"13\",\"msetnx key value [key value ...]同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。\",\"14\",\"psetex key milliseconds value 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。\",\"--15--\",\"incr key 将 key 中储存的数字值增一。\",\"--16--\",\"incrby key increment 将 key 所储存的值加上给定的增量值（increment） 。==\",\"--17--\",\"incrbyfloat key increment 将 key 所储存的值加上给定的浮点增量值（increment） 。\",\"--18--\",\"decr key 将 key 中储存的数字值减一。\",\"--19--\",\"decrby key decrement key 所储存的值减去给定的减量值（decrement） 。\",\"20\",\"append key value 如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。\"]},\"971\":{\"h\":\"2.列表List\",\"t\":[\"序号\",\"命令及描述\",\"1\",\"blpop key1 [key2 ] timeout 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\",\"2\",\"brpop key1 key2 timeout 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\",\"3\",\"brpoplpush source destination timeout 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\",\"4\",\"lindex key index通过索引获取列表中的元素\",\"5\",\"`linsert key before\",\"6\",\"llen key获取列表长度\",\"7\",\"lpop key移出并获取列表的第一个元素\",\"8\",\"lpush key value1 value2将一个或多个值插入到列表头部\",\"9\",\"lpushx key value将一个或多个值插入到已存在的列表头部\",\"10\",\"lrange key start stop获取列表指定范围内的元素\",\"11\",\"lrem key count value 移除列表元素\",\"--12--\",\"lset key index value 通过索引设置列表元素的值\",\"13\",\"ltrim key start stop对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。\",\"14\",\"rpop key移除并获取列表最后一个元素\",\"15\",\"rpoplpush source destination移除列表的最后一个元素，并将该元素添加到另一个列表并返回\",\"16\",\"rpush key value1 value2在列表中添加一个或多个值\",\"17\",\"rpushx key value 为已存在的列表添加值\"]},\"972\":{\"h\":\"3.哈希表hash\",\"t\":[\"序号\",\"命令及描述\",\"1\",\"hdel key field2 field2删除一个或多个哈希表字段\",\"2\",\"hexists key field 查看哈希表 key 中，指定的字段是否存在。\",\"3\",\"hget key field获取存储在哈希表中指定字段的值\",\"4\",\"hgetall key 获取在哈希表中指定 key 的所有字段和值\",\"5\",\"hincrby key field increment 为哈希表 key 中的指定字段的整数值加上增量 increment 。\",\"6\",\"hincrbyfloat key field increment 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。\",\"7\",\"hkeys key获取所有哈希表中的字段\",\"8\",\"hlen key 获取哈希表中字段的数量\",\"9\",\"hmget key field1 field2 获取所有给定字段的值\",\"10\",\"hmset key field1 value1 field2 value2同时将多个 field-value (域-值)对设置到哈希表 key 中。\",\"11\",\"hset key field value 将哈希表 key 中的字段 field 的值设为 value 。\",\"12\",\"hsetnx key field value 只有在字段 field 不存在时，设置哈希表字段的值。\",\"13\",\"hvals key获取哈希表中所有值\",\"--14--\",\"hscan key cursor [MATCH pattern] [COUNT count] 迭代哈希表中的键值对。\"]},\"973\":{\"h\":\"4.集合Set\",\"t\":[\"序号\",\"命令及描述\",\"1\",\"SADD key member1 member2向集合添加一个或多个成员\",\"2\",\"SCARD key 获取集合的成员数\",\"3\",\"SDIFF key1 key2 返回给定所有集合的差集\",\"4\",\"SDIFFSTORE destination key1 key2返回给定所有集合的差集并存储在 destination 中\",\"5\",\"SINTER key1 key2返回给定所有集合的交集\",\"6\",\"SINTERSTORE destination key1 key2 返回给定所有集合的交集并存储在 destination 中\",\"7\",\"SISMEMBER key member判断 member 元素是否是集合 key 的成员\",\"8\",\"SMEMBERS key返回集合中的所有成员\",\"9\",\"SMOVE source destination member将 member 元素从 source 集合移动到 destination 集合\",\"10\",\"SPOP key移除并返回集合中的一个随机元素\",\"11\",\"SRANDMEMBER key count 返回集合中一个或多个随机数\",\"12\",\"SREM key member1 member2移除集合中一个或多个成员\",\"13\",\"SUNION key1 key2返回所有给定集合的并集\",\"14\",\"SUNIONSTORE destination key1 key2所有给定集合的并集存储在 destination 集合中\",\"15\",\"SSCAN key cursor [MATCH pattern] [COUNT count] 迭代集合中的元素\"]},\"974\":{\"h\":\"5.有序集合Zset\",\"t\":[\"序号\",\"命令及描述\",\"1\",\"[ZADD key score1 member1 score2 member2] 向有序集合添加一个或多个成员，或者更新已存在成员的分数\",\"2\",\"ZCARD key 获取有序集合的成员数\",\"3\",\"ZCOUNT key min max 计算在有序集合中指定区间分数的成员数\",\"4\",\"ZINCRBY key increment member 有序集合中对指定成员的分数加上增量 increment\",\"5\",\"[ZINTERSTORE destination numkeys key key ...] 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中\",\"6\",\"ZLEXCOUNT key min max 在有序集合中计算指定字典区间内成员数量\",\"7\",\"[ZRANGE key start stop WITHSCORES] 通过索引区间返回有序集合成指定区间内的成员\",\"8\",\"[ZRANGEBYLEX key min max LIMIT offset count] 通过字典区间返回有序集合的成员\",\"9\",\"[ZRANGEBYSCORE key min max WITHSCORES] [LIMIT] 通过分数返回有序集合指定区间内的成员\",\"10\",\"ZRANK key member 返回有序集合中指定成员的索引\",\"11\",\"[ZREM key member member ...] 移除有序集合中的一个或多个成员\",\"12\",\"ZREMRANGEBYLEX key min max 移除有序集合中给定的字典区间的所有成员\",\"13\",\"ZREMRANGEBYRANK key start stop 移除有序集合中给定的排名区间的所有成员\",\"14\",\"ZREMRANGEBYSCORE key min max 移除有序集合中给定的分数区间的所有成员\",\"15\",\"[ZREVRANGE key start stop WITHSCORES] 返回有序集中指定区间内的成员，通过索引，分数从高到底\",\"16\",\"[ZREVRANGEBYSCORE key max min WITHSCORES] 返回有序集中指定分数区间内的成员，分数从高到低排序\",\"17\",\"ZREVRANK key member 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序\",\"18\",\"ZSCORE key member 返回有序集中，成员的分数值\",\"19\",\"[ZUNIONSTORE destination numkeys key key ...] 计算给定的一个或多个有序集的并集，并存储在新的 key 中\",\"20\",\"[ZSCAN key cursor MATCH pattern] [COUNT count] 迭代有序集合中的元素（包括元素成员和元素分值）\"]},\"975\":{\"h\":\"扩展\"},\"976\":{\"h\":\"Geo地理位置\"},\"977\":{\"h\":\"HyperLoglog技术统计\"},\"978\":{\"h\":\"bloomfilter布隆过滤器\"},\"979\":{\"h\":\"05、Redis持久化\",\"t\":[\"Redis 是一款基于内存的非关系型数据库，它会将数据全部存储在内存中。但是如果 Redis 服务器出现某些意外情况，比如宕机或者断电等，那么内存中的数据就会全部丢失。因此必须有一种机制能够保证 Redis 储存的数据不会因故障而丢失，这就是 Redis 的数据持久化机制。\",\"数据的持久化存储是 Redis 的重要特性之一，它能够将内存中的数据保存到本地磁盘中，实现对数据的持久存储。这样即使在服务器发生故障之后，也能通过本地磁盘对数据进行恢复。\",\"Redis 提供了两种持久化机制：\",\"第一种是 RDB，又称快照（snapshot）模式，（默认使用）将内存数据写入到二进制文件\",\"第二种是 AOF 日志，也就追加模式。将修改命令写入到存储文件\"]},\"980\":{\"h\":\"RDB-快照模式\",\"t\":[\"我们知道 Redis 是单线程的，即一个线程完成客户端的并发读写，若是还要在这个进程执行备份操作（对文件进行IO读写），会严重影响性能。为此解决办法是利用多进程，备份使用子进程进行操作\",\"RDB 实际上是 Redis 内部的一个定时器事件，它每隔一段固定时间就去检查当前数据发生改变的次数和改变的时间频率，看它们是否满足配置文件中规定的持久化触发条件。当满足条件时，Redis 就会通过操作系统调用 fork() 来创建一个子进程，该子进程与父进程享有相同的地址空间。\",\"Redis 通过子进程遍历整个内存空间来获取存储的数据，从而完成数据持久化操作。注意，此时的主进程则仍然可以对外提供服务，父子进程之间通过操作系统的 COW 机制实现了数据段分离，从而保证了父子进程之间互不影响\",\"rdb\",\"也就是说，用一个触发机制来判断是否需要执行备份，然后备份用子进程操作（主进程继续对外提供服务不受影响）\"]},\"981\":{\"h\":\"1.触发策略\",\"t\":[\"RDB 持久化提供了两种触发策略：一种是手动触发，另一种是自动触发\",\"配置文件定义：\",\"# 数据库备份的文件 dbfilename dump.rdb # 默认是：dir ./ 也就是redis安装目录 dir /www/redis-7.0.8/data\",\"注意授权：chmod 777 /data/opt/redis/data\",\"手动触发\",\"手动触发是通过SAVAE命令或者BGSAVE命令将内存数据保存到磁盘文件中。如下所示\",\"127.0.0.1:6379> SAVE OK 127.0.0.1:6379> BGSAVE Background saving started 127.0.0.1:6379> LASTSAVE (integer) 1611298430\",\"上述命令BGSAVE从后台执行数据保存操作，其可用性要优于执行 SAVE 命令\",\"SAVE 命令会阻塞 Redis 服务器进程，直到 dump.rdb 文件创建完毕为止，在这个过程中，服务器不能处理任何的命令请求。\",\"BGSAVE命令是非阻塞式的，所谓非阻塞式，指的是在该命令执行的过程中，并不影响 Redis 服务器处理客户端的其他请求。这是因为 Redis 服务器会 fork() 一个子进程来进行持久化操作（比如创建新的 dunp.rdb 文件），而父进程则继续处理客户端请求。当子进程处理完后会向父进程发送一个信号，通知它已经处理完毕。此时，父进程会用新的 dump.rdb 文件覆盖掉原来的旧文件。\",\"因为SAVE命令无需创建子进程，所以执行速度要略快于BGSAVE命令，但是SAVE命令是阻塞式的，因此其可用性欠佳，如果在数据量较少的情况下，基本上体会不到两个命令的差别，不过仍然建议您使用 BGSAVE命令。\",\"注意：LASTSAVE 命令用于查看 BGSAVE 命令是否执行成功。\",\"自动触发策略\",\"自动触发策略，是指 Redis 在指定的时间内，数据发生了多少次变化时，会自动执行BGSAVE命令。自动触发的条件包含在了 Redis 的配置文件中，如下所示\",\"config\",\"上图所示， save m n 的含义是在时间 m 秒内，如果 Redis 数据至少发生了 n 次变化，那么就自动执行BGSAVE命令。配置策略说明如下：\",\"save 900 1 表示在 900 秒内，至少更新了 1 条数据，Redis 自动触发 BGSAVE 命令，将数据保存到硬盘。\",\"save 300 10 表示在 300 秒内，至少更新了 10 条数据，Redis 自动触 BGSAVE 命令，将数据保存到硬盘。\",\"save 60 10000 表示 60 秒内，至少更新了 10000 条数据，Redis 自动触发 BGSAVE 命令，将数据保存到硬盘。\",\"只要上述三个条件任意满足一个，服务器就会自动执行BGSAVE命令。当然您可以根据实际情况自己调整触发策略。\",\"注意：每次创建 RDB 文件之后，Redis 服务器为实现自动持久化而设置的时间计数和次数计数就会被清零，并重新开始计数，因此多个策略的效果不会叠加。\"]},\"982\":{\"h\":\"2.RDB的错误处理\",\"t\":[\"stop-writes-on-bgsave-error yes\",\"后台存储发送错误时，禁止写入，默认值是yes,默认情况下，redis在后台生成的快照文件时失败，就会停止接收数据，目的是让用户能知道没有持久化功能。\"]},\"983\":{\"h\":\"3.RDB的数据压缩\",\"t\":[\"rdbcompression yes\",\"指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大,不建议关闭。\"]},\"984\":{\"h\":\"AOF-日志模式\",\"t\":[\"AOF 被称为追加模式，或日志模式，是 Redis 提供的另一种持久化策略，它能够存储 Redis 服务器已经执行过的的命令，并且只记录对内存有过修改的命令，这种数据记录方法，被叫做“增量复制”，其默认存储文件为appendonly.aof。\",\"# 过程 Redis客户端/go/java/Python客户端 ：发送写命令———> Redis服务器————> 同步写命令———> AOF文件\",\"该文件存储了服务器执行过的所有修改命令，因此，只要服务器重新执行一次 .aof 文件，就可以实现还原数据的目的\"]},\"985\":{\"h\":\"1.实现机制-写入和重写\",\"t\":[\"写入机制：\",\"收到修改命令就会对其进行校验，没问题就会将命令追加到.aof文件中。这是一个IO操作，为了提高读写效率，会暂时将数据存储在一个内存缓冲区中，写满了才会将内容写入到磁盘。服务挂了，也可以将这个文件的命令全部执行一遍就可恢复以前的样子\",\"重写机制：\",\"Redis 在长期运行的过程中，aof 文件会越变越长。如果机器宕机重启，“重演”整个 aof 文件会非常耗时，导致长时间 Redis 无法对外提供服务。因此就需要对 aof 文件做一下“瘦身”运动。\",\"为了让 aof 文件的大小控制在合理的范围内，Redis 提供了 AOF 重写机制，手动执行BGREWRITEAOF命令，开始重写 aof 文件，如下所示：\",\"127.0.0.1:6379> BGREWRITEAOF Background append only file rewriting started\",\"通过上述操作后，服务器会生成一个新的 aof 文件，该文件具有以下特点：\",\"新的 aof 文件记录的数据库数据和原 aof 文件记录的数据库数据完全一致；\",\"新的 aof 文件会使用尽可能少的命令来记录数据库数据，因此新的 aof 文件的体积会小很多；\",\"AOF 重写期间，服务器不会被阻塞，它可以正常处理客户端发送的命令。\",\"下表对原有 aof 文件和新生成的 aof 文件做了对比，如下所示：\",\"原有aof文件\",\"重写后aof文件\",\"select 0\",\"SELECT 0\",\"sadd myset Jack\",\"SADD myset Jack Helen JJ Lisa\",\"sadd myset Helen\",\"SET msg 'hello tarena'\",\"sadd myset JJ\",\"RPUSH num 4 6 8\",\"sadd myset Lisa\",\"INCR number\",\"INCR number\",\"DEL number\",\"SET message 'www.baidu.com'\",\"SET message 'www.biancheng.net'\",\"RPUSH num 2 4 6\",\"RPUSH num 8\",\"LPOP num\",\"从上表可以看出，新生成的 aof 文件中，它的命令格式做了很大程度的简化。\",\"自动触发重写\",\"Redis 为自动触发 AOF 重写功能，提供了相应的配置策略。如下所示：修改 Redis 配置文件，让服务器自动执行 BGREWRITEAOF 命令。\",\"#默认配置项 auto-aof-rewrite-percentage 100 # 表示aof文件增量的比例来触发，100表示：文件增量大于100%才重写，即大一倍 auto-aof-rewrite-min-size 64mb # 表示触发AOF重写的最小文件体积,大于或等于64MB自动触发。\"]},\"986\":{\"h\":\"2.开启AOF\",\"t\":[\"AOF 机制默认处于未开启状态，可以通过修改 Redis 配置文件开启 AOF，如下所示\",\"# windows系统 #修改配置文件，把no改为 yes appendonly yes #确定存储文件名是否正确 appendfilename \\\"appendonly.aof\\\" #重启服务器 redis-server --service-stop redis-server --service-start #Linux系统 #修改配置文件： vim /etc/redis/redis.conf appendonly yes # 把 no 改为 yes #确定存储文件名是否正确 appendfilename \\\"appendonly.aof\\\" #重启服务： sudo /etc/init.d/redis-server restart\",\"提示：本节建议在您在 Linux 系统上操作 Redis，否则一些 AOF 的性能无法体现。\"]},\"987\":{\"h\":\"3.AOF配置策略\",\"t\":[\"上面介绍了写机制过程中，若是遇到宕机前，缓存内的数据没能及时写入磁盘就会有丢失风险，缓存到内存的修改命令越多，丢失的数据越多。\",\"为了数据的安全考虑，会为AOF提供了策略配置：\",\"aof\",\"策略说明：\",\"Always：服务器每写入一个命令，就调用一次 fsync 函数，将缓冲区里面的命令写入到硬盘，不会丢失任何已经完成的操作的命令数据，但是执行速度慢\",\"Everysec（默认）：服务器每一秒调用一次 fsync 函数，服务故障最多丢失1秒的数据\",\"No：服务器不主动调用 fsync 函数，什么情况写入磁盘由操作系统决定。丢失数量不确定，不安全\",\"注意：Linux 系统的 fsync() 函数可以将指定文件的内容从内核缓存刷到硬盘中，由于是磁盘的IO操作，所以这个很慢，每次都执行很影响性能，若是No策略很不安全不推荐，为此常用的还是1秒执行一次\"]},\"988\":{\"h\":\"AOF和RDB对比\",\"t\":[\"RDB持久化\",\"AOF持久化\",\"全量备份，一次保存整个数据库。\",\"增量备份，一次只保存一个修改数据库的命令。\",\"每次执行持久化操作的间隔时间较长。\",\"保存的间隔默认为一秒钟（Everysec）\",\"数据保存为二进制格式，其还原速度快。\",\"使用文本格式还原数据，所以数据还原速度一般。\",\"执行 SAVE 命令时会阻塞服务器，但手动或者自动触发的 BGSAVE 不会阻塞服务器\",\"AOF持久化无论何时都不会阻塞服务器。\",\"如果进行数据恢复时，既有 dump.rdb文件，又有 appendonly.aof 文件，您应该先通过 appendonly.aof 恢复数据，这能最大程度地保证数据的安全性。\",\"这种工作方式使得Redis可以从copy-on-write机制中获益。(AOF的重写也利用了写时复制)\",\"写时复制 是一种计算机程序设计领域的优化策略。核心思想是，如果有多个调用者同时要求相同资源，他们会共同获取相同的指针指向相同的资源，直到某个调用者试图修改资源的内容时，系统才会真正复制一份专用副本给该调用者，而其他调用者所见到的最初的资源仍然保持不变。这过程对其他的调用者都是透明的。此作法主要的优点是如果调用者没有修改该资源，就不会有副本被创建，因此多个调用者只是读取操作时可以共享同一份资源。\"]},\"989\":{\"h\":\"06、事务\"},\"990\":{\"h\":\"07、Redis主从复制\",\"t\":[\"提示\",\"主从模式是搭建Redis集群最简单的方式！！\",\"缺陷：\",\"1、 不具备自动容错和恢复功能，主挂了要认为干预，而且若是数据没有同步到从也会导致数据不一致\",\"2、只有一个主，写和存储能力受限，数据全量同步若是数据大就会出现卡顿现象\",\"在软件的架构中，主从模式（Master-Slave）是使用较多的一种架构。主（Master）和从（Slave）分别部署在不同的服务器上，当主节点服务器写入数据时，同时也会将数据同步至从节点服务器，通常情况下，主节点负责写入数据，而从节点负责读取数据。\",\"# 查看master/slave的关系 info replcation ##主从关联复制 savelof 主从复制关联 ## 终止复制 saveof no one\",\"Redis的主从特点：\",\"master节点和slave节点若是断开连接，slave可自动重连，连接成功后会同步一次数据\",\"配置好后，master负责写，slave负责读（可配置将持久化操作在slave执行）\",\"master端同步数据是非阻塞的，即master可以处理客户端写操作，也可以同时进行同步数据\",\"主节点的数据的清空，也会清空从slave节点的数据信息.\"]},\"991\":{\"h\":\"好处\",\"t\":[\"避免Redis的单点故障（高可用还是要看哨兵模式来实现）\",\"做到读写分离，构建读写分离架构，满足读多写少的应用场景\"]},\"992\":{\"h\":\"主从模式实现\",\"t\":[\"Redis 提供了两种实现主从模式的方法，下面进行逐一介绍。为了方便演示，我们只从一台机器上搭建主从模式。\"]},\"993\":{\"h\":\"1）命令方式\",\"t\":[\"提示\",\"配置主从还是比较简单的，推荐还是用命令方式构建\",\"命令语法：\",\"redis-server --port <slave-port> --slaveof <master-ip> <master-port> # 参数 --port 设置从节点的端口 --slaveof 指定主节点\",\"# 1.命令启动（启动后就是一个正常提供一个只读的Redis服务了） redis-server --port 6300 --slaveof 127.0.0.1 6379 --masterauth mkxiaoer --requirepass mkxiaoer --daemonize yes # 解释：--masterauth ：连接主节点的密码，主若是设置密码，从需要密码才可连接到主 -requirepass mkxiaoer ： 访问当前redis服务密码 --daemonize：当前Redis服务以守护进程（daemon）模式运行 redis-server --port 63001 # 直接启动一个redis服务这是一个独立的redis服务，可读写 # 2.执行读操作命令 127.0.0.1:6300> get name \\\"jack\\\" #不能执行写命令 127.0.0.1:6300> set myname BangDe (error) READONLY You can't write against a read only slave. # 3.将当前独立的redis服务变成一个从节点：slaveof ip 端口 127.0.0.1:63001> SLAVEOF 127.0.0.1 6379 OK # 4.从改为独立Redis服务：SLAVEOF no one （后续又可继续读写了） 127.0.0.1:63001> SLAVEOF no one OK\",\"设置主从的日志：\",\"[18160] 20 Jan 17:40:34.101 # Server initialized #服务初始化 [18160] 20 Jan 17:40:34.108 * Ready to accept connections #准备连接 [18160] 20 Jan 17:40:34.108 * Connecting to MASTER 127.0.0.1:6379 #连接到主服务器 [18160] 20 Jan 17:40:34.109 * MASTER <-> REPLICA sync started #启动副本同步 [18160] 20 Jan 17:40:34.110 * Non blocking connect for SYNC fired the event.#自动触发SYNC命令，请求同步数据 [18160] 20 Jan 17:40:34.110 * Master replied to PING, replication can continue... [18160] 20 Jan 17:40:34.112 * Partial resynchronization not possible (no cached master) [18160] 20 Jan 17:40:34.431 * Full resync from master: 6eb220706f73107990c2b886dbc2c12a8d0d9d05:0 [18160] 20 Jan 17:40:34.857 * MASTER <-> REPLICA sync: receiving 6916 bytes from master #从主机接受了数据，并将其存在于磁盘 [18160] 20 Jan 17:40:34.874 * MASTER <-> REPLICA sync: Flushing old data #清空原有数据 [18160] 20 Jan 17:40:34.874 * MASTER <-> REPLICA sync: Loading DB in memory #将磁盘中数据载入内存 [18160] 20 Jan 17:40:34.879 * MASTER <-> REPLICA sync: Finished with success #同步数据完成\"]},\"994\":{\"h\":\"2）配置文件方式\",\"t\":[\"配置就比较简单一些，直接为每一个服务创建一个xxx.conf文件然后用命令根据这个文件启动就行\",\"新建文件Redis_6302.conf，并添加配置信息：\",\"slaveof 127.0.0.1 6379 # 指定主节点的ip和端口 port 6302 # 指定从节点的端口\",\"命令行启动Redis服务\",\"$ redis-server redis_6302.conf # 测试 $ redis-cli -p 6302 127.0.0.1:6300> HSET user:username biangcheng #写入失败 (error) READONLY You can't write against a read only slave.\"]},\"995\":{\"h\":\"08、Redis哨兵\",\"t\":[\"提示\",\"高阶版的主从复制，单纯的主从存在不具备自动恢复的功能。服务宕机需要人为干预\",\"Redis 官方推荐一种高可用方案 -- Redis Sentinel 哨兵模式\"]},\"996\":{\"h\":\"原理\",\"t\":[\"Sentinel 通过监控的方式获取主机的工作状态是否正常，当主机发生故障时， Sentinel 会自动进行 Failover（即故障转移），并将其监控的从机提升主服务器（master），从而保证了系统的高可用性。\",\"哨兵模式是一种特殊的模式，Redis 为其提供了专属的哨兵命令，它是一个独立的进程，能够独立运行\",\"哨兵两个重要的作用：\",\"哨兵节点每秒会发生ping命令，通过回复判断运行状态\",\"检查到主服务故障时，自动选择一个从节点升级为主服务。使用PubSub 发布订阅模式，通知其他节点修改配文件，跟随新的主服务\",\"在实际生产情况中，Redis Sentinel 是集群的高可用的保障，为避免 Sentinel 发生意外，它一般是由 3～5 个节点组成，这样就算挂了个别节点，该集群仍然可以正常运转。其结构图如下所示：\",\"多哨兵模式\",\"上图所示，多个哨兵之间也存在互相监控，这就形成了多哨兵模式，现在对该模式的工作过程进行讲解，介绍如下：\"]},\"997\":{\"h\":\"1) 主观下线\",\"t\":[\"主观下线，适用于主服务器和从服务器。如果在规定的时间内(配置参数：down-after-milliseconds)，Sentinel 节点没有收到目标服务器的有效回复，则判定该服务器为“主观下线”。比如 Sentinel1 向主服务发送了PING命令，在规定时间内没收到主服务器PONG回复，则 Sentinel1 判定主服务器为“主观下线”。\"]},\"998\":{\"h\":\"2) 客观下线\",\"t\":[\"客观下线，只适用于主服务器。 Sentinel1 发现主服务器出现了故障，它会通过相应的命令，询问其它 Sentinel 节点对主服务器的状态判断。如果超过半数以上的 Sentinel 节点认为主服务器 down 掉，则 Sentinel1 节点判定主服务为“客观下线”。\"]},\"999\":{\"h\":\"3) 投票选举\",\"t\":[\"投票选举，所有 Sentinel 节点会通过投票机制，按照谁发现谁去处理的原则，选举 Sentinel1 为领头节点去做 Failover（故障转移）操作。Sentinel1 节点则按照一定的规则在所有从节点中选择一个最优的作为主服务器，然后通过发布订功能通知其余的从节点（slave）更改配置文件，跟随新上任的主服务器（master）。至此就完成了主从切换的操作。\",\"对上对述过程做简单总结：\",\"Sentinel 负责监控主从节点的“健康”状态。当主节点挂掉时，自动选择一个最优的从节点切换为主节点。客户端来连接 Redis 集群时，会首先连接 Sentinel，通过 Sentinel 来查询主节点的地址，然后再去连接主节点进行数据交互。当主节点发生故障时，客户端会重新向 Sentinel 要地址，Sentinel 会将最新的主节点地址告诉客户端。因此应用程序无需重启即可自动完成主从节点切换。\"]},\"1000\":{\"h\":\"哨兵的配置和使用\",\"t\":[\"哨兵Sentinel的使用：配置对应的Sentinel.conf文件，然后redis-sentinel或者redis-server命令去启动即可\",\"下面对 Sentinel 配置文件的其他配置项做简单说明：\",\"配置项\",\"参数类型\",\"说明\",\"dir\",\"文件目录\",\"哨兵进程服务的文件存放目录，默认为 /tmp。\",\"port\",\"端口号\",\"启动哨兵的进程端口号，默认为 26379。\",\"sentinel down-after-milliseconds\",\"<服务名称><毫秒数(整数)>\",\"在指定的毫秒数内，若主节点没有应答哨兵的 PING 命令，此时哨兵认为服务器主观下线，默认时间为 30 秒。\",\"sentinel parallel-syncs\",\"<服务名称><服务器数(整数)>\",\"指定可以有多少个 Redis 服务同步新的主机，一般而言，这个数字越小同步时间越长，而越大，则对网络资源要求就越高。\",\"sentinel failover-timeout\",\"<服务名称><毫秒数(整数)>\",\"指定故障转移允许的毫秒数，若超过这个时间，就认为故障转移执行失败，默认为 3 分钟。\",\"sentinel notification-script\",\"<服务名称><脚本路径>\",\"脚本通知，配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。\",\"sentinel auth-pass < master-name> < password>\",\"<服务器名称><密码>\",\"若主服务器设置了密码，则哨兵必须也配置密码，否则哨兵无法对主从服务器进行监控。该密码与主服务器密码相同。\",\"sentinel monitor < master-name> < ip> < redis-port> < quorum>\",\"<服务器名称>< ip><服务端口><判定人数>\",\"让sentinel 监听主服务，quorum是多少个sentinel监听到宕机才判定为宕机进行故障转移（数量根据sentinel 数量设置：一般是sentinel 数/2 + 1）\"]},\"1001\":{\"h\":\"哨兵模式应用\",\"t\":[\"Redis Sentinel 哨兵模式适合于在 Linux 系统中使用，所以下面的应用都基于 centos实现。\"]},\"1002\":{\"h\":\"1) 搭建主从模式\",\"t\":[\"接下来，在本地环境使用主从模式搭建一个拥有三台服务器的 Redis 集群节点\",\"redis-server --port 6379 --daemonize yes redis-server --port 6300 --slaveof 127.0.0.1 6379 --daemonize yes redis-server --port 6300 --slaveof 127.0.0.1 6379 --daemonize yes\"]},\"1003\":{\"h\":\"2）单版本配置sentinel哨兵\",\"t\":[\"# 1.编写配置文件：vim sentinel.conf sentinel monitor myredis 127.0.0.1 6379 1 sentinel auth-pass myredis mkxiaoer # 主节点宕机以后选举的间隔时间10s 单位是毫秒 sentinel down-after-milliseconds myredis 10000 # Generated by CONFIG REWRITE dir \\\"/www/redis-7.0.8\\\" protected-mode no port 26379 latency-tracking-info-percentiles 50 99 99.9 user default on nopass ~* &* +@all sentinel myid c71c7cc530f5d800db6c78bc537c9a4764a7895f sentinel config-epoch myredis 0 sentinel leader-epoch myredis 1 sentinel current-epoch 1 # 2. 启动哨兵即可 redis-sentinel ./sentinel.conf # 集群就搭建好了，然后将master直接kill掉，自动选举一个节点作为master，从新启动6379就会自动作为从节点\"]},\"1004\":{\"h\":\"3) 集群版本配置sentinel哨兵\",\"t\":[\"首先新建 sentinel.conf 文件，并对其进行配置\",\"# 1.配置文件：sentinel26379.conf sentinel monitor myredis 127.0.0.1 6379 2 sentinel auth-pass myredis mkxiaoer # 主节点宕机以后选举的间隔时间10s 单位是毫秒 sentinel down-after-milliseconds myredis 10000 # Generated by CONFIG REWRITE dir \\\"/www/redis-7.0.8\\\" protected-mode no port 26379 # 2.配置文件：sentinel26380.conf sentinel monitor myredis 127.0.0.1 6379 2 sentinel auth-pass myredis mkxiaoer # 主节点宕机以后选举的间隔时间10s 单位是毫秒 sentinel down-after-milliseconds myredis 10000 # Generated by CONFIG REWRITE dir \\\"/www/redis-7.0.8\\\" protected-mode no port 26380 # 3.配置文件：sentinel26381.conf sentinel monitor myredis 127.0.0.1 6379 2 sentinel auth-pass myredis mkxiaoer # 主节点宕机以后选举的间隔时间10s 单位是毫秒 sentinel down-after-milliseconds myredis 10000 # Generated by CONFIG REWRITE dir \\\"/www/redis-7.0.8\\\" protected-mode no port 26381\",\"启动哨兵\",\"方式一: redis-sentinel sentinel.conf 方式二: redis-server sentinel.conf --sentinel\"]},\"1005\":{\"h\":\"09、Redis集群\",\"t\":[\"有哨兵为啥还有集群？\",\"上面的虽然提供高可用，但是还存在局限：没有解决数据分片，导致每个节点都有全部的数据，若是数据量大了就会受限于内容容量，还有写操作都在主节点上，很容易造成性能瓶颈\",\"进阶版的Cluster优势：数据自动分片，突破单机内存限制；每个分片是主从结构，提供高可用；多个主节点可同时处理读写，提升写性能；客户端可与任意节点通信，自动路由到正确的节点。\",\"提示\",\"Sentinel解决的是可用性问题(Available)\",\"Cluster解决的是扩展性问题(Scalable)\",\"具体项目中选择哪个，还是需要结合实际需求选择。小项目读多写少Sentinel足够，大型项目有大量写就需要Cluster。不要过度设计！！！\"]},\"1006\":{\"h\":\"原理\",\"t\":[\"Redis集群是一个由多个主从节点组成的分布式服务器群，它具有复制，高可用和分片特性。Redis的集群将所有的数据存储区域划分为16384个槽（slot）。每个节点负责一部分槽。槽的信息存储于每个节点中。Redis集群要将每个节点设置成集群模式，它没有中心节点的概念，可以水平扩展，它的性能和高可用用性均优越于主从模式和哨兵模式。而且集群配置非常简单。如下图：\",\"cluster\",\"特点\",\"数据分片（Sharding）: Redis 集群采用 哈希槽（hash slot） 来划分数据。总共有 16384 个哈希槽，数据根据键的哈希值映射到不同的槽中。每个节点负责管理若干个哈希槽，因此每个节点只处理部分数据。\",\"高可用性: Redis 集群支持每个主节点有多个副本（Replica）。当主节点发生故障时，集群会自动将副本提升为新的主节点，从而保证服务的持续可用。\",\"无中心化管理: Redis 集群没有单点故障的中心节点，而是通过每个节点之间相互通信来管理集群的状态。每个节点都知道集群的拓扑结构，可以独立处理请求。\",\"自动故障转移: 如果某个主节点失败，集群会自动将其副本提升为主节点，确保数据的可用性，避免数据丢失。\",\"客户端支持: 为了保证 Redis 集群的正常运行，客户端需要能够识别节点之间的分布，并正确地发送请求。支持 Redis 集群的客户端通常会根据键的哈希值来判断请求应发送到哪个节点。\",\"架构\",\"Redis 集群是由若干个 主节点（master node） 和 副本节点（replica node） 组成的，节点之间通过 Gossip 协议保持集群状态的一致性。\",\"主节点：每个主节点负责若干个哈希槽，并且存储一部分数据。\",\"副本节点：每个副本节点是某个主节点的副本，负责备份主节点的数据。当主节点发生故障时，副本节点会被提升为主节点。\"]},\"1007\":{\"h\":\"组成\",\"t\":[\"主节点（Master）：每个主节点负责存储一定数量的哈希槽和数据。\",\"副本节点（Replica）：副本节点是主节点的复制品，用于提供数据的高可用性。当主节点不可用时，副本节点会接管其任务，保证数据不会丢失。\",\"槽（Slot）：Redis 集群的哈希槽是数据分布的基础。整个集群包含 16384 个哈希槽，每个主节点管理其中的一部分槽。\"]},\"1008\":{\"h\":\"部署集群\"},\"1009\":{\"h\":\"1）环境准备\",\"t\":[\"提示\",\"主节点至少要有3个\",\"主节点不能少于总节点的一半\",\"虚拟机或者服务器（linux操作系统）：安装好redis\",\"目标：6个节点构建三主三从的集群\"]},\"1010\":{\"h\":\"2）单机集群\",\"t\":[\"IP：124.220.6.62\",\"redis的版本：7.0.8\",\"部署集群的端口：8001、8002、8003、8004、8005、8006\",\"具体步骤：\",\"# 1.复制5份redis.conf文件------------------------------------------------------- mkdir /cluster cd /cluster mkdir -p 8001 8002 8003 8004 8005 8006 cp /www/redis-7.0.8/redis.conf /www/redis-7.0.8/cluster/redis.conf cp redis.conf /www/redis-7.0.8/cluster/8001/redis.conf cp redis.conf /www/redis-7.0.8/cluster/8002/redis.conf cp redis.conf /www/redis-7.0.8/cluster/8003/redis.conf cp redis.conf /www/redis-7.0.8/cluster/8004/redis.conf cp redis.conf /www/redis-7.0.8/cluster/8005/redis.conf cp redis-server /www/redis-7.0.8/cluster/8006/redis.conf # 2.设置对应的配置文件（以8001为例）---------------------------------------------- # ① 保护模式启动 daemonize yes # ② 修改端口 port 8001 # ③ 修改数据存储的目录，这里必须要指定不同的目录位置，否则会造成数据的丢失 dir /www/redis-7.0.8/cluster/8001 # ④ 开启集群模式 cluster-enabled yes # ⑤ 集群节点信息文件，这里最好和端口保持一致 cluster-config-file nodes-8001.conf # ⑥ 集群节点的超时时限，单位是毫秒 cluster-node-timeout 10000 # ⑦ 修改为主讲的ip地址，默认地址是：127.0.0.1，需要修改成其他节点计算机可以访问的ip地址，否则创建集群的时候无法访问对应节单机的端口，无法创建集群。 # 本机建议设置： 本机ip # 如果是多机设置：阿里云的内网IP或者注释掉或者bind:0.0.0.0 bind 0.0.0.0 # ⑧ 受保护的模式，关闭，否则也会造成集群没办法创建成功 protected-mode no # ⑨ 开启aof的数据持久化 appendonly yes # ⑩ aof持久化的文件名 appendfilename \\\"appendonly8001.aof\\\" # ⑪ aof放文件所放的位置，它是和dir一起拼接形成，比如：/www/redis-7.0.8/cluster/8001/aof/appendonly8001.aof appenddirname \\\"aof\\\" # ⑫ 当前服务节点的密码 requirepass mkxiaoer # ⑬ 如果自身作为从节点以后，如果链接master节点有密码，一定要配置，建议设置密码的时候都保持一致 masterauth mkxiaoer # 3.分别启动这6个节点 ---------------------------------------------------------- redis-server /www/redis-7.0.8/cluster/8001/redis.conf redis-server /www/redis-7.0.8/cluster/8002/redis.conf redis-server /www/redis-7.0.8/cluster/8003/redis.conf redis-server /www/redis-7.0.8/cluster/8004/redis.conf redis-server /www/redis-7.0.8/cluster/8005/redis.conf redis-server /www/redis-7.0.8/cluster/8006/redis.conf # 4.检查是否启动成功 ----------------------------------------------------------- ps -ef | grep redis # 5.用redis-cli创建redis集群---------------------------------------------------- redis-cli --cluster create --cluster-replicas 1 127.0.0.1:8001 127.0.0.1:8002 127.0.0.1:8003 127.0.0.1:8004 127.0.0.1:8005 127.0.0.1:8006 -a mkxiaoer # --cluster-replicas 1 数字表示多少个从节点 # -a 每个节点的密码 # 6.进入任意一个节点可查看信息 > redis-cli -c -h 127.0.0.1 -p 8001 > auth mkxiaoer > cluster info #查看集群状态 cluster_state:ok # 状态正常 cluster_slots_assigned:16384 cluster_slots_ok:16384 cluster_slots_pfail:0 cluster_slots_fail:0 cluster_known_nodes:6 # 节点数量 cluster_size:3 > cluster nodes # 查看节点 d88b17b0abb2a82dc4350e93abaebe0353228df2 127.0.0.1:8004@18004 slave 6192b1d7512ec3fd4bd880cc455a47da54f4feca 0 1675915939398 2 connected 6192b1d7512ec3fd4bd880cc455a47da54f4feca 127.0.0.1:8002@18002 master - 0 1675915938000 2 connected 5461-10922 。。。 # 节点可以正常使用了 # 若是要关闭节点，使用命令： redis-cli -c -h 127.0.0.1 -p 8001 -a mkxiaoer shutdown\",\"上面的操作正常都是可以的，但是还有一些操作比如：新增主/从节点、删除主/从节点（会涉及到hash槽的分配）\",\"1.新增主节点（加入集群，还要重新分配槽）\",\"# 创建一个redis8007的主节点 > cp redis.conf /www/redis-7.0.8/cluster/8007/redis.conf # 启动主节点8007 > redis-server /www/redis-7.0.8/cluster/8007/redis.conf # 通过add-node命令增加集群节点，这里8001做个陪衬，你可以在集群中随便找个其他的也是可以的 > redis-cli --cluster add-node 127.0.0.1:8007 127.0.0.1:8001 -a mkxiaoer # 查看集群节点 > redis-cli -p 8001 > auth mkxiaoer > cluster info # 手动为主节点分配hash槽 > redis-cli --cluster reshard 127.0.0.1:8007 -a mkxiaoer # 给主节点8007分配多少个槽位，这里设定是1000 > How many slots do you want to move (from 1 to 16384)? 1000 # 给8007开始进行设定操作,这里的id是8007的master d0b678984c3c6f06b6c4510694d76b8381a45762 > What is the receiving node ID? d0b678984c3c6f06b6c4510694d76b8381a45762 > Please enter all the source node IDs. Type 'all' to use all the nodes as source nodes for the hash slots. # all.代表将全部重新分配的hash槽位 Type 'done' once you entered all the source nodes IDs. Source node #1: all # 输入yes开始进行重新分配hash槽，然后就会自动去调整和重新分配槽位 > Do you want to proceed with the proposed reshard plan (yes/no)? yes > # 查看是否分配成功 > redis-cli -p 8007 > auth mkxiaoer > cluster info > cluster nodes d88b17b0abb2a82dc4350e93abaebe0353228df2 127.0.0.1:8004@18004 slave 6192b1d7512ec3fd4bd880cc455a47da54f4feca 0 1675923474000 2 connected 6d555d82e36280900e8de704896e4b3846465655 127.0.0.1:8001@18001 myself,master - 0 1675923474000 1 connected 666-5460 41f8ccda22abebaa726191b765c88eae00cd3655 127.0.0.1:8006@18006 slave 6d555d82e36280900e8de704896e4b3846465655 0 1675923474000 1 connected 6192b1d7512ec3fd4bd880cc455a47da54f4feca 127.0.0.1:8002@18002 master - 0 1675923474095 2 connected 6129-10922 d45cce869590400ad7dbda32a825ab0741d0e41e 127.0.0.1:8005@18005 slave e1df9acf919b9234611883d093a7ff4b687a9dee 0 1675923473000 3 connected e1df9acf919b9234611883d093a7ff4b687a9dee 127.0.0.1:8003@18003 master - 0 1675923476100 3 connected 11589-16383 aced14e6f490ca573bed0042f185ce22298d6a9d 127.0.0.1:8007@18007 master - 0 1675923475097 7 connected 0-665 5461-6128 10923-11588\",\"2. 新增Redis的从节点\",\"# 先添加一个从节点8008 > cp redis.conf /www/redis-7.0.8/cluster/8008/redis.conf # 启动从节点8008 > redis-server /www/redis-7.0.8/cluster/8008/redis.conf # 把从节点8008加入到集群中 > redis-cli --cluster add-node 127.0.0.1:8008 127.0.0.1:8001 -a mkxiaoer # 查看集群节点的信息 > redis-cli -p 8008 # 查看节点信息，可以得到现在8008和8007还没关系 > cluster nodes # 开始绑定8008和8007关系，也就是把8008变成8007的从节点 # 绑定的命令是 CLUSTER REPLICATE id (主节点的id 8007) # 执行这个命令必须进入到8008的客户端中去执行 > CLUSTER REPLICATE d0b678984c3c6f06b6c4510694d76b8381a45762 # 查看集群节点信息即可。 > cluster nodes d45cce869590400ad7dbda32a825ab0741d0e41e 127.0.0.1:8005@18005 slave e1df9acf919b9234611883d093a7ff4b687a9dee 0 1675923789000 3 connected aced14e6f490ca573bed0042f185ce22298d6a9d 127.0.0.1:8007@18007 master - 0 1675923789879 7 connected 0-665 5461-6128 10923-11588 6192b1d7512ec3fd4bd880cc455a47da54f4feca 127.0.0.1:8002@18002 master - 0 1675923787876 2 connected 6129-10922 6d555d82e36280900e8de704896e4b3846465655 127.0.0.1:8001@18001 master - 0 1675923790881 1 connected 666-5460 d88b17b0abb2a82dc4350e93abaebe0353228df2 127.0.0.1:8004@18004 slave 6192b1d7512ec3fd4bd880cc455a47da54f4feca 0 1675923791883 2 connected 64ab4eb42ae02de188270c114d41d83006122a91 127.0.0.1:8008@18008 myself,slave aced14e6f490ca573bed0042f185ce22298d6a9d 0 1675923791000 7 connected e1df9acf919b9234611883d093a7ff4b687a9dee 127.0.0.1:8003@18003 master - 0 1675923791000 3 connected 11589-16383 41f8ccda22abebaa726191b765c88eae00cd3655 127.0.0.1:8006@18006 slave 6d555d82e36280900e8de704896e4b3846465655 0 1675923790000 1 connected\",\"3.删除从节点8008\",\"> redis-cli --cluster del-node 127.0.0.1:8008 bf396950d13769ba4fd4bc5bf4ce7185d24b27e5 -a mkxiaoer\",\"4.删除主节点（先移除数据，再删除主节点）\",\"# 重新把8007的占用hash槽进行释放或者说把数据进行迁移，然后在删除 > redis-cli --cluster reshard 127.0.0.1:8007 -a mkxiaoer --cluster-from d0b678984c3c6f06b6c4510694d76b8381a45762 How many slots do you want to move (from 1 to 16384)? 1000 # aced14e6f490ca573bed0042f185ce22298d6a9d这里的id是别的masterid What is the receiving node ID? aced14e6f490ca573bed0042f185ce22298d6a9d Please enter all the source node IDs. Type 'all' to use all the nodes as source nodes for the hash slots. Type 'done' once you entered all the source nodes IDs. Source node #1: all > Do you want to proceed with the proposed reshard plan (yes/no)? yes > 然后就会自动去调整和重新分配槽位 # 完整写法,可以取代上面的步骤 #>redis-cli --cluster reshard 192.168.116.175:8007 --cluster-from d0b678984c3c6f06b6c4510694d76b8381a45762 --cluster-to 60e3755761c9cbdacb183f59e3d6205da5335e86 --cluster-slots 1000 --cluster-yes # 然后在执行删除即可 > redis-cli --cluster del-node 127.0.0.1:8007 d0b678984c3c6f06b6c4510694d76b8381a45762 -a mkxiaoer\"]},\"1011\":{\"h\":\"3）多机集群\",\"t\":[\"单机集群：同一个ip，只能使用不同的端口隔离\",\"多机集群：有不同的ip了，端口就可以一样了\",\"两者配置就这个区别，使用的时候还是多计部署\"]},\"1012\":{\"h\":\"总结\",\"t\":[\"提示\",\"这里参考一下小白Debug的思路来捋一遍Redis\",\"问：\",\"一个商品服务，对外可提供每秒10K次查询，而数据库只能提供每秒5K次查询，上线MySQL会直接崩溃，比如秒杀活动啥的，怎么样才能让MySQL不被压块的同时商品服务又能支持每秒10K次查询呢？\",\"解：\",\"加一个中间层：将数据缓存到内存中去来抵挡大部分的查询请求\"]},\"1013\":{\"c\":[\"db\"]},\"1014\":{\"h\":\"EMQX\",\"t\":[\"待定\"]},\"1015\":{\"c\":[\"mq\"]},\"1016\":{\"h\":\"Kafka\"},\"1017\":{\"h\":\"01、Kafka简介\",\"t\":[\"Kafka使用scala开发，支持多语言客户端（c++、java、python、go等）\",\"Kafka最先由LinkedIn公司开发，之后成为Apache的顶级项目。\",\"Kafka是一个==分布式的、分区化、==可复制提交的日志服务\",\"LinkedIn使用Kafka实现了公司不同应用程序之间的松耦和，那么作为一个可扩展、高可靠的消息系统 支持高Throughput的应用\",\"scale out：无需停机即可扩展机器\",\"持久化：通过将数据持久化到硬盘以及replication防止数据丢失\",\"支持online和offline的场景\"]},\"1018\":{\"h\":\"02、Kafka的特点\",\"t\":[\"Apache Kafka是一种高吞吐量的分布式发布订阅消息系统，它最初是由Linkedin开发，之后成为了Apache项目的一部分。其具有以下几个特点：\",\"面向记录（Message Oriented）: 支持不同的数据类型，允许每个记录包含多个字段；\",\"可扩展性：支持水平可伸缩性，可以动态增加分区数；\",\"容错性：支持持久化日志，提供零丢失保证；\",\"消息顺序：生产者发送的消息将严格按照顺序存储到对应的分区，消费者接收到的消息也将按照先进先出的顺序消费；\",\"分布式：跨多台服务器部署，能提供更高的吞吐量和容错性；\",\"时效性：通过自动复制机制确保消息在不间断的时间段内传递到所有副本，保证了可靠性；\",\"API友好：提供多种编程接口，包括Java、Scala、C/C++、Python等。\",\"总之，Kafka是一个用于构建实时数据管道和可靠的数据传输系统的优秀工具。本文只涉及到其中几方面的内容，比如消息的存储、分发、发布、消费、可靠性保证等。\",\"Kafka是分布式的，其所有的构件borker(服务端集群)、producer(消息生产)、consumer(消息消费者)都可以是分布式的。\",\"在消息的生产时可以使用一个标识topic来区分，且可以进行分区；每一个分区都是一个顺序的、不可变的消息队列， 并且可以持续的添加。\",\"同时为发布和订阅提供高吞吐量。据了解，Kafka每秒可以生产约25万消息（50 MB），每秒处理55万消息（110 MB）。\",\"消息被处理的状态是在consumer端维护，而不是由server端维护。当失败时能自动平衡\"]},\"1019\":{\"h\":\"03、常用的场景\",\"t\":[\"1、监控：主机通过Kafka发送与系统和应用程序健康相关的指标，然后这些信息会被收集和处理从而创建监控仪表盘并发送警告。\",\"2、消息队列： 应用程度使用Kafka作为传统的消息系统实现标准的队列和消息的发布—订阅，例如搜索和内容提要（Content Feed）。比起大多数的消息系统来说，Kafka有更好的吞吐量，内置的分区，冗余及容错性，这让Kafka成为了一个很好的大规模消息处理应用的解决方案。消息系统 一般吞吐量相对较低，但是需要更小的端到端延时，并尝尝依赖于Kafka提供的强大的持久性保障。在这个领域，Kafka足以媲美传统消息系统，如ActiveMR或RabbitMQ\",\"3、站点的用户活动追踪: 为了更好地理解用户行为，改善用户体验，将用户查看了哪个页面、点击了哪些内容等信息发送到每个数据中心的Kafka集群上，并通过Hadoop进行分析、生成日常报告。\",\"4、流处理：保存收集流数据，以提供之后对接的Storm或其他流式计算框架进行处理。很多用户会将那些从原始topic来的数据进行 阶段性处理，汇总，扩充或者以其他的方式转换到新的topic下再继续后面的处理。例如一个文章推荐的处理流程，可能是先从RSS数据源中抓取文章的内 容，然后将其丢入一个叫做“文章”的topic中；后续操作可能是需要对这个内容进行清理，比如回复正常数据或者删除重复数据，最后再将内容匹配的结果返 还给用户。这就在一个独立的topic之外，产生了一系列的实时数据处理的流程。\",\"5、日志聚合:使用Kafka代替日志聚合（log aggregation）。日志聚合一般来说是从服务器上收集日志文件，然后放到一个集中的位置（文件服务器或HDFS）进行处理。然而Kafka忽略掉 文件的细节，将其更清晰地抽象成一个个日志或事件的消息流。这就让Kafka处理过程延迟更低，更容易支持多数据源和分布式数据处理。比起以日志为中心的 系统比如Scribe或者Flume来说，Kafka提供同样高效的性能和因为复制导致的更高的耐用性保证，以及更低的端到端延迟\",\"6、持久性日志：Kafka可以为一种外部的持久性日志的分布式系统提供服务。这种日志可以在节点间备份数据，并为故障节点数据回复提供一种重新同步的机制。Kafka中日志压缩功能为这种用法提供了条件。在这种用法中，Kafka类似于Apache BookKeeper项目。\"]},\"1020\":{\"h\":\"2.1、 Kafka的基本角色\",\"t\":[\"Kafka中的生产过程设计多个概念的配合，理清这些概念的关系，有利于理解Kafka的生产机制。\",\"角色\",\"作用\",\"producer\",\"生产消息，向Kafka推送消息，非Kafka组件之一\",\"topic\",\"逻辑概念，用于组织一类消息\",\"broker\",\"broker运行着Kafka实例\",\"partition\",\"存储同一个topic的分区（多个分区共同存储一个topic的消息）\",\"replication\",\"partition的副本，为保证稳定性，同一个partition需要在不同broker上设置备份\",\"leader\",\"partition的众多replication的一个，生产方向其中写入，消费方从中读取\",\"follower\",\"partition除leader外的replication。用于备份partition的内容保证稳定性\",\"下图直观反映了Kafka的各种概念的关系。\",\"img\",\"Producer：Producer即生产者，消息的产生者，是消息的入口。\",\"Kafka cluster：Kafka集群，一台或多台服务器组成\",\"Broker：Broker是指部署了Kafka实例的服务器节点。每个服务器上有一个或多个Kafka的实 例，我们姑且认为每个broker对应一台服务器。每个Kafka集群内的broker都有一个不重复的 编号，如图中的broker-0、broker-1等……\",\"Topic：消息的主题，可以理解为消息的分类，Kafka的数据就保存在topic。在每个broker上 都可以创建多个topic。实际应用中通常是一个业务线建一个topic。\",\"Partition：Topic的分区，每个topic可以有多个分区，分区的作用是做负载，提高Kafka的吞 吐量。同一个topic在不同的分区的数据是不重复的，partition的表现形式就是一个一个的文件夹！\",\"Replication:每一个分区都有多个副本，副本的作用是做备胎。当主分区（Leader）故障的 时候会选择一个备胎（Follower）上位，成为Leader。在Kafka中默认副本的最大数量是10 个，且副本的数量不能大于Broker的数量，follower和leader绝对是在不同的机器，同一机 器对同一个分区也只可能存放一个副本（包括自己）。\",\"Consumer：消费者，即消息的消费方，是消息的出口。\",\"Consumer Group：我们可以将多个消费组组成一个消费者组，在Kafka的设计中同一个分 区的数据只能被消费者组中的某一个消费者消费。同一个消费者组的消费者可以消费同一个 topic的不同分区的数据，这也是为了提高Kafka的吞吐量！\"]},\"1021\":{\"h\":\"2.2、zookeeper在Kafka中的角色\",\"t\":[\"zookeeper为大型分布式计算提供开源的分布式配置服务、同步服务和命名注册。它可以保证一致性和分区容错性，在Kafka中zookeeper为broker，producer和consumer提供一致的配置信息。在下面的讲解中我们将会具体展示。\",\"produce会计算本条消息需要发送的partition。\",\"produce根据发送的分区，向zookeeper获取对应partition的leader信息，发送消息到leader所在的broker。\",\"leader在本地记录该消息。\",\"follower通过轮询监控到leader新写入消息，主动拉取消息。\",\"follower同步消息成功向leader发送ack。\",\"leader收到所有follower同步的消息，向producer发送确认ack。\",\"producer生产过程\"]},\"1022\":{\"h\":\"3.1 工作流程\",\"t\":[\"我们看上面的架构图中，producer就是生产者，是数据的入口。Producer在写入数据的时候会把数据 写入到leader中，不会直接将数据写入follower！那leader怎么找呢？写入的流程又是什么样的呢？我 们看下图：\",\"img\",\"1.生产者从Kafka集群获取分区leader信息\",\"2.生产者将消息发送给leader\",\"3.leader将消息写入本地磁盘\",\"4.follower从leader拉取消息数据\",\"5.follower将消息写入本地磁盘后向leader发送ACK\",\"6.leader收到所有的follower的ACK之后向生产者发送ACK\"]},\"1023\":{\"h\":\"3.2 选择partition的原则\",\"t\":[\"那在Kafka中，如果某个topic有多个partition，producer⼜怎么知道该将数据发往哪个partition呢？ Kafka中有几个原则：\",\"1.partition在写入的时候可以指定需要写入的partition，如果有指定，则写入对应的partition。\",\"2.如果没有指定partition，但是设置了数据的key，则会根据key的值hash出一个partition。\",\"3.如果既没指定partition，又没有设置key，则会采用轮询方式，即每次取一小段时间的数据写入某partition，下一小段的时间写入下一个partition\"]},\"1024\":{\"h\":\"3.3 ACK应答机制\",\"t\":[\"producer在向Kafka写入消息的时候，可以设置参数来确定是否确认Kafka接收到数据，这个参数可设置 的值为 0,1,all\",\"0代表producer往集群发送数据不需要等到集群的返回，不确保消息发送成功。安全性最低但是效 率最高。\",\"1代表producer往集群发送数据只要leader应答就可以发送下一条，只确保leader发送成功。\",\"all代表producer往集群发送数据需要所有的follower都完成从leader的同步才会发送下一条，确保 leader发送成功和所有的副本都完成备份。安全性最⾼高，但是效率最低。\",\"最后要注意的是，如果往不存在的topic写数据，Kafka会自动创建topic，partition和replication的数量 默认配置都是1。\"]},\"1025\":{\"h\":\"3.4 Topic和数据日志\",\"t\":[\"topic 是同⼀类别的消息记录（record）的集合。在Kafka中，⼀个主题通常有多个订阅者。对于每个 主题，Kafka集群维护了⼀个分区数据日志文件结构如下：\",\"每个partition都是⼀个有序并且不可变的消息记录集合。当新的数据写入时，就被追加到partition的末 尾。在每个partition中，每条消息都会被分配⼀个顺序的唯⼀标识，这个标识被称为offset，即偏移 量。注意，Kafka只保证在同⼀个partition内部消息是有序的，在不同partition之间，并不能保证消息 有序。\",\"Kafka可以配置⼀个保留期限，用来标识日志会在Kafka集群内保留多⻓时间。Kafka集群会保留在保留 期限内所有被发布的消息，不管这些消息是否被消费过。比如保留期限设置为两天，那么数据被发布到 Kafka集群的两天以内，所有的这些数据都可以被消费。当超过两天，这些数据将会被清空，以便为后 续的数据腾出空间。由于Kafka会将数据进行持久化存储（即写入到硬盘上），所以保留的数据⼤小可以设置为⼀个比较⼤的值。\"]},\"1026\":{\"h\":\"3.5 Partition结构\",\"t\":[\"Partition在服务器上的表现形式就是⼀个⼀个的文件夹，每个partition的文件夹下面会有多组segment 文件，每组segment文件⼜包含 .index 文件、 .log 文件、 .timeindex 文件三个文件，其中 .log 文 件就是实际存储message的地方，⽽ .index 和 .timeindex 文件为索引文件，用于检索消息。\"]},\"1027\":{\"h\":\"3.6 消费数据\",\"t\":[\"多个消费者实例可以组成⼀个消费者组，并用⼀个标签来标识这个消费者组。⼀个消费者组中的不同消 费者实例可以运行在不同的进程甚⾄不同的服务器上。\",\"如果所有的消费者实例都在同⼀个消费者组中，那么消息记录会被很好的均衡的发送到每个消费者实 例。\",\"如果所有的消费者实例都在不同的消费者组，那么每⼀条消息记录会被⼴播到每⼀个消费者实例。\",\"举个例⼦，如上图所示⼀个两个节点的Kafka集群上拥有⼀个四个partition（P0-P3）的topic。有两个 消费者组都在消费这个topic中的数据，消费者组A有两个消费者实例，消费者组B有四个消费者实例。 从图中我们可以看到，在同⼀个消费者组中，每个消费者实例可以消费多个分区，但是每个分区最多只 能被消费者组中的⼀个实例消费。也就是说，如果有⼀个4个分区的主题，那么消费者组中最多只能有4 个消费者实例去消费，多出来的都不会被分配到分区。其实这也很好理解，如果允许两个消费者实例同 时消费同⼀个分区，那么就⽆法记录这个分区被这个消费者组消费的offset了。如果在消费者组中动态 的上线或下线消费者，那么Kafka集群会自动调整分区与消费者实例间的对应关系。\"]},\"1028\":{\"h\":\"1、下载与安装Kafka\",\"t\":[\"Kafka官网https://Kafka.apache.org/downloads\",\"所以这里推荐的版本是 : https://archive.apache.org/dist/kafka/2.7.2/kafka_2.12-2.7.2.tgz\",\"将下载下来的安装包直接解压到一个路径下即可完成Kafka的安装，这里统一将Kafka安装到/usr/local目录下\",\"基本操作过程如下：\",\"mkdir -p /www/kuangstudy cd /www/kuangstudy wget https://archive.apache.org/dist/kafka/2.7.2/kafka_2.12-2.7.2.tgz tar -zxvf kafka_2.12-2.7.2.tgz -C /usr/local/ mv /usr/local/kafka_2.12-2.7.2 /usr/local/kafka #新建存放日志和数据的文件夹 mkdir /usr/local/kafka/logs\",\"这里我们将Kafka安装到了**/usr/local**目录下。\"]},\"1029\":{\"h\":\"2、配置Kafka\",\"t\":[\"这里将Kafka安装到/usr/local目录下\",\"因此，Kafka的主配置文件为/usr/local/Kafka/config/server.properties，这里以节点Kafkazk1为例，重点介绍一些常用配置项的含义：\",\"broker.id=1 listeners=PLAINTEXT://127.0.0.1:9092 num.network.threads=3 num.io.threads=8 socket.send.buffer.bytes=102400 socket.receive.buffer.bytes=102400 socket.request.max.bytes=104857600 log.dirs=/usr/local/Kafka/logs num.partitions=6 num.recovery.threads.per.data.dir=1 offsets.topic.replication.factor=1 transaction.state.log.replication.factor=1 transaction.state.log.min.isr=1 log.retention.hours=168 log.segment.bytes=1073741824 log.retention.check.interval.ms=300000 zookeeper.connect=localhost:2181 #不是集群，所以可以写成localhost #zookeeper.connect=127.0.0.1:2181,10.0.0.7:2181,10.0.0.8:2181 zookeeper.connection.timeout.ms=18000 group.initial.rebalance.delay.ms=0 auto.create.topics.enable=true delete.topic.enable=true\",\"每个配置项含义如下：\",\"broker.id：每一个broker在集群中的唯一表示，要求是正数。当该服务器的IP地址发生改变时，broker.id没有变化，则不会影响consumers的消息情况。\",\"listeners：设置Kafka的监听地址与端口，可以将监听地址设置为主机名或IP地址，这里将监听地址设置为IP地址。\",\"log.dirs：这个参数用于配置Kafka保存数据的位置，Kafka中所有的消息都会存在这个目录下。可以通过逗号来指定多个路径， Kafka会根据最少被使用的原则选择目录分配新的parition。需要注意的是，Kafka在分配parition的时候选择的规则不是按照磁盘的空间大小来定的，而是根据分配的 parition的个数多小而定。\",\"num.partitions：这个参数用于设置新创建的topic有多少个分区，可以根据消费者实际情况配置，配置过小会影响消费性能。这里配置6个。\",\"log.retention.hours：这个参数用于配置Kafka中消息保存的时间，还支持log.retention.minutes和 log.retention.ms配置项。这三个参数都会控制删除过期数据的时间，推荐使用log.retention.ms。如果多个同时设置，那么会选择最小的那个。\",\"log.segment.bytes：配置partition中每个segment数据文件的大小，默认是1GB，超过这个大小会自动创建一个新的segment file。\",\"zookeeper.connect\",\"：这个参数用于指定zookeeper所在的地址，它存储了broker的元信息。 这个值可以通过逗号设置多个值，每个值的格式均为：hostname:port/path，每个部分的含义如下：\",\"hostname：表示zookeeper服务器的主机名或者IP地址，这里设置为IP地址。\",\"port： 表示是zookeeper服务器监听连接的端口号。\",\"/path：表示Kafka在zookeeper上的根目录。如果不设置，会使用根目录。\",\"auto.create.topics.enable：这个参数用于设置是否自动创建topic，如果请求一个topic时发现还没有创建， Kafka会在broker上自动创建一个topic，如果需要严格的控制topic的创建，那么可以设置auto.create.topics.enable为false，禁止自动创建topic。\",\"delete.topic.enable：在0.8.2版本之后，Kafka提供了删除topic的功能，但是默认并不会直接将topic数据物理删除。如果要从物理上删除（即删除topic后，数据文件也会一同删除），就需要设置此配置项为true。\"]},\"1030\":{\"h\":\"3、添加环境变量\",\"t\":[\"$ vim /etc/profile export kafka_HOME=/usr/local/kafka export PATH=$PATH:$kafka_HOME/bin #生效 $ source /etc/profile\"]},\"1031\":{\"h\":\"zookeeper服务的启动\",\"t\":[\"cd /usr/local/kafka/bin # 占用启动 ./zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties & # 后台启动 nohup ./zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties &\"]},\"1032\":{\"h\":\"4、Kafka启动脚本\",\"t\":[\"$ vim /usr/lib/systemd/system/kafka.service [Unit] Description=Apache kafka server (broker) After=network.target zookeeper.service [Service] Type=simple User=root Group=root ExecStart=/usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties ExecStop=/usr/local/kafka/bin/kafka-server-stop.sh Restart=on-failure [Install] WantedBy=multi-user.target\",\"systemctl daemon-reload\"]},\"1033\":{\"h\":\"5、启动Kafka\",\"t\":[\"在启动Kafka集群前，需要确保ZooKeeper集群已经正常启动。接着，依次在Kafka各个节点上执行如下命令即可：\",\"$ cd /usr/local/kafka $ nohup bin/kafka-server-start.sh config/server.properties & # 或者 $ systemctl start kafka $ jps 21840 kafka 15593 Jps 15789 QuorumPeerMain\",\"这里将Kafka放到后台运行，启动后，会在启动Kafka的当前目录下生成一个nohup.out文件，可通过此文件查看Kafka的启动和运行状态。通过jps指令，可以看到有个Kafka标识，这是Kafka进程成功启动的标志。\"]},\"1034\":{\"h\":\"6、测试Kafka基本命令操作\",\"t\":[\"kefka提供了多个命令用于查看、创建、修改、删除topic信息，也可以通过命令测试如何生产消息、消费消息等，这些命令位于Kafka安装目录的bin目录下，这里是**/usr/local/Kafka/bin**。\",\"登录任意一台Kafka集群节点，切换到此目录下，即可进行命令操作。\",\"下面列举Kafka的一些常用命令的使用方法。 （1）显示topic列表\",\"#kafka-topics.sh --zookeeper 127.0.0.1:2181,10.0.0.7:2181,10.0.0.8:2181 --list $ kafka-topics.sh --zookeeper 127.0.0.1:2181 --list topic123\",\"（2）创建一个topic，并指定topic属性（副本数、分区数等）\",\"#kafka-topics.sh --create --zookeeper 127.0.0.1:2181,10.0.0.7:2181,10.0.0.8:2181 --replication-factor 1 --partitions 3 --topic topic123 $ kafka-topics.sh --create --zookeeper 127.0.0.1:2181 --replication-factor 1 --partitions 3 --topic topic123 Created topic topic123. #--replication-factor表示指定副本的个数\",\"（3）查看某个topic的状态\",\"#kafka-topics.sh --describe --zookeeper 127.0.0.1:2181,10.0.0.7:2181,10.0.0.8:2181 --topic topic123 $ kafka-topics.sh --describe --zookeeper 127.0.0.1:2181 --topic topic123 Topic: topic123 PartitionCount: 3 ReplicationFactor: 1 Configs: Topic: topic123 Partition: 0 Leader: 1 Replicas: 1 Isr: 1 Topic: topic123 Partition: 1 Leader: 1 Replicas: 1 Isr: 1 Topic: topic123 Partition: 2 Leader: 1 Replicas: 1 Isr: 1\",\"（4）生产消息 阻塞状态\",\"#kafka-console-producer.sh --broker-list 127.0.0.1:9092,10.0.0.7:9092,10.0.0.8:9092 --topic topic123 $ kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic topic123\",\"（5）消费消息 阻塞状态\",\"#kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092,10.0.0.7:9092,10.0.0.8:9092 --topic topic123 $ kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic topic123 #从头开始消费消息 #Kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic topic123 --from-beginning $ kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092,10.0.0.7:9092,10.0.0.8:9092 --topic topic123 --from-beginning\",\"（6）删除topic\",\"#kafka-topics.sh --delete --zookeeper 127.0.0.1:2181,10.0.0.7:2181,10.0.0.8:2181 --topic topic123 $ kafka-topics.sh --delete --zookeeper 127.0.0.1:2181 --topic topic_\"]},\"1035\":{\"h\":\"4.1 消息生产代码示例\",\"t\":[\"package main import ( \\\"fmt\\\" \\\"github.com/IBM/sarama\\\" ) func main() { // 配置生产者信息 conf := sarama.NewConfig() conf.Producer.RequiredAcks = sarama.WaitForAll // 生产者等待所有分区副本成功提交消息 conf.Producer.Return.Successes = true // 成功消息写入返回 client, err := sarama.NewSyncProducer([]string{\\\"47.115.230.36:9092\\\"}, conf) if nil != err { fmt.Println(\\\"create Kafka sync producer failed\\\", err) return } defer client.Close() msg := &sarama.ProducerMessage{ Topic: \\\"topic123\\\", // 指定消息主题 Value: sarama.StringEncoder(\\\"hello world\\\"), // 构造消息 } // 发送消息 _, _, err = client.SendMessage(msg) if nil != err { fmt.Println(\\\"send message to Kafka failed\\\", err) return } fmt.Println(\\\"send message success\\\") }\"]},\"1036\":{\"h\":\"4.2 消息消费代码示例\",\"t\":[\"package main import ( \\\"fmt\\\" \\\"github.com/IBM/sarama\\\" ) /** * @desc 生产者 * @author feige * @date 2023-11-15 * @version 1.0 */ func main() { // 创建一个消费者 consumer, err := sarama.NewConsumer([]string{\\\"47.115.230.36:9092\\\"}, nil) if err != nil { fmt.Println(\\\"消费者kafka连接服务失败，失败的原因：\\\", err) return } // 从topic123这个主题去获取消息 partitions, err := consumer.Partitions(\\\"topic123\\\") if err != nil { fmt.Println(\\\"主题获取失败，失败的原因：\\\", err) return } fmt.Println(partitions) // 开始遍历分区中的消息，开始进行消费 for _, partition := range partitions { pc, err := consumer.ConsumePartition(\\\"topic123\\\", int32(partition), sarama.OffsetNewest) if err != nil { fmt.Println(\\\"分区数据获取失败，失败的原因：\\\", err) return } defer pc.AsyncClose() // 开始异步获取消息 go func(sarama.PartitionConsumer) { for message := range pc.Messages() { fmt.Printf(\\\"当前消费的分区是：%d,offset：%d,key:%v，消息的内容是：%v\\\", message.Partition, message.Offset, message.Key, string(message.Value)) fmt.Println(\\\"\\\") } }(pc) } // 阻塞让消费一直处于监听状态 select {} }\"]},\"1037\":{\"h\":\"4.3 创建主题代码示例\",\"t\":[\"package main import ( \\\"fmt\\\" \\\"github.com/Shopify/sarama\\\" ) func CreateTopic(addrs []string, topic string) bool { config := sarama.NewConfig() config.Version = sarama.V2_0_0_0 // 设置客户端版本 config.Admin.Timeout = 3 * time.Second // 设置Admin请求超时时间 admin, err := sarama.NewClusterAdmin(addrs, config) if err!= nil { return false } defer admin.Close() err = admin.CreateTopic(topic, &sarama.TopicDetail{NumPartitions: 3, ReplicationFactor: 2}, false) if err == nil { fmt.Println(\\\"success create topic:\\\", topic) } else { fmt.Println(\\\"failed create topic:\\\", topic) } return err == nil }\"]},\"1038\":{\"h\":\"4.4 性能测试结果\",\"t\":[\"Kafka目前已经成为云计算领域中的“事件驱动”架构、微服务架构中的主要消息队列，随着越来越多的公司和组织开始采用Kafka作为基础消息队列技术，越来越多的性能测试报告也陆续出来。笔者提前做了一轮性能测试，并发现它的消费性能比其它消息队列还要好，甚至更好些。下面是测试结果：\"]},\"1039\":{\"h\":\"测试环境：\",\"t\":[\"操作系统：Ubuntu 16.04\",\"CPU：Intel® Xeon® Gold 6148 CPU @ 2.40GHz\",\"内存：128G DDR4 ECC\",\"Kafka集群：3节点，每节点配置6个CPU、32G内存、SSD\",\"测试用例：生产者每秒钟发送2万条消息，消费者每秒钟消费100条消息。\"]},\"1040\":{\"h\":\"测试结果：\"},\"1041\":{\"h\":\"Kafka消费者\"},\"1042\":{\"h\":\"每秒消费100条消息，平均耗时：67毫秒\"},\"1043\":{\"h\":\"每秒消费1000条消息，平均耗时：6.7毫秒\"},\"1044\":{\"h\":\"RabbitMQ消费者\"},\"1045\":{\"h\":\"每秒消费100条消息，平均耗时：1038毫秒\"},\"1046\":{\"h\":\"每秒消费1000条消息，平均耗时：10.38毫秒\",\"t\":[\"https://zhuanlan.zhihu.com/p/651160141\",\"github.com/Shopify/sarama github.com/bsm/sarama-cluster\"]},\"1047\":{\"h\":\"生产者\",\"t\":[\"import ( \\\"fmt\\\" \\\"math/rand\\\" \\\"os\\\" \\\"strconv\\\" \\\"strings\\\" \\\"time\\\" \\\"github.com/Shopify/sarama\\\" \\\"github.com/golang/glog\\\" ) //同步生产者 func Produce() { config := sarama.NewConfig() config.Producer.RequiredAcks = sarama.WaitForAll //赋值为-1：这意味着producer在follower副本确认接收到数据后才算一次发送完成。 config.Producer.Partitioner = sarama.NewRandomPartitioner //写到随机分区中，默认设置8个分区 config.Producer.Return.Successes = true msg := &sarama.ProducerMessage{} msg.Topic = `test0` msg.Value = sarama.StringEncoder(\\\"Hello World!\\\") client, err := sarama.NewSyncProducer([]string{\\\"Kafka_master:9092\\\"}, config) if err != nil { fmt.Println(\\\"producer close err, \\\", err) return } defer client.Close() pid, offset, err := client.SendMessage(msg) if err != nil { fmt.Println(\\\"send message failed, \\\", err) return } fmt.Printf(\\\"分区ID:%v, offset:%v \\\\n\\\", pid, offset) } //异步生产者 func AsyncProducer() { var topics = \\\"test0\\\" config := sarama.NewConfig() config.Producer.Return.Successes = true //必须有这个选项 config.Producer.Timeout = 5 * time.Second p, err := sarama.NewAsyncProducer(strings.Split(\\\"Kafka_master:9092\\\", \\\",\\\"), config) defer p.Close() if err != nil { return } //这个部分一定要写，不然通道会被堵塞 go func(p sarama.AsyncProducer) { errors := p.Errors() success := p.Successes() for { select { case err := <-errors: if err != nil { glog.Errorln(err) } case <-success: } } }(p) for { v := \\\"async: \\\" + strconv.Itoa(rand.New(rand.NewSource(time.Now().UnixNano())).Intn(10000)) fmt.Fprintln(os.Stdout, v) msg := &sarama.ProducerMessage{ Topic: topics, Value: sarama.ByteEncoder(v), } p.Input() <- msg time.Sleep(time.Second * 1) } }\",\"消费者\",\"package consumer import ( \\\"fmt\\\" \\\"strings\\\" \\\"sync\\\" \\\"time\\\" \\\"github.com/Shopify/sarama\\\" cluster \\\"github.com/bsm/sarama-cluster\\\" \\\"github.com/golang/glog\\\" ) //单个消费者 func Consumer() { var wg sync.WaitGroup consumer, err := sarama.NewConsumer([]string{\\\"Kafka_master:9092\\\"}, nil) if err != nil { fmt.Println(\\\"Failed to start consumer: %s\\\", err) return } partitionList, err := consumer.Partitions(\\\"test0\\\") //获得该topic所有的分区 if err != nil { fmt.Println(\\\"Failed to get the list of partition:, \\\", err) return } for partition := range partitionList { pc, err := consumer.ConsumePartition(\\\"test0\\\", int32(partition), sarama.OffsetNewest) if err != nil { fmt.Println(\\\"Failed to start consumer for partition %d: %s\\\\n\\\", partition, err) return } wg.Add(1) go func(sarama.PartitionConsumer) { //为每个分区开一个go协程去取值 for msg := range pc.Messages() { //阻塞直到有值发送过来，然后再继续等待 fmt.Printf(\\\"Partition:%d, Offset:%d, key:%s, value:%s\\\\n\\\", msg.Partition, msg.Offset, string(msg.Key), string(msg.Value)) } defer pc.AsyncClose() wg.Done() }(pc) } wg.Wait() } //消费组 func ConsumerGroup() { groupID := \\\"test-consumer-group\\\" config := cluster.NewConfig() config.Group.Return.Notifications = true config.Consumer.Offsets.CommitInterval = 1 * time.Second config.Consumer.Offsets.Initial = sarama.OffsetNewest //初始从最新的offset开始 c, err := cluster.NewConsumer(strings.Split(\\\"Kafka_master:9092\\\", \\\",\\\"), groupID, strings.Split(\\\"test0\\\", \\\",\\\"), config) if err != nil { glog.Errorf(\\\"Failed open consumer: %v\\\", err) return } defer c.Close() go func(c *cluster.Consumer) { errors := c.Errors() noti := c.Notifications() for { select { case err := <-errors: glog.Errorln(err) case <-noti: } } }(c) for msg := range c.Messages() { fmt.Printf(\\\"Partition:%d, Offset:%d, key:%s, value:%s\\\\n\\\", msg.Partition, msg.Offset, string(msg.Key), string(msg.Value)) c.MarkOffset(msg, \\\"\\\") //MarkOffset 并不是实时写入Kafka，有可能在程序crash时丢掉未提交的offset } }\",\"主函数\",\"package main import ( \\\"strom-huang-go/go_Kafka/consumer\\\" ) func main() { // produce.AsyncProducer() consumer.Consumer() }\"]},\"1048\":{\"c\":[\"db\"]},\"1049\":{\"h\":\"消息组件\"},\"1050\":{\"h\":\"目录\",\"t\":[\"EMQX\",\"RocketMQ\",\"Kafka\"]},\"1051\":{\"h\":\"技术选型\",\"t\":[\"消息队列（MQ）是指利用消息进行通信或交换的中间件产品，是分布式系统常用的组件之一。典型的消息队列有ActiveMQ、RabbitMQ、RocketMQ等。它们的差异主要体现在三个方面：\"]},\"1052\":{\"h\":\"消息队列的作用\",\"t\":[\"1、应用耦合：多应用间通过消息队列对同一消息进行处理，避免调用接口失败导致整个过程失败；\",\"2、异步处理：多应用对消息队列中同一消息进行处理，应用间并发处理消息，相比串行处理，减少处理时间；\",\"3、限流削峰：广泛应用于秒杀或抢购活动中，避免流量过大导致应用系统挂掉的情况；\",\"4、消息驱动的系统：系统分为消息队列、消息生产者、消息消费者，生产者负责产生消息，消费者(可能有多个)负责对消息进行处理；\",\"首先选择消息队列要满足以下几个条件：\",\"提示\",\"1、开源\",\"2、流行\",\"3、兼容性强\",\"消息队列需要：\",\"1、消息的可靠传递：确保不丢消息；\",\"2、Cluster：支持集群，确保不会因为某个节点宕机导致服务不可用，当然也不能丢消息；\",\"3、性能：具备足够好的性能，能满足绝大多数场景的性能要求。\"]},\"1053\":{\"h\":\"RabbitMQ\",\"t\":[\"RabbitMQ 2007年发布，是一个在 AMQP (高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。\",\"优点\",\"1、RabbitMQ 的特点 Messaging that just works，“开箱即用的消息队列”。 RabbitMQ 是一个相对轻量的消息队列，非常容易部署和使用；\",\"2、多种协议的支持：支持多种消息队列协议，算得上是最流行的消息队列之一；\",\"3、灵活的路由配置，和其他消息队列不同的是，它在生产者 （Producer）和队列（Queue）之间增加了一个Exchange模块，你可以理解为交换机。这个Exchange模块的作用和交换机也非常相似，根据配置的路由规则将生产者发出的消息分发到不同的队 列中。路由的规则也非常灵活，甚至你可以自己来实现路由规则。\",\"4、健壮、稳定、易用、跨平台、支持多种语言、文档齐全，RabbitMQ的客户端支持的编程语言大概是所有消息队列中最多的；\",\"5、管理界面较丰富，在互联网公司也有较大规模的应用；\",\"6、社区比较活跃。\",\"缺点\",\"1、RabbitMQ 对消息堆积的处理不好，在它的设计理念里面，消息队列是一个管道，大量的消息积压是一种不正常的情况，应当尽量去避免。当大量消息积压的时候，会导致RabbitMQ的性能急剧下降；\",\"2、性能上有瓶颈，它大概每秒钟可以处理几万到十几万条消息，这个对于大多数场景足够使用了，如果对需求对性能要求非常高，那么就不太合适了。\",\"3、RabbitMQ 使用 Erlang。开发，Erlang 的学习成本还是很高的，如果后期进行二次开发，就不太容易了。\"]},\"1054\":{\"h\":\"RocketMQ\",\"t\":[\"RocketMQ出自阿里公司的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进，消息可靠性上比 Kafka 更好。经历过多次双十一的考验，性能和稳定性还是值得信赖的，RocketMQ在阿里集团被广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog分发等场景。\",\"优点\",\"1、单机吞吐量：十万级；\",\"2、可用性：非常高，分布式架构；\",\"3、消息可靠性：经过参数优化配置，消息可以做到0丢失，RocketMQ 的所有消息都是持久化的，先写入系统 PAGECACHE，然后刷盘，可以保证内存与磁盘都有一份数据；\",\"4、功能支持：MQ功能较为完善，还是分布式的，扩展性好；\",\"5、支持10亿级别的消息堆积，不会因为堆积导致性能下降；\",\"6、源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控。\",\"缺点\",\"1、支持的客户端语言不多，目前是 java 及 c++，其中 c++ 不成熟；\",\"2、社区活跃度一般，作为国产的消息队列，相比国外的比较流行的同类产品，在国际上还没有那么流行，与周边生态系统的集成和兼容程度要略逊一筹；\",\"3、没有在 mq 核心中去实现 JMS 等接口，有些系统要迁移需要修改大量代码。\"]},\"1055\":{\"h\":\"Kafka\",\"t\":[\"Apache Kafka是一个分布式消息发布订阅系统。它最初由LinkedIn公司基于独特的设计实现为一个分布式的提交日志系统( a distributed commit log)，之后成为Apache项目的一部分。\",\"这是一款为大数据而生的消息中间件，在数据采集、传输、存储的过程中发挥着举足轻重的作用。\",\"优点\",\"1、性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高；\",\"2、性能卓越，单机写入TPS约在百万条/秒，消息大小10个字节；\",\"3、可用性：非常高，Kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用；\",\"4、消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;\",\"5、有优秀的第三方Kafka Web管理界面Kafka-Manager；\",\"6、在日志领域比较成熟，被多家公司和多个开源项目使用；\",\"7、功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用\",\"缺点\",\"由于“攒一波再处理”导致延迟比较高\"]},\"1056\":{\"h\":\"Pulsar\",\"t\":[\"Pulsar 是一个用于服务器到服务器的消息系统，具有多租户、高性能等优势。 Pulsar 最初由 Yahoo 开发，目前由 Apache 软件基金会管理。\",\"优点\",\"1、更多功能：Pulsar Function、多租户、Schema registry、n 层存储、多种消费模式和持久性模式等；\",\"2、Pulsar 的单个实例原生支持多个集群，可跨机房在集群间无缝地完成消息复制；\",\"3、极低的发布延迟和端到端延迟；\",\"4、可无缝扩展到超过一百万个 topic；\",\"5、简单的客户端 API，支持 Java、Go、Python 和 C++。\",\"6、Pulsar 的单个实例原生支持多个集群，可跨机房在集群间无缝地完成消息复制。\",\"缺点\",\"正处于成长期，流行度和成熟度相对没有那么高\"]},\"1057\":{\"h\":\"2.3、如何选择合适的消息队列\",\"t\":[\"如果对于消息队列的功能和性能要求不是很高，那么RabbitMQ就够了，开箱即用。\",\"如果系统使用消息队列主要场景是处理在线业务，比如在交易系统中用消息队列传递订单，RocketMQ 的低延迟和金融级的稳定性就可以满足。\",\"要处理海量的消息，像收集日志、监控信息或是前端的埋点这类数据，或是你的应用场景大量使用 了大数据、流计算相关的开源产品，那 Kafka 就是最合适的了。\",\"如果数据量很大，同时不希望有 Kafka 的高延迟，刚好业务场景是金融场景。RocketMQ 对 Topic 运营不太友好，特别是不支持按 Topic 删除失效消息，以及不具备宕机 Failover 能力。那么 Pulsar 可能就是你的一个选择了。\",\"维度\",\"RabbitMQ\",\"Kafka\",\"RocketMQ\",\"EMQX\",\"开发语言\",\"Erlang\",\"Scala/Java\",\"Java\",\"Erlang\",\"单机吞吐\",\"万级/秒\",\"十万级/秒\",\"万级/秒\",\"万级/秒\",\"延迟\",\"微妙级\",\"毫秒级\",\"毫秒级\",\"亚毫秒级\",\"单机支持队列数/连接数\",\"数万/数万\",\"数千（topic分区）/十万级\",\"数万/数万\",\"不适用/百万级\",\"消息协议\",\"amqp、mqtt、stomq\",\"自定义协议\",\"自定义协议\",\"mqtt\",\"易用性\",\"可视化界面，操作简单\",\"命令行+开源工具，操作中等\",\"控制台，操作中等\",\"企业版有可视化，操作简单\",\"适用场景\",\"中小规模企业级消息服务\",\"大规模日志处理、流计算\",\"中大规模的金融交易、订单处理\",\"物联网中的实时通讯\",\"提示\",\"EMQX是基于MQTT协议，使用主题(Topic)而不是队列来组织消息，为此没有队列数说法\"]},\"1058\":{\"h\":\"RocketMQ\",\"t\":[\"待定\"]},\"1059\":{\"c\":[\"mq\"]},\"1060\":{\"h\":\"Kafka-xiaobai\",\"t\":[\"这个版本就渐进式了解kafka\",\"假设两个服务：A和B\",\"B服务处理消息能力是100qps、但是A服务可发送200pqs，这么多的消息请求过来B服务很容易跨掉，那如何可用做的A可用正常产生这么多消息，B不被压垮并处理掉A的消息呢？\",\"加一层中间层 -- 消息队列kafka\",\"kafka_simper1\",\"先总结一些：\",\"kafka 是消息队列，像消息队列投递消息的是生产者，消费消息的是消费者。增加生产者和消费者的实例个数可以提升系统吞吐。多个消费者可以组成一个消费者组，不同消费者组维护自己的消费进度，互不打搅。\",\"kafka 将消息分为多个 topic，每个 topic 内部拆分为多个 partition，每个 partition 又有自己的副本，不同的 partition 会分布在不同的 broker 上，提升性能的同时，还增加了系统可用性和可扩展性。\"]},\"1061\":{\"h\":\"什么是消息队列\",\"t\":[\"我们首先可用想到的是在B服务中单独加一个队列，存储和消费消息,然后队列可用通过链表的结构，用一个offset定位处理的位置，这样B根据能力进行处理，执行完一个移动offset位置即可\",\"mq_simperOffset\",\"上面这个还有一个问题：若是B服务会奔溃。消息直接全部丢失，那怎么解决呢？\",\"用一个服务单独处理这些消息队列，即使B服务挂了也不影响。\",\"mq_simperProducerConsumer\",\"但这个只是一个简陋的消息组件，并没有高可用可性能高扩展的特性，下面开始优化\"]},\"1062\":{\"h\":\"高性能\",\"t\":[\"若是单个A和B的话，这个消息队列的吞吐量是很受限的，性能会很差，且消息队列会一直堆积直到奔溃，这么解决？\",\"解决方案：增加A和B的数量、将队列按topic拆分、一个topic继续拆分为Partiton让一个B对应一个Partition\",\"@slidestart\",\"提升性能，我们可用扩展多个消费者和生产者，这样消息队列的吞吐量就上去了\",\"mq_simper2\",\"消息队列有点多，就将消息队列按照topic进行分类，比如topic1、topic2等等，减低topic压力\",\"mq_simper3\",\"单个topic还是有点多，单个topic拆分几段，每段就是一个partition分区，每个消费者负责一个partition\",\"kafka_simperPartition\",\"@slideend\"]},\"1063\":{\"h\":\"高扩展\",\"t\":[\"随着 partition 变多，如果 partition 都在同一台机器上的话，就会导致单机 cpu 和内存过高影响整体系统性能。\",\"继续优化：申请更多设备，然后将partition分散部署到多个设备。这样拆分一个机器就是一个broker来缓解\",\"image-20250103181643832\"]},\"1064\":{\"h\":\"高可用\",\"t\":[\"上面这个还存在问题：若是一个partition所在的broker挂了，那里面的消息不直接丢失了嘛，就扯不上高可用了。\",\"解决方案：怕丢失都会想到多做备份嘛，然后可用考虑分布式存储系统使用的raft算法，来保证单个节点故障时保证一致性和高可用性\",\"我们可用为partition做一些副本，也就是replicas，并将这些分为Leader和Follower\",\"leader：负责生产者和消费者的读写请求\",\"Follower：只管同步leader的消息\",\"@slidestart\",\"正常运行时，follower会一直同步leader的消息（做备份）\",\"kafka_simperReplicas\",\"Leader所在的broker挂了，会从Follower选举一个作为leader继续工作\",\"kafka_simperAva\",\"@slideend\"]},\"1065\":{\"h\":\"持久化和过期策略\",\"t\":[\"若是挂一个broker还可用继续可用，那极端点，所有都挂了呢？数据直接丢失了\",\"为此还是要额外将数据存储到磁盘中去做持久化，这样重启依旧可继续工作\",\"那还会有问题：数据一直存储的话磁盘会奔溃，为此还有给一个保存的策略 -- retention policy（比如超过大小或者超过一定的时限就会清除掉）\"]},\"1066\":{\"h\":\"zookeeper\",\"t\":[\"好像上面组件太多了，而且每个组件都有自己的数据和状态，所以还需要有个组件去统一维护这些组件的状态信息，于是我们引入 ZooKeeper 组件。通过定期于broker通信获取整个集群的状态，判断哪些broker可用\",\"kafka_simperZookeeper\"]},\"1067\":{\"h\":\"Kafka是什么？\",\"t\":[\"到这里，当初那个简陋的消息队列，就成了一个高性能，高扩展性，高可用，支持持久化的超强消息队列，没错，它就是我们常说的消息队列 Kafka，上面涉及到各种概念，比如 partition 和 broker 什么的，都出自它。\",\"kafka_simperKafka\"]},\"1068\":{\"h\":\"kafka的使用场景\",\"t\":[\"消息队列是架构中最常见的中间件之一，使用场景之多，堪称万金油！ 比如上游流量忽高忽低，想要削峰填谷，提升 cpu/gpu 利用率，用它。 又比如系统过大，消息流向盘根错节，想要拆解组件，降低系统耦合，还是用它。 再比如秒杀活动，请求激增，想要保护服务的同时又尽量不影响用户，还得用它。 当然，凡事无绝对，方案还得根据实际情况来定，做架构做到最后，都是在做折中\"]},\"1069\":{\"c\":[\"mq\"]},\"1070\":{\"h\":\"Kong\"},\"1071\":{\"h\":\"01、概述\",\"t\":[\"API 网关（API Gateway）是一种服务器，充当应用程序编程接口（API）的入口点，执行多种任务以简化、安全和优化 API 通信。API 网关的主要功能包括：\",\"请求路由：将传入的 API 请求路由到相应的后端服务，基于请求的路径、参数等进行分发。\",\"协议转换： 处理不同协议中的请求和响应，允许客户端和后端服务使用不同的通信协议。\",\"请求和响应转换： 修改传入请求或传出响应的结构，以匹配所需的格式或标准。\",\"安全性： 强制执行身份验证和授权机制，确保 API 通信的安全性。\",\"速率限制： 控制客户端在特定时间段内发出的请求数量，以防滥用。\",\"日志记录和监控： 记录 API 请求和响应，提供监控和分析功能，以跟踪 API 的使用情况和性能。\",\"缓存： 缓存后端服务的响应，提高性能并减轻后端服务器的负载。\",\"错误处理： 处理请求期间的错误，提供标准化的错误响应，并可能屏蔽后端错误以防止直接传递给客户端。\",\"服务发现： 在微服务架构中，协助客户端动态定位适当的后端服务。\",\"API 文档： 生成并公开 API 的文档，以帮助开发人员理解和使用可用的端点。\",\"请求验证： 验证传入请求的结构和内容，确保其符合预期的格式和标准。\",\"总的来说，API 网关充当集中的、管理的入口，通过执行这些功能来增强整个 API 生态系统的管理和效率\"]},\"1072\":{\"h\":\"02、网关选择\",\"t\":[\"云原生领域APISIX更加优于Kong和Nginx，Apisix 是对标云原生网关的，严格来说和 Spring Cloud Gateway 这种业务形网关没什么可比性。\",\"如果是小公司，架构简单，业务单一，则使用Gateway作为业务网关完全够用，而且还便于定制化扩展。若架构复杂，业务流量大，k8s容器化部署，对标云原生的则可以使用Apisix。也可以Apisix和gateway搭配使用，流量网关使用Apisix，业务网关使用gateway，使用流量网关对公网入口流量进行转发到业务网关，再由业务网关将请求转发至各个系统\",\"image-20240703161531109\",\"常见的网关横向对比\",\"API网关\",\"Kong\",\"APISIX\",\"Trk\",\"APIgee\",\"部署方式\",\"单机和集群\",\"单机和集群\",\"单机和集群\",\"不支持单机\",\"数据存储\",\"Postgres和Cassandra\",\"etcd\",\"Redis\",\"Postgres、Cassandra和zookeeper\",\"是否开源\",\"apache2.0协议\",\"apache2.0协议\",\"MPL协议\",\"否\",\"核心技术\",\"Nginx+Lua\",\"Nginx+Lua\",\"Golang\",\"未知\",\"支持私有化部署\",\"是\",\"是\",\"是\",\"否\",\"自定义插件\",\"是\",\"是\",\"是\",\"否\",\"社区活跃度\",\"高\",\"高\",\"高\",\"中\",\"支持yaml\",\"是\",\"是\",\"否\",\"否\",\"选型依据:\",\"部署和运维成本：单机是否可以完成部署？还是需要多个节点配合？是否依赖外部的数据库？是否有web控制台可操控整个集群\",\"开源还是闭源：开源许可证是否友好？可否自己写插件扩展网关功能？使用后迁移其他网关成本怎么样？是否会锁定特定平台\",\"能否私有化部署：是否支持部署在用户自己的服务器？是否支持多云、混合云的部署模式？\",\"功能：是否支持动态上游、动态SSL证书、主被动健康检查等基本功能？是否对接常用的统计或监控组件？能否通过Restful API或yaml配置文件方式控制网关配置？\",\"社区：能否通过github、stack Overflow等联系方式联系开发者？背后是否有商业公司支持\",\"商业支持和价格：开源版本和商业版本价格是否差异很大？商业版本按照API调用次数还是订阅方式收费？\"]},\"1073\":{\"h\":\"03、Kong的安装\",\"t\":[\"Kong是一个开源的API网关，它是一个针对API的一个管理工具。你可以在那些上游服务之前额外地实现一些功能。\",\"Kong是基于NGINX和Apache Cassandra或PostgreSQL构建的，能提供易于使用的RESTfuI API来操作和配置API管理系统，所以它可以水平扩展多个Kong服务器，通过前置的负载均衡配置把请求均匀地分发到各个Server，来应对大批量的网络请求。\",\"8001:kong的管理的端口 : http:8001//+请求+参数\",\"8000:用户访问：统一路由端口\",\"1337: konga 地址\",\"参考文档：https://github.com/qianyugang/kong-docs-cn\",\"github文档：https://github.com/Kong/kong\"]},\"1074\":{\"h\":\"☁️使用Docker安装\"},\"1075\":{\"h\":\"1、启动数据库\",\"t\":[\"docker run -d --name kong-database \\\\ -p 5432:5432 \\\\ -e \\\"POSTGRES_USER=kong\\\" \\\\ -e \\\"POSTGRES_DB=kong\\\" \\\\ -e \\\"POSTGRES_PASSWORD=kong\\\" \\\\ postgres:12\",\"如果是云服务器记得开放：5432 端口。然后在本地连接即可。\"]},\"1076\":{\"h\":\"2、初始化数据\",\"t\":[\" docker run --rm \\\\ -e \\\"KONG_LOG_LEVEL=debug\\\" \\\\ -e \\\"KONG_DATABASE=postgres\\\" \\\\ -e \\\"KONG_PG_HOST=121.199.66.66\\\" \\\\ -e \\\"KONG_PG_USER=kong\\\" \\\\ -e \\\"KONG_PG_PASSWORD=kong\\\" \\\\ -e \\\"KONG_CASSANDRA_CONTACT_POINTS=kong-database\\\" \\\\ kong:latest kong migrations bootstrap\"]},\"1077\":{\"h\":\"3：安装方式一：Docker安装Kong\",\"t\":[\"docker run -d --name kong \\\\ -e \\\"KONG_DATABASE=postgres\\\" \\\\ -e \\\"KONG_PG_HOST=121.199.66.66\\\" \\\\ -e \\\"KONG_PG_PASSWORD=kong\\\" \\\\ -e \\\"KONG_CASSANDRA_CONTACT_POINTS=kong-database\\\" \\\\ -e \\\"KONG_PROXY_ACCESS_LOG=/dev/stdout\\\" \\\\ -e \\\"KONG_ADMIN_ACCESS_LOG=/dev/stdout\\\" \\\\ -e \\\"KONG_PROXY_ERROR_LOG=/dev/stderr\\\" \\\\ -e \\\"KONG_ADMIN_ERROR_LOG=/dev/stderr\\\" \\\\ -e \\\"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl\\\" \\\\ -p 8000:8000 \\\\ -p 8443:8443 \\\\ -p 8001:8001 \\\\ -p 8444:8444 \\\\ kong:latest\"]},\"1078\":{\"h\":\"4、安装方式二：手动安装Kong\",\"t\":[\"可以到这里找下载链接： https://docs.konghq.com/install/centos/\",\"可以到这里找下载链接： https://docs.konghq.com/install/centos/\",\"curl -1sLf \\\"https://packages.konghq.com/public/gateway-37/config.rpm.txt?distro=el&codename=$(rpm --eval '%{rhel}')\\\" | sudo tee /etc/yum.repos.d/kong-gateway-37.repo sudo yum -q makecache -y --disablerepo='*' --enablerepo='kong-gateway-37' sudo yum install -y kong-3.7.0\",\"编辑Kong配置\",\"cp /etc/kong/kong.conf.default /etc/kong/kong.conf vim /etc/kong/kong.conf #修改如下内容 database = postgres pg_host = 192.168.1.102 # 这⾥得配置对外ip地址 不能是127.0.0.1 pg_port = 5432 # Port of the Postgres server. pg_timeout = 5000 # Defines the timeout (in ms), for connecting, # reading and writing. pg_user = kong # Postgres user. pg_password = kong # Postgres user's password. pg_database = kong # The database name to connect to. dns_resolver = 127.0.0.1:8600 #这个配置很重要，配置的是consul的dns端⼝，默认是8600 可以⾃ admin_listen = 0.0.0.0:8001 reuseport backlog=16384, 127.0.0.1:8444 http2 ssl reuseport backlog=16384 proxy_listen = 0.0.0.0:8000 reuseport backlog=16384, 0.0.0.0:8443 http2 ssl reuseport backlog=16384\",\"初始化kong的数据库\",\"kong migrations bootstrap up -c /etc/kong/kong.conf #这⾥是初始化⽣成数据库 kong start -c /etc/kong/kong.conf #添加防⽕墙规则 firewall-cmd --zone=public --add-port=8001/tcp --permanent firewall-cmd --zone=public --add-port=8000/tcp --permanent # 如果是云服务器 直接在安全组中，开放8000、8001即可。\",\"如果出错 Error: /usr/local/share/lua/5.1/kong/cmd/utils/migrations.lua:20: New migrations available; run 'kong migrations up' to proceed 执行如下：\",\"kong migrations up --v\",\"然后在启动：\",\"[root@iZf8z8fcvqy10f6a60f8ayZ ~]# kong start -c /etc/kong/kong.conf Database has pending migrations: core: 016_280_to_300 acme: 003_350_to_360 ai-proxy: 001_360_to_370 http-log: 001_280_to_300 opentelemetry: 001_331_to_332 post-function: 001_280_to_300 pre-function: 001_280_to_300 rate-limiting: 006_350_to_360 response-ratelimiting: 001_350_to_360 Kong started\",\"说明kong安装成功了。\",\"访问查看kong的节点信息：http://121.199.66.66:8001/\"]},\"1079\":{\"h\":\"5、 安装konga\",\"t\":[\"docker run -d -p 1337:1337 --name konga pantsel/konga\",\"安装成功以后访问如下：http://121.199.66.66:1337/\",\"注册账号\",\"登录账号\",\"配置kongadmin的链接\",\"image\",\"创建链接如下：\",\"image\",\"配置信息如下：\",\"image\"]},\"1080\":{\"h\":\"04、开始配置Kong服务和路由\"},\"1081\":{\"h\":\"1.准备工作\",\"t\":[\"部署Nacos\",\"ls -lrt /etc/alternatives/java\",\"安装MySQL\",\"docker run -di --name=tensquare_mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=mkxiaoer centos/mysql-57-centos7\",\"安装Redis\",\"docker run --name myredis -d redis redis-server --requirepass mkxiaoer\",\"把goods-api/goods-srv都部署道服务器上即可\",\"开启链路追踪服务jaeger\",\" curl -i -X POST http://localhost:8001/services/goods_list/routes \\\\ --data 'hosts[]=121.199.66.66' \\\\ --data 'name=商品明' \\\\ --data 'strip_path=false' \\\\ --data 'paths[]=/'\\\\ --data 'methods[]=GET&methods[]=POST'\"]},\"1082\":{\"h\":\"2.测试\",\"t\":[\"http://121.199.66.66:9200/api/v1/goods/detail/1\",\"{ \\\"code\\\": 20000, \\\"data\\\": { \\\"id\\\": 1, \\\"createTime\\\": \\\"2024-05-07 13:07:28 +0800 CST\\\", \\\"updateTime\\\": \\\"2024-05-07 13:07:28 +0800 CST\\\", \\\"name\\\": \\\"商品名称商品名称商品名称商品名称商品名称\\\", \\\"sn\\\": \\\"商品名称商品名称商品名称商品名称商品名称\\\", \\\"categoryId\\\": 2, \\\"onSale\\\": true, \\\"isFree\\\": true, \\\"desc\\\": \\\"商品名称商品名称商品名称商品名称商品名称\\\", \\\"viewCount\\\": 1, \\\"isComment\\\": true, \\\"salePrice\\\": 1, \\\"price\\\": 1, \\\"img\\\": \\\"/static/img/goods/p1.jpg\\\", \\\"images\\\": \\\"/static/img/goods/p1.jpg\\\", \\\"contentImgs\\\": \\\"/static/img/goods/p1.jpg\\\" }, \\\"msg\\\": \\\"success\\\" }\",\"说明接口通畅，nacos服务正常，jeager出现链路日志，说明一切正常。\"]},\"1083\":{\"h\":\"3.配置Kong网关代理\"},\"1084\":{\"h\":\"a.配置服务Services\",\"t\":[\"image\",\"url 如果输入是：http://ip:9200/那么下面的protocol/host/port就不用输入了。也就是说url=protocol+host+port\"]},\"1085\":{\"h\":\"b.添加路由\",\"t\":[\"image_6\",\"image-20240704001646729\",\"记得path的位置输入完毕/以后，要敲回车。\"]},\"1086\":{\"h\":\"c.访问测试\",\"t\":[\"原来访问的地址是：\",\"http://121.199.66.66:9200/api/v1/goods/detail/1\",\"被kong代理以后的地址是：\",\"http://121.199.66.66:8000/api/v1/goods/detail/1\",\"其它的都是如此。\",\"从这里可以得出结论：上面配置的path=/ 其实就是：http://121.199.66.66:8000 == http://121.199.66.66:9200\"]},\"1087\":{\"h\":\"d.配置商品服务的路径\",\"t\":[\"image\",\"从这里可以得出结论：上面配置的path=/api 其实就是：\",\"公式：http://121.199.66.66:8000/api==http://121.199.66.66:9200\",\"原来访问的地址是：\",\"http://121.199.66.66:9200/api/v1/goods/detail/1\",\"被kong代理以后的地址是：\",\"http://121.199.66.66:8000/api/api/v1/goods/detail/1\",\"解读：\",\"http://121.199.66.66:8000/api (kong代理的路由地址) + /api/v1/goods/detail/1(商品服务的地址)\",\"如果想去掉一级/api，自然就是修改程序的router.go的地址，把/api这级别去掉就行，用kong的/api地址即可。否则会就重复出现。让开发者产生怪异的理解。如下：\",\"package initialize import ( \\\"github.com/gin-gonic/gin\\\" middlewares \\\"kuangstudy-mall/apis/goods-web/middleawares\\\" \\\"kuangstudy-mall/apis/goods-web/router\\\" \\\"net/http\\\" ) func InitWebRouter() *gin.Engine { // 开始整合ginweb框架 Router := gin.Default() Router.GET(\\\"/ping\\\", func(context *gin.Context) { context.JSON(http.StatusOK, \\\"pong\\\") }) // 配置跨域，身份鉴权 Router.Use(middlewares.Cors()) // 进行路由组的定义 // routerGroup := Router.Group(\\\"/api/v1\\\") 修改前 routerGroup := Router.Group(\\\"/v1\\\")//修改后 // 用户路由接口初始化 router.InitGoodsRouter(routerGroup) return Router }\"]},\"1088\":{\"h\":\"05、Kong整合JWT\"},\"1089\":{\"h\":\"1：新建一个consumer\"},\"1090\":{\"h\":\"2：给consumer添加一个认证jwt\",\"t\":[\"image\",\"customClaims := jtoken.CustomClaims{ ID: userInfoResponse.Id, NickName: userInfoResponse.NickName, AuthorityId: userInfoResponse.Role, StandardClaims: jwt.StandardClaims{ NotBefore: time.Now().Unix(), ExpiresAt: time.Now().Unix() + 60*60*24*300, Issuer: \\\"cc\\\", // 上面的key和这里一致 }, }\",\"screat必须和配置文件一致：\",\"jwt: key: 0*%fMk^#4zT2iNc4Xg81\"]},\"1091\":{\"h\":\"3：配置全局的jwt\",\"t\":[\"image-20240704023637382\",\"image-20240704023655097\",\"添加头部信息:\",\"image-20240704025833132\",\"这里名字必须和代码中的一致。\"]},\"1092\":{\"h\":\"4：修改代码\",\"t\":[\"因为kong的token会携带一个前缀：Bearer所以代码中必须截断这个前缀才可以去验证。\",\"package middlewares import ( \\\"github.com/gin-gonic/gin\\\" \\\"kuangstudy-mall/apis/goods-web/jtoken\\\" \\\"net/http\\\" \\\"strings\\\" ) /* * jwt的拦截器验证 */ func JWTAuth() gin.HandlerFunc { return func(c *gin.Context) { // 我们这里jwt鉴权取头部信息 x-token 登录时回返回token信息 这里前端需要把token存储到cookie或者本地localSstorage中 不过需要跟后端协商过期时间 可以约定刷新令牌或者重新登录 token := c.Request.Header.Get(\\\"x-token\\\") if token == \\\"\\\" { c.JSON(http.StatusUnauthorized, map[string]any{ \\\"code\\\": 601, \\\"data\\\": \\\"\\\", \\\"msg\\\": \\\"请登录\\\", }) // 挂起 c.Abort() return } token = strings.Split(token, \\\" \\\")[1] j := jtoken.NewJWT() // parseToken 解析token包含的信息 claims, err := j.ParseToken(token) if err != nil { if err == jtoken.TokenExpired { if err == jtoken.TokenExpired { // 可以考虑续期或者刷新token c.JSON(http.StatusUnauthorized, map[string]any{ \\\"code\\\": 601, \\\"data\\\": \\\"\\\", \\\"msg\\\": \\\"授权已过期\\\", }) c.Abort() return } } c.JSON(http.StatusUnauthorized, \\\"未登陆\\\") c.Abort() return } c.Set(\\\"claims\\\", claims) c.Set(\\\"userId\\\", claims.ID) c.Set(\\\"userName\\\", claims.NickName) c.Set(\\\"role\\\", claims.AuthorityId) c.Next() } }\"]},\"1093\":{\"h\":\"5：开始测试\",\"t\":[\"在登录的时候生成token，然后添加成为全局的即可\",\"image\",\"如果没有增加前缀：Bearer\",\"image-20240704030334842\",\"增加了\",\"image-20240704030351447\",\"说明配置成功了\",\"这里要注意几个点\",\"1：创建consumer时候的key必须和issuser一致\",\"2：screatkey必须和程序代码的保持一致\",\"3：添加全局的jwt的时候头部的token必须是：x-token\",\"4：程序代码必须截断 Bearer\",\"5：开始测试\"]},\"1094\":{\"h\":\"06、Kong限制限流器访问\"},\"1095\":{\"h\":\"1：添加插件\",\"t\":[\"image\"]},\"1096\":{\"h\":\"2：配置Bot Detection\",\"t\":[\"image-20240704031951936\",\"3：开始测试\",\"image\",\"如果你要指派给conumer就填写，如果不填写就是全局的，前面的jwt也一样，不写consumer就是全局，写了就是针对某个consumer进行生效。\"]},\"1097\":{\"h\":\"07、Kong请求大小参数限制\"},\"1098\":{\"h\":\"1: 添加插件\",\"t\":[\"image\",\"image-20240704032839921\"]},\"1099\":{\"h\":\"2：开始测试\",\"t\":[\"image\",\"测试\",\"image-20240704032851910\"]},\"1100\":{\"h\":\"08、利用kongA进行限流\"},\"1101\":{\"h\":\"1：添加限流插件\",\"t\":[\"image\",\"image-20240704033828317\"]},\"1102\":{\"h\":\"2：基于ip地址的每分钟2次请求\",\"t\":[\"image\"]},\"1103\":{\"h\":\"3：开始测试\",\"t\":[\"连续访问3次，前面2次正常，后面就出现限流的状态429和错误提示信息\",\"image-20240704033850225\"]},\"1104\":{\"c\":[\"web\"]},\"1105\":{\"h\":\"Nginx\"},\"1106\":{\"h\":\"01：Nginx的概述\"},\"1107\":{\"h\":\"什么是Nginx\",\"t\":[\"Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。底层是用C语言开发。\",\"Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。\",\"主要功能反向代理\",\"通过配置文件可以实现集群和负载均衡\",\"静态资源虚拟化\",\"限流等\"]},\"1108\":{\"h\":\"常见的服务器\",\"t\":[\"微软的IIS asp.net\",\"Weblogs、Jboss 传统行业。ERP/电信/金融/物流\",\"Tomcat、Jetty\",\"Apache http、Nginx 静态服务、反向代理\",\"Netty 高性能服务器编程。比如：webscoket,webserver,语音聊天室等\",\"对比：2019 年 12 月 Web 服务器调查 | Netcraft --- December 2019 Web Server Survey | Netcraft\"]},\"1109\":{\"h\":\"02：Nginx的安装\",\"t\":[\"nginx下载：http://nginx.org/en/download.html\",\"centos 7.8\",\"服务器：阿里云\"]},\"1110\":{\"h\":\"01、创建nginx服务器目录\",\"t\":[\"mkdir -p /www/kuangstudy/nignx cd /www/kuangstudy/nignx\"]},\"1111\":{\"h\":\"02、下载安装\",\"t\":[\"wget http://nginx.org/download/nginx-1.20.1.tar.gz\"]},\"1112\":{\"h\":\"03、安装编译工具及库文件\",\"t\":[\"yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel\"]},\"1113\":{\"h\":\"04、解压nginx\",\"t\":[\"tar -zxvf nginx-1.20.1.tar.gz\"]},\"1114\":{\"h\":\"05、创建nginx的临时目录\",\"t\":[\"mkdir -p /var/temp/nginx\"]},\"1115\":{\"h\":\"06、进入安装包目录\",\"t\":[\"cd nginx-1.20.1\"]},\"1116\":{\"h\":\"07、配置nginx的安装路径\",\"t\":[\"默认配置\",\"./configure\",\"安装以后的目录信息\",\" nginx path prefix: \\\"/usr/local/nginx/nginx\\\" nginx binary file: \\\"/usr/local/nginx/nginx/sbin/nginx\\\" nginx modules path: \\\"/usr/local/nginx/nginx/modules\\\" nginx configuration prefix: \\\"/usr/local/nginx/nginx/conf\\\" nginx configuration file: \\\"/usr/local/nginx/nginx/conf/nginx.conf\\\" nginx pid file: \\\"/var/run/nginx/nginx.pid\\\" nginx error log file: \\\"/var/log/nginx/error.log\\\" nginx http access log file: \\\"/var/log/nginx/access.log\\\" nginx http client request body temporary files: \\\"/var/temp/nginx/client\\\" nginx http proxy temporary files: \\\"/var/temp/nginx/proxy\\\" nginx http fastcgi temporary files: \\\"/var/temp/nginx/fastgi\\\" nginx http uwsgi temporary files: \\\"/var/temp/nginx/uwsgi\\\" nginx http scgi temporary files: \\\"/var/temp/nginx/scgi\\\"\",\"指定配置\",\"./configure \\\\ --prefix=/usr/local/nginx \\\\ --pid-path=/var/run/nginx/nginx.pid \\\\ --lock-path=/var/lock/nginx.lock \\\\ --error-log-path=/var/log/nginx/error.log \\\\ --http-log-path=/var/log/nginx/access.log \\\\ --with-http_gzip_static_module \\\\ --http-client-body-temp-path=/var/temp/nginx/client \\\\ --http-proxy-temp-path=/var/temp/nginx/proxy \\\\ --http-fastcgi-temp-path=/var/temp/nginx/fastgi \\\\ --http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\\\ --http-scgi-temp-path=/var/temp/nginx/scgi \\\\ --with-http_stub_status_module \\\\ --with-http_ssl_module\",\"安装的信息如下：\",\"nginx path prefix: \\\"/usr/local/nginx\\\" nginx binary file: \\\"/usr/local/nginx/sbin/nginx\\\" nginx modules path: \\\"/usr/local/nginx/modules\\\" nginx configuration prefix: \\\"/usr/local/nginx/conf\\\" nginx configuration file: \\\"/usr/local/nginx/conf/nginx.conf\\\" nginx pid file: \\\"/var/run/nginx.pid\\\" nginx error log file: \\\"/var/log/nginx/error.log\\\" nginx http access log file: \\\"/var/log/nginx/access.log\\\" nginx http client request body temporary files: \\\"/var/temp/nginx/client\\\" nginx http proxy temporary files: \\\"/var/temp/nginx/proxy\\\" nginx http fastcgi temporary files: \\\"/var/temp/nginx/fastgi\\\" nginx http uwsgi temporary files: \\\"/var/temp/nginx/uwsgi\\\" nginx http scgi temporary files: \\\"/var/temp/nginx/scgi\\\"\",\"image-20210821111709845\"]},\"1117\":{\"h\":\"08、 make编译\",\"t\":[\"make\"]},\"1118\":{\"h\":\"09、 安装\",\"t\":[\"make install\"]},\"1119\":{\"h\":\"10、 进入sbin目录启动nginx\",\"t\":[\"./nginx\",\"#停止： ./nginx -s stop #重新加载： ./nginx -s reload\"]},\"1120\":{\"h\":\"11、打开浏览器，访问虚拟机所处内网ip即可打开nginx默认页面，显示如下便表示安装成功：\",\"t\":[\"http://ip\",\"image-20210821141421135\"]},\"1121\":{\"h\":\"12、注意事项\",\"t\":[\"如果在云服务器安装，需要开启默认的nginx端口：80\",\"如果在虚拟机安装，需要关闭防火墙\",\"本地win或mac需要关闭防火墙\",\"nginx的安装目录是：/usr/local/nginx\"]},\"1122\":{\"h\":\"13、配置nginx的环境变量\",\"t\":[\"配置的好处：就是可以任意目录下执行nginx的启动，关闭，推出，重启加载。\",\"vim /etc/profile\",\"在文件的尾部追加如下：\",\"export NGINX_HOME=/usr/local/nginx export PATH=$NGINX_HOME/sbin:$PATH\",\"重启配置文件\",\"source /etc/profile\"]},\"1123\":{\"h\":\"14、加载默认页面\",\"t\":[\"1、访问：http://139.224.164.101:80/ ---->Nginx--监听80端口-->找到对应server---->映射路由/----> html中的index.html\",\"image-20210821220258886\",\"2、打开/usr/local/nginx/conf/nginx.conf如下\",\"worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; gzip on; server { # 监听端口80 listen 80; # 请求时候的ip,也可以是具体的ip，也可以是域名 server_name localhost; # 找到请求时候的服务器路由资源 location / { # root是根，html是一个相对路径，前面没有斜线哦，当然你也可以写绝对路径 root html; # 首页指定的页面名称 index index.html index.htm; } # 出错的时候进行访问的页面 error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } }\",\"切记：注意修改配置文件一定要：重启nginx服务，访问生效\",\"nginx -s reload\",\"http://139.224.164.101/\"]},\"1124\":{\"h\":\"03：Nginx的进程结构\"},\"1125\":{\"h\":\"Nginx的进程模型\"},\"1126\":{\"h\":\"概述\",\"t\":[\"master进程：主进程，相当于一个领导者\",\"worker进程：工作进程，相当于一个工作人，它是为master进程去服务的。\",\"ps -ef | grep nginx\",\"image\",\"master进程有且只有一个\",\"worker进程，默认情况下：也只有一个，但是可以在配置文件中去配置worker的进程数量。\",\"#user nobody; worker_processes 2;\",\"重启nginx服务\",\"#重启 nginx -s reload #检查配置文件是否有误 nginx -t\",\"再次查看如下：\",\"ps -ef | grep nginx\",\"image\"]},\"1127\":{\"h\":\"总结\",\"t\":[\"master会把所有的请求信号，分配给worker进程去进行处理。相当于老板在外面接了很多的任务，然后分派给小伙伴去完成。\",\"master会监控worker，是否正常还是发生了异常退出了 ，这个时候master会重启启动一个新的worker去重启执行任务。就相当于员工辞职了，老板需要重新在招聘一个员工一样的道理。这些信号有那些如下：\",\"nginx -s quit nginx -s reload nginx -s stop nginx -t\",\"这些信号都是worker去执行和处理。\",\"image-20210821200948492\",\"master和worker是一个进程模型，这样的好处可以起到隔离的作用。\"]},\"1128\":{\"h\":\"Nginx的worker抢占机制\",\"t\":[\"image-20210821201134971\",\"1、通过配置文件，修改worker 进程的数量，假设是3个。\",\"2、其原理是：master通过主进程fork了三个工作worker进程。这个时候如果有客户端有请求进入nginx服务器。\",\"3、3个worker进程会通过争抢accept_mutex锁，来处理某个客户端的请求。那个worker进程抢到，就那个worker进程去处理这个客户端请求。\"]},\"1129\":{\"h\":\"04、Nginx.conf配置文件分析\"},\"1130\":{\"h\":\"Nginx.conf配置文件分析\",\"t\":[\"image-20210821150531906\",\"# 设置worker进程的用户，指的linux中的用户，会涉及到nginx操作目录或文件的一些权限，默认为 nobody。 # 默认情况是：nobody，你注释的情况下也是nobody。当然你也可以修改成 user root，修改以后记得重启翻方可生效，然后通过ps -ef | grep nginx 可以查看效果。 #user nobody; #worker进程工作数设置，一般来说CPU有几个，就设置几个，或者设置为N-1也行 worker_processes 2; # nginx 日志级别 debug | info | notice | warn | error | crit | alert | emerg ，错误级别从左到右越来越大 # 默认是：emerg级别，存储的路在 /var/log/nginx/error.log #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; # 设置nginx进程 pid #pid logs/nginx.pid; # 配置系统的线程模型和工作线程的线程数量 events { # linux系统默认使用epoll use epoll; # 每个工作进程的最大允许连接的客户端最大连接数 ab/jmeter # 点 cpu neicun 硬盘 sso jmter 100000 404 500 worker_connections 10240; } # http 是指令块，针对http网络传输的一些指令配置 http { # 包含和导入外部的文件，进行模块化的划分。 include mime.types; default_type application/octet-stream; # 配置日志格式 #log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' # '$status $body_bytes_sent \\\"$http_referer\\\" ' # '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; # 给于access_log的格式是main格式，然后把每次请求的信息写入到logs/access.log中。 #access_log logs/access.log main; # 启用文件的高效传输，打开有利于文件传输的性能 sendfile on; #tcp_nopush它必须和sendfile使用，并且sendfile打开了才生效，它的含义是：当请求的数据包累积了到一定的大小的时候，在进行发送。 #tcp_nopush on; # 客户端连接服务器的超时时间，默认是65秒，0代表不保持连接---- #keepalive_timeout 0; keepalive_timeout 65; # 开启gzip,利于文件和请求数据的传输。 gzip on; http://47.115.230.36:80/ # 服务虚拟主机配置 server { # 监听端口 listen 80; # 监听nginx所在服务得ip，域名或者localhost server_name localhost; #access_log logs/host.access.log main; location / { root html; index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } # 服务虚拟主机配置 server { # 监听端口 listen 8087; # 监听服务器ip，域名，或者localhost server_name localhost; location / { root html; index newindex.html; } } }\",\"记得重启nginx服务器\",\"nginx -s reload\",\"nginx的配置文件中的server\",\"要么端口隔离 \",\"如果都要占用端口都是80，那么你必须使用server_name进行隔离\",\"要么域名隔离\",\"但是不允许同时出现相同端口和相同域名\"]},\"1131\":{\"h\":\"Nginx外部配置文件include 包含\",\"t\":[\"include 引入外部配置，提高可读性，避免单个配置文件过大\",\"新建一个yykk.conf,如下：\",\"# 服务虚拟主机配置 server { # 监听端口 listen 80; # 监听服务器ip，域名，或者localhost server_name localhost; #access_log logs/host.access.log main; location / { root html; index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } # 服务虚拟主机配置 server { # 监听端口 listen 8087; # 监听服务器ip，域名，或者localhost server_name localhost; location / { root html; index newindex.html; } }\",\"然后在nginx.conf文件中包含这个文件即可，如下：\",\"# 当worker进程在执行的时候，它是由操作系统的每一个用户去进行执行的，master是root用户执行的。 # 默认情况是：nobody，你注释的情况下也是nobody。当然你也可以修改成 user root，修改以后记得重启翻方可生效，然后通过ps -ef | grep nginx 可以查看效果。 #user nobody; # worker进程的数量，一般cpu设置：cpu核数-1 worker_processes 2; # 配置错误日志的目录。日志的级别是：debug(最全面) info notice warn error crit(最严重) # 默认是：error级别，存储的路在 /var/log/nginx/error.log #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; # #pid logs/nginx.pid; # 配置系统的线程模型和工作线程的线程数量 events { # linux系统默认使用epoll use epoll; # 每个工作进程的最大允许连接的客户端最大连接数 worker_connections 10240; } # 配置网络传输的模块 http { # 包含和导入外部的文件，进行模块化的划分。 include mime.types; default_type application/octet-stream; # 配置日志格式 #log_format logmain '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' '$status $body_bytes_sent \\\"$http_referer\\\" ' '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; # 给于access_log的格式是main格式，然后把每次请求的信息写入到logs/access.log中。 #access_log /var/log/nginx/access_server1.log logmain; # 启用文件的高效传输，打开有利于文件传输的性能 sendfile on; #tcp_nopush它必须和sendfile使用，并且sendfile打开了才生效，它的含义是：当请求的数据包累积了到一定的大小的时候，在进行发送。 tcp_nopush on; # 客户端连接服务器的超时时间，默认是65秒，0代表不保持连接。 #keepalive_timeout 0; keepalive_timeout 65; # 建议开启gzip,利于文件和请求数据的传输。同时消耗cpu时间 gzip on; # 这里进行包含 include yykk.conf; }\",\"两个文件的所处的文件目录关系：\",\"image-20210821155648853\",\"然后在重启即可：\",\"nginx -t nginx -s reload\",\"在浏览器访问依然可以正常的执行。\"]},\"1132\":{\"h\":\"查看Nginx的配置\",\"t\":[\"查看nginx安装目录和日志的目录，就使用nginx -V\",\"但是前提是：你必须是使用./configuration的指定目录安全。\",\"nginx -V\",\"[root@iZuf62zev3la2ivndnxra5Z nginx]# nginx -V nginx version: nginx/1.20.1 built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) built with OpenSSL 1.0.2k-fips 26 Jan 2017 TLS SNI support enabled configure arguments: --prefix=/usr/local/nginx/nginx --pid-path=/var/run/nginx/nginx.pid --lock-path=/var/lock/nginx.lock --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-http_gzip_static_module --http-client-body-temp-path=/var/temp/nginx/client --http-proxy-temp-path=/var/temp/nginx/proxy --http-fastcgi-temp-path=/var/temp/nginx/fastgi --http-uwsgi-temp-path=/var/temp/nginx/uwsgi --http-scgi-temp-path=/var/temp/nginx/scgi --with-http_stub_status_module --with-http_ssl_module\"]},\"1133\":{\"h\":\"nginx常量表\",\"t\":[\"$args #请求中的参数值 $query_string #同 $args $arg_NAME #GET请求中NAME的值 $is_args #如果请求中有参数，值为\\\"?\\\"，否则为空字符串 $uri #请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如\\\"/foo/bar.html\\\"。 $document_uri #同 $uri $document_root #当前请求的文档根目录或别名 $host #优先级：HTTP请求行的主机名>\\\"HOST\\\"请求头字段>符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称 $hostname #主机名 $https #如果开启了SSL安全模式，值为\\\"on\\\"，否则为空字符串。 $binary_remote_addr #客户端地址的二进制形式，固定长度为4个字节 $body_bytes_sent #传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的\\\"%B\\\"参数保持兼容 $bytes_sent #传输给客户端的字节数 $connection #TCP连接的序列号 $connection_requests #TCP连接当前的请求数量 $content_length #\\\"Content-Length\\\" 请求头字段 $content_type #\\\"Content-Type\\\" 请求头字段 $cookie_name #cookie名称 $limit_rate #用于设置响应的速度限制 $msec #当前的Unix时间戳 $nginx_version #nginx版本 $pid #工作进程的PID $pipe #如果请求来自管道通信，值为\\\"p\\\"，否则为\\\".\\\" $proxy_protocol_addr #获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串 $realpath_root #当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径 $remote_addr #客户端地址 $remote_port #客户端端口 $remote_user #用于HTTP基础认证服务的用户名 $request #代表客户端的请求地址 $request_body #客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器 $request_body_file #将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off $request_completion #如果请求成功，值为\\\"OK\\\"，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空 $request_filename #当前连接请求的文件路径，由root或alias指令与URI请求生成 $request_length #请求的长度 (包括请求的地址，http请求头和请求主体) $request_method #HTTP请求方法，通常为\\\"GET\\\"或\\\"POST\\\" $request_time #处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。 $request_uri #这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：\\\"/cnphp/test.php?arg=freemouse\\\" $scheme #请求使用的Web协议，\\\"http\\\" 或 \\\"https\\\" $server_addr #服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中 $server_name #服务器名 $server_port #服务器端口 $server_protocol #服务器的HTTP版本，通常为 \\\"HTTP/1.0\\\" 或 \\\"HTTP/1.1\\\" $status #HTTP响应代码 $time_iso8601 #服务器时间的ISO 8610格式 $time_local #服务器时间（LOG Format 格式） $cookie_NAME #客户端请求Header头中的cookie变量，前缀\\\"$cookie_\\\"加上cookie名称的变量，该变量的值即为cookie名称的值 $http_NAME #匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：\\\"Accept-Language\\\"，$http_accept_language即可 $http_cookie $http_host #请求地址，即浏览器中你输入的地址（IP或域名） $http_referer #url跳转来源,用来记录从那个页面链接访问过来的 $http_user_agent #用户终端浏览器等信息 $http_x_forwarded_for $sent_http_NAME #可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可 $sent_http_cache_control $sent_http_connection $sent_http_content_type $sent_http_keep_alive $sent_http_last_modified $sent_http_location $sent_http_transfer_encoding\"]},\"1134\":{\"h\":\"05：Nginx关于root和alias\"},\"1135\":{\"h\":\"01、上传静态资源到服务器\",\"t\":[\"root = localtion /asserts ===/www/kuangstudy/resource - /asserts/1.jpg - /asserts/2.html http://47.115.230.36:8088 /asserts/1.jpg alias location /asserts === =/www/kuangstudy/resource - /1.jpg - /2.html http://47.115.230.36:8088/asserts /1.jpg —- http://47.115.230.36:8088/www/kuangstudy/resource/1.jpg\",\"将静态资源目录上传到服务器/www/kuangstudy/resources目录下，如果你没有创建请创建：\",\"mkdir -p /www/kuangstudy/resources\"]},\"1136\":{\"h\":\"02、打开yykk.conf文件\",\"t\":[\"增加静态资源服务器如下:\",\"# 静态资源服务器 server { # 监听端口 listen 80; # 监听服务器ip，域名，或者localhost server_name localhost; location / { root /www/kuangstudy/resources; index index.html; } # http://139.224.164.101:8088/res/css/login.css location /res { alias /www/kuangstudy/resources/asserts/; } # http://139.224.164.101:8088/asserts/css/login.css location /asserts { root /www/kuangstudy/resources; } } server { listen 80; server_name ip/域名; location /xxx{ root/alias /www/yyy/ } }\"]},\"1137\":{\"h\":\"03、验证和重启nginx\",\"t\":[\"nginx -t nginx -s reload\"]},\"1138\":{\"h\":\"04、然后访问nginx的静态资源服务器\",\"t\":[\"http://139.224.164.101:8088/ksdadmin/\"]},\"1139\":{\"h\":\"05、alias与root的区别\",\"t\":[\"alias与root指定的url意义不同\",\"root和alias都可以定义在location模块中，都是用来指定请求资源的真实路径，比如：\",\"location /abc/ { root /data/www; }\",\"请求http://IP:port/abc/123.png时，那么在服务器里面对应的真正的资源是：/data/www/abc/123.png\",\"注意：root真实路径是root指定的值加上location指定的值。\",\"location /abc/ { alias /data/www; }\",\"请求http://IP:port/abc/123.png时，那么在服务器里面对应的真正的资源是：/data/www/123.png\",\"注意：alias真实路径是alias指定的值，不包含location指定的值了。\",\"在一个location中，alias可以存在多个，但是root只能有一个\",\"alias只能存在与location中，但是root可以用在server、http和location中\",\"root和alias如果目录没有指定盘符/ 代表就是直接从nginx安装目录开始查询：/user/local/nginx/html\"]},\"1140\":{\"h\":\"06：Nginx关于Location\"},\"1141\":{\"h\":\"01、默认匹配规则\",\"t\":[\"location其实就和springmvc的路由规则是类似的。它是配置在server中，如下\",\"# 服务虚拟主机配置 server { # 监听端口 listen 80; # 监听服务器ip，域名，或者localhost server_name localhost; #access_log logs/host.access.log main; location / { root html; index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } }\",\"上面的含义是：在root指定的html目录中找到index.html或者index.htm文件。\"]},\"1142\":{\"h\":\"02、精准匹配规则\",\"t\":[\"# 服务虚拟主机配置 server { # 监听端口 listen 8087; # 监听服务器ip，域名，或者localhost server_name localhost; # location / { # root html; # index newindex.html; # } # 精准匹配 location = / { root html; index newindex.html; } # 精准匹配 location = /asserts/css/login.css { root /www/kuangstudy/resources; } }\",\"注意root的路径是：你访问的是：https://ip:port/asserts/css/login.css 实际上在服务器上的目录是：\",\"/www/kuangstudy/resources/asserts/css/login.css\"]},\"1143\":{\"h\":\"03、正则匹配规则\",\"t\":[\"# 服务虚拟主机配置 server { # 监听端口 listen 8085; # 监听服务器ip，域名，或者localhost server_name localhost; # 正则表达式匹配 *代表的是不区分大小写 location ^~ /asserts/ { root /www/kuangstudy/resources; } location ~* /asserts/\\\\.(GIF|png|bmp|jpg|jpeg) { root /www/kuangstudy/resources/; } location ~ /Abc/ { ..... } #http://abc.com/Abc/ [匹配成功] #http://abc.com/abc/ [匹配失败] location ~* /Abc/ { ..... } # 则会忽略 uri 部分的大小写 #http://abc.com/Abc/ [匹配成功] #http://abc.com/abc/ [匹配成功] }\",\"*代表的是不区分大小写。\",\"访问路径：http://139.224.164.101:8085/asserts/img/bg.jpg\",\"它会在/www/kuangstudy/resources目录下，进行层层的匹配和查找，找到就返回。\"]},\"1144\":{\"h\":\"04、以某种字符串开头的匹配规则\",\"t\":[\"# 服务虚拟主机配置 server { # 监听端口 listen 8083; # 监听服务器ip，域名，或者localhost server_name localhost; # ^~ 以某种字符路径开头请求 location ^~ /asserts/img { root /www/kuangstudy/resources; } }\",\"http://139.224.164.101:8083/asserts/img/indexlogo.png\",\"05、注意事项\",\"location ^~ /asserts/img { # 注意正则匹配中不能使用alias别名 #alias /www/kuangstudy/resources/1.jpg; root /www/kuangstudy/resources; }\"]},\"1145\":{\"h\":\"07：Nginx的限流\",\"t\":[\"Nginx 提供两种限流方式，一是控制速率，二是控制并发连接数。\"]},\"1146\":{\"h\":\"1、漏桶算法（限制请求次数）\",\"t\":[\"漏桶算法思路很简单，请求先进入到漏桶里，漏桶以固定的速度出水，也就是处理请求，当水加的过快，则会直接溢出，也就是拒绝请求，可以看出漏桶算法能强行限制数据的传输速率。\",\"限流算法\"]},\"1147\":{\"h\":\"2、令牌桶算法（限制请求速度）\",\"t\":[\"对于很多应用场景来说，除了要求能够限制数据的平均传输速率外，还要求允许某种程度的突发传输。这时候漏桶算法可能就不合适了，令牌桶算法更为适合。\",\"令牌桶算法的原理是系统以恒定的速率产生令牌，然后把令牌放到令牌桶中，令牌桶有一个容量，当令牌桶满了的时候，再向其中放令牌，那么多余的令牌会被丢弃；当想要处理一个请求的时候，需要从令牌桶中取出一个令牌，如果此时令牌桶中没有令牌，那么则拒绝该请求。\",\"令牌桶\"]},\"1148\":{\"h\":\"3、计数器（限制连接数）\",\"t\":[\"计数器比较简单粗暴，比如我们限制的是1s能够通过的请求数，实现的思路就是从第一个请求进来开始计时，在接下来的1s内，每个请求进来请求数就+1，超过最大请求数的请求会被拒绝，等到1s结束后计数清零，重新开始计数。\",\"这种方式有个很大的弊端：比如前10ms已经通过了最大的请求数，那么后面的990ms的请求只能拒绝，这种现象叫做“突刺现象”。\"]},\"1149\":{\"h\":\"4、两种算法的区别\",\"t\":[\"漏桶算法输入的时候请求不固定，但都会在漏桶里边先保存起来（小于漏桶的容量），然后输出的时候采用的是恒定的速率执行请求，有点像队列的先进先出，只是队列中的元素出队的时间间隔一致。\",\"令牌桶算法跟漏桶算法刚好相反，令牌桶的大小就是接口所能承载的最大访问量，令牌的发放是恒速的，而最终能在某一时间处理的请求数不是恒定的，这取决于单位时间内令牌桶中的令牌数量。\",\"从作用上来说，漏桶和令牌桶算法最明显的区别就是是否允许突发流量(burst)的处理，漏桶算法能够强行限制数据的实时传输（处理）速率，对突发流量不做额外处理；而令牌桶算法能够在限制数据的平均传输速率的同时允许某种程度的突发传输。\"]},\"1150\":{\"h\":\"5、Nginx官方版本限制IP的连接和并发分别有两个模块\",\"t\":[\"limit_req_zone 用来限制单位时间内的请求数，即速率限制,采用的漏桶算法 “leaky bucket”。\",\"limit_req_conn 用来限制同一时间连接数，即并发限制。\"]},\"1151\":{\"h\":\"01、limit_req_zone 参数配置\",\"t\":[\"Syntax: limit_req zone=name [burst=number] [nodelay]; Default: — Context: http, server, location limit_req_zone $binary_remote_addr zone=one:10m rate=2r/s;\",\"第一个参数：$binary_remote_addr 表示通过remote_addr这个标识来做限制，“binary_”的目的是缩写内存占用量，是限制同一客户端ip地址。\",\"第二个参数：zone=one:10m表示生成一个大小为10M，名字为one的内存区域，用来存储访问的频次信息。\",\"第三个参数：rate=1r/s表示允许相同标识的客户端的访问频次，这里限制的是每秒1次，还可以有比如30r/m的。\",\"limit_req zone=one burst=5 nodelay;\",\"第一个参数：zone=one 设置使用哪个配置区域来做限制，与上面limit_req_zone 里的name对应。\",\"第二个参数：burst=5，重点说明一下这个配置，burst爆发的意思，这个配置的意思是设置一个大小为5的缓冲区当有大量请求（爆发）过来时，超过了访问频次限制的请求可以先放到这个缓冲区内。\",\"第三个参数：nodelay，如果设置，超过访问频次而且缓冲区也满了的时候就会直接返回503，如果没有设置，则所有请求会等待排队\",\"limit_req_zone示例\",\"http { limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s; server { location /search/ { limit_req zone=one burst=5 nodelay; } }\",\"下面配置可以限制特定UA（比如搜索引擎）的访问：\",\"limit_req_zone $anti_spider zone=one:10m rate=10r/s; limit_req zone=one burst=100 nodelay; if ($http_user_agent ~* \\\"googlebot|bingbot|Feedfetcher-Google\\\") { set $anti_spider $http_user_agent; }\",\"其他参数\",\"Syntax: limit_req_log_level info | notice | warn | error; Default: limit_req_log_level error; Context: http, server, location\",\"当服务器由于limit被限速或缓存时，配置写入日志。延迟的记录比拒绝的记录低一个级别。例子：limit_req_log_level notice延迟的的基本是info。\",\"Syntax: limit_req_status code; Default: limit_req_status 503; Context: http, server, location\",\"设置拒绝请求的返回值。值只能设置 400 到 599 之间。\"]},\"1152\":{\"h\":\"02、ngx_http_limit_conn_module 参数配置\",\"t\":[\"这个模块用来限制单个IP的请求数。并非所有的连接都被计数。只有在服务器处理了请求并且已经读取了整个请求头时，连接才被计数。\",\"Syntax: limit_conn zone number; Default: — Context: http, server, location limit_conn_zone $binary_remote_addr zone=addr:10m; server { location /download/ { limit_conn addr 1; }\",\"一次只允许每个IP地址一个连接。\",\"limit_conn_zone $binary_remote_addr zone=perip:10m; limit_conn_zone $server_name zone=perserver:10m; server { ... limit_conn perip 10; limit_conn perserver 100; }\",\"可以配置多个limit_conn指令。例如，以上配置将限制每个客户端IP连接到服务器的数量，同时限制连接到虚拟服务器的总数。\",\"Syntax: limit_conn_zone key zone=name:size; Default: — Context: http limit_conn_zone $binary_remote_addr zone=addr:10m;\",\"在这里，客户端IP地址作为关键。请注意，不是$ remote_addr，而是使用$ binary_remote_addr变量。 $ remote_addr变量的大小可以从7到15个字节不等。存储的状态在32位平台上占用32或64字节的内存，在64位平台上总是占用64字节。对于IPv4地址，$ binary_remote_addr变量的大小始终为4个字节，对于IPv6地址则为16个字节。存储状态在32位平台上始终占用32或64个字节，在64位平台上占用64个字节。一个兆字节的区域可以保持大约32000个32字节的状态或大约16000个64字节的状态。如果区域存储耗尽，服务器会将错误返回给所有其他请求。\",\"Syntax: limit_conn_log_level info | notice | warn | error; Default: limit_conn_log_level error; Context: http, server, location\",\"当服务器限制连接数时，设置所需的日志记录级别。\",\"Syntax: limit_conn_status code; Default: limit_conn_status 503; Context: http, server, location\",\"设置拒绝请求的返回值。\"]},\"1153\":{\"h\":\"6、Nginx限流实战\"},\"1154\":{\"h\":\"a.控制速率 - 基于ip限流配置\",\"t\":[\"第一步在http中添加 limit_req_zone $binary_remote_addr zone=one:10m rate=2r/s;：\",\"limit_req_zone：用来限制单位时间内的请求数\",\"$binary_remote_addr：定义限流对象，binary_remote_addr是一种key，表示基于 remote_addr(客户端IP) 来做限流，binary_ 的目的是压缩内存占用量。\",\"zone=one:10m：定义共享内存区来存储访问信息， one:10m 表示一个大小为10M，名字为one的内存区域。1M能存储16000 IP地址的访问信息，10M可以存储16W IP地址访问信息。\",\"rate=1r/s：用于设置最大访问速率，rate=10r/s 表示每秒最多处理10个请求。Nginx 实际上以毫秒为粒度来跟踪请求信息，因此 10r/s 实际上是限制：每100毫秒处理一个请求。这意味着，自上一个请求处理完后，若后续100毫秒内又有请求到达，将拒绝处理该请求。\",\"第二步：然后在server，中使用limit_req指令应用进行配置限流\",\"limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s; server { location / { limit_req zone=mylimit; } }\",\"上述规则限制了每个IP访问的速度为2r/s，并将该规则作用于根目录。如果单个IP在非常短的时间内并发发送多个请求，结果会怎样呢？\",\"我们使用单个IP在10ms内发并发送了6个请求，只有1个成功，剩下的5个都被拒绝。我们设置的速度是2r/s，为什么只有1个成功呢，是不是Nginx限制错了？当然不是，是因为Nginx的限流统计是基于毫秒的，我们设置的速度是2r/s，转换一下就是500ms内单个IP只允许通过1个请求，从501ms开始才允许通过第二个请求。\"]},\"1155\":{\"h\":\"b.burst缓存处理\",\"t\":[\"处理突发流量 （brust） 在超过1个请求就丢弃，没有“桶”的概念，所以我们需要添加一个“桶”\",\"我们看到，我们短时间内发送了大量请求，Nginx按照毫秒级精度统计，超出限制的请求直接拒绝。这在实际场景中未免过于苛刻，真实网络环境中请求到来不是匀速的，很可能有请求“突发”的情况，也就是“一股子一股子”的。Nginx考虑到了这种情况，可以通过burst关键字开启对突发请求的缓存处理，而不是直接拒绝。\",\"limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s; server { location / { limit_req zone=mylimit burst=4; } }\",\"我们加入了burst=4，意思是每个key(此处是每个IP)最多允许4个突发请求的到来。如果单个IP在10ms内发送6个请求，结果会怎样呢？\",\"相比实例一成功数增加了4个，这个我们设置的burst数目是一致的。具体处理流程是：1个请求被立即处理，4个请求被放到burst队列里，另外一个请求被拒绝。通过burst参数，我们使得Nginx限流具备了缓存处理突发流量的能力。\",\"但是请注意：burst的作用是让多余的请求可以先放到队列里，慢慢处理。如果不加nodelay参数，队列里的请求不会立即处理，而是按照rate设置的速度，以毫秒级精确的速度慢慢处理。\"]},\"1156\":{\"h\":\"c.nodelay降低排队时间\",\"t\":[\"在使用burst缓存处理中，我们看到，通过设置burst参数，我们可以允许Nginx缓存处理一定程度的突发，多余的请求可以先放到队列里，慢慢处理，这起到了平滑流量的作用。但是如果队列设置的比较大，请求排队的时间就会比较长，用户角度看来就是RT变长了，这对用户很不友好。有什么解决办法呢？nodelay参数允许请求在排队的时候就立即被处理，也就是说只要请求能够进入burst队列，就会立即被后台worker处理，请注意，这意味着burst设置了nodelay时，系统瞬间的QPS可能会超过rate设置的阈值。nodelay参数要跟burst一起使用才有作用。\",\"延续burst缓存处理的配置，我们加入nodelay选项：\",\"limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s; server { location / { limit_req zone=mylimit burst=4 nodelay; } }\",\"单个IP 10ms内并发发送6个请求，结果如下：\",\"image\",\"跟burst缓存处理相比，请求成功率没变化，但是总体耗时变短了。这怎么解释呢？在burst缓存处理中，有4个请求被放到burst队列当中，工作进程每隔500ms(rate=2r/s)取一个请求进行处理，最后一个请求要排队2s才会被处理；这里，请求放入队列跟burst缓存处理是一样的，但不同的是，队列中的请求同时具有了被处理的资格，所以这里的5个请求可以说是同时开始被处理的，花费时间自然变短了。\",\"但是请注意，虽然设置burst和nodelay能够降低突发请求的处理时间，但是长期来看并不会提高吞吐量的上限，长期吞吐量的上限是由rate决定的，因为nodelay只能保证burst的请求被立即处理，但Nginx会限制队列元素释放的速度，就像是限制了令牌桶中令牌产生的速度。\",\"看到这里你可能会问，加入了nodelay参数之后的限速算法，到底算是哪一个“桶”，是漏桶算法还是令牌桶算法？当然还算是漏桶算法。考虑一种情况，令牌桶算法的token为耗尽时会怎么做呢？由于它有一个请求队列，所以会把接下来的请求缓存下来，缓存多少受限于队列大小。但此时缓存这些请求还有意义吗？如果server已经过载，缓存队列越来越长，RT越来越高，即使过了很久请求被处理了，对用户来说也没什么价值了。所以当token不够用时，最明智的做法就是直接拒绝用户的请求，这就成了漏桶算法。\"]},\"1157\":{\"h\":\"d.自定义返回值\",\"t\":[\"limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s; server { location / { limit_req zone=mylimit burst=4 nodelay; limit_req_status 598; } }\",\"默认情况下 没有配置 status 返回值的状态：\",\"v2-112645b48dc2a53020cd20daee904ab9_720w\",\"img\"]},\"1158\":{\"h\":\"f.基于链接限流\",\"t\":[\"#user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' # '$status $body_bytes_sent \\\"$http_referer\\\" ' # '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; #01、根据ip地址限制速度 # $binary_remote_addr 是内存占用通过用户的访问ip地址来限流 # zone=iplimit:20m 也就是说我申请一块20m内存大小的内存区域命名为：iplimit,这块区域专门用来记录你的访问频率信息。 # rate=1r/s 每秒放行一个请求 100r/m 每分钟放100个请求进入nginx,用来标识访问的限流频率 limit_req_zone $binary_remote_addr zone=iplimit:20m rate=10r/s; #02、根据服务器级别限流，对所有的请求都进行限流处理 limit_req_zone $server_name zone=serverlimit:10m rate=100r/s; # 如果上面两者规则都进行了配置。只要请求踩到红线都会生效，这里的每一个规则就好比木桶原理一样，这里的每个规则都是木桶的木板 # 你往里面倒水，取决于你木桶中最短的木板。 # 03、基于连接数的限流规则，注意基于链接没有速率的概念。它是指当前现在的保持的active链接的数量限制。 limit_conn_zone $binary_remote_addr zone=perip:20m; limit_conn_zone $server_name zone=perserver:20m; server { listen 80; server_name localhost; location / { root html; index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } location /limit/ { proxy_pass http://127.0.0.1:8080/; # 基于ip地址的限制， # zone=iplimit 引入你要限流的规则 # burst=2,设置一个大小为2的缓冲区域。当大量的请求到来的时候，请求数量超过限流频率时，将其放入缓存区域 # nodelay: 如果缓存区满了以后直接返回503异常。 limit_req zone=iplimit burst=2 nodelay; # 基于服务器级别的限制 # 是实际生产中，server服务器级别的限流的每秒的速率肯定是比较大的，这里只是为了测试查看效果所以调小。 limit_req zone=serverlimit burst=100 nodelay; # 基于conn的限流引用 # 每个server最多保持100个连接 limit_conn perserver 100; # 每个ip最多保持1个链接 #limit_conn perip 1; limit_conn perip 10; # 异常情况，返回504，默认情况是返回：503 limit_req_status 504; limit_conn_status 504; } } }\"]},\"1159\":{\"h\":\"08：Nginx的负载均衡&upstream\",\"t\":[\"在服务器集群中，Nginx起到一个代理服务器的角色（即反向代理），为了避免单独一个服务器压力过大，将来自用户的请求转发给不同的服务器。\"]},\"1160\":{\"h\":\"目标\",\"t\":[\"jemter压力软件进行单台tomcat压力的线程测试\",\"jemter压力软件进行nginx + 3tomcat压力的线程测试\",\"upstream tomcatservers { server 127.0.0.1:8080; server 127.0.0.1:8081; server 127.0.0.1:8082; } # 服务虚拟主机配置 server { # 监听端口 listen 80; # 监听服务器ip，域名，或者localhost server_name localhost; #access_log logs/host.access.log main; location / { proxy_pass http://tomcatservers; } error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } upstream xxx { server 127.0.0.1:8080 策略; server 127.0.0.1:8081 策略; server 127.0.0.1:8082 策略; } server { listen 80; server_name x'x'x; location / { proxy_pass http://xxx; } }\",\"这就是最基本的负载均衡实例，但这不足以满足实际需求；目前Nginx服务器的upstream模块支持6种方式的分配：\",\"轮询\",\"默认方式\",\"weight\",\"权重方式\",\"ip_hash\",\"依据ip分配方式（存在隐患）\",\"least_conn\",\"最少连接方式\",\"fair（第三方）\",\"响应时间方式\",\"url_hash（第三方）\",\"依据URL分配方式\",\"在这里，只详细说明Nginx自带的负载均衡策略，第三方不多描述。\"]},\"1161\":{\"h\":\"01、🌟轮询\",\"t\":[\"image\",\"最基本的配置方法，上面的例子就是轮询的方式，它是upstream模块默认的负载均衡默认策略。每个请求会按时间顺序逐一分配到不同的后端服务器。\",\"有如下参数：\",\"fail_timeout与max_fails结合使用。max_fails设置fail_timeout参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了，fail_time服务器会被认为停机的时间长度,默认为10s。backup标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里。down标记服务器永久停机了。\",\"注意：\",\"在轮询中，如果服务器down掉了，会自动剔除该服务器。\",\"缺省配置就是轮询策略。\",\"此策略适合服务器配置相当，无状态且短平快的服务使用。\"]},\"1162\":{\"h\":\"02、🌟weight(重量，权重，加权轮询)\",\"t\":[\"加权重方式，在轮询策略的基础上指定轮询的几率。例子如下：\",\"image-20210823165956196\",\"权重方式，在轮询策略的基础上指定轮询的几率。例子如下：\",\"在该例子中，weight参数用于指定轮询几率，weight的默认值为1,；weight的数值与访问比率成正比，比如Tomcat 7.0被访问的几率为其他服务器的两倍。\",\"官网地址：http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html\",\"weight默认值是：1\",\"注意：\",\"权重越高分配到需要处理的请求越多。\",\"此策略可以与least_conn和ip_hash结合使用。\",\"此策略比较适合服务器的硬件配置差别比较大的情况。\",\"upstream tomcatservers { server 127.0.0.1:8080 weight=1; server 127.0.0.1:8081 weight=2; server 127.0.0.1:8082 weight=3; }\"]},\"1163\":{\"h\":\"03、upStream\",\"t\":[\"官网参考：http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html\",\"server相关参数：\",\"upstream指令存在一些参数：\",\"max_conns：（保护服务资源）\",\"可以限制一台服务器的最大访问连接数。默认值是：0。代表不限制。\",\"其实也就是限流的含义。\",\"什么样子的情况下会使用max_conns: 比如临时增加一台服务器，但是这个服务器还运行着别人服务，你有不想过多消耗服务器的资源，而是临时顶替请求，这个可以考虑使用max_conn进行配置，\",\"upstream tomcatservers { server 127.0.0.1:8080 max_conns=100; server 127.0.0.1:8081 max_conns=2; server 127.0.0.1:8082 max_conns=2; }\",\"slow_start(商业版使用)\",\"sets the time during which the server will recover its weight from zero to a nominal value, when unhealthy server becomes healthy, or when the server becomes available after a period of time it was considered unavailable. Default value is zero, i.e. slow start is disabled. 翻译：当你设置这个值以后，你的权重weight会从0慢慢升级到一个正常的value，可以把一个不健康的服务器编程健康的服务器，它是在一段时间以后在去启动。默认是：0，默认情况下是：关闭的\",\"可以让一个服务器慢慢的加入到集群中\",\"这个参数不能使用到：hash和random的负载均衡策略中\",\"如果在 upstream 中只有一台 server，则该参数失效\",\"upstream tomcatservers { server 127.0.0.1:8080 weight=10 slow_start=60s; server 127.0.0.1:8081 weight=2; server 127.0.0.1:8082 weight=2; }\",\"校验出现错误\",\"[root@iZuf62zev3la2ivndnxra5Z web1]# nginx -t nginx: [emerg] invalid parameter \\\"slow_start=60s\\\" in /usr/local/nginx/nginx/conf/yykk.conf:2 nginx: configuration file /usr/local/nginx/nginx/conf/nginx.conf test failed\",\"原因是告诉你：slow_start 只能使用是商业版本nginx中。\",\"down\",\"作用：用于标识服务器当前的状态。\",\"如果用down进行服务器标记就告诉当前服务器不可用的状态。\",\"upstream tomcatservers { server 127.0.0.1:8080 weight=10 down; server 127.0.0.1:8081 weight=2; server 127.0.0.1:8082 weight=2; }\",\"通过上述的配置以后，8080的服务器就被停止使用了。只能访问到8081和8082。\",\"backup(重要)\",\"作用：备机\",\"backup 表示当前服务器节点是备用机，只有在其他的服务器都宕机以后，自己才会加入到集群中，被用户访问到\",\"用处：可以用于灰度部署时候的一种更替效果。\",\"问题：什么样子的情况下载会出现全部宕机呢？\",\"在发布项目的时候，可能会把网站关停\",\"高并发把网站冲垮了。\",\"upstream tomcatservers { server 127.0.0.1:8080 weight=10 backup; server 127.0.0.1:8081 weight=2; server 127.0.0.1:8082 weight=2; }\",\"这个时候正常访问只能访问到8081和8082服务器，8080服务器作为备机\",\"可以尝试吧8081和8082服务挂掉，这个8080服务器生效\",\"在把8081和8082服务启动，这个时候8080又被挂起当做备用机\",\"max_fails 和 fail_timeout\",\"两个参数需要配合一起使用才有意义。max_fails ：表示失败几次，则标记server已宕机，剔出上游服务。fail_timeout ：表示失败的重试时间。\",\"max_fails ：最大的失败次数，如果服务器访问的次数超过这个次数就会剔除服务，nginx就会认为这个服务器是挂掉的服务。\",\"fail_timeout：失败的时间片段，如果配置fail_timeout=10s,max_fails=5次，代表的含义是：在10s之内如果出现的错误次数大于等于5次的时候，就会认为这个服务器是一个挂掉的服务，nginx会剔除该服务。\",\"max_fails：默认值是：1\",\"fail_timeout的默认值是：10s\",\"upstream tomcatservers { server 127.0.0.1:8080 max_fails=3 fail_timeout=5s; // 这些配置一定要和你程序息息相关 server 127.0.0.1:8081 weight=1; server 127.0.0.1:8082 weight=1; }\",\"则代表在1秒内请求某一server失败达到2次后，则认为该server已经挂了或者宕机了，随后再过1秒，这1秒内不会有新的请求到达刚刚挂掉的节点上，而是会 运作的server，1秒后会再有新请求尝试连接挂掉的server，如果还是失败，重复上一过程，直到恢复。\"]},\"1164\":{\"h\":\"04、ip_hash\",\"t\":[\"指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题。\",\"在nginx版本1.3.1之前，不能在ip_hash中使用权重（weight）。\",\"ip_hash不能与backup同时使用。\",\"此策略适合有状态服务，比如session。\",\"当有服务器需要剔除，必须手动down掉。\",\"文档：https://nginx.org/en/docs/http/ngx_http_upstream_module.html#ip_hash\",\"image\",\"配置如下：\",\"upstream backend { ip_hash; server backend1.example.com; server backend2.example.com; server backend3.example.com down; server backend4.example.com; }\",\"源码分析\",\"/* * Copyright (C) Igor Sysoev * Copyright (C) Nginx, Inc. */ #include <ngx_config.h> #include <ngx_core.h> #include <ngx_http.h> typedef struct { /* the round robin data must be first */ ngx_http_upstream_rr_peer_data_t rrp; ngx_uint_t hash; u_char addrlen; u_char *addr; u_char tries; ngx_event_get_peer_pt get_rr_peer; } ngx_http_upstream_ip_hash_peer_data_t; static ngx_int_t ngx_http_upstream_init_ip_hash_peer(ngx_http_request_t *r, ngx_http_upstream_srv_conf_t *us); static ngx_int_t ngx_http_upstream_get_ip_hash_peer(ngx_peer_connection_t *pc, void *data); static char *ngx_http_upstream_ip_hash(ngx_conf_t *cf, ngx_command_t *cmd, void *conf); static ngx_command_t ngx_http_upstream_ip_hash_commands[] = { { ngx_string(\\\"ip_hash\\\"), NGX_HTTP_UPS_CONF|NGX_CONF_NOARGS, ngx_http_upstream_ip_hash, 0, 0, NULL }, ngx_null_command }; static ngx_http_module_t ngx_http_upstream_ip_hash_module_ctx = { NULL, /* preconfiguration */ NULL, /* postconfiguration */ NULL, /* create main configuration */ NULL, /* init main configuration */ NULL, /* create server configuration */ NULL, /* merge server configuration */ NULL, /* create location configuration */ NULL /* merge location configuration */ }; ngx_module_t ngx_http_upstream_ip_hash_module = { NGX_MODULE_V1, &ngx_http_upstream_ip_hash_module_ctx, /* module context */ ngx_http_upstream_ip_hash_commands, /* module directives */ NGX_HTTP_MODULE, /* module type */ NULL, /* init master */ NULL, /* init module */ NULL, /* init process */ NULL, /* init thread */ NULL, /* exit thread */ NULL, /* exit process */ NULL, /* exit master */ NGX_MODULE_V1_PADDING }; static u_char ngx_http_upstream_ip_hash_pseudo_addr[3]; static ngx_int_t ngx_http_upstream_init_ip_hash(ngx_conf_t *cf, ngx_http_upstream_srv_conf_t *us) { if (ngx_http_upstream_init_round_robin(cf, us) != NGX_OK) { return NGX_ERROR; } us->peer.init = ngx_http_upstream_init_ip_hash_peer; return NGX_OK; } static ngx_int_t ngx_http_upstream_init_ip_hash_peer(ngx_http_request_t *r, ngx_http_upstream_srv_conf_t *us) { struct sockaddr_in *sin; #if (NGX_HAVE_INET6) struct sockaddr_in6 *sin6; #endif ngx_http_upstream_ip_hash_peer_data_t *iphp; iphp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_ip_hash_peer_data_t)); if (iphp == NULL) { return NGX_ERROR; } r->upstream->peer.data = &iphp->rrp; if (ngx_http_upstream_init_round_robin_peer(r, us) != NGX_OK) { return NGX_ERROR; } r->upstream->peer.get = ngx_http_upstream_get_ip_hash_peer; switch (r->connection->sockaddr->sa_family) { case AF_INET: sin = (struct sockaddr_in *) r->connection->sockaddr; iphp->addr = (u_char *) &sin->sin_addr.s_addr; iphp->addrlen = 3; break; #if (NGX_HAVE_INET6) case AF_INET6: sin6 = (struct sockaddr_in6 *) r->connection->sockaddr; iphp->addr = (u_char *) &sin6->sin6_addr.s6_addr; iphp->addrlen = 16; break; #endif default: iphp->addr = ngx_http_upstream_ip_hash_pseudo_addr; iphp->addrlen = 3; } iphp->hash = 89; iphp->tries = 0; iphp->get_rr_peer = ngx_http_upstream_get_round_robin_peer; return NGX_OK; } static ngx_int_t ngx_http_upstream_get_ip_hash_peer(ngx_peer_connection_t *pc, void *data) { ngx_http_upstream_ip_hash_peer_data_t *iphp = data; time_t now; ngx_int_t w; uintptr_t m; ngx_uint_t i, n, p, hash; ngx_http_upstream_rr_peer_t *peer; ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0, \\\"get ip hash peer, try: %ui\\\", pc->tries); /* TODO: cached */ ngx_http_upstream_rr_peers_rlock(iphp->rrp.peers); if (iphp->tries > 20 || iphp->rrp.peers->single) { ngx_http_upstream_rr_peers_unlock(iphp->rrp.peers); return iphp->get_rr_peer(pc, &iphp->rrp); } now = ngx_time(); pc->cached = 0; pc->connection = NULL; hash = iphp->hash; for ( ;; ) { for (i = 0; i < (ngx_uint_t) iphp->addrlen; i++) { hash = (hash * 113 + iphp->addr[i]) % 6271; } w = hash % iphp->rrp.peers->total_weight; peer = iphp->rrp.peers->peer; p = 0; while (w >= peer->weight) { w -= peer->weight; peer = peer->next; p++; } n = p / (8 * sizeof(uintptr_t)); m = (uintptr_t) 1 << p % (8 * sizeof(uintptr_t)); if (iphp->rrp.tried[n] & m) { goto next; } ngx_log_debug2(NGX_LOG_DEBUG_HTTP, pc->log, 0, \\\"get ip hash peer, hash: %ui %04XL\\\", p, (uint64_t) m); ngx_http_upstream_rr_peer_lock(iphp->rrp.peers, peer); if (peer->down) { ngx_http_upstream_rr_peer_unlock(iphp->rrp.peers, peer); goto next; } if (peer->max_fails && peer->fails >= peer->max_fails && now - peer->checked <= peer->fail_timeout) { ngx_http_upstream_rr_peer_unlock(iphp->rrp.peers, peer); goto next; } if (peer->max_conns && peer->conns >= peer->max_conns) { ngx_http_upstream_rr_peer_unlock(iphp->rrp.peers, peer); goto next; } break; next: if (++iphp->tries > 20) { ngx_http_upstream_rr_peers_unlock(iphp->rrp.peers); return iphp->get_rr_peer(pc, &iphp->rrp); } } iphp->rrp.current = peer; pc->sockaddr = peer->sockaddr; pc->socklen = peer->socklen; pc->name = &peer->name; peer->conns++; if (now - peer->checked > peer->fail_timeout) { peer->checked = now; } ngx_http_upstream_rr_peer_unlock(iphp->rrp.peers, peer); ngx_http_upstream_rr_peers_unlock(iphp->rrp.peers); iphp->rrp.tried[n] |= m; iphp->hash = hash; return NGX_OK; } static char * ngx_http_upstream_ip_hash(ngx_conf_t *cf, ngx_command_t *cmd, void *conf) { ngx_http_upstream_srv_conf_t *uscf; uscf = ngx_http_conf_get_module_srv_conf(cf, ngx_http_upstream_module); if (uscf->peer.init_upstream) { ngx_conf_log_error(NGX_LOG_WARN, cf, 0, \\\"load balancing method redefined\\\"); } uscf->peer.init_upstream = ngx_http_upstream_init_ip_hash; uscf->flags = NGX_HTTP_UPSTREAM_CREATE |NGX_HTTP_UPSTREAM_WEIGHT |NGX_HTTP_UPSTREAM_MAX_CONNS |NGX_HTTP_UPSTREAM_MAX_FAILS |NGX_HTTP_UPSTREAM_FAIL_TIMEOUT |NGX_HTTP_UPSTREAM_DOWN; return NGX_CONF_OK; }\",\"图解说明：\",\"image\",\"如果是在同一局域网内，算出的hash是一致的，这样他们就会出现相同的hash。\"]},\"1165\":{\"h\":\"05、一致性hash\",\"t\":[\"ip_hash存在的问题如下：\",\"上面的hash负载均衡存在一个问题，就是如果一个服务器挂掉了，hash的计算就需要全部重新计算，如果是在并发非常大的情况下，用这种算法来实现的话，可能会造成大量的请求在某一个时刻失败。\",\"或者节点增加也会发生这种问题的出现\",\"hash算法还会造成数据的服务的倾斜\",\"解决上面的问题可以使用：一致性hash算法。\",\"一直性Hash算法在很多场景下都有应用，尤其是在分布式缓存系统中，经常用其来进行缓存的访问的负载均衡，比如：redis等<k,v>非关系数据库作为缓存系统。我们首先来看一下采用取模方式进行缓存的问题。\",\"一致性Hash算法的使用场景\",\"假设我们的将10台redis部署为我们的缓存系统，存储<k,v>数据，存储方式是：hash(k)%10，用来将数据分散到各个redis存储系统中。这样做，最大的问题就在于：如果此缓存系统扩展（比如：增加或减少redis服务器的数量），节点故障宕机等将会带来很高的代价。比如：我们业务量增大了，需要扩展我们的缓存系统，再增加一台redis作为缓存服务器，那么后来的数据<k,v>的散列方式变为了：hash(k)%11。我们可以看到，如果我们要查找扩展之前的数据，利用hash(k)%11，则会找不到对应的存储服务器。所以这个时候大量的数据失效了（访问不到了）。 这时候，我们就要进行数据的重现散列，如果是将redis作为存储系统，则需要进行数据迁移，然后进行恢复，但是这个时候就意味着每次增减服务器的时候，集群就需要大量的通信，进行数据迁移，这个开销是非常大的。如果只是缓存，那么缓存就都失效了。这会形成缓存击穿，导致数据库压力巨大，可能会导致应用的崩溃。\",\"因为对于hash(k)的范围在int范围，所以我们将0~2^32作为一个环。其步骤为： 1，求出每个服务器的hash（服务器ip）值，将其配置到一个 0~2^n 的圆环上（n通常取32）。 2，用同样的方法求出待存储对象的主键 hash值，也将其配置到这个圆环上，然后从数据映射到的位置开始顺时针查找，将数据分布到找到的第一个服务器节点上。 其分布如图：\",\"1501874-20190328153045991-59319015\",\"这是一致性hash算法的基本原理，接下来我们看一下，此算法是如何解决 我们上边 说的 缓存系统的扩展或者节点宕机导致的缓存失效的问题。比如:再加入一个redis节点：\",\"image\",\"雪崩效应\",\"接下来我们来看一下，当有节点宕机时会有什么问题。如下图：\",\"image\",\"如上图，当B节点宕机后，原本存储在B节点的k1，k2将会迁移到节点C上，这可能会导致很大的问题。如果B上存储的是热点数据，将数据迁移到C节点上，然后C需要承受B+C的数据，也承受不住，也挂了。。。。然后继续CD都挂了。这就造成了雪崩效应。 上面会造成雪崩效应的原因分析： 如果不存在热点数据的时候，每台机器的承受的压力是M/2(假设每台机器的最高负载能力为M)，原本是不会有问题的，但是，这个时候A服务器由于有热点数据挂了，然后A的数据迁移至B，导致B所需要承受的压力变为M（还不考虑热点数据访问的压力），所以这个失败B是必挂的，然后C至少需要承受1.5M的压力。。。。然后大家一起挂。。。 所以我们通过上面可以看到，之所以会大家一起挂，原因在于如果一台机器挂了，那么它的压力全部被分配到一台机器上，导致雪崩。\",\"怎么解决雪崩问题呢，这时候需要引入虚拟节点来进行解决。 虚拟节点\",\"虚拟节点，我们可以针对每个实际的节点，虚拟出多个虚拟节点，用来映射到圈上的位置，进行存储对应的数据。如下图：\",\"image\",\"如上图：A节点对应A1，A2，BCD节点同理。这时候，如果A节点挂了，A节点的数据迁移情况是:A1数据会迁移到C2，A2数据迁移到D1。这就相当于A的数据被C和D分担了，这就避免了雪崩效应的发送，而且虚拟节点我们可以自定义设置，使其适用于我们的应用。\",\"存在的问题 ⼀致性哈希算法在服务节点太少时，容易因为节点分部不均匀⽽造成数据倾斜问题。例如系统中只有两台服务器，其环分布如下，节点2只能负责⾮常⼩的⼀段，⼤量的客户端请求落在了节点1上，这就是数据（请求）倾斜问题。\",\"为了解决这种数据倾斜问题，⼀致性哈希算法引⼊了虚拟节点机制，即对每⼀个服务节点计算多个哈希，每个计算结果位置都放置⼀个此服务节点，称为虚拟节点。\",\"具体做法可以在服务器ip或主机名的后⾯增加其他字符来实现。⽐如，可以为每台服务器计算三个虚拟节点，于是可以分别计算 “节点1的ip#1”、“节点1的ip#2”、“节点1的ip#3”、“节点2的ip#1”、“节点2的ip#2”、“节点2的ip#3”的哈希值，于是形成六个虚拟节点，当客户端被路由到虚拟节点的时候其实是被路由到该虚拟节点所对应的真实节点。\",\"自定义一致性hash算法：\",\"import java.util.SortedMap; import java.util.TreeMap; public class Main { public static void main(String[] args) { // 定义服务器ip String[] tomcatServers = {\\\"192.222.1.30\\\",\\\"19.16.1.2\\\",\\\"192.168.1.13\\\"}; SortedMap<Integer,String> serverMap = new TreeMap<>(); // 定义针对每个真实服务器虚拟出来⼏个节点 int virtaulCount = 3; for (String tomcatServer : tomcatServers) { int hash = Math.abs(tomcatServer.hashCode()); serverMap.put(hash,tomcatServer); //创建虚拟节点 for (int i = 0; i < virtaulCount; i++) { int virtaulHash = Math.abs((tomcatServer+\\\"a\\\").hashCode()); serverMap.put(virtaulHash,\\\"由\\\"+tomcatServer+\\\"的虚拟节点处理\\\"); } } //定义客户端 String[] userServers = {\\\"19.11.12.1\\\",\\\"10.113.120.79\\\",\\\"107.180.13.5\\\"}; for (String userServer : userServers){ int userhash = Math.abs(userServer.hashCode()); //获取到所有key大于用户hash值的map集合 SortedMap<Integer,String> sortedMap = serverMap.tailMap(userhash); if(sortedMap.isEmpty()){ //如果为空，则表示当前用户节点后没有服务器节点，则使用圆环中的第一个节点 Integer firstKey = serverMap.firstKey(); System.out.println(\\\"客户端\\\"+userServer+\\\"使用服务器\\\"+serverMap.get(firstKey)); }else{ //不为空则寻找第一个大于用户hash的key Integer firstKey = sortedMap.firstKey(); System.out.println(\\\"客户端\\\"+userServer+\\\"使用服务器\\\"+serverMap.get(firstKey)); } } } }\",\"配置一致性hash策略\",\"nginx的负载均衡策略中不包含一致性hash，所以我们需要安装ngx_http_upstream_consistent_hash模块到我们的nginx中\",\"可以到nginx的src/http/modules下查看已经安装的模块，比如ip_hash策略\",\"ngx_http_upstream_consistent_hash 模块是⼀个负载均衡器，使⽤⼀个内部⼀致性hash算法来选择合适的后端节点。该模块可以根据配置参数采取不同的⽅式将请求均匀映射到后端机器， consistent_hash $remote_addr：可以根据客户端ip映射 consistent_hash $request_uri：根据客户端请求的uri映射 consistent_hash $args：根据客户端携带的参数进⾏映\",\"安装步骤：\",\"1）github下载nginx⼀致性hash负载均衡模块 https://github.com/replay/ngx_http_consistent_hash\",\"2）将下载的压缩包上传到nginx服务器，并解压 3）我们已经编译安装过nginx，此时进⼊当时nginx的安装目录⽬录，执⾏如下命令，等号后边为下载的插件的解压目录\",\"./configure --add-module=/www/kuangstudy/nignx/ngx_http_consistent_hash-master\",\"4）编译和安装\",\"make && make install\",\"5）在nginx.conf⽂件中配置\",\"upstream somestream { consistent_hash $request_uri; server 10.50.1.3:11211; server 10.50.1.4:11211; server 10.50.1.5:11211; }\"]},\"1166\":{\"h\":\"06、url_hash(细粒度的负载均衡)\",\"t\":[\"第三方的负载均衡策略的实现需要安装第三方插件。\",\"按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用。同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。而使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取。\",\"upstream dynamic_zuoyu { hash $request_uri; #实现每个url定向到同一个后端服务器 server localhost:8080; server localhost:8081; server localhost:8082; server localhost:8083; }\",\"java代码如下：\",\"package com.kuang.contorller; import com.kuang.utils.ip.IpUtils; import org.springframework.beans.factory.annotation.Value; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; import javax.servlet.http.HttpServletRequest; import java.util.HashMap; import java.util.Map; /** * @author 飞哥 * @Title: 学相伴出品 * @Description: 我们有一个学习网站：https://www.kuangstudy.com * @date 2021/8/23 12:31 */ @RestController public class TestController { @Value(\\\"${server.port}\\\") private String port; @GetMapping(\\\"/nginx/test\\\") public Map<String, String> test(HttpServletRequest request) { Map<String, String> map = new HashMap<>(); String ipAddr = IpUtils.getIpAddr(request); map.put(\\\"port1\\\", request.getLocalPort() + \\\"\\\"); map.put(\\\"port2\\\", request.getServerPort() + \\\"\\\"); map.put(\\\"port3\\\", request.getRemotePort() + \\\"\\\"); map.put(\\\"url\\\", request.getRequestURL().toString()); map.put(\\\"port4\\\", port); map.put(\\\"ipAddr\\\", ipAddr); return map; } @GetMapping(\\\"/c/list\\\")//8081 public Map<String, String> courselist(HttpServletRequest request) { Map<String, String> map = new HashMap<>(); String ipAddr = IpUtils.getIpAddr(request); map.put(\\\"port1\\\", request.getLocalPort() + \\\"\\\"); map.put(\\\"port2\\\", request.getServerPort() + \\\"\\\"); map.put(\\\"port3\\\", request.getRemotePort() + \\\"\\\"); map.put(\\\"url\\\", request.getRequestURL().toString()); map.put(\\\"port4\\\", port); map.put(\\\"ipAddr\\\", ipAddr); return map; } @GetMapping(\\\"/u/info\\\")//8080 public Map<String, String> userlist(HttpServletRequest request) { Map<String, String> map = new HashMap<>(); String ipAddr = IpUtils.getIpAddr(request); map.put(\\\"port1\\\", request.getLocalPort() + \\\"\\\"); map.put(\\\"port2\\\", request.getServerPort() + \\\"\\\"); map.put(\\\"port3\\\", request.getRemotePort() + \\\"\\\"); map.put(\\\"url\\\", request.getRequestURL().toString()); map.put(\\\"port4\\\", port); map.put(\\\"ipAddr\\\", ipAddr); return map; } }\",\"访问地址：\",\"http://139.224.164.101/c/list\",\"http://139.224.164.101/u/info\",\"http://139.224.164.101/nginx/test\"]},\"1167\":{\"h\":\"07、least_conn\",\"t\":[\"把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效果。\",\"配置如下：\",\"upstream tomcatservers { #把请求转发给连接数较少的后端服务器 least_conn; server 127.0.0.1:8080; server 127.0.0.1:8081; server 127.0.0.1:8082; }\",\"注意：\",\"此负载均衡策略适合请求处理时间长短不一造成服务器过载的情况。\"]},\"1168\":{\"h\":\"08、fair (收费)\",\"t\":[\"按照服务器端的响应时间来分配请求，响应时间短的优先分配。\",\"upstream dynamic_zuoyu { server 127.0.0.1:8080 fair; server 127.0.0.1:8081; server 127.0.0.1:8082; }\"]},\"1169\":{\"h\":\"09、总结\",\"t\":[\"以上便是6种负载均衡策略的实现方式，其中除了轮询和轮询权重外，都是Nginx根据不同的算法实现的。在实际运用中，需要根据不同的场景选择性运用，大都是多种策略结合使用以达到实际需求。\"]},\"1170\":{\"h\":\"09、杂项\"},\"1171\":{\"h\":\"1、Nginx启动失败找不到 pid文件如何处理\",\"t\":[\"1、在启动的过程中，如果出现了\\\"/var/run/nginx/nginx.pid failed \\\"错误信息的时候。\",\"一般是文件目录不存在\",\"cd /var/run/nginx\",\"或者文件被误删\",\"2、解决方案：\",\"重新创建此目录即可\",\"mkdir -p /var/run/nginx/\",\"如果重启过程中报错如下异常：\",\"nginx -s reload\",\"就用指定的nginx.conf文件进行启动\",\"nginx -c /usr/local/nginx/conf/nginx.conf\",\"然后在重启启动nginx服务\",\"nginx -s reload\"]},\"1172\":{\"h\":\"2、优雅的关闭nginx服务\",\"t\":[\"# 强制关闭 nginx -s stop # 如果用户请求还正在与nginx 服务正在打交道，这个时候是不会退出nginx服务。直到用户的连接响应完毕才关闭 nginx -s quit\"]},\"1173\":{\"h\":\"3、查看Nginx的配置\",\"t\":[\"查看nginx安装目录和日志的目录，就使用nginx -V\",\"但是前提是：你必须是使用./configuration的指定目录安全。\",\"nginx -V\",\"[root@iZuf62zev3la2ivndnxra5Z nginx]# nginx -V nginx version: nginx/1.20.1 built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) built with OpenSSL 1.0.2k-fips 26 Jan 2017 TLS SNI support enabled configure arguments: --prefix=/usr/local/nginx/nginx --pid-path=/var/run/nginx/nginx.pid --lock-path=/var/lock/nginx.lock --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-http_gzip_static_module --http-client-body-temp-path=/var/temp/nginx/client --http-proxy-temp-path=/var/temp/nginx/proxy --http-fastcgi-temp-path=/var/temp/nginx/fastgi --http-uwsgi-temp-path=/var/temp/nginx/uwsgi --http-scgi-temp-path=/var/temp/nginx/scgi --with-http_stub_status_module --with-http_ssl_module\"]},\"1174\":{\"h\":\"4、Nginx日志文件分割\",\"t\":[\"现有的日志都会存在 access.log 文件中，但是随着时间的推移，这个文件的内容会越来越多，体积会越来越大，不便于运维人员查看，所以我们可以通过把\",\"文件切割为多份不同的小文件作为日志，切割规则可以以 天 为单位，如果每天有几百G或者几个T的日志的话，则可以按需以 每半天\",\"或者 每小时 对日志切割一\",\"具体步骤如下：\",\"创建一个shell可执行文件： cutlogs.sh ，内容为：\",\"#!/bin/bash LOG_PATH=\\\"/var/log/nginx\\\" RECORD_TIME=$(date -d \\\"yesterday\\\" +%Y-%m-%d+%H:%M) PID=/usr/local/nginx/logs/nginx.pid mv ${LOG_PATH}/access.log ${LOG_PATH}/access.${RECORD_TIME}.log mv ${LOG_PATH}/error.log ${LOG_PATH}/error.${RECORD_TIME}.log kill -USR1 `cat $PID`\",\"为 cutlogs.sh 添加可执行的权限\",\"chmod +x cutlogs.sh\",\"测试日志切割后的结果:\",\"./cutlogs.sh\",\"log\"]},\"1175\":{\"h\":\"5、Nginx的日志文件自动切割\",\"t\":[\"Nginx日志切割**-**定时\",\"使用定时任务\",\"安装定时任务：\",\"yum install crontabs\",\"crontab -e 编辑并且添加一行新的任务：\",\"crontab -e\",\"*/1 * * * * /usr/local/nginx/cutlogs.sh\",\"重启定时任务：\",\"service crond restart\",\"附：常用定时任务命令：\",\"service crond start //启动服务 service crond stop //关闭服务 service crond restart //重启服务 service crond reload //重新载入配置 crontab -e // 编辑任务 crontab -l // 查看任务列表\",\"定时任务表达式：\",\"Cron表达式是，分为5或6个域，每个域代表一个含义，如下所示：\",\"time\",\"常用表达式：\",\"每分钟执行：\",\"*/1 * * * *\",\"每日凌晨（每天晚上23:59）执行：\",\"59 23 * * *\",\"每日凌晨1点执行：\",\"0 1 * * *\",\"每天定时为数据库备份：https://www.cnblogs.com/leechenxiang/p/7110382.html\"]},\"1176\":{\"c\":[\"web\"]},\"1177\":{\"h\":\"Docker-操作\"},\"1178\":{\"c\":[\"运维\"]},\"1179\":{\"h\":\"Docker-理论\"},\"1180\":{\"h\":\"为什么要用docker？\",\"t\":[\"使用docker可以大幅简化部署软件的流程，也解决很多因为环境导致的问题\",\"我们开发好软件后，需要部署服务，传统的方式是对每一个服务器配置同样的环境（安装基础软件，配置环境啥的），每台服务器操作繁琐复杂，后续出现虚拟机，也是需要继续配置繁琐的环境。docker出现后，可以将基础环境、配置好的参数和项目一起打包到一个容器，直接在docker中运行这个容器就行。\"]},\"1181\":{\"h\":\"docker优势？\",\"t\":[\"可移植性：应用程序及其依赖被打包成一个容器，可以在任何平台上运行。\",\"一致性：通过容器，开发、测试、生产环境可以保持一致。\",\"资源效率：容器比虚拟机更轻量级，启动速度更快，占用资源更少。\",\"隔离性：容器提供了应用级别的隔离，减少了依赖冲突的风险。\",\"提示\",\"有点类似于app一样，开发后打包成app，可发布到应用市场，安卓手机下载就可使用\"]},\"1182\":{\"h\":\"01、Docker基础\",\"t\":[\"安装 Docker\",\"Docker 的核心概念\",\"容器（Container）\",\"镜像（Image）\",\"仓库（Repository）\",\"Dockerfile\",\"镜像与容器的生命周期\",\"Docker 命令详解 \",\"docker run\",\"docker ps\",\"docker build\",\"docker pull\",\"docker push\",\"docker exec\",\"docker stop 和 docker start\",\"Docker 的常见操作流程\"]},\"1183\":{\"h\":\"Docker必要概念\",\"t\":[\"Docker的架构图\",\"image-20200116185657945\",\"镜像（image）：模版。 （基础环境+配置好的参数+项目）==> 镜像\",\"镜像是容器的模板。镜像是静态的，不会改变，可以通过 Dockerfile 构建。它包含了操作系统、应用程序及其依赖\",\"容器（container）：通过镜像来启动 运行是容器，就是我们自己自己封装部署的东西（项目、环境、日志...）\",\"Doc容器是一个轻量级、可执行的独立软件包，它包含了运行应用所需的所有代码、库和配置文件。\",\"仓库（repository）：Docker 仓库是存储 Docker 镜像的地方，可以是本地仓库或远程仓库（如 Docker Hub）。\",\"仓库（Repository）是集中存放镜像文件的场所。 仓库(Repository)和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。 仓库分为公开仓库（Public）和私有仓库（Private）两种形式。 最大的公开仓库是 Docker Hub(https://hub.docker.com/)，存放了数量庞大的镜像供用户下载。 国内的公开仓库包括阿里云 、网易云 等\",\"Dockerfile：是一个文本文件，包含了构建 Docker 镜像的所有指令。通过 Dockerfile，可以从基础镜像构建自定义镜像\",\"小结：\",\"需要正确的理解仓库/镜像/容器这几个概念 :\",\"image ：文件生成的容器实例，本身也是一个文件，称为镜像文件。\",\"一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端用镜像创建一个对应的运行实例，也就是我们的容器。\",\"至于仓库，就是放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓库中拉下来就可以了。\",\"。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。\",\"docker就是类似的理念。\"]},\"1184\":{\"h\":\"安装Docker\",\"t\":[\"1、官网安装参考手册：https://docs.docker.com/engine/install/centos/\",\"2、保证环境是符合要求\",\"3、卸载旧的docker\",\"sudo yum remove docker \\\\ docker-client \\\\ docker-client-latest \\\\ docker-common \\\\ docker-latest \\\\ docker-latest-logrotate \\\\ docker-logrotate \\\\ docker-engine # 安装 gcc 环境 yum -y install gcc yum -y install gcc-c++\",\"4、安装docker需要的仓库地址配置\",\"sudo yum install -y yum-utils # download.docker.com 很卡 sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo # 在这里就要使用国内的镜像。 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\",\"5、安装docker\",\"#更新yum索引 yum makecache fast #安装docker yum install -y docker-ce docker-ce-cli containerd.io\",\"6、启动docker\",\"systemctl start docker # 安装成功可以使用 docker version\",\"7、测试是否安装成功\",\"docker run hello-world\",\"8、docker的卸载\",\"syetemctl stop docker yum remove docker-ce docker-ce-cli containerd.io sudo rm -rf /var/lib/docker sudo rm -rf /var/lib/containerd\"]},\"1185\":{\"h\":\"Hello-world 干了什么\",\"t\":[\"（仓库-->镜像-->容器）\",\"Docker run hello-world\",\"1、寻找镜像（如果存在，则通过通过镜像启动容器，不存在，去仓库dockerhub下载镜像）\",\"2、下载镜像（存在，拉取到本地，然后执行，不存在，就直接报错）\"]},\"1186\":{\"h\":\"Docker常用命令\",\"t\":[\"学会在linux使用帮助文档--help\"]},\"1187\":{\"h\":\"镜像命令\",\"t\":[\"展示、寻找、拉取、删除镜像\",\"[root@xiaoxie ~]$ docker images #展示所有的镜像（可加参数：-a显示所有 -q只显示id） REPOSITORY TAG IMAGE ID CREATED SIZE 仓库 标签 镜像id 创建时间 大小 [root@xiaoxie ~]$ docker search 镜像名 #查找想要的镜像（可选参数：--filter=STARS=50 避免垃圾镜像） [root@xiaoxie ~]$ docker pull 镜像名 #下载镜像，默认latest 可指定版本镜像名:版本号 [root@xiaoxie ~]$ docker rmi -f 镜像或部分id #删除本地的镜像 #批量删除：docker rmi -f $(docker images -aq)\"]},\"1188\":{\"h\":\"容器命令\",\"t\":[\"运行、停止、强行停止、重启、启动关闭的容器、删除\",\"#启动容器（没有镜像自己会去下），关键还是参数的添加 [root@xiaoxie ~]$ docker run 参数 镜像名 参数 --name=“” 给容器取名 -d 容器后台运行 ==即使有信息输出也不会输出当前窗口，完全后台运行 -i 容器交互的方式启动 ==向容器输入命令 -t 给容器分配一个终端登入使用 /bin/bash ==伪终端，只是看运行情况，结合i才可输入 -p 指定端口映射 （宿主机端口：容器内的端口） #其他命令：docker 命令 容器的id/容器名 #命令：start、restart、stop、kill、rm [root@xiaoxie ~]$ docker rm hello-world\"]},\"1189\":{\"h\":\"其他命令\",\"t\":[\"查看日志 docker logs\",\"查看容器的元数据 docker inspect 容器 ===查看容器内的各种信息，比如网络、创建时间、等等\",\"进入正在运行的容器\",\"docker exec -it 容器 /bin/bash === 容器内开启一个新进程，新终端\",\"docker attach 容器 ===容器内不会开启进程，直接进入命令终端\",\"退出 ctl + d 退出并停止容器 ctl + P +Q 不退出仅退出\",\"将容器内文件拷贝出来 docker cp 容器 容器内的文件 主机的位置\",\"看容器进程 docker top 容器\"]},\"1190\":{\"h\":\"原理\",\"t\":[\"分析：什么是镜像，怎么样的结构，加载原理，最后生成并提交镜像\"]},\"1191\":{\"h\":\"镜像是什么\",\"t\":[\"解释：一种轻量级、可执行的独立软件包。镜像内除了软件本身，还包含软件运行时所需要的代码、运行时、库、环境之类的信息\"]},\"1192\":{\"h\":\"加载原理\",\"t\":[\"简单理解：容易构建镜像是基于镜像加载机制===搭积木方式构建\",\"所有的镜像都是在最基础的镜像层上，添加内容创建新的镜像层，比如最基础的linux环境镜像上，配置配置信息，安装其他软件构成新的镜像\",\"联合文件系统--unionFS\",\"Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。\",\"Docker镜像加载原理\",\"docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。\",\"平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M？\",\"对于一个精简的OS，rootfs 可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。\"]},\"1193\":{\"h\":\"生成一个镜像并提交\",\"t\":[\"在了解镜像的组成以及原理，就可以自己写一个构建文件--dockerFile文件，用docker命令合成一个自己的镜像并提交到远程仓库了 镜像==一般是软件的交付品\",\"什么是dockerFile文件？\",\"dockerFile是由一堆命令和参数构成的脚本，然后docker是执行（由上至下执行）就可本地生成一个镜像了\",\"步骤：\",\"1、编写dockerFile文件\",\"[root@xiaoxie ~]$ vim docker-web #简易例子：将前端静态资源打包生成一个前端镜像 # 使用官方 Nginx 镜像作为基础镜像 # FROM nginx:alpine # 复制前端文件 # COPY web /usr/share/nginx/html # 复制自定义的 Nginx 配置文件 # COPY default.conf /etc/nginx/conf.d/default.conf # 暴露端口 # EXPOSE 80 # nginx官方已经设置默认的命令启动，就不用额外的补充 ===================================命令======================================== FROM # 基础镜像，当前新镜像是基于哪个镜像的 MAINTAINER # 镜像维护者的姓名混合邮箱地址 RUN # 容器构建时需要运行的命令 EXPOSE # 当前容器对外保留出的端口 WORKDIR # 指定在创建容器后，终端默认登录的进来工作目录，一个落脚点 ENV # 用来在构建镜像过程中设置环境变量 ADD # 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包 COPY # 类似ADD，拷贝文件和目录到镜像中！ VOLUME # 容器数据卷，用于数据保存和持久化工作 CMD # 指定一个容器启动时要运行的命令，dockerFile中可以有多个CMD指令，但只有最后一个生效！ ENTRYPOINT # 指定一个容器启动时要运行的命令！和CMD一样 ONBUILD # 当构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD被触发 ======================================写文件思路=============================== 1、基于一个空的镜像 2、下载需要的环境ADD 3、执行环境变量的配置ENV 4、执行一些Linux命令 RUN 5、日志输出 CMD 6、暴露端口 EXPOSE 7、挂载数据卷 volume\",\"2、执行命令\",\"[root@xiaoxie ~]$docker build -f docker-web myweb:1.0 .\",\"3、上传镜像到仓库\",\"注册一个镜像仓库账号（可以用dockerhub账户，默认的就不用加仓库了，但是现在要自己搭建镜像加速）\",\"[root@xiaoxie ~]$docker login --username=[你的用户名] registry.cn-地点.aliyuncs.com 输入你的密码即可\",\"推送\",\"docker push registry.cn-地点.aliyuncs.com/仓库命名空间/镜像:版本\",\"仓库拉取镜像\",\"docker pull registry.cn-地点.aliyuncs.com/仓库命名空间/镜像:版本\"]},\"1194\":{\"h\":\"docker网络\",\"t\":[\"正常一个干净的网络：\",\"[root@xiaoxielinux ~]# ip addr # 本地回环网络 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever # 网卡地址 wifi 2: enp0s3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 08:00:27:e0:aa:73 brd ff:ff:ff:ff:ff:ff inet 192.168.0.111/24 brd 192.168.0.255 scope global noprefixroute enp0s3 valid_lft forever preferred_lft forever inet6 fe80::3202:526:12cb:70ec/64 scope link noprefixroute valid_lft forever preferred_lft forever # docker 0 ，docker创建的网络 3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default link/ether 02:42:f8:9d:a8:42 brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever\",\"微服务这么多，访问怎么解决？ （容器名）\",\"docker每启动一个容器，就会给他分配一个ip。docker0是docker默认给的。我们不指定网络的情况下，创建容器都在docker0中，未来开发，我们要自定义网络。\",\"[root@xiaoxielinux ~]# docker run -itd --name web01 centos Unable to find image 'centos:latest' locally latest: Pulling from library/centos a1d0c7532777: Already exists Digest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177 Status: Downloaded newer image for centos:latest 53231c3adf0423ed2d0577ead987507c12978416349a51445d663c9536c9b4ff # docker每启动一个容器，就会给他分配一个ip。这个ip就是归docker0 管理 [root@xiaoxielinux ~]# docker exec -it web01 ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever 4: eth0@if5: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0 inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0 valid_lft forever preferred_lft forever # 容器外本地可以ping到容器里面 [root@xiaoxielinux ~]# ping 172.17.0.2 PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data. 64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.058 ms\"]},\"1195\":{\"h\":\"原理\",\"t\":[\"1、本来有三个网络，启动容器后，多了一个，这个网络和容器内部的网络是配对的。\",\"# 再次启动一个容器查看 [root@xiaoxielinux ~]# docker exec -it web02 ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever 6: eth0@if7: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0 inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0 valid_lft forever preferred_lft forever [root@xiaoxielinux ~]# ip addr .... 3: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default link/ether 02:42:f8:9d:a8:42 brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever inet6 fe80::42:f8ff:fe9d:a842/64 scope link valid_lft forever preferred_lft forever 5: veth3b4847e@if4: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default link/ether 0e:58:71:93:42:18 brd ff:ff:ff:ff:ff:ff link-netnsid 0 inet6 fe80::c58:71ff:fe93:4218/64 scope link valid_lft forever preferred_lft forever 7: veth13568df@if6: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default link/ether 9a:3c:71:70:e2:a0 brd ff:ff:ff:ff:ff:ff link-netnsid 1 inet6 fe80::983c:71ff:fe70:e2a0/64 scope link valid_lft forever preferred_lft forever # 总结观察： 1、web1 -- linux 主机 5: veth3b4847e@if4: 4: eth0@if5 2、web2 -- linux 主机 7: veth13568df@if6: 6: eth0@if7 # 只要启动一个容器，默认就会分配一对网卡。 # 虚拟接口 # veth-pair 就是一对的虚拟设备接口，它都是成对出现的。一端连着协议栈，一端彼此相连着。 # 就好比一个桥梁，可以连通容器内外。\",\"# 测试容器之间的访问，ip访问没有问题 [root@xiaoxielinux ~]# docker exec -it web02 ping 172.17.0.2 PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data. 64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.058 ms 64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.064 ms ^C --- 172.17.0.2 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 0.058/0.061/0.064/0.003 ms [root@xiaoxielinux ~]# docker exec -it web01 ping 172.17.0.3 PING 172.17.0.3 (172.17.0.3) 56(84) bytes of data. 64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.043 ms 64 bytes from 172.17.0.3: icmp_seq=2 ttl=64 time=0.071 ms 64 bytes from 172.17.0.3: icmp_seq=3 ttl=64 time=0.092 ms ^C --- 172.17.0.3 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2005ms rtt min/avg/max/mdev = 0.043/0.068/0.092/0.022 ms # 容器删除后再次启动，ip发生了变化怎么办？\",\"Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信。\",\"docker——net\",\"Docker容器网络就很好的利用了Linux虚拟网络技术，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫veth pair）；\",\"Docker中的网络接口默认都是虚拟的接口。虚拟接口的优势就是转发效率极高（因为Linux是在内核中进行数据的复制来实现虚拟接口之间的数据转发，无需通过外部的网络设备交换），对于本地系统和容器系统来说，虚拟接口跟一个正常的以太网卡相比并没有区别，只是他的速度快很多。\"]},\"1196\":{\"h\":\"使用\",\"t\":[\"[root@xiaoxielinux ~]# docker exec -it web02 ping web01 ping: web01: Name or service not known # 但是可以通过 --link在启动容器的时候连接到另一个容器网络中，可以通过域名ping了 [root@xiaoxielinux ~]# docker run -itd --name web03 --link web02 centos 6f67f9f7407edb8c48ce2d3ca413aef414a2a8628080fd69605e4ce2c3bea6ab [root@xiaoxielinux ~]# docker exec -it web03 ping web02 PING web02 (172.17.0.3) 56(84) bytes of data. 64 bytes from web02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.062 ms 64 bytes from web02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.064 ms 64 bytes from web02 (172.17.0.3): icmp_seq=3 ttl=64 time=0.064 ms ^C --- web02 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2005ms rtt min/avg/max/mdev = 0.062/0.063/0.064/0.006 ms # 但是反向也ping不通。 [root@xiaoxielinux ~]# docker exec -it web02 ping web03 ping: web03: Name or service not known # 底层原理 域名： --link hosts 添加了一条记录 172.17.0.3 web02 [root@xiaoxielinux ~]# docker exec -it web03 cat /etc/hosts 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters 172.17.0.3 web02 325795bd6df8 172.17.0.4 6f67f9f7407e [root@xiaoxielinux ~]#\"]},\"1197\":{\"h\":\"自定义网络\",\"t\":[\"[root@xiaoxielinux ~]# docker network --help Usage: docker network COMMAND Manage networks Commands: connect Connect a container to a network create Create a network disconnect Disconnect a container from a network inspect Display detailed information on one or more networks ls List networks prune Remove all unused networks rm Remove one or more networks Run 'docker network COMMAND --help' for more information on a command. # 查看所有的网络 [root@xiaoxielinux ~]# docker network ls NETWORK ID NAME DRIVER SCOPE defce6912c4a bridge bridge local e6e26ff63dfe host host local 8a592709b443 none null local\",\"所有网络模式\",\"网络模式\",\"配置\",\"说明\",\"bridge模式\",\"--net=bridge\",\"默认值，在Docker网桥docker0上为容器创建新的网络栈\",\"none模式\",\"--net=none\",\"不配置网络，用户可以稍后进入容器，自行配置\",\"container模式\",\"--net=container:name/id\",\"容器和另外一个容器共享Network namespace。 kubernetes中的pod就是多个容器共享一个Network namespace。\",\"host模式\",\"--net=host\",\"容器和宿主机共享Network namespace\",\"用户自定义\",\"--net=自定义网络\",\"用户自己使用network相关命令定义网络，创建容器的时候可以指定为自己定义的网络\",\"[root@xiaoxielinux ~]# docker network inspect bridge [ { \\\"Name\\\": \\\"bridge\\\", \\\"Id\\\": \\\"defce6912c4ae8b16d6f02a6eee0650c79c7d39cba26597de32648f936c0cd43\\\", \\\"Created\\\": \\\"2023-12-12T19:57:25.572880728+08:00\\\", \\\"Scope\\\": \\\"local\\\", \\\"Driver\\\": \\\"bridge\\\", \\\"EnableIPv6\\\": false, \\\"IPAM\\\": { \\\"Driver\\\": \\\"default\\\", \\\"Options\\\": null, \\\"Config\\\": [ { // 网络配置： config配置，子网网段 255*255. 65534 个地址 \\\"Subnet\\\": \\\"172.17.0.0/16\\\", // docker0 网关地址 \\\"Gateway\\\": \\\"172.17.0.1\\\" } ] }, \\\"Internal\\\": false, \\\"Attachable\\\": false, \\\"Ingress\\\": false, \\\"ConfigFrom\\\": { \\\"Network\\\": \\\"\\\" }, \\\"ConfigOnly\\\": false, // 在这个网络下的容器地址。Name就是容器的名字 \\\"Containers\\\": { \\\"325795bd6df82e6ef18ff027f43a189c4ef886a25b95fdc9c5793bc9d7827179\\\": { \\\"Name\\\": \\\"web02\\\", \\\"EndpointID\\\": \\\"9ab43d4cd786b8c79d78fd3bf3f05c6dfbd6f1665ca5bc9e74646f1d6f758508\\\", \\\"MacAddress\\\": \\\"02:42:ac:11:00:03\\\", \\\"IPv4Address\\\": \\\"172.17.0.3/16\\\", \\\"IPv6Address\\\": \\\"\\\" }, \\\"53231c3adf0423ed2d0577ead987507c12978416349a51445d663c9536c9b4ff\\\": { \\\"Name\\\": \\\"web01\\\", \\\"EndpointID\\\": \\\"b891d5b8213b8241b5438c60afc08054c0c4c48490a3715f21fe5591b28b65fc\\\", \\\"MacAddress\\\": \\\"02:42:ac:11:00:02\\\", \\\"IPv4Address\\\": \\\"172.17.0.2/16\\\", \\\"IPv6Address\\\": \\\"\\\" }, \\\"6f67f9f7407edb8c48ce2d3ca413aef414a2a8628080fd69605e4ce2c3bea6ab\\\": { \\\"Name\\\": \\\"web03\\\", \\\"EndpointID\\\": \\\"651e2d1b9dcd72fc7339c687904cf763aaa524bd79cc5945888dfec8829a62b6\\\", \\\"MacAddress\\\": \\\"02:42:ac:11:00:04\\\", \\\"IPv4Address\\\": \\\"172.17.0.4/16\\\", \\\"IPv6Address\\\": \\\"\\\" } }, \\\"Options\\\": { \\\"com.docker.network.bridge.default_bridge\\\": \\\"true\\\", \\\"com.docker.network.bridge.enable_icc\\\": \\\"true\\\", \\\"com.docker.network.bridge.enable_ip_masquerade\\\": \\\"true\\\", \\\"com.docker.network.bridge.host_binding_ipv4\\\": \\\"0.0.0.0\\\", \\\"com.docker.network.bridge.name\\\": \\\"docker0\\\", \\\"com.docker.network.driver.mtu\\\": \\\"1500\\\" }, \\\"Labels\\\": {} } ]\",\"自定义一个网络\",\"[root@xiaoxielinux ~]# docker run -itd --name web01 --net bridge centos 552223f74f163f94238bf536040aa0c683b1ab0fbfbcabdd1ed28644e40f1b9f # docker0网络的特点 1.它是默认的 2.域名访问不通 3.--link 域名通了，但是删了又不行\",\"create命令创建一个新的网络\",\"[root@xiaoxielinux ~]# docker network create \\\\ --driver bridge \\\\ --subnet 192.169.0.0/16 \\\\ --gateway 192.169.0.1 \\\\ mynet d37ec2853507c3e6159db06e4c8a33e39a45edff4ac69949c96f981d7aca9a79 [root@kuangshenlinux ~]# docker network ls NETWORK ID NAME DRIVER SCOPE defce6912c4a bridge bridge local e6e26ff63dfe host host local d37ec2853507 mynet bridge local 8a592709b443 none null local\",\"使用的逻辑\",\"# 未来可以通过网络来隔离项目 docker network create \\\\ --driver bridge \\\\ --subnet 192.169.0.0/16 \\\\ --gateway 192.169.0.1 \\\\ kuangstudynet mysql redis web admin mq # 部署集群挽环境，也可以这样定义网络 mysql 3-5个容器 docker network create \\\\ --driver bridge \\\\ --subnet 192.169.0.0/16 \\\\ --gateway 192.169.0.1 \\\\ mysqlnet --net mysqlnet\",\"# 启动两个服务在自己的网络下。 --net mynet [root@xiaoxielinux ~]# docker run -itd --name wen01-net --net mynet centos e16726178e4ee3b61b0dc47f16d112ba0426bcf040b84949811ebc8607d94555 [root@xiaoxielinux ~]# docker run -itd --name wen02-net --net mynet centos 17fae7a2c0bb66c2834ad7d3dc338c0a5707aea5caf4337138f15c6f2079713e # 测试互相ping，可以使用域名ping通了 [root@xiaoxielinux ~]# docker exec -it wen01-net ping 192.169.0.3 PING 192.169.0.3 (192.169.0.3) 56(84) bytes of data. 64 bytes from 192.169.0.3: icmp_seq=1 ttl=64 time=0.063 ms 64 bytes from 192.169.0.3: icmp_seq=2 ttl=64 time=0.091 ms 64 bytes from 192.169.0.3: icmp_seq=3 ttl=64 time=0.066 ms ^C --- 192.169.0.3 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2001ms rtt min/avg/max/mdev = 0.063/0.073/0.091/0.014 ms [root@kuangshenlinux ~]# docker exec -it wen01-net ping wen02-net PING wen02-net (192.169.0.3) 56(84) bytes of data. 64 bytes from wen02-net.mynet (192.169.0.3): icmp_seq=1 ttl=64 time=0.041 ms 64 bytes from wen02-net.mynet (192.169.0.3): icmp_seq=2 ttl=64 time=0.064 ms 64 bytes from wen02-net.mynet (192.169.0.3): icmp_seq=3 ttl=64 time=0.106 ms 64 bytes from wen02-net.mynet (192.169.0.3): icmp_seq=4 ttl=64 time=0.088 ms ^C --- wen02-net ping statistics --- 4 packets transmitted, 4 received, 0% packet loss, time 3007ms rtt min/avg/max/mdev = 0.041/0.074/0.106/0.026 ms [root@kuangshenlinux ~]# docker exec -it wen02-net ping wen01-net PING wen01-net (192.169.0.2) 56(84) bytes of data. 64 bytes from wen01-net.mynet (192.169.0.2): icmp_seq=1 ttl=64 time=0.052 ms 64 bytes from wen01-net.mynet (192.169.0.2): icmp_seq=2 ttl=64 time=0.092 ms ^C --- wen01-net ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1002ms rtt min/avg/max/mdev = 0.052/0.072/0.092/0.020 ms # 未来在项目中，直接使用容器名来连接服务，ip无论怎么变，都不会发生变化 docker run -itd --name mysql --net mynet mysql mysql:3306/rbms\"]},\"1198\":{\"h\":\"网络连通\",\"t\":[\"由于我们现在是跨网络的，容器之间无法访问\",\"[root@xiaoxielinux ~]# docker exec -it web01 ping wen01-net ping: wen01-net: Name or service not known [root@xiaoxielinux ~]# docker exec -it web01 ping 192.169.0.2\",\"docker0和自定义网络肯定不通，我们使用自定义网络的好处就是网络隔离：\",\"大家公司项目部署的业务都非常多，假设我们有一个商城，我们会有订单业务（操作不同数据），会有订单业务购物车业务（操作不同缓存）。如果在一个网络下，有的程序猿的恶意代码就不能防止了，所以我们就在部署的时候网络隔离，创建两个桥接网卡，比如订单业务（里面的数据库，redis，mq，全部业务 都在order-net网络下）其他业务在其他网络。\",\"那关键的问题来了，如何让 web-net-01 访问 web01？\",\"结论：如果要跨网络操作别人，就需要使用 docker network connect [OPTIONS] NETWORK CONTAINER 连接。\"]},\"1199\":{\"h\":\"容器数据卷\",\"t\":[\"思考：一些镜像中，会有MySQL数据库。然后容器都会有被误删的可能，误删就是删库跑路了嘛？很扯是吧，而且那这样数据持久化就失去意义了。为此容器数据就是干了这个事==做数据持久化，即将容器的数据挂载到宿主机上，与容器独立开\"]},\"1200\":{\"h\":\"02、Docker镜像管理\",\"t\":[\"Docker 镜像的构建 \",\"编写 Dockerfile\",\"使用 docker build 创建镜像\",\"Docker 镜像的优化 \",\"多阶段构建\",\"镜像瘦身技巧\",\"Docker 镜像存储与传输 \",\"镜像的版本管理\",\"镜像的推送与拉取\",\"自定义镜像的创建与管理\"]},\"1201\":{\"h\":\"03、Docker容器管理\",\"t\":[\"启动与停止容器\",\"容器的资源限制 \",\"CPU 和内存限制\",\"存储卷（Volumes）与挂载\",\"网络配置\",\"容器间的通信与链接\",\"容器的日志管理\",\"容器的调试与问题排查\",\"容器的生命周期管理\"]},\"1202\":{\"h\":\"04、Docker网络\",\"t\":[\"Docker 网络概述\",\"Docker 网络模式 \",\"Bridge 网络\",\"Host 网络\",\"None 网络\",\"Overlay 网络\",\"Docker 网络的创建与管理\",\"容器间网络通信与 DNS\",\"Docker 网络安全\"]},\"1203\":{\"h\":\"05、Docker Compose\",\"t\":[\"Docker Compose 简介\",\"安装与配置 Docker Compose\",\"使用 Compose 启动多容器应用\",\"编写 docker-compose.yml 文件\",\"docker-compose 常用命令\",\"Docker Compose 的高级特性\",\"服务扩展与伸缩\",\"环境变量和多环境配置\"]},\"1204\":{\"h\":\"06、Docker 与 DevOps\",\"t\":[\"Docker 在 CI/CD 流水线中的应用\",\"Docker 与 Jenkins 集成\",\"Docker 与 Kubernetes 集成\",\"容器化部署与自动化运维\"]},\"1205\":{\"h\":\"07、Docker Swarm集群\",\"t\":[\"Docker Swarm 简介\",\"创建和管理 Docker Swarm 集群\",\"服务发现与负载均衡\",\"Docker Swarm 与高可用性\",\"Docker Swarm 与持续部署（CD）\",\"Docker Compose 与 Swarm 集成\"]},\"1206\":{\"h\":\"08、高级特性\",\"t\":[\"Docker 多阶段构建\",\"Docker 构建缓存\",\"使用 Docker 进行分布式应用管理\",\"Docker 镜像签名与验证\",\"Docker 容器的调度与自动化\"]},\"1207\":{\"h\":\"09、优化\",\"t\":[\"容器资源利用与监控\",\"容器的性能优化\",\"Docker 与 Kubernetes 性能调优\",\"性能分析与问题定位工具\"]},\"1208\":{\"h\":\"10、常见的问题\",\"t\":[\"Docker 容器无法启动\",\"容器无法联网\",\"Docker 镜像构建失败\",\"Docker 容器资源占用过高\",\"Docker 网络配置问题\"]},\"1209\":{\"c\":[\"运维\"]},\"1210\":{\"h\":\"Jenkins\",\"t\":[\"待定\"]},\"1211\":{\"c\":[\"运维\"]},\"1212\":{\"h\":\"kubernetes\",\"t\":[\"简单理一下Kubernetes快速理解一下，实际使用还是要知道怎么样，具体很细在有时间慢慢补充\",\"kubernetes与docker的关系？K8S集群的pod和node是什么？怎么启动一个pod运行我们要的容器？怎么动态调整容器数量？高级点的deploymen怎么不中断更新容器？pod的怎么访问通信？\",\"部署服务从实体部署到虚拟机再到容器化部署，已经很简化部署了，但是docker运行的容器多了，管理也不方便。为此需要一个\",\"容器化部署可用很容易解决上面的问题，即使用docker进行容器化部署\"]},\"1213\":{\"h\":\"kubenetes架构\"},\"1214\":{\"h\":\"原理\"},\"1215\":{\"h\":\"使用\",\"t\":[\"手动创建pod效率太低了，使用yaml文件做一些配置化方便一些\",\"基本的yaml格式：\",\"apiVersion: xxx kind: 资源类型 matedata: 原信息 spec: 具体信息\",\"创建一个普通pod的yaml\",\"apiVersion: v1 kind: Pod metadata: name: pod_nginx labels: app：nginx spec: containers: - name: nginx-container image: nginx\",\"需要维护几个容器运行（replicaset来做容灾机制，挂了自己启动）\",\"apiVersion: apps/v1 kind: ReplicaSet metadata: name: nginx-ReplicaSet labels: name: nginx-replica spec: replicas: 3 selector: matchLabels: app: nginx template: //-------定义上面pod一样的最为模版 metadata: name: pod_nginx labels: app: nginx spec: containers: - name: nginx-container image: nginx\",\"用deployment来优化升级（上面的副本升级需要关闭现有的，然后启动新的版本）\",\"apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment labels: name: nginx-deploy spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: name: pod_nginx labels: app: nginx spec: containers: - name: nginx-container image: nginx\",\"部署的每一个pod都会有自己的ip，每次启动ip都不一样为此需要service资源使用域名访问\",\"apiVersion: apps/v1 kind: service metadata: name:\"]},\"1216\":{\"c\":[\"运维\"]},\"1217\":{\"h\":\"kubernetes-搭建使用\",\"t\":[\"学习docker最好是在多台linux系统，配置要求：4核4G以上（保证流畅使用），内外可通信\",\"购买阿里云：包月包年收费不划算，推荐按量付费\",\"使用虚拟机（推荐）：使用virtualBox安装centos，利用上电脑资源\"]},\"1218\":{\"h\":\"下载\",\"t\":[\"在阿里云官方下载进行，根据需求只要安装最小版本即可（8已经停止维护了，所有推荐使用7.9版本）\",\"地址：centos-vault-7.9.2009-isos-x86_64安装包下载_开源镜像站-阿里云\",\"使用virtualBox创建一个虚拟机然后指定刚刚下载的为驱动，网络设置桥接模式\",\"执行安装系统（选择最小安装即可）\",\"进去很多东西都没有比如网络，比如软件源，docker镜像源\"]},\"1219\":{\"h\":\"网络设置\",\"t\":[\"# 编辑配置文件：vi /etc/sysconfig/network-scripts/ifcfg-enp0s3xxx # ------------------------------------------------------------ TYPE=Ethernet PROXY_METHOD=none BROWSER_ONLY=no # 将dhcp模式（自动分配ip地址）改为静态模式 BOOTPROTO=static DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no IPV6_ADDR_GEN_MODE=stable-privacy NAME=enp0s3 # 唯一标识网络接口配置 可在系统下用uuidgen命令随机生成 UUID=0d6019d6-e4f6-44f7-b88d-d2d153ea8d0a DEVICE=enp0s3 ONBOOT=yes # 主要：固定ip地址43尽量使用电脑使用的，不然可能网络无法使用 IPADDR=192.168.43.110 NETMASK=255.255.255.0 GATEWAY=192.168.43.1 #----------------------------------------------------------------------- # 查看ip addr # 若是还是没有网络，设置一下NDS：vi /etc/resolv.conf nameserver 8.8.8.8 nameserver 8.8.4.4 # 重启网络 systemctl restart network\"]},\"1220\":{\"h\":\"配置软件源\",\"t\":[\"# 备份原有的源 mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup # 下载阿里的源（初始下载只有curl没有wget工具） curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo # 清除yum旧缓存生成新的 yum clean all yum makecache # 更新系统包 sudo yum update -y #更新必要的包 sudo yum install -y yum-utils device-mapper-persistent-data lvm2\",\"在这里进行拷贝，安装docker会有唯一的dockerID\"]},\"1221\":{\"h\":\"安装docker\",\"t\":[\"配置镜像源为1panel的：https://docker.1panelproxy.com\",\"# 设置Docker的yum仓库 sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo sudo yum makecache fast # 安装docker sudo yum install -y docker-ce docker-ce-cli containerd.io # 配置阿里云镜像加速（https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors） sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json <<-'EOF' { \\\"registry-mirrors\\\": [\\\"https://docker.1panelproxy.com\\\"] } EOF sudo systemctl daemon-reload sudo systemctl restart docker # 启动并设置开机自启 sudo systemctl start docker sudo systemctl enable docker\"]},\"1222\":{\"h\":\"安装K8S\",\"t\":[\"根据官方要需要配置系统，如主机名、关闭防火墙、selinux、关闭swap分区等等\",\"下载三大组件：kubelet、kubeadm、kubectl\",\"# ===================先看配置================== # 设置不同的主机名 hostnamectl set-hostname xxx # 关闭防火墙 sudo systemctl stop firewalld sudo systemctl disable firewalld # 将SElinux设置为permissive模式，禁用 sudo setenforce 0 sudo sed -i 's/^SELINUX=enforcin$/SELINUX=permissive/' /etc/selinux/config # 关闭swap分区 sudo swapoff -a sudo sed -ri 's/.*swap.*/#&/' /etc/fstab # 允许 iptables 检查桥接流量(所有节点) cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf br_netfilter EOF cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sudo sysctl --system # 修改配置yum文件，因为国内无法直接访问google，这里需要将官网中的google的源改为国内源 cat <<EOF > /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF setenforce 0 # ======================安装========================= # 安装集群三大件 kubelet、kubeadm、kubectl yum install -y kubelet kubeadm kubectl systemctl enable kubelet && systemctl start kubelet # 查看版本信息 kubectl version\"]},\"1223\":{\"h\":\"修改容器引擎\",\"t\":[\"官方修改了容器引擎，而我们熟悉的是docker容器引擎，为此可以修改回来\",\"# 下载 wget https://ghproxy.com/https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.4/cri-dockerd-0.3.4.amd64.tgz # 解压cri-docker tar xvf cri-dockerd-*.amd64.tgz cp -r cri-dockerd/ /usr/bin/ chmod +x /usr/bin/cri-dockerd/cri-dockerd # 写入启动cri-docker配置文件 cat > /usr/lib/systemd/system/cri-docker.service <<EOF [Unit] Description=CRI Interface for Docker Application Container Engine Documentation=https://docs.mirantis.com After=network-online.target firewalld.service docker.service Wants=network-online.target Requires=cri-docker.socket [Service] Type=notify ExecStart=/usr/bin/cri-dockerd/cri-dockerd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.7 ExecReload=/bin/kill -s HUP $MAINPID TimeoutSec=0 RestartSec=2 Restart=always StartLimitBurst=3 StartLimitInterval=60s LimitNOFILE=infinity LimitNPROC=infinity LimitCORE=infinity TasksMax=infinity Delegate=yes KillMode=process [Install] WantedBy=multi-user.target EOF # 写入cri-docker的socket配置文件 cat > /usr/lib/systemd/system/cri-docker.socket <<EOF [Unit] Description=CRI Docker Socket for the API PartOf=cri-docker.service [Socket] ListenStream=%t/cri-dockerd.sock SocketMode=0660 SocketUser=root SocketGroup=docker [Install] WantedBy=sockets.target EOF # 当你新增或修改了某个单位文件（如.service文件、.socket文件等），需要运行该命令来刷新systemd对该文件的配置。 systemctl daemon-reload # 确保docker是启动的 # 启用并立即启动cri-docker.service单元。 systemctl enable --now cri-docker.service # 显示docker.service单元的当前状态，包括运行状态、是否启用等信息。 systemctl status cri-docker.service\",\"[root@master network-scripts]# [用户角色 @主机名 当前文件名]提示符 用户角色：当前登入用户，比如root用户，公司会给每一个人开通一个用户（linux是一个多用户系统） 主机名 ：这个主机叫什么，这个写在系统配置文件的可以更改 echo \\\"master\\\" | sudo tee /etc/hostname（解释：echo命令生成字符串master 管道将master作为输入传递tee命令 tee命令将master写入hostname文件中 ） 当前文件名：显示整个路径最后一个文件夹名 提升符：显示用户权限的，比如#是root用户的命令，$是普通用户的命令\"]},\"1224\":{\"h\":\"Kubenetes集群\"},\"1225\":{\"h\":\"初始化主节点\",\"t\":[\"# 所有机器添加master节点的域名映射，这里要改为自己当下master的ip echo \\\"192.168.31.111 cluster-master1\\\" >> /etc/hosts # node节点ping测试映射是否成功 ping cluster-master # 如果init失败，可以kubeadm重置 kubeadm reset --cri-socket unix:///var/run/cri-dockerd.sock ####### 主节点初始化（只在master执行） ####### # 注意修改apiserver的地址为master节点的ip ## 注意service、pod的网络节点不能和master网络ip重叠 kubeadm init \\\\ --apiserver-advertise-address=192.168.31.111 \\\\ --control-plane-endpoint=cluster-master1 \\\\ --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \\\\ --kubernetes-version v1.28.2 \\\\ --service-cidr=10.96.0.0/16 \\\\ --pod-network-cidr=192.169.0.0/16 \\\\ --cri-socket unix:///var/run/cri-dockerd.sock \\\\ # 初始化成功后根据提升执行命令，如 mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config export KUBECONFIG=/etc/kubernetes/admin.conf #You can now join any number of control-plane nodes by copying certificate authoritiesand service account keys on each node and then running the following as root:加入主节点，但是需要配置域名 kubeadm join cluster-master1:6443 --token hduijy.2tf9vfzrdiqe5pxe --discovery-token-ca-cert-hash sha256:032f0096ed00746f2d8d1fbef90cf55343dde0c76aaf1331c9a012f23a2fa3bd --control-plane #Then you can join any number of worker nodes by running the following on each as root:加入work节点 kubeadm join cluster-master1:6443 --token hduijy.2tf9vfzrdiqe5pxe \\\\ --discovery-token-ca-cert-hash sha256:032f0096ed00746f2d8d1fbef90cf55343dde0c76aaf1331c9a012f23a2fa3bd\"]},\"1226\":{\"h\":\"加入控制节点\",\"t\":[\"# 加入前需要每一个节点假如域名，否则不认识这个主机，要确保所有节点的主机名都能被正确解析 # master节点查询加入的命令 （24小时有效期） kubeadm token create --print-join-command # 查看现有的令牌 kubeadm token list # 删除令牌 kubeadm token delete tokenid # 命令加入集群 注意若是docker引擎需要加上--cri-socket unix:///var/run/cri-dockerd.sock表明使用docker作为容器运行时 kubeadm join cluster-master1:6443 \\\\ --token hduijy.2tf9vfzrdiqe5pxe \\\\ --discovery-token-ca-cert-hash sha256:032f0096ed00746f2d8d1fbef90cf55343dde0c76aaf1331c9a012f23a2fa3bd \\\\ --control-plane \\\\ --cri-socket unix:///var/run/cri-dockerd.sock\"]},\"1227\":{\"h\":\"加入work节点\",\"t\":[\"# 查询加入集群命令或者创建命令 kubeadm join cluster-master1:6443 --token hduijy.2tf9vfzrdiqe5pxe \\\\ --discovery-token-ca-cert-hash sha256:032f0096ed00746f2d8d1fbef90cf55343dde0c76aaf1331c9a012f23a2fa3bd \\\\ --cri-socket unix:///var/run/cri-dockerd.sock\"]},\"1228\":{\"h\":\"安装pod网络calico\",\"t\":[\"集群部署一个Pod网络。Pod网络是Kubernetes集群中各个Pod之间进行通信的网络。这里就以calico为例，使用yaml文件进行安装\",\"下载yaml文件\",\"wget https://docs.tigera.io/archive/v3.25/manifests/calico.yaml --no-check-certificate\",\"修改配置文件（清单的进行源是国外的，被限制了）\",\"# 查看镜像信息 cat calico.yaml |grep 'image:' # 批量修改信息 sed -i 's#docker.io/##g' calico.yaml # 再次查看 cat calico.yaml |grep 'image:'\",\"编辑修改文件（修改两个位置）\",\"# 网卡名（应该是没有需要补充上去） - name: IP_AUTODETECTION_METHOD value: \\\"interface=enp0s3\\\" #eth0是本地网卡名称 # network(在初始化那边对应) - name: CALICO_IPV4POOL_CIDR value: \\\"192.169.0.0/16\\\"\",\"应用文件\",\"kubectl apply -f calico.yaml\",\"若是有问题需要撤销\",\"kubectl delete -f calico.yaml\",\"查看是否生效\",\"# 查看节点的状态是否为read [root@master1 kubenetes]# kubectl get nodes NAME STATUS ROLES AGE VERSION master1 Ready control-plane 76m v1.28.2 node1 Ready <none> 67m v1.28.2 node2 Ready <none> 66m v1.28.2\"]},\"1229\":{\"h\":\"安装面板\",\"t\":[\"可以选择使用命令行，也可以使用面板来操作\",\"ymal文件地址：https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\",\"下载后直接输入：kubectl apply -f xxx.yaml\",\"访问页面方式：\"]},\"1230\":{\"h\":\"最新面板安装\",\"t\":[\"官方对于最新的面板安装使用helm来安装了。因为 Helm 能够提供更好的依赖管理、版本控制、环境隔离和自定义配置能力,从而简化 Kubernetes Dashboard 的部署和运维工作。这种方式比直接使用 YAML 配置文件更加高效和可靠。\"]},\"1231\":{\"h\":\"1、安装helm并升级安装dashboard\",\"t\":[\"helm官网：https://helm.sh/zh/docs/intro/install/\",\"# 这里脚本安装helm（可将脚本本地下载下来） curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 chmod 700 get_helm.sh ./get_helm.sh # 添加 kubernetes-dashboard 的 Helm 仓库 helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/ # 升级安装 kubernetes-dashboard: helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --create-namespace # 查看dashboard服务是否正常启动 kubectl -n kubernetes-dashboard get svc\"]},\"1232\":{\"h\":\"2、进入webUI\",\"t\":[\"安装好后可以看到 kubernetes-dashboard-kong-proxy 的服务类型是 ClusterIP。这意味着该服务只能在集群内部访问，不能直接通过浏览器访问。如果要从外部访问，有三种方式\"]},\"1233\":{\"h\":\"①本地代理\",\"t\":[\"概述：kubectl proxy 允许你通过本地代理访问 Kubernetes Dashboard，不用其他任何配置只要kubectl即可，但是仅限本地访问不能远程访问。适合临时访问或开发环境。\",\"工作原理：\",\"启动本地代理后，Kubernetes API Server 会代理请求到 Dashboard。\",\"访问 URL 通常是 http://127.0.0.1:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\",\"**适用场景：**开发环境、临时访问、调试。\"]},\"1234\":{\"h\":\"②修改服务类型\",\"t\":[\"**概述：**通过将 Dashboard 的服务类型更改为 NodePort，可以在集群的所有节点上暴露该服务，运行外部访问，通过节点的 IP 和端口进行访问。\",\"工作原理：\",\"将服务类型从 ClusterIP 修改为 NodePort，Kubernetes 会分配一个端口（通常在 30000-32767 范围内）用于外部访问。\",\"访问 URL 通常是 https://<node-ip>:<node-port>，其中 <node-ip> 是任意一个 Kubernetes 节点的外部 IP，<node-port> 是分配的端口。\",\"**适用场景：**开发环境、临时访问、调试。\"]},\"1235\":{\"h\":\"③Ingress 暴露服务\",\"t\":[\"**概述：**使用 Kubernetes 的 Ingress Controller 来为 Dashboard 配置一个外部访问入口，需要额外的配置资源，但有https配置安全性高且可控制访问也可以高可用，一般应用生产环境中\",\"工作原理：\",\"配置一个 Ingress 资源，将外部请求路由到 Dashboard 服务。\",\"可以使用域名访问 Dashboard。\",\"配置 SSL 证书支持 HTTPS 访问，提升安全性。\",\"**适用场景：**开发环境、临时访问、调试。\",\"综上所述：生产用Ingress暴露服务，开发测试使用本地代理或者修改nodePod类型，下面使用修改type类型为例\",\"# 1、编辑服务资源（使用kubectl edit命令） kubectl -n kubernetes-dashboard edit svc kubernetes-dashboard-kong-proxy # 2、进入编辑找到type字段，将ClusterIP改为NodePod（修改后直接:qw退出即可） type: NodePort # 3、修改后会自动分配一个端口，可以查看（正常都是30000-32767） kubectl -n kubernetes-dashboard get svc kubernetes-dashboard-kong-proxy # 输出：（443是内部访问端口，32454是外部访问端口） NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kubernetes-dashboard-kong-proxy NodePort 10.96.51.198 <none> 443:32454/TCP 26h # 3、查询这个pod运行在哪个节点，浏览器通过https://节点IP:外部访问端口 （忽略不安全连接并且这个需要使用token登入） # 4、生成token # 4.1 未创建管理员权限的 ServiceAccount kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard kubectl create clusterrolebinding dashboard-admin-binding \\\\ --clusterrole=cluster-admin \\\\ --serviceaccount=kubernetes-dashboard:dashboard-admin # 4.2 手动启用 Bound ServiceAccount Token kubectl -n kubernetes-dashboard create token dashboard-admin # 浏览器访问并输入token即可\",\"1. 所有节点的共同准备工作 ├── 系统配置 │ ├── 关闭防火墙、selinux、swap │ ├── 配置内核参数 │ └── 配置主机名和hosts │ ├── 安装基础组件 │ ├── 配置docker源并安装docker │ ├── 配置k8s源 │ ├── 安装kubelet、kubeadm、kubectl │ └── 启动服务 │ 2. 节点角色划分 ├── 确定master节点 └── 确定worker节点 3. 集群初始化 ├── 第一个master节点初始化 │ ├── 生成配置文件 │ ├── kubeadm init │ └── 获取join命令 │ ├── 其他节点加入 │ ├── 其他master节点使用master join命令 │ └── worker节点使用worker join命令 │ 4. 网络配置 └── 部署网络插件（如Calico）\"]},\"1236\":{\"c\":[\"运维\"]},\"1237\":{\"h\":\"Casbin-权限管理\"},\"1238\":{\"h\":\"01、Casbin简介\",\"t\":[\"casbin官网:Casbin · An authorization library that supports access control models like ACL, RBAC, ABAC for Golang, Java, C/C++, Node.js, Javascript, PHP, Laravel, Python, .NET (C#), Delphi, Rust, Ruby, Swift (Objective-C), Lua (OpenResty), Dart (Flutter) and Elixir | Casbin\",\"Casbin 是一个强大的开源访问控制框架，专注于为不同场景下的权限管理提供灵活的解决方案。它支持多种访问控制模型，例如 ACL（访问控制列表）、RBAC（基于角色的访问控制）、ABAC（基于属性的访问控制）等，非常适合在复杂系统中实现精细化的权限管理。\"]},\"1239\":{\"h\":\"特点\",\"t\":[\"支持多种访问控制模型：ACL（访问控制列表）、RBAC（基于角色的访问控制）、ABAC（基于属性的访问控制）以及其他模型（如多租户、多层级角色模型）\",\"可扩展的策略存储：默认支持内存存储，同时也支持多种持久化方案（如：文件、数据库、redis等等）\",\"灵活的策略表达式：Casbin 使用 Policy 格式 配置模型和规则来满足大部分的权限控制需求，另外提供基于 Effector 的决策机制\",\"高性能：设计轻量，可高效处理大规模访问请求\",\"多语言支持：原生支持Go语言，也提供其他开发语言\"]},\"1240\":{\"h\":\"为什么要用这个casbin\",\"t\":[\"后台开发都会有角色和权限，不同的角色可以展示不同的页面，而权限意味着是否可以访问对应的api接口\",\"在没有casbin的情况下：传统的权限管理方案可能是通过硬编码或数据库直接管理权限，这会导致下面一些问题：\",\"修改权限规则需要开发接入，手动匹配用户角色、资源和操作，容易出错、高质量增加、效率低，代码复制还难维护甚至有安全隐患\"]},\"1241\":{\"h\":\"常见的应用场景：\",\"t\":[\"企业权限管理： \",\"定义角色（如管理员、普通用户）并关联资源权限\",\"微服务架构中的权限控制： \",\"通过动态加载策略，为分布式服务提供统一的权限校验\",\"RESTful API 权限： \",\"使用路径匹配实现基于 URL 的权限控制\",\"多租户场景： \",\"支持租户隔离，确保权限的多层级控制\"]},\"1242\":{\"h\":\"02、快速开始\"},\"1243\":{\"h\":\"①、初始化项目\",\"t\":[\"mkdir demo && cd demo && go mod init go get github.com/casbin/casbin/v2\"]},\"1244\":{\"h\":\"②、Casbin使用两个配置文件来设置控制访问\",\"t\":[\"model.conf ：存储访问模型\",\"[request_definition] r = sub, obj, act [policy_definition] p = sub, obj, act [matchers] m = r.sub == p.sub && r.obj == p.obj && r.act == p.act || r.sub == \\\"root\\\" #只要访问主体是root一律放行。 [policy_effect] e = some(where (p.eft == allow))\",\"policy.csv：存储了特定的用户权限配置\",\"p, demo , /user, write #demo用户对/user有write权限 p, demo , /order, read #demo用户对/order有read权限 p, demo1 , /user/userlist,read #demo1用户对/user/userlist有read权限 p, demo2 , /order/orderlist,read #demo2用户对/order/orderlist有read权限\"]},\"1245\":{\"h\":\"③、检查权限\",\"t\":[\"import ( \\\"fmt\\\" \\\"github.com/casbin/casbin/v2\\\" \\\"log\\\" \\\"testing\\\" ) func CheckPermi(e *casbin.Enforcer ,sub,obj,act string) { ok, err := e.Enforce(sub, obj, act) if err != nil { return } if ok == true { fmt.Printf(\\\"%s CAN %s %s\\\\n\\\", sub, act, obj) } else { fmt.Printf(\\\"%s CANNOT %s %s\\\\n\\\", sub, act, obj) } } func TestCasBin( t *testing.T) { e, err := casbin.NewEnforcer(\\\"./model.conf\\\", \\\"./policy.csv\\\") if err !=nil{ log.Fatalf(\\\"NewEnforecer failed:%v\\\\n\\\", err) } //基本权限设置 CheckPermi(e, \\\"demo\\\", \\\"/user\\\", \\\"read\\\") CheckPermi(e, \\\"demo\\\", \\\"/order\\\", \\\"write\\\") CheckPermi(e, \\\"demo1\\\", \\\"/user/userlist\\\", \\\"read\\\") CheckPermi(e, \\\"demo1\\\", \\\"/order/orderlist\\\", \\\"write\\\") }\"]},\"1246\":{\"h\":\"存储\"},\"1247\":{\"h\":\"模型存储\"},\"1248\":{\"h\":\"策略存储\"},\"1249\":{\"h\":\"03、工作原理\",\"t\":[\"在Casbin中，访问控制模型被抽象为基于PERM元模型（策略，效果，请求，匹配器）的CONF文件。 为项目切换或升级授权机制就像修改配置一样简单。 您可以通过组合可用模型来定制自己的访问控制模型。\",\"PERM模型由四个基础部分组成：策略，效果，请求和匹配器。 这些基础部分描述了资源和用户之间的关系。\"]},\"1250\":{\"h\":\"基本概念\"},\"1251\":{\"h\":\"Request\",\"t\":[\"待鉴权的对象（谁对什么资源进行什么操作）\",\"定义请求参数。 基本请求是一个元组对象，至少需要一个主体（被访问实体），对象（被访问资源）和动作（访问方法）。\",\"例如，请求定义可能看起来像这样：r={sub,obj,act}\",\"此定义指定了访问控制匹配函数所需的参数名称和顺序。\"]},\"1252\":{\"h\":\"Policy\",\"t\":[\"策略也是我们定义的各自权限（指定了谁可以对哪些资源执行什么操作）\",\"定义访问策略的模型。 它指定了策略规则文档中字段的名称和顺序。\",\"例如：p={sub, obj, act} 或 p={sub, obj, act, eft}\",\"注意：如果未定义eft（策略结果），则不会读取策略文件中的结果字段，匹配策略结果将默认允许。\"]},\"1253\":{\"h\":\"Matcher\",\"t\":[\"定义上面两者执行怎么样的匹配\",\"定义请求和策略的匹配规则。\",\"例如：m = r.sub == p.sub && r.act == p.act && r.obj == p.obj 这个简单而常见的匹配规则意味着，如果请求的参数（实体，资源和方法）等于策略中找到的那些，那么返回策略结果（p.eft）。 策略的结果将保存在p.eft中。\"]},\"1254\":{\"h\":\"Effect\",\"t\":[\"代表着匹配结果\",\"对匹配器的匹配结果进行逻辑组合判断。\",\"例如：e = some(where(p.eft == allow))\",\"这个语句意味着，如果匹配策略结果p.eft有（一些）允许的结果，那么最终结果为真。\",\"让我们看另一个例子：\",\"e = some(where (p.eft == allow)) && !some(where (p.eft == deny))\",\"这个例子组合的逻辑意义是：如果有一个策略匹配到允许的结果，并且没有策略匹配到拒绝的结果，结果为真。 换句话说，当匹配策略都是允许时，结果为真。 如果有任何拒绝，两者都为假（更简单地说，当允许和拒绝同时存在时，拒绝优先）。\"]},\"1255\":{\"h\":\"⭐什么是ACL？\",\"t\":[\"ACL代表访问控制列表。 这是一种将用户映射到操作和操作映射到资源的方法。\"]},\"1256\":{\"h\":\"模型定义\",\"t\":[\"让我们考虑一个简单的ACL模型示例。\",\"[request_definition] r = sub, act, obj [policy_definition] p = sub, act, obj [policy_effect] e = some(where (p.eft == allow)) [matchers] m = r.sub == p.sub && r.obj == p.obj && r.act == p.act\",\"request_definition是系统的查询模板。 例如，一个请求alice, write, data1可以被解释为\\\"主体Alice能否对对象'data1'执行'write'操作？\\\"。\",\"policy_definition是系统的分配模板。 例如，通过创建一个策略alice, write, data1，你就赋予了主体Alice在对象'data1'上执行'write'操作的权限。\",\"policy_effect定义了策略的效果。\",\"在matchers部分，请求使用条件r.sub == p.sub && r.obj == p.obj && r.act == p.act与策略进行匹配。\"]},\"1257\":{\"h\":\"现在让我们在Casbin编辑器上测试模型\",\"t\":[\"打开编辑器并将上述模型粘贴到模型编辑器中。\",\"在策略编辑器中粘贴以下内容：\",\"p, alice, read, data1 p, bob, write, data2\",\"在请求编辑器中粘贴以下内容：\",\"alice, read, data1\",\"结果将是：\",\"true\"]},\"1258\":{\"h\":\"ACL模型、策略和请求匹配的视觉表示\"},\"1259\":{\"h\":\"什么是RBAC？\",\"t\":[\"RBAC代表基于角色的访问控制。 在RBAC中，用户被分配一个资源的角色，一个角色可以包含任意的操作。 然后请求检查用户是否有权限在资源上执行操作。\"]},\"1260\":{\"h\":\"模型定义\",\"t\":[\"让我们考虑一个简单的RBAC模型：\",\"[request_definition] r = sub, act, obj [policy_definition] p = sub, act, obj [role_definition] g = _, _ g2 = _, _ [policy_effect] e = some(where (p.eft == allow)) [matchers] m = r.sub == p.sub && g(p.act, r.act) && r.obj == p.obj\",\"role_definition是一个图关系构建器，它使用图来比较请求对象和策略对象。\"]},\"1261\":{\"h\":\"现在让我们在Casbin编辑器上测试模型\",\"t\":[\"打开编辑器并将上述模型粘贴到模型编辑器中。\",\"在策略编辑器中粘贴以下内容：\",\"p, alice, reader, data1 p, bob, owner, data2 g, reader, read g, owner, read g, owner, write\",\"在请求编辑器中粘贴以下内容：\",\"alice, read, data1 alice, write, data1 bob, write, data2 bob, read, data2 bob, write, data1\",\"结果将是：\",\"true false true true false\"]},\"1262\":{\"h\":\"RBAC模型、策略和请求匹配的视觉表示\",\"t\":[\"g - Role to action mapping表有一个图映射角色到操作。 这个图可以被编码为一系列的边，如在策略中所示，这是表示图的一种常见方式：\",\"g, reader, read g, owner, read g, owner, write\",\"提示\",\"p表示一个可以使用==操作符进行比较的普通策略。 g是一个基于图的比较函数。 你可以通过添加数字后缀如g, g2, g3, ...等来定义多个图比较器。\"]},\"1263\":{\"h\":\"什么是分层RBAC？\",\"t\":[\"在分层RBAC中，有多种类型的资源，并且资源类型之间存在继承关系。 例如，“订阅”是一种类型，“资源组”是另一种类型。 类型为订阅的sub1可以包含多个类型为资源组的资源组（rg1，rg2）。\",\"与资源层次结构类似，将有两种类型的角色和操作：订阅角色和操作，以及资源组角色和操作。 订阅角色和资源组角色之间存在任意关系。 例如，考虑一个订阅角色sub-owner。 这个角色被一个资源组角色rg-owner继承，这意味着如果我在订阅sub1上被分配了sub-owner角色，那么我自动也获得了rg1和rg2上的rg-owner角色。\"]},\"1264\":{\"h\":\"模型定义\",\"t\":[\"让我们以分层RBAC模型的一个简单例子来说明：\",\"[request_definition] r = sub, act, obj [policy_definition] p = sub, act, obj [role_definition] g = _, _ g2 = _, _ [policy_effect] e = some(where (p.eft == allow)) [matchers] m = r.sub == p.sub && g(p.act, r.act) && g2(p.obj, r.obj)\",\"role_definition是一个图关系构建器，它使用图来比较请求对象和策略对象。\"]},\"1265\":{\"h\":\"现在让我们在Casbin编辑器上测试这个模型\",\"t\":[\"打开编辑器并将上述模型粘贴到模型编辑器中。\",\"在策略编辑器中粘贴以下内容：\",\"p, alice, sub-reader, sub1 p, bob, rg-owner, rg2 // subscription role to subscription action mapping g, sub-reader, sub-read g, sub-owner, sub-read g, sub-owner, sub-write // resourceGroup role to resourceGroup action mapping g, rg-reader, rg-read g, rg-owner, rg-read g, rg-owner, rg-write // subscription role to resourceGroup role mapping g, sub-reader, rg-reader g, sub-owner, rg-owner // subscription resource to resourceGroup resource mapping g2, sub1, rg1 g2, sub2, rg2\",\"并在请求编辑器中粘贴以下内容：\",\"alice, rg-read, rg1\",\"结果将是：\",\"true\"]},\"1266\":{\"h\":\"RBAC模型、策略和请求匹配的视觉表示\",\"t\":[\"g - 角色到（操作，角色）映射表有一个图映射角色到操作，角色映射。 这个图可以被编码为一系列的边，如策略中所示，这是表示图的常见方式：\",\"// subscription role to subscription action mapping g, sub-reader, sub-read g, sub-owner, sub-read g, sub-owner, sub-write // resourceGroup role to resourceGroup action mapping g, rg-reader, rg-read g, rg-owner, rg-read g, rg-owner, rg-write // subscription role to resourceGroup role mapping g, sub-reader, rg-reader g, sub-owner, rg-owner\",\"g2 - 订阅到资源组映射表有一个图映射订阅到资源组：\",\"// subscription resource to resourceGroup resource mapping g2, sub1, rg1 g2, sub2, rg2\"]},\"1267\":{\"h\":\"主题匹配视觉表示\"},\"1268\":{\"h\":\"操作匹配视觉表示\"},\"1269\":{\"h\":\"对象匹配视觉表示\",\"t\":[\"提示\",\"当一个请求提交给Casbin时，所有的策略都会进行这种匹配。 如果至少有一个策略匹配，那么请求的结果为真。 如果没有策略匹配请求，那么结果为假。\"]},\"1270\":{\"c\":[\"权限\"]},\"1271\":{\"h\":\"gin使用\"},\"1272\":{\"h\":\"01. 简介\",\"t\":[\"Gin的轻量级高性能web框架\",\"轻量级：gin的依赖相对很少，主要基于go的net/http包。也没有集成很多组件，扩展性就很强，根据需要进行扩展即可\",\"高性能：基于路由树的httprouter作为路由引擎可快速匹配路由，提供极低的延迟。规避使用反射带来的性能开销，利用go语言本身的高并发的特性吞吐量也是非常高\",\"其他：提供丰富的中间件的支持、完善的错误处理机制\"]},\"1273\":{\"h\":\"1.1. 介绍\",\"t\":[\"Gin是一个golang的微框架，封装比较优雅，API友好，源码注释比较明确，具有快速灵活，容错方便等特点\",\"对于golang而言，web框架的依赖要远比Python，Java之类的要小。自身的net/http足够简单，性能也非常不错\",\"借助框架开发，不仅可以省去很多常用的封装带来的时间，也有助于团队的编码风格和形成规范\"]},\"1274\":{\"h\":\"1.2. 安装\",\"t\":[\"要安装Gin软件包，您需要安装Go并首先设置Go工作区。\",\"1.首先需要安装Go（需要1.10+版本），然后可以使用下面的Go命令安装Gin。\",\"go get -u github.com/gin-gonic/gin\",\"2.将其导入您的代码中：\",\"import \\\"github.com/gin-gonic/gin\\\"\",\"3.（可选）导入net/http。例如，如果使用常量，则需要这样做http.StatusOK。\",\"import \\\"net/http\\\"\"]},\"1275\":{\"h\":\"1.3. hello word\",\"t\":[\"package main import ( \\\"net/http\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { // 1.创建路由 r := gin.Default() // 2.绑定路由规则，执行的函数 // gin.Context，封装了request和response r.GET(\\\"/\\\", func(c *gin.Context) { c.String(http.StatusOK, \\\"hello World!\\\") }) // 3.监听端口，默认在8080 // Run(\\\"里面不指定端口号默认为8080\\\") r.Run(\\\":8000\\\") }\"]},\"1276\":{\"h\":\"02、gin路由\"},\"1277\":{\"h\":\"2.1. 基本路由\",\"t\":[\"gin 框架中采用的路由库是基于httprouter做的\",\"地址为：https://github.com/julienschmidt/httprouter\",\"package main import ( \\\"net/http\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { r := gin.Default() r.GET(\\\"/\\\", func(c *gin.Context) { c.String(http.StatusOK, \\\"hello word\\\") }) r.POST(\\\"/xxxpost\\\",getting) r.PUT(\\\"/xxxput\\\") //监听端口默认为8080 r.Run(\\\":8000\\\") }\"]},\"1278\":{\"h\":\"2.2. Restful风格的API\",\"t\":[\"gin支持Restful风格的API\",\"即Representational State Transfer的缩写。直接翻译的意思是\\\"表现层状态转化\\\"，是一种互联网应用程序的API设计理念：URL定位资源，用HTTP描述操作\",\"1.获取文章 /blog/getXxx Get blog/Xxx\",\"2.添加 /blog/addXxx POST blog/Xxx\",\"3.修改 /blog/updateXxx PUT blog/Xxx\",\"4.删除 /blog/delXxxx DELETE blog/Xxx\"]},\"1279\":{\"h\":\"2.3参数解析\",\"t\":[\"gin中的参数解析中，我们经常会使用结构体来承载数据，数据绑定的主要方法是bind()和ShouldBind()。\",\"全面的话可分四种情况:路由相关参数，请求体参数，请求头参数，结构体参数，下面逐一讲解并结合代码示例，比较简单易懂。\"]},\"1280\":{\"h\":\"①. 路由相关参数\",\"t\":[\"路由相关参数因为参数都在URL上，只是以不同的方式：路径参数、通配符参数、Query参数\",\"可以通过gin的Context的Param方法来获取API参数\",\"路由：/api/user/:id/:action （参数在路径上面）\",\"func main() { e := gin.Default() e.GET(\\\"/api/:username/:userid\\\", FindUser) e.GET(\\\"/downloadFile/*filepath\\\", UserPage) e.GET(\\\"/api/user?name=tom&age=18\\\", GetUser) log.Fatalln(e.Run(\\\":8080\\\")) } // 命名参数示例 （：只匹配单个路径段，如：/api/tom/123） func FindUser(c *gin.Context) { username := c.Param(\\\"username\\\") userid := c.Param(\\\"userid\\\") c.String(http.StatusOK, \\\"username is %s userid is %s\\\", username, userid) } // 通配符参数示例 (*可以匹配多个路径段，包括斜杠，如：/downloadFile/a/b/d.txt) func UserPage(c *gin.Context) { filepath := c.Param(\\\"filepath\\\") c.String(http.StatusOK, \\\"filepath is %s\\\", filepath) } // Query参数 func GetUser(c *gin.Context) { // 单个参数获取 name := c.Query(\\\"name\\\") // 返回空字符串如果不存在 age := c.DefaultQuery(\\\"age\\\", \\\"18\\\") // 可设置默认值 // 获取所有参数 params := c.QueryMap(\\\"params\\\") // 用于map类型参数 c.String(http.StatusOk,\\\"用户名为 %s 已经 %d 岁了\\\") }\",\"cmd 命令进行测试： curl --location --request GET '127.0.0.1:8080/api/tom/123' 结果： username is tom userid is 123 curl --location --request GET '127.0.0.1:8080/downloadFile/img/fruit.png' 结果： filepath is /img/fruit.png curl --location --request GET '127.0.0.1:8080/api/user?name=tom&age=123' 结果： 用户名为 tom 已经 123 岁了\"]},\"1281\":{\"h\":\"②.请求体参数\",\"t\":[\"func main(){ r := gin.Default() r.Post(\\\"/api/user\\\", HandldForm) r.POST(\\\"/api/json\\\", HandleJson) r.POST(\\\"/api/upload\\\", HandleFileUpload) r.Run(\\\":8080\\\") } // 2.1 Form表单 func HandldForm(){ name := c.PostForm(\\\"name\\\") // 表单字段 name := c.DefaultPostForm(\\\"name\\\", \\\"default\\\") // 带默认值 values := c.PostFormMap(\\\"map\\\") // map格式表单 c.JSON(http.StatusOK, gin.H{ \\\"name\\\": name, \\\"age\\\": age, \\\"interests\\\": interests, }) } // 请求示例： // POST http://localhost:8080/api/form // Content-Type: application/x-www-form-urlencoded // name=tom&age=25&interests[sport]=football&interests[music]=jazz // 2.2 JSON数据 func HandleJson{ if err := c.ShouldBindJSON(&user); err != nil { c.JSON(http.StatusBadRequest, gin.H{\\\"error\\\": err.Error()}) return } c.JSON(http.StatusOK, user) } // 请求示例： // POST http://localhost:8080/api/json // Content-Type: application/json // { // \\\"name\\\": \\\"tom\\\", // \\\"age\\\": 25, // \\\"nickname\\\": \\\"tommy\\\" // } // 2.3. 文件上传 func HandleFileUpload(c *gin.Context) { // 单文件 file, err := c.FormFile(\\\"file\\\") if err != nil { c.JSON(http.StatusBadRequest, gin.H{\\\"error\\\": err.Error()}) return } // 保存文件 dst := \\\"./uploads/\\\" + file.Filename if err := c.SaveUploadedFile(file, dst); err != nil { c.JSON(http.StatusInternalServerError, gin.H{\\\"error\\\": err.Error()}) return } c.JSON(http.StatusOK, gin.H{ \\\"message\\\": \\\"File uploaded successfully\\\", \\\"filename\\\": file.Filename, }) } // 请求示例： // POST http://localhost:8080/api/upload // Content-Type: multipart/form-data // file: (binary) // 或者cmd命令执行： curl -X POST https://127.0.0.1:8080/api/upload \\\\ -F \\\"file=@/Users/appleboy/test.zip\\\" \\\\ -H \\\"Content-Type: multipart/form-data\\\" // 多个文件 form, _ := c.MultipartForm() files := form.File[\\\"upload[]\\\"] for _, file := range files { c.SaveIploadFile(file,dst) } type UserForm struct { Name string `form:\\\"name\\\" json:\\\"name\\\" binding:\\\"required\\\"` Age int `form:\\\"age\\\" json:\\\"age\\\" binding:\\\"required,gte=0\\\"` Nickname string `form:\\\"nickname\\\" json:\\\"nickname\\\"` }\"]},\"1282\":{\"h\":\"③.请求头参数\",\"t\":[\"func main(){ r := gin.Default() r.GET(\\\"/api/headers\\\", HandleHeaders) r.Run(\\\":8080\\\") } // 3. Header和Cookie处理 func HandleHeaders(c *gin.Context) { // 获取header token := c.GetHeader(\\\"Authorization\\\") // 获取cookie userCookie, err := c.Cookie(\\\"user\\\") if err != nil { userCookie = \\\"cookie not found\\\" } c.JSON(http.StatusOK, gin.H{ \\\"token\\\": token, \\\"cookie\\\": userCookie, }) } // 请求示例： // GET http://localhost:8080/api/headers // Authorization: Bearer token123 // Cookie: user=tom\"]},\"1283\":{\"h\":\"④.结构体参数\",\"t\":[\"func main(){ r := gin.Default() // 5. 结构体绑定 - 综合示例 r.PUT(\\\"/api/users/:id/:action\\\", HandleUserUpdate) r.Run(\\\":8080\\\") } // 5. 结构体绑定 - 综合示例 func HandleUserUpdate(c *gin.Context) { // URI参数绑定 var uri UserUri if err := c.ShouldBindUri(&uri); err != nil { c.JSON(http.StatusBadRequest, gin.H{\\\"error\\\": err.Error()}) return } // 请求体绑定 var user UserForm if err := c.ShouldBind(&user); err != nil { c.JSON(http.StatusBadRequest, gin.H{\\\"error\\\": err.Error()}) return } // 获取Header token := c.GetHeader(\\\"Authorization\\\") c.JSON(http.StatusOK, gin.H{ \\\"id\\\": uri.ID, \\\"action\\\": uri.Action, \\\"user\\\": user, \\\"token\\\": token, }) } // 请求示例： // PUT http://localhost:8080/api/users/123/update // Authorization: Bearer token123 // Content-Type: application/json // { // \\\"name\\\": \\\"tom\\\", // \\\"age\\\": 25, // \\\"nickname\\\": \\\"tommy\\\" // } type Form struct { Name string `form:\\\"name\\\" json:\\\"name\\\" binding:\\\"required\\\"` Age int `form:\\\"age\\\" json:\\\"age\\\" binding:\\\"required,gte=0\\\"` } var form Form // 会根据 Content-Type 自动选择解析方式 err := c.ShouldBind(&form) // ShouldBind - 常用，会根据 Content-Type 自动选择解析方式 c.ShouldBind(&obj) // 专门针对特定格式的绑定 c.ShouldBindJSON(&obj) // JSON格式 c.ShouldBindXML(&obj) // XML格式 c.ShouldBindQuery(&obj) // 只绑定查询参数 c.ShouldBindUri(&obj) // 只绑定路径参数\"]},\"1284\":{\"h\":\"2.4.Gin路由的底层实现\",\"t\":[\"gin路由系统基于 路由树（Routing Tree）来实现。Gin 使用了类似于 前缀树（Trie） 的数据结构来组织和查找路由，使得路由的查找非常高效。下面是 Gin 路由底层实现的大致概述：\",\"路由树的结构、构建、匹配\"]},\"1285\":{\"h\":\"路由树 - 结构\",\"t\":[\"Gin 的路由树实际上是一棵前缀树 （多叉树的特殊形式），每个节点代表着一个路由的“路径段”（例如 /users 或 /:id），而每个叶子节点则代表最终的路由处理函数（即对应的请求处理器）。\",\"根节点：路径的起点，通常为空字符串“”\",\"路径段：一个路径对应树的一个分支，然后路径段是路由被分解出来的，如/api/user/:id会分解为/api、/user、/:id，每个对应一个节点\",\"静态路由与动态路由：一般都是静态路由，若是路由需要携带参数的为动态路由，需要正则匹配来动态匹配路径\",\"前缀树：父节点最为前缀，然后加上路径，两者组合就是子节点的字符串了（父节点的字符串作为子节点的前缀）\",\"img\"]},\"1286\":{\"h\":\"路由树 - 构建\",\"t\":[\"Gin 在初始化时，会通过 router.GET(), router.POST() 等方法将路由注册到树中。每次注册路由时，Gin 为每种 HTTP 请求方法（如 GET、POST、PUT、DELETE 等）管理一棵单独的路由树，每棵树根据路由进行构建树\",\"r := gin.Default() // 注册静态路由 r.GET(\\\"/hello\\\", func(c *gin.Context) { c.String(200, \\\"Hello, World!\\\") }) // 注册动态路由 r.GET(\\\"/user/:id\\\", func(c *gin.Context) { id := c.Param(\\\"id\\\") c.String(200, \\\"User ID: %s\\\", id) })\"]},\"1287\":{\"h\":\"路由树 - 匹配\",\"t\":[\"路由的匹配是 Gin 的核心，Gin 通过 递归遍历树的方式 来实现路由匹配。\",\"静态路由：进行拆分后再进行匹配\",\"动态路由：进行拆分，然后遇到参数再进行正则解析变量部分\",\"gin使用前缀树来组织路由的为此匹配效率是很高的，时间复杂度是O(N)，N是路径段的数量\",\"匹配过程：\",\"根据http方法选择不同的路由树\",\"根据URL来对路由树进行匹配\",\"优先级：会优先匹配更具体的路径，如：/user/:id 比/user更优先匹配\"]},\"1288\":{\"h\":\"03、参数验证\",\"t\":[\"提示\",\"用户的输入需要数据合法（如：邮箱是否正确，手机号是否合法、密码是否符合要求位数等等），为此前后端的参数是需要校验的，而后端校验是最后一道防线，确保接收到的数据符合业务规则和安全要求。其实真正的校验都应该在服务端来完成才是最合理和最安全的。前端校验只是一种辅助。\"]},\"1289\":{\"h\":\"3.1.结构体验证\",\"t\":[\"参数文档：模型绑定和验证 | Gin Web Framework\",\"Gin对于参数验证其实是使用验证组件：go-playground/validator/v10 ，然后对应的tag标签文档。从文档可以查找我们结构体可以加哪些tag来校验数据合法性 。此外返回错误信息可以翻译为对应的语言\",\":::\",\"注意：使用gin验证使用的tag是binding，而单独使用validator是validator\",\"问题：对于这个验证组件有些不是期望的，还有gin的翻译器对于自定义的可能不生效，为此需要自己定义扩展\",\":::\",\"type Person struct { //不能为空并且大于10 Age int `form:\\\"age\\\" binding:\\\"required,gt=10\\\"` Name string `form:\\\"name\\\" binding:\\\"required\\\"` Birthday time.Time `form:\\\"birthday\\\" time_format:\\\"2006-01-02\\\" time_utc:\\\"1\\\"` Password string `form:\\\"password\\\" binding:\\\"required,min=6,max=12\\\"`//不允许为空，且要在6-12位之间 } func main() { r := gin.Default() r.GET(\\\"/5lmh\\\", func(c *gin.Context) { var person Person if err := c.ShouldBind(&person); err != nil { // 错误信息有包含了校验失败的原因，而且这个是用一个map存储的 m := make(map[string]string) if fieldErrors,isValidatorError := err.(validator.ValidationErrors):isValidatorError{ for _,fieldERR } c.String(500, fmt.Sprint(err)) return } c.String(200, fmt.Sprintf(\\\"%#v\\\", person)) }) r.Run() }\"]},\"1290\":{\"h\":\"3.2.自定义验证\"},\"1291\":{\"h\":\"3.3.多语言翻译错误信息\"},\"1292\":{\"c\":[\"golang\"]},\"1293\":{\"h\":\"gin的原理\"},\"1294\":{\"c\":[\"golang\"]},\"1295\":{\"h\":\"go-zero使用\"},\"1296\":{\"c\":[\"golang\"]},\"1297\":{\"h\":\"go-zero实现原理\"},\"1298\":{\"c\":[\"golang\"]},\"1299\":{\"h\":\"Zap\",\"t\":[\"Zap是一个用Go构建的，快速的 ，结构化，级别化的日志组件。\",\"官方仓库：uber-go/zap: Blazing fast, structured, leveled logging in Go. (github.com)\",\"官方文档：zap package - go.uber.org/zap - Go Packages\"]},\"1300\":{\"h\":\"安装\",\"t\":[\"go get -u go.uber.org/zap\"]},\"1301\":{\"h\":\"快速开始\",\"t\":[\"官方给出了两个快速开始的示例，两个都是产品级别的日志，第一个是一个支持printf风格但是性能相对较低的Sugar。\",\"logger, _ := zap.NewProduction() defer logger.Sync() // 在程序结束时将缓存同步到文件中 sugar := logger.Sugar() sugar.Infow(\\\"failed to fetch URL\\\", \\\"url\\\", url, \\\"attempt\\\", 3, \\\"backoff\\\", time.Second, ) sugar.Infof(\\\"Failed to fetch URL: %s\\\", url)\",\"第二个是性能比较好，但是仅支持强类型输出的日志·logger\",\"logger, _ := zap.NewProduction() defer logger.Sync() logger.Info(\\\"failed to fetch URL\\\", // Structured context as strongly typed Field values. zap.String(\\\"url\\\", url), zap.Int(\\\"attempt\\\", 3), zap.Duration(\\\"backoff\\\", time.Second), )\",\"提示\",\"Zap的使用非常简单，麻烦的点在于配置出一个适合自己项目的日志，官方例子很少，要多读源代码注释。\"]},\"1302\":{\"h\":\"配置\",\"t\":[\"一般来说日志的配置都是写在配置文件里的，Zap的配置也支持通过配置文件反序列化，但是仅支持基础的配置，即便是高级配置官方给出的例子也是十分简洁，并不足以投入使用，所以要详细讲一下细节的配置。\",\"首先看一下总体的配置结构体，需要先搞明白里面的每一个字段的含义\",\"type Config struct { // 最小日志级别 Level AtomicLevel `json:\\\"level\\\" yaml:\\\"level\\\"` // 开发模式，主要影响堆栈跟踪 Development bool `json:\\\"development\\\" yaml:\\\"development\\\"` // 调用者追踪 DisableCaller bool `json:\\\"disableCaller\\\" yaml:\\\"disableCaller\\\"` // 堆栈跟踪 DisableStacktrace bool `json:\\\"disableStacktrace\\\" yaml:\\\"disableStacktrace\\\"` // 采样，在限制日志对性能占用的情况下仅记录部分比较有代表性的日志，等于日志选择性记录 Sampling *SamplingConfig `json:\\\"sampling\\\" yaml:\\\"sampling\\\"` // 编码，分为json和console两种模式 Encoding string `json:\\\"encoding\\\" yaml:\\\"encoding\\\"` // 编码配置，主要是一些输出格式化的配置 EncoderConfig zapcore.EncoderConfig `json:\\\"encoderConfig\\\" yaml:\\\"encoderConfig\\\"` // 日志文件输出路径 OutputPaths []string `json:\\\"outputPaths\\\" yaml:\\\"outputPaths\\\"` // 错误文件输出路径 ErrorOutputPaths []string `json:\\\"errorOutputPaths\\\" yaml:\\\"errorOutputPaths\\\"` // 给日志添加一些默认输出的内容 InitialFields map[string]interface{} `json:\\\"initialFields\\\" yaml:\\\"initialFields\\\"` }\",\"如下是关于编码配置的细节\",\"type EncoderConfig struct { // 键值，如果key为空，那么对于的属性将不会输出 MessageKey string `json:\\\"messageKey\\\" yaml:\\\"messageKey\\\"` LevelKey string `json:\\\"levelKey\\\" yaml:\\\"levelKey\\\"` TimeKey string `json:\\\"timeKey\\\" yaml:\\\"timeKey\\\"` NameKey string `json:\\\"nameKey\\\" yaml:\\\"nameKey\\\"` CallerKey string `json:\\\"callerKey\\\" yaml:\\\"callerKey\\\"` FunctionKey string `json:\\\"functionKey\\\" yaml:\\\"functionKey\\\"` StacktraceKey string `json:\\\"stacktraceKey\\\" yaml:\\\"stacktraceKey\\\"` SkipLineEnding bool `json:\\\"skipLineEnding\\\" yaml:\\\"skipLineEnding\\\"` LineEnding string `json:\\\"lineEnding\\\" yaml:\\\"lineEnding\\\"` // 一些自定义的编码器 EncodeLevel LevelEncoder `json:\\\"levelEncoder\\\" yaml:\\\"levelEncoder\\\"` EncodeTime TimeEncoder `json:\\\"timeEncoder\\\" yaml:\\\"timeEncoder\\\"` EncodeDuration DurationEncoder `json:\\\"durationEncoder\\\" yaml:\\\"durationEncoder\\\"` EncodeCaller CallerEncoder `json:\\\"callerEncoder\\\" yaml:\\\"callerEncoder\\\"` // 日志器名称编码器 EncodeName NameEncoder `json:\\\"nameEncoder\\\" yaml:\\\"nameEncoder\\\"` // 反射编码器，主要是对于interface{}类型，如果没有默认jsonencoder NewReflectedEncoder func(io.Writer) ReflectedEncoder `json:\\\"-\\\" yaml:\\\"-\\\"` // 控制台输出间隔字符串 ConsoleSeparator string `json:\\\"consoleSeparator\\\" yaml:\\\"consoleSeparator\\\"` }\",\"Option是关于一些配置的开关及应用，有很多实现。\",\"type Option interface { apply(*Logger) } // Option的实现 type optionFunc func(*Logger) func (f optionFunc) apply(log *Logger) { f(log) } // 应用 func Development() Option { return optionFunc(func(log *Logger) { log.development = true }) }\",\"这是最常用的日志核心，其内部的字段基本上就代表了我们配置的步骤，也可以参考官方在反序列化配置时的步骤，大致都是一样的。\",\"type ioCore struct { // 日志级别 LevelEnabler // 日志编码 enc Encoder // 日志书写 out WriteSyncer }\",\"zap.Encoder 负责日志的格式化，编码\",\"zap.WriteSyncer 负责日志的输出，主要是输出到文件和控制台\",\"zap.LevelEnabler 最小日志级别，该级别以下的日志不会再通过syncer输出。\"]},\"1303\":{\"h\":\"日志编码\",\"t\":[\"日志编码主要涉及到对于日志的一些细节的格式化，首先看一下直接使用最原始的日志的输出。\",\"func TestQuickStart(t *testing.T) { rawJSON := []byte(`{ \\\"level\\\": \\\"debug\\\", \\\"encoding\\\": \\\"json\\\", \\\"outputPaths\\\": [\\\"stdout\\\"], \\\"errorOutputPaths\\\": [\\\"stderr\\\"], \\\"initialFields\\\": {\\\"foo\\\": \\\"bar\\\"}, \\\"encoderConfig\\\": { \\\"messageKey\\\": \\\"message\\\", \\\"levelKey\\\": \\\"level\\\", \\\"levelEncoder\\\": \\\"lowercase\\\" } }`) var cfg zap.Config if err := json.Unmarshal(rawJSON, &cfg); err != nil { panic(err) } logger := zap.Must(cfg.Build()) defer logger.Sync() logger.Info(\\\"logger construction succeeded\\\") }\",\"{\\\"level\\\":\\\"info\\\",\\\"message\\\":\\\"logger construction succeeded\\\",\\\"foo\\\":\\\"bar\\\"}\",\"会发现这行日志有几个问题：\",\"没有时间\",\"没有调用者的情况，不知道这行日志是哪里输出的，不然到时候发生错误的话都没法排查\",\"没有堆栈情况\",\"接下来就一步一步的来解决问题，主要是对zapcore.EncoderConfig来进行改造，首先我们要自己书写配置文件，不采用官方的直接反序列化。首先自己创建一个配置文件config.yml\",\"# Zap日志配置 zap: prefix: ZapLogTest timeFormat: 2006/01/02 - 15:04:05.00000 level: debug caller: true stackTrace: false encode: console # 日志输出到哪里 file | console | both writer: both logFile: maxSize: 20 backups: 5 compress: true output: - \\\"./log/output.log\\\"\",\"映射到的结构体\",\"// ZapConfig // @Date: 2023-01-09 16:37:05 // @Description: zap日志配置结构体 type ZapConfig struct { Prefix string `yaml:\\\"prefix\\\" mapstructure:\\\"\\\"prefix` TimeFormat string `yaml:\\\"timeFormat\\\" mapstructure:\\\"timeFormat\\\"` Level string `yaml:\\\"level\\\" mapstructure:\\\"level\\\"` Caller bool `yaml:\\\"caller\\\" mapstructure:\\\"caller\\\"` StackTrace bool `yaml:\\\"stackTrace\\\" mapstructure:\\\"stackTrace\\\"` Writer string `yaml:\\\"writer\\\" mapstructure:\\\"writer\\\"` Encode string `yaml:\\\"encode\\\" mapstructure:\\\"encode\\\"` LogFile *LogFileConfig `yaml:\\\"logFile\\\" mapstructure:\\\"logFile\\\"` } // LogFileConfig // @Date: 2023-01-09 16:38:45 // @Description: 日志文件配置结构体 type LogFileConfig struct { MaxSize int `yaml:\\\"maxSize\\\" mapstructure:\\\"maxSize\\\"` BackUps int `yaml:\\\"backups\\\" mapstructure:\\\"backups\\\"` Compress bool `yaml:\\\"compress\\\" mapstructure:\\\"compress\\\"` Output []string `yaml:\\\"output\\\" mapstructure:\\\"output\\\"` Errput []string `yaml:\\\"errput\\\" mapstructure:\\\"errput\\\"` }\",\"提示\",\"读取配置使用Viper，具体代码省略。\",\"type TimeEncoder func(time.Time, PrimitiveArrayEncoder)\",\"TimerEncoder本质上其实是一个函数，我们可以采用官方提供的其他时间编码器，也可以自行编写。\",\"func CustomTimeFormatEncoder(t time.Time, encoder zapcore.PrimitiveArrayEncoder) { encoder.AppendString(global.Config.ZapConfig.Prefix + \\\"\\\\t\\\" + t.Format(global.Config.ZapConfig.TimeFormat)) }\",\"整体部分如下\",\"func zapEncoder(config *ZapConfig) zapcore.Encoder { // 新建一个配置 encoderConfig := zapcore.EncoderConfig{ TimeKey: \\\"Time\\\", LevelKey: \\\"Level\\\", NameKey: \\\"Logger\\\", CallerKey: \\\"Caller\\\", MessageKey: \\\"Message\\\", StacktraceKey: \\\"StackTrace\\\", LineEnding: zapcore.DefaultLineEnding, FunctionKey: zapcore.OmitKey, } // 自定义时间格式 encoderConfig.EncodeTime = CustomTimeFormatEncoder // 日志级别大写 encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder // 秒级时间间隔 encoderConfig.EncodeDuration = zapcore.SecondsDurationEncoder // 简短的调用者输出 encoderConfig.EncodeCaller = zapcore.ShortCallerEncoder // 完整的序列化logger名称 encoderConfig.EncodeName = zapcore.FullNameEncoder // 最终的日志编码 json或者console switch config.Encode { case \\\"json\\\": { return zapcore.NewJSONEncoder(encoderConfig) } case \\\"console\\\": { return zapcore.NewConsoleEncoder(encoderConfig) } } // 默认console return zapcore.NewConsoleEncoder(encoderConfig) }\"]},\"1304\":{\"h\":\"日式输出\",\"t\":[\"日志输出分为控制台输出和文件输出，我们可以根据配置文件来进行动态配置，并且如果想要进行日志文件切割的话还需要使用另一个第三方的依赖。\",\"go get -u github.com/natefinch/lumberjack\",\"最后代码如下\",\" func zapWriteSyncer(cfg *ZapConfig) zapcore.WriteSyncer { syncers := make([]zapcore.WriteSyncer, 0, 2) // 如果开启了日志控制台输出，就加入控制台书写器 if cfg.Writer == config.WriteBoth || cfg.Writer == config.WriteConsole { syncers = append(syncers, zapcore.AddSync(os.Stdout)) } // 如果开启了日志文件存储，就根据文件路径切片加入书写器 if cfg.Writer == config.WriteBoth || cfg.Writer == config.WriteFile { // 添加日志输出器 for _, path := range cfg.LogFile.Output { logger := &lumberjack.Logger{ Filename: path, //文件路径 MaxSize: cfg.LogFile.MaxSize, //分割文件的大小 MaxBackups: cfg.LogFile.BackUps, //备份次数 Compress: cfg.LogFile.Compress, // 是否压缩 LocalTime: true, //使用本地时间 } syncers = append(syncers, zapcore.Lock(zapcore.AddSync(logger))) } } return zap.CombineWriteSyncers(syncers...) }\"]},\"1305\":{\"h\":\"日志级别\",\"t\":[\"官方有关于日志级别的枚举项，直接使用即可。\",\"func zapLevelEnabler(cfg *ZapConfig) zapcore.LevelEnabler { switch cfg.Level { case config.DebugLevel: return zap.DebugLevel case config.InfoLevel: return zap.InfoLevel case config.ErrorLevel: return zap.ErrorLevel case config.PanicLevel: return zap.PanicLevel case config.FatalLevel: return zap.FatalLevel } // 默认Debug级别 return zap.DebugLevel }\"]},\"1306\":{\"h\":\"最后构建\",\"t\":[\"func InitZap(config *ZapConfig) *zap.Logger { // 构建编码器 encoder := zapEncoder(config) // 构建日志级别 levelEnabler := zapLevelEnabler(config) // 最后获得Core和Options subCore, options := tee(config, encoder, levelEnabler) // 创建Logger return zap.New(subCore, options...) } // 将所有合并 func tee(cfg *ZapConfig, encoder zapcore.Encoder, levelEnabler zapcore.LevelEnabler) (core zapcore.Core, options []zap.Option) { sink := zapWriteSyncer(cfg) return zapcore.NewCore(encoder, sink, levelEnabler), buildOptions(cfg, levelEnabler) } // 构建Option func buildOptions(cfg *ZapConfig, levelEnabler zapcore.LevelEnabler) (options []zap.Option) { if cfg.Caller { options = append(options, zap.AddCaller()) } if cfg.StackTrace { options = append(options, zap.AddStacktrace(levelEnabler)) } return }\",\"最后效果\",\"ZapLogTest 2023/01/09 - 19:44:00.91076 INFO demo/zap.go:49 日志初始化完成\"]},\"1307\":{\"h\":\"lumberjack 日志切割组件\",\"t\":[\"Golang 语言标准库的 log 包和 zap 日志库 不支持日志切割，然而如果我们业务每天产生海量日志，日志文件就会越来越大，甚至会触发磁盘空间不足的报警，此时如果我们移动或者删除日志文件，需要先将业务停止写日志，很不方便。\",\"而且大日志文件也不方便查询，多少有点失去日志的意义。所以实际业务开发中，我们通常会按照日志文件大小或者日期进行日志切割。\",\"Golang 语言第三方库 lumberjack 的作用就是进行日志切割；\",\"lumberjack 提供了一个滚动记录器 logger，它是一个控制写入日志的文件的日志组件，目前最新版本是 v2.0，需要使用 gopkg.in 导入。\",\"安装：\",\"go get -u github.com/natefinch/lumberjack\",\"导入方式：\",\"import \\\"gopkg.in/natefinch/lumberjack.v2\\\"\",\"使用：\",\"与标准库的 log 包一起使用，只需在应用程序启动时将它传递到 SetOutput 函数即可：\",\"log.SetOutput(&lumberjack.Logger{ Filename: \\\"./log/test.log\\\", MaxSize: 1, // 单位: MB MaxBackups: 3, MaxAge: 28, //单位: 天 Compress: true, // 默认情况下禁用 })\",\"与Go第三方库zap 一起使用：\",\"func getLogWriter(filename string, maxsize, maxBackup, maxAge int) zapcore.WriteSyncer { lumberJackLogger := &lumberjack.Logger{ Filename: filename, // 文件位置 MaxSize: maxsize, // 进行切割之前,日志文件的最大大小(MB为单位) MaxAge: maxAge, // 保留旧文件的最大天数 MaxBackups: maxBackup, // 保留旧文件的最大个数 Compress: false, // 是否压缩/归档旧文件 } // AddSync 将 io.Writer 转换为 WriteSyncer。 // 它试图变得智能：如果 io.Writer 的具体类型实现了 WriteSyncer，我们将使用现有的 Sync 方法。 // 如果没有，我们将添加一个无操作同步。 return zapcore.AddSync(lumberJackLogger) }\",\"可以看出，重点在lumberjack.Logger上，查看源码我们可以知道：\",\"Logger 是一个写入指定文件名的 io.WriteCloser。\",\"Logger 在第一次写入时打开或创建日志文件。如果文件存在并且小于 MaxSize 兆字节，lumberjack 将打开并附加到该文件。如果文件存在并且其大小 >= MaxSize 兆字节，则通过将当前时间放在文件扩展名之前的名称中的时间戳中来重命名文件（如果没有扩展名，则放在文件名的末尾）。然后使用原始文件名创建一个新的日志文件。\",\"每当写入会导致当前日志文件超过 MaxSize 兆字节时，当前文件将被关闭、重命名，并使用原始名称创建新的日志文件。因此，你给 Logger 的文件名始终是“当前”日志文件。\",\"可以看到，原文件写到MaxSize大小之后，会被重命名，格式为：原文件名+当前时间（时间格式为time.Time 格式），而创建一个新的文件，命名为原文件名。\",\"备份\",\"备份使用提供给 Logger 的日志文件名，格式为 name-timestamp.ext 其中 name 是不带扩展名的文件名，timestamp 是使用 time.Time 格式格式化的日志轮换时间2006-01-02T15-04-05.000，扩展名ext是原始扩展名。\",\"例如，如果您的 Logger.Filename 是/var/log/foo/server.log，则在 2016 年 11 月 11 日下午 6:30 创建的备份将使用文件名 /var/log/foo/server-2016- 11-04T18-30-00.000.log\",\"清理旧的日志文件 每当创建新的日志文件时，可能会删除旧的日志文件。根据编码时间戳的最新文件将被保留，最多等于 MaxBackups 的数量（如果 MaxBackups 为 0，则保留所有文件）。无论 MaxBackups 是什么，任何编码时间戳早于 MaxAge 天的文件都会被删除。请注意，时间戳中编码的时间是轮换时间，可能与上次写入该文件的时间不同。\",\"如果 MaxBackups 和 MaxAge 都为 0，则不会删除旧的日志文件。\",\"type Logger struct { // Filename 写入日志的文件。备份的日志文件将保留在同一目录下。 // 如果为空，则在os.TempDir()中使用-lumberjack.log。 Filename string `json:\\\"filename\\\" yaml:\\\"filename\\\"` // MaxSize 是日志文件在轮换之前的最大大小（以 MB 为单位）。默认为 100 兆字节。 MaxSize int `json:\\\"maxsize\\\" yaml:\\\"maxsize\\\"` // MaxAge 是根据文件名中编码的时间戳保留旧日志文件的最大天数。 // 请注意，一天被定义为 24 小时，由于夏令时、闰秒等原因，可能与日历日不完全对应。 // 默认情况下不会根据年龄删除旧日志文件。 MaxAge int `json:\\\"maxage\\\" yaml:\\\"maxage\\\"` // MaxBackups 是要保留的旧日志文件的最大数量。 // 默认是保留所有旧的日志文件（尽管 MaxAge 可能仍会导致它们被删除。） MaxBackups int `json:\\\"maxbackups\\\" yaml:\\\"maxbackups\\\"` // LocalTime 确定用于格式化备份文件中时间戳的时间是否是计算机的本地时间。默认是使用 UTC 时间。 LocalTime bool `json:\\\"localtime\\\" yaml:\\\"localtime\\\"` // Compress 确定是否应使用 gzip 压缩旋转的日志文件。默认是不执行压缩。 Compress bool `json:\\\"compress\\\" yaml:\\\"compress\\\"` ...\"]},\"1308\":{\"h\":\"简介\",\"t\":[\"Go语言的标准库非常的丰富（数据结构除外），功能也十分强大，API对开发人员而言十分友好，能够熟练运用标准库对日常开发将会有非常大的帮助。比如你可以不用任何外部依赖，仅使用net/http，html/template，database/sql这三个库就可以开发一个独立完整的Web项目。\",\"下面举一些常用的标准库的作用，每一个标准库的包级注释都会详细说明这个包是干什么用的。\",\"fmt，用于处理格式化输入输出的包\",\"html，html模板操作包\",\"net，提供一系列网络操作的包，相当的强大\",\"flag，命令行参数解析包\",\"reflect，反射操作包\",\"log，自带的日志包\",\"sort，排序操作包\",\"regex，正则表达式包\",\"image，图像操作的包\",\"time，时间操作的包\",\"unicode，unicode字符集操作包\",\"unsafe，提供没有类型限制的指针操作\",\"syscall，操作系统提供的系统调用包\",\"testing，测试包，主要是写测试的时候用。\",\"sync ，并发操作包\",\"context，上下文包\",\"strconv，字符串转换包\",\"strings，字符串操作包\",\"bytes，字节切片操作包\",\"maps，map操作包\",\"slices，切片操作包\",\"io，定义了一系列基础的IO接口，例如常用的Closer，Writer等，还有一些基础的IO操作函数。\",\"io/fs，定义了一系列文件系统的接口，算是对文件系统的抽象。\",\"os，操作系统进行交互的包，提供的是一系列具体的函数，可以简单理解为是上面两个的具体实现。\",\"os/signal，操作系统信号包，用于监听操作系统的信号，主要用于实现程序的优雅关闭。\",\"os/exec，操作系统命令包，用于执行操作系统命令。\",\"os/user，操作系统用户包，用于获取操作系统的用户信息。\",\"bufio，有缓冲IO读写包。\",\"path，处理斜杠分隔路径的包，例如url之类的。\",\"path/filepath，处理文件路径的包。\",\"math，数学操作包\",\"math/bits，位运算操作包\",\"math/cmplx，复数操作包，也提供了一些三角函数的工具函数。\",\"math/rand，伪随机包\",\"math/big，大数高精度计算包\",\"container/heap，最小堆的实现\",\"container/list，双线链表的实现\",\"container/ring，环的实现\",\"archive/zip，zip压缩归档的包\",\"archive/tar，tar归档文件的包\",\"compress，压缩算法实现的包，比如gzip，flate。\",\"database/sql，与数据库进行交互的包\",\"encoding，处理编码的包，其下有很多子包，比如json，xml之类的，还有base64这种。\",\"crypto，处理加密的包，其下有很多子包，比如sha1，rsa等\",\"go/ast，go源代码抽象语法树映射的包\",\"go/parser ，将go源代码解析成抽象语法树的包\",\"go/importer，提供了对导入器的访问\",\"go/format，go语言格式化包\",\"areana，提供可手动分配和释放内存的功能，处于实验阶段\",\"runtime，运行时操作包，go中有许多操作都是这个包实现的。\"]},\"1309\":{\"h\":\"encode\",\"t\":[\"在当前互联网时代中，最常用的独立于语言的数据格式有xml， Yaml，json，protobuf，Go同样的也支持这些数据格式的相关的操作，以下为对比表格。\",\"名称\",\"XML\",\"YAML\",\"JSON\",\"Protocol Buffers\",\"数据结构\",\"复杂\",\"较简单\",\"简单\",\"较复杂\",\"保存方式\",\"文本\",\"文本\",\"文本\",\"二进制\",\"保存大小\",\"大\",\"中\",\"中\",\"小\",\"解析效率\",\"慢\",\"中\",\"中\",\"快\",\"语言支持\",\"非常多\",\"多\",\"很多\",\"较多\",\"开发难度\",\"繁琐\",\"较简单\",\"简单\",\"简单\",\"学习成本\",\"低\",\"低\",\"低\",\"低\",\"适用范围\",\"数据交换\",\"配置文件\",\"数据交换\",\"数据交换\",\"提示\",\"在go中，如果想要对结构体进行序列化与反序列化，字段必须是对外暴露的，即首字母大写。\",\"另外，TOML也逐渐开始流行，语法上像是.ini的改进，感兴趣可以前往TOML：Tom 的（语义）明显、（配置）最小化的语言了解一下。\"]},\"1310\":{\"h\":\"XML\",\"t\":[\"xml又名eXtensible Markup Language，是用于存储数据的一种格式，起源于20世纪60年代，是以上几种数据格式中最为古老的一种。它的用途十分广泛，可用于网络传输，数据交换，配置文件，数据存储等等。但随着时代的更替，逐渐正在被新的标记语言替代。\",\"首先定义结构体\",\"type Person struct { UserId string `xml:\\\"id\\\"` Username string `xml:\\\"name\\\"` Age int `xml:\\\"age\\\"` Address string `xml:\\\"address\\\"` }\",\"func Marshal(v any) ([]byte, error) //xml序列化 func MarshalIndent(v any, prefix, indent string) ([]byte, error) //格式化 func Unmarshal(data []byte, v any) error //反序列化\"]},\"1311\":{\"h\":\"序列化\",\"t\":[\"func main() { person := Person{ UserId: \\\"120\\\", Username: \\\"jack\\\", Age: 18, Address: \\\"usa\\\", } bytes, err := xml.MarshalIndent(person, \\\"\\\", \\\"\\\\t\\\") if err != nil { fmt.Println(err) return } fmt.Println(string(bytes)) }\",\"输出\",\"<Person> <id>120</id> <name>jack</name> <age>18</age> <address>usa</address> </Person>\"]},\"1312\":{\"h\":\"反序列化\",\"t\":[\"func main() { var person = Person{ UserId: \\\"\\\", Username: \\\"\\\", Age: 0, Address: \\\"\\\", } xmlStr := \\\"<Person> \\\\n <id>120</id> \\\\n <name>jack</name> \\\\n <age>18</age> \\\\n <address>usa</address>\\\\n</Person> \\\" err := xml.Unmarshal([]byte(xmlStr), &person) if err != nil { fmt.Println(err) return } }\",\"输出\",\"{UserId:120 Username:jack Age:18 Address:usa}\",\"不过传统的xml解析方式经常需要新建结构体，这会十分的繁琐，现在解析的都是简单的xml结构，倘若使用复杂的结构，就会让人十分头疼。所以我们大多数会用一个第三方开源库etree来解析xml，感兴趣的可以自行了解：Go比较好用的解析xml文件的插件etree - 掘金 (juejin.cn)。\"]},\"1313\":{\"h\":\"YML\",\"t\":[\"YAML的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件，YML也在许多项目里以配置文件的形式存在，它的内容结构更加简洁，一目了然。go官方并没有提供对于YML的支持，我们需要使用第三方包。\",\"go get github.com/go-yaml/yaml\",\"主要方法\",\"func Marshal(in interface{}) (out []byte, err error) //序列化 func Unmarshal(in []byte, out interface{}) (err error) //反序列化\",\"先准备结构体\",\"type Config struct { Database string `yaml:\\\"database\\\"` Url string `yaml:\\\"url\\\"` Port int `yaml:\\\"port\\\"` Username string `yaml:\\\"username\\\"` Password string `yaml:\\\"password\\\"` }\",\"配置文件\",\"database: mysql url: 127.0.0.1 port: 3306 username: root password: 123456\"]},\"1314\":{\"h\":\"序列化\",\"t\":[\"func main() { config := Config{ Database: \\\"oracle\\\", Url: \\\"localhost\\\", Port: 3326, Username: \\\"root\\\", Password: \\\"123456\\\", } out, err := yaml.Marshal(config) if err != nil { fmt.Println(err) return } fmt.Println(string(out)) }\",\"输出\",\"database: oracle url: localhost port: 3326 username: root password: \\\"123456\\\"\",\"不过由于yml本身有着严格的缩进语法，所以也不存在什么序列化格式化的问题了。\"]},\"1315\":{\"h\":\"反序列化\",\"t\":[\"func main() { bytes, err := os.ReadFile(\\\"./src/config.yml\\\") if err != nil { fmt.Println(err) return } var config Config err = yaml.Unmarshal(bytes, &config) if err != nil { fmt.Println(err) return } fmt.Println(config) }\",\"输出\",\"{mysql 127.0.0.1 3306 root 123456}\"]},\"1316\":{\"h\":\"JSON\",\"t\":[\"json在Restful风格的接口通信中经常会用到，其相较于xml更轻便的大小，低廉的学习成本使其在web领域称为了主流的数据交换格式。\",\"在go中，encoding/json包下提供对应的函数来进行json的序列化与反序列化，主要使用的有如下函数。\",\"func Marshal(v any) ([]byte, error) //将go对象序列化为json字符串 func Unmarshal(data []byte, v any) error //将json字符串反序列化为go对象\",\"首先定义结构体\",\"type Person struct { UserId string Username string Age int Address string }\"]},\"1317\":{\"h\":\"序列化\",\"t\":[\"func main() { person := Person{ UserId: \\\"120\\\", Username: \\\"jack\\\", Age: 18, Address: \\\"usa\\\", } bytes, err := json.Marshal(person) if err != nil { fmt.Println(err) return } fmt.Println(string(bytes)) }\",\"结果\",\"{\\\"UserId\\\":\\\"120\\\",\\\"Username\\\":\\\"jack\\\",\\\"Age\\\":18,\\\"Address\\\":\\\"usa\\\"}\"]},\"1318\":{\"h\":\"字段重命名\",\"t\":[\"我们可以通过结构体标签来达到重命名的效果。\",\"type Person struct { UserId string `json:\\\"id\\\"` Username string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` Address string `json:\\\"address\\\"` }\",\"此时输出\",\"{\\\"id\\\":\\\"1202\\\",\\\"name\\\":\\\"jack\\\",\\\"age\\\":19,\\\"address\\\":\\\"USA\\\"}\"]},\"1319\":{\"h\":\"缩进\",\"t\":[\"序列化时默认是没有任何缩进的，这是为了减少传输过程的空间损耗，但是这并不利于人为观察，在一些情况下我们需要将其序列化成人类能够观察的形式。为此，只需要换一个函数。\",\"func MarshalIndent(v any, prefix, indent string) ([]byte, error)\",\"func main() { person := Person{ UserId: \\\"1202\\\", Username: \\\"jack\\\", Age: 19, Address: \\\"USA\\\", } bytes, err := json.MarshalIndent(person, \\\"\\\", \\\"\\\\t\\\") if err != nil { fmt.Println(err) return } fmt.Println(string(bytes)) }\",\"输出如下\",\"{ \\\"id\\\": \\\"1202\\\", \\\"name\\\": \\\"jack\\\", \\\"age\\\": 19, \\\"address\\\": \\\"USA\\\" }\"]},\"1320\":{\"h\":\"反序列化\",\"t\":[\"在反序列化时需要注意，如果结构体有json标签的话，则字段名优先以json标签为准，否则以结构体属性名为准。\",\"func main() { person := Person{} jsonStr := \\\"{\\\\\\\"id\\\\\\\":\\\\\\\"120\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"jack\\\\\\\",\\\\\\\"age\\\\\\\":18,\\\\\\\"address\\\\\\\":\\\\\\\"usa\\\\\\\"}\\\\n\\\" err := json.Unmarshal([]byte(jsonStr), &person) if err != nil { fmt.Println(err) return } fmt.Printf(\\\"%+v\\\", person) }\",\"输出\",\"{UserId:120 Username:jack Age:18 Address:usa}\"]},\"1321\":{\"h\":\"Protocol Buffers\",\"t\":[\"protocol是谷歌2008开源的语言中立，协议中立，可扩展的结构化数据序列化机制。相比于以上三种更加的轻便，而且在解包封包的时候更加的快速，多用于RPC领域通信相关，有关Protobuf的讲解可以前往Protobuf。\",\"安装依赖\",\"go get github.com/golang/protobuf/proto\",\"person.proto文件\",\"syntax = \\\"proto3\\\"; option go_package = \\\"./;person\\\"; package proto; enum Gender{ MAIL = 0; FE_MAIL = 1; } message person { string name = 1; int32 age = 2; Gender gender = 3; }\",\"生成文件后\",\"package main import ( p \\\"GoProject/src/proto\\\" \\\"fmt\\\" \\\"github.com/golang/protobuf/proto\\\" ) func main() { person := p.Person{ Name: \\\"wyh\\\", Age: 12, Gender: p.Gender_FE_MAIL, } data, err := proto.Marshal(&person)//序列化 if err != nil { fmt.Println(err) return } temp := &p.Person{} fmt.Println(\\\"proto buffer len: \\\", len(data), \\\"bytes:\\\", data) err = proto.Unmarshal(data, temp)//反序列化 if err != nil { fmt.Println(err) return } fmt.Println(temp) }\",\"输出\",\"proto buffer len: 9 bytes: [10 3 119 121 104 16 12 24 1] name:\\\"wyh\\\" age:12 gender:FE_MAIL\",\"不过通常我们不会去手动序列化，protoc编译器可以根据我们定义好的proto文件生成对应语言的源代码。\"]},\"1322\":{\"h\":\"flag\",\"t\":[\"Go语言内置的Flag包实现了命令行参数的解析，Flag包使得开发命令行工具更加简单。\"]},\"1323\":{\"h\":\"导入\",\"t\":[\"import flag\"]},\"1324\":{\"h\":\"类型\",\"t\":[\"其支持的类型有:\",\"bool\",\"int\",\"int64\",\"uint\",\"uint64\",\"float\",\"float64\",\"string\",\"duration\"]},\"1325\":{\"h\":\"定义\",\"t\":[\"使用flag.Type()来定义，返回值是指针\",\"name := flag.String(\\\"name\\\", \\\"张三\\\", \\\"姓名\\\") age := flag.Int(\\\"age\\\", 15, \\\"年龄\\\") sex := flag.Bool(\\\"sex\\\", true, \\\"性别\\\")\",\"也可以使用flag.TypeVar()来定义\",\"var name string var age int var sex bool flag.StringVar(&name, \\\"name\\\", \\\"张三\\\", \\\"姓名\\\") flag.IntVar(&age, \\\"age\\\", 15, \\\"年龄\\\") flag.BoolVar(&sex, \\\"sex\\\", true, \\\"性别\\\")\"]},\"1326\":{\"h\":\"解析\",\"t\":[\"通过调用flag.Parse()来解析参数，支持的命令行参数格式有如下几种:\",\"-flag xxx\",\"--flag xxx\",\"-flag=xxx\",\"--flag=xxx\",\"布尔类型的参数必须使用等号，Flag解析会在第一个非命令行参数之前停止。\"]},\"1327\":{\"h\":\"其他\",\"t\":[\"func Args() []string //返回所有非命令参数 func NArg() int //返回非命令行参数的个数 func NFlag() int //返回命令行参数的个数\"]},\"1328\":{\"h\":\"示例\",\"t\":[\"var name string var age int var sex bool flag.StringVar(&name, \\\"name\\\", \\\"张三\\\", \\\"姓名\\\") flag.IntVar(&age, \\\"age\\\", 15, \\\"年龄\\\") flag.BoolVar(&sex, \\\"sex\\\", true, \\\"性别\\\") flag.Parse() fmt.Println(name, age, sex)\",\"编译后在命令行启动程序\",\"PS D:\\\\WorkSpace\\\\Code\\\\GoProject\\\\bin> .\\\\go_build_GoProject_src_main.exe 张三 15 true PS D:\\\\WorkSpace\\\\Code\\\\GoProject\\\\bin> .\\\\go_build_GoProject_src_main.exe -h Usage of D:\\\\WorkSpace\\\\Code\\\\GoProject\\\\bin\\\\go_build_GoProject_src_main.exe: -age int 年龄 (default 15) -name string 姓名 (default \\\"张三\\\") -sex 性别 (default true) PS D:\\\\WorkSpace\\\\Code\\\\GoProject\\\\bin> .\\\\go_build_GoProject_src_main.exe -age 15 -name \\\"李四\\\" -sex=false 李四 15 false PS D:\\\\WorkSpace\\\\Code\\\\GoProject\\\\bin>\"]},\"1329\":{\"h\":\"http\",\"t\":[\"Go语言标准库中的net/http包十分的优秀，提供了非常完善的HTTP客户端与服务端的实现，仅通过几行代码就可以搭建一个非常简单的HTTP服务器。\",\"几乎所有的go语言中的web框架，都是对已有的http包做的封装与修改，因此，十分建议学习其他框架前先行掌握http包。\"]},\"1330\":{\"h\":\"Get示例\",\"t\":[\"关于Http相关的知识这里不再赘述，想要了解更多的话可以去百度。\",\"func main() { resp, err := http.Get(\\\"https://baidu.com\\\") if err != nil { fmt.Println(err) return } defer resp.Body.Close() content, err := io.ReadAll(resp.Body) fmt.Println(string(content)) }\",\"通过直接调用Http包下的函数就可以发起简单的请求，会返回一个指针与错误，调用过后必须将其手动关闭。\"]},\"1331\":{\"h\":\"Post示例\",\"t\":[\"func main() { person := Person{ UserId: \\\"120\\\", Username: \\\"jack\\\", Age: 18, Address: \\\"usa\\\", } json, _ := json.Marshal(person) reader := bytes.NewReader(json) resp, err := http.Post(\\\"https://golang.org\\\", \\\"application/json;charset=utf-8\\\", reader) if err != nil { fmt.Println(err) } defer resp.Body.Close() }\"]},\"1332\":{\"h\":\"客户端\",\"t\":[\"一般情况下，我们都不会直接使用上述的方法，而且会自己配置一个客户端来达到更加细致化的需求。这将会用到http.Client{}结构体，可提供的配置项总共有四个:\",\"Transport:配置Http客户端数据传输相关的配置项，没有就采用默认的策略\",\"Timeout：请求超时时间配置\",\"Jar：Cookie相关配置\",\"CheckRedirect：重定向配置\"]},\"1333\":{\"h\":\"\",\"t\":[\"func main() { client := &http.Client{} request, _ := http.NewRequest(\\\"GET\\\", \\\"https://golang.org\\\", nil) resp, _ := client.Do(request) defer resp.Body.Close() }\"]},\"1334\":{\"h\":\"\",\"t\":[\"func main() { client := &http.Client{} request, _ := http.NewRequest(\\\"GET\\\", \\\"https://golang.org\\\", nil) request.Header.Add(\\\"Authorization\\\",\\\"123456\\\") resp, _ := client.Do(request) defer resp.Body.Close() }\",\"一些详细的配置这里不会做过多的赘述，还请自行了解。\"]},\"1335\":{\"h\":\"服务端\",\"t\":[\"对于go而言，创建一个http服务器只需要一行代码。\",\"第一个参数是监听的地址，第二个参数是处理器，如果为空的话则使用默认的处理器。大多数情况下使用默认的处理器DefaultServeMux即可。\",\"http.ListenAndServe(\\\"localhost:8080\\\", nil)\"]},\"1336\":{\"h\":\"\",\"t\":[\"当然也可以自定义配置一个服务端\",\"func main() { server := &http.Server{ Addr: \\\":8080\\\", Handler: nil, TLSConfig: nil, ReadTimeout: 0, ReadHeaderTimeout: 0, WriteTimeout: 0, IdleTimeout: 0, MaxHeaderBytes: 0, TLSNextProto: nil, ConnState: nil, ErrorLog: nil, BaseContext: nil, ConnContext: nil, } server.ListenAndServe() }\",\"一些详细的配置请自行了解。\"]},\"1337\":{\"h\":\"\",\"t\":[\"首先需要首先自定义一个结构体实现Handler接口中的ServeHTTP(ResponseWriter, *Request)方法，再调用http.handle()函数即可\",\"func main() { http.Handle(\\\"/index\\\", &MyHandler{}) http.ListenAndServe(\\\":8080\\\", nil) } type MyHandler struct { } func (h *MyHandler) ServeHTTP(writer http.ResponseWriter, request *http.Request) { fmt.Println(\\\"my implement\\\") }\",\"但是每一次都要自定义一个结构体将会十分的繁琐，也可以直接http.handlerFunc函数，我们只需要写处理函数即可，从而不用创建结构体。其内部是使用了适配器类型HandlerFunc,HandlerFunc类型是一个适配器，允许将普通函数用作HTTP的处理器。如果f是具有适当签名的函数，HandlerFunc(f)是调用f的Handler。\",\"func main() { http.HandleFunc(\\\"/index\\\", func(responseWriter http.ResponseWriter, request *http.Request) { fmt.Println(responseWriter, \\\"index\\\") }) http.ListenAndServe(\\\":8080\\\", nil) }\",\"ServerMux是核心结构体，实现了基本的方法，DefaultServeMux是的默认实例。\"]},\"1338\":{\"h\":\"\",\"t\":[\"http包提供了开箱即用的反向代理功能\",\"func main() { http.HandleFunc(\\\"/forward\\\", func(writer http.ResponseWriter, request *http.Request) { director := func(request *http.Request) { request.URL.Scheme = \\\"https\\\" request.URL.Host = \\\"golang.org\\\" request.URL.Path = \\\"index\\\" } proxy := httputil.ReverseProxy{Director: director} proxy.ServeHTTP(writer, request) }) http.ListenAndServe(\\\":8080\\\", nil) }\",\"上述代码会将所有请求转发到https://golang.org/index。\"]},\"1339\":{\"h\":\"log\",\"t\":[\"Go语言标准库log包实现了简单的日志。\",\"func main() { log.Println(\\\"日志\\\") log.Panicln(\\\"panic日志\\\") log.Fatalln(\\\"错误日志\\\") }\",\"Fatal会在写入日志信息后调用os.exit(1)，panic则会抛出panic\"]},\"1340\":{\"h\":\"前缀\",\"t\":[\"func (l *Logger) Prefix() string //获取前缀 func (l *Logger) SetPrefix(prefix string) //设置前缀\",\"例子\",\"func main() { log.SetPrefix(\\\"[main]\\\") log.Println(\\\"日志\\\") log.Panicln(\\\"panic日志\\\") }\"]},\"1341\":{\"h\":\"Flag\",\"t\":[\"方法\",\"func (l *Logger) Flags() int //访问 func (l *Logger) SetFlags(flag int) //设置\",\"常量\",\"const ( Ldate = 1 << iota // 日期 Ltime // 时间 Lmicroseconds // 微秒 Llongfile // 完成文件名称 Lshortfile // 短文件名称 LUTC // 时区 Lmsgprefix // 前缀 LstdFlags = Ldate | Ltime // 初始值 )\",\"例子\",\"func main() { log.SetFlags(log.Lshortfile | log.Lmicroseconds | log.Lmsgprefix | log.Ldate | log.Ltime) log.Println(\\\"日志\\\") log.Panicln(\\\"panic日志\\\") }\",\"当然也可以使用log.SetOutput(w io.Writer)来设置日志的输出路径，也可以通过New方法创建自己的实例。\",\"func New(out io.Writer, prefix string, flag int) *Logger\",\"总而言之，标准库的log包提供的功能并不够完善，我们通常会使用更加完善的第三方日志包，例如zap等等。\"]},\"1342\":{\"h\":\"math\",\"t\":[\"math是Go中的基本数学操作库，也是必须要熟练掌握和使用的库。\"]},\"1343\":{\"h\":\"整数常量\",\"t\":[\"const ( intSize = 32 << (^uint(0) >> 63) // 32 or 64 MaxInt = 1<<(intSize-1) - 1 MinInt = -1 << (intSize - 1) MaxInt8 = 1<<7 - 1 MinInt8 = -1 << 7 MaxInt16 = 1<<15 - 1 MinInt16 = -1 << 15 MaxInt32 = 1<<31 - 1 MinInt32 = -1 << 31 MaxInt64 = 1<<63 - 1 MinInt64 = -1 << 63 MaxUint = 1<<intSize - 1 MaxUint8 = 1<<8 - 1 MaxUint16 = 1<<16 - 1 MaxUint32 = 1<<32 - 1 MaxUint64 = 1<<64 - 1 )\"]},\"1344\":{\"h\":\"浮点常量\",\"t\":[\"const ( MaxFloat32 = 0x1p127 * (1 + (1 - 0x1p-23)) // 3.40282346638528859811704183484516925440e+38 SmallestNonzeroFloat32 = 0x1p-126 * 0x1p-23 // 1.401298464324817070923729583289916131280e-45 MaxFloat64 = 0x1p1023 * (1 + (1 - 0x1p-52)) // 1.79769313486231570814527423731704356798070e+308 SmallestNonzeroFloat64 = 0x1p-1022 * 0x1p-52 // 4.9406564584124654417656879286822137236505980e-324 )\"]},\"1345\":{\"h\":\"数学常量\",\"t\":[\"const ( E = 2.71828182845904523536028747135266249775724709369995957496696763 // https://oeis.org/A001113 Pi = 3.14159265358979323846264338327950288419716939937510582097494459 // https://oeis.org/A000796 Phi = 1.61803398874989484820458683436563811772030917980576286213544862 // https://oeis.org/A001622 Sqrt2 = 1.41421356237309504880168872420969807856967187537694807317667974 // https://oeis.org/A002193 SqrtE = 1.64872127070012814684865078781416357165377610071014801157507931 // https://oeis.org/A019774 SqrtPi = 1.77245385090551602729816748334114518279754945612238712821380779 // https://oeis.org/A002161 SqrtPhi = 1.27201964951406896425242246173749149171560804184009624861664038 // https://oeis.org/A139339 Ln2 = 0.693147180559945309417232121458176568075500134360255254120680009 // https://oeis.org/A002162 Log2E = 1 / Ln2 Ln10 = 2.30258509299404568401799145468436420760110148862877297603332790 // https://oeis.org/A002392 Log10E = 1 / Ln10 )\"]},\"1346\":{\"h\":\"最大值\",\"t\":[\"func TestMax(t *testing.T) { fmt.Println(math.Max(1.0, 2.0)) }\",\"=== RUN TestMax 2 --- PASS: TestMax (0.00s) PASS\"]},\"1347\":{\"h\":\"最小值\",\"t\":[\"func TestMin(t *testing.T) { fmt.Println(math.Min(1.0, 2.0)) }\",\"=== RUN TestMin 1 --- PASS: TestMin (0.00s) PASS\"]},\"1348\":{\"h\":\"绝对值\",\"t\":[\"func TestAbs(t *testing.T) { fmt.Println(math.Abs(-1)) }\",\"=== RUN TestAbs 1 --- PASS: TestAbs (0.00s) PASS\"]},\"1349\":{\"h\":\"余数\",\"t\":[\"func TestMod(t *testing.T) { fmt.Println(math.Mod(1, 10)) fmt.Println(math.Mod(12, 10)) }\",\"=== RUN TestMod 1 2 --- PASS: TestMod (0.00s) PASS\"]},\"1350\":{\"h\":\"Nan检测\",\"t\":[\"func TestName(t *testing.T) { fmt.Println(math.IsNaN(math.NaN())) }\",\"=== RUN TestFloor 2 --- PASS: TestFloor (0.00s) PASS\"]},\"1351\":{\"h\":\"Inf检测\",\"t\":[\"func TestInf(t *testing.T) { fmt.Println(math.IsInf(1.0, 1)) fmt.Println(math.IsInf(math.Inf(-1), -1)) }\",\"=== RUN TestInf false true --- PASS: TestInf (0.00s) PASS\"]},\"1352\":{\"h\":\"取整\",\"t\":[\"func TestTrunc(t *testing.T) { fmt.Println(math.Trunc(1.26)) fmt.Println(math.Trunc(2.3333)) }\",\"=== RUN TestTrunc 1 2 --- PASS: TestTrunc (0.00s) PASS\"]},\"1353\":{\"h\":\"向下取整\",\"t\":[\"func TestFloor(t *testing.T) { fmt.Println(math.Floor(2.5)) }\",\"=== RUN TestFloor 2 --- PASS: TestFloor (0.00s) PASS\"]},\"1354\":{\"h\":\"向上取整\",\"t\":[\"func TestCeil(t *testing.T) { fmt.Println(math.Ceil(2.5)) }\",\"=== RUN TestCeil 3 --- PASS: TestCeil (0.00s) PASS\"]},\"1355\":{\"h\":\"四舍五入\",\"t\":[\"func TestRound(t *testing.T) { fmt.Println(math.Round(1.2389)) fmt.Println(math.Round(-5.2389)) }\",\"=== RUN TestRound 1 -5 --- PASS: TestRound (0.00s) PASS\"]},\"1356\":{\"h\":\"求对数\",\"t\":[\"func TestLog(t *testing.T) { fmt.Println(math.Log(100) / math.Log(10)) fmt.Println(math.Log(1) / math.Log(2)) }\",\"=== RUN TestLog 2 0 --- PASS: TestLog (0.00s) PASS\"]},\"1357\":{\"h\":\"E的指数\",\"t\":[\"func TestEx(t *testing.T) { fmt.Println(math.Exp(2)) }\",\"=== RUN TestEx 7.38905609893065 --- PASS: TestEx (0.00s) PASS\"]},\"1358\":{\"h\":\"幂\",\"t\":[\"func TestPow(t *testing.T) { fmt.Println(math.Pow(2, 3)) fmt.Println(math.Pow(3, 3)) }\",\"=== RUN TestPow 8 27 --- PASS: TestPow (0.00s) PASS\"]},\"1359\":{\"h\":\"平方根\",\"t\":[\"func TestSqrt(t *testing.T) { fmt.Println(math.Sqrt(4)) }\",\"=== RUN TestSqrt 2 --- PASS: TestSqrt (0.00s) PASS\"]},\"1360\":{\"h\":\"立方根\",\"t\":[\"func TestCube(t *testing.T) { fmt.Println(math.Cbrt(8)) fmt.Println(math.Cbrt(27)) }\",\"=== RUN TestCube 2 3 --- PASS: TestCube (0.00s) PASS\"]},\"1361\":{\"h\":\"开N方\",\"t\":[\"func TestN(t *testing.T) { fmt.Println(math.Round(math.Pow(8, 1.0/3))) fmt.Println(math.Round(math.Pow(100, 1.0/2))) }\",\"=== RUN TestN 2 10 --- PASS: TestN (0.00s) PASS\"]},\"1362\":{\"h\":\"Sin\",\"t\":[\"func TestSin(t *testing.T) { fmt.Println(math.Sin(0)) fmt.Println(math.Sin(20)) }\",\"=== RUN TestSin 0 0.9129452507276277 --- PASS: TestSin (0.00s) PASS\"]},\"1363\":{\"h\":\"Cos\",\"t\":[\"func TestCos(t *testing.T) { fmt.Println(math.Cos(0)) fmt.Println(math.Cos(20)) }\",\"=== RUN TestCos 1 0.40808206181339196 --- PASS: TestCos (0.00s) PASS\"]},\"1364\":{\"h\":\"Tan\",\"t\":[\"func TestTan(t *testing.T) { fmt.Println(math.Tan(0)) fmt.Println(math.Tan(20)) }\",\"=== RUN TestTan 0 2.2371609442247427 --- PASS: TestTan (0.00s) PASS\",\"提示\",\"math包下远不止以上函数，不过已经足够满足日常使用，如需深究，可以自行阅读源码。\"]},\"1365\":{\"h\":\"net\",\"t\":[\"Go语言的net标准库是一个非常强大的库，它提供了处理网络通信、IP地址、DNS解析、TCP/UDP协议、HTTP协议等常见任务的功能。由于Go语言本身的并发特性，得益于此，Go在处理网络IO的时候非常的简洁高效。\"]},\"1366\":{\"h\":\"地址解析\",\"t\":[\"Go提供了四个函数来解析网络地址，下面逐一讲解。\"]},\"1367\":{\"h\":\"MAC地址\",\"t\":[\"签名\",\"func ParseMAC(s string) (hw HardwareAddr, err error)\",\"示例\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { hw, err := net.ParseMAC(\\\"00:1A:2B:3C:4D:5E\\\") if err != nil { panic(err) } fmt.Println(hw) }\"]},\"1368\":{\"h\":\"CIDR\",\"t\":[\"签名\",\"func ParseCIDR(s string) (IP, *IPNet, error)\",\"示例\",\"package main import ( \\\"fmt\\\" \\\"log\\\" \\\"net\\\" ) func main() { ipv4Addr, ipv4Net, err := net.ParseCIDR(\\\"192.0.2.1/24\\\") if err != nil { log.Fatal(err) } fmt.Println(ipv4Addr) fmt.Println(ipv4Net) }\"]},\"1369\":{\"h\":\"IP地址\",\"t\":[\"IP地址支持解析ipv4，ipv6，函数签名如下\",\"func ResolveIPAddr(network, address string) (*IPAddr, error)\",\"使用示例如下\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { ipv4Addr, err := net.ResolveIPAddr(\\\"ip4\\\", \\\"192.168.2.1\\\") if err != nil { panic(err) } fmt.Println(ipv4Addr) ipv6Addr, err := net.ResolveIPAddr(\\\"ip6\\\", \\\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\\\") if err != nil { panic(err) } fmt.Println(ipv6Addr) }\"]},\"1370\":{\"h\":\"TCP地址\",\"t\":[\"TCP地址支持tcp4，tcp6，签名如下\",\"func ResolveTCPAddr(network, address string) (*TCPAddr, error)\",\"使用示例如下\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { tcp4Addr, err := net.ResolveTCPAddr(\\\"tcp4\\\", \\\"0.0.0.0:2020\\\") if err != nil { panic(err) } fmt.Println(tcp4Addr) tcp6Addr, err := net.ResolveTCPAddr(\\\"tcp6\\\", \\\"[::1]:8080\\\") if err != nil { panic(err) } fmt.Println(tcp6Addr) }\"]},\"1371\":{\"h\":\"UDP地址\",\"t\":[\"UDP地址支持udp4，udp6，签名如下\",\"func ResolveUDPAddr(network, address string) (*UDPAddr, error)\",\"使用示例如下\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { udp4Addr, err := net.ResolveUDPAddr(\\\"udp4\\\", \\\"0.0.0.0:2020\\\") if err != nil { panic(err) } fmt.Println(udp4Addr) udp6Addr, err := net.ResolveUDPAddr(\\\"udp6\\\", \\\"[::1]:8080\\\") if err != nil { panic(err) } fmt.Println(udp6Addr) }\"]},\"1372\":{\"h\":\"Unix地址\",\"t\":[\"Unix地址支持unix，unixgram，unixpacket，签名如下\",\"func ResolveUnixAddr(network, address string) (*UnixAddr, error)\",\"使用示例如下\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { unixAddr, err := net.ResolveUnixAddr(\\\"unix\\\", \\\"/tmp/mysocket\\\") if err != nil { panic(err) } fmt.Println(unixAddr) }\"]},\"1373\":{\"h\":\"DNS\",\"t\":[\"Go还提供了很多函数用于DNS查询，下面一个例子是解析域名的IP地址\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { addrs, err := net.LookupHost(\\\"github.com\\\") if err != nil { panic(err) } fmt.Println(addrs) }\",\"查询记录值\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { mxs, err := net.LookupMX(\\\"github.com\\\") if err != nil { panic(err) } fmt.Println(mxs) }\"]},\"1374\":{\"h\":\"网络编程\",\"t\":[\"tcp编程的逻辑十分简单，对于客户端而言就是\",\"建立连接\",\"发送数据或读取数据\",\"退出\",\"对于服务端而言就是\",\"监听地址\",\"获取连接\",\"新建一个协程去处理该连接\",\"下面是一个简单的例子，客户端代码\",\"package main import ( \\\"net\\\" ) func main() { // 建立连接 conn, err := net.Dial(\\\"tcp\\\", \\\"0.0.0.0:1234\\\") if err != nil { panic(err) } defer conn.Close() // 发送数据 for i := range 10 { _, err := conn.Write([]byte{'a' + byte(i)}) if err != nil { panic(err) } } }\",\"服务端代码\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" \\\"io\\\" \\\"net\\\" \\\"sync\\\" ) func main() { // 监听地址 listener, err := net.Listen(\\\"tcp\\\", \\\"0.0.0.0:1234\\\") if err != nil { panic(err) } defer listener.Close() var wg sync.WaitGroup for { // 阻塞等待下一个连接建立 conn, err := listener.Accept() if err != nil { panic(err) } // 开启一个新的协程去异步处理该连接 wg.Add(1) go func() { defer wg.Done() buf := make([]byte, 4096) for { // 从连接中读取数据 n, err := conn.Read(buf) if errors.Is(err, io.EOF) { break } else if err != nil { panic(err) } data := string(buf[:n]) fmt.Println(data) } }() } wg.Wait() }\",\"客户端发送数据，服务端接收数据，这个例子非常的简单，服务端建立新连接时，只需开启一个新的协程就可以去处理，不需要阻塞，UDP大体上的写法也都是类似的。\"]},\"1375\":{\"h\":\"sort\",\"t\":[\"提示\",\"如果你是1.21版本以上的开发者，我建议使用slices标准库来进行排序，它支持泛型，API设计更加合理。\",\"在go中的sort包下提供了官方实现的排序方法，大部分可以直接开箱即用。倘若想要对结构体进行排序的话必须实现sort.Interface下的三个方法Len()swap()Less()。由于官方已经帮我们实现了Float64SliceStringSliceIntSlice三个类型，所以这三个类型可以不用我们自己实现直接使用即可。\",\"type Interface interface { // 长度方法 Len() int // 比较方法 Less(i, j int) bool // 交换方法 Swap(i, j int) }\"]},\"1376\":{\"h\":\"整型排序\",\"t\":[\"func main() { ints := []int{1, 2, 3, 111, 5, 99, 23, 5, 66} sort.Ints(ints) }\"]},\"1377\":{\"h\":\"浮点排序\",\"t\":[\"func main() { floats := []float64{1.0, 2.5, 3.8, 1.11, 5.5, 99.99999, 23.9999, 5.66, 66} sort.Float64s(floats) fmt.Println(floats) }\"]},\"1378\":{\"h\":\"字符串排序\",\"t\":[\"func main() { strings := []string{\\\"helloworld\\\", \\\"aaa\\\", \\\"bbb\\\", \\\"ccc\\\"} sort.Strings(strings) }\"]},\"1379\":{\"h\":\"逆向排序\",\"t\":[\"需要先进行sort.Reverse包装再进行排序\",\"func main() { floats := []float64{1.0, 2.5, 3.8, 1.11, 5.5, 99.99999, 23.9999, 5.66, 66} sort.Sort(sort.Reverse(sort.Float64Slice(floats))) fmt.Println(floats) }\"]},\"1380\":{\"h\":\"自定义排序\",\"t\":[\"如果想要自定义结构体排序的话，就必须实现三个方法。\",\"type Person struct { UserId string Username string Age int Address string } type PersonSlice []Person //返回切片的长度 func (p PersonSlice) Len() int { return len(p) } //比较方法 func (p PersonSlice) Less(i, j int) bool { return p[i].Age < p[j].Age } //交换方法 func (p PersonSlice) Swap(i, j int) { p[i], p[j] = p[j], p[i] }\",\"由于是根据年龄比较的，所有结果是根据年龄的大小来排序。\",\"func main() { persons := []Person{{ UserId: \\\"1\\\", Username: \\\"wyh\\\", Age: 18, Address: \\\"us\\\", }, { UserId: \\\"2\\\", Username: \\\"jack\\\", Age: 17, Address: \\\"ch\\\", }, { UserId: \\\"3\\\", Username: \\\"mike\\\", Age: 15, Address: \\\"india\\\", }} sort.Sort(PersonSlice(persons)) fmt.Println(persons) }\"]},\"1381\":{\"h\":\"是否有序\",\"t\":[\"判断一个切片是否有序，其内部并不会进行排序操作，而是通过循环调用Less()来判断\",\"func main() { persons := []Person{{ UserId: \\\"1\\\", Username: \\\"wyh\\\", Age: 18, Address: \\\"us\\\", }, { UserId: \\\"2\\\", Username: \\\"jack\\\", Age: 17, Address: \\\"ch\\\", }, { UserId: \\\"3\\\", Username: \\\"mike\\\", Age: 15, Address: \\\"india\\\", }} sort.Sort(PersonSlice(persons)) println(sort.IsSorted(PersonSlice(persons))) }\"]},\"1382\":{\"h\":\"strconv\",\"t\":[\"官方文档：strconv package - strconv - Go Packages\",\"包 strconv 实现与基本数据类型的字符串表示形式之间的转换\"]},\"1383\":{\"h\":\"导入\",\"t\":[\"import ( \\\"strconv\\\" )\",\"下面将会以例子的形式演示如何使用。\"]},\"1384\":{\"h\":\"字符串转整型\",\"t\":[\"func Atoi(s string) (int, error)\",\"s - 要转换的字符串\",\"func TestAoti(t *testing.T) { ints, err := strconv.Atoi(\\\"456789\\\") fmt.Println(ints, err) }\",\"=== RUN TestAoti 456789 <nil> --- PASS: TestAoti (0.00s) PASS\"]},\"1385\":{\"h\":\"整型转字符串\",\"t\":[\"func Itoa(i int) string\",\"i - 要转换的整型数字\",\"func TestIota(t *testing.T) { str := strconv.Itoa(114) fmt.Println(str) }\",\"=== RUN TestIota 114 --- PASS: TestIota (0.00s) PASS\"]},\"1386\":{\"h\":\"字符串转布尔值\",\"t\":[\"func ParseBool(str string) (bool, error)\",\"s - 要转换的字符串\",\"够转换的字符串如下\",\"\\\"1\\\", \\\"t\\\", \\\"T\\\", \\\"true\\\", \\\"TRUE\\\", \\\"True\\\" // true \\\"0\\\", \\\"f\\\", \\\"F\\\", \\\"false\\\", \\\"FALSE\\\", \\\"False\\\" // false\",\"func TestAtob(t *testing.T) { parseBool, err := strconv.ParseBool(\\\"1\\\") fmt.Println(parseBool, err) b, err := strconv.ParseBool(\\\"true\\\") fmt.Println(b, err) b2, err := strconv.ParseBool(\\\"FALSE\\\") fmt.Println(b2, err) }\",\"=== RUN TestAotb true <nil> true <nil> false <nil> --- PASS: TestAotb (0.00s) PASS\"]},\"1387\":{\"h\":\"布尔值转字符串\",\"t\":[\"func FormatBool(b bool) string\",\"b - 布尔值\",\"func TestBota(t *testing.T) { fmt.Println(strconv.FormatBool(true)) fmt.Println(strconv.FormatBool(false)) }\",\"=== RUN TestBota true false --- PASS: TestBota (0.00s) PASS\"]},\"1388\":{\"h\":\"转换成Go字符串\",\"t\":[\"两者都会将字符串转换为带引号的Go字符串，区别在于后者会将非ASCII字符转通过\\\\u转义。\",\"func TestQuote(t *testing.T) { fmt.Println(strconv.Quote(\\\"hello 世界\\\")) fmt.Println(strconv.QuoteToASCII(\\\"hello 世界\\\")) }\",\"=== RUN TestQuote \\\"hello 世界\\\" \\\"hello \\\\u4e16\\\\u754c\\\" --- PASS: TestQuote (0.00s) PASS\"]},\"1389\":{\"h\":\"字符串转浮点数\",\"t\":[\"func ParseFloat(s string, bitSize int) (float64, error)\",\"s - 要转换的字符串\",\"bitSize - 位数\",\"func TestParseFloat(t *testing.T) { float, err := strconv.ParseFloat(\\\"1.145114\\\", 64) fmt.Println(float, err) float, err = strconv.ParseFloat(\\\"2.3333333333333333333\\\", 64) fmt.Println(float, err) }\",\"=== RUN TestFloat 1.145114 <nil> 2.3333333333333335 <nil> --- PASS: TestFloat (0.00s) PASS\"]},\"1390\":{\"h\":\"浮点数转字符串\",\"t\":[\"字符串在转换浮点数时，官方给出了几种格式方法，以便输出不同的样式。\",\"// 'b' (-ddddp±ddd, 二进制指数), // 'e' (-d.dddde±dd, 小写e十进制指数), // 'E' (-d.ddddE±dd, 大写E的十进制指数), // 'f' (-ddd.dddd, 没有指数), // 没有特殊需求一般都用这个 // 'g' (对于大指数采用'e'的格式， 小指数采用'f'的格式), // 'G' (对于大指数采用'e'的格式， 小指数采用'f'的格式)， // 'x' (-0xd.ddddp±ddd, 十六进制分数和二进制指数), // 'X' (-0Xd.ddddP±ddd, 十六进制分数和二进制指数).\",\"转换函数\",\"func FormatFloat(f float64, fmt byte, prec, bitSize int) string\",\"f - 指要转换的浮点数\",\"fmt - 指的是格式化类型\",\"prec - 指的是精度，除了g/G的情况是表示最大有效位数，其他情况都表示的是保留小数到后几位，\",\"bitzise - 指的是位数\",\"当然一般情况都是使用f直接转换小数的格式最多。\",\"func TestFormatFloat(t *testing.T) { f := 1315643.14159261234567891011 fmt.Println(strconv.FormatFloat(f, 'f', 6, 64)) fmt.Println(strconv.FormatFloat(f, 'b', 6, 64)) fmt.Println(strconv.FormatFloat(f, 'e', 6, 64)) fmt.Println(strconv.FormatFloat(f, 'x', 6, 64)) fmt.Println(strconv.FormatFloat(f, 'g', 6, 64)) fmt.Println(strconv.FormatFloat(1.111, 'g', 6, 64)) }\",\"=== RUN TestFormatFloat 1315643.141593 5650644266346967p-32 1.315643e+06 0x1.4133b2p+20 1.31564e+06 1.111 --- PASS: TestFormatFloat (0.00s) PASS\"]},\"1391\":{\"h\":\"字符串转复数\",\"t\":[\"func ParseComplex(s string, bitSize int) (complex128, error)\",\"s - 要转换的字符串\",\"bitSize - 位数\",\"func TestParseComplex(t *testing.T) { fmt.Println(strconv.ParseComplex(\\\"1+2i\\\", 128)) fmt.Println(strconv.ParseComplex(\\\"1+2j\\\", 128)) }\",\"=== RUN TestParseComplex (1+2i) <nil> (0+0i) strconv.ParseComplex: parsing \\\"1+2j\\\": invalid syntax --- PASS: TestParseComplex (0.00s) PASS\"]},\"1392\":{\"h\":\"复数转字符串\",\"t\":[\"func FormatComplex(c complex128, fmt byte, prec, bitSize int) string\",\"c- 复数\",\"fmt - 格式化类型，参考浮点数格式化类型\",\"prec - 参考浮点数精度\",\"bitsize - 位数\",\"func TestFormatComplex(t *testing.T) { fmt.Println(strconv.FormatComplex(complex(1.1, 12), 'f', 2, 128)) fmt.Println(strconv.FormatComplex(complex(5.6, 2.8), 'b', 2, 128)) fmt.Println(strconv.FormatComplex(complex(18.88999, 89.7), 'g', 2, 128)) }\",\"=== RUN TestFormatComplex (1.10+12.00i) (6305039478318694p-50+6305039478318694p-51i) (19+90i) --- PASS: TestFormatComplex (0.00s) PASS\"]},\"1393\":{\"h\":\"字符串追加数据\",\"t\":[\"在其他语言比如java中\\\"1\\\"+1的结果是\\\"11\\\"，java会自动完成类型转换，而在Go语言中这样的操作是不被允许的，因为两者的数据类型不同。所以需要用到strconv下的Append函数 ，具体的参数与上面对于的数据转换函数一致。\",\"func TestAppend(t *testing.T) { bytes := []byte(\\\"这里有一些数据:\\\") bytes = strconv.AppendInt(bytes, 10, 10) bytes = strconv.AppendFloat(bytes, 1.2222, 'f', 2, 64) bytes = strconv.AppendBool(bytes, false) fmt.Println(string(bytes)) }\",\"=== RUN TestAppend 这里有一些数据:101.22false --- PASS: TestAppend (0.00s) PASS\"]},\"1394\":{\"h\":\"strings\",\"t\":[\"包 strings实现了简单的函数来操作UTF-8编码的字符串，简单来说就是操作字符串的工具包。\",\"官方文档：strings package - strings - Go Packages\",\"提示\",\"Go天然支持UTF8字符，所有的字符串操作都是建立在UTF8的基础之上。\"]},\"1395\":{\"h\":\"导入\",\"t\":[\"import ( \\\"strings\\\" )\",\"下面将以示例的形式讲解常用的函数。\"]},\"1396\":{\"h\":\"复制字符串\",\"t\":[\"func Clone(s string) string\",\"将会分配一个新的内存给复制的副本，如果传入一个空字符串，则不会分配内存且返回空字符串。\",\"func TestClone(t *testing.T) { ori := \\\"hello 世界\\\" copys := strings.Clone(ori) fmt.Println(ori, copys) fmt.Println(&ori, &copys) }\",\"=== RUN TestClone hello 世界 hello 世界 0xc00005e5d0 0xc00005e5e0 --- PASS: TestClone (0.00s) PASS\"]},\"1397\":{\"h\":\"比较字符串\",\"t\":[\"func Compare(a, b string) int\",\"将a与b按照字典顺序进行字符串比较，如果a>b，返回1，a<b返回-1，a=b返回0。\",\"func TestCompare(t *testing.T) { fmt.Println(strings.Compare(\\\"abc\\\", \\\"abe\\\")) fmt.Println(strings.Compare(\\\"abcd\\\", \\\"abe\\\")) fmt.Println(strings.Compare(\\\"abijk\\\", \\\"abe\\\")) fmt.Println(strings.Compare(\\\"abe\\\", \\\"abe\\\")) }\",\"=== RUN TestCompare -1 -1 1 0 --- PASS: TestCompare (0.00s) PASS\"]},\"1398\":{\"h\":\"包含字符串\",\"t\":[\"func Contains(s, substr string) bool\",\"判断一个字符串s是不是包含一个子串substr\",\"func TestContains(t *testing.T) { fmt.Println(strings.Contains(\\\"abcdefg\\\", \\\"a\\\")) fmt.Println(strings.Contains(\\\"abcdefg\\\", \\\"abc\\\")) fmt.Println(strings.Contains(\\\"abcdefg\\\", \\\"ba\\\")) }\",\"=== RUN TestContains true true false --- PASS: TestContains (0.00s) PASS\",\"func ContainsAny(s, chars string) bool\",\"判断字符串chars内任意字符的unicode码是否在字符串s内，翻译一下就是s是否包含chars内的任意字符串\",\"func TestContainsAny(t *testing.T) { fmt.Println(strings.ContainsAny(\\\"abcedfg\\\", \\\"bac\\\")) fmt.Println(strings.ContainsAny(\\\"abcedfg\\\", \\\"gfdecba\\\")) }\",\"=== RUN TestContainsAny true --- PASS: TestContainsAny (0.00s) PASS\",\"func ContainsRune(s string, r rune) bool\",\"判断字符串s内是否包含字符r\",\"func TestContainsRune(t *testing.T) { fmt.Println(strings.ContainsRune(\\\"abcedf\\\", 'a')) fmt.Println(strings.ContainsRune(\\\"abcedf\\\", 'b')) fmt.Println(strings.ContainsRune(\\\"你好世界\\\", '你')) }\",\"=== RUN TestContainsRune true true true --- PASS: TestContainsRune (0.00s) PASS\"]},\"1399\":{\"h\":\"子串出现次数\",\"t\":[\"func Count(s, substr string) int\",\"给出子串substr在字符串s内的出现次数\",\"func TestCount(t *testing.T) { fmt.Println(strings.Count(\\\"3.1415926\\\", \\\"1\\\")) fmt.Println(strings.Count(\\\"there is a girl\\\", \\\"e\\\")) fmt.Println(strings.Count(\\\"there is a girl\\\", \\\"\\\")) }\",\"=== RUN TestCount 2 2 16 --- PASS: TestCount (0.00s) PASS\"]},\"1400\":{\"h\":\"删除指定子串\",\"t\":[\"func Cut(s, sep string) (before, after string, found bool)\",\"删除在s内第一次出现的子串sep，并返回删除后的结果\",\"before - 被删除子串位置前面的字符串\",\"after - 被删除子串位置后面的字符串\",\"found - 是否找到子串\",\"func TestCut(t *testing.T) { show := func(s, sep string) { before, after, found := strings.Cut(s, sep) fmt.Printf(\\\"Cut(%q, %q) = %q, %q, %v\\\\n\\\", s, sep, before, after, found) } show(\\\"Hello world\\\", \\\" \\\") show(\\\"Hello world\\\", \\\"world\\\") show(\\\"Hello world\\\", \\\"Hello\\\") show(\\\"Hello world\\\", \\\"Hello world\\\") }\",\"=== RUN TestCut Cut(\\\"Hello world\\\", \\\" \\\") = \\\"Hello\\\", \\\"world\\\", true Cut(\\\"Hello world\\\", \\\"world\\\") = \\\"Hello \\\", \\\"\\\", true Cut(\\\"Hello world\\\", \\\"Hello\\\") = \\\"\\\", \\\" world\\\", true Cut(\\\"Hello world\\\", \\\"Hello world\\\") = \\\"\\\", \\\"\\\", true --- PASS: TestCut (0.00s) PASS\"]},\"1401\":{\"h\":\"忽略大小写相等\",\"t\":[\"func EqualFold(s, t string) bool\",\"返回字符串s和t在忽略大小写情况下是否相等\",\"func TestEqualFold(t *testing.T) { fmt.Println(strings.EqualFold(\\\"你好\\\", \\\"你好\\\")) fmt.Println(strings.EqualFold(\\\"Hello\\\", \\\"Hello\\\")) fmt.Println(strings.EqualFold(\\\"Hello\\\", \\\"hELLO\\\")) }\",\"=== RUN TestEqualFold true true true --- PASS: TestEqualFold (0.00s) PASS\"]},\"1402\":{\"h\":\"分割字符串\",\"t\":[\"func Fields(s string) []string\",\"func FieldsFunc(s string, f func(rune) bool) []string\",\"前者是根据空格来分割字符串，后者是函数f的返回值来决定是否分割字符串。\",\"func TestField(t *testing.T) { fmt.Printf(\\\"%q\\\\n\\\", strings.Fields(\\\" a b c d e f g \\\")) fmt.Printf(\\\"%q\\\\n\\\", strings.FieldsFunc(\\\"a,b,c,d,e,f,g\\\", func(r rune) bool { return r == ',' })) }\",\"=== RUN TestField [\\\"a\\\" \\\"b\\\" \\\"c\\\" \\\"d\\\" \\\"e\\\" \\\"f\\\" \\\"g\\\"] [\\\"a\\\" \\\"b\\\" \\\"c\\\" \\\"d\\\" \\\"e\\\" \\\"f\\\" \\\"g\\\"] --- PASS: TestField (0.00s) PASS\"]},\"1403\":{\"h\":\"寻找前后缀\",\"t\":[\"func HasPrefix(s, prefix string) bool\",\"func HasSuffix(s, suffix string) bool\",\"前者是寻找前缀，后者是寻找后缀，感兴趣可以去看看这里的源码实现，比较巧妙。\",\"func TestPreSuffix(t *testing.T) { str := \\\"abbc cbba\\\" fmt.Println(strings.HasPrefix(str, \\\"abb\\\")) fmt.Println(strings.HasSuffix(str, \\\"bba\\\")) }\",\"=== RUN TestPreSuffix true true --- PASS: TestPreSuffix (0.00s) PASS\"]},\"1404\":{\"h\":\"子串的位置\",\"t\":[\"返回第一次出现的子串的下标\",\"func Index(s, substr string) int\",\"返回第一次出现的子串的下标\",\"func IndexAny(s, chars string) int\",\"返回第一次出现的子串的下标\",\"func IndexRune(s string, r rune) int\",\"示例\",\"func TestIndex(t *testing.T) { fmt.Println(strings.Index(\\\"abcdefg\\\", \\\"bc\\\")) fmt.Println(strings.IndexAny(\\\"abcdefg\\\", \\\"cb\\\")) fmt.Println(strings.IndexRune(\\\"abcdefg\\\", 'g')) }\",\"=== RUN TestIndex 1 1 6 --- PASS: TestIndex (0.00s) PASS\",\"返回最后一次出现的子串的下标\",\"func LastIndex(s, substr string) int\",\"返回最后一次出现的子串任意字符的下标\",\"func LastIndexAny(s, chars string) int\",\"示例\",\"func TestLastIndex(t *testing.T) { fmt.Println(strings.LastIndex(\\\"abcdefga\\\", \\\"a\\\")) fmt.Println(strings.LastIndexAny(\\\"abcdefghisa\\\", \\\"ba\\\")) }\"]},\"1405\":{\"h\":\"遍历替换字符串\",\"t\":[\"Map 返回字符串 s 的副本，并根据映射函数修改字符串 s 的所有字符。如果映射返回负值，则从字符串中删除该字符，不进行替换\",\"func Map(mapping func(rune) rune, s string) string\",\"示例\",\"func TestMap(t *testing.T) { fmt.Println(strings.Map(func(r rune) rune { return r - 32 }, \\\"abcdefghijk\\\")) fmt.Println(strings.Map(func(r rune) rune { return r + 32 }, \\\"ABCDEFGHIJK\\\")) fmt.Println(strings.Map(func(r rune) rune { if r < 'F' { return -1 } else { return r } }, \\\"ABCDEFGHIJK\\\")) }\",\"输出\",\"=== RUN TestMap ABCDEFGHIJK abcdefghijk FGHIJK --- PASS: TestMap (0.00s) PASS\"]},\"1406\":{\"h\":\"重复复制字符串\",\"t\":[\"根据给定的Count复制字符串，如果为负数会导致panic\",\"func Repeat(s string, count int) string\",\"示例\",\"func TestRepeat(t *testing.T) { fmt.Println(strings.Repeat(\\\"a\\\", 10)) fmt.Println(strings.Repeat(\\\"abc\\\", 10)) }\",\"输出\",\"=== RUN TestRepeat aaaaaaaaaa abcabcabcabcabcabcabcabcabcabc --- PASS: TestRepeat (0.00s) PASS\"]},\"1407\":{\"h\":\"替换字符串\",\"t\":[\"s为源字符串，old指要被替换的部分，new指old的替换部分，n指的是替换次数，n小于0时表示不限制替换次数。\",\"func Replace(s, old, new string, n int) string\",\"示例\",\"func TestReplace(t *testing.T) { fmt.Println(strings.Replace(\\\"Hello this is golang\\\", \\\"golang\\\", \\\"c++\\\", 1)) fmt.Println(strings.Replace(\\\"Hello this is golang\\\", \\\"o\\\", \\\"c\\\", -1)) fmt.Println(strings.Replace(\\\"Hello this is golang\\\", \\\"o\\\", \\\"c\\\", 1)) }\",\"输出\",\"=== RUN TestReplace Hello this is c++ Hellc this is gclang Hellc this is golang --- PASS: TestReplace (0.00s) PASS\",\"Replace的方便函数，等价于stings.Replace(s,old,new,-1)\",\"func ReplaceAll(s, old, new string) string\",\"示例\",\"func TestReplaceAll(t *testing.T) { fmt.Println(strings.ReplaceAll(\\\"Hello this is golang\\\", \\\"o\\\", \\\"c++\\\")) }\",\"输出\",\"=== RUN TestReplaceAll Hellc++ this is gc++lang --- PASS: TestReplaceAll (0.00s) PASS\"]},\"1408\":{\"h\":\"分隔字符串\",\"t\":[\"根据子串sep将字符串s分隔成一个字符串切片\",\"func Split(s, sep string) []string\",\"根据子串sep将字符串s分隔成一个字符串切片，其分隔次数由n决定\",\"func SplitN(s, sep string, n int) []string\",\"根据子串sep将字符串s分隔成包含sep的字符串元素组成的字符串切片\",\"func SplitAfter(s, sep string) []string\",\"根据子串sep将字符串s分隔成包含sep的字符串元素组成的字符串切片，其分隔次数由n决定\",\"func SplitAfterN(s, sep string, n int) []string\",\"示例\",\"func TestSplit(t *testing.T) { fmt.Printf(\\\"%q\\\\n\\\", strings.Split(\\\"this is go language\\\", \\\" \\\")) fmt.Printf(\\\"%q\\\\n\\\", strings.SplitN(\\\"this is go language\\\", \\\" \\\", 2)) fmt.Printf(\\\"%q\\\\n\\\", strings.SplitAfter(\\\"this is go language\\\", \\\" \\\")) fmt.Printf(\\\"%q\\\\n\\\", strings.SplitAfterN(\\\"this is go language\\\", \\\" \\\", 2)) }\",\"输出\",\"=== RUN TestSplit [\\\"this\\\" \\\"is\\\" \\\"go\\\" \\\"language\\\"] [\\\"this\\\" \\\"is go language\\\"] [\\\"this \\\" \\\"is \\\" \\\"go \\\" \\\"language\\\"] [\\\"this \\\" \\\"is go language\\\"] --- PASS: TestSplit (0.00s) PASS\"]},\"1409\":{\"h\":\"大小写转换\",\"t\":[\"将英文字符串英文小写字符串\",\"func ToLower(s string) string\",\"根据传入的对应语言的unicode.SpecialCase ，转换成对应语言的小写字符串\",\"func ToLowerSpecial(c unicode.SpecialCase, s string) string\",\"将英文字符串转换成大写字符串\",\"func ToUpper(s string) string\",\"根据传入对应语言的unicode.SpecialCase，转换成对应语言的大写字符串\",\"func ToUpperSpecial(c unicode.SpecialCase, s string) string\",\"示例\",\"func TestLowerAndUpper(t *testing.T) { fmt.Println(strings.ToLower(\\\"My name is jack,Nice to meet you!\\\")) fmt.Println(strings.ToLowerSpecial(unicode.TurkishCase, \\\"Önnek İş\\\")) fmt.Println(strings.ToUpper(\\\"My name is jack,Nice to meet you!\\\")) fmt.Println(strings.ToUpperSpecial(unicode.TurkishCase, \\\"örnek iş\\\")) }\",\"输出\",\"=== RUN TestLowerAndUpper my name is jack,nice to meet you! önnek iş MY NAME IS JACK,NICE TO MEET YOU! ÖRNEK İŞ --- PASS: TestLowerAndUpper (0.00s) PASS\"]},\"1410\":{\"h\":\"修剪字符串\",\"t\":[\"修剪字符串两端，将cutset任意匹配的子串删除\",\"func Trim(s, cutset string) string\",\"修剪字符串左端，将cutset任意匹配的子串删除\",\"func TrimLeft(s, cutset string) string\",\"修剪字符串左端前缀，将cutset匹配的子串删除，不匹配就会返回字符串s\",\"func TrimPrefix(s, suffix string) string\",\"修剪字符串右端，将cutset任意匹配的子串删除\",\"func TrimRight(s, cutset string) string\",\"修剪字符串右端后缀，将cutset匹配的子串删除，不匹配就会返回字符串s\",\"func TrimSuffix(s, suffix string) string\",\"示例\",\"func TestTrim(t *testing.T) { fmt.Println(strings.Trim(\\\"!!this is a test statement!!\\\", \\\"!!!\\\")) fmt.Println(strings.TrimLeft(\\\"!!this is a test statement!!\\\", \\\"!!!\\\")) fmt.Println(strings.TrimRight(\\\"!!this is a test statement!!\\\", \\\"!!!\\\")) fmt.Println(strings.TrimPrefix(\\\"!!this is a test statement!!\\\", \\\"!!!\\\")) fmt.Println(strings.TrimSuffix(\\\"!!this is a test statement!!\\\", \\\"!!!\\\")) }\",\"输出\",\"=== RUN TestTrim this is a test statement this is a test statement!! !!this is a test statement !!this is a test statement!! !!this is a test statement!! --- PASS: TestTrim (0.00s) PASS\"]},\"1411\":{\"h\":\"字符串Builder\",\"t\":[\"字符串Builder比起直接操作字符串更加节省内存。\",\"type Builder struct { // 内部字段不对外暴露 }\",\"示例\",\"func TestBuilder(t *testing.T) { builder := strings.Builder{} builder.WriteString(\\\"hello\\\") builder.WriteString(\\\" world\\\") fmt.Println(builder.Len()) fmt.Println(builder.String()) }\",\"输出\",\"=== RUN TestBuilder 11 hello world --- PASS: TestBuilder (0.00s) PASS\",\"提示\",\"不要试图将Builder作为值进行传递，例如将strings.Builder作为函数参数传递的时候，程序会panic\",\"strings: illegal use of non-zero Builder copied by value\",\"其内部有如下一段代码\",\"type Builder struct { addr *Builder //自身的地址 buf []byte } func (b *Builder) copyCheck() { if b.addr == nil { b.addr = (*Builder)(noescape(unsafe.Pointer(b))) } else if b.addr != b { panic(\\\"strings: illegal use of non-zero Builder copied by value\\\") } }\",\"当对Builder 进行值拷贝的同时，也拷贝了内部切片的指针，两个Builder在写入字符串的时候都是在对同一个切片进行操作，这也是为什么不允许被值拷贝的原因。\"]},\"1412\":{\"h\":\"字符串Replacer\",\"t\":[\"Replacer转用于替换字符串\",\"func NewReplacer(oldnew ...string) *Replacer\",\"示例\",\"func TestReplacer(t *testing.T) { r := strings.NewReplacer(\\\"<\\\", \\\"&lt;\\\", \\\">\\\", \\\"&gt;\\\") fmt.Println(r.Replace(\\\"This is <b>HTML</b>!\\\")) }\",\"输出\",\"This is &lt;b&gt;HTML&lt;/b&gt;!\"]},\"1413\":{\"h\":\"字符串Reader\",\"t\":[\"Reader实现了io.Reader, io.ReaderAt, io.ByteReader, io.ByteScanner, io.RuneReader, io.RuneScanner, io.Seeker, 和 io.WriterTo interfaces。\",\"func NewReader(s string) *Reader\",\"示例\",\"func TestReader(t *testing.T) { reader := strings.NewReader(\\\"abcdefghijk\\\") buffer := make([]byte, 20, 20) read, err := reader.Read(buffer) if err != nil { log.Panic(err) } fmt.Println(read) fmt.Println(string(buffer)) }\",\"输出\",\"=== RUN TestReader 11 abcdefghijk --- PASS: TestReader (0.00s) PASS\"]},\"1414\":{\"h\":\"template\",\"t\":[\"官方文档：template package - text/template - Go Packages\",\"在平时我们经常会使用fmt.Sprintf函数来进行字符串格式化，但它只适用于处理小字符串的情况，而且需要使用格式化动词来指定类型，无法做到参数命名，不支持复杂情况下的处理，而这就是模板引擎所需要解决的问题，比如在直接挂到后端的静态HTML页面就需要用到模板引擎。社区里面有很多优秀的第三方模板引擎库，比如pongo2 ,sprig，jet，不过本文要讲述的主角是go内置的模板引擎库text/template，在实际开发中一般用的是html/template，后者基于前者并做了很多关于HTML的安全处理，一般情况使用前者即可，若是涉及到HTML的模板处理建议使用后者会更安全。\"]},\"1415\":{\"h\":\"快速开始\",\"t\":[\"下面来看一个关于模板引擎的简单使用示例，如下所示\",\"package main import ( \\\"fmt\\\" \\\"os\\\" \\\"text/template\\\" ) func main() { tmpl := `This is the first template string, {{ .message }}` te, err := template.New(\\\"texTmpl\\\").Parse(tmpl) if err != nil { fmt.Println(err) return } data := map[string]any{ \\\"message\\\": \\\"hello world!\\\", } execErr := te.Execute(os.Stdout, data) if execErr != nil { fmt.Println(err) } }\",\"上述代码的输出为\",\"This is the first template string, hello world!\",\"在案例代码中，tmpl是一个模板字符串，字符串中的{{ .message }}是模板引擎的模板参数。首先通过*Template.Parse方法解析模板字符串，\",\"func (t *Template) Parse(text string) (*Template, error)\",\"解析成功后再通过*Template.Execute方法将data数据应用于模板中，最后输出到传入的Writer中也就是os.Stdout。\",\"func (t *Template) Execute(wr io.Writer, data any) error\",\"在以后模板引擎的使用中，基本上都是这三步：\",\"获取模板\",\"解析模板，\",\"将数据应用到模板中\",\"可见模板引擎的使用其实相当简单，稍微复杂一点的是模板引擎的模板语法，这才是本文主要讲解的内容。\"]},\"1416\":{\"h\":\"模板语法\"},\"1417\":{\"h\":\"参数\",\"t\":[\"go通过两对花括号{{ }}，来在模板中表示这是一个模板参数，通过.来表示根对象，根对象就是传入的data。就像是访问一个类型的成员变量一样，通过.符号衔接变量名就可以在模板中访问对应的值，例如\",\"{{ .data }}\",\"前提与之同名的成员变量存在，否则就会报错。对于传入的data，一般是结构体或者map，也可以是基本类型，比如数字字符串，这时.所代表的根对象就是其自身。在花括号内，不一定非得去访问根对象来获取值，也可以是基本类型的字面量，例如\",\"{{ 1 }} {{ 3.14 }} {{ \\\"jack\\\" }}\",\"不管什么类型，最终都会通过fmt.Sprintf(\\\"%s\\\", val)来获取其字符串表现形式，看下面的例子。\",\"func main() { out := os.Stdout tmpl := \\\"data-> {{ . }}\\\\n\\\" datas := []any{ \\\"hello world!\\\", 6379, 3.1415926, []any{1, \\\"2*2\\\", 3.6}, map[string]any{\\\"data\\\": \\\"hello world!\\\"}, struct { Data string }{Data: \\\"hello world!\\\"}, } for _, data := range datas { err := ExecTmpl(out, tmpl, data) if err != nil { panic(err) } } } func ExecTmpl(writer io.Writer, tmpl string, data any) error { parsedTmpl, err := template.New(\\\"template\\\").Parse(tmpl) if err != nil { return err } return parsedTmpl.Execute(writer, data) }\",\"输出如下\",\"data-> hello world! data-> 6379 data-> 3.1415926 data-> [1 2*2 3.6] data-> map[data:hello world!] data-> {hello world!}\",\"可以看到其输出形式跟直接使用fmt.Sprintf一致。对于结构体和map，可以通过字段名来访问其值，如下所示\",\"func main() { out := os.Stdout tmpl := \\\"data-> {{ .Data }}\\\\n\\\" datas := []any{ map[string]any{\\\"Data\\\": \\\"hello world!\\\"}, struct { Data string }{Data: \\\"hello world!\\\"}, } for _, data := range datas { err := ExecTmpl(out, tmpl, data) if err != nil { panic(err) } } }\",\"输出如下\",\"data-> hello world! data-> hello world!\",\"对于切片和map，虽然并没有提供特定语法来访问某一个索引的值，但可以通过函数调用的方式来实现，如下所示\",\"func main() { out := os.Stdout tmpl := \\\"data-> {{ index . 1}}\\\\n\\\" datas := []any{ []any{\\\"first\\\", \\\"second\\\"}, map[int]any{1: \\\"first\\\"}, } for _, data := range datas { err := ExecTmpl(out, tmpl, data) if err != nil { panic(err) } } }\",\"输出\",\"data-> second data-> first\",\"如果是多维切片，可以通过如下方式来访问对应下标的值，等同于s[i][j][k]\",\"{{ index . i j k }}\",\"对于嵌套的结构体或map，可以使用.k1.k2.k3这种方式访问，例如\",\"{{ .person.father.name }}\",\"在使用模板参数时，可以在参数前后加上-符号来消除参数前后的空白，看个例子\",\"func main() { out := os.Stdout tmpl := `{{ .x }} {{ - .op - }} {{ .y }}` datas := []any{ map[string]any{\\\"x\\\": \\\"10\\\", \\\"op\\\": \\\">\\\", \\\"y\\\": \\\"2\\\"}, } for _, data := range datas { err := ExecTmpl(out, tmpl, data) if err != nil { panic(err) } } }\",\"正常来说输出结果应该是10 > 2，但由于在op参数前后添加了-符号，所以它前后的空白符都会被消除，所以实际输出为\",\"10>2\",\"需要注意的是，在花括号中，-符号与参数必须相隔一个空格，也就说必须是{{- . -}}这种格式，在例子中之所以会在两边额外加个空格写成{{ - . - }}这种格式纯粹是个人觉得看的顺眼，实际上并没有这个语法限制。\"]},\"1418\":{\"h\":\"注释\",\"t\":[\"模板语法支持注释，注释并不会在最终的模板中生成，其语法如下\",\"{{/* this is a comment */}}\",\"注释符号/*和*/必须与花括号相邻，它们之间不能有其它字符，否则将无法正常解析。只有一种情况例外，那就是消除空白符的时候\",\"{{- /* this is a comment */ -}}\"]},\"1419\":{\"h\":\"变量\",\"t\":[\"在模板中也可以声明变量，通过$符号来表示这是一个变量，并通过:= 来进行赋值，就跟go代码一样，例子如下。\",\"{{ $name := .Name }} {{ $val := index . 1 }} {{ $val := index .dict key }} // 整型赋值 {{ $numer := 1 }} // 浮点数赋值 {{ $float := 1.234}} // 字符串赋值 {{ $name := \\\"jack\\\" }}\",\"在后续使用时，通过$衔接变量名来访问该变量的值，比如\",\"func main() { out := os.Stdout tmpl := `{{ $name := .name }} {{- $name }}` datas := []any{ map[string]any{\\\"name\\\": \\\"jack\\\"}, } for _, data := range datas { err := ExecTmpl(out, tmpl, data) if err != nil { panic(err) } } }\",\"输出\",\"jack\",\"变量必须先声明才能使用，否则将会提示undefined variable，并且也要在作用域内才能使用。\"]},\"1420\":{\"h\":\"函数\",\"t\":[\"模板自身的语法其实并不多，大多数功能都是通过函数来实现的，函数调用的格式为函数名后衔接参数列表，以空格为分隔符，如下所示\",\"{{ funcname arg1 arg2 arg3 ... }}\",\"例如之前用到的index函数\",\"{{ index .s 1 }}\",\"用于比较是否相等的函数eq函数\",\"{{ eq 1 2 }}\",\"每一个*Template都有一个FuncsMap，用于记录函数的映射\",\"type FuncMap map[string]any\",\"在创建模板时从text/template.builtins获取默认的函数映射表，下面是内置的所有函数\",\"函数名\",\"作用\",\"示例\",\"and\",\"与运算\",\"{{ and true false }}\",\"or\",\"或运算\",\"{{ or true false }}\",\"not\",\"取反运算\",\"{{ not true }}\",\"eq\",\"是否相等\",\"{{ eq 1 2 }}\",\"ne\",\"是否不相等\",\"{{ ne 1 2 }}\",\"lt\",\"小于\",\"{{ lt 1 2 }}\",\"le\",\"小于等于\",\"{{ le 1 2 }}\",\"gt\",\"大于\",\"{{ gt 1 2 }}\",\"ge\",\"大于等于\",\"{{ ge 1 2 }}\",\"len\",\"返回长度\",\"{{ len .slice }}\",\"index\",\"获取目标指定索引的元素\",\"{{ index . 0 }}\",\"slice\",\"切片，等价于s[1:2:3]\",\"{{ slice . 1 2 3 }}\",\"html\",\"HTML转义\",\"{{ html .name }}\",\"js\",\"js转义\",\"{{ js .name }}\",\"print\",\"fmt.Sprint\",\"{{ print . }}\",\"printf\",\"fmt.Sprintf\",\"{{ printf \\\"%s\\\" .}}\",\"println\",\"fmt.Sprintln\",\"{{ println . }}\",\"urlquery\",\"url query转义\",\"{{ urlquery .query }}\",\"除了这些之外，还有一个比较特殊的内置函数call，它是用于直接调用通过在Execute时期传入的data中的函数，例如下面的模板\",\"{{ call .string 1024 }}\",\"传入的数据如下\",\"map[string]any{ \\\"string\\\": func(val any) string { return fmt.Sprintf(\\\"%v: 2048\\\", val) }, }\",\"那么在模板中就会生成\",\"1024: 2048\",\"这是自定义函数的途径之一，不过通常建议使用*Template.Funcs方法来添加自定义函数，因为后者可以作用全局，不需要绑定到根对象中。\",\"func (t *Template) Funcs(funcMap FuncMap) *Template\",\"自定义函数的返回值一般有两个，第一个是需要用到的返回值，第二个是error。例如有如下自定义函数\",\"template.FuncMap{ \\\"add\\\": func(val any) (string, error) { return fmt.Sprintf(\\\"%v+1\\\", val), nil }, }\",\"然后在模板中直接使用\",\"{{ add 1024 }}\",\"其结果为\",\"1024 + 1\"]},\"1421\":{\"h\":\"管道\",\"t\":[\"这个管道与chan是两个东西，官方文档里面称其为pipeline，任何能够产生数据的操作都称其为pipeline。下面的模板操作都属于管道操作\",\"{{ 1 }} {{ eq 1 2 }} {{ $name }} {{ .name }}\",\"熟悉linux的应该都知道管道运算符|，模板中也支持这样的写法。管道操作在模板中经常出现，例如\",\"{{ $name := 1 }}{{ $name | print | printf \\\"%s+1=?\\\" }}\",\"其结果为\",\"1+1=?\",\"在后续的with，if，range中也会频繁用到。\"]},\"1422\":{\"h\":\"with\",\"t\":[\"通过with语句可以控制变量和根对象的作用域，格式如下\",\"{{ with pipeline }} text {{ end }}\",\"with会检查管道操作返回的值，如果值为空的话，中间的text模板就不会生成。如果想要处理空的情况，可以使用with else，格式如下\",\"{{ with pipeline }} text1 {{ else }} text2 {{ end }}\",\"如果管道操作返回的值为空，那么就会执行else这块的逻辑。在with语句中声明的变量，其作用域仅限于with语句内，看下面一个例子\",\"{{ $name := \\\"mike\\\" }} {{ with $name := \\\"jack\\\" }} {{- $name -}} {{ end }} {{- $name -}}\",\"它的输出如下，显然这是由于作用域不同，它们是两个不同的变量。\",\"jackmike\",\"通过with语句还可以在作用域内改写根对象，如下\",\"{{ with .name }} name: {{- .second }}-{{ .first -}} {{ end }} age: {{ .age }} address: {{ .address }}\",\"传入如下的数据\",\"map[string]any{ \\\"name\\\": map[string]any{ \\\"first\\\": \\\"jack\\\", \\\"second\\\": \\\"bob\\\", }, \\\"age\\\": 1, \\\"address\\\": \\\"usa\\\", }\",\"它的输出\",\"name:bob-jack age: 1 address: usa\",\"可以看到在with语句内部，根对象.已经变成了.name。\"]},\"1423\":{\"h\":\"条件\",\"t\":[\"条件语句的格式如下所示\",\"{{ if pipeline }} text1 {{ else if pipeline }} text2 {{ else }} text3 {{ end }}\",\"就跟写普通的代码一样，非常好理解。下面看几个简单的例子，\",\"{{ if eq .lang \\\"en\\\" }} {{- .content.en -}} {{ else if eq .lang \\\"zh\\\" }} {{- .content.zh -}} {{ else }} {{- .content.fallback -}} {{ end }}\",\"传入的数据\",\"map[string]any{ \\\"lang\\\": \\\"zh\\\", \\\"content\\\": map[string]any{ \\\"en\\\": \\\"hello, world!\\\", \\\"zh\\\": \\\"你好，世界！\\\", \\\"fallback\\\": \\\"hello, world!\\\", }, }\",\"例子中的模板根据传入的语言lang来决定要以何种方式展示内容，输出结果\",\"你好，世界！\"]},\"1424\":{\"h\":\"迭代\",\"t\":[\"迭代语句的格式如下，range所支持的pipeline必须是数组，切片，map，以及channel。\",\"{{ range pipeline }} loop body {{ end }}\",\"结合else使用，当长度为0时，就会执行else块的内容。\",\"{{ range pipeline }} loop body {{ else }} fallback {{ end }}\",\"除此之外，还支持break，continue这类操作，比如\",\"{{ range pipeline }} {{ if pipeline }} {{ break }} {{ end }} {{ if pipeline }} {{ continue }} {{ end }} loop body {{ end }}\",\"下面看一个迭代的例子。\",\"{{ range $index, $val := . }} {{- if eq $index 0 }} {{- continue -}} {{ end -}} {{- $index}}: {{ $val }} {{ end }}\",\"传入数据\",\"[]any{1, \\\"2\\\", 3.14},\",\"输出\",\"1: 2 2: 3.14\",\"迭代map也是同理。\"]},\"1425\":{\"h\":\"嵌套\",\"t\":[\"一个模板中可以定义有多个模板，比如\",\"{{ define \\\"t1\\\" }} t1 {{ end }} {{ define \\\"t2\\\" }} t2 {{ end }}\",\"这些定义的模板在并不会生成在最终的模板中，除非在加载时指定了名称或者通过template语句手动指定。\",\"func (t *Template) ExecuteTemplate(wr io.Writer, name string, data any) error\",\"比如下面的例子\",\"{{ define \\\"t1\\\" }} {{- with .t1 }} {{- .data -}} {{ end -}} {{ end }} {{ define \\\"t2\\\" }} {{- with .t2 }} {{- .data -}} {{ end}} {{ end -}}\",\"传入如下数据\",\"map[string]any{ \\\"t1\\\": map[string]any{\\\"data\\\": \\\"template body 1\\\"}, \\\"t2\\\": map[string]any{\\\"data\\\": \\\"template body 2\\\"}, }\",\"代码\",\"func main() { out := os.Stdout tmpl := `{{ define \\\"t1\\\" }} {{- with .t1 }} {{- .data -}} {{ end -}} {{ end }} {{ define \\\"t2\\\" }} {{- with .t2 }} {{- .data -}} {{ end}} {{ end -}}` datas := []any{ map[string]any{ \\\"t1\\\": map[string]any{\\\"data\\\": \\\"template body 1\\\"}, \\\"t2\\\": map[string]any{\\\"data\\\": \\\"template body 2\\\"}, }, } name := \\\"t1\\\" for _, data := range datas { err := ExecTmpl(out, tmpl, name, data) if err != nil { panic(err) } } } func ExecTmpl(writer io.Writer, tmpl string, name string, data any) error { t := template.New(\\\"template\\\") parsedTmpl, err := t.Parse(tmpl) if err != nil { return err } return parsedTmpl.ExecuteTemplate(writer, name, data) }\",\"输出\",\"template body 1\",\"或者也可以手动指定模板\",\"{{ define \\\"t1\\\" }} {{- with .t1 }} {{- .data -}} {{ end -}} {{ end }} {{ define \\\"t2\\\" }} {{- with .t2 }} {{- .data -}} {{ end}} {{ end -}} {{ template \\\"t2\\\" .}}\",\"那么在解析时是否指定模板名称，t2都会加载。\"]},\"1426\":{\"h\":\"关联\",\"t\":[\"子模板只是在一个模板内部声明多个命名的模板，关联是将外部的多个命名的*Template关联起来。然后通过template语句来引用指定的模板。\",\"{{ tempalte \\\"templateName\\\" pipeline}}\",\"pipeline可以根据自己的需求来指定关联模板的根对象，或者也可以直接传入当前模板的根对象。看下面的一段代码例子\",\"func main() { tmpl1 := `name: {{ .name }}` tmpl2 := `age: {{ .age }}` tmpl3 := `Person Info {{template \\\"t1\\\" .}} {{template \\\"t2\\\" .}}` t1, err := template.New(\\\"t1\\\").Parse(tmpl1) if err != nil { panic(err) } t2, err := template.New(\\\"t2\\\").Parse(tmpl2) if err != nil { panic(err) } t3, err := template.New(\\\"t3\\\").Parse(tmpl3) if err != nil { panic(err) } if err := associate(t3, t1, t2); err != nil { panic(err) } err = t3.Execute(os.Stdout, map[string]any{ \\\"name\\\": \\\"jack\\\", \\\"age\\\": 18, }) if err != nil { panic(err) } } func associate(t *template.Template, ts ...*template.Template) error { for _, tt := range ts { _, err := t.AddParseTree(tt.Name(), tt.Tree) if err != nil { return err } } return nil }\",\"在上述的地面中，t3关联了t1，和t2，使用*Template.AddParseTree方法进行关联\",\"func (t *Template) AddParseTree(name string, tree *parse.Tree) (*Template, error)\",\"最终的模板生成结果为\",\"Person Info name: jack age: 18\"]},\"1427\":{\"h\":\"插槽\",\"t\":[\"通过block语句，可以实现类似vue插槽的效果，其目的是为了复用某一个模板而用的。看一个使用案例就知道怎么用了，在t1模板中定义插槽\",\"Basic Person Info name: {{ .name }} age: {{ .age }} address: {{ .address }} {{ block \\\"slot\\\" . }} default content body {{ end }}\",\"block语句可以插槽中的默认内容，在后续其它模板使用插槽时，会覆盖默认的内容。在t2模板中引用t1模板，并使用define定义嵌入的内容\",\"{{ template \\\"person.txt\\\" . }} {{ define \\\"slot\\\" }} school: {{ .school }} {{ end }}\",\"将两个模板关联以后，传入如下的数据\",\"map[string]any{ \\\"name\\\": \\\"jack\\\", \\\"age\\\": 18, \\\"address\\\": \\\"usa\\\", \\\"company\\\": \\\"google\\\", \\\"school\\\": \\\"mit\\\", }\",\"最终输出的结果为\",\"Basic Person Info name: jack age: 18 address: usa school: mit\"]},\"1428\":{\"h\":\"模板文件\",\"t\":[\"在模板语法的案例中，都是使用的字符串字面量来作为模板，在实际的使用情况中大多数都是将模板放在文件中。\",\"func ParseFS(fsys fs.FS, patterns ...string) (*Template, error)\",\"比如template.ParseFs就是从指定的文件系统中加载匹配pattern的模板。下面的例子以embed.FS作为文件系统，准备三个文件\",\"# person.txt Basic Person Info name: {{ .name }} age: {{ .age }} address: {{ .address }} {{ block \\\"slot\\\" . }} {{ end }} # student.txt {{ template \\\"person.txt\\\" . }} {{ define \\\"slot\\\" }} school: {{ .school }} {{ end }} # employee.txt {{ template \\\"person.txt\\\" . }} {{ define \\\"slot\\\" }} company: {{ .company }} {{ end }}\",\"代码如下\",\"import ( \\\"embed\\\" \\\"os\\\" \\\"text/template\\\" ) //go:embed *.txt var fs embed.FS func main() { data := map[string]any{ \\\"name\\\": \\\"jack\\\", \\\"age\\\": 18, \\\"address\\\": \\\"usa\\\", \\\"company\\\": \\\"google\\\", \\\"school\\\": \\\"mit\\\", } t1, err := template.ParseFS(fs, \\\"person.txt\\\", \\\"student.txt\\\") if err != nil { panic(err) } t1.Execute(os.Stdout, data) t2, err := template.ParseFS(fs, \\\"person.txt\\\", \\\"employee.txt\\\") if err != nil { panic(err) } t2.Execute(os.Stdout, data) }\",\"输出为\",\"Basic Person Info name: jack age: 18 address: usa school: mit Basic Person Info name: jack age: 18 address: usa company: google\",\"这是一个很简单的模板文件使用案例，person.txt作为插槽文件，其它两个复用其内容并嵌入自定义的新内容。也可以使用下面两个函数\",\"func ParseGlob(pattern string) (*Template, error) func ParseFiles(filenames ...string) (*Template, error)\",\"ParseGlob基于通配符匹配，ParseFiles基于文件名，它们都是使用的本地文件系统。如果是用于展示在前端的html文件，建议使用html/template包，它提供的API与text/template完全一致，但是针对html，css，js做了安全处理。\"]},\"1429\":{\"h\":\"time\",\"t\":[\"time包提供了时间和日历的相关的函数与方法。\",\"time.Now()函数可以获取当前时间\",\"func Now() Time\",\"now := time.Now() fmt.Println(now) //2022-11-17 10:00:18.6983438 +0800 CST m=+0.007095001\",\"其返回的数据类型是Time结构体，其含有非常多的时间操作的方法。\",\"func (t *Time) nsec() int32 //纳秒 func (t *Time) sec() int64 //秒 func (t *Time) unixSec() //返回 Unix时间格式的 秒 func (t *Time) addSec(d int64) //增加秒 func (t *Time) setLoc(loc *Location) //设置地区 func (t *Time) stripMono() //去掉时间的单调时钟读数 func (t Time) After(u Time) //判断一个时间是否在它之后 func (t Time) Before(u Time) bool //判断一个时间是否在它之前 func (t Time) Equal(u Time) bool //判断两个时间是否表示同一瞬间 func (t Time) Sub(u Time) Duration //求两个时间的差值 func (t Time) Add(d Duration) Time //增加一段时间间隔\"]},\"1430\":{\"h\":\"时间单位\",\"t\":[\"time包存放了基础的时间单位常量\",\"const ( minDuration Duration = -1 << 63 maxDuration Duration = 1<<63 - 1 ) const ( Nanosecond Duration = 1 Microsecond = 1000 * Nanosecond Millisecond = 1000 * Microsecond Second = 1000 * Millisecond Minute = 60 * Second Hour = 60 * Minute )\",\"它们的类型是time.Duration，最小的单位是纳秒，最大的是小时。\"]},\"1431\":{\"h\":\"格式化\",\"t\":[\"时间类型可以格式化输出，不过需要注意的是在Go中格式化模板不是常见的yyyy-mm-dd这类，而是以Go诞生时间为模板。Go的诞生的时间是 2006年1月2日下午15点04分。\",\"例子\",\"now := time.Now()\",\"24小时格式化输出\",\"fmt.Println(now.Format(\\\"2006-01-02 15:04:05 Monday Jan\\\")) //2022-11-17 10:44:48 Thursday Nov\",\"只输出日期\",\"fmt.Println(now.Format(\\\"2006-01-02\\\")) //2022-11-17\",\"只输入12小时制的时间\",\"fmt.Println(now.Format(\\\"15:04:05 PM\\\")) //10:48:47 AM\"]},\"1432\":{\"h\":\"解析时间\",\"t\":[\"通常我们会有一个需求就是，将一个字符串时间按照一定格式转换为Go中的时间结构体，接下来我们要做的就是这件事。\",\"func main() { location, err := time.LoadLocation(\\\"Asia/Shanghai\\\") if err != nil { fmt.Println(err) return } inLocation, err := time.ParseInLocation(\\\"2006/01/02\\\", \\\"2012/10/12\\\", location) if err != nil { fmt.Println(err) return } fmt.Println(inLocation.String()) }\",\"最终输出\",\"2012-10-12 00:00:00 +0800 CST\"]},\"1433\":{\"h\":\"Timer\",\"t\":[\"Timer是一个计时器，对外暴露一个channel，当指定时间到了以后，channel就会收到消息并关闭。\",\"func NewTimer(d Duration) *Timer\",\"通过time.NewTimer()可以创建一个新的计时器\",\"func main() { timer := time.NewTimer(time.Second) defer timer.Stop() select { case t := <-timer.C: fmt.Println(t) } }\",\"2023-09-25 21:25:03.5696803 +0800 CST m=+1.007908001\",\"在使用完timer以后，应及时的关闭。\"]},\"1434\":{\"h\":\"Ticker\",\"t\":[\"Ticker是一个定时器，与timer的区别在于，timer是一次性的，而Ticker是定时触发。\",\"func NewTicker(d Duration) *Ticker\",\"通过time.NewTicker()可以创建一个新的定时器\",\"func main() { ticker := time.NewTicker(time.Second) defer ticker.Stop() for i := 0; i < 3; i++ { select { case t := <-ticker.C: fmt.Println(t) } } }\",\"2023-09-25 21:29:20.4429256 +0800 CST m=+1.009508401 2023-09-25 21:29:21.4512075 +0800 CST m=+2.017790301 2023-09-25 21:29:22.4501592 +0800 CST m=+3.016742001\",\"同样的，在使用完ticker后，也要及时关闭。\"]},\"1435\":{\"h\":\"sleep\",\"t\":[\"time.Sleep()可以使用当前goroutine处于挂起状态一定的时间，在这期间goroutine将被阻塞，直到恢复运行状态。\",\"func Sleep(d Duration)\",\"func main() { start := time.Now() fmt.Println(start) time.Sleep(time.Second * 2) end := time.Now() fmt.Println(end) }\",\"2023-09-25 21:36:35.7229057 +0800 CST m=+0.001627901 2023-09-25 21:36:37.7347742 +0800 CST m=+2.013496401\",\"上面这段程序就会在输出完start后阻塞两秒，然后再输出end。\"]},\"1436\":{\"h\":\"unicode\"},\"1437\":{\"h\":\"unsafe\",\"t\":[\"官方文档地址：unsafe package - unsafe - Go Packages\",\"unsafe标准库是官方提供的一个可以进行低级编程的库，该包提供的操作可以直接跳过Go的类型系统从而读写内存。该包可能不具有移植性，且官方声称该包不受Go 1 兼容性准则的保护。即便如此，unsafe也还是被大量的项目使用，其中也包括官方提供的标准库。\",\"提示\",\"之所以不可移植的原因是一些操作的结果取决于操作系统实现，不同的系统可能会有不同的结果。\"]},\"1438\":{\"h\":\"ArbitraryType\",\"t\":[\"type ArbitraryType int\",\"Arbitrary可以翻译为任意的，在这里代表的是任意类型，且不等同于any，实际上该类型并不属于unsafe包，出现在这里仅仅只是为了文档目的。\"]},\"1439\":{\"h\":\"IntegerType\",\"t\":[\"type IntegerType int\",\"IntegerType代表的是任意整数类型，实际上该类型并不属于unsafe包，出现在这里仅仅只是为了文档目的。\",\"上面这两个类型不需要太在意，它们仅仅只是一个代表而已，在使用unsafe包函数时编辑器甚至会提示你类型不匹配，它们的实际类型就是你传入的具体类型。\"]},\"1440\":{\"h\":\"Sizeof\",\"t\":[\"func Sizeof(x ArbitraryType) uintptr\",\"以字节为单位返回变量x的大小，不包括其引用内容的大小，例如：\",\"func main() { var ints byte = 1 fmt.Println(unsafe.Sizeof(ints)) var floats float32 = 1.0 fmt.Println(unsafe.Sizeof(floats)) var complexs complex128 = 1 + 2i fmt.Println(unsafe.Sizeof(complexs)) var slice []int = make([]int, 100) fmt.Println(unsafe.Sizeof(slice)) var mp map[string]int = make(map[string]int, 0) fmt.Println(unsafe.Sizeof(mp)) type person struct { name string age int } fmt.Println(unsafe.Sizeof(person{})) type man struct { name string } fmt.Println(unsafe.Sizeof(man{})) }\",\"1 4 16 24 8 24 16\"]},\"1441\":{\"h\":\"Offsetof\",\"t\":[\"func Offsetof(x ArbitraryType) uintptr\",\"该函数用于表示结构体内字段偏移量，所以x必须是一个结构体字段，或者说返回值就是结构体地址起始处到字段地址起始处两者之间的字节数，例如\",\"func main() { type person struct { name string age int } p := person{ name: \\\"aa\\\", age: 11, } fmt.Println(unsafe.Sizeof(p)) fmt.Println(unsafe.Offsetof(p.name)) fmt.Println(unsafe.Sizeof(p.name)) fmt.Println(unsafe.Offsetof(p.age)) fmt.Println(unsafe.Sizeof(p.age)) }\",\"24 0 16 16 8\"]},\"1442\":{\"h\":\"Alignof\",\"t\":[\"如果不懂什么是内存对齐，可以前往：Go语言内存对齐详解 - 掘金 (juejin.cn)\",\"func Alignof(x ArbitraryType) uintptr\",\"对齐大小通常是以字节为单位的计算机字长与Sizeof的最小值，例如在amd64的机器上，字长为64位，也就是8个字节，例如：\",\"func main() { type person struct { name string age int32 } p := person{ name: \\\"aa\\\", age: 11, } fmt.Println(unsafe.Alignof(p), unsafe.Sizeof(p)) fmt.Println(unsafe.Alignof(p.name), unsafe.Sizeof(p.name)) fmt.Println(unsafe.Alignof(p.age), unsafe.Sizeof(p.age)) }\",\"8 24 8 16 4 4\"]},\"1443\":{\"h\":\"Pointer\",\"t\":[\"type Pointer *ArbitraryType\",\"Pointer是一种可以指向任意类型的\\\"指针\\\"，其类型为*ArbitraryType，该类型与uintptr结合使用，才能真正发挥unsafe包的真正威力。在官方文档的描述中，unsafe.Pointer类型可以进行四个特殊操作，分别是：\",\"任何类型的指针都可以转换为unsafe.Pointer\",\"unsafe.Pointer可以转换为任何类型的指针\",\"uintptr可以转换为unsafe.Pointer\",\"unsafe.Pointer可以转换为uintptr\",\"这四个特殊操作构成了整个unsafe包的基石，也正是这四个操作才能写出能够忽略类型系统从而直接读写内存的代码，建议在使用时应当格外注意。\",\"提示\",\"unsafe.Pointer无法解引用，同样的也无法取地址。\",\"(1) 将*T1转换为unsafe.Pointer再转换为*T2\",\"现有类型*T1，*T2，假设T2不大于T1并且两者内存布局等效，就允许将一种T2类型的数据转换为T1。例如：\",\"func main() { fmt.Println(Float64bits(12.3)) fmt.Println(Float64frombits(Float64bits(12.3))) } func Float64bits(f float64) uint64 { return *(*uint64)(unsafe.Pointer(&f)) } func Float64frombits(b uint64) float64 { return *(*float64)(unsafe.Pointer(&b)) }\",\"4623113902481840538 12.3\",\"这两个函数实际是math包下的两个函数，过程中的类型变化如下\",\"float64 -> *float64 -> unsafe.Pointer -> *uint64 -> uint64 -> *uint64 -> unsafe.Pointer -> *float64 -> float64\",\"(2) 将unsafe.Pointer转换为uintptr\",\"将unsafe.Pointer转换为uintptr时，会将前者所指向的地址作为后者的值，uintptr保存的是地址，区别在于，前者在语法上是一个指针，是一个引用，后者仅仅是一个整数值。例如\",\"func main() { num := 1 fmt.Println(unsafe.Pointer(&num)) fmt.Printf(\\\"0x%x\\\", uintptr(unsafe.Pointer(&num))) }\",\"0xc00001c088 0xc00001c088\",\"更大的区别在于垃圾回收的处理，由于unsafe.Pointer是一个引用，在需要的时候并不会被回收掉，而后者仅仅作为一个值，自然不会有这种特殊待遇了，另一个需要注意的点是当指针指向的元素地址移动时，GC会去更新指针引用的旧地址，但不会去更新uinptr所保存的值。例如下面的代码就可能会出现问题：\",\"func main() { num := 16 address := uintptr(unsafe.Pointer(&num)) np := (*int64)(unsafe.Pointer(address)) fmt.Println(*np) }\",\"当一些情况下，GC移动变量后，address指向的地址已经无效了，此时再使用该值去创建指针就会引发panic\",\"panic: runtime error: invalid memory address or nil pointer dereference\",\"所以并不建议保存Pointer转换为uintptr后的值。\",\"(3) 通过uintptr转换为unsafe.Pointer\",\"如下方式可以通过uintptr获得一个指针，只要指针是有效的，那么便不会出现例二的无效地址情况。Pointer与类型指针本身是不支持指针运算，但是uintptr只是一个整数值，可以进行数学运算，对uintptr进行数学运算后再转换为Pointer就可以完成指针运算。\",\"p = unsafe.Pointer(uintptr(p) + offset)\",\"这样，可以仅通过一个指针，就能访问到一些类型的内部元素，比如数组和结构体，无论其内部元素是否对外暴露，例如\",\"func main() { type person struct { name string age int32 } p := &person{\\\"jack\\\", 18} pp := unsafe.Pointer(p) fmt.Println(*(*string)(unsafe.Pointer(uintptr(pp) + unsafe.Offsetof(p.name)))) fmt.Println(*(*int32)(unsafe.Pointer(uintptr(pp) + unsafe.Offsetof(p.age)))) s := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} ps := unsafe.Pointer(&s[0]) fmt.Println(*(*int)(unsafe.Pointer(uintptr(ps) + 8))) fmt.Println(*(*int)(unsafe.Pointer(uintptr(ps) + 16))) }\",\"jack 18 2\"]},\"1444\":{\"h\":\"Add\",\"t\":[\"func Add(ptr Pointer, len IntegerType) Pointer\",\"Add将返回使用偏移量len更新后的Pointer，等价于Pointer(uintptr(ptr) + uintptr(len))\",\"Pointer(uintptr(ptr) + uintptr(len))\",\"例如：\",\"func main() { s := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} ps := unsafe.Pointer(&s[0]) fmt.Println(*(*int)(unsafe.Add(ps, 8))) fmt.Println(*(*int)(unsafe.Add(ps, 16))) }\",\"2 3\"]},\"1445\":{\"h\":\"SliceData\",\"t\":[\"func SliceData(slice []ArbitraryType) *ArbitraryTyp\",\"该函数接收一个切片，返回其底层数组的其实地址。如果不使用SliceData，那么只能通过取其第一个元素的指针来获取底层数组的地址，如下\",\"func main() { nums := []int{1, 2, 3, 4} for p, i := unsafe.Pointer(&nums[0]), 0; i < len(nums); p, i = unsafe.Add(p, unsafe.Sizeof(nums[0])), i+1 { num := *(*int)(p) fmt.Println(num) } }\",\"当然也可以通过reflect.SliceHeader类型来获取，不过在1.20版本以后它就已经被废弃了，SliceData就是为了替代它的，使用SliceData的例子如下\",\"func main() { nums := []int{1, 2, 3, 4} for p, i := unsafe.Pointer(unsafe.SliceData(nums)), 0; i < len(nums); p, i = unsafe.Add(p, unsafe.Sizeof(int(0))), i+1 { num := *(*int)(p) fmt.Println(num) } }\"]},\"1446\":{\"h\":\"Slice\",\"t\":[\"func Slice(ptr *ArbitraryType, len IntegerType) []ArbitraryType\",\"Slice函数接收一个指针，以及长度偏移量，它会返回该段内存的切片表达形式，过程中不会涉及到内存拷贝，对切片进行修改将会直接影响该地址上的数据，反过来也是如此，它通常和SliceData配合起来使用。\",\"func main() { nums := []int{1, 2, 3, 4} numsRef1 := unsafe.Slice(unsafe.SliceData(nums), len(nums)) numsRef1[0] = 2 fmt.Println(nums) }\",\"[2 2 3 4]\",\"修改numsRef1切片的数据，会导致nums的数据也会发生变化\"]},\"1447\":{\"h\":\"StringData\",\"t\":[\"func StringData(str string) *byte\",\"同SliceData函数，只不过因为字符串转字节切片需求比较频繁，所以单独拿出来，使用例子如下\",\"func main() { str := \\\"hello,world!\\\" for ptr, i := unsafe.Pointer(unsafe.StringData(str)), 0; i < len(str); ptr, i = unsafe.Add(ptr, unsafe.Sizeof(byte(0))), i+1 { char := *(*byte)(ptr) fmt.Println(string(char)) } }\",\"由于字符串字面量是存放在进程中的只读段，所以如果你在这里尝试修改字符串底层的数据，程序会直接崩掉报fatal。不过对于存放在堆栈上的字符串变量而言，在运行时修改其底层的数据是完全可行的。\"]},\"1448\":{\"h\":\"String\",\"t\":[\"func String(ptr *byte, len IntegerType) string\",\"同Slice函数，接收一个字节类型指针，以及其长度偏移量，返回其字符串表达形式，过程中不涉及内存拷贝。下面是一个字节切片转字符串的例子\",\"func main() { bytes := []byte(\\\"hello world\\\") str := unsafe.String(unsafe.SliceData(bytes), len(bytes)) fmt.Println(str) }\",\"StringData和String在字符串与字节切片的转换过程中不涉及内存拷贝，性能比直接类型转换要好，不过只适用于只读的情况下，如果你打算修改数据，就最好别用这个。\"]},\"1449\":{\"h\":\"Runtime\"},\"1450\":{\"c\":[\"golang\"]},\"1451\":{\"h\":\"并发\"},\"1452\":{\"c\":[\"golang\"]},\"1453\":{\"h\":\"内置数据结构\"},\"1454\":{\"c\":[\"golang\"]},\"1455\":{\"h\":\"错误\"},\"1456\":{\"c\":[\"golang\"]},\"1457\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"1458\":{\"h\":\"Computer\"},\"1459\":{\"h\":\"Share\"},\"1460\":{\"h\":\"Framework\"},\"1461\":{\"h\":\"Golang\"},\"1462\":{\"h\":\"Middleware\"},\"1463\":{\"h\":\"鉴权\"}},\"dirtCount\":0,\"index\":[[\"örnek\",{\"1\":{\"1409\":2}}],[\"önnek\",{\"1\":{\"1409\":2}}],[\"替换字符串\",{\"0\":{\"1407\":1}}],[\"替代传统面向对象语言中的继承\",{\"1\":{\"651\":1}}],[\"够转换的字符串如下\",{\"1\":{\"1386\":1}}],[\"逆向排序\",{\"0\":{\"1379\":1}}],[\"立方根\",{\"0\":{\"1360\":1}}],[\"立体光刻\",{\"1\":{\"132\":1}}],[\"幂\",{\"0\":{\"1358\":1}}],[\"幂等消费者\",{\"1\":{\"653\":1}}],[\"幂等生产者\",{\"1\":{\"634\":1}}],[\"余数\",{\"0\":{\"1349\":1}}],[\"姓名\",{\"1\":{\"1325\":2,\"1328\":2}}],[\"散列表\",{\"1\":{\"1313\":1}}],[\"掘金\",{\"1\":{\"1312\":1,\"1442\":1}}],[\"感兴趣的可以自行了解\",{\"1\":{\"1312\":1}}],[\"感兴趣可以去看看这里的源码实现\",{\"1\":{\"1403\":1}}],[\"感兴趣可以前往toml\",{\"1\":{\"1309\":1}}],[\"感兴趣可以看看\",{\"1\":{\"388\":1}}],[\"感兴趣可以在github上自行了解\",{\"1\":{\"335\":1}}],[\"处于实验阶段\",{\"1\":{\"1308\":1}}],[\"处理加密的包\",{\"1\":{\"1308\":1}}],[\"处理编码的包\",{\"1\":{\"1308\":1}}],[\"处理文件路径的包\",{\"1\":{\"1308\":1}}],[\"处理文件和文件系统的库\",{\"1\":{\"120\":1}}],[\"处理斜杠分隔路径的包\",{\"1\":{\"1308\":1}}],[\"处理突发流量\",{\"1\":{\"1155\":1}}],[\"处理客户端请求使用的时间\",{\"1\":{\"1133\":1}}],[\"处理请求期间的错误\",{\"1\":{\"1071\":1}}],[\"处理不同协议中的请求和响应\",{\"1\":{\"1071\":1}}],[\"处理pb级结构化或非结构化数据\",{\"1\":{\"735\":1}}],[\"处理逻辑做幂等方案\",{\"1\":{\"625\":1,\"697\":1}}],[\"处理中文需要使用到\",{\"1\":{\"537\":1}}],[\"处理字符串包含中文怎么办\",{\"1\":{\"537\":1}}],[\"处理字符串\",{\"0\":{\"537\":1}}],[\"处理\",{\"0\":{\"393\":1},\"1\":{\"614\":1,\"686\":1,\"1149\":1}}],[\"处理器\",{\"1\":{\"132\":1,\"635\":1,\"654\":1}}],[\"处理节点\",{\"1\":{\"4\":1}}],[\"闰秒等原因\",{\"1\":{\"1307\":1}}],[\"兆字节时\",{\"1\":{\"1307\":1}}],[\"兆字节\",{\"1\":{\"1307\":3}}],[\"归档旧文件\",{\"1\":{\"1307\":1}}],[\"归并排序\",{\"1\":{\"649\":1}}],[\"麻烦的点在于配置出一个适合自己项目的日志\",{\"1\":{\"1301\":1}}],[\"麻烦评论区指点一下\",{\"1\":{\"603\":1,\"675\":1}}],[\"级别化的日志组件\",{\"1\":{\"1299\":1}}],[\"级别越高检查造成运行时开销越大\",{\"1\":{\"300\":1}}],[\"综合示例\",{\"1\":{\"1283\":2}}],[\"综上所述\",{\"1\":{\"396\":1,\"1235\":1}}],[\"岁了\",{\"1\":{\"1280\":2}}],[\"封装了request和response\",{\"1\":{\"1275\":1}}],[\"封装比较优雅\",{\"1\":{\"1273\":1}}],[\"封面\",{\"1\":{\"746\":1}}],[\"规避使用反射带来的性能开销\",{\"1\":{\"1272\":1}}],[\"规则\",{\"0\":{\"481\":1},\"1\":{\"513\":1}}],[\"规则同上\",{\"1\":{\"469\":1}}],[\"规则如下\",{\"1\":{\"174\":1}}],[\"谁对什么资源进行什么操作\",{\"1\":{\"1251\":1}}],[\"固定ip地址43尽量使用电脑使用的\",{\"1\":{\"1219\":1}}],[\"固定长度为4个字节\",{\"1\":{\"1133\":1}}],[\"固定长度包\",{\"1\":{\"636\":1}}],[\"固定长度的对应类型的零值集合\",{\"1\":{\"202\":1}}],[\"购买阿里云\",{\"1\":{\"1217\":1}}],[\"购买域名\",{\"1\":{\"84\":1}}],[\"误删就是删库跑路了嘛\",{\"1\":{\"1199\":1}}],[\"挂了自己启动\",{\"1\":{\"1215\":1}}],[\"挂载数据卷\",{\"1\":{\"1193\":1}}],[\"挂起\",{\"1\":{\"1092\":1}}],[\"暴露服务\",{\"0\":{\"1235\":1}}],[\"暴露端口\",{\"1\":{\"1193\":2}}],[\"暴露给外部网络\",{\"1\":{\"655\":1}}],[\"宿主机端口\",{\"1\":{\"1188\":1}}],[\"宿主机映射端口\",{\"1\":{\"775\":1}}],[\"干了什么\",{\"0\":{\"1185\":1}}],[\"卸载旧的docker\",{\"1\":{\"1184\":1}}],[\"称为container\",{\"1\":{\"1195\":1}}],[\"称为镜像文件\",{\"1\":{\"1183\":1}}],[\"称为虚拟节点\",{\"1\":{\"1165\":1}}],[\"国内的公开仓库包括阿里云\",{\"1\":{\"1183\":1}}],[\"国际版\",{\"1\":{\"575\":1,\"647\":1}}],[\"镜像构建失败\",{\"1\":{\"1208\":1}}],[\"镜像签名与验证\",{\"1\":{\"1206\":1}}],[\"镜像存储与传输\",{\"1\":{\"1200\":1}}],[\"镜像瘦身技巧\",{\"1\":{\"1200\":1}}],[\"镜像维护者的姓名混合邮箱地址\",{\"1\":{\"1193\":1}}],[\"镜像作为基础镜像\",{\"1\":{\"1193\":1}}],[\"镜像==一般是软件的交付品\",{\"1\":{\"1193\":1}}],[\"镜像可以通过分层来进行继承\",{\"1\":{\"1192\":1}}],[\"镜像内除了软件本身\",{\"1\":{\"1191\":1}}],[\"镜像或部分id\",{\"1\":{\"1187\":1}}],[\"镜像名\",{\"1\":{\"1187\":2,\"1188\":1}}],[\"镜像id\",{\"1\":{\"1187\":1}}],[\"镜像命令\",{\"0\":{\"1187\":1}}],[\"镜像的推送与拉取\",{\"1\":{\"1200\":1}}],[\"镜像的版本管理\",{\"1\":{\"1200\":1}}],[\"镜像的优化\",{\"1\":{\"1200\":1}}],[\"镜像的构建\",{\"1\":{\"1200\":1}}],[\"镜像的基础\",{\"1\":{\"1192\":1}}],[\"镜像的所有指令\",{\"1\":{\"1183\":1}}],[\"镜像的地方\",{\"1\":{\"1183\":1}}],[\"镜像是什么\",{\"0\":{\"1191\":1}}],[\"镜像是静态的\",{\"1\":{\"1183\":1}}],[\"镜像是容器的模板\",{\"1\":{\"1183\":1}}],[\"镜像与容器的生命周期\",{\"1\":{\"1182\":1}}],[\"镜像\",{\"1\":{\"1182\":1,\"1183\":3,\"1193\":2}}],[\"天的文件都会被删除\",{\"1\":{\"1307\":1}}],[\"天\",{\"1\":{\"1174\":1,\"1307\":1}}],[\"天生适合开发高性能的网络服务\",{\"1\":{\"158\":1}}],[\"体积会越来越大\",{\"1\":{\"1174\":1}}],[\"杂项\",{\"0\":{\"1170\":1}}],[\"飞哥\",{\"1\":{\"1166\":1}}],[\"细粒度的负载均衡\",{\"0\":{\"1166\":1}}],[\"细节决定成败\",{\"1\":{\"505\":1}}],[\"执⾏如下命令\",{\"1\":{\"1165\":1}}],[\"执行的函数\",{\"1\":{\"1275\":1}}],[\"执行的时机\",{\"1\":{\"412\":1}}],[\"执行安装系统\",{\"1\":{\"1218\":1}}],[\"执行命令\",{\"1\":{\"1193\":1}}],[\"执行命令会自动生成证书和密钥\",{\"1\":{\"84\":1}}],[\"执行一些linux命令\",{\"1\":{\"1193\":1}}],[\"执行环境变量的配置env\",{\"1\":{\"1193\":1}}],[\"执行如下\",{\"1\":{\"1078\":1}}],[\"执行如下命令\",{\"1\":{\"477\":1}}],[\"执行如下命令来修改go代理\",{\"1\":{\"451\":1}}],[\"执行如下命令进行编译\",{\"1\":{\"297\":1}}],[\"执行多种任务以简化\",{\"1\":{\"1071\":1}}],[\"执行这个命令必须进入到8008的客户端中去执行\",{\"1\":{\"1010\":1}}],[\"执行这些测试有多种方法\",{\"1\":{\"468\":1}}],[\"执行读操作命令\",{\"1\":{\"993\":1}}],[\"执行计划\",{\"1\":{\"901\":1}}],[\"执行计划explain\",{\"0\":{\"814\":1}}],[\"执行更新updatemany\",{\"1\":{\"882\":1}}],[\"执行更新updateone\",{\"1\":{\"882\":1,\"883\":2}}],[\"执行了多少次\",{\"1\":{\"813\":1}}],[\"执行sql的过程\",{\"1\":{\"800\":1}}],[\"执行效率最高\",{\"1\":{\"795\":1}}],[\"执行\",{\"1\":{\"782\":1,\"825\":1,\"988\":1,\"1175\":1,\"1256\":1}}],[\"执行器调用一次\",{\"1\":{\"780\":1}}],[\"执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端\",{\"1\":{\"780\":1}}],[\"执行器就会根据表的引擎定义\",{\"1\":{\"780\":1}}],[\"执行器\",{\"0\":{\"780\":1}}],[\"执行器等\",{\"1\":{\"775\":1}}],[\"执行是\",{\"1\":{\"749\":1}}],[\"执行请求http\",{\"1\":{\"770\":1}}],[\"执行请求\",{\"1\":{\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"754\":1,\"756\":1,\"757\":1,\"763\":1}}],[\"执行es请求需要提供一个上下文对象\",{\"1\":{\"745\":1,\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"754\":1,\"756\":1}}],[\"执行done方法后返回一个取消原因\",{\"1\":{\"546\":1}}],[\"执行顺序由上到下\",{\"1\":{\"814\":1}}],[\"执行顺序\",{\"1\":{\"514\":1,\"633\":1}}],[\"执行顺序依旧一致\",{\"1\":{\"396\":1}}],[\"执行耗时等等性能指标\",{\"1\":{\"475\":1}}],[\"执行后结果如下\",{\"1\":{\"473\":1}}],[\"执行后会开启一个web\",{\"1\":{\"328\":1}}],[\"执行上述测试输出如下\",{\"1\":{\"471\":1}}],[\"执行情况\",{\"1\":{\"468\":1}}],[\"执行测试命令\",{\"1\":{\"475\":1}}],[\"执行测试后输出信息如下\",{\"1\":{\"472\":1}}],[\"执行测试后输出如下\",{\"1\":{\"471\":1,\"473\":1}}],[\"执行测试主要会用到go\",{\"1\":{\"468\":1}}],[\"执行测试\",{\"0\":{\"468\":1}}],[\"执行时间长\",{\"1\":{\"799\":1}}],[\"执行时计算\",{\"1\":{\"634\":1}}],[\"执行时会先输出\",{\"1\":{\"633\":1}}],[\"执行时\",{\"1\":{\"440\":1}}],[\"执行减法\",{\"1\":{\"417\":1}}],[\"执行加法\",{\"1\":{\"417\":1}}],[\"执行过程的耗时等等\",{\"1\":{\"412\":1}}],[\"执行完一个移动offset位置即可\",{\"1\":{\"1061\":1}}],[\"执行完毕后就会解锁\",{\"1\":{\"440\":1}}],[\"执行完毕后修改done\",{\"1\":{\"434\":1}}],[\"执行完毕后文件内容如下\",{\"1\":{\"402\":1}}],[\"执行完毕\",{\"1\":{\"422\":1}}],[\"执行完对应分支后主协程就直接退出了\",{\"1\":{\"421\":1}}],[\"执行完该分支后\",{\"1\":{\"230\":1}}],[\"执行count\",{\"1\":{\"127\":1}}],[\"执行逻辑中gorm会从数据库查询数据出来\",{\"1\":{\"110\":1}}],[\"执行对应的逻辑\",{\"1\":{\"110\":1}}],[\"⽐如\",{\"1\":{\"1165\":1}}],[\"倾斜问题\",{\"1\":{\"1165\":1}}],[\"⼤量的客户端请求落在了节点1上\",{\"1\":{\"1165\":1}}],[\"⼀致性哈希算法引⼊了虚拟节点机制\",{\"1\":{\"1165\":1}}],[\"⼀致性哈希算法在服务节点太少时\",{\"1\":{\"1165\":1}}],[\"⼀个消费者组中的不同消\",{\"1\":{\"1027\":1}}],[\"⼀个主题通常有多个订阅者\",{\"1\":{\"1025\":1}}],[\"剔出上游服务\",{\"1\":{\"1163\":1}}],[\"轮询算法是把请求平均的转发给各个后端\",{\"1\":{\"1167\":1}}],[\"轮询\",{\"1\":{\"1160\":1}}],[\"轮询服务健康\",{\"1\":{\"580\":1,\"652\":1}}],[\"爆发\",{\"1\":{\"1151\":1}}],[\"里的name对应\",{\"1\":{\"1151\":1}}],[\"里面不指定端口号默认为8080\",{\"1\":{\"1275\":1}}],[\"里面的数据库\",{\"1\":{\"1198\":1}}],[\"里面找到\",{\"1\":{\"850\":1}}],[\"里面四个字段有abc三个字段\",{\"1\":{\"593\":1,\"665\":1}}],[\"里面是怎么实现分页的\",{\"1\":{\"584\":1,\"656\":1}}],[\"里面持有着一个底层数组的引用\",{\"1\":{\"303\":1}}],[\"里面第一行写了一个方法\",{\"1\":{\"36\":2}}],[\"令牌的发放是恒速的\",{\"1\":{\"1149\":1}}],[\"令牌桶的大小就是接口所能承载的最大访问量\",{\"1\":{\"1149\":1}}],[\"令牌桶\",{\"1\":{\"1147\":1}}],[\"令牌桶有一个容量\",{\"1\":{\"1147\":1}}],[\"令牌桶算法的token为耗尽时会怎么做呢\",{\"1\":{\"1156\":1}}],[\"令牌桶算法的原理是系统以恒定的速率产生令牌\",{\"1\":{\"1147\":1}}],[\"令牌桶算法跟漏桶算法刚好相反\",{\"1\":{\"1149\":1}}],[\"令牌桶算法更为适合\",{\"1\":{\"1147\":1}}],[\"令牌桶算法\",{\"0\":{\"1147\":1}}],[\"漏桶和令牌桶算法最明显的区别就是是否允许突发流量\",{\"1\":{\"1149\":1}}],[\"漏桶以固定的速度出水\",{\"1\":{\"1146\":1}}],[\"漏桶算法能够强行限制数据的实时传输\",{\"1\":{\"1149\":1}}],[\"漏桶算法输入的时候请求不固定\",{\"1\":{\"1149\":1}}],[\"漏桶算法思路很简单\",{\"1\":{\"1146\":1}}],[\"漏桶算法\",{\"0\":{\"1146\":1}}],[\"精准匹配\",{\"1\":{\"1142\":2}}],[\"精准匹配规则\",{\"0\":{\"1142\":1}}],[\"精度毫秒\",{\"1\":{\"1133\":1}}],[\"精确匹配单个字段\",{\"0\":{\"756\":1}}],[\"精确一次\",{\"1\":{\"634\":1}}],[\"硬盘\",{\"1\":{\"1130\":1}}],[\"硬件优化\",{\"1\":{\"799\":1}}],[\"硬件资源\",{\"1\":{\"639\":1,\"645\":1}}],[\"硬件限制\",{\"1\":{\"513\":1}}],[\"停止\",{\"1\":{\"1119\":1,\"1188\":1}}],[\"停止以及错误信息\",{\"1\":{\"633\":1}}],[\"月\",{\"1\":{\"1108\":1,\"1307\":1}}],[\"淘宝等\",{\"1\":{\"1107\":1}}],[\"淘汰掉了曾经老旧的工具\",{\"1\":{\"442\":1}}],[\"рамблер\",{\"1\":{\"1107\":1}}],[\"俄文\",{\"1\":{\"1107\":1}}],[\"俄罗斯形态分析仪\",{\"1\":{\"144\":1}}],[\"赛索耶夫为俄罗斯访问量第二的rambler\",{\"1\":{\"1107\":1}}],[\"授权已过期\",{\"1\":{\"1092\":1}}],[\"授权linux社区免费使用这个版本控制系统\",{\"1\":{\"12\":1}}],[\"身份鉴权\",{\"1\":{\"1087\":1}}],[\"☁️使用docker安装\",{\"0\":{\"1074\":1}}],[\"商业版使用\",{\"1\":{\"1163\":1}}],[\"商业版本按照api调用次数还是订阅方式收费\",{\"1\":{\"1072\":1}}],[\"商业支持和价格\",{\"1\":{\"1072\":1}}],[\"商品服务的地址\",{\"1\":{\"1087\":1}}],[\"商品名称商品名称商品名称商品名称商品名称\",{\"1\":{\"1082\":3}}],[\"商品详情\",{\"1\":{\"641\":1}}],[\"商品信息\",{\"1\":{\"641\":1}}],[\"商品id\",{\"1\":{\"638\":2}}],[\"背后是否有商业公司支持\",{\"1\":{\"1072\":1}}],[\"背景是什么\",{\"1\":{\"588\":1,\"660\":1}}],[\"充当应用程序编程接口\",{\"1\":{\"1071\":1}}],[\"充值\",{\"1\":{\"1054\":1}}],[\"凡事无绝对\",{\"1\":{\"1068\":1}}],[\"凡事都是有好有坏的\",{\"1\":{\"388\":1}}],[\"堪称万金油\",{\"1\":{\"1068\":1}}],[\"怕丢失都会想到多做备份嘛\",{\"1\":{\"1064\":1}}],[\"百万级\",{\"1\":{\"1057\":1}}],[\"百度面经详解3\",{\"1\":{\"626\":1,\"698\":1}}],[\"百度面经详解2\",{\"1\":{\"626\":1,\"698\":1}}],[\"百度面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"百度后端研发工程师\",{\"0\":{\"601\":1,\"673\":1}}],[\"百度\",{\"0\":{\"600\":1,\"672\":1},\"1\":{\"1107\":1}}],[\"亚毫秒级\",{\"1\":{\"1057\":1}}],[\"万级\",{\"1\":{\"1057\":3}}],[\"万一有oom或者线程卡住了\",{\"1\":{\"597\":1,\"669\":1}}],[\"攒一波再处理\",{\"1\":{\"1055\":1}}],[\"少数机器宕机\",{\"1\":{\"1055\":1}}],[\"十六进制分数和二进制指数\",{\"1\":{\"1390\":2}}],[\"十分建议学习其他框架前先行掌握http包\",{\"1\":{\"1329\":1}}],[\"十分新颖的rpc库\",{\"1\":{\"128\":1}}],[\"十万级\",{\"1\":{\"1054\":1,\"1057\":2}}],[\"稳定\",{\"1\":{\"1053\":1}}],[\"稳定的id3解析和编写库\",{\"1\":{\"126\":1}}],[\"健壮\",{\"1\":{\"1053\":1}}],[\"健康\",{\"1\":{\"999\":1}}],[\"兼容性准则的保护\",{\"1\":{\"1437\":1}}],[\"兼容性强\",{\"1\":{\"1052\":1}}],[\"兼容平台\",{\"1\":{\"513\":1}}],[\"限流算法\",{\"1\":{\"1146\":1}}],[\"限流等\",{\"1\":{\"1107\":1}}],[\"限流削峰\",{\"1\":{\"1052\":1}}],[\"限制连接数\",{\"0\":{\"1148\":1}}],[\"限制请求速度\",{\"0\":{\"1147\":1}}],[\"限制请求次数\",{\"0\":{\"1146\":1}}],[\"限制发送方的发送速率\",{\"1\":{\"636\":1}}],[\"限制并发任务的数量\",{\"1\":{\"544\":1}}],[\"限制了切割后的容量\",{\"1\":{\"251\":1}}],[\"费者实例可以运行在不同的进程甚⾄不同的服务器上\",{\"1\":{\"1027\":1}}],[\"⽽\",{\"1\":{\"1026\":1}}],[\"件就是实际存储message的地方\",{\"1\":{\"1026\":1}}],[\"续的数据腾出空间\",{\"1\":{\"1025\":1}}],[\"量\",{\"1\":{\"1025\":1}}],[\"量化自我和物联网的开源平台\",{\"1\":{\"140\":1}}],[\"尾\",{\"1\":{\"1025\":1}}],[\"率最高\",{\"1\":{\"1024\":1}}],[\"不确保消息发送成功\",{\"1\":{\"1024\":1}}],[\"不会直接将数据写入follower\",{\"1\":{\"1022\":1}}],[\"们看下图\",{\"1\":{\"1022\":1}}],[\"器对同一个分区也只可能存放一个副本\",{\"1\":{\"1020\":1}}],[\"故障的\",{\"1\":{\"1020\":1}}],[\"故障转移\",{\"1\":{\"999\":1}}],[\"吐量\",{\"1\":{\"1020\":1}}],[\"例\",{\"1\":{\"1020\":1}}],[\"角色映射\",{\"1\":{\"1266\":1}}],[\"角色到\",{\"1\":{\"1266\":1}}],[\"角色\",{\"1\":{\"1020\":1,\"1266\":1}}],[\"汇总\",{\"1\":{\"1019\":1}}],[\"阶段性处理\",{\"1\":{\"1019\":1}}],[\"站点的用户活动追踪\",{\"1\":{\"1019\":1}}],[\"据了解\",{\"1\":{\"1018\":1}}],[\"⑬\",{\"1\":{\"1010\":1}}],[\"⑫\",{\"1\":{\"1010\":1}}],[\"⑪\",{\"1\":{\"1010\":1}}],[\"⑩\",{\"1\":{\"1010\":1}}],[\"⑨\",{\"1\":{\"1010\":1}}],[\"受保护的模式\",{\"1\":{\"1010\":1}}],[\"受python\",{\"1\":{\"145\":1}}],[\"⑧\",{\"1\":{\"1010\":1}}],[\"⑦\",{\"1\":{\"1010\":1}}],[\"⑥\",{\"1\":{\"1010\":1}}],[\"⑤\",{\"1\":{\"1010\":1}}],[\"槽\",{\"1\":{\"1007\":1}}],[\"槽的信息存储于每个节点中\",{\"1\":{\"1006\":1}}],[\"突发\",{\"1\":{\"1155\":1}}],[\"突刺现象\",{\"1\":{\"1148\":1}}],[\"突破单机内存限制\",{\"1\":{\"1005\":1}}],[\"突出显示格式和获取json的结构查询的控制台工具\",{\"1\":{\"141\":1}}],[\"搭建使用\",{\"0\":{\"1217\":1}}],[\"搭建主从模式\",{\"0\":{\"1002\":1}}],[\"搭建个人主页\",{\"0\":{\"54\":1}}],[\"投票选举\",{\"0\":{\"999\":1},\"1\":{\"999\":1}}],[\"掉\",{\"1\":{\"998\":1}}],[\"询问其它\",{\"1\":{\"998\":1}}],[\"客观下线\",{\"0\":{\"998\":1},\"1\":{\"998\":2}}],[\"客户端代码\",{\"1\":{\"1374\":1}}],[\"客户端ip\",{\"1\":{\"1154\":1}}],[\"客户端ip地址作为关键\",{\"1\":{\"1152\":1}}],[\"客户端请求header头中的cookie变量\",{\"1\":{\"1133\":1}}],[\"客户端的请求主体\",{\"1\":{\"1133\":1}}],[\"客户端端口\",{\"1\":{\"1133\":1}}],[\"客户端地址\",{\"1\":{\"1133\":1}}],[\"客户端地址的二进制形式\",{\"1\":{\"1133\":1}}],[\"客户端连接服务器的超时时间\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"客户端需要能够识别节点之间的分布\",{\"1\":{\"1006\":1}}],[\"客户端支持\",{\"1\":{\"1006\":1}}],[\"客户端可与任意节点通信\",{\"1\":{\"1005\":1}}],[\"客户端会重新向\",{\"1\":{\"999\":1}}],[\"客户端来连接\",{\"1\":{\"999\":1}}],[\"客户端在连接redis时需要通过auth\",{\"1\":{\"965\":1}}],[\"客户端闲置多长时间后关闭连接\",{\"1\":{\"965\":1}}],[\"客户端程序\",{\"1\":{\"963\":1}}],[\"客户端工具\",{\"0\":{\"874\":1}}],[\"客户端再次发送请求的话\",{\"1\":{\"776\":1}}],[\"客户端如果太长时间没动静\",{\"1\":{\"776\":1}}],[\"客户端发起请求\",{\"1\":{\"655\":1}}],[\"客户端发送数据\",{\"1\":{\"1374\":1}}],[\"客户端发送关闭连接的请求\",{\"1\":{\"651\":1}}],[\"客户端发送连接请求\",{\"1\":{\"651\":1}}],[\"客户端发送\",{\"1\":{\"641\":3}}],[\"客户端确认\",{\"1\":{\"651\":1}}],[\"客户端确认服务器响应\",{\"1\":{\"651\":1}}],[\"客户端存储一个\",{\"1\":{\"641\":1}}],[\"客户端存储信息\",{\"1\":{\"641\":1}}],[\"客户端存储在\",{\"1\":{\"641\":1}}],[\"客户端回复\",{\"1\":{\"641\":1}}],[\"客户端将该令牌存储在\",{\"1\":{\"641\":1}}],[\"客户端拿着token\",{\"1\":{\"625\":1,\"697\":1}}],[\"客户端服务\",{\"1\":{\"580\":1,\"652\":1}}],[\"客户端和后台通信走什么协议\",{\"1\":{\"572\":1,\"644\":1}}],[\"客户端\",{\"0\":{\"1332\":1},\"1\":{\"122\":1,\"145\":1,\"641\":1,\"1165\":2}}],[\"客户端就可以用公钥加密对称密钥了\",{\"1\":{\"83\":1}}],[\"哨兵进程服务的文件存放目录\",{\"1\":{\"1000\":1}}],[\"哨兵sentinel的使用\",{\"1\":{\"1000\":1}}],[\"哨兵的配置和使用\",{\"0\":{\"1000\":1}}],[\"哨兵节点每秒会发生ping命令\",{\"1\":{\"996\":1}}],[\"哨兵两个重要的作用\",{\"1\":{\"996\":1}}],[\"哨兵模式适合于在\",{\"1\":{\"1001\":1}}],[\"哨兵模式应用\",{\"0\":{\"1001\":1}}],[\"哨兵模式是一种特殊的模式\",{\"1\":{\"996\":1}}],[\"哨兵模式\",{\"1\":{\"651\":1,\"995\":1}}],[\"策略和请求匹配的视觉表示\",{\"0\":{\"1258\":1,\"1262\":1,\"1266\":1}}],[\"策略的结果将保存在p\",{\"1\":{\"1253\":1}}],[\"策略结果\",{\"1\":{\"1252\":1}}],[\"策略也是我们定义的各自权限\",{\"1\":{\"1252\":1}}],[\"策略存储\",{\"0\":{\"1248\":1}}],[\"策略\",{\"1\":{\"1160\":3,\"1249\":2}}],[\"策略说明\",{\"1\":{\"987\":1}}],[\"策略模式\",{\"1\":{\"595\":1,\"654\":1,\"667\":1}}],[\"瘦身\",{\"1\":{\"985\":1}}],[\"条数据\",{\"1\":{\"981\":3}}],[\"条件语句的格式如下所示\",{\"1\":{\"1423\":1}}],[\"条件\",{\"0\":{\"1423\":1}}],[\"条件查询\",{\"1\":{\"884\":1}}],[\"条件删除\",{\"1\":{\"883\":1}}],[\"条件修改\",{\"1\":{\"882\":1}}],[\"条件更新\",{\"1\":{\"882\":1}}],[\"条件过滤出来的结果\",{\"1\":{\"796\":1}}],[\"条件是bc\",{\"1\":{\"593\":1,\"665\":1}}],[\"条件不满足就一直阻塞\",{\"1\":{\"432\":1}}],[\"条件变量使用起来非常简单\",{\"1\":{\"432\":1}}],[\"条件变量\",{\"0\":{\"432\":1},\"1\":{\"432\":2}}],[\"条件控制语句总共有三种if\",{\"1\":{\"227\":1}}],[\"条件控制\",{\"0\":{\"227\":1}}],[\"储存的数据不会因故障而丢失\",{\"1\":{\"979\":1}}],[\"迭代map也是同理\",{\"1\":{\"1424\":1}}],[\"迭代语句的格式如下\",{\"1\":{\"1424\":1}}],[\"迭代\",{\"0\":{\"1424\":1}}],[\"迭代有序集合中的元素\",{\"1\":{\"974\":1}}],[\"迭代集合中的元素\",{\"1\":{\"973\":1}}],[\"迭代哈希表中的键值对\",{\"1\":{\"972\":1}}],[\"追加到\",{\"1\":{\"970\":1}}],[\"折衷\",{\"1\":{\"965\":1}}],[\"共有3个可选值\",{\"1\":{\"965\":1}}],[\"共享进程资源\",{\"1\":{\"641\":1,\"645\":1}}],[\"共享进程的内存空间\",{\"1\":{\"636\":1}}],[\"共享底层数据\",{\"1\":{\"529\":2}}],[\"仍然到达最大内存设置\",{\"1\":{\"965\":1}}],[\"达到最大内存后\",{\"1\":{\"965\":1}}],[\"达到分组的效果\",{\"1\":{\"211\":1}}],[\"及\",{\"1\":{\"957\":1,\"1054\":1}}],[\"及时解决避免造成不好的影响\",{\"1\":{\"813\":1}}],[\"杀死当前正在运行的脚本\",{\"1\":{\"952\":1}}],[\"脚本通知\",{\"1\":{\"1000\":1}}],[\"脚本\",{\"0\":{\"952\":1}}],[\"移出并获取列表的最后一个元素\",{\"1\":{\"971\":1}}],[\"移出并获取列表的第一个元素\",{\"1\":{\"971\":1}}],[\"移除有序集合中给定的分数区间的所有成员\",{\"1\":{\"974\":1}}],[\"移除有序集合中给定的排名区间的所有成员\",{\"1\":{\"974\":1}}],[\"移除有序集合中给定的字典区间的所有成员\",{\"1\":{\"974\":1}}],[\"移除有序集合中的一个或多个成员\",{\"1\":{\"974\":1}}],[\"移除列表元素\",{\"1\":{\"971\":1}}],[\"移除\",{\"1\":{\"967\":1}}],[\"移除远程仓库和本地仓库的关系\",{\"1\":{\"57\":1}}],[\"移除远测仓库\",{\"0\":{\"57\":1}}],[\"移动到给定的数据库\",{\"1\":{\"967\":2}}],[\"移动元素\",{\"0\":{\"943\":1}}],[\"弹出并删除n给元素\",{\"1\":{\"942\":1}}],[\"弹出并删除该元素\",{\"1\":{\"942\":1}}],[\"遵守bsd协议\",{\"1\":{\"956\":1}}],[\"遵守\",{\"1\":{\"908\":1}}],[\"遵循最左原则开始查找\",{\"1\":{\"806\":1}}],[\"遵循最小版本选择原则\",{\"1\":{\"458\":1}}],[\"遵循\",{\"1\":{\"794\":1}}],[\"遵循上述的规范\",{\"1\":{\"467\":1}}],[\"擅长处理复杂关系数据\",{\"1\":{\"907\":1}}],[\"擅长全文搜索\",{\"1\":{\"907\":1}}],[\"软状态\",{\"1\":{\"906\":1}}],[\"软件基金会管理\",{\"1\":{\"1056\":1}}],[\"软件包publicip返回您的面向公众的ipv4地址\",{\"1\":{\"145\":1}}],[\"软件包goshark使用tshark解码ip数据包并创建数据结构以分析数据包\",{\"1\":{\"145\":1}}],[\"软件包golibwireshark使用libwireshark库来解码pcap文件并分析解剖数据\",{\"1\":{\"145\":1}}],[\"软件包fasthttp是go的一种快速http实现\",{\"1\":{\"145\":1}}],[\"软件包dhcp6实现了dhcpv6服务器\",{\"1\":{\"145\":1}}],[\"软件包tga是targa图像格式的解码器\",{\"1\":{\"139\":1}}],[\"软件包\",{\"1\":{\"131\":1,\"142\":1}}],[\"软件\",{\"1\":{\"77\":1}}],[\"宽列\",{\"1\":{\"906\":1}}],[\"宽度小\",{\"1\":{\"816\":1}}],[\"隔离性\",{\"1\":{\"904\":1,\"1181\":1}}],[\"隔离级别\",{\"1\":{\"618\":1,\"634\":1,\"690\":1}}],[\"首页指定的页面名称\",{\"1\":{\"1123\":1}}],[\"首相要了解只一个sql的过程\",{\"1\":{\"901\":1}}],[\"首先通过\",{\"1\":{\"1415\":1}}],[\"首先定义结构体\",{\"1\":{\"1310\":1,\"1316\":1}}],[\"首先自己创建一个配置文件config\",{\"1\":{\"1303\":1}}],[\"首先我们要自己书写配置文件\",{\"1\":{\"1303\":1}}],[\"首先看一下直接使用最原始的日志的输出\",{\"1\":{\"1303\":1}}],[\"首先看一下总体的配置结构体\",{\"1\":{\"1302\":1}}],[\"首先选择消息队列要满足以下几个条件\",{\"1\":{\"1052\":1}}],[\"首先新建\",{\"1\":{\"1004\":1}}],[\"首先拉取mysql5\",{\"1\":{\"822\":1}}],[\"首先要打开慢查询日志\",{\"1\":{\"813\":1}}],[\"首先要以企业提供的计算能力和存储资源为基础\",{\"1\":{\"789\":1}}],[\"首先\",{\"1\":{\"775\":1}}],[\"首先检测下weibo索引是否存在\",{\"1\":{\"745\":1}}],[\"首先将所有的对象放入白色集合\",{\"1\":{\"551\":1}}],[\"首先写一个空方法\",{\"1\":{\"491\":1}}],[\"首先需要首先自定义一个结构体实现handler接口中的servehttp\",{\"1\":{\"1337\":1}}],[\"首先需要安装go\",{\"1\":{\"1274\":1}}],[\"首先需要给语料种子库添加数据\",{\"1\":{\"477\":1}}],[\"首先需要下载该工具\",{\"1\":{\"476\":1}}],[\"首先需要注意几点规范\",{\"1\":{\"467\":1}}],[\"首先创建user数据库\",{\"1\":{\"832\":1}}],[\"首先创建文件\",{\"1\":{\"475\":1,\"477\":1}}],[\"首先创建\",{\"1\":{\"471\":1}}],[\"首先创建一个hello\",{\"1\":{\"470\":1}}],[\"首先创建一个头文件sum\",{\"1\":{\"299\":1}}],[\"首先创建一个长度为0\",{\"1\":{\"244\":1}}],[\"首先项目下有两个独立的go模块\",{\"1\":{\"463\":1}}],[\"首先使用如下命令下载一个依赖\",{\"1\":{\"460\":1}}],[\"首先你需要一个可公网访问的源代码仓库\",{\"1\":{\"445\":1}}],[\"首先会通过loadint64来获取期望值\",{\"1\":{\"440\":1}}],[\"首先go语言是一个百分之百的静态类型语言\",{\"1\":{\"347\":1}}],[\"首先声明队列类型\",{\"1\":{\"343\":1}}],[\"首先编译生成目标文件\",{\"1\":{\"312\":1}}],[\"首先准备一个lib\",{\"1\":{\"312\":1}}],[\"首先引入errno\",{\"1\":{\"298\":1}}],[\"讲解如何分析问题\",{\"1\":{\"901\":1}}],[\"讲一下\",{\"1\":{\"634\":1}}],[\"讲一下项目\",{\"1\":{\"603\":1,\"675\":1}}],[\"讲一下你对b+树的理解\",{\"1\":{\"598\":1,\"670\":1}}],[\"讲一下你对公有云的理解\",{\"1\":{\"583\":1,\"655\":2}}],[\"讲一下一个系统访问的整个链路过程\",{\"1\":{\"583\":1,\"655\":2}}],[\"讲一下gmp调度模型\",{\"1\":{\"582\":1,\"654\":2}}],[\"讲一下go性能调优的案例\",{\"1\":{\"562\":1,\"634\":2}}],[\"讲一下docker实现容器的基本原理\",{\"1\":{\"562\":1,\"634\":1}}],[\"讲一下defer的原理\",{\"1\":{\"562\":1,\"634\":2}}],[\"讲一下mysql的事务隔离级别\",{\"1\":{\"562\":1,\"634\":1}}],[\"讲一下map的底层结构\",{\"1\":{\"562\":1,\"634\":2}}],[\"赵六\",{\"1\":{\"895\":1}}],[\"广泛应用于秒杀或抢购活动中\",{\"1\":{\"1052\":1}}],[\"广泛用于web应用\",{\"1\":{\"905\":1}}],[\"广州市\",{\"1\":{\"894\":1}}],[\"广告屏蔽\",{\"0\":{\"72\":1}}],[\"李四\",{\"1\":{\"894\":1,\"1328\":2}}],[\"王五\",{\"1\":{\"892\":1}}],[\"北京市\",{\"1\":{\"892\":1}}],[\"北京贝壳外包\",{\"0\":{\"622\":1,\"694\":1}}],[\"张三\",{\"1\":{\"892\":1,\"1325\":2,\"1328\":3}}],[\"游标查询\",{\"1\":{\"863\":1}}],[\"游戏服务器\",{\"0\":{\"333\":1}}],[\"游戏开发和在线教育\",{\"1\":{\"843\":1}}],[\"游戏开发相关库\",{\"1\":{\"120\":1}}],[\"游戏开发\",{\"0\":{\"134\":1},\"1\":{\"120\":1}}],[\"附\",{\"0\":{\"863\":1},\"1\":{\"1175\":1}}],[\"附近地铁线名称\",{\"1\":{\"817\":1}}],[\"五\",{\"0\":{\"862\":1}}],[\"降序\",{\"1\":{\"861\":1}}],[\"降低系统耦合\",{\"1\":{\"1068\":1}}],[\"降低发送速率\",{\"1\":{\"636\":1}}],[\"降低性能\",{\"1\":{\"548\":1,\"653\":1}}],[\"升级安装\",{\"1\":{\"1231\":1}}],[\"升级的mongo\",{\"1\":{\"875\":1}}],[\"升级风险\",{\"1\":{\"118\":1}}],[\"升序\",{\"1\":{\"861\":1}}],[\"浏览器访问并输入token即可\",{\"1\":{\"1235\":1}}],[\"浏览器通过https\",{\"1\":{\"1235\":1}}],[\"浏览器中输入地址和端口号为\",{\"1\":{\"851\":1}}],[\"浏览器渲染页面\",{\"1\":{\"638\":1}}],[\"稍微复杂一点的是模板引擎的模板语法\",{\"1\":{\"1415\":1}}],[\"稍微修改下后如下\",{\"1\":{\"421\":1}}],[\"稍微修改了一下\",{\"1\":{\"287\":1}}],[\"稍后会介绍\",{\"1\":{\"849\":1}}],[\"课程内容等数据\",{\"1\":{\"843\":1}}],[\"帖子\",{\"1\":{\"843\":1}}],[\"早期有些社区维护的库\",{\"1\":{\"828\":1}}],[\"早期go提供的内置min\",{\"1\":{\"209\":1}}],[\"驱动对应的方法都也差不多会了\",{\"1\":{\"913\":1}}],[\"驱动内部维护着一个连接池\",{\"1\":{\"913\":1}}],[\"驱动名称就是注册驱动时使用的名称\",{\"1\":{\"891\":1}}],[\"驱动可以是你自己写的\",{\"1\":{\"890\":1}}],[\"驱动examples目录下有着相当多的使用示例\",{\"1\":{\"831\":1}}],[\"驱动\",{\"0\":{\"828\":1}}],[\"松散的结构可以存储不同类型的数据\",{\"1\":{\"827\":1}}],[\"观察了会儿\",{\"1\":{\"825\":1}}],[\"观察者模式\",{\"1\":{\"654\":1}}],[\"端口就可以一样了\",{\"1\":{\"1011\":1}}],[\"端口号\",{\"1\":{\"852\":1,\"1000\":1}}],[\"端口\",{\"1\":{\"823\":1,\"993\":1,\"1075\":1}}],[\"端口找到对应的服务\",{\"1\":{\"110\":1}}],[\"步骤\",{\"1\":{\"822\":1,\"1193\":1}}],[\"鲁\",{\"1\":{\"818\":1}}],[\"鲁班\",{\"1\":{\"814\":3,\"818\":7,\"819\":5}}],[\"租赁方式\",{\"1\":{\"817\":1}}],[\"周边配套\",{\"1\":{\"817\":1}}],[\"户型介绍\",{\"1\":{\"817\":1}}],[\"覆盖所需要查询的列的值\",{\"1\":{\"817\":1}}],[\"覆盖索引的限制\",{\"1\":{\"817\":1}}],[\"覆盖索引\",{\"0\":{\"817\":1},\"1\":{\"641\":1,\"814\":1,\"817\":1,\"818\":1}}],[\"衍生\",{\"1\":{\"814\":1}}],[\"衍生出来的虚表\",{\"1\":{\"814\":1}}],[\"慢慢处理\",{\"1\":{\"1155\":1,\"1156\":1}}],[\"慢\",{\"1\":{\"965\":1,\"1309\":1}}],[\"慢查询\",{\"0\":{\"901\":1}}],[\"慢查询日志中可能会出现很多的日志记录\",{\"1\":{\"813\":1}}],[\"慢查询日志分析\",{\"1\":{\"813\":1}}],[\"慢启动用于避免开始时网络过载\",{\"1\":{\"656\":1}}],[\"慢启动\",{\"1\":{\"636\":1,\"656\":1}}],[\"性别\",{\"1\":{\"811\":1,\"1325\":2,\"1328\":2}}],[\"性能也非常不错\",{\"1\":{\"1273\":1}}],[\"性能调优\",{\"1\":{\"1207\":1}}],[\"性能会很差\",{\"1\":{\"1062\":1}}],[\"性能卓越\",{\"1\":{\"1055\":2}}],[\"性能和稳定性还是值得信赖的\",{\"1\":{\"1054\":1}}],[\"性能上有瓶颈\",{\"1\":{\"1053\":1}}],[\"性能上报到prometheus\",{\"1\":{\"122\":1}}],[\"性能上报到influxdb\",{\"1\":{\"122\":2}}],[\"性能测试结果\",{\"0\":{\"1038\":1}}],[\"性能极高\",{\"1\":{\"957\":1}}],[\"性能有了明显提升\",{\"1\":{\"820\":1}}],[\"性能就会非常稳定\",{\"1\":{\"805\":1}}],[\"性能可能得不到提升\",{\"1\":{\"800\":1}}],[\"性能下降的原因\",{\"1\":{\"799\":1}}],[\"性能下降的表现\",{\"1\":{\"799\":1}}],[\"性能下降\",{\"1\":{\"794\":1}}],[\"性能最好的\",{\"1\":{\"735\":1}}],[\"性能提升受限\",{\"1\":{\"638\":1}}],[\"性能比直接类型转换要好\",{\"1\":{\"1448\":1}}],[\"性能比\",{\"1\":{\"637\":1}}],[\"性能\",{\"1\":{\"637\":1,\"1052\":1}}],[\"性能优化等领域\",{\"1\":{\"639\":1}}],[\"性能优化\",{\"1\":{\"633\":1}}],[\"性能优秀\",{\"1\":{\"115\":1}}],[\"性能开销大原因\",{\"1\":{\"579\":1,\"651\":2}}],[\"性能剖析\",{\"1\":{\"497\":3}}],[\"性能分析与问题定位工具\",{\"1\":{\"1207\":1}}],[\"性能分析工具\",{\"1\":{\"901\":1}}],[\"性能分析的唯一手段就只能通过benchmark来测试某一个功能单元的平均执行耗时\",{\"1\":{\"315\":1}}],[\"性能分析\",{\"0\":{\"315\":1},\"1\":{\"547\":1}}],[\"性能分析等功能\",{\"1\":{\"155\":1}}],[\"性能消耗也是一个问题\",{\"1\":{\"232\":1}}],[\"性能好\",{\"1\":{\"119\":1}}],[\"性能一般\",{\"1\":{\"114\":1}}],[\"频繁更新的字段不适合建立索引\",{\"1\":{\"811\":1}}],[\"频繁作为查询条件的字段应该创建索引\",{\"1\":{\"811\":1}}],[\"频繁查询的列\",{\"1\":{\"651\":1}}],[\"资料中\",{\"1\":{\"810\":1}}],[\"资源组\",{\"1\":{\"1263\":1}}],[\"资源和方法\",{\"1\":{\"1253\":1}}],[\"资源和操作\",{\"1\":{\"1240\":1}}],[\"资源类型\",{\"1\":{\"1215\":1}}],[\"资源效率\",{\"1\":{\"1181\":1}}],[\"资源有限\",{\"1\":{\"822\":1}}],[\"资源使用情况\",{\"1\":{\"655\":1}}],[\"资源\",{\"1\":{\"649\":1,\"1235\":1}}],[\"资源独立\",{\"1\":{\"645\":1}}],[\"资源管理\",{\"1\":{\"633\":1}}],[\"资源清理\",{\"1\":{\"514\":1}}],[\"效果\",{\"1\":{\"1249\":2}}],[\"效果最好\",{\"1\":{\"809\":1}}],[\"效率低\",{\"1\":{\"1240\":1}}],[\"效率很好\",{\"1\":{\"814\":1}}],[\"效率较低\",{\"1\":{\"653\":1}}],[\"扇区\",{\"1\":{\"805\":1}}],[\"页\",{\"1\":{\"805\":1}}],[\"页的整数倍\",{\"1\":{\"805\":1}}],[\"页面中有几个可供选择的选项\",{\"1\":{\"324\":1}}],[\"影响查询效率\",{\"1\":{\"804\":1}}],[\"影响行数\",{\"1\":{\"749\":1}}],[\"叶节点包含了完整的数据记录\",{\"1\":{\"808\":1}}],[\"叶节点的指针为空\",{\"1\":{\"803\":1}}],[\"叶子结点形成了有序链表\",{\"1\":{\"805\":1}}],[\"叶子结点包含所有的数据\",{\"1\":{\"805\":1}}],[\"叶子节点不存储指针\",{\"1\":{\"805\":1}}],[\"叶子节点形成一个链表\",{\"1\":{\"635\":1}}],[\"叶子节点存储索引和数据\",{\"1\":{\"595\":1,\"667\":1}}],[\"度越深代表存储的数据越密\",{\"1\":{\"803\":1}}],[\"度\",{\"1\":{\"803\":1}}],[\"层存储\",{\"1\":{\"1056\":1}}],[\"层级越来越大越来越深\",{\"1\":{\"802\":1}}],[\"层层包装下就形成了一条错误链表\",{\"1\":{\"392\":1}}],[\"旋转\",{\"1\":{\"800\":1}}],[\"旋转数组\",{\"1\":{\"616\":1,\"688\":1}}],[\"寻找前后缀\",{\"0\":{\"1403\":1}}],[\"寻找\",{\"1\":{\"1187\":1}}],[\"寻找镜像\",{\"1\":{\"1185\":1}}],[\"寻找并切换最快的源\",{\"1\":{\"77\":1}}],[\"寻道\",{\"1\":{\"800\":1}}],[\"太多维护索引的时间就会很长\",{\"1\":{\"800\":1}}],[\"往有序集合中加入元素\",{\"1\":{\"947\":1}}],[\"往一个集合里面添加元素\",{\"1\":{\"939\":1}}],[\"往往很多时候会忽略或者过度的强调索引\",{\"1\":{\"800\":1}}],[\"往go\",{\"1\":{\"464\":1}}],[\"告知存储引擎如何快速的找到我们所需的数据\",{\"1\":{\"800\":1}}],[\"告诉主协程可以退出了\",{\"1\":{\"421\":1}}],[\"速率\",{\"1\":{\"1149\":1}}],[\"速率限制\",{\"1\":{\"1071\":1}}],[\"速查找数据\",{\"1\":{\"800\":1}}],[\"速度快了也不能被窃取\",{\"1\":{\"85\":1}}],[\"垂直分割\",{\"1\":{\"799\":1}}],[\"冗余及容错性\",{\"1\":{\"1019\":1}}],[\"冗余索引\",{\"1\":{\"795\":1}}],[\"冗余是以存储换取性能\",{\"1\":{\"789\":1}}],[\"缩进\",{\"0\":{\"1319\":1}}],[\"缩写\",{\"1\":{\"794\":1}}],[\"缩放类型的的浮点数\",{\"1\":{\"720\":1}}],[\"英文字母开头\",{\"1\":{\"794\":2}}],[\"英文名package\",{\"1\":{\"173\":1}}],[\"备机\",{\"1\":{\"1163\":1}}],[\"备份的日志文件将保留在同一目录下\",{\"1\":{\"1307\":1}}],[\"备份使用提供给\",{\"1\":{\"1307\":1}}],[\"备份使用子进程进行操作\",{\"1\":{\"980\":1}}],[\"备份\",{\"1\":{\"1307\":1}}],[\"备份次数\",{\"1\":{\"1304\":1}}],[\"备份原有的源\",{\"1\":{\"1220\":1}}],[\"备份表用于备份或抓取源表快照\",{\"1\":{\"794\":1}}],[\"备份库以\",{\"1\":{\"794\":1}}],[\"备注\",{\"1\":{\"27\":1}}],[\"须见名知意\",{\"1\":{\"794\":1}}],[\"母开头\",{\"1\":{\"794\":1}}],[\"既有\",{\"1\":{\"988\":1}}],[\"既然可以当做数组处理\",{\"1\":{\"863\":1}}],[\"既然是集合\",{\"1\":{\"340\":1}}],[\"既方便理解又方便操作\",{\"1\":{\"793\":1}}],[\"证明它们之间的利用率越高\",{\"1\":{\"793\":1}}],[\"证明这些实体之间的冗余度越低\",{\"1\":{\"793\":1}}],[\"证明实体和联系设计得越简洁\",{\"1\":{\"793\":1}}],[\"证书支持\",{\"1\":{\"1235\":1}}],[\"证书\",{\"1\":{\"84\":1}}],[\"额外增加了io的压力\",{\"1\":{\"791\":1}}],[\"远远大于我们的需求和mysql单表所能支持的性能上限\",{\"1\":{\"791\":1}}],[\"远程连接\",{\"1\":{\"964\":1}}],[\"远程登录mysql\",{\"1\":{\"775\":1}}],[\"远程git仓库地址\",{\"1\":{\"55\":1}}],[\"远程服务器有一份\",{\"1\":{\"49\":1}}],[\"远程仓库的其他操作\",{\"0\":{\"53\":1}}],[\"远程仓库有很多\",{\"1\":{\"43\":1}}],[\"远程仓库\",{\"1\":{\"17\":1}}],[\"呈非线性增长\",{\"1\":{\"790\":1}}],[\"拒绝优先\",{\"1\":{\"1254\":1}}],[\"拒绝3b\",{\"0\":{\"790\":1}}],[\"拒绝策略\",{\"1\":{\"645\":1}}],[\"范式是以性能换取存储\",{\"1\":{\"789\":1}}],[\"范围内\",{\"1\":{\"1234\":1}}],[\"范围条件右边的索引失效\",{\"1\":{\"818\":1}}],[\"范围查找\",{\"1\":{\"818\":1}}],[\"范围查找是直接从链表查\",{\"1\":{\"805\":1}}],[\"范围查询\",{\"0\":{\"759\":1}}],[\"范围查询时只需要在叶子节点之间跳转\",{\"1\":{\"649\":1}}],[\"范围类型\",{\"0\":{\"724\":1}}],[\"范围\",{\"1\":{\"720\":4,\"724\":1}}],[\"浪费更多空间\",{\"1\":{\"787\":1}}],[\"浪费了6个字节\",{\"1\":{\"273\":1}}],[\"含null复合索引无效\",{\"1\":{\"786\":1}}],[\"含有类型集的接口又称为general\",{\"1\":{\"340\":1}}],[\"落盘的步骤执行的\",{\"1\":{\"782\":1}}],[\"落盘\",{\"0\":{\"781\":1}}],[\"样例\",{\"1\":{\"780\":1}}],[\"样本的显著性水平\",{\"1\":{\"476\":1}}],[\"决定各个表的连接顺序\",{\"1\":{\"779\":1}}],[\"决定使用哪个索引\",{\"1\":{\"779\":1}}],[\"决定哪一个进程或线程获得cpu资源\",{\"1\":{\"641\":1}}],[\"识别成\",{\"1\":{\"778\":2}}],[\"握手后\",{\"1\":{\"776\":1}}],[\"握手流程\",{\"1\":{\"82\":1}}],[\"视图\",{\"1\":{\"775\":1}}],[\"视频播放\",{\"1\":{\"644\":1}}],[\"视频发布\",{\"1\":{\"641\":1}}],[\"视频上传与处理\",{\"1\":{\"644\":1}}],[\"视频上传\",{\"1\":{\"641\":1}}],[\"视频库\",{\"0\":{\"146\":1}}],[\"视频\",{\"0\":{\"68\":1},\"1\":{\"120\":1}}],[\"涵盖mysql大多核心服务功能\",{\"1\":{\"775\":1}}],[\"涵盖了cpu\",{\"1\":{\"321\":1}}],[\"涵盖了代码格式化\",{\"1\":{\"155\":1}}],[\"节点角色划分\",{\"1\":{\"1235\":1}}],[\"节点ip\",{\"1\":{\"1235\":1}}],[\"节点的外部\",{\"1\":{\"1234\":1}}],[\"节点的数据存储个数\",{\"1\":{\"803\":1}}],[\"节点2的ip\",{\"1\":{\"1165\":3}}],[\"节点2只能负责⾮常⼩的⼀段\",{\"1\":{\"1165\":1}}],[\"节点1的ip\",{\"1\":{\"1165\":3}}],[\"节点故障宕机等将会带来很高的代价\",{\"1\":{\"1165\":1}}],[\"节点可以正常使用了\",{\"1\":{\"1010\":1}}],[\"节点数量\",{\"1\":{\"1010\":1}}],[\"节点之间通过\",{\"1\":{\"1006\":1}}],[\"节点之间要保持一致\",{\"1\":{\"768\":1,\"769\":1,\"770\":1}}],[\"节点则按照一定的规则在所有从节点中选择一个最优的作为主服务器\",{\"1\":{\"999\":1}}],[\"节点会通过投票机制\",{\"1\":{\"999\":1}}],[\"节点判定主服务为\",{\"1\":{\"998\":1}}],[\"节点认为主服务器\",{\"1\":{\"998\":1}}],[\"节点对主服务器的状态判断\",{\"1\":{\"998\":1}}],[\"节点没有收到目标服务器的有效回复\",{\"1\":{\"997\":1}}],[\"节点中数据key从左到有递增排列\",{\"1\":{\"803\":1}}],[\"节点具有相同的深度\",{\"1\":{\"803\":1}}],[\"节点存储数据和指向子节点的指针\",{\"1\":{\"649\":1}}],[\"某个字段使用全文搜索\",{\"1\":{\"758\":1}}],[\"某不知名组一面\",{\"0\":{\"572\":1,\"644\":1}}],[\"启用并立即启动cri\",{\"1\":{\"1223\":1}}],[\"启用文件的高效传输\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"启用日志\",{\"1\":{\"852\":1}}],[\"启用gzip压缩\",{\"1\":{\"756\":1,\"771\":1}}],[\"启动本地代理后\",{\"1\":{\"1233\":1}}],[\"启动并设置开机自启\",{\"1\":{\"1221\":1}}],[\"启动多容器应用\",{\"1\":{\"1203\":1}}],[\"启动与停止容器\",{\"1\":{\"1201\":1}}],[\"启动两个服务在自己的网络下\",{\"1\":{\"1197\":1}}],[\"启动容器后\",{\"1\":{\"1195\":1}}],[\"启动容器\",{\"1\":{\"1188\":1}}],[\"启动容器在秒级别\",{\"1\":{\"822\":1}}],[\"启动关闭的容器\",{\"1\":{\"1188\":1}}],[\"启动docker\",{\"1\":{\"1184\":1}}],[\"启动服务\",{\"1\":{\"1175\":1,\"1235\":1}}],[\"启动数据库\",{\"0\":{\"1075\":1}}],[\"启动后\",{\"1\":{\"1033\":1}}],[\"启动后就是一个正常提供一个只读的redis服务了\",{\"1\":{\"993\":1}}],[\"启动kafka\",{\"0\":{\"1033\":1}}],[\"启动从节点8008\",{\"1\":{\"1010\":1}}],[\"启动主节点8007\",{\"1\":{\"1010\":1}}],[\"启动哨兵\",{\"1\":{\"1004\":1}}],[\"启动哨兵即可\",{\"1\":{\"1003\":1}}],[\"启动哨兵的进程端口号\",{\"1\":{\"1000\":1}}],[\"启动副本同步\",{\"1\":{\"993\":1}}],[\"启动成功日志\",{\"1\":{\"775\":1}}],[\"启动完成后\",{\"1\":{\"770\":1}}],[\"启动第三个节点\",{\"0\":{\"770\":1}}],[\"启动第二个节点\",{\"0\":{\"769\":1}}],[\"启动第一个节点\",{\"0\":{\"768\":1}}],[\"启动过程中\",{\"1\":{\"635\":1}}],[\"启动\",{\"0\":{\"738\":1},\"1\":{\"633\":1,\"851\":2,\"852\":2}}],[\"启动速度更快\",{\"1\":{\"170\":1,\"1181\":1}}],[\"启动和销毁的成本低\",{\"1\":{\"151\":1}}],[\"放到sql语句前\",{\"1\":{\"814\":1}}],[\"放在\",{\"1\":{\"743\":1}}],[\"放入内存\",{\"1\":{\"805\":1}}],[\"放入消息队列\",{\"1\":{\"644\":1}}],[\"放入一个对象\",{\"1\":{\"435\":1}}],[\"满足读多写少的应用场景\",{\"1\":{\"991\":1}}],[\"满足查询的记录数量的比例\",{\"1\":{\"814\":1}}],[\"满足条件的下一行\",{\"1\":{\"780\":1}}],[\"满足上面两点要求就可以实现热更新分词了\",{\"1\":{\"743\":1}}],[\"满了\",{\"1\":{\"418\":1}}],[\"热更新\",{\"0\":{\"743\":1}}],[\"热点查询数据等\",{\"1\":{\"641\":1}}],[\"热点代码路径等等\",{\"1\":{\"315\":1}}],[\"均每天扣1艘<tag1>中国<\",{\"1\":{\"741\":1}}],[\"嫌犯已自首\",{\"1\":{\"741\":3}}],[\"韩警平均每天扣1艘中国渔船\",{\"1\":{\"741\":2}}],[\"美国留给伊拉克的是个烂摊子吗\",{\"1\":{\"741\":1}}],[\"美团面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"美团\",{\"0\":{\"585\":1,\"586\":1,\"587\":1,\"588\":1,\"657\":1,\"658\":1,\"659\":1,\"660\":1}}],[\"●可以扩展到上百台服务器\",{\"1\":{\"735\":1}}],[\"●实时分析的分布式搜索引擎\",{\"1\":{\"735\":1}}],[\"●分布式的实时文件存储\",{\"1\":{\"735\":1}}],[\"右击桌面图标\",{\"1\":{\"850\":1}}],[\"右子树的键值大于根的键值\",{\"1\":{\"802\":1}}],[\"右边弹出元素\",{\"1\":{\"936\":1}}],[\"右边添加\",{\"1\":{\"934\":1}}],[\"右边\",{\"1\":{\"730\":1}}],[\"右键\",{\"1\":{\"18\":2,\"20\":1,\"24\":2,\"25\":1,\"34\":1,\"35\":1,\"36\":1}}],[\"左子树的键值小于根的键值\",{\"1\":{\"802\":1}}],[\"左边弹出元素\",{\"1\":{\"936\":1}}],[\"左边添加\",{\"1\":{\"934\":1}}],[\"左边\",{\"1\":{\"730\":1}}],[\"左右模糊查询\",{\"1\":{\"585\":2,\"657\":2}}],[\"左右是索引值\",{\"1\":{\"511\":1}}],[\"纬度\",{\"1\":{\"730\":6}}],[\"嵌套\",{\"0\":{\"1425\":1}}],[\"嵌套文档等各种数据类型\",{\"1\":{\"841\":1,\"887\":1}}],[\"嵌套对象实质是将每个对象分离出来\",{\"1\":{\"729\":1}}],[\"嵌套类型是对象数据类型的一个特例\",{\"1\":{\"727\":1}}],[\"嵌套类型\",{\"0\":{\"727\":1}}],[\"嵌入式脚本语言\",{\"0\":{\"130\":1},\"1\":{\"120\":1}}],[\"④\",{\"0\":{\"1283\":1},\"1\":{\"725\":1,\"1010\":1}}],[\"③ingress\",{\"0\":{\"1235\":1}}],[\"③\",{\"0\":{\"1245\":1,\"1282\":1},\"1\":{\"725\":1,\"728\":1,\"729\":1,\"1010\":1}}],[\"②修改服务类型\",{\"0\":{\"1234\":1}}],[\"②\",{\"0\":{\"1244\":1,\"1281\":1},\"1\":{\"725\":1,\"728\":1,\"729\":1,\"1010\":1}}],[\"①本地代理\",{\"0\":{\"1233\":1}}],[\"①\",{\"0\":{\"1243\":1,\"1280\":1},\"1\":{\"725\":1,\"728\":1,\"729\":1,\"1010\":1}}],[\"毫秒级\",{\"1\":{\"1057\":2}}],[\"毫秒计时\",{\"1\":{\"724\":1}}],[\"毫无节制的使用泛型会使得代码难以维护\",{\"1\":{\"337\":1}}],[\"真实网络环境中请求到来不是匀速的\",{\"1\":{\"1155\":1}}],[\"真值\",{\"1\":{\"722\":1}}],[\"真正有效的是其后的12位commitid\",{\"1\":{\"459\":1}}],[\"真正的原子操作是由硬件指令层面支持的\",{\"1\":{\"437\":1}}],[\"聚集索引\",{\"1\":{\"808\":1}}],[\"聚簇\",{\"1\":{\"808\":1}}],[\"聚簇索引\",{\"1\":{\"610\":1,\"682\":1}}],[\"聚簇索引和非聚簇索引有什么区别\",{\"1\":{\"592\":1,\"664\":1}}],[\"聚簇索引和非聚簇索引的区别\",{\"1\":{\"566\":1,\"638\":1}}],[\"聚合查询\",{\"0\":{\"886\":1}}],[\"聚合操作会用到mongo\",{\"1\":{\"838\":1}}],[\"聚合\",{\"0\":{\"838\":1}}],[\"聚合函数计算结果偏差等问\",{\"1\":{\"794\":1}}],[\"聚合等操作时\",{\"1\":{\"719\":1}}],[\"产品信息\",{\"1\":{\"843\":1}}],[\"产品描述信息\",{\"1\":{\"718\":1}}],[\"产生了一系列的实时数据处理的流程\",{\"1\":{\"1019\":1}}],[\"产生的值\",{\"1\":{\"814\":1}}],[\"产生死锁\",{\"1\":{\"796\":1}}],[\"产生二义性\",{\"1\":{\"637\":1}}],[\"沟通协作能力\",{\"1\":{\"657\":1}}],[\"近年来\",{\"1\":{\"656\":1}}],[\"学会在linux使用帮助文档\",{\"1\":{\"1186\":1}}],[\"学会了如何设计分布式系统\",{\"1\":{\"655\":1}}],[\"学相伴出品\",{\"1\":{\"1166\":1}}],[\"学相伴\",{\"1\":{\"847\":2}}],[\"学生信息\",{\"1\":{\"843\":1}}],[\"学到了通过日志分析\",{\"1\":{\"655\":1}}],[\"学习docker最好是在多台linux系统\",{\"1\":{\"1217\":1}}],[\"学习能力和技术使用能力\",{\"1\":{\"657\":1}}],[\"学习成绩怎么样\",{\"1\":{\"606\":1,\"678\":1}}],[\"学习成本\",{\"1\":{\"117\":1,\"1309\":1}}],[\"学习成本高\",{\"1\":{\"115\":1}}],[\"学习成本低\",{\"1\":{\"113\":1}}],[\"学习曲线相对平缓\",{\"1\":{\"904\":1}}],[\"学习曲线\",{\"1\":{\"111\":1}}],[\"掌握了微服务架构\",{\"1\":{\"655\":1}}],[\"报警阈值合理\",{\"1\":{\"655\":1}}],[\"报错提示\",{\"1\":{\"825\":1}}],[\"报错了\",{\"1\":{\"502\":1}}],[\"报错如下\",{\"1\":{\"276\":1,\"419\":1}}],[\"责任链模式\",{\"1\":{\"654\":1}}],[\"状态正常\",{\"1\":{\"1010\":1}}],[\"状态\",{\"1\":{\"999\":1}}],[\"状态模式\",{\"1\":{\"654\":1}}],[\"状态字段\",{\"1\":{\"653\":1}}],[\"享元模式\",{\"1\":{\"654\":1}}],[\"装饰器模式\",{\"1\":{\"654\":1}}],[\"桥接模式\",{\"1\":{\"654\":1}}],[\"桥梁\",{\"0\":{\"348\":1}}],[\"爬到第n阶\",{\"1\":{\"654\":1}}],[\"题\",{\"1\":{\"794\":1}}],[\"题目要求找到一个集合的所有子集\",{\"1\":{\"653\":1}}],[\"题外话\",{\"1\":{\"505\":1}}],[\"冲突时会重试\",{\"1\":{\"653\":1}}],[\"冲突的键会以链表的形式存储\",{\"1\":{\"641\":1}}],[\"冲突的概念\",{\"1\":{\"36\":1}}],[\"冲突的处理\",{\"1\":{\"36\":1}}],[\"待鉴权的对象\",{\"1\":{\"1251\":1}}],[\"待定\",{\"1\":{\"700\":1,\"1014\":1,\"1058\":1,\"1210\":1}}],[\"待处理\",{\"1\":{\"653\":1}}],[\"待测试函数只有一行输出时\",{\"1\":{\"470\":1}}],[\"典型的消息队列有activemq\",{\"1\":{\"1051\":1}}],[\"典型的字段可能包括\",{\"1\":{\"653\":1}}],[\"典型的就是\",{\"1\":{\"12\":1}}],[\"惰性删除\",{\"1\":{\"651\":1}}],[\"混合云的部署模式\",{\"1\":{\"1072\":1}}],[\"混合模式\",{\"1\":{\"651\":1}}],[\"混用时idea工具也会提示\",{\"1\":{\"515\":1}}],[\"越来越多的性能测试报告也陆续出来\",{\"1\":{\"1038\":1}}],[\"越来越耗时间\",{\"1\":{\"792\":1}}],[\"越先执行\",{\"1\":{\"814\":1}}],[\"越利于搜索和存储数据\",{\"1\":{\"803\":1}}],[\"越界访问会导致运行时错误\",{\"1\":{\"654\":1}}],[\"越优的类型越有助于查询优化\",{\"1\":{\"651\":1}}],[\"越往后面\",{\"1\":{\"498\":1}}],[\"崩溃或错误的结果\",{\"1\":{\"649\":1}}],[\"认为该对象可以被回收\",{\"1\":{\"645\":1}}],[\"认证\",{\"1\":{\"644\":1}}],[\"插槽\",{\"0\":{\"1427\":1}}],[\"插⼊⽂档时\",{\"1\":{\"858\":1}}],[\"插件化框架\",{\"1\":{\"645\":1}}],[\"插入多条数据使用列表\",{\"1\":{\"858\":1}}],[\"插入单条数据使用字典\",{\"1\":{\"858\":1}}],[\"插入文章数据到article索引库中\",{\"1\":{\"746\":1}}],[\"插入\",{\"1\":{\"635\":1,\"794\":1}}],[\"插入填充字节实现空间换时间\",{\"1\":{\"554\":1}}],[\"插入元素\",{\"0\":{\"245\":1}}],[\"社交网络和内容管理\",{\"1\":{\"843\":1}}],[\"社交功能\",{\"1\":{\"644\":1}}],[\"社区里面有很多优秀的第三方模板引擎库\",{\"1\":{\"1414\":1}}],[\"社区\",{\"1\":{\"1072\":1}}],[\"社区比较活跃\",{\"1\":{\"1053\":1}}],[\"社区中有关于go错误处理的提案和讨论自从go诞生以来就从未停止过\",{\"1\":{\"388\":1}}],[\"社区关于go呼声最高的事情就是希望加入泛型\",{\"1\":{\"336\":1}}],[\"社区也非常活跃\",{\"1\":{\"166\":1}}],[\"社区活跃\",{\"1\":{\"113\":1}}],[\"社区活跃度一般\",{\"1\":{\"1054\":1}}],[\"社区活跃度\",{\"1\":{\"111\":1,\"1072\":1}}],[\"社区的开发人员\",{\"1\":{\"53\":1}}],[\"社区的很多人抱怨\",{\"1\":{\"12\":1}}],[\"社区的人不能开发具有相同功能的竞争产品\",{\"1\":{\"12\":1}}],[\"社区的弟兄们也对这种方式表达了强烈不满\",{\"1\":{\"12\":1}}],[\"吞吐量\",{\"1\":{\"644\":1}}],[\"磁盘io消耗更少\",{\"1\":{\"816\":1}}],[\"磁盘块读取\",{\"1\":{\"805\":1}}],[\"磁盘一般会顺序向后读取一定长度的数据\",{\"1\":{\"805\":1}}],[\"磁盘旋转\",{\"1\":{\"800\":1}}],[\"磁盘存取示意图\",{\"1\":{\"800\":1}}],[\"磁盘和网络使用情况\",{\"1\":{\"655\":1}}],[\"磁盘\",{\"1\":{\"645\":1,\"655\":1}}],[\"磁盘等资源的占用情况\",{\"1\":{\"644\":1}}],[\"磁盘满了写不进去\",{\"1\":{\"601\":1,\"673\":1}}],[\"浅拷贝\",{\"1\":{\"641\":1}}],[\"唯一标识网络接口配置\",{\"1\":{\"1219\":1}}],[\"唯一\",{\"1\":{\"809\":1}}],[\"唯一索引的值是1\",{\"1\":{\"815\":1}}],[\"唯一索引\",{\"1\":{\"809\":2}}],[\"唯一键以\",{\"1\":{\"795\":1}}],[\"唯一键场景下\",{\"1\":{\"576\":1,\"648\":1}}],[\"唯一性索引扫描\",{\"1\":{\"814\":1}}],[\"唯一性\",{\"1\":{\"789\":1}}],[\"唯一值多\",{\"1\":{\"651\":1}}],[\"唯一的\",{\"1\":{\"641\":1}}],[\"幻读是指事务在读取数据时\",{\"1\":{\"641\":1}}],[\"携带用户的身份信息\",{\"1\":{\"641\":1}}],[\"播放\",{\"1\":{\"641\":1}}],[\"支付记录等数据\",{\"1\":{\"843\":1}}],[\"支付系统等\",{\"1\":{\"639\":1}}],[\"支持的命令行参数格式有如下几种\",{\"1\":{\"1326\":1}}],[\"支持的客户端语言不多\",{\"1\":{\"1054\":1}}],[\"支持租户隔离\",{\"1\":{\"1241\":1}}],[\"支持yaml\",{\"1\":{\"1072\":1}}],[\"支持私有化部署\",{\"1\":{\"1072\":1}}],[\"支持持久化的超强消息队列\",{\"1\":{\"1067\":1}}],[\"支持持久化日志\",{\"1\":{\"1018\":1}}],[\"支持10亿级别的消息堆积\",{\"1\":{\"1054\":1}}],[\"支持集群\",{\"1\":{\"1052\":1}}],[\"支持水平可伸缩性\",{\"1\":{\"1018\":1}}],[\"支持不同的数据类型\",{\"1\":{\"1018\":1}}],[\"支持online和offline的场景\",{\"1\":{\"1017\":1}}],[\"支持高throughput的应用\",{\"1\":{\"1017\":1}}],[\"支持高吞吐量的日志存储和消息传递\",{\"1\":{\"634\":1}}],[\"支持网络\",{\"1\":{\"908\":1}}],[\"支持复杂查询\",{\"1\":{\"905\":1}}],[\"支持复杂的路由和消息确认\",{\"1\":{\"637\":1}}],[\"支持复杂的路由规则\",{\"1\":{\"634\":1}}],[\"支持原子性\",{\"1\":{\"904\":1}}],[\"支持连接所有流行的数据库系统\",{\"1\":{\"876\":1}}],[\"支持从mongodb\",{\"1\":{\"875\":1}}],[\"支持实时数据流和批处理数据分析\",{\"1\":{\"843\":1}}],[\"支持传入键值结构\",{\"1\":{\"748\":1}}],[\"支持传入一个列表作为参数\",{\"1\":{\"498\":1}}],[\"支持ipv4和ipv6\",{\"1\":{\"724\":1}}],[\"支持按分数进行排序\",{\"1\":{\"651\":1}}],[\"支持反射的语言\",{\"1\":{\"645\":1}}],[\"支持快进\",{\"1\":{\"644\":1}}],[\"支持折叠和展开\",{\"1\":{\"638\":1}}],[\"支持双向流\",{\"1\":{\"637\":1}}],[\"支持类的继承\",{\"1\":{\"637\":1}}],[\"支持将多个消息打包成一个批量发送\",{\"1\":{\"636\":1}}],[\"支持多语言客户端\",{\"1\":{\"1017\":1}}],[\"支持多种访问控制模型\",{\"1\":{\"1239\":1}}],[\"支持多种语言\",{\"1\":{\"1053\":1}}],[\"支持多种消息队列协议\",{\"1\":{\"1053\":1}}],[\"支持多种数据类型\",{\"1\":{\"906\":1}}],[\"支持多种编程语言\",{\"1\":{\"637\":1}}],[\"支持多个地址\",{\"1\":{\"744\":1}}],[\"支持多态\",{\"1\":{\"635\":1}}],[\"支持多行写\",{\"1\":{\"510\":1}}],[\"支持多行书写\",{\"1\":{\"252\":1}}],[\"支持结构体的比较\",{\"1\":{\"635\":1}}],[\"支持结构体的嵌套\",{\"1\":{\"635\":1}}],[\"支持消息的路由\",{\"1\":{\"634\":1}}],[\"支持转义\",{\"1\":{\"252\":1,\"510\":1}}],[\"支持包括\",{\"1\":{\"153\":1}}],[\"支持84种语言和24种脚本\",{\"1\":{\"144\":1}}],[\"支持标记化\",{\"1\":{\"144\":1}}],[\"支持lsa\",{\"1\":{\"144\":1}}],[\"支持英语\",{\"1\":{\"144\":1}}],[\"支持windows\",{\"1\":{\"138\":1,\"875\":1}}],[\"支持golang的读写锁的trylock\",{\"1\":{\"137\":1}}],[\"支持使用http\",{\"1\":{\"132\":1}}],[\"支持在retro中编写脚本\",{\"1\":{\"130\":1}}],[\"支持服务发现\",{\"1\":{\"128\":1}}],[\"支持flac流的native\",{\"1\":{\"126\":1}}],[\"支持\",{\"1\":{\"111\":4,\"138\":2,\"146\":1,\"165\":1,\"775\":1,\"1006\":1,\"1056\":1}}],[\"支持离线提交代码\",{\"1\":{\"12\":1}}],[\"理清这些概念的关系\",{\"1\":{\"1020\":1}}],[\"理论\",{\"0\":{\"1179\":1}}],[\"理论应该用到哪些索引\",{\"1\":{\"814\":1}}],[\"理论上\",{\"1\":{\"639\":1}}],[\"理解的时候要根据代码来思考\",{\"1\":{\"289\":1}}],[\"老板需要重新在招聘一个员工一样的道理\",{\"1\":{\"1127\":1}}],[\"老年代存储长时间存活的对象\",{\"1\":{\"638\":1}}],[\"老年代使用\",{\"1\":{\"638\":1}}],[\"老年代\",{\"1\":{\"638\":1}}],[\"老版本的项目升级到新版本大概率没法正常运行\",{\"1\":{\"455\":1}}],[\"年龄\",{\"1\":{\"1325\":2,\"1328\":2}}],[\"年\",{\"1\":{\"1108\":1,\"1307\":1}}],[\"年轻代使用\",{\"1\":{\"638\":1}}],[\"年轻代\",{\"1\":{\"638\":1}}],[\"年金\",{\"1\":{\"133\":1}}],[\"垃圾收集机制基于\",{\"1\":{\"638\":1}}],[\"垃圾回收器通过\",{\"1\":{\"645\":1}}],[\"垃圾回收的过程\",{\"1\":{\"588\":1,\"660\":1}}],[\"垃圾回收机制是怎么样的\",{\"1\":{\"547\":1}}],[\"垃圾回收\",{\"1\":{\"537\":1}}],[\"熟悉linux的应该都知道管道运算符|\",{\"1\":{\"1421\":1}}],[\"熟悉常见的技术栈\",{\"1\":{\"656\":1}}],[\"熟悉其并发编程模型\",{\"1\":{\"638\":1}}],[\"熟悉到什么程度\",{\"1\":{\"580\":1,\"652\":1}}],[\"瓶颈\",{\"1\":{\"638\":1}}],[\"瓶颈在哪个地方\",{\"1\":{\"567\":1,\"639\":2}}],[\"补充说明预防\",{\"1\":{\"901\":1}}],[\"补偿机制\",{\"1\":{\"638\":1,\"641\":1,\"644\":1}}],[\"补丁版本是1\",{\"1\":{\"455\":1}}],[\"涉及的表\",{\"1\":{\"651\":1}}],[\"涉及的系统调用和调度开销较大\",{\"1\":{\"649\":1}}],[\"涉及的领域包括微服务架构\",{\"1\":{\"638\":1}}],[\"涉及大量的磁盘操作或网络操作\",{\"1\":{\"645\":1}}],[\"涉及大量的计算操作\",{\"1\":{\"645\":1}}],[\"涉及到的操作并不复杂\",{\"1\":{\"440\":1}}],[\"副本数\",{\"1\":{\"1034\":1}}],[\"副本的作用是做备胎\",{\"1\":{\"1020\":1}}],[\"副本节点会接管其任务\",{\"1\":{\"1007\":1}}],[\"副本节点会被提升为主节点\",{\"1\":{\"1006\":1}}],[\"副本节点是主节点的复制品\",{\"1\":{\"1007\":1}}],[\"副本节点\",{\"1\":{\"1006\":2,\"1007\":1}}],[\"副本\",{\"1\":{\"637\":1}}],[\"集成\",{\"1\":{\"1204\":2,\"1205\":1}}],[\"集成和整合ik\",{\"0\":{\"740\":1}}],[\"集请保持在1000行以内\",{\"1\":{\"796\":1}}],[\"集群初始化\",{\"1\":{\"1235\":1}}],[\"集群部署一个pod网络\",{\"1\":{\"1228\":1}}],[\"集群就需要大量的通信\",{\"1\":{\"1165\":1}}],[\"集群就搭建好了\",{\"1\":{\"1003\":1}}],[\"集群是由若干个\",{\"1\":{\"1006\":1}}],[\"集群的哈希槽是数据分布的基础\",{\"1\":{\"1007\":1}}],[\"集群的客户端通常会根据键的哈希值来判断请求应发送到哪个节点\",{\"1\":{\"1006\":1}}],[\"集群的正常运行\",{\"1\":{\"1006\":1}}],[\"集群会自动将其副本提升为主节点\",{\"1\":{\"1006\":1}}],[\"集群会自动将副本提升为新的主节点\",{\"1\":{\"1006\":1}}],[\"集群没有单点故障的中心节点\",{\"1\":{\"1006\":1}}],[\"集群支持每个主节点有多个副本\",{\"1\":{\"1006\":1}}],[\"集群采用\",{\"1\":{\"1006\":1}}],[\"集群版本配置sentinel哨兵\",{\"0\":{\"1004\":1}}],[\"集群节点的超时时限\",{\"1\":{\"1010\":1}}],[\"集群节点信息文件\",{\"1\":{\"1010\":1}}],[\"集群节点\",{\"1\":{\"1002\":1}}],[\"集群时\",{\"1\":{\"999\":1}}],[\"集群名称为my\",{\"1\":{\"769\":1}}],[\"集群名称不变\",{\"1\":{\"769\":1}}],[\"集群名称\",{\"1\":{\"768\":1,\"769\":1,\"770\":1}}],[\"集群包的准备\",{\"1\":{\"767\":1}}],[\"集群模式\",{\"1\":{\"641\":1}}],[\"集群\",{\"1\":{\"637\":1,\"1205\":1}}],[\"集合移动到\",{\"1\":{\"973\":1}}],[\"集合set\",{\"0\":{\"973\":1}}],[\"集合操作\",{\"0\":{\"941\":1}}],[\"集合名称\",{\"1\":{\"858\":1,\"859\":1,\"860\":1}}],[\"集合删除\",{\"1\":{\"857\":1}}],[\"集合重命名\",{\"1\":{\"857\":1}}],[\"集合不存在则创建\",{\"1\":{\"857\":1}}],[\"集合中\",{\"1\":{\"973\":1}}],[\"集合中数据压缩存储的大小\",{\"1\":{\"855\":1}}],[\"集合中索引+数据压缩存储之后的大小\",{\"1\":{\"855\":1}}],[\"集合中的文档可以根据需要进行添加\",{\"1\":{\"841\":1,\"887\":1}}],[\"集合存在于数据库中\",{\"1\":{\"846\":1}}],[\"集合就是\",{\"1\":{\"846\":1}}],[\"集合框架包括\",{\"1\":{\"638\":1}}],[\"集合\",{\"0\":{\"846\":1,\"938\":1},\"1\":{\"127\":1,\"641\":1,\"848\":1,\"973\":1}}],[\"懒汉模式\",{\"1\":{\"637\":1}}],[\"饿汉模式\",{\"1\":{\"637\":1}}],[\"饿了么\",{\"0\":{\"589\":1,\"661\":1}}],[\"梅森旋转算法\",{\"1\":{\"637\":1}}],[\"种子不同\",{\"1\":{\"637\":1}}],[\"种类型的函数\",{\"1\":{\"483\":1}}],[\"伪随机包\",{\"1\":{\"1308\":1}}],[\"伪随机数的生成通常依赖于初始种子\",{\"1\":{\"637\":1}}],[\"伪随机是指由算法生成的随机数\",{\"1\":{\"637\":1}}],[\"伪版本号则可以细化到指定某一个commit\",{\"1\":{\"459\":1}}],[\"伪版本\",{\"1\":{\"459\":1}}],[\"造成数据库压力过大\",{\"1\":{\"636\":1}}],[\"批量修改信息\",{\"1\":{\"1228\":1}}],[\"批量删除\",{\"1\":{\"1187\":1}}],[\"批量访问\",{\"1\":{\"927\":1}}],[\"批量设置\",{\"1\":{\"927\":1}}],[\"批量存取\",{\"0\":{\"924\":1}}],[\"批量更新\",{\"1\":{\"884\":1}}],[\"批量添加\",{\"1\":{\"881\":1}}],[\"批量保存\",{\"0\":{\"881\":1},\"1\":{\"884\":1}}],[\"批量插入数据\",{\"1\":{\"858\":1}}],[\"批量操作数据时\",{\"1\":{\"796\":1}}],[\"批量处理\",{\"1\":{\"636\":1}}],[\"批量声明常量可以用\",{\"1\":{\"211\":1}}],[\"粘包指的是在\",{\"1\":{\"636\":1}}],[\"窗口的大小可以动态调整\",{\"1\":{\"636\":1}}],[\"丢失数量不确定\",{\"1\":{\"987\":1}}],[\"丢失的数据越多\",{\"1\":{\"987\":1}}],[\"丢失的数据包会通过重传机制重新发送\",{\"1\":{\"636\":1}}],[\"丢弃任务等\",{\"1\":{\"645\":1}}],[\"丢包后\",{\"1\":{\"636\":1}}],[\"初始值\",{\"1\":{\"1341\":1}}],[\"初始下载只有curl没有wget工具\",{\"1\":{\"1220\":1}}],[\"初始从最新的offset开始\",{\"1\":{\"1047\":1}}],[\"初始容量为\",{\"1\":{\"638\":1}}],[\"初始时发送速度较慢\",{\"1\":{\"636\":1}}],[\"初始化项目\",{\"0\":{\"1243\":1}}],[\"初始化成功后根据提升执行命令\",{\"1\":{\"1225\":1}}],[\"初始化主节点\",{\"0\":{\"1225\":1}}],[\"初始化kong的数据库\",{\"1\":{\"1078\":1}}],[\"初始化数据\",{\"0\":{\"1076\":1}}],[\"初始化mongodb\",{\"1\":{\"884\":1}}],[\"初始化为零值\",{\"1\":{\"654\":1}}],[\"初始化了一个固定线程数的线程池\",{\"1\":{\"593\":1,\"665\":1}}],[\"初始化底层数据结构\",{\"1\":{\"533\":1}}],[\"初始化方式和使用的问题\",{\"1\":{\"527\":1}}],[\"初始化一个新的工作区\",{\"1\":{\"464\":1}}],[\"初始化一个map有两种方法\",{\"1\":{\"259\":1}}],[\"初始化操作只执行了一次\",{\"1\":{\"434\":1}}],[\"初始化animal类型的变量\",{\"1\":{\"287\":1}}],[\"初始化的时候就像map一样指定字段名称再初始化字段值\",{\"1\":{\"268\":1}}],[\"初始化本地仓库\",{\"1\":{\"55\":1}}],[\"初始化仓库不带工作区\",{\"1\":{\"55\":1}}],[\"初始化仓库带工作区\",{\"1\":{\"55\":1}}],[\"初始化仓库\",{\"0\":{\"18\":1}}],[\"初始化\",{\"0\":{\"14\":1,\"211\":1,\"239\":1,\"243\":1,\"259\":1,\"292\":1},\"1\":{\"434\":2,\"511\":1,\"512\":1,\"514\":1}}],[\"活跃的\",{\"1\":{\"635\":1}}],[\"活动\",{\"1\":{\"138\":1}}],[\"活动1\",{\"1\":{\"30\":2}}],[\"根对象\",{\"1\":{\"1422\":1}}],[\"根对象就是传入的data\",{\"1\":{\"1417\":1}}],[\"根对象是垃圾回收的起始点\",{\"1\":{\"635\":1}}],[\"根节点\",{\"1\":{\"1285\":1}}],[\"根根据文档id更新内容\",{\"1\":{\"748\":1}}],[\"根据传入对应语言的unicode\",{\"1\":{\"1409\":1}}],[\"根据传入的对应语言的unicode\",{\"1\":{\"1409\":1}}],[\"根据子串sep将字符串s分隔成包含sep的字符串元素组成的字符串切片\",{\"1\":{\"1408\":2}}],[\"根据子串sep将字符串s分隔成一个字符串切片\",{\"1\":{\"1408\":2}}],[\"根据给定的count复制字符串\",{\"1\":{\"1406\":1}}],[\"根据编码时间戳的最新文件将被保留\",{\"1\":{\"1307\":1}}],[\"根据url来对路由树进行匹配\",{\"1\":{\"1287\":1}}],[\"根据http方法选择不同的路由树\",{\"1\":{\"1287\":1}}],[\"根据官方要需要配置系统\",{\"1\":{\"1222\":1}}],[\"根据需要进行扩展即可\",{\"1\":{\"1272\":1}}],[\"根据需要动态调整\",{\"1\":{\"542\":1}}],[\"根据需求只要安装最小版本即可\",{\"1\":{\"1218\":1}}],[\"根据客户端携带的参数进⾏映\",{\"1\":{\"1165\":1}}],[\"根据客户端请求的uri映射\",{\"1\":{\"1165\":1}}],[\"根据服务器级别限流\",{\"1\":{\"1158\":1}}],[\"根据服务器的信息生成一个ca证书以及私钥\",{\"1\":{\"84\":1}}],[\"根据配置的路由规则将生产者发出的消息分发到不同的队\",{\"1\":{\"1053\":1}}],[\"根据sha值执行脚本\",{\"1\":{\"952\":1}}],[\"根据条件删除\",{\"1\":{\"884\":1}}],[\"根据条件更新文档\",{\"0\":{\"749\":1},\"1\":{\"749\":1}}],[\"根据表统计信息及索引选用情况\",{\"1\":{\"814\":1}}],[\"根据业务场景进行优化调整\",{\"1\":{\"788\":1}}],[\"根据词法分析的结果\",{\"1\":{\"778\":1}}],[\"根据created字段升序排序\",{\"1\":{\"756\":1,\"757\":1,\"758\":1,\"763\":1}}],[\"根据指定条件删除\",{\"0\":{\"752\":1}}],[\"根据ip地址限制速度\",{\"1\":{\"1158\":1}}],[\"根据ip获取地理位置信息\",{\"1\":{\"122\":1}}],[\"根据id查询数据\",{\"1\":{\"884\":1}}],[\"根据id查询文档\",{\"0\":{\"754\":1},\"1\":{\"754\":3}}],[\"根据id更新\",{\"1\":{\"884\":1}}],[\"根据id修改数据\",{\"1\":{\"882\":1}}],[\"根据id范围进行分页查询\",{\"1\":{\"820\":1}}],[\"根据id删除\",{\"1\":{\"884\":1}}],[\"根据id删除数据\",{\"1\":{\"751\":2,\"883\":2}}],[\"根据id删除一条数据\",{\"0\":{\"751\":1},\"1\":{\"751\":1}}],[\"根据文档id更新内容\",{\"0\":{\"748\":1},\"1\":{\"748\":1,\"749\":1}}],[\"根据文档将环境搭建成功\",{\"1\":{\"58\":1}}],[\"根据系统的处理能力和任务的大小来决定\",{\"1\":{\"645\":1}}],[\"根据系统的\",{\"1\":{\"645\":1}}],[\"根据并发量\",{\"1\":{\"645\":1}}],[\"根据索引中的主键值\",{\"1\":{\"614\":1,\"686\":1}}],[\"根据机器字长\",{\"1\":{\"554\":1}}],[\"根据对齐规则可知道每一种数据结构的最大对齐系数\",{\"1\":{\"513\":1}}],[\"根据测试的结果看来\",{\"1\":{\"475\":1}}],[\"根据依赖压缩包所计算出的哈希值\",{\"1\":{\"460\":1}}],[\"根据go版本的不同\",{\"1\":{\"459\":1}}],[\"根据最小可用版本原则\",{\"1\":{\"458\":1}}],[\"根据一个key读取值\",{\"1\":{\"436\":1}}],[\"根据直觉来讲\",{\"1\":{\"429\":1}}],[\"根据实际机器字长判断\",{\"1\":{\"554\":1}}],[\"根据实际情况判断输出\",{\"1\":{\"221\":1}}],[\"根据实现的定义\",{\"1\":{\"294\":1}}],[\"根据规范提供具体的功能\",{\"1\":{\"293\":1}}],[\"根据自家公司的独门技术造出了绝世起重机并交给了建筑公司\",{\"1\":{\"293\":1}}],[\"根据内存对齐规则而言\",{\"1\":{\"273\":1}}],[\"根据格式化的字符串扫描\",{\"1\":{\"224\":1}}],[\"根据空格分隔\",{\"1\":{\"224\":1}}],[\"根据序号值的变化会自动的赋值给后续的常量\",{\"1\":{\"212\":1}}],[\"根据json\",{\"1\":{\"141\":1}}],[\"根据定义好的模板开始用对应的模板语法进行碰撞和渲染\",{\"1\":{\"110\":1}}],[\"连续访问3次\",{\"1\":{\"1103\":1}}],[\"连续的内存块\",{\"1\":{\"635\":1}}],[\"连接才被计数\",{\"1\":{\"1152\":1}}],[\"连接到主服务器\",{\"1\":{\"993\":1}}],[\"连接到数据库\",{\"0\":{\"891\":1}}],[\"连接主节点的密码\",{\"1\":{\"993\":1}}],[\"连接池最多等待这个拿出去的连接多长时间\",{\"1\":{\"911\":1}}],[\"连接配置\",{\"0\":{\"911\":1}}],[\"连接数\",{\"1\":{\"1057\":1}}],[\"连接数据库\",{\"0\":{\"867\":1}}],[\"连接数限制\",{\"1\":{\"639\":1}}],[\"连接消耗过多等问题\",{\"1\":{\"796\":1}}],[\"连接完成后\",{\"1\":{\"776\":1}}],[\"连接命令中的\",{\"1\":{\"776\":1}}],[\"连接器就会自动将它断开\",{\"1\":{\"776\":1}}],[\"连接器就要开始认证你的身份\",{\"1\":{\"776\":1}}],[\"连接器负责跟客户端建立连接\",{\"1\":{\"776\":1}}],[\"连接器\",{\"0\":{\"776\":1}}],[\"连接宿主机的ip\",{\"1\":{\"775\":1}}],[\"连接es\",{\"1\":{\"756\":1}}],[\"连接成功后会同步一次数据\",{\"1\":{\"990\":1}}],[\"连接成功\",{\"1\":{\"744\":1,\"756\":1}}],[\"连接失败\",{\"1\":{\"744\":1,\"756\":1}}],[\"连接类型\",{\"1\":{\"651\":1}}],[\"连接建立\",{\"1\":{\"651\":1}}],[\"连接建立完成\",{\"1\":{\"641\":1}}],[\"连接的断开可以由客户端或服务端发起\",{\"1\":{\"641\":1}}],[\"连接关闭\",{\"1\":{\"641\":1,\"651\":1}}],[\"连接\",{\"0\":{\"702\":1,\"830\":1},\"1\":{\"638\":1,\"1198\":1}}],[\"连接和发送\",{\"1\":{\"129\":1}}],[\"连接概述\",{\"0\":{\"49\":1}}],[\"吗\",{\"1\":{\"635\":1,\"637\":1,\"655\":1}}],[\"卡在循环\",{\"1\":{\"634\":1}}],[\"卡住的\",{\"1\":{\"634\":1}}],[\"桶\",{\"1\":{\"1155\":2,\"1156\":1}}],[\"桶内的数据以链表的形式存储\",{\"1\":{\"634\":1}}],[\"桶的高度就是桶的容量\",{\"1\":{\"243\":1}}],[\"签名\",{\"1\":{\"634\":2,\"641\":1,\"1367\":1,\"1368\":1}}],[\"签名如下\",{\"1\":{\"379\":1,\"434\":1,\"1370\":1,\"1371\":1,\"1372\":1}}],[\"载荷\",{\"1\":{\"634\":2,\"641\":1}}],[\"头部\",{\"1\":{\"634\":2,\"641\":1}}],[\"邮件\",{\"1\":{\"644\":1}}],[\"邮件发送组件\",{\"1\":{\"634\":1}}],[\"邮箱是否正确\",{\"1\":{\"1288\":1}}],[\"邮箱\",{\"1\":{\"603\":1,\"675\":1}}],[\"邮箱验证码功能怎么实现的\",{\"1\":{\"562\":1,\"634\":2}}],[\"片段\",{\"1\":{\"634\":1}}],[\"逐渐正在被新的标记语言替代\",{\"1\":{\"1310\":1}}],[\"逐渐成为现代云计算\",{\"1\":{\"170\":1}}],[\"逐条记录写入操作到日志文件\",{\"1\":{\"651\":1}}],[\"逐步排除无效区域\",{\"1\":{\"638\":1}}],[\"逐个检查括号的匹配情况\",{\"1\":{\"638\":1}}],[\"逐行读取文件\",{\"1\":{\"633\":1}}],[\"旧的切片如果不再使用\",{\"1\":{\"633\":1}}],[\"逃逸到堆\",{\"1\":{\"633\":1}}],[\"逃逸分析是\",{\"1\":{\"635\":1}}],[\"逃逸分析便是要分析程序中的内存分配情况\",{\"1\":{\"316\":1}}],[\"逃逸分析\",{\"0\":{\"316\":1}}],[\"防止因高并发造成数据库瘫痪\",{\"1\":{\"790\":1}}],[\"防止锁被提前释放\",{\"1\":{\"653\":1}}],[\"防止竞态条件\",{\"1\":{\"651\":1}}],[\"防止内存问题导致数据丢失\",{\"1\":{\"644\":1}}],[\"防止中间人攻击\",{\"1\":{\"641\":1}}],[\"防止由于延迟的\",{\"1\":{\"641\":1}}],[\"防止多个请求同时访问数据库\",{\"1\":{\"639\":1}}],[\"防止多人抢单可以通过\",{\"1\":{\"638\":1}}],[\"防止协程数量过多导致系统资源\",{\"1\":{\"633\":1}}],[\"防止账号丢失已有确认机制\",{\"1\":{\"576\":1,\"648\":1}}],[\"压缩算法实现的包\",{\"1\":{\"1308\":1}}],[\"压缩旋转的日志文件\",{\"1\":{\"1307\":1}}],[\"压缩等处理\",{\"1\":{\"644\":1}}],[\"压力测试\",{\"1\":{\"655\":1}}],[\"压力和内存分配\",{\"1\":{\"629\":1}}],[\"压测数据通常会包含以下几项\",{\"1\":{\"644\":1}}],[\"压测后\",{\"1\":{\"639\":1}}],[\"压测后qps提升了3倍\",{\"1\":{\"567\":1,\"639\":2}}],[\"压测是怎么设计的\",{\"1\":{\"597\":1,\"669\":1}}],[\"得到按照时间排序的前10条里面含有左连接的查询语句\",{\"1\":{\"813\":1}}],[\"得到访问次数最多的10个sql\",{\"1\":{\"813\":1}}],[\"得到返回记录集最多的10个sql\",{\"1\":{\"813\":1}}],[\"得物面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"得益于go的编译速度\",{\"1\":{\"454\":1}}],[\"得益于此\",{\"1\":{\"311\":1,\"1365\":1}}],[\"得益于其良好的并发支持和高性能\",{\"1\":{\"162\":1}}],[\"贝壳外包面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"贝叶斯文本分类器\",{\"1\":{\"142\":1}}],[\"贝叶斯推断\",{\"1\":{\"142\":1}}],[\"贝叶斯分类为golang天真\",{\"1\":{\"142\":1}}],[\"答不出来\",{\"1\":{\"625\":1,\"697\":1}}],[\"答案\",{\"0\":{\"632\":1}}],[\"答案如下\",{\"1\":{\"285\":1}}],[\"答案是\",{\"1\":{\"208\":1}}],[\"长期吞吐量的上限是由rate决定的\",{\"1\":{\"1156\":1}}],[\"长期使用建议购买序列号\",{\"1\":{\"876\":1}}],[\"长沙\",{\"1\":{\"884\":1}}],[\"长连接是指连接成功后\",{\"1\":{\"776\":1}}],[\"长连接做成短连接\",{\"1\":{\"625\":1,\"697\":1}}],[\"长队列有助于平滑流量\",{\"1\":{\"645\":1}}],[\"长度方法\",{\"1\":{\"1375\":1}}],[\"长度字段\",{\"1\":{\"636\":1}}],[\"长度和容量\",{\"1\":{\"635\":1}}],[\"长度固定\",{\"1\":{\"635\":1}}],[\"长度范围内的元素完全相等\",{\"1\":{\"379\":1}}],[\"长度未知\",{\"0\":{\"320\":1}}],[\"长度为4\",{\"1\":{\"654\":1}}],[\"长度为10\",{\"1\":{\"277\":1}}],[\"长度为5的整型数组\",{\"1\":{\"201\":1}}],[\"长度与容量\",{\"1\":{\"243\":1}}],[\"长度\",{\"0\":{\"255\":1},\"1\":{\"243\":1,\"554\":1,\"649\":1,\"810\":1}}],[\"长度必须为一个常量表达式\",{\"1\":{\"239\":1}}],[\"长度被指定后就不能被改变\",{\"1\":{\"237\":1}}],[\"减低topic压力\",{\"1\":{\"1062\":1}}],[\"减轻数据库请求压力\",{\"1\":{\"625\":1,\"697\":1}}],[\"减少处理时间\",{\"1\":{\"1052\":1}}],[\"减少磁盘io操作\",{\"1\":{\"817\":1}}],[\"减少磁盘io的次数就必须要压缩树的高度\",{\"1\":{\"802\":1}}],[\"减少i\",{\"1\":{\"805\":1}}],[\"减少与磁盘的交互\",{\"1\":{\"805\":1}}],[\"减少使用order\",{\"1\":{\"796\":1}}],[\"减少上下文切换和内存开销\",{\"1\":{\"645\":1}}],[\"减少锁竞争\",{\"1\":{\"639\":1}}],[\"减少锁的争用提高并发\",{\"1\":{\"558\":1}}],[\"减少协程创建和销毁的开销\",{\"1\":{\"633\":1}}],[\"减少程序运行时间\",{\"1\":{\"554\":1}}],[\"减少内存的浪费\",{\"1\":{\"513\":1}}],[\"减少内存的分配与释放频率\",{\"1\":{\"435\":1}}],[\"减少外部依赖\",{\"1\":{\"164\":1}}],[\"减少了依赖冲突的风险\",{\"1\":{\"1181\":1}}],[\"减少了操作系统调度的开销\",{\"1\":{\"649\":1}}],[\"减少了网络和磁盘的负载\",{\"1\":{\"636\":1}}],[\"减少了8个字节的内存浪费\",{\"1\":{\"273\":1}}],[\"减少了程序员手动管理内存的负担\",{\"1\":{\"164\":1}}],[\"减少了传统编程语言中许多复杂的特性\",{\"1\":{\"164\":1}}],[\"睡不着想起来还可以做mysql的乐观锁\",{\"1\":{\"625\":1,\"697\":1}}],[\"校验出现错误\",{\"1\":{\"1163\":1}}],[\"校验和\",{\"1\":{\"636\":1}}],[\"校验和流量控制\",{\"1\":{\"636\":1}}],[\"校验token\",{\"1\":{\"625\":1,\"697\":1}}],[\"校招\",{\"0\":{\"563\":1,\"564\":1,\"565\":1,\"635\":1,\"636\":1,\"637\":1}}],[\"栏目\",{\"1\":{\"625\":1,\"697\":1}}],[\"乱说一通\",{\"1\":{\"624\":1,\"696\":1}}],[\"抽奖逻辑是怎么样的\",{\"1\":{\"624\":1,\"696\":1}}],[\"抽象工厂模式\",{\"1\":{\"654\":1}}],[\"抽象封装\",{\"1\":{\"565\":1,\"637\":2}}],[\"抽象语法树\",{\"1\":{\"124\":2}}],[\"偏移量的回退或系统重启\",{\"1\":{\"634\":1}}],[\"偏移量\",{\"1\":{\"622\":1,\"634\":1,\"694\":1}}],[\"虚拟接口跟一个正常的以太网卡相比并没有区别\",{\"1\":{\"1195\":1}}],[\"虚拟接口的优势就是转发效率极高\",{\"1\":{\"1195\":1}}],[\"虚拟接口\",{\"1\":{\"1195\":1}}],[\"虚拟出多个虚拟节点\",{\"1\":{\"1165\":1}}],[\"虚拟节点\",{\"1\":{\"1165\":2}}],[\"虚拟内存文件路径\",{\"1\":{\"965\":1}}],[\"虚拟机或者服务器\",{\"1\":{\"1009\":1}}],[\"虚拟机搭建对机器配置有要求\",{\"1\":{\"822\":1}}],[\"虚拟机和docker区别\",{\"1\":{\"621\":1,\"693\":1}}],[\"虚线代表着略过了一些调用链\",{\"1\":{\"327\":1}}],[\"何时分配在堆上\",{\"1\":{\"621\":1,\"693\":1}}],[\"零窗口报文\",{\"1\":{\"618\":1,\"690\":1}}],[\"零值或未初始化的map可以访问\",{\"1\":{\"259\":1}}],[\"零值并不仅仅只是字面上的数字零\",{\"1\":{\"202\":1}}],[\"零值\",{\"0\":{\"202\":1},\"1\":{\"202\":1}}],[\"滑动窗口最大值\",{\"1\":{\"645\":1}}],[\"滑动窗口机制主要用于流量控制\",{\"1\":{\"636\":1}}],[\"滑动窗口控制发送和接收速速率\",{\"1\":{\"620\":1,\"692\":1}}],[\"滑动窗口\",{\"1\":{\"618\":1,\"690\":1}}],[\"滑动窗口的作用\",{\"1\":{\"564\":1,\"636\":2}}],[\"悲观锁\",{\"1\":{\"644\":1,\"653\":1,\"656\":1}}],[\"悲观锁适用于什么情况\",{\"1\":{\"618\":1,\"690\":1}}],[\"悲观锁和乐观锁是怎么样子的\",{\"1\":{\"590\":1,\"662\":1}}],[\"今天第二次问到\",{\"1\":{\"618\":1,\"690\":1}}],[\"今天天气不错\",{\"1\":{\"186\":1}}],[\"做架构做到最后\",{\"1\":{\"1068\":1}}],[\"做备份\",{\"1\":{\"1064\":1}}],[\"做到读写分离\",{\"1\":{\"991\":1}}],[\"做什么\",{\"0\":{\"778\":1}}],[\"做消息队列\",{\"1\":{\"636\":1}}],[\"做了哪些功能\",{\"1\":{\"625\":1,\"697\":1}}],[\"做索引优化\",{\"1\":{\"614\":1,\"686\":1}}],[\"做的这两个项目里面比较大的收获是什么\",{\"1\":{\"607\":1,\"679\":1}}],[\"酷狗音乐\",{\"0\":{\"612\":1,\"684\":1}}],[\"机io操作\",{\"1\":{\"794\":1}}],[\"机器\",{\"1\":{\"654\":1}}],[\"机器线程\",{\"1\":{\"635\":1}}],[\"机器学习\",{\"0\":{\"142\":1},\"1\":{\"120\":1}}],[\"机制默认处于未开启状态\",{\"1\":{\"986\":1}}],[\"机制实现了数据段分离\",{\"1\":{\"980\":1}}],[\"机制\",{\"1\":{\"611\":1,\"644\":1,\"683\":1}}],[\"平方根\",{\"0\":{\"1359\":1}}],[\"平均耗时\",{\"0\":{\"1042\":1,\"1043\":1,\"1045\":1,\"1046\":1}}],[\"平均查询时间\",{\"1\":{\"813\":1}}],[\"平均访问记录数\",{\"1\":{\"813\":1}}],[\"平均锁定时间\",{\"1\":{\"813\":1}}],[\"平衡查询树\",{\"1\":{\"803\":1}}],[\"平衡范式与冗余\",{\"0\":{\"789\":1}}],[\"平衡业务主键和逻辑删除的问题\",{\"1\":{\"610\":1,\"682\":1}}],[\"平时我们安装进虚拟机的centos都是好几个g\",{\"1\":{\"1192\":1}}],[\"平时不会出现\",{\"1\":{\"814\":1}}],[\"平时如何提升和学习\",{\"1\":{\"613\":1,\"685\":1}}],[\"平时mysql优化的案例\",{\"1\":{\"600\":1,\"672\":1}}],[\"平时做项目或科研会遇到什么困难\",{\"1\":{\"590\":1,\"662\":1}}],[\"平时在编写代码的时候也可以稍微注意一下\",{\"1\":{\"188\":1}}],[\"行\",{\"1\":{\"848\":1}}],[\"行为型模式\",{\"1\":{\"654\":1}}],[\"行数\",{\"1\":{\"645\":1}}],[\"行业或者技术方向会有考虑吗\",{\"1\":{\"607\":1,\"679\":1}}],[\"行和堆栈\",{\"1\":{\"131\":1}}],[\"哪一部分占比较高\",{\"1\":{\"610\":1,\"682\":1}}],[\"哪个项目是自己承担的更多\",{\"1\":{\"607\":1,\"679\":1}}],[\"哪些panic不会捕获\",{\"1\":{\"563\":1,\"635\":2}}],[\"位数\",{\"1\":{\"1389\":1,\"1391\":1,\"1392\":1}}],[\"位于bson\",{\"1\":{\"831\":1}}],[\"位于哪层\",{\"1\":{\"603\":1,\"675\":1}}],[\"位置\",{\"1\":{\"746\":1}}],[\"位运算操作包\",{\"1\":{\"1308\":1}}],[\"位运算\",{\"1\":{\"653\":1}}],[\"位整型\",{\"1\":{\"197\":8}}],[\"家庭地址\",{\"1\":{\"603\":1,\"675\":1}}],[\"京东一面\",{\"0\":{\"608\":1,\"680\":1}}],[\"京东\",{\"0\":{\"602\":1,\"605\":1,\"674\":1,\"677\":1},\"1\":{\"1107\":1}}],[\"找出文件夹中最大的几个文件\",{\"1\":{\"601\":1,\"673\":1}}],[\"找到就返回\",{\"1\":{\"1143\":1}}],[\"找到请求时候的服务器路由资源\",{\"1\":{\"1123\":1}}],[\"找到requirepass配置\",{\"1\":{\"963\":1}}],[\"找到db文件\",{\"1\":{\"851\":1}}],[\"找到\",{\"1\":{\"849\":1,\"850\":1}}],[\"找到具有最大和的连续子数组\",{\"1\":{\"622\":1,\"694\":1}}],[\"找到入口位置\",{\"1\":{\"585\":1,\"657\":1}}],[\"找到前1000个最大的\",{\"1\":{\"567\":1,\"639\":2}}],[\"排除age的列\",{\"1\":{\"863\":1}}],[\"排好序的快\",{\"1\":{\"800\":1}}],[\"排序操作包\",{\"1\":{\"1308\":1}}],[\"排序使用一升一降会造成filesort\",{\"1\":{\"819\":1}}],[\"排序和合并操作上\",{\"1\":{\"816\":1}}],[\"排序的字段若通过索引去访问将大大提升排序速度\",{\"1\":{\"811\":1}}],[\"排序时所消耗的时间\",{\"1\":{\"809\":1}}],[\"排序\",{\"1\":{\"719\":1,\"974\":1}}],[\"排行榜\",{\"1\":{\"651\":1}}],[\"排行榜等应用\",{\"1\":{\"641\":1}}],[\"排行榜等\",{\"1\":{\"635\":1}}],[\"排查命令\",{\"1\":{\"601\":1,\"673\":1}}],[\"排列问题\",{\"1\":{\"4\":1}}],[\"联合文件系统\",{\"1\":{\"1192\":1}}],[\"联合操作\",{\"1\":{\"816\":1}}],[\"联合查询\",{\"1\":{\"814\":1}}],[\"联合普通索引\",{\"1\":{\"809\":1}}],[\"联合唯一索引\",{\"1\":{\"809\":1}}],[\"联合主键索引\",{\"1\":{\"809\":1}}],[\"联合主键中的字段越多\",{\"1\":{\"793\":1}}],[\"联合索引\",{\"0\":{\"816\":1},\"1\":{\"600\":1,\"672\":1,\"795\":1,\"808\":1,\"809\":1}}],[\"联合体\",{\"0\":{\"308\":1}}],[\"论文的层次\",{\"1\":{\"599\":1,\"671\":1}}],[\"手撕快速排序\",{\"1\":{\"619\":1,\"691\":1}}],[\"手机号是否合法\",{\"1\":{\"1288\":1}}],[\"手机号\",{\"1\":{\"603\":1,\"675\":1}}],[\"手机\",{\"1\":{\"603\":1,\"675\":1}}],[\"手头有其他offer吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"手动匹配用户角色\",{\"1\":{\"1240\":1}}],[\"手动启用\",{\"1\":{\"1235\":1}}],[\"手动创建pod效率太低了\",{\"1\":{\"1215\":1}}],[\"手动创建的一个只读或只写的管道没有什么太大的意义\",{\"1\":{\"419\":1}}],[\"手动安装kong\",{\"0\":{\"1078\":1}}],[\"手动为主节点分配hash槽\",{\"1\":{\"1010\":1}}],[\"手动执行bgrewriteaof命令\",{\"1\":{\"985\":1}}],[\"手动实现默认值\",{\"1\":{\"651\":1}}],[\"手动提交\",{\"1\":{\"634\":1}}],[\"手动触发是通过savae命令或者bgsave命令将内存数据保存到磁盘文件中\",{\"1\":{\"981\":1}}],[\"手动触发\",{\"1\":{\"633\":1,\"981\":1}}],[\"手动指定了int类型\",{\"1\":{\"337\":1}}],[\"手动采集就是通过代码来控制\",{\"1\":{\"323\":1}}],[\"手动\",{\"0\":{\"323\":1}}],[\"手动合并\",{\"1\":{\"58\":1}}],[\"知道哪些设计模式\",{\"1\":{\"654\":1}}],[\"知道哪些设计者模式\",{\"1\":{\"582\":1,\"654\":1}}],[\"知道可以拓展类加载器吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"验证和重启nginx\",{\"0\":{\"1137\":1}}],[\"验证传入请求的结构和内容\",{\"1\":{\"1071\":1}}],[\"验证对应哈希值的脚本是否存在\",{\"1\":{\"952\":1}}],[\"验证服务器身份\",{\"1\":{\"641\":1}}],[\"验证这个阶段会加载到jvm的内存结构的哪个部分去\",{\"1\":{\"598\":1,\"670\":1}}],[\"验证项目的依赖合法性\",{\"1\":{\"456\":1}}],[\"蚂蚁\",{\"0\":{\"596\":1,\"668\":1}}],[\"狗输出的时候先读猫channel来保证顺序\",{\"1\":{\"595\":1,\"667\":1}}],[\"莫得\",{\"1\":{\"595\":1,\"667\":1}}],[\"阐述缓存穿透\",{\"1\":{\"594\":1,\"666\":1}}],[\"倒排索引了解吗\",{\"1\":{\"594\":1,\"666\":1}}],[\"倒不如无论何时要么都用值接收者\",{\"1\":{\"287\":1}}],[\"笔试题\",{\"1\":{\"593\":1,\"665\":1}}],[\"笔者提前做了一轮性能测试\",{\"1\":{\"1038\":1}}],[\"笔者在第一次了解到\",{\"1\":{\"505\":1}}],[\"笔者以前就因为这个坑\",{\"1\":{\"285\":1}}],[\"考虑一个订阅角色sub\",{\"1\":{\"1263\":1}}],[\"考虑一种情况\",{\"1\":{\"1156\":1}}],[\"考虑使用具体类型而非接口\",{\"1\":{\"633\":1}}],[\"考虑机器有4g的内存\",{\"1\":{\"597\":1,\"669\":1}}],[\"考虑位图或者布隆过滤器\",{\"1\":{\"593\":1,\"665\":1}}],[\"考虑业务上的合理性\",{\"1\":{\"592\":1,\"664\":1}}],[\"呢\",{\"1\":{\"592\":1,\"664\":1}}],[\"递给后端的代理服务器\",{\"1\":{\"1133\":1}}],[\"递减完成时的并发判断库存大小的时候出问题\",{\"1\":{\"592\":1,\"664\":1}}],[\"递减是怎么操作的\",{\"1\":{\"592\":1,\"664\":1}}],[\"递归遍历树的方式\",{\"1\":{\"1287\":1}}],[\"递归查询\",{\"1\":{\"638\":1}}],[\"递归\",{\"1\":{\"4\":1,\"28\":3}}],[\"阿里镜像加速\",{\"1\":{\"774\":1}}],[\"阿里云的内网ip或者注释掉或者bind\",{\"1\":{\"1010\":1}}],[\"阿里云服务器必须在安全组开放3340和3339的端口\",{\"1\":{\"822\":1}}],[\"阿里云\",{\"1\":{\"655\":1,\"1109\":1,\"1218\":1}}],[\"阿里云提供的是\",{\"1\":{\"639\":1}}],[\"阿里云用的是cos服务是吧\",{\"1\":{\"567\":1,\"639\":2}}],[\"阿里开源的消息队列\",{\"1\":{\"637\":1}}],[\"阿里社招面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"阿里校招面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"阿里外包\",{\"0\":{\"595\":1,\"667\":1}}],[\"阿里\",{\"0\":{\"594\":1,\"666\":1}}],[\"阿里巴巴\",{\"0\":{\"591\":1,\"663\":1}}],[\"遇到右括号就从栈中弹出并检查是否匹配\",{\"1\":{\"638\":1}}],[\"遇到左括号就入栈\",{\"1\":{\"638\":1}}],[\"遇到过高并发\",{\"1\":{\"595\":1,\"667\":1}}],[\"遇到困难一般自己解决吗\",{\"1\":{\"590\":1,\"662\":1}}],[\"遇到文件就创建新文件并复制\",{\"1\":{\"410\":1}}],[\"遇到文件夹就创建文件夹\",{\"1\":{\"410\":1}}],[\"挑一个讲一讲\",{\"1\":{\"590\":1,\"662\":1}}],[\"挑一个项目聊一下\",{\"1\":{\"570\":1,\"642\":1}}],[\"失败的时间片段\",{\"1\":{\"1163\":1}}],[\"失败的原因\",{\"1\":{\"1036\":3}}],[\"失败\",{\"1\":{\"588\":1,\"660\":1}}],[\"持久性日志\",{\"1\":{\"1019\":1}}],[\"持久化和过期策略\",{\"0\":{\"1065\":1}}],[\"持久化提供了两种触发策略\",{\"1\":{\"981\":1}}],[\"持久化\",{\"1\":{\"653\":1,\"1017\":1}}],[\"持久化到数据库\",{\"1\":{\"644\":1}}],[\"持久化机制\",{\"1\":{\"587\":1,\"659\":1}}],[\"持续保留上一页的id\",{\"1\":{\"820\":1}}],[\"持有锁\",{\"1\":{\"557\":1}}],[\"拷打项目\",{\"1\":{\"585\":1,\"586\":1,\"657\":1,\"658\":1}}],[\"拷贝文件和目录到镜像中\",{\"1\":{\"1193\":1}}],[\"拷贝对象及其所有的引用对象\",{\"1\":{\"641\":1}}],[\"拷贝成本高\",{\"1\":{\"515\":1}}],[\"拷贝成本低\",{\"1\":{\"515\":1}}],[\"拷贝copy函数\",{\"1\":{\"511\":1}}],[\"拷贝\",{\"0\":{\"247\":1,\"256\":1}}],[\"死信队列\",{\"1\":{\"641\":1}}],[\"死锁\",{\"1\":{\"624\":1,\"696\":1}}],[\"死锁是什么\",{\"1\":{\"585\":1,\"657\":1}}],[\"死循环\",{\"1\":{\"509\":1}}],[\"延续burst缓存处理的配置\",{\"1\":{\"1156\":1}}],[\"延申leetcode142\",{\"1\":{\"585\":1,\"657\":1}}],[\"延迟的记录比拒绝的记录低一个级别\",{\"1\":{\"1151\":1}}],[\"延迟\",{\"1\":{\"1057\":1}}],[\"延迟删除缓存操作\",{\"1\":{\"644\":1}}],[\"延迟删除缓存\",{\"1\":{\"644\":1}}],[\"延迟到函数退出时执行\",{\"1\":{\"514\":1}}],[\"延迟关闭文件\",{\"1\":{\"514\":1}}],[\"延迟调用通常用于释放文件资源\",{\"1\":{\"283\":1}}],[\"延迟调用\",{\"0\":{\"283\":1},\"1\":{\"514\":1}}],[\"环的实现\",{\"1\":{\"1308\":1}}],[\"环形缓冲区\",{\"1\":{\"633\":1}}],[\"环形链表2\",{\"1\":{\"585\":1,\"657\":1}}],[\"环形链表\",{\"1\":{\"585\":1,\"657\":1}}],[\"环境隔离和自定义配置能力\",{\"1\":{\"1230\":1}}],[\"环境之类的信息\",{\"1\":{\"1191\":1}}],[\"环境\",{\"1\":{\"1183\":1,\"1184\":1}}],[\"环境准备\",{\"0\":{\"1009\":1}}],[\"环境变量和多环境配置\",{\"1\":{\"1203\":1}}],[\"环境变量\",{\"1\":{\"850\":1}}],[\"环境变量gogc控制\",{\"1\":{\"553\":1}}],[\"环境引用吗\",{\"1\":{\"282\":1}}],[\"环境配置\",{\"1\":{\"55\":1}}],[\"力扣\",{\"1\":{\"584\":1,\"656\":2}}],[\"匹配过程\",{\"1\":{\"1287\":1}}],[\"匹配\",{\"0\":{\"1287\":1},\"1\":{\"1284\":1}}],[\"匹配策略结果将默认允许\",{\"1\":{\"1252\":1}}],[\"匹配器\",{\"1\":{\"1249\":1}}],[\"匹配失败\",{\"1\":{\"1143\":1}}],[\"匹配成功\",{\"1\":{\"1143\":3}}],[\"匹配任意请求头字段\",{\"1\":{\"1133\":1}}],[\"匹配单个字段\",{\"0\":{\"758\":1}}],[\"匹配某一字段\",{\"1\":{\"713\":1}}],[\"匹配到了一条语句\",{\"1\":{\"584\":1,\"656\":1}}],[\"匹配引擎的限价订单在golang\",{\"1\":{\"133\":1}}],[\"拥塞避免用于平稳增长窗口大小\",{\"1\":{\"656\":1}}],[\"拥塞避免\",{\"1\":{\"636\":1,\"656\":1}}],[\"拥塞控制是通过以下四个算法实现的\",{\"1\":{\"656\":1}}],[\"拥塞控制是为了避免网络中出现过多的流量\",{\"1\":{\"636\":1}}],[\"拥塞控制算法\",{\"1\":{\"584\":1,\"618\":1,\"656\":2,\"690\":1}}],[\"拥有丰富的\",{\"1\":{\"638\":1}}],[\"拥有丰富的标准库\",{\"1\":{\"164\":1}}],[\"拥有强大的并发实现是通过gmp调度模型实现的\",{\"1\":{\"539\":1}}],[\"离职的原因是希望寻找更具挑战性的项目\",{\"1\":{\"655\":1}}],[\"离职原因\",{\"1\":{\"583\":1,\"655\":2}}],[\"离线无法提交代码\",{\"1\":{\"11\":1}}],[\"牛客上可以多刷一下\",{\"1\":{\"582\":1,\"654\":2}}],[\"乐观锁或悲观锁来防止冲突\",{\"1\":{\"653\":1}}],[\"乐观锁\",{\"1\":{\"618\":1,\"644\":2,\"653\":1,\"656\":1,\"690\":1}}],[\"乐观锁为什么不是加在抢单关系表而是在订单表里的\",{\"1\":{\"592\":1,\"664\":1}}],[\"乐观锁会不会导致频繁的冲突啊\",{\"1\":{\"588\":1,\"660\":1}}],[\"乐观锁怎么实现的你了解吗\",{\"1\":{\"588\":1,\"660\":1}}],[\"乐观锁和悲观锁的区别\",{\"1\":{\"581\":1,\"653\":2}}],[\"乐观锁本身并不是锁\",{\"1\":{\"440\":1}}],[\"心跳推送\",{\"1\":{\"580\":1,\"652\":1}}],[\"心智负担小\",{\"1\":{\"388\":1}}],[\"监听地址\",{\"1\":{\"1374\":2}}],[\"监听服务器ip\",{\"1\":{\"1130\":1,\"1131\":2,\"1136\":1,\"1141\":1,\"1142\":1,\"1143\":1,\"1144\":1,\"1160\":1}}],[\"监听nginx所在服务得ip\",{\"1\":{\"1130\":1}}],[\"监听端口默认为8080\",{\"1\":{\"1277\":1}}],[\"监听端口\",{\"1\":{\"1130\":2,\"1131\":2,\"1136\":1,\"1141\":1,\"1142\":1,\"1143\":1,\"1144\":1,\"1160\":1,\"1275\":1}}],[\"监听端口80\",{\"1\":{\"1123\":1}}],[\"监听80端口\",{\"1\":{\"1123\":1}}],[\"监听主服务\",{\"1\":{\"1000\":1}}],[\"监控信息或是前端的埋点这类数据\",{\"1\":{\"1057\":1}}],[\"监控警告等等\",{\"1\":{\"901\":1}}],[\"监控和报警配置\",{\"1\":{\"655\":1}}],[\"监控主要是通过收集系统指标\",{\"1\":{\"655\":1}}],[\"监控主从节点\",{\"1\":{\"651\":1}}],[\"监控\",{\"1\":{\"637\":1,\"901\":1,\"1019\":1}}],[\"监控系统\",{\"1\":{\"580\":1,\"652\":1}}],[\"监督是erlang监督树的完整实现\",{\"1\":{\"137\":1}}],[\"玩家积分排序topn实现算法\",{\"1\":{\"579\":1,\"651\":1}}],[\"流水线中的应用\",{\"1\":{\"1204\":1}}],[\"流计算相关的开源产品\",{\"1\":{\"1057\":1}}],[\"流计算\",{\"1\":{\"1054\":1,\"1057\":1}}],[\"流行度和成熟度相对没有那么高\",{\"1\":{\"1056\":1}}],[\"流行\",{\"1\":{\"1052\":1}}],[\"流处理\",{\"1\":{\"1019\":1}}],[\"流式协议\",{\"1\":{\"651\":1}}],[\"流量网关使用apisix\",{\"1\":{\"1072\":1}}],[\"流量削峰\",{\"1\":{\"644\":1}}],[\"流量控制\",{\"1\":{\"579\":1,\"636\":1,\"651\":2}}],[\"流程图\",{\"0\":{\"16\":1},\"1\":{\"74\":2}}],[\"流程\",{\"0\":{\"15\":1},\"1\":{\"634\":1,\"656\":1}}],[\"此外返回错误信息可以翻译为对应的语言\",{\"1\":{\"1289\":1}}],[\"此定义指定了访问控制匹配函数所需的参数名称和顺序\",{\"1\":{\"1251\":1}}],[\"此负载均衡策略适合请求处理时间长短不一造成服务器过载的情况\",{\"1\":{\"1167\":1}}],[\"此算法是如何解决\",{\"1\":{\"1165\":1}}],[\"此策略适合有状态服务\",{\"1\":{\"1164\":1}}],[\"此策略适合服务器配置相当\",{\"1\":{\"1161\":1}}],[\"此策略比较适合服务器的硬件配置差别比较大的情况\",{\"1\":{\"1162\":1}}],[\"此策略可以与least\",{\"1\":{\"1162\":1}}],[\"此处是每个ip\",{\"1\":{\"1155\":1}}],[\"此处存在理解偏差导致回答失误\",{\"1\":{\"576\":1,\"648\":1}}],[\"此文件需删除\",{\"1\":{\"1133\":1}}],[\"此变量可在location中使用\",{\"1\":{\"1133\":1}}],[\"此作法主要的优点是如果调用者没有修改该资源\",{\"1\":{\"988\":1}}],[\"此操作会先查询文档再进行修改文档\",{\"1\":{\"836\":1}}],[\"此时输出\",{\"1\":{\"1318\":1}}],[\"此时如果我们移动或者删除日志文件\",{\"1\":{\"1307\":1}}],[\"此时如果别人从远端仓库下载最新的代码其实是可以看到我们的代码修改记录的\",{\"1\":{\"48\":1}}],[\"此时进⼊当时nginx的安装目录⽬录\",{\"1\":{\"1165\":1}}],[\"此时哨兵认为服务器主观下线\",{\"1\":{\"1000\":1}}],[\"此时的主进程则仍然可以对外提供服务\",{\"1\":{\"980\":1}}],[\"此时slave\",{\"1\":{\"825\":1}}],[\"此时可以测试数据同步是否成功\",{\"1\":{\"822\":1}}],[\"此时可以使用navicat等工具测试连接mysql\",{\"1\":{\"822\":1}}],[\"此时mysql数据库的性能问题成为系统应用的瓶颈\",{\"1\":{\"799\":1}}],[\"此时放在p中还是m中\",{\"1\":{\"579\":1,\"651\":1}}],[\"此时这个事务还没有提交\",{\"1\":{\"573\":1,\"645\":1}}],[\"此时再使用该值去创建指针就会引发panic\",{\"1\":{\"1443\":1}}],[\"此时再次查看go\",{\"1\":{\"453\":1}}],[\"此时再从远程仓库拉取文件的时候会报错\",{\"1\":{\"58\":1}}],[\"此时重复加锁解锁都会导致死锁\",{\"1\":{\"429\":1}}],[\"此时访问到的count值为1\",{\"1\":{\"429\":1}}],[\"此时管道还未初始化\",{\"1\":{\"413\":1}}],[\"此时文件内容如下\",{\"1\":{\"402\":1}}],[\"此时文件夹上有一个\",{\"1\":{\"22\":3}}],[\"此时文件夹上没有图标或者有一个\",{\"1\":{\"22\":1}}],[\"此时打开浏览器访问http\",{\"1\":{\"324\":1}}],[\"此时就需要用括号将返回值围起来\",{\"1\":{\"280\":1}}],[\"此时你就可以操作自己的仓库进行修改代码了\",{\"1\":{\"53\":1}}],[\"此时主分支是不能智能判断第一行使用谁的代码\",{\"1\":{\"36\":1}}],[\"此时作为开发人员\",{\"1\":{\"30\":1}}],[\"此时服务文件已经删除了\",{\"1\":{\"26\":1}}],[\"此时时可以回退的\",{\"1\":{\"25\":1}}],[\"此时不要提交\",{\"1\":{\"23\":1}}],[\"此时我们已经在git\",{\"1\":{\"54\":1}}],[\"此时我们修改代码就不能仅仅是提交到本地了\",{\"1\":{\"48\":1}}],[\"此时我们发现我们的代码已经被下载下来了\",{\"1\":{\"47\":1}}],[\"此时我们发现文件又被恢复了\",{\"1\":{\"25\":1}}],[\"此时我们刷新仓库发现代码已经存在了\",{\"1\":{\"46\":1}}],[\"此时我们看到代码自动合并到了master分支\",{\"1\":{\"35\":1}}],[\"此时我们看到有两个分支\",{\"1\":{\"33\":1}}],[\"此时我们看到文件夹上多了一个\",{\"1\":{\"19\":1}}],[\"此时我们的根目录下会生成一个\",{\"1\":{\"28\":1}}],[\"此时我们可以看到所有的历史提交记录\",{\"1\":{\"24\":1}}],[\"此时我们创建的文件夹下有一个\",{\"1\":{\"18\":1}}],[\"此时\",{\"1\":{\"14\":1,\"981\":1}}],[\"此时内心一脸懵\",{\"1\":{\"9\":1}}],[\"抖音微信小游戏归因业务项目\",{\"1\":{\"576\":1,\"648\":1}}],[\"定制自己公司的mq\",{\"1\":{\"1054\":1}}],[\"定制我们自己的查询结果\",{\"1\":{\"863\":1}}],[\"定期断开长连接\",{\"1\":{\"776\":1}}],[\"定期进行表的优化\",{\"1\":{\"655\":1}}],[\"定期扫描所有过期键\",{\"1\":{\"651\":1}}],[\"定期扫描缓存\",{\"1\":{\"644\":1}}],[\"定期删除\",{\"1\":{\"651\":1}}],[\"定期将mysql的数据同步到redis中\",{\"1\":{\"651\":1}}],[\"定期检查缓存与数据库的同步情况\",{\"1\":{\"644\":1}}],[\"定期同步\",{\"1\":{\"641\":1}}],[\"定期刷新锁的有效期\",{\"1\":{\"634\":1,\"653\":1}}],[\"定时\",{\"1\":{\"1175\":1}}],[\"定时同步\",{\"1\":{\"651\":1}}],[\"定时器定期检查并延长过期时间\",{\"1\":{\"634\":1}}],[\"定时任务表达式\",{\"1\":{\"1175\":1}}],[\"定时任务\",{\"1\":{\"653\":1}}],[\"定时任务刷新字段通常是通过定时任务调度工具\",{\"1\":{\"653\":1}}],[\"定时任务刷新字段\",{\"1\":{\"581\":1,\"653\":2}}],[\"定时任务可分散执行时间\",{\"1\":{\"576\":1,\"648\":1}}],[\"定位并读取完整的行记录\",{\"1\":{\"614\":1,\"686\":1}}],[\"定义\",{\"0\":{\"1325\":1}}],[\"定义请求和策略的匹配规则\",{\"1\":{\"1253\":1}}],[\"定义请求参数\",{\"1\":{\"1251\":1}}],[\"定义上面两者执行怎么样的匹配\",{\"1\":{\"1253\":1}}],[\"定义上面pod一样的最为模版\",{\"1\":{\"1215\":1}}],[\"定义访问策略的模型\",{\"1\":{\"1252\":1}}],[\"定义角色\",{\"1\":{\"1241\":1}}],[\"定义客户端\",{\"1\":{\"1165\":1}}],[\"定义针对每个真实服务器虚拟出来⼏个节点\",{\"1\":{\"1165\":1}}],[\"定义服务器ip\",{\"1\":{\"1165\":1}}],[\"定义共享内存区来存储访问信息\",{\"1\":{\"1154\":1}}],[\"定义限流对象\",{\"1\":{\"1154\":1}}],[\"定义即可\",{\"1\":{\"725\":1}}],[\"定义一系列算法\",{\"1\":{\"654\":1}}],[\"定义一个结构体\",{\"1\":{\"880\":1}}],[\"定义一个操作中的算法框架\",{\"1\":{\"654\":1}}],[\"定义一个接口用于创建对象\",{\"1\":{\"654\":1}}],[\"定义一个waitgroup控制两个协程完成后一起退出\",{\"1\":{\"545\":1}}],[\"定义一个person去实现speak方法\",{\"1\":{\"516\":1}}],[\"定义一个目标对象\",{\"1\":{\"513\":1}}],[\"定义两个信号量控制循序\",{\"1\":{\"545\":1}}],[\"定义类型需要两个\",{\"1\":{\"516\":1}}],[\"定义选项类型为函数\",{\"1\":{\"513\":1}}],[\"定义为\",{\"1\":{\"455\":1}}],[\"定义了一系列文件系统的接口\",{\"1\":{\"1308\":1}}],[\"定义了一系列基础的io接口\",{\"1\":{\"1308\":1}}],[\"定义了代表go编程语言中词法标记以及基本操作标记\",{\"1\":{\"124\":1}}],[\"定义了数据库驱动所需实现的接口\",{\"1\":{\"124\":1}}],[\"账号量有多大\",{\"1\":{\"576\":1,\"648\":1}}],[\"异常情况\",{\"1\":{\"1158\":1}}],[\"异常重启\",{\"1\":{\"776\":1}}],[\"异常堆栈等\",{\"1\":{\"655\":1}}],[\"异常管理原则\",{\"1\":{\"610\":1,\"682\":1}}],[\"异步生产者\",{\"1\":{\"1047\":1}}],[\"异步任务处理等场景\",{\"1\":{\"651\":1}}],[\"异步删除缓存\",{\"1\":{\"644\":1}}],[\"异步同步redis与mysql的变化\",{\"1\":{\"651\":1}}],[\"异步同步\",{\"1\":{\"641\":1,\"651\":1}}],[\"异步处理\",{\"1\":{\"639\":1,\"644\":1,\"1052\":1}}],[\"异步消息处理\",{\"1\":{\"637\":1}}],[\"异步简单函数实用程序\",{\"1\":{\"137\":1}}],[\"异构数据库迁移时如何保证每条数据正常迁移到mysql\",{\"1\":{\"576\":1,\"648\":1}}],[\"业务网关使用gateway\",{\"1\":{\"1072\":1}}],[\"业务流量大\",{\"1\":{\"1072\":1}}],[\"业务单一\",{\"1\":{\"1072\":1}}],[\"业务可以根据需要定义\",{\"1\":{\"794\":1}}],[\"业务系统名称\",{\"1\":{\"794\":1}}],[\"业务数据字段\",{\"1\":{\"653\":1}}],[\"业务表字段设计应根据业务需求来进行\",{\"1\":{\"653\":1}}],[\"业务修改后\",{\"1\":{\"610\":1,\"682\":1}}],[\"业务背景\",{\"1\":{\"610\":1,\"682\":1}}],[\"业务为什么要经过kafka这一层\",{\"1\":{\"576\":1,\"648\":1}}],[\"业务要读写新旧数据时怎么办\",{\"1\":{\"576\":1,\"648\":1}}],[\"业务部门提出需求\",{\"1\":{\"30\":1}}],[\"迁移比较暴力\",{\"1\":{\"576\":1,\"648\":1}}],[\"迁移过程中数据同步怎么做\",{\"1\":{\"576\":1,\"648\":1}}],[\"迁移成本\",{\"1\":{\"117\":1}}],[\"岗位base深圳能否接受\",{\"1\":{\"575\":1,\"647\":1}}],[\"岗位为腾讯音乐\",{\"1\":{\"575\":1,\"647\":1}}],[\"岗位工作内容\",{\"1\":{\"520\":1}}],[\"扫描\",{\"0\":{\"921\":1}}],[\"扫描的行数\",{\"1\":{\"645\":1,\"651\":1}}],[\"扫描从os\",{\"1\":{\"224\":1}}],[\"扫一遍的时间可能会非常长\",{\"1\":{\"573\":1,\"645\":2}}],[\"详细地址\",{\"1\":{\"817\":1}}],[\"详细描述\",{\"1\":{\"817\":1}}],[\"详细介绍下项目用户注册和登录的流程\",{\"1\":{\"572\":1,\"644\":1}}],[\"详情容器\",{\"1\":{\"62\":1}}],[\"属性\",{\"1\":{\"572\":1,\"644\":1,\"794\":1}}],[\"属于是单元测试和基准测试的一种增强\",{\"1\":{\"477\":1}}],[\"属于开箱即用\",{\"1\":{\"422\":1}}],[\"属于空间换时间的一种手段\",{\"1\":{\"273\":1}}],[\"深入理解了微服务架构\",{\"1\":{\"655\":1}}],[\"深入了解了\",{\"1\":{\"655\":1}}],[\"深拷贝\",{\"1\":{\"641\":1}}],[\"深拷贝和浅拷贝的区别\",{\"1\":{\"569\":1,\"641\":2}}],[\"深信服面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"深信服\",{\"0\":{\"621\":1,\"693\":1}}],[\"深度拷贝\",{\"1\":{\"122\":1}}],[\"断开连接是客户端发起还是服务端发起\",{\"1\":{\"569\":1,\"641\":2}}],[\"退出并停止容器\",{\"1\":{\"1189\":1}}],[\"退出\",{\"1\":{\"1189\":1,\"1374\":1}}],[\"退出登录是怎么实现的\",{\"1\":{\"569\":1,\"641\":2}}],[\"退出循环\",{\"1\":{\"421\":1}}],[\"鉴权\",{\"0\":{\"1463\":1}}],[\"鉴权是怎么做的\",{\"1\":{\"569\":1,\"641\":2}}],[\"鉴于国内用户可能网络不好\",{\"1\":{\"43\":1}}],[\"登录时回返回token信息\",{\"1\":{\"1092\":1}}],[\"登录时使用\",{\"1\":{\"641\":1}}],[\"登录账号\",{\"1\":{\"1079\":1}}],[\"登录任意一台kafka集群节点\",{\"1\":{\"1034\":1}}],[\"登录注册\",{\"1\":{\"641\":1}}],[\"登录注册是怎么实现的\",{\"1\":{\"569\":2,\"641\":4}}],[\"登录后\",{\"1\":{\"641\":1}}],[\"登录\",{\"1\":{\"639\":1,\"641\":2,\"644\":1}}],[\"登录请求应该使用\",{\"1\":{\"638\":1}}],[\"登录请求的话用什么请求\",{\"1\":{\"566\":1,\"638\":2}}],[\"登录的过程说一下\",{\"1\":{\"625\":1,\"697\":1}}],[\"登录成功以后返回的什么数据\",{\"1\":{\"572\":1,\"644\":1}}],[\"订单处理\",{\"1\":{\"1057\":1}}],[\"订单信息等\",{\"1\":{\"641\":1}}],[\"订单信息通常会包括用户id\",{\"1\":{\"638\":1}}],[\"订单系统\",{\"1\":{\"639\":1}}],[\"订单超卖指的是在库存不足的情况下\",{\"1\":{\"639\":1}}],[\"订单超卖是什么意思\",{\"1\":{\"567\":1,\"639\":2}}],[\"订单状态\",{\"1\":{\"638\":2}}],[\"订单状态等字段\",{\"1\":{\"638\":1}}],[\"订单数量通常用于跟踪订单的状态和处理数量\",{\"1\":{\"638\":1}}],[\"订单金额等字段\",{\"1\":{\"638\":1}}],[\"订单的状态可以缓存到\",{\"1\":{\"638\":1}}],[\"订单表可能包含order\",{\"1\":{\"653\":1}}],[\"订单表\",{\"1\":{\"638\":1}}],[\"订阅到资源组映射表有一个图映射订阅到资源组\",{\"1\":{\"1266\":1}}],[\"订阅角色和资源组角色之间存在任意关系\",{\"1\":{\"1263\":1}}],[\"订阅角色和操作\",{\"1\":{\"1263\":1}}],[\"订阅\",{\"1\":{\"1019\":1,\"1263\":1}}],[\"订阅指定频道\",{\"1\":{\"953\":1}}],[\"订阅和工作队列模式\",{\"1\":{\"634\":1}}],[\"订阅平台\",{\"1\":{\"128\":1}}],[\"订阅规则\",{\"1\":{\"72\":1}}],[\"逻辑概念\",{\"1\":{\"1020\":1}}],[\"逻辑则执行查询缓存\",{\"1\":{\"777\":1}}],[\"逻辑删除后又插入同样的一条记录\",{\"1\":{\"610\":1,\"682\":1}}],[\"逻辑删除标志\",{\"1\":{\"610\":1,\"682\":1}}],[\"逻辑过期\",{\"1\":{\"641\":1}}],[\"逻辑过期不让缓存过期\",{\"1\":{\"597\":1,\"669\":1}}],[\"逻辑过期的时间点有很多请求过来\",{\"1\":{\"566\":1,\"638\":1}}],[\"逻辑过期的话怎么更新呢\",{\"1\":{\"566\":1,\"638\":1}}],[\"逻辑也很简单\",{\"1\":{\"426\":1}}],[\"击穿的解决方案\",{\"1\":{\"566\":1,\"638\":1}}],[\"他可能的数据表结构是怎样的\",{\"1\":{\"566\":1,\"638\":2}}],[\"他们的应用场景\",{\"1\":{\"622\":1,\"694\":1}}],[\"他们不希望干什么事情都需要嵌套一堆try\",{\"1\":{\"388\":1}}],[\"他们会共同获取相同的指针指向相同的资源\",{\"1\":{\"988\":1}}],[\"他们会检查你的源代码中的结构体\",{\"1\":{\"273\":1}}],[\"他们会将参数输出到标准错误中\",{\"1\":{\"218\":1}}],[\"他们用户私钥加密后给你ca证书\",{\"1\":{\"83\":1}}],[\"他们在互相不知道对方需求的情况下同时提交了代码到自己的分支\",{\"1\":{\"36\":1}}],[\"评价一个索引的好坏一定是进入索引的次数越小越快\",{\"1\":{\"803\":1}}],[\"评论与互动\",{\"1\":{\"644\":1}}],[\"评论和社交功能\",{\"1\":{\"641\":1}}],[\"评论\",{\"1\":{\"641\":1,\"843\":1}}],[\"评论可以设计成\",{\"1\":{\"638\":1}}],[\"评论可以折叠吗\",{\"1\":{\"566\":1,\"638\":2}}],[\"评论对象id\",{\"1\":{\"638\":1}}],[\"评论内容\",{\"1\":{\"638\":2}}],[\"评论id\",{\"1\":{\"638\":2}}],[\"评论通常可以设计为一个独立的表\",{\"1\":{\"638\":1}}],[\"评论怎么设计的\",{\"1\":{\"566\":1,\"638\":2}}],[\"评估维度\",{\"1\":{\"111\":1}}],[\"悬赏下单的用户是指发起订单请求的用户\",{\"1\":{\"638\":1}}],[\"悬赏下单的用户\",{\"1\":{\"566\":1,\"638\":2}}],[\"抢单后直接将订单的状态更新为\",{\"1\":{\"638\":1}}],[\"抢单为什么会有库存数量\",{\"1\":{\"592\":1,\"664\":1}}],[\"抢单的设计可以使用\",{\"1\":{\"638\":1}}],[\"抢单的设计是怎么做的\",{\"1\":{\"566\":1,\"638\":2}}],[\"抢单的人怎么知道要查哪个key呢\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"抢占式\",{\"1\":{\"540\":1}}],[\"消费组\",{\"1\":{\"1047\":1}}],[\"消费消息的是消费者\",{\"1\":{\"1060\":1}}],[\"消费消息\",{\"1\":{\"1034\":1}}],[\"消费消息等\",{\"1\":{\"1034\":1}}],[\"消费数据\",{\"0\":{\"1027\":1}}],[\"消费方从中读取\",{\"1\":{\"1020\":1}}],[\"消费\",{\"1\":{\"1018\":1}}],[\"消费者采用pull方式获取消息\",{\"1\":{\"1055\":1}}],[\"消费者每秒钟消费100条消息\",{\"1\":{\"1039\":1}}],[\"消费者kafka连接服务失败\",{\"1\":{\"1036\":1}}],[\"消费者组b有四个消费者实例\",{\"1\":{\"1027\":1}}],[\"消费者组a有两个消费者实例\",{\"1\":{\"1027\":1}}],[\"消费者组都在消费这个topic中的数据\",{\"1\":{\"1027\":1}}],[\"消费者\",{\"1\":{\"1020\":1,\"1047\":1,\"1052\":1}}],[\"消费者接收到的消息也将按照先进先出的顺序消费\",{\"1\":{\"1018\":1}}],[\"消费者可以在处理消息时\",{\"1\":{\"653\":1}}],[\"消费者负载均衡\",{\"1\":{\"637\":1}}],[\"消费者控制从消息队列拉取消息的频率和速度\",{\"1\":{\"634\":1}}],[\"消费者从\",{\"1\":{\"634\":1}}],[\"消费者定期从\",{\"1\":{\"634\":1}}],[\"消费者按需读取\",{\"1\":{\"634\":1}}],[\"消费者记录偏移量并保证幂等消费\",{\"1\":{\"634\":1}}],[\"消费者多次消费同一条消息\",{\"1\":{\"634\":1}}],[\"消费者读取了消息并处理完\",{\"1\":{\"634\":1}}],[\"消费者端丢失\",{\"1\":{\"634\":1}}],[\"消耗的内存和cpu也会越多\",{\"1\":{\"800\":1}}],[\"消除传递依赖\",{\"1\":{\"789\":1}}],[\"消除不完全依赖\",{\"1\":{\"789\":1}}],[\"消除了\",{\"1\":{\"170\":1}}],[\"消息流向盘根错节\",{\"1\":{\"1068\":1}}],[\"消息直接全部丢失\",{\"1\":{\"1061\":1}}],[\"消息协议\",{\"1\":{\"1057\":1}}],[\"消息有序\",{\"1\":{\"1055\":1}}],[\"消息大小10个字节\",{\"1\":{\"1055\":1}}],[\"消息可以做到0丢失\",{\"1\":{\"1054\":1}}],[\"消息可靠性\",{\"1\":{\"1054\":1}}],[\"消息可靠性上比\",{\"1\":{\"1054\":1}}],[\"消息推送\",{\"1\":{\"1054\":1}}],[\"消息驱动的系统\",{\"1\":{\"1052\":1}}],[\"消息组件\",{\"0\":{\"1049\":1}}],[\"消息消费代码示例\",{\"0\":{\"1036\":1}}],[\"消息消费者\",{\"1\":{\"1018\":1,\"1052\":1}}],[\"消息的可靠传递\",{\"1\":{\"1052\":1}}],[\"消息的内容是\",{\"1\":{\"1036\":1}}],[\"消息的主题\",{\"1\":{\"1020\":1}}],[\"消息的产生者\",{\"1\":{\"1020\":1}}],[\"消息系统\",{\"1\":{\"1019\":1}}],[\"消息被处理的状态是在consumer端维护\",{\"1\":{\"1018\":1}}],[\"消息生产者\",{\"1\":{\"1052\":1}}],[\"消息生产代码示例\",{\"0\":{\"1035\":1}}],[\"消息生产\",{\"1\":{\"1018\":1}}],[\"消息顺序\",{\"1\":{\"1018\":1}}],[\"消息顺序保证在单个分区内\",{\"1\":{\"634\":1}}],[\"消息默认持久化到磁盘\",{\"1\":{\"653\":1}}],[\"消息去重\",{\"1\":{\"653\":1}}],[\"消息重试机制\",{\"1\":{\"641\":1}}],[\"消息重复消费\",{\"1\":{\"634\":1,\"637\":1}}],[\"消息压缩\",{\"1\":{\"636\":1}}],[\"消息队列有点多\",{\"1\":{\"1062\":1}}],[\"消息队列kafka\",{\"1\":{\"1060\":1}}],[\"消息队列需要\",{\"1\":{\"1052\":1}}],[\"消息队列的作用\",{\"0\":{\"1052\":1}}],[\"消息队列发送失败\",{\"1\":{\"638\":1}}],[\"消息队列等依赖服务是否正常运行\",{\"1\":{\"655\":1}}],[\"消息队列等场景\",{\"1\":{\"651\":1}}],[\"消息队列等\",{\"1\":{\"638\":1,\"644\":1}}],[\"消息队列并非必需\",{\"1\":{\"637\":1}}],[\"消息队列可以解耦系统\",{\"1\":{\"637\":1}}],[\"消息队列是架构中最常见的中间件之一\",{\"1\":{\"1068\":1}}],[\"消息队列是一个管道\",{\"1\":{\"1053\":1}}],[\"消息队列是一种通信机制\",{\"1\":{\"637\":1}}],[\"消息队列是什么\",{\"1\":{\"565\":1,\"637\":2}}],[\"消息队列\",{\"1\":{\"635\":1,\"644\":2,\"655\":1,\"1019\":1,\"1051\":1}}],[\"消息路由\",{\"1\":{\"634\":1}}],[\"消息丢失\",{\"1\":{\"634\":1}}],[\"消息幂等性\",{\"1\":{\"614\":1,\"686\":1}}],[\"穿透\",{\"1\":{\"564\":1,\"636\":2}}],[\"雪崩效应\",{\"1\":{\"1165\":1}}],[\"雪崩怎么解决\",{\"1\":{\"598\":1,\"670\":1}}],[\"雪崩\",{\"1\":{\"564\":1,\"636\":2}}],[\"雪球库libstemmer库的绑定\",{\"1\":{\"144\":1}}],[\"红黑树结合的方式存储数据\",{\"1\":{\"641\":1}}],[\"红黑树有什么好处\",{\"1\":{\"593\":1,\"665\":1}}],[\"红黑树\",{\"1\":{\"562\":1,\"573\":1,\"634\":3,\"645\":1}}],[\"红色感叹号\",{\"1\":{\"22\":1}}],[\"拉模式让消费者可以主动请求数据\",{\"1\":{\"634\":1}}],[\"拉模式的好处\",{\"1\":{\"634\":1}}],[\"拉模式\",{\"1\":{\"634\":1}}],[\"拉链法如何优化\",{\"1\":{\"603\":1,\"675\":1}}],[\"拉链法的优缺点\",{\"1\":{\"603\":1,\"675\":1}}],[\"拉的模式有什么好处\",{\"1\":{\"562\":1,\"634\":1}}],[\"拉取mysql镜像\",{\"1\":{\"775\":1}}],[\"拉取到本地\",{\"1\":{\"1185\":1}}],[\"拉取到\",{\"1\":{\"58\":2}}],[\"拉取\",{\"1\":{\"17\":1,\"1187\":1}}],[\"架构简单\",{\"1\":{\"1072\":1}}],[\"架构优化\",{\"1\":{\"799\":1}}],[\"架构\",{\"1\":{\"562\":1,\"634\":4,\"1006\":1,\"1038\":1}}],[\"架构图\",{\"1\":{\"74\":2}}],[\"腾讯云等\",{\"1\":{\"655\":1}}],[\"腾讯云智\",{\"0\":{\"568\":1,\"640\":1}}],[\"腾讯面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"腾讯后台秋招面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"腾讯校招面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"腾讯外包\",{\"0\":{\"580\":1,\"652\":1}}],[\"腾讯互娱面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"腾讯互娱\",{\"0\":{\"579\":1,\"651\":1}}],[\"腾讯音乐\",{\"0\":{\"574\":1,\"646\":1}}],[\"腾讯\",{\"0\":{\"571\":1,\"643\":1},\"1\":{\"1107\":1}}],[\"腾讯qq二面\",{\"0\":{\"567\":1,\"639\":1}}],[\"腾讯qq一面\",{\"0\":{\"566\":1,\"638\":1}}],[\"腾讯三面\",{\"0\":{\"565\":1,\"637\":1}}],[\"腾讯二面\",{\"0\":{\"562\":1,\"564\":1,\"634\":1,\"636\":1}}],[\"腾讯一面\",{\"0\":{\"561\":1,\"563\":1,\"633\":1,\"635\":1}}],[\"试图获取写锁进行\",{\"1\":{\"557\":1}}],[\"试图进行指针运算\",{\"1\":{\"276\":1}}],[\"休眠2秒\",{\"1\":{\"557\":1}}],[\"黑色\",{\"1\":{\"551\":1}}],[\"灰色\",{\"1\":{\"551\":1}}],[\"白色\",{\"1\":{\"551\":1}}],[\"尽快的分析和排查出执行效率较慢的sql\",{\"1\":{\"813\":1}}],[\"尽可能选择范围小的数据类型\",{\"1\":{\"720\":1}}],[\"尽可能利用cpu资源\",{\"1\":{\"651\":1}}],[\"尽量使用覆盖索引\",{\"1\":{\"818\":1}}],[\"尽量调整表字段数少而精\",{\"1\":{\"788\":1}}],[\"尽量控制表字段数量\",{\"0\":{\"788\":1}}],[\"尽量不用text\",{\"1\":{\"787\":1}}],[\"尽量避免limit\",{\"1\":{\"653\":1}}],[\"尽量避免长时间停顿应用\",{\"1\":{\"635\":1}}],[\"尽量避免在接口类型的集合中进行频繁的类型转换操作\",{\"1\":{\"633\":1}}],[\"尽量避免在性能关键路径中频繁使用\",{\"1\":{\"633\":1}}],[\"尽量避免返回局部变量的地址\",{\"1\":{\"549\":1}}],[\"尽量将变量分配到栈上\",{\"1\":{\"549\":1}}],[\"尽管\",{\"1\":{\"1307\":1}}],[\"尽管它们可能是相同的\",{\"1\":{\"653\":1}}],[\"尽管它只有三个字段\",{\"1\":{\"273\":1}}],[\"尽管可以存储任意类型\",{\"1\":{\"441\":1}}],[\"尽管可以顺利运行\",{\"1\":{\"417\":1}}],[\"尽管代码很少\",{\"1\":{\"437\":1}}],[\"尽管上下文到期会自动取消\",{\"1\":{\"428\":1}}],[\"尽管父级cancelctx在取消的同时会取消它的子上下文\",{\"1\":{\"427\":1}}],[\"尽管go中的短变量声明有点类似动态语言的写法\",{\"1\":{\"381\":1}}],[\"瞬间飙升很高\",{\"1\":{\"548\":1}}],[\"⭐什么是acl\",{\"0\":{\"1255\":1}}],[\"⭐内存\",{\"0\":{\"547\":1}}],[\"⭐gin\",{\"0\":{\"113\":1}}],[\"偶数协程\",{\"1\":{\"545\":2}}],[\"偶协程传递信号过来\",{\"1\":{\"545\":1}}],[\"奇数协程\",{\"1\":{\"545\":2}}],[\"极低的发布延迟和端到端延迟\",{\"1\":{\"1056\":1}}],[\"极低的上下文切换成本使得可以处理大量的并发任务\",{\"1\":{\"542\":1}}],[\"极端并发场景要合理设置gomaxprocs\",{\"1\":{\"542\":1}}],[\"栈等\",{\"1\":{\"649\":1}}],[\"栈内存分配和回收速度快\",{\"1\":{\"636\":1}}],[\"栈\",{\"1\":{\"635\":1,\"636\":2}}],[\"栈分配\",{\"1\":{\"635\":1}}],[\"栈的大小初始只有2kb\",{\"1\":{\"540\":1}}],[\"栈空间不足时\",{\"1\":{\"319\":1}}],[\"协助客户端动态定位适当的后端服务\",{\"1\":{\"1071\":1}}],[\"协议中立\",{\"1\":{\"1321\":1}}],[\"协议下发行\",{\"1\":{\"1107\":1}}],[\"协议转换\",{\"1\":{\"1071\":1}}],[\"协议保持集群状态的一致性\",{\"1\":{\"1006\":1}}],[\"协议对数据进行加密\",{\"1\":{\"641\":1}}],[\"协议加密传输\",{\"1\":{\"641\":1}}],[\"协议进行前后端通信\",{\"1\":{\"637\":1}}],[\"协议\",{\"1\":{\"634\":1,\"637\":1,\"908\":1}}],[\"协作式\",{\"1\":{\"540\":1}}],[\"协程可以通过通道传递数据来协调工作\",{\"1\":{\"651\":1}}],[\"协程间信息同步\",{\"1\":{\"651\":1}}],[\"协程间信息如何同步\",{\"1\":{\"579\":1,\"651\":2}}],[\"协程通常在同一个线程中运行\",{\"1\":{\"649\":1}}],[\"协程通过调度器管理并发执行\",{\"1\":{\"641\":1}}],[\"协程通过channel进行通信\",{\"1\":{\"540\":1}}],[\"协程则通过单线程来实现多任务\",{\"1\":{\"645\":1}}],[\"协程更轻便\",{\"1\":{\"645\":1}}],[\"协程由\",{\"1\":{\"639\":1}}],[\"协程的优点在于其轻量性\",{\"1\":{\"649\":1}}],[\"协程的开销远小于线程\",{\"1\":{\"639\":1}}],[\"协程的创建和销毁开销小\",{\"1\":{\"639\":1}}],[\"协程的区别\",{\"1\":{\"564\":1,\"636\":2}}],[\"协程切换开销小\",{\"1\":{\"636\":1}}],[\"协程了解吗\",{\"1\":{\"622\":1,\"694\":1}}],[\"协程池限制了同时运行的协程数量\",{\"1\":{\"633\":1}}],[\"协程池主要用于控制和复用大量的轻量级线程\",{\"1\":{\"633\":1}}],[\"协程池使用的是第三方包吗\",{\"1\":{\"620\":1,\"692\":1}}],[\"协程池的作用\",{\"1\":{\"561\":1,\"617\":1,\"633\":2,\"689\":1}}],[\"协程区别\",{\"1\":{\"619\":1,\"691\":1}}],[\"协程创建后如何调度\",{\"1\":{\"600\":1,\"672\":1}}],[\"协程有上下文切换为何线程消耗更多cpu资源\",{\"1\":{\"577\":1,\"649\":3}}],[\"协程有自己的寄存器上下文和栈\",{\"1\":{\"539\":1}}],[\"协程和线程的区别\",{\"1\":{\"577\":1,\"649\":2}}],[\"协程+channel提供简易的并发模型\",{\"1\":{\"542\":1}}],[\"协程+工作窃取\",{\"1\":{\"542\":1}}],[\"协程在上面的开销很低\",{\"1\":{\"540\":1}}],[\"协程与线程的区别\",{\"0\":{\"540\":1},\"1\":{\"649\":1}}],[\"协程与线程进程区别是什么\",{\"1\":{\"538\":1}}],[\"协程调度切换是有runtime控制的\",{\"1\":{\"539\":1}}],[\"协程调度的gmp模型是怎么样的\",{\"1\":{\"538\":1}}],[\"协程之间的通讯是怎么样的\",{\"1\":{\"538\":1}}],[\"协程是轻量级的执行单元\",{\"1\":{\"639\":1}}],[\"协程是比线程更轻量的执行单元\",{\"1\":{\"636\":1}}],[\"协程是由go运行时调度\",{\"1\":{\"540\":1}}],[\"协程是什么意思\",{\"1\":{\"573\":1,\"645\":2}}],[\"协程是什么\",{\"1\":{\"538\":1}}],[\"协程是并发执行的\",{\"1\":{\"412\":1}}],[\"协程并发执行的的顺序更加可控\",{\"1\":{\"422\":1}}],[\"协程对于管道的操作是同步的\",{\"1\":{\"415\":1}}],[\"协程这一概念并非go首次提出\",{\"1\":{\"412\":1}}],[\"协程\",{\"0\":{\"412\":1},\"1\":{\"321\":1,\"412\":1,\"537\":1,\"579\":1,\"595\":1,\"618\":1,\"633\":1,\"641\":1,\"645\":2,\"649\":2,\"651\":3,\"667\":1,\"690\":1}}],[\"协程状态\",{\"1\":{\"315\":1}}],[\"严格来说和\",{\"1\":{\"1072\":1}}],[\"严格来说发生类型强转都会发生内存拷贝\",{\"1\":{\"537\":1}}],[\"严格区分大小写\",{\"1\":{\"178\":1}}],[\"问\",{\"1\":{\"901\":1,\"1012\":1}}],[\"问答\",{\"1\":{\"655\":1}}],[\"问我还有没有别的\",{\"1\":{\"615\":1,\"687\":1}}],[\"问可以接受go语言吗\",{\"1\":{\"573\":1,\"645\":1}}],[\"问题解决\",{\"1\":{\"825\":1}}],[\"问题描述\",{\"1\":{\"654\":2}}],[\"问题要求找出数组中和最大的连续子数组\",{\"1\":{\"645\":1}}],[\"问题\",{\"1\":{\"634\":1,\"637\":1,\"649\":1,\"1163\":1,\"1289\":1}}],[\"问题2\",{\"1\":{\"537\":2,\"654\":1}}],[\"问题1\",{\"1\":{\"537\":2,\"654\":1}}],[\"问号\",{\"1\":{\"22\":1}}],[\"彼此独立\",{\"1\":{\"529\":1}}],[\"彼得罗维奇\",{\"1\":{\"144\":1}}],[\"您需要安装go并首先设置go工作区\",{\"1\":{\"1274\":1}}],[\"您可以通过组合可用模型来定制自己的访问控制模型\",{\"1\":{\"1249\":1}}],[\"您可以使⽤以下⽅法导⼊和导出包以重⽤导出的函数或类型\",{\"1\":{\"525\":1}}],[\"您应该先通过\",{\"1\":{\"988\":1}}],[\"您通往知识的大门\",{\"1\":{\"73\":1}}],[\"源码注释比较明确\",{\"1\":{\"1273\":1}}],[\"源码分析\",{\"1\":{\"1164\":1}}],[\"源码是java\",{\"1\":{\"1054\":1}}],[\"源⽂件都属于⼀个包\",{\"1\":{\"525\":1}}],[\"源⽂件中的每个函数\",{\"1\":{\"525\":1}}],[\"源⽂件或其他包的⽬录\",{\"1\":{\"525\":1}}],[\"源代码仓库可公开访问\",{\"1\":{\"443\":1}}],[\"源代码如下\",{\"1\":{\"434\":1}}],[\"⼯作区中包含\",{\"1\":{\"525\":1}}],[\"博客地址\",{\"1\":{\"523\":1}}],[\"⾃动垃圾收集明显⽐\",{\"1\":{\"522\":1}}],[\"场景设计题\",{\"1\":{\"520\":1}}],[\"聊一聊乐观锁和悲观锁\",{\"1\":{\"606\":1,\"678\":1}}],[\"聊聊项目和进阶八股文🌟\",{\"1\":{\"520\":1}}],[\"聊几道基础八股文⭐\",{\"1\":{\"520\":1}}],[\"面向记录\",{\"1\":{\"1018\":1}}],[\"面向连接的\",{\"1\":{\"651\":1}}],[\"面向微服务架构设计\",{\"1\":{\"119\":1}}],[\"面经详解跳转链接\",{\"0\":{\"626\":1,\"698\":1}}],[\"面试题\",{\"0\":{\"632\":1}}],[\"面试官说要短的\",{\"1\":{\"625\":1,\"697\":1}}],[\"面试官举了个例子表示对redis递减防止超卖的不理解\",{\"1\":{\"593\":1,\"665\":1}}],[\"面试官介绍岗位\",{\"1\":{\"575\":1,\"647\":1}}],[\"面试官会问有什么想问的\",{\"1\":{\"520\":1}}],[\"面试流程\",{\"0\":{\"520\":1}}],[\"屏蔽内部实现细节\",{\"1\":{\"516\":1}}],[\"屏蔽其内部实现\",{\"1\":{\"293\":1}}],[\"隐式实现\",{\"1\":{\"516\":1,\"635\":1}}],[\"隐藏文件夹就是我们的本地仓库\",{\"1\":{\"17\":1}}],[\"隐藏文件夹\",{\"1\":{\"14\":1}}],[\"触发策略\",{\"0\":{\"981\":1}}],[\"触发器等\",{\"1\":{\"775\":1}}],[\"触发重试机制\",{\"1\":{\"653\":1}}],[\"触发机制之类的\",{\"1\":{\"580\":1,\"652\":1}}],[\"触发\",{\"1\":{\"514\":1}}],[\"按访问url的hash结果来分配请求\",{\"1\":{\"1166\":1}}],[\"按两次的\",{\"1\":{\"851\":1}}],[\"按enter键之后显示\",{\"1\":{\"851\":1}}],[\"按如下方式输入\",{\"1\":{\"851\":1}}],[\"按\",{\"1\":{\"633\":1}}],[\"按后进先出的顺序执行延迟调用\",{\"1\":{\"514\":1}}],[\"按栈顺序执行\",{\"1\":{\"514\":1}}],[\"按照服务器端的响应时间来分配请求\",{\"1\":{\"1168\":1}}],[\"按照谁发现谁去处理的原则\",{\"1\":{\"999\":1}}],[\"按照某列进行排序\",{\"1\":{\"861\":1}}],[\"按照年龄排序\",{\"1\":{\"861\":1}}],[\"按照那种方式排序\",{\"1\":{\"813\":1}}],[\"按照单表1g体积\",{\"1\":{\"788\":1}}],[\"按照这个说一下类的加载过程\",{\"1\":{\"598\":1,\"670\":1}}],[\"按照字母表顺序输出\",{\"1\":{\"561\":1,\"617\":1,\"633\":2,\"689\":1}}],[\"按照字节来遍历会把中文字符拆开\",{\"1\":{\"258\":1}}],[\"按照规范是在项目cmd\",{\"1\":{\"446\":1}}],[\"按照常理来说应该这样使用\",{\"1\":{\"306\":1}}],[\"按照直觉来说\",{\"1\":{\"306\":1}}],[\"按照使用者的初衷来说\",{\"1\":{\"285\":1}}],[\"按照计算机科学的术语来讲是用于表达源代码中一个固定值的符号\",{\"1\":{\"180\":1}}],[\"按照附件的\",{\"1\":{\"13\":1}}],[\"捕获\",{\"1\":{\"635\":1}}],[\"捕获到为止\",{\"1\":{\"635\":1}}],[\"捕获异常使用defer结合recover使用\",{\"1\":{\"514\":1}}],[\"捕获painc\",{\"1\":{\"514\":1}}],[\"捕获错误并恢复等场景\",{\"1\":{\"514\":1}}],[\"捕获的是变量的引用而不是值\",{\"1\":{\"514\":1}}],[\"坑位\",{\"1\":{\"514\":1}}],[\"坑\",{\"1\":{\"514\":1}}],[\"甚至会触发磁盘空间不足的报警\",{\"1\":{\"1307\":1}}],[\"甚至你可以自己来实现路由规则\",{\"1\":{\"1053\":1}}],[\"甚至更好些\",{\"1\":{\"1038\":1}}],[\"甚至匿名函数后加括号表示运行后的结果作为参数\",{\"1\":{\"514\":1}}],[\"甚至没法删除该键值对\",{\"1\":{\"262\":1}}],[\"参考浮点数精度\",{\"1\":{\"1392\":1}}],[\"参考浮点数格式化类型\",{\"1\":{\"1392\":1}}],[\"参考文档\",{\"1\":{\"1073\":1}}],[\"参考\",{\"1\":{\"803\":1}}],[\"参考网站\",{\"1\":{\"802\":1,\"805\":1}}],[\"参考数据类型和硬件\",{\"1\":{\"513\":1}}],[\"参与了多个性能优化和问题排查项目\",{\"1\":{\"655\":1}}],[\"参加过开源项目吗\",{\"1\":{\"599\":1,\"671\":1}}],[\"参加的比赛\",{\"1\":{\"599\":1,\"671\":1}}],[\"参数文档\",{\"1\":{\"1289\":1}}],[\"参数在路径上面\",{\"1\":{\"1280\":1}}],[\"参数配置\",{\"0\":{\"1151\":1,\"1152\":1}}],[\"参数保持兼容\",{\"1\":{\"1133\":1}}],[\"参数位于$args\",{\"1\":{\"1133\":1}}],[\"参数等进行分发\",{\"1\":{\"1071\":1}}],[\"参数类型\",{\"1\":{\"1000\":1}}],[\"参数覆写给定\",{\"1\":{\"970\":1}}],[\"参数justone\",{\"1\":{\"860\":1}}],[\"参数multi\",{\"1\":{\"859\":1}}],[\"参数update\",{\"1\":{\"859\":1}}],[\"参数query\",{\"1\":{\"859\":1,\"860\":1}}],[\"参数详解\",{\"1\":{\"814\":1}}],[\"参数说明\",{\"1\":{\"813\":1,\"965\":1}}],[\"参数暴露在\",{\"1\":{\"638\":1}}],[\"参数用于运行基准测试\",{\"1\":{\"630\":1}}],[\"参数求值时机\",{\"1\":{\"514\":1}}],[\"参数或返回值可以直接定义类型\",{\"1\":{\"514\":1}}],[\"参数改变\",{\"1\":{\"498\":1}}],[\"参数预计算\",{\"0\":{\"285\":1}}],[\"参数列表\",{\"1\":{\"278\":2}}],[\"参数列表数量\",{\"1\":{\"221\":2}}],[\"参数验证\",{\"0\":{\"1288\":1},\"1\":{\"111\":1}}],[\"参数\",{\"0\":{\"279\":1,\"1417\":1},\"1\":{\"4\":1,\"469\":1,\"496\":1,\"514\":1,\"813\":1,\"993\":1,\"1188\":2}}],[\"弱化了面向对象的功能不属于传统的oop语言\",{\"1\":{\"513\":1}}],[\"删\",{\"1\":{\"512\":1}}],[\"删除在s内第一次出现的子串sep\",{\"1\":{\"1400\":1}}],[\"删除令牌\",{\"1\":{\"1226\":1}}],[\"删除本地的镜像\",{\"1\":{\"1187\":1}}],[\"删除本地tag\",{\"1\":{\"58\":1}}],[\"删除镜像\",{\"1\":{\"1187\":1}}],[\"删除失效消息\",{\"1\":{\"1057\":1}}],[\"删除topic\",{\"1\":{\"1034\":1}}],[\"删除topic信息\",{\"1\":{\"1034\":1}}],[\"删除从节点8008\",{\"1\":{\"1010\":1}}],[\"删除主节点\",{\"1\":{\"1010\":1}}],[\"删除主\",{\"1\":{\"1010\":1}}],[\"删除的key\",{\"1\":{\"967\":1}}],[\"删除的⽂档的条件\",{\"1\":{\"860\":1}}],[\"删除权值在min和max区间的元素\",{\"1\":{\"951\":1}}],[\"删除map的一个字段\",{\"1\":{\"928\":1}}],[\"删除键\",{\"0\":{\"915\":1,\"928\":1}}],[\"删除数据\",{\"1\":{\"896\":1}}],[\"删除所有索引索引\",{\"1\":{\"862\":1}}],[\"删除所有元素\",{\"1\":{\"246\":1}}],[\"删除集合中所有记录\",{\"1\":{\"857\":1}}],[\"删除集合\",{\"1\":{\"857\":1}}],[\"删除当前数据库\",{\"1\":{\"856\":1}}],[\"删除当前目录下所有的文件与子目录\",{\"1\":{\"405\":2}}],[\"删除索引\",{\"1\":{\"810\":1}}],[\"删除文档\",{\"0\":{\"750\":1,\"837\":1}}],[\"删除文件\",{\"1\":{\"26\":1,\"55\":1}}],[\"删除若干个指定的索引\",{\"1\":{\"707\":1}}],[\"删除缓存操作可以异步执行\",{\"1\":{\"644\":1}}],[\"删除存储在\",{\"1\":{\"641\":1}}],[\"删除操作较慢\",{\"1\":{\"635\":1}}],[\"删除操作相较于其他操作要简单的多\",{\"1\":{\"405\":1}}],[\"删除指定子串\",{\"0\":{\"1400\":1}}],[\"删除指定排名区间的元素\",{\"1\":{\"951\":1}}],[\"删除指定范围的元素\",{\"1\":{\"937\":1}}],[\"删除指定元素\",{\"1\":{\"937\":1,\"944\":1,\"951\":1}}],[\"删除指定索引\",{\"1\":{\"862\":1}}],[\"删除指定的key这项\",{\"1\":{\"558\":1}}],[\"删除指定目录的所有文件和目录包括子目录与子文件\",{\"1\":{\"405\":1}}],[\"删除一个键值对\",{\"1\":{\"436\":2}}],[\"删除一个键值对需要用到内置函数delete\",{\"1\":{\"262\":1}}],[\"删除成功\",{\"1\":{\"405\":2}}],[\"删除单个文件或者空目录\",{\"1\":{\"405\":1}}],[\"删除元素\",{\"0\":{\"246\":1,\"937\":1,\"942\":1,\"944\":1,\"951\":1}}],[\"删除远程tag\",{\"1\":{\"58\":1}}],[\"删除远程仓库分支\",{\"1\":{\"58\":1}}],[\"删除分支\",{\"1\":{\"58\":1}}],[\"删除\",{\"0\":{\"262\":1,\"405\":1,\"707\":1,\"712\":1,\"883\":1,\"896\":1},\"1\":{\"55\":1,\"494\":1,\"651\":1,\"841\":1,\"887\":1,\"1188\":1,\"1278\":1}}],[\"删除之后需要提交\",{\"1\":{\"27\":1}}],[\"超出限制的请求直接拒绝\",{\"1\":{\"1155\":1}}],[\"超出会自动扩容\",{\"1\":{\"511\":1}}],[\"超过访问频次而且缓冲区也满了的时候就会直接返回503\",{\"1\":{\"1151\":1}}],[\"超过了访问频次限制的请求可以先放到这个缓冲区内\",{\"1\":{\"1151\":1}}],[\"超过最大请求数的请求会被拒绝\",{\"1\":{\"1148\":1}}],[\"超过这个大小会自动创建一个新的segment\",{\"1\":{\"1029\":1}}],[\"超文本传输协议\",{\"1\":{\"641\":1}}],[\"超卖问题通常发生在并发访问时\",{\"1\":{\"644\":1}}],[\"超卖问题是怎么发现的\",{\"1\":{\"607\":1,\"679\":1}}],[\"超卖问题还有什么别的解决方案呢\",{\"1\":{\"606\":1,\"678\":1}}],[\"超时自动释放锁\",{\"1\":{\"653\":1}}],[\"超时设置\",{\"1\":{\"634\":1}}],[\"超时\",{\"1\":{\"421\":2}}],[\"超时过后便会退出循环\",{\"1\":{\"421\":1}}],[\"超时就会认为消息不可达\",{\"1\":{\"82\":1}}],[\"短文件名称\",{\"1\":{\"1341\":1}}],[\"短时间内造成数据量快速增长\",{\"1\":{\"794\":1}}],[\"短连接则是指每次执行完很少的几次查询就断开连接\",{\"1\":{\"776\":1}}],[\"短信生成方法\",{\"1\":{\"625\":1,\"697\":1}}],[\"短信发送失败怎么处理的\",{\"1\":{\"624\":1,\"696\":1}}],[\"短声明可直接使用\",{\"1\":{\"511\":1}}],[\"短变量声明\",{\"1\":{\"512\":1}}],[\"短变量声明方式无法对一个已存在的变量使用\",{\"1\":{\"206\":1}}],[\"短变量声明可以批量初始化\",{\"1\":{\"206\":1}}],[\"短变量初始化不能使用nil\",{\"1\":{\"206\":1}}],[\"短变量初始化\",{\"1\":{\"206\":1}}],[\"圣经\",{\"1\":{\"506\":1}}],[\"保留旧文件的最大个数\",{\"1\":{\"1307\":1}}],[\"保留旧文件的最大天数\",{\"1\":{\"1307\":1}}],[\"保留指定范围的元素\",{\"1\":{\"937\":1}}],[\"保护服务资源\",{\"1\":{\"1163\":1}}],[\"保护模式启动\",{\"1\":{\"1010\":1}}],[\"保存大小\",{\"1\":{\"1309\":1}}],[\"保存方式\",{\"1\":{\"1309\":1}}],[\"保存方法\",{\"1\":{\"881\":2}}],[\"保存文件\",{\"1\":{\"1281\":1}}],[\"保存收集流数据\",{\"1\":{\"1019\":1}}],[\"保存的间隔默认为一秒钟\",{\"1\":{\"988\":1}}],[\"保存数据失败\",{\"1\":{\"881\":2,\"882\":2,\"883\":2}}],[\"保存\",{\"0\":{\"879\":1}}],[\"保持测试代码的简洁和内部结构的稳定性\",{\"1\":{\"504\":1}}],[\"保证流畅使用\",{\"1\":{\"1217\":1}}],[\"保证环境是符合要求\",{\"1\":{\"1184\":1}}],[\"保证查询至少达到range级别\",{\"1\":{\"814\":1}}],[\"保证表里互相不存在\",{\"1\":{\"795\":1}}],[\"保证被驱动表的连接列上有索引\",{\"1\":{\"795\":1}}],[\"保证发送方不会超出接收方的接收能力\",{\"1\":{\"651\":1}}],[\"保证数据不会丢失\",{\"1\":{\"1007\":1}}],[\"保证数据库表中每一行数据的唯一性\",{\"1\":{\"809\":1}}],[\"保证数据传输的顺序和完整性\",{\"1\":{\"651\":1}}],[\"保证数据的安全性和完整性\",{\"1\":{\"641\":1}}],[\"保证数据的完整性和查询效率\",{\"1\":{\"638\":1}}],[\"保证读取的数据不会发生变化\",{\"1\":{\"641\":1}}],[\"保证缓存和数据库的一致性\",{\"1\":{\"641\":1}}],[\"保证订单的正常流转\",{\"1\":{\"638\":1}}],[\"保证当前事务中查询的范围加锁\",{\"1\":{\"614\":1,\"686\":1}}],[\"保证线程安全用什么map\",{\"1\":{\"590\":1,\"662\":1}}],[\"保证负载均衡\",{\"1\":{\"542\":1}}],[\"保证了可靠性\",{\"1\":{\"1018\":1}}],[\"保证了更高的查询效率\",{\"1\":{\"649\":1}}],[\"保证了调用方看到的文档示例中的输出结果一定是正确的\",{\"1\":{\"505\":1}}],[\"保证了数据的正确性\",{\"1\":{\"431\":1}}],[\"保证与2\",{\"1\":{\"144\":1}}],[\"保证与版本50\",{\"1\":{\"144\":1}}],[\"纳秒\",{\"1\":{\"498\":1,\"1429\":1}}],[\"阻塞直到有值发送过来\",{\"1\":{\"1047\":1}}],[\"阻塞直到所有任务完成\",{\"1\":{\"545\":1}}],[\"阻塞让消费一直处于监听状态\",{\"1\":{\"1036\":1}}],[\"阻塞状态\",{\"1\":{\"1034\":2}}],[\"阻塞到这里知道\",{\"1\":{\"545\":1}}],[\"阻塞\",{\"1\":{\"497\":1}}],[\"阻塞等待下一个连接建立\",{\"1\":{\"1374\":1}}],[\"阻塞等待函数f执行完毕后才会返回\",{\"1\":{\"473\":1}}],[\"阻塞等待条件生效\",{\"1\":{\"432\":1}}],[\"阻塞等待其他协程来读取数据\",{\"1\":{\"418\":1}}],[\"阻塞等待其他协程写入数据\",{\"1\":{\"418\":1}}],[\"阻塞等待读取\",{\"1\":{\"417\":1}}],[\"次变化\",{\"1\":{\"981\":1}}],[\"次调用的平均值\",{\"1\":{\"498\":1}}],[\"次\",{\"1\":{\"497\":1}}],[\"秒级时间间隔\",{\"1\":{\"1303\":1}}],[\"秒内\",{\"1\":{\"981\":4}}],[\"秒\",{\"1\":{\"497\":1,\"498\":1,\"911\":3,\"1000\":1,\"1055\":2,\"1057\":4,\"1429\":2}}],[\"仔细观察\",{\"1\":{\"494\":1}}],[\"个地址\",{\"1\":{\"1197\":1}}],[\"个消费者实例去消费\",{\"1\":{\"1027\":1}}],[\"个哈希槽\",{\"1\":{\"1006\":1,\"1007\":1}}],[\"个节点组成\",{\"1\":{\"996\":1}}],[\"个元素\",{\"1\":{\"649\":2}}],[\"个元素结尾的最大子数组和\",{\"1\":{\"645\":1}}],[\"个人资料管理等\",{\"1\":{\"644\":1}}],[\"个人机器上运行多个服务可能导致资源竞争\",{\"1\":{\"638\":1}}],[\"个字节\",{\"1\":{\"554\":7}}],[\"个\",{\"1\":{\"494\":2,\"1020\":1}}],[\"个不同的\",{\"1\":{\"494\":1}}],[\"个测试用例合并到了一起\",{\"1\":{\"494\":1}}],[\"个测试用例\",{\"1\":{\"494\":1}}],[\"却写了\",{\"1\":{\"494\":1}}],[\"却连s1也一起修改了\",{\"1\":{\"250\":1}}],[\"修剪字符串右端后缀\",{\"1\":{\"1410\":1}}],[\"修剪字符串右端\",{\"1\":{\"1410\":1}}],[\"修剪字符串左端前缀\",{\"1\":{\"1410\":1}}],[\"修剪字符串左端\",{\"1\":{\"1410\":1}}],[\"修剪字符串两端\",{\"1\":{\"1410\":1}}],[\"修剪字符串\",{\"0\":{\"1410\":1}}],[\"修复数据库\",{\"1\":{\"856\":1}}],[\"修正失败用例\",{\"0\":{\"492\":1}}],[\"修改numsref1切片的数据\",{\"1\":{\"1446\":1}}],[\"修改权限规则需要开发接入\",{\"1\":{\"1240\":1}}],[\"修改权值\",{\"0\":{\"950\":1}}],[\"修改两个位置\",{\"1\":{\"1228\":1}}],[\"修改容器引擎\",{\"0\":{\"1223\":1}}],[\"修改配置yum文件\",{\"1\":{\"1222\":1}}],[\"修改配置文件\",{\"1\":{\"986\":2,\"1228\":1}}],[\"修改配置文件c\",{\"0\":{\"871\":1}}],[\"修改以后记得重启翻方可生效\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"修改worker\",{\"1\":{\"1128\":1}}],[\"修改代码\",{\"0\":{\"1092\":1}}],[\"修改前\",{\"1\":{\"1087\":1}}],[\"修改如下内容\",{\"1\":{\"1078\":1}}],[\"修改传入请求或传出响应的结构\",{\"1\":{\"1071\":1}}],[\"修改端口\",{\"1\":{\"1010\":1}}],[\"修改元素\",{\"0\":{\"934\":1}}],[\"修改比较困难\",{\"1\":{\"904\":1}}],[\"修改为\",{\"1\":{\"1234\":1}}],[\"修改为主讲的ip地址\",{\"1\":{\"1010\":1}}],[\"修改为每页显示50条记录\",{\"1\":{\"855\":1}}],[\"修改为可以查找9301\",{\"1\":{\"770\":1}}],[\"修改为如下代码\",{\"1\":{\"420\":1}}],[\"修改第三个解压包的配置文件如下\",{\"1\":{\"770\":1}}],[\"修改第二个节点的配置\",{\"1\":{\"769\":1}}],[\"修改切片元素时可能会影响到其他切片\",{\"1\":{\"633\":1}}],[\"修改切片的长度时\",{\"1\":{\"633\":1}}],[\"修改切片会导致原数组内容的变化\",{\"1\":{\"241\":1}}],[\"修改这个会影响其他引用\",{\"1\":{\"529\":1}}],[\"修改\",{\"0\":{\"882\":1},\"1\":{\"494\":1,\"882\":2,\"883\":2,\"967\":2,\"985\":1,\"1034\":1,\"1278\":1}}],[\"修改测试次数为2\",{\"1\":{\"471\":1}}],[\"修改go\",{\"1\":{\"463\":1}}],[\"修改main\",{\"1\":{\"453\":1}}],[\"修改完上面配置后\",{\"1\":{\"769\":1}}],[\"修改完成上面的配置后\",{\"1\":{\"768\":1}}],[\"修改完成后\",{\"1\":{\"12\":1,\"770\":1}}],[\"修改完代理后\",{\"1\":{\"452\":1}}],[\"修改数据存储的目录\",{\"1\":{\"1010\":1}}],[\"修改数据库后\",{\"1\":{\"644\":1}}],[\"修改数据\",{\"1\":{\"429\":1,\"430\":1,\"748\":1}}],[\"修改值\",{\"1\":{\"368\":1}}],[\"修改字段值\",{\"1\":{\"368\":2}}],[\"修改字段\",{\"0\":{\"368\":1}}],[\"修改字节切片\",{\"1\":{\"254\":1}}],[\"修改过后就可以通过编译了\",{\"1\":{\"340\":1}}],[\"修改一下模拟的函数\",{\"1\":{\"327\":1}}],[\"修改别人的代码\",{\"1\":{\"53\":1}}],[\"修改后会自动分配一个端口\",{\"1\":{\"1235\":1}}],[\"修改后直接\",{\"1\":{\"1235\":1}}],[\"修改后直接提交推送即可成功\",{\"1\":{\"52\":1}}],[\"修改后\",{\"1\":{\"1087\":1}}],[\"修改后的代码如下\",{\"1\":{\"400\":1,\"474\":1}}],[\"修改后将代码提交到中央服务器远程仓库\",{\"1\":{\"11\":1}}],[\"修改了\",{\"1\":{\"22\":1,\"286\":1}}],[\"修改文件\",{\"0\":{\"21\":1,\"23\":1},\"1\":{\"23\":1}}],[\"普通用户\",{\"1\":{\"1241\":1}}],[\"普通索引index\",{\"1\":{\"809\":1}}],[\"普通索引以\",{\"1\":{\"795\":1}}],[\"普通索引是非聚簇索引\",{\"1\":{\"641\":1}}],[\"普通索引\",{\"1\":{\"641\":1,\"810\":1}}],[\"普通测试方法\",{\"0\":{\"490\":1}}],[\"普通字符串由\",{\"1\":{\"252\":1}}],[\"普通字符串\",{\"1\":{\"252\":1,\"510\":1}}],[\"四舍五入\",{\"0\":{\"1355\":1}}],[\"四次挥手关闭连接\",{\"1\":{\"651\":1}}],[\"四次挥手\",{\"1\":{\"579\":1,\"618\":1,\"619\":1,\"641\":1,\"651\":2,\"690\":1,\"691\":1}}],[\"四次的话多余了前面两次可确保双方建立连接3次以上多余就会浪费资源\",{\"1\":{\"82\":1}}],[\"四\",{\"0\":{\"578\":1,\"650\":1,\"861\":1}}],[\"四种函数\",{\"0\":{\"483\":1}}],[\"究其原因在于go在字符串单位是字节\",{\"1\":{\"477\":1}}],[\"�\",{\"1\":{\"477\":4}}],[\"𐑄\",{\"1\":{\"477\":7}}],[\"取反运算\",{\"1\":{\"1420\":1}}],[\"取整\",{\"0\":{\"1352\":1}}],[\"取决于你木桶中最短的木板\",{\"1\":{\"1158\":1}}],[\"取一个请求进行处理\",{\"1\":{\"1156\":1}}],[\"取得下标索引为4的那条数据\",{\"1\":{\"863\":1}}],[\"取前几个单词首字母\",{\"1\":{\"795\":1}}],[\"取满足条件的第一行\",{\"1\":{\"780\":1}}],[\"取出其中特定的列数据\",{\"1\":{\"621\":1,\"693\":1}}],[\"取\",{\"1\":{\"512\":1}}],[\"取其中一条数据如下\",{\"1\":{\"476\":1}}],[\"取消过期时间\",{\"0\":{\"917\":1},\"1\":{\"917\":1}}],[\"取消勾选左下角图形化工具\",{\"1\":{\"849\":1}}],[\"取消信号和上下文数据传递功能\",{\"1\":{\"546\":1}}],[\"取消的流程除了要额外的关闭timer之外\",{\"1\":{\"428\":1}}],[\"取消\",{\"1\":{\"55\":1}}],[\"临界区间通常为0\",{\"1\":{\"476\":1}}],[\"临时访问\",{\"1\":{\"1233\":1,\"1234\":1,\"1235\":1}}],[\"临时库以\",{\"1\":{\"794\":1}}],[\"临时对象\",{\"1\":{\"435\":1}}],[\"临时对象池\",{\"1\":{\"435\":1}}],[\"临时文件\",{\"1\":{\"400\":1,\"460\":1}}],[\"临时存储我们即将要提交的文件\",{\"1\":{\"17\":1}}],[\"²\",{\"1\":{\"476\":6}}],[\"¹\",{\"1\":{\"476\":41}}],[\"∞\",{\"1\":{\"476\":38}}],[\"±\",{\"1\":{\"476\":38}}],[\"像消息队列投递消息的是生产者\",{\"1\":{\"1060\":1}}],[\"像收集日志\",{\"1\":{\"1057\":1}}],[\"像日志分析\",{\"1\":{\"906\":1}}],[\"像一些比较高级的操作比如cluster\",{\"1\":{\"714\":1}}],[\"像上述的例子肯定是无法正常进行的\",{\"1\":{\"473\":1}}],[\"像下面的代码就无法通过编译\",{\"1\":{\"278\":1}}],[\"像下面这样的代码是无法通过编译的\",{\"1\":{\"209\":1}}],[\"像下面这样\",{\"1\":{\"187\":1,\"189\":1,\"192\":1}}],[\"起源于20世纪60年代\",{\"1\":{\"1310\":1}}],[\"起始偏移量\",{\"1\":{\"756\":1,\"757\":1,\"758\":1,\"763\":1}}],[\"起到文档作用\",{\"1\":{\"470\":1}}],[\"起重机b\",{\"1\":{\"293\":1}}],[\"起重机a\",{\"1\":{\"293\":1}}],[\"起重机接口\",{\"1\":{\"293\":1}}],[\"统一路由端口\",{\"1\":{\"1073\":1}}],[\"统一前缀\",{\"1\":{\"794\":1}}],[\"统一代码逻辑\",{\"1\":{\"514\":1}}],[\"统一使用别名any来替代interface\",{\"1\":{\"348\":1}}],[\"统计count\",{\"1\":{\"884\":1}}],[\"统计cpu情况并写入文件\",{\"1\":{\"469\":1}}],[\"统计每个字母的出现频次\",{\"1\":{\"633\":1}}],[\"统计出所有英文字母\",{\"1\":{\"561\":1,\"617\":1,\"633\":2,\"689\":1}}],[\"统计内存分配情况\",{\"1\":{\"497\":1}}],[\"统计内存分配情况并写入文件\",{\"1\":{\"469\":1}}],[\"统计锁竞争情况并写入文件\",{\"1\":{\"469\":1}}],[\"统计覆盖率测试的情况并写入文件\",{\"1\":{\"469\":1}}],[\"统计测试中协程阻塞情况并写入文件\",{\"1\":{\"469\":1}}],[\"统计基准测试的内存分配\",{\"1\":{\"469\":1}}],[\"释义\",{\"1\":{\"469\":1}}],[\"释放一个位置\",{\"1\":{\"654\":1}}],[\"释放锁\",{\"1\":{\"654\":2}}],[\"释放写锁\",{\"1\":{\"431\":4,\"432\":4}}],[\"释放读锁\",{\"1\":{\"431\":8,\"432\":8}}],[\"释放内存\",{\"1\":{\"310\":1}}],[\"耗时\",{\"1\":{\"468\":1}}],[\"耗时的不确定的\",{\"1\":{\"412\":1}}],[\"养成良好的测试风格\",{\"1\":{\"467\":1}}],[\"良好的测试可以提前发现程序的中错误\",{\"1\":{\"466\":1}}],[\"了大数据\",{\"1\":{\"1057\":1}}],[\"了解\",{\"1\":{\"656\":1}}],[\"了解过为什么有些语言支持反射而有些不支持反射吗\",{\"1\":{\"645\":1}}],[\"了解过为什么有些语言持支反射有些不支持反射吗\",{\"1\":{\"573\":1,\"645\":1}}],[\"了解哪些缓存淘汰策略\",{\"1\":{\"611\":1,\"683\":1}}],[\"了解悲观锁吗\",{\"1\":{\"588\":1,\"660\":1}}],[\"了解命令的更多有关信息\",{\"1\":{\"464\":1}}],[\"了某个开源项目\",{\"1\":{\"53\":1}}],[\"哈希槽\",{\"1\":{\"1006\":1}}],[\"哈希函数\",{\"1\":{\"641\":1}}],[\"哈希函数重新生成\",{\"1\":{\"595\":1,\"667\":1}}],[\"哈希冲突通过链表法或树化法解决\",{\"1\":{\"638\":1}}],[\"哈希冲突会通过红黑树进行解决\",{\"1\":{\"634\":1}}],[\"哈希一致性校验\",{\"1\":{\"634\":1}}],[\"哈希\",{\"1\":{\"580\":1,\"641\":2,\"652\":1}}],[\"哈希的\",{\"1\":{\"566\":1,\"638\":1}}],[\"哈希值\",{\"1\":{\"460\":1}}],[\"哈希表hash\",{\"0\":{\"972\":1}}],[\"哈希表大小翻倍\",{\"1\":{\"641\":1}}],[\"哈希表来记录每个用户对某个对象的点赞状态\",{\"1\":{\"638\":1}}],[\"哈希表的桶\",{\"1\":{\"634\":1}}],[\"哈希表有什么问题\",{\"1\":{\"585\":1,\"657\":1}}],[\"哈希表呢\",{\"1\":{\"585\":1,\"657\":1}}],[\"哈希表\",{\"0\":{\"926\":1},\"1\":{\"258\":1}}],[\"假值\",{\"1\":{\"722\":1}}],[\"假的字符串或数字\",{\"1\":{\"722\":1}}],[\"假如禁用了gosumdb\",{\"1\":{\"460\":1}}],[\"假设t2不大于t1并且两者内存布局等效\",{\"1\":{\"1443\":1}}],[\"假设每台机器的最高负载能力为m\",{\"1\":{\"1165\":1}}],[\"假设我们有一个商城\",{\"1\":{\"1198\":1}}],[\"假设我们的将10台redis部署为我们的缓存系统\",{\"1\":{\"1165\":1}}],[\"假设我们这里选择的是\",{\"1\":{\"110\":1}}],[\"假设是3个\",{\"1\":{\"1128\":1}}],[\"假设两个服务\",{\"1\":{\"1060\":1}}],[\"假设你正在爬楼梯\",{\"1\":{\"654\":1}}],[\"假设你的base路径是\",{\"1\":{\"65\":1}}],[\"假设你的文件结构如下\",{\"1\":{\"65\":1}}],[\"假设数据会发生冲突\",{\"1\":{\"653\":1}}],[\"假设数据在操作期间不会发生冲突\",{\"1\":{\"653\":1}}],[\"假设还是这个表\",{\"1\":{\"593\":1,\"665\":1}}],[\"假设一个场景\",{\"1\":{\"573\":1,\"645\":1}}],[\"假设这是一个占用内存很大的结构体\",{\"1\":{\"435\":1}}],[\"假设在上面例子中不是简单的for\",{\"1\":{\"284\":1}}],[\"假设有如下结构体\",{\"1\":{\"273\":1,\"366\":1}}],[\"假设有下面这样一个结构体\",{\"1\":{\"269\":1}}],[\"假设有一桶水\",{\"1\":{\"243\":1}}],[\"撤回版本范围\",{\"1\":{\"459\":1}}],[\"撤回一些版本\",{\"1\":{\"459\":1}}],[\"撤销处理结果\",{\"1\":{\"4\":1}}],[\"域\",{\"1\":{\"972\":1}}],[\"域名通了\",{\"1\":{\"1197\":1}}],[\"域名访问不通\",{\"1\":{\"1197\":1}}],[\"域名或者localhost\",{\"1\":{\"1130\":1}}],[\"域名\",{\"1\":{\"459\":1,\"1130\":1,\"1131\":2,\"1136\":2,\"1141\":1,\"1142\":1,\"1143\":1,\"1144\":1,\"1160\":1,\"1196\":1}}],[\"域套接字\",{\"1\":{\"400\":1}}],[\"官网安装参考手册\",{\"1\":{\"1184\":1}}],[\"官网参考\",{\"1\":{\"1163\":1}}],[\"官网地址\",{\"1\":{\"1162\":1}}],[\"官网网址\",{\"1\":{\"744\":1}}],[\"官网\",{\"1\":{\"736\":1,\"841\":1}}],[\"官网中还给出了其他几个例子\",{\"1\":{\"458\":1}}],[\"官方有关于日志级别的枚举项\",{\"1\":{\"1305\":1}}],[\"官方有一个简单的介绍\",{\"1\":{\"296\":1}}],[\"官方例子很少\",{\"1\":{\"1301\":1}}],[\"官方给出了几种格式方法\",{\"1\":{\"1390\":1}}],[\"官方给出了两个快速开始的示例\",{\"1\":{\"1301\":1}}],[\"官方给出了很明确的定义\",{\"1\":{\"347\":1}}],[\"官方修改了容器引擎\",{\"1\":{\"1223\":1}}],[\"官方推荐一种高可用方案\",{\"1\":{\"995\":1}}],[\"官方推出的依赖管理工具\",{\"1\":{\"166\":1}}],[\"官方网站\",{\"1\":{\"955\":1}}],[\"官方网址\",{\"1\":{\"700\":1}}],[\"官方仓库\",{\"1\":{\"908\":1,\"1299\":1}}],[\"官方聚合示例\",{\"1\":{\"838\":1}}],[\"官方删除示例\",{\"1\":{\"837\":1}}],[\"官方更新示例\",{\"1\":{\"836\":1}}],[\"官方创建实例\",{\"1\":{\"835\":1}}],[\"官方查询示例\",{\"1\":{\"832\":1}}],[\"官方非常详细的演示了如何使用上述四种类型\",{\"1\":{\"831\":1}}],[\"官方并没有映射成go结构体\",{\"1\":{\"707\":1}}],[\"官方分布式搜索和分析引擎\",{\"1\":{\"700\":1}}],[\"官方也没说干什么用的\",{\"1\":{\"460\":1}}],[\"官方对于最新的面板安装使用helm来安装了\",{\"1\":{\"1230\":1}}],[\"官方对于模块的定义为\",{\"1\":{\"455\":1}}],[\"官方对于go模块也编写了非常细致的文档\",{\"1\":{\"442\":1}}],[\"官方保证sync\",{\"1\":{\"435\":1}}],[\"官方提出了另一种解决办法\",{\"1\":{\"294\":1}}],[\"官方在参考手册中对于接口的定义为\",{\"1\":{\"289\":1}}],[\"官方文档地址\",{\"1\":{\"1437\":1}}],[\"官方文档里面称其为pipeline\",{\"1\":{\"1421\":1}}],[\"官方文档\",{\"1\":{\"908\":1,\"1299\":1,\"1382\":1,\"1394\":1,\"1414\":1}}],[\"官方文档也有解释\",{\"1\":{\"249\":1}}],[\"官方文档中零值称为zero\",{\"1\":{\"202\":1}}],[\"框选的表示最终选择的版本\",{\"1\":{\"458\":1}}],[\"框架中采用的路由库是基于httprouter做的\",{\"1\":{\"1277\":1}}],[\"框架\",{\"1\":{\"158\":1,\"645\":1}}],[\"框架较重\",{\"1\":{\"114\":1}}],[\"框架优劣势总结\",{\"0\":{\"112\":1}}],[\"清单的进行源是国外的\",{\"1\":{\"1228\":1}}],[\"清除yum旧缓存生成新的\",{\"1\":{\"1220\":1}}],[\"清除脚本缓存\",{\"1\":{\"952\":1}}],[\"清除日志\",{\"1\":{\"825\":1}}],[\"清除算法\",{\"1\":{\"645\":1}}],[\"清除算法进行垃圾回收\",{\"1\":{\"635\":1}}],[\"清除来减少停顿时间\",{\"1\":{\"635\":1}}],[\"清除\",{\"1\":{\"633\":1}}],[\"清除的过程呢\",{\"1\":{\"588\":1,\"660\":1}}],[\"清理旧的日志文件\",{\"1\":{\"1307\":1}}],[\"清理资源\",{\"1\":{\"514\":1}}],[\"清理项目模块\",{\"1\":{\"456\":1}}],[\"清空原有数据\",{\"1\":{\"993\":1}}],[\"清空\",{\"0\":{\"264\":1}}],[\"七牛云\",{\"1\":{\"451\":1}}],[\"七个因条件变量而阻塞的读协程都恢复了运行\",{\"1\":{\"432\":1}}],[\"准备三个文件\",{\"1\":{\"1428\":1}}],[\"准备工作\",{\"0\":{\"1081\":1}}],[\"准备连接\",{\"1\":{\"993\":1}}],[\"准备数据\",{\"0\":{\"892\":1}}],[\"准备结构体的数据\",{\"1\":{\"881\":2}}],[\"准备\",{\"0\":{\"444\":1}}],[\"准确的来说\",{\"1\":{\"388\":1}}],[\"符合3nf\",{\"1\":{\"799\":1}}],[\"符合语义化版本规范\",{\"1\":{\"443\":1}}],[\"符号与参数必须相隔一个空格\",{\"1\":{\"1417\":1}}],[\"符号\",{\"1\":{\"1417\":1}}],[\"符号来消除参数前后的空白\",{\"1\":{\"1417\":1}}],[\"符号衔接变量名就可以在模板中访问对应的值\",{\"1\":{\"1417\":1}}],[\"符号链接\",{\"1\":{\"400\":1}}],[\"符号之间的间隔会显得更紧凑\",{\"1\":{\"191\":1}}],[\"期限内所有被发布的消息\",{\"1\":{\"1025\":1}}],[\"期间阻塞对于该表的所有写入\",{\"1\":{\"796\":1}}],[\"期间也不乏出现了一些佼佼者例如vendor\",{\"1\":{\"442\":1}}],[\"期望的结果是4ex\",{\"1\":{\"477\":1}}],[\"期望值\",{\"1\":{\"440\":2}}],[\"局部性原理\",{\"1\":{\"805\":1}}],[\"局面一时间混乱了起来\",{\"1\":{\"442\":1}}],[\"局域网这种共享是没有安全控制的\",{\"1\":{\"42\":1}}],[\"局域网仓库\",{\"0\":{\"40\":1}}],[\"增量备份\",{\"1\":{\"988\":1}}],[\"增量复制\",{\"1\":{\"984\":1}}],[\"增量回收\",{\"1\":{\"645\":1}}],[\"增大查找数据的命中率\",{\"1\":{\"805\":1}}],[\"增强了我在高压场景下的调试和解决问题的能力\",{\"1\":{\"655\":1}}],[\"增删改查不是问题\",{\"1\":{\"580\":1,\"652\":1}}],[\"增\",{\"1\":{\"512\":1}}],[\"增加一段时间间隔\",{\"1\":{\"1429\":1}}],[\"增加秒\",{\"1\":{\"1429\":1}}],[\"增加或减少redis服务器的数量\",{\"1\":{\"1165\":1}}],[\"增加静态资源服务器如下\",{\"1\":{\"1136\":1}}],[\"增加了\",{\"1\":{\"1093\":1}}],[\"增加了主节点的配置信息\",{\"1\":{\"769\":1}}],[\"增加a和b的数量\",{\"1\":{\"1062\":1}}],[\"增加生产者和消费者的实例个数可以提升系统吞吐\",{\"1\":{\"1060\":1}}],[\"增加开启权限配置\",{\"1\":{\"871\":1}}],[\"增加消耗\",{\"1\":{\"821\":1}}],[\"增加发送速率\",{\"1\":{\"636\":1}}],[\"增加并发度\",{\"1\":{\"633\":1}}],[\"增加gc的压力\",{\"1\":{\"549\":1}}],[\"增加任务数量\",{\"1\":{\"545\":1}}],[\"增加\",{\"1\":{\"439\":2}}],[\"增值税号验证和欧盟增值税率\",{\"1\":{\"133\":1}}],[\"池中的对象可能会在没有任何通知的情况下被gc移除\",{\"1\":{\"435\":1}}],[\"采样\",{\"1\":{\"1302\":1}}],[\"采用的漏桶算法\",{\"1\":{\"1150\":1}}],[\"采用一种特殊的哈希算法\",{\"1\":{\"965\":1}}],[\"采用b+tree的方式进行结构存储数据\",{\"1\":{\"804\":1}}],[\"采用静态继承和虚函数机制\",{\"1\":{\"637\":1}}],[\"采用对象池后\",{\"1\":{\"435\":1}}],[\"采集trace的数据也是同样如此\",{\"1\":{\"323\":1}}],[\"采集cpu数据需要单独使用\",{\"1\":{\"323\":1}}],[\"采集\",{\"0\":{\"322\":1}}],[\"采集数据\",{\"1\":{\"321\":1}}],[\"申请更多设备\",{\"1\":{\"1063\":1}}],[\"申请一个打印缓冲区\",{\"1\":{\"435\":1}}],[\"申请一个对象\",{\"1\":{\"435\":1}}],[\"申请对象\",{\"1\":{\"435\":1}}],[\"申请ca证书也是将数据给相关部门\",{\"1\":{\"83\":1}}],[\"唤醒操作\",{\"1\":{\"557\":1}}],[\"唤醒所有因条件变量阻塞的协程\",{\"1\":{\"432\":1}}],[\"唤醒所有因条件阻塞的协程\",{\"1\":{\"432\":1}}],[\"唤醒一个因条件阻塞的协程\",{\"1\":{\"432\":1}}],[\"唤醒通知\",{\"1\":{\"138\":1}}],[\"获得该topic所有的分区\",{\"1\":{\"1047\":1}}],[\"获得读锁的索引是\",{\"1\":{\"557\":1}}],[\"获得写锁的时候\",{\"1\":{\"431\":1}}],[\"获取目标指定索引的元素\",{\"1\":{\"1420\":1}}],[\"获取模板\",{\"1\":{\"1415\":1}}],[\"获取连接\",{\"1\":{\"1374\":1}}],[\"获取前缀\",{\"1\":{\"1340\":1}}],[\"获取cookie\",{\"1\":{\"1282\":1}}],[\"获取header\",{\"1\":{\"1282\":1,\"1283\":1}}],[\"获取文章\",{\"1\":{\"1278\":1}}],[\"获取join命令\",{\"1\":{\"1235\":1}}],[\"获取到所有key大于用户hash值的map集合\",{\"1\":{\"1165\":1}}],[\"获取到structfield后\",{\"1\":{\"369\":1}}],[\"获取代理访问服务器的客户端地址\",{\"1\":{\"1133\":1}}],[\"获取有序集合的成员数\",{\"1\":{\"974\":1}}],[\"获取哈希表中字段的数量\",{\"1\":{\"972\":1}}],[\"获取哈希表键长度\",{\"0\":{\"931\":1}}],[\"获取在哈希表中指定\",{\"1\":{\"972\":1}}],[\"获取所有参数\",{\"1\":{\"1280\":1}}],[\"获取所有给定字段的值\",{\"1\":{\"972\":1}}],[\"获取所有\",{\"1\":{\"970\":1}}],[\"获取所有的map的键\",{\"1\":{\"930\":1}}],[\"获取所有的键\",{\"0\":{\"930\":1}}],[\"获取指定偏移量上的位\",{\"1\":{\"970\":1}}],[\"获取指定\",{\"1\":{\"970\":1}}],[\"获取指针指向的元素\",{\"1\":{\"361\":1}}],[\"获取集合的成员数\",{\"1\":{\"973\":1}}],[\"获取集合中的所有成员\",{\"1\":{\"940\":1}}],[\"获取集合操作对象\",{\"1\":{\"881\":2,\"882\":2,\"883\":2,\"884\":3}}],[\"获取map长度\",{\"1\":{\"931\":1}}],[\"获取整个map\",{\"1\":{\"927\":1}}],[\"获取最新架构师视频\",{\"1\":{\"876\":1}}],[\"获取主节点的ip地址\",{\"1\":{\"822\":1}}],[\"获取权限\",{\"1\":{\"776\":1}}],[\"获取若干个索引的信息\",{\"1\":{\"705\":1}}],[\"获取\",{\"0\":{\"705\":1,\"710\":1}}],[\"获取类信息\",{\"1\":{\"645\":1}}],[\"获取token作为key的信息\",{\"1\":{\"625\":1,\"697\":1}}],[\"获取第k大的元素\",{\"1\":{\"620\":1,\"692\":1}}],[\"获取索引\",{\"1\":{\"614\":1,\"686\":1}}],[\"获取结构体反射类型\",{\"1\":{\"370\":2,\"371\":1}}],[\"获取该指针所指向的元素\",{\"1\":{\"368\":1}}],[\"获取一个集合的元素个数\",{\"1\":{\"940\":1}}],[\"获取一个指定id的文档\",{\"1\":{\"710\":1}}],[\"获取一个私有字段\",{\"1\":{\"368\":1}}],[\"获取一个反射值的指针方式有两种\",{\"1\":{\"360\":1}}],[\"获取一个反射值的元素反射值\",{\"1\":{\"359\":1}}],[\"获取字段\",{\"1\":{\"368\":1}}],[\"获取函数的反射值\",{\"1\":{\"365\":1}}],[\"获取值\",{\"0\":{\"362\":1}}],[\"获取汇率\",{\"1\":{\"133\":1}}],[\"成功消息写入返回\",{\"1\":{\"1035\":1}}],[\"成功加锁会返回true\",{\"1\":{\"431\":1}}],[\"成为leader\",{\"1\":{\"1020\":1}}],[\"成为master\",{\"1\":{\"768\":1,\"769\":1,\"770\":1}}],[\"成员的分数值\",{\"1\":{\"974\":1}}],[\"成本体现在哪\",{\"1\":{\"576\":1,\"648\":1}}],[\"成本是很高的\",{\"1\":{\"540\":1}}],[\"成本类型\",{\"1\":{\"117\":1}}],[\"成本评估\",{\"0\":{\"117\":1}}],[\"父节点的字符串作为子节点的前缀\",{\"1\":{\"1285\":1}}],[\"父节点最为前缀\",{\"1\":{\"1285\":1}}],[\"父镜像的onbuild被触发\",{\"1\":{\"1193\":1}}],[\"父镜像在被子镜像继承后\",{\"1\":{\"1193\":1}}],[\"父进程会用新的\",{\"1\":{\"981\":1}}],[\"父子进程之间通过操作系统的\",{\"1\":{\"980\":1}}],[\"父评论id\",{\"1\":{\"638\":2}}],[\"父级取消\",{\"1\":{\"427\":4}}],[\"父协程早已完成的函数的执行\",{\"1\":{\"396\":1}}],[\"父协程善后工作要花费20ms\",{\"1\":{\"396\":1}}],[\"父协程阻塞等待子协程执行完毕\",{\"1\":{\"396\":1}}],[\"尝试从损坏之前的位置开始\",{\"1\":{\"825\":1}}],[\"尝试修改接收者内部值\",{\"1\":{\"515\":1}}],[\"尝试修改字符串元素\",{\"1\":{\"253\":1}}],[\"尝试直接从版本控制系统中下载\",{\"1\":{\"461\":1}}],[\"尝试加写锁\",{\"1\":{\"431\":1}}],[\"尝试加读锁\",{\"1\":{\"431\":1}}],[\"尝试将自身添加进父级的children中\",{\"1\":{\"427\":1}}],[\"顾名思义\",{\"1\":{\"425\":1,\"434\":1}}],[\"计数数据类型\",{\"0\":{\"733\":1}}],[\"计数器比较简单粗暴\",{\"1\":{\"1148\":1}}],[\"计数器等需要排序的场景\",{\"1\":{\"651\":1}}],[\"计数器\",{\"0\":{\"1148\":1},\"1\":{\"638\":1}}],[\"计数完全无法作用到真正的waitgroup上\",{\"1\":{\"422\":1}}],[\"计数10\",{\"1\":{\"422\":1}}],[\"计数就\",{\"1\":{\"422\":1}}],[\"计算给定的一个或多个有序集的并集\",{\"1\":{\"974\":1}}],[\"计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合\",{\"1\":{\"974\":1}}],[\"计算在有序集合中指定区间分数的成员数\",{\"1\":{\"974\":1}}],[\"计算当前位置的最大可容积水量\",{\"1\":{\"656\":1}}],[\"计算哈希值并校验数据一致性\",{\"1\":{\"634\":1}}],[\"计算相对路径\",{\"1\":{\"410\":1}}],[\"计算所有数字类型的两数之和\",{\"1\":{\"337\":1}}],[\"计算并重新排布结构体字段来最小化结构体占用的内存\",{\"1\":{\"273\":1}}],[\"计算大型文件的消息摘要\",{\"1\":{\"132\":1}}],[\"计算机\",{\"1\":{\"746\":1},\"2\":{\"6\":1,\"8\":1}}],[\"永久阻塞\",{\"1\":{\"421\":1}}],[\"永远也不会执行\",{\"1\":{\"426\":1}}],[\"永远也不会被执行\",{\"1\":{\"421\":1}}],[\"永远也不会退出\",{\"1\":{\"233\":1}}],[\"永远也无法精准的预判到它到底会输出什么\",{\"1\":{\"412\":1}}],[\"永远都是以return关键字后的值为最高优先级\",{\"1\":{\"280\":1}}],[\"箭头符号<\",{\"1\":{\"419\":2}}],[\"译为管道\",{\"1\":{\"413\":1}}],[\"幸运的是go提供了非常多的并发控制手段\",{\"1\":{\"412\":1}}],[\"模版\",{\"1\":{\"1183\":1}}],[\"模板文件\",{\"0\":{\"1428\":1}}],[\"模板中也支持这样的写法\",{\"1\":{\"1421\":1}}],[\"模板自身的语法其实并不多\",{\"1\":{\"1420\":1}}],[\"模板语法支持注释\",{\"1\":{\"1418\":1}}],[\"模板语法\",{\"0\":{\"1416\":1}}],[\"模板方法模式\",{\"1\":{\"654\":1}}],[\"模板引擎\",{\"1\":{\"111\":1}}],[\"模型绑定和验证\",{\"1\":{\"1289\":1}}],[\"模型定义\",{\"0\":{\"1256\":1,\"1260\":1,\"1264\":1}}],[\"模型存储\",{\"0\":{\"1247\":1}}],[\"模型设计时需要做更多的冗余\",{\"1\":{\"789\":1}}],[\"模型设计时\",{\"1\":{\"789\":1}}],[\"模型的\",{\"1\":{\"654\":1}}],[\"模型\",{\"1\":{\"651\":1}}],[\"模型管理之类的\",{\"1\":{\"625\":1,\"697\":1}}],[\"模式运行\",{\"1\":{\"993\":1}}],[\"模式\",{\"1\":{\"579\":1,\"651\":1,\"979\":1}}],[\"模式测试运行的最小时间\",{\"1\":{\"469\":1}}],[\"模糊测试后面会单独讲\",{\"1\":{\"505\":1}}],[\"模糊测试函数\",{\"1\":{\"483\":1}}],[\"模糊测试将会永远的运行下去\",{\"1\":{\"477\":1}}],[\"模糊测试中失败的用例会输出到当前测试文件夹下的testdata目录下的某个语料文件中\",{\"1\":{\"477\":1}}],[\"模糊测试的好处在于\",{\"1\":{\"477\":1}}],[\"模糊测试是go1\",{\"1\":{\"477\":1}}],[\"模糊测试是fuzzxxxx\",{\"1\":{\"467\":1}}],[\"模糊测试自动结束的时间\",{\"1\":{\"469\":1}}],[\"模糊测试\",{\"0\":{\"477\":1},\"1\":{\"466\":1,\"468\":1}}],[\"模块是⼀个负载均衡器\",{\"1\":{\"1165\":1}}],[\"模块名\",{\"1\":{\"459\":1}}],[\"模块b的1\",{\"1\":{\"458\":1}}],[\"模块缓存默认存放在$gopath\",{\"1\":{\"457\":1}}],[\"模块存储\",{\"0\":{\"457\":1}}],[\"模块管理\",{\"0\":{\"455\":1}}],[\"模块而生\",{\"1\":{\"451\":1}}],[\"模块的编写就完成了\",{\"1\":{\"449\":1}}],[\"模块\",{\"0\":{\"442\":1}}],[\"模拟释放资源耗时\",{\"1\":{\"500\":1}}],[\"模拟创建资源耗时\",{\"1\":{\"500\":1}}],[\"模拟耗时准备任务\",{\"1\":{\"499\":1}}],[\"模拟计算耗时\",{\"1\":{\"429\":1,\"430\":1}}],[\"模拟访问耗时\",{\"1\":{\"429\":1,\"430\":1}}],[\"模拟随机耗时\",{\"1\":{\"412\":1}}],[\"暂停\",{\"1\":{\"644\":1}}],[\"暂停1ms\",{\"1\":{\"412\":1}}],[\"暂时放入黑色是为了查它所有引用的对象\",{\"1\":{\"551\":1}}],[\"暂存区\",{\"1\":{\"17\":1}}],[\"情况如下\",{\"1\":{\"412\":2}}],[\"情况就不同了\",{\"1\":{\"287\":1}}],[\"刷盘\",{\"1\":{\"406\":1}}],[\"刷新视频时系统会推荐20条用户没看过的视频\",{\"1\":{\"593\":1,\"665\":1}}],[\"刷新\",{\"0\":{\"406\":1}}],[\"继续优化\",{\"1\":{\"1063\":1}}],[\"继续读取文件\",{\"1\":{\"401\":1}}],[\"继承限制等方面回答\",{\"1\":{\"572\":1,\"644\":1}}],[\"继承\",{\"1\":{\"293\":1}}],[\"继承等传统的\",{\"1\":{\"165\":1}}],[\"扩充或者以其他的方式转换到新的topic下再继续后面的处理\",{\"1\":{\"1019\":1}}],[\"扩容时\",{\"1\":{\"641\":1}}],[\"扩容机制\",{\"1\":{\"587\":1,\"621\":1,\"659\":1,\"693\":1}}],[\"扩容策略\",{\"1\":{\"566\":1,\"638\":3}}],[\"扩容策略是怎样的\",{\"1\":{\"566\":1,\"638\":2}}],[\"扩容\",{\"1\":{\"401\":1,\"638\":1}}],[\"扩展名ext是原始扩展名\",{\"1\":{\"1307\":1}}],[\"扩展\",{\"0\":{\"975\":1}}],[\"扩展配置<\",{\"1\":{\"742\":1}}],[\"扩展和管理容器化应用\",{\"1\":{\"166\":1}}],[\"扩展风险\",{\"1\":{\"118\":1}}],[\"扩展性就很强\",{\"1\":{\"1272\":1}}],[\"扩展性好\",{\"1\":{\"1054\":1}}],[\"扩展性比较强\",{\"1\":{\"961\":1}}],[\"扩展性强避免多个构造函数\",{\"1\":{\"513\":1}}],[\"扩展性强\",{\"1\":{\"119\":1}}],[\"扩展性\",{\"1\":{\"111\":1,\"904\":1}}],[\"针对http网络传输的一些指令配置\",{\"1\":{\"1130\":1}}],[\"针对指定索引对文本字符串进行分析\",{\"1\":{\"706\":1}}],[\"针对不同年龄的对象采用不同的回收策略\",{\"1\":{\"645\":1}}],[\"针对某一个具体的垃圾收集器\",{\"1\":{\"588\":1,\"660\":1}}],[\"针对并发进⾏了优化\",{\"1\":{\"522\":1}}],[\"针对协程介绍中最开始的例子\",{\"1\":{\"422\":1}}],[\"针对于第一种方法\",{\"1\":{\"401\":1}}],[\"针对x\",{\"1\":{\"140\":1}}],[\"权重越高分配到需要处理的请求越多\",{\"1\":{\"1162\":1}}],[\"权重\",{\"0\":{\"1162\":1}}],[\"权重方式\",{\"1\":{\"1160\":1,\"1162\":1}}],[\"权限\",{\"1\":{\"1241\":1},\"2\":{\"1270\":1}}],[\"权限管理\",{\"0\":{\"1237\":1}}],[\"权限最小原则\",{\"1\":{\"794\":1}}],[\"权限为0666\",{\"1\":{\"400\":1}}],[\"权限位\",{\"1\":{\"400\":1}}],[\"权力游戏库\",{\"1\":{\"134\":1}}],[\"什么样子的情况下载会出现全部宕机呢\",{\"1\":{\"1163\":1}}],[\"什么样子的情况下会使用max\",{\"1\":{\"1163\":1}}],[\"什么样的情况下会使用threadlocal\",{\"1\":{\"592\":1,\"664\":1}}],[\"什么的\",{\"1\":{\"1067\":1}}],[\"什么隔离级别查不到\",{\"1\":{\"573\":1,\"645\":1}}],[\"什么隔离级别可以查到\",{\"1\":{\"573\":1,\"645\":1}}],[\"什么时候写库什么时候写redis\",{\"1\":{\"569\":1,\"641\":2}}],[\"什么时候用懒汉模式\",{\"1\":{\"565\":1,\"637\":2}}],[\"什么命令\",{\"1\":{\"566\":1,\"638\":1}}],[\"什么情况写入磁盘由操作系统决定\",{\"1\":{\"987\":1}}],[\"什么情况使用\",{\"1\":{\"610\":1,\"682\":1}}],[\"什么情况下会产生full\",{\"1\":{\"606\":1,\"678\":1}}],[\"什么情况用饿汉模式\",{\"1\":{\"565\":1,\"637\":2}}],[\"什么情况会全表扫描\",{\"1\":{\"561\":1,\"617\":1,\"633\":2,\"689\":1}}],[\"什么是分层rbac\",{\"0\":{\"1263\":1}}],[\"什么是rbac\",{\"0\":{\"1259\":1}}],[\"什么是dockerfile文件\",{\"1\":{\"1193\":1}}],[\"什么是镜像\",{\"1\":{\"1190\":1}}],[\"什么是nginx\",{\"0\":{\"1107\":1}}],[\"什么是消息队列\",{\"0\":{\"1061\":1}}],[\"什么是elasticsearch\",{\"0\":{\"734\":1}}],[\"什么是bigkey\",{\"1\":{\"594\":1,\"666\":1}}],[\"什么是kafka的羊群效应\",{\"1\":{\"594\":1,\"666\":1}}],[\"什么是索引下推\",{\"1\":{\"592\":1,\"664\":1}}],[\"什么是多态\",{\"1\":{\"590\":1,\"662\":1}}],[\"什么是多路复用\",{\"1\":{\"421\":1}}],[\"什么是协程泄露\",{\"1\":{\"587\":1,\"659\":1}}],[\"什么是聚簇索引\",{\"1\":{\"585\":1,\"657\":1}}],[\"什么是jwt\",{\"1\":{\"569\":1,\"641\":2}}],[\"什么是幻读\",{\"1\":{\"566\":1,\"569\":1,\"638\":1,\"641\":2}}],[\"什么是不可重复读\",{\"1\":{\"566\":1,\"638\":1}}],[\"什么是回表\",{\"1\":{\"566\":1,\"593\":1,\"638\":1,\"665\":1}}],[\"什么是伪随机\",{\"1\":{\"565\":1,\"637\":2}}],[\"什么是粘包\",{\"1\":{\"564\":1,\"636\":2}}],[\"什么是\",{\"0\":{\"539\":1}}],[\"什么是方法集\",{\"1\":{\"289\":1}}],[\"什么都不会设置\",{\"1\":{\"400\":1}}],[\"黏滞位\",{\"1\":{\"400\":1}}],[\"剩下的5个都被拒绝\",{\"1\":{\"1154\":1}}],[\"剩下的白色就是垃圾\",{\"1\":{\"551\":1}}],[\"剩下的内存全都越界了\",{\"1\":{\"306\":1}}],[\"剩余逻辑如下\",{\"1\":{\"401\":1}}],[\"剩余的值用于控制行为\",{\"1\":{\"400\":1}}],[\"负责日志的输出\",{\"1\":{\"1302\":1}}],[\"负责日志的格式化\",{\"1\":{\"1302\":1}}],[\"负责生产者和消费者的读写请求\",{\"1\":{\"1064\":1}}],[\"负责对消息进行处理\",{\"1\":{\"1052\":1}}],[\"负责备份主节点的数据\",{\"1\":{\"1006\":1}}],[\"负责监控主从节点的\",{\"1\":{\"999\":1}}],[\"负责的事情\",{\"1\":{\"614\":1,\"686\":1}}],[\"负责读的协程每次读取之前都会等待1毫秒\",{\"1\":{\"417\":1}}],[\"负责读\",{\"1\":{\"417\":1}}],[\"负责写的协程一口气做多也只能写入5个数据\",{\"1\":{\"417\":1}}],[\"负责写\",{\"1\":{\"417\":1}}],[\"负责os文件系统交互的具体实现\",{\"1\":{\"399\":1}}],[\"负载因子调到1会有什么后果\",{\"1\":{\"603\":1,\"675\":1}}],[\"负载测试库和命令行工具\",{\"1\":{\"145\":1}}],[\"负载平衡\",{\"1\":{\"128\":1}}],[\"负载均衡等方面的实际应用\",{\"1\":{\"655\":1}}],[\"负载均衡等功能\",{\"1\":{\"655\":1}}],[\"负载均衡和高可用性\",{\"1\":{\"637\":1}}],[\"负载均衡怎么做的\",{\"1\":{\"615\":1,\"687\":1}}],[\"负载均衡\",{\"1\":{\"111\":1}}],[\"恢复数据\",{\"1\":{\"988\":1}}],[\"恢复发送速率的过程\",{\"1\":{\"636\":1}}],[\"恢复\",{\"0\":{\"397\":1}}],[\"碰巧遇到了子协程发生panic\",{\"1\":{\"396\":1}}],[\"善后\",{\"0\":{\"396\":1}}],[\"肯定会触发panic\",{\"1\":{\"394\":1}}],[\"记得重启nginx服务器\",{\"1\":{\"1130\":1}}],[\"记得path的位置输入完毕\",{\"1\":{\"1085\":1}}],[\"记得要导入这个包\",{\"1\":{\"324\":1}}],[\"记下对应的file\",{\"1\":{\"825\":1}}],[\"记不清了\",{\"1\":{\"597\":1,\"669\":1}}],[\"记录具体执行效率较低的sql语句的日志信息\",{\"1\":{\"813\":1}}],[\"记录比较少\",{\"1\":{\"811\":1}}],[\"记录消息的唯一标识\",{\"1\":{\"653\":1}}],[\"记录最后更新时间\",{\"1\":{\"653\":1}}],[\"记录创建时间\",{\"1\":{\"653\":1}}],[\"记录执行时间较长的\",{\"1\":{\"633\":1}}],[\"记录\",{\"1\":{\"633\":1,\"1071\":1}}],[\"记录所有对数据库的修改操作\",{\"1\":{\"633\":1}}],[\"记录发送状态+重试机制\",{\"1\":{\"624\":1,\"696\":1}}],[\"记录发生错误的时间\",{\"1\":{\"393\":1}}],[\"记录抢单结果的表是怎么设计的\",{\"1\":{\"592\":1,\"664\":1}}],[\"记录格式为模块名\",{\"1\":{\"460\":1}}],[\"抛给上一层调用者\",{\"1\":{\"392\":1}}],[\"确定是否应使用\",{\"1\":{\"1307\":1}}],[\"确定用于格式化备份文件中时间戳的时间是否是计算机的本地时间\",{\"1\":{\"1307\":1}}],[\"确定worker节点\",{\"1\":{\"1235\":1}}],[\"确定master节点\",{\"1\":{\"1235\":1}}],[\"确定存储文件名是否正确\",{\"1\":{\"986\":2}}],[\"确定\",{\"1\":{\"965\":1}}],[\"确认备份是否完整\",{\"1\":{\"655\":1}}],[\"确认\",{\"1\":{\"641\":3}}],[\"确认应答\",{\"1\":{\"636\":1}}],[\"确保接收到的数据符合业务规则和安全要求\",{\"1\":{\"1288\":1}}],[\"确保权限的多层级控制\",{\"1\":{\"1241\":1}}],[\"确保docker是启动的\",{\"1\":{\"1223\":1}}],[\"确保其符合预期的格式和标准\",{\"1\":{\"1071\":1}}],[\"确保其他线程不能访问这段资源\",{\"1\":{\"654\":1}}],[\"确保不会因为某个节点宕机导致服务不可用\",{\"1\":{\"1052\":1}}],[\"确保不丢消息\",{\"1\":{\"1052\":1}}],[\"确保\",{\"1\":{\"1024\":1,\"1071\":1}}],[\"确保服务正常启动即可\",{\"1\":{\"963\":1}}],[\"确保服务初始化完成后再开始处理请求\",{\"1\":{\"634\":1}}],[\"确保事务的完整性和数据的准确性\",{\"1\":{\"904\":1}}],[\"确保常用查询有合适的索引\",{\"1\":{\"655\":1}}],[\"确保监控系统正常运行\",{\"1\":{\"655\":1}}],[\"确保一个类只有一个实例\",{\"1\":{\"654\":1}}],[\"确保每次最多只有10个goroutine可以执行\",{\"1\":{\"654\":1}}],[\"确保每个线程不会互相影响\",{\"1\":{\"641\":1}}],[\"确保查询可以通过索引快速定位\",{\"1\":{\"653\":1}}],[\"确保消息写入到kafka时得到确认\",{\"1\":{\"653\":1}}],[\"确保只有获取锁的线程才能释放\",{\"1\":{\"653\":1}}],[\"确保在平滑过渡期间不丢失任何任务\",{\"1\":{\"645\":1}}],[\"确保在应用崩溃时锁会自动释放\",{\"1\":{\"634\":1}}],[\"确保队列中的元素按降序排列\",{\"1\":{\"645\":1}}],[\"确保系统稳定运行\",{\"1\":{\"644\":1}}],[\"确保系统的一致性\",{\"1\":{\"641\":1}}],[\"确保客户端接收到服务器的\",{\"1\":{\"641\":1}}],[\"确保同一时刻只有一个\",{\"1\":{\"639\":1,\"649\":1}}],[\"确保抢单者不会超过上限\",{\"1\":{\"638\":1}}],[\"确保开发和生产环境的一致性\",{\"1\":{\"637\":1}}],[\"确保某个类只有一个实例\",{\"1\":{\"637\":1}}],[\"确保数据的可用性\",{\"1\":{\"1006\":1}}],[\"确保数据的完整性\",{\"1\":{\"636\":1,\"638\":1}}],[\"确保数据库更新成功后\",{\"1\":{\"644\":1}}],[\"确保数据一致性\",{\"1\":{\"644\":1}}],[\"确保数据未被篡改\",{\"1\":{\"634\":1}}],[\"确保连接的双方都能确认彼此的存在\",{\"1\":{\"636\":1}}],[\"确保文件没有丢失或损坏\",{\"1\":{\"634\":1}}],[\"确保正在处理的请求完成后再关闭服务\",{\"1\":{\"634\":1}}],[\"确保互斥锁在函数退出时解锁\",{\"1\":{\"514\":1}}],[\"确保没有引入新的问题\",{\"1\":{\"504\":1}}],[\"确保了公钥正确被送到客户端手里\",{\"1\":{\"83\":1}}],[\"确实不应该\",{\"1\":{\"388\":1}}],[\"丑陋\",{\"1\":{\"388\":1}}],[\"才重写\",{\"1\":{\"985\":1}}],[\"才能真正发挥unsafe包的真正威力\",{\"1\":{\"1443\":1}}],[\"才能登录对应的账号\",{\"1\":{\"872\":1}}],[\"才能生效\",{\"1\":{\"813\":1}}],[\"才能进行加法运算\",{\"1\":{\"385\":1}}],[\"才会生成该文件\",{\"1\":{\"460\":1}}],[\"才会考虑去初始化\",{\"1\":{\"434\":2}}],[\"才会阻塞的等待协程来向管道中写入数据\",{\"1\":{\"417\":1}}],[\"才会真正的从服务器删除\",{\"1\":{\"27\":1}}],[\"说的\",{\"1\":{\"1165\":1}}],[\"说在前面\",{\"1\":{\"716\":1}}],[\"说项目没难度\",{\"1\":{\"615\":1,\"687\":1}}],[\"说\",{\"1\":{\"601\":1,\"673\":1}}],[\"说了和自己的\",{\"1\":{\"625\":1,\"697\":1}}],[\"说了个m\",{\"1\":{\"615\":1,\"687\":1}}],[\"说了单例模式\",{\"1\":{\"595\":1,\"667\":1}}],[\"说了双倍扩容\",{\"1\":{\"595\":1,\"667\":1}}],[\"说了go协程用起来方便\",{\"1\":{\"595\":1,\"667\":1}}],[\"说了gmp模型\",{\"1\":{\"595\":1,\"667\":1}}],[\"说了mvcc\",{\"1\":{\"595\":1,\"667\":1}}],[\"说了redis和kafka的特点\",{\"1\":{\"595\":1,\"667\":1}}],[\"说了分表和覆盖索引\",{\"1\":{\"595\":1,\"667\":1}}],[\"说说\",{\"1\":{\"619\":1,\"691\":1}}],[\"说说你对redis的了解\",{\"1\":{\"592\":1,\"664\":1}}],[\"说说逃逸分析\",{\"1\":{\"563\":1,\"635\":2}}],[\"说一下\",{\"1\":{\"625\":1,\"697\":1}}],[\"说一下对grpc的理解\",{\"1\":{\"620\":1,\"692\":1}}],[\"说一下对于aop和ioc的理解\",{\"1\":{\"598\":1,\"670\":1}}],[\"说一下mysql的索引\",{\"1\":{\"585\":1,\"657\":1}}],[\"说一下什么是原子性\",{\"1\":{\"580\":1,\"652\":1}}],[\"说一说使用的垃圾回收器\",{\"1\":{\"606\":1,\"678\":1}}],[\"说一说使用逻辑过期解决缓存击穿问题\",{\"1\":{\"569\":1,\"641\":1}}],[\"说一说对slice的认识\",{\"1\":{\"604\":1,\"676\":1}}],[\"说一说拥塞控制\",{\"1\":{\"564\":1,\"636\":2}}],[\"说到channel就需要了解设计它是干嘛的\",{\"1\":{\"535\":1}}],[\"说实话不认真看很难知道这是一个什么类型\",{\"1\":{\"382\":1}}],[\"说明配置成功了\",{\"1\":{\"1093\":1}}],[\"说明一切正常\",{\"1\":{\"1082\":1}}],[\"说明接口通畅\",{\"1\":{\"1082\":1}}],[\"说明kong安装成功了\",{\"1\":{\"1078\":1}}],[\"说明数据库同步操作失败\",{\"1\":{\"825\":1}}],[\"说明主从复制已经开启\",{\"1\":{\"822\":1}}],[\"说明mysql会对数据使用一个外部的索引排序\",{\"1\":{\"814\":1}}],[\"说明只是有bug被修复了\",{\"1\":{\"455\":1}}],[\"说明项目增加了新的特性\",{\"1\":{\"455\":1}}],[\"说明项目发生了不兼容的改动\",{\"1\":{\"455\":1}}],[\"说明\",{\"1\":{\"121\":1,\"123\":1,\"124\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"456\":1,\"720\":1,\"852\":1,\"1000\":1,\"1197\":1}}],[\"说明已经满足了k个数的要求\",{\"1\":{\"5\":1}}],[\"判定主服务器为\",{\"1\":{\"997\":1}}],[\"判断两个时间是否表示同一瞬间\",{\"1\":{\"1429\":1}}],[\"判断字符串s内是否包含字符r\",{\"1\":{\"1398\":1}}],[\"判断字符串chars内任意字符的unicode码是否在字符串s内\",{\"1\":{\"1398\":1}}],[\"判断字段是否存在\",{\"1\":{\"929\":1}}],[\"判断哪些broker可用\",{\"1\":{\"1066\":1}}],[\"判断键是否存在\",{\"0\":{\"929\":1}}],[\"判断\",{\"1\":{\"780\":1}}],[\"判断你输入的这个\",{\"1\":{\"778\":1}}],[\"判断数据是否已经被修改\",{\"1\":{\"653\":1}}],[\"判断一个时间是否在它之前\",{\"1\":{\"1429\":1}}],[\"判断一个时间是否在它之后\",{\"1\":{\"1429\":1}}],[\"判断一个字符串s是不是包含一个子串substr\",{\"1\":{\"1398\":1}}],[\"判断一个切片是否有序\",{\"1\":{\"1381\":1}}],[\"判断一个元素是否属于这个集合\",{\"1\":{\"940\":1}}],[\"判断一个变量是否逃逸到堆上\",{\"1\":{\"633\":1}}],[\"判断一个sql\",{\"1\":{\"585\":1,\"657\":1}}],[\"判断索引是否符合条件范围\",{\"1\":{\"614\":1,\"686\":1}}],[\"判断对象是不是被引用标记了\",{\"1\":{\"573\":1,\"645\":2}}],[\"判断面试时间\",{\"1\":{\"520\":1}}],[\"判断是否有环路\",{\"1\":{\"585\":1,\"657\":1}}],[\"判断是否有戏\",{\"1\":{\"520\":1}}],[\"判断是否执行\",{\"1\":{\"434\":1}}],[\"判断是否多提交了一行代码\",{\"1\":{\"58\":1}}],[\"判为完全相等\",{\"1\":{\"379\":1}}],[\"完善的错误处理机制\",{\"1\":{\"1272\":1}}],[\"完成文件名称\",{\"1\":{\"1341\":1}}],[\"完成任务后释放信号\",{\"1\":{\"654\":1}}],[\"完成后查看go\",{\"1\":{\"453\":1}}],[\"完全后台运行\",{\"1\":{\"1188\":1}}],[\"完全免费的版本使用\",{\"1\":{\"875\":1}}],[\"完全隔离\",{\"1\":{\"641\":1}}],[\"完全相等\",{\"0\":{\"379\":1}}],[\"完整的序列化logger名称\",{\"1\":{\"1303\":1}}],[\"完整写法\",{\"1\":{\"1010\":1}}],[\"完整标准库列表\",{\"0\":{\"124\":1},\"1\":{\"120\":1}}],[\"完整支持\",{\"1\":{\"111\":2}}],[\"完整mvc\",{\"1\":{\"111\":1}}],[\"管道操作在模板中经常出现\",{\"1\":{\"1421\":1}}],[\"管道将master作为输入传递tee命令\",{\"1\":{\"1223\":1}}],[\"管道关闭后的读取行为\",{\"1\":{\"633\":2}}],[\"管道可能经过层层传递\",{\"1\":{\"418\":1}}],[\"管道为nil\",{\"1\":{\"418\":1}}],[\"管道中的数据流动方式与队列一样\",{\"1\":{\"415\":1}}],[\"管道更适合协程间通信\",{\"1\":{\"412\":1}}],[\"管道\",{\"0\":{\"377\":1,\"413\":1,\"1421\":1},\"1\":{\"412\":1}}],[\"管理一棵单独的路由树\",{\"1\":{\"1286\":1}}],[\"管理也不方便\",{\"1\":{\"1212\":1}}],[\"管理\",{\"1\":{\"1194\":1}}],[\"管理的入口\",{\"1\":{\"1071\":1}}],[\"管理界面较丰富\",{\"1\":{\"1053\":1}}],[\"管理员中启动和关闭\",{\"1\":{\"852\":1}}],[\"管理集群的元数据\",{\"1\":{\"637\":1}}],[\"管理可调整大小的上下文感知goroutine池以绑定并发\",{\"1\":{\"137\":1}}],[\"管理gob流\",{\"1\":{\"124\":1}}],[\"管理人员分配\",{\"1\":{\"58\":1}}],[\"构造消息\",{\"1\":{\"1035\":1}}],[\"构造函数接收可变参数逐一应用\",{\"1\":{\"513\":1}}],[\"构造指向该结构体未导出字段的指针反射值\",{\"1\":{\"368\":1}}],[\"构建option\",{\"1\":{\"1306\":1}}],[\"构建日志级别\",{\"1\":{\"1306\":1}}],[\"构建编码器\",{\"1\":{\"1306\":1}}],[\"构建缓存\",{\"1\":{\"1206\":1}}],[\"构建\",{\"0\":{\"1286\":1},\"1\":{\"1183\":1,\"1284\":1}}],[\"构建读写分离架构\",{\"1\":{\"991\":1}}],[\"构建map反射值\",{\"1\":{\"376\":1}}],[\"构建跨平台gui应用\",{\"1\":{\"138\":1}}],[\"索引相关命令\",{\"0\":{\"862\":1}}],[\"索引全部失效\",{\"1\":{\"818\":1}}],[\"索引字段全部使用上\",{\"1\":{\"818\":1}}],[\"索引很长的字符列\",{\"1\":{\"815\":1}}],[\"索引提高了查询的速度\",{\"1\":{\"811\":1}}],[\"索引能够提高检索的速度和排序的速度\",{\"1\":{\"811\":1}}],[\"索引值可出现多次\",{\"1\":{\"810\":1}}],[\"索引必须是唯一索引\",{\"1\":{\"810\":1}}],[\"索引也要动态的维护\",{\"1\":{\"809\":1}}],[\"索引文件的会膨胀很快\",{\"1\":{\"809\":1}}],[\"索引文件会占用物理空间\",{\"1\":{\"809\":1}}],[\"索引文件和数据文件是分离的\",{\"1\":{\"808\":1}}],[\"索引太少数据量越大的时候\",{\"1\":{\"800\":1}}],[\"索引还不足以发挥它得意义和价值\",{\"1\":{\"800\":1}}],[\"索引主要作用\",{\"1\":{\"800\":1}}],[\"索引对数据库得性能得影响还是非常的关键\",{\"1\":{\"800\":1}}],[\"索引是否被引入到\",{\"1\":{\"814\":1}}],[\"索引是mysql高效获取数据的数据结构\",{\"1\":{\"800\":1}}],[\"索引是解决sql性能问题的重要手段之一\",{\"1\":{\"800\":1}}],[\"索引就是数据结构\",{\"1\":{\"800\":1}}],[\"索引类型必须为\",{\"1\":{\"795\":1}}],[\"索引名称\",{\"1\":{\"810\":2}}],[\"索引名=\",{\"1\":{\"754\":1}}],[\"索引名\",{\"1\":{\"746\":1,\"748\":1,\"751\":1}}],[\"索引已经存在了\",{\"1\":{\"745\":1}}],[\"索引mapping定义\",{\"1\":{\"745\":1}}],[\"索引和搜索的效率越高\",{\"1\":{\"720\":1}}],[\"索引和数据一致性\",{\"1\":{\"655\":1}}],[\"索引优化\",{\"1\":{\"655\":1,\"799\":1}}],[\"索引分类\",{\"1\":{\"619\":1,\"691\":1}}],[\"索引为什么要用id不用字符\",{\"1\":{\"616\":1,\"688\":1}}],[\"索引失效\",{\"1\":{\"806\":1,\"818\":3}}],[\"索引失效场景\",{\"1\":{\"614\":1,\"686\":1}}],[\"索引失效的场景\",{\"1\":{\"569\":1,\"641\":2}}],[\"索引设计讲究\",{\"1\":{\"610\":1,\"682\":1}}],[\"索引覆盖\",{\"1\":{\"610\":1,\"682\":1}}],[\"索引下推\",{\"1\":{\"610\":1,\"614\":2,\"682\":1,\"686\":2}}],[\"索引的分类\",{\"1\":{\"809\":1}}],[\"索引的最左前缀原则是什么意思\",{\"1\":{\"622\":1,\"694\":1}}],[\"索引的优点和缺点\",{\"1\":{\"619\":1,\"691\":1}}],[\"索引的优缺点\",{\"1\":{\"563\":1,\"635\":2}}],[\"索引的底层数据结构是什么样子\",{\"1\":{\"573\":1,\"645\":1}}],[\"索引\",{\"0\":{\"703\":1},\"1\":{\"367\":1,\"370\":1}}],[\"传统行业\",{\"1\":{\"1108\":1}}],[\"传统上扩展性不如nosql\",{\"1\":{\"904\":1}}],[\"传统的权限管理方案可能是通过硬编码或数据库直接管理权限\",{\"1\":{\"1240\":1}}],[\"传统的方式是对每一个服务器配置同样的环境\",{\"1\":{\"1180\":1}}],[\"传统的哈希冲突解决方式\",{\"1\":{\"634\":1}}],[\"传统的文件系统\",{\"1\":{\"634\":1}}],[\"传统的做法是运行时反射或者断言\",{\"1\":{\"516\":1}}],[\"传输给客户端的字节数\",{\"1\":{\"1133\":2}}],[\"传输\",{\"1\":{\"1055\":1}}],[\"传输数据时不保证顺序或可靠性\",{\"1\":{\"651\":1}}],[\"传输时不保证数据的顺序或完整性\",{\"1\":{\"636\":1}}],[\"传输控制协议\",{\"1\":{\"636\":1}}],[\"传输密钥的时候可能会被窃取\",{\"1\":{\"83\":1}}],[\"传指针只会拷贝指针地址\",{\"1\":{\"549\":1}}],[\"传值会拷贝整个对象\",{\"1\":{\"549\":1}}],[\"传递指针会导致gc开销严重影响性能\",{\"1\":{\"549\":1}}],[\"传递指针消耗的资源会更小\",{\"1\":{\"515\":1}}],[\"传递参数\",{\"1\":{\"546\":1}}],[\"传递赋值只是复制引用\",{\"1\":{\"529\":1}}],[\"传递\",{\"0\":{\"392\":1}}],[\"传入如下数据\",{\"1\":{\"1425\":1}}],[\"传入如下的数据\",{\"1\":{\"1422\":1,\"1427\":1}}],[\"传入数据\",{\"1\":{\"1424\":1}}],[\"传入的数据\",{\"1\":{\"1423\":1}}],[\"传入的数据如下\",{\"1\":{\"1420\":1}}],[\"传入的参数会在\",{\"1\":{\"634\":1}}],[\"传入上下文\",{\"1\":{\"426\":1}}],[\"传入包装类型和函数体\",{\"1\":{\"378\":1}}],[\"传入指针\",{\"1\":{\"368\":2}}],[\"传入参数数组\",{\"1\":{\"365\":1}}],[\"返回其字符串表达形式\",{\"1\":{\"1448\":1}}],[\"返回其底层数组的其实地址\",{\"1\":{\"1445\":1}}],[\"返回长度\",{\"1\":{\"1420\":1}}],[\"返回字符串\",{\"1\":{\"1405\":1}}],[\"返回字符串s和t在忽略大小写情况下是否相等\",{\"1\":{\"1401\":1}}],[\"返回最后一次出现的子串任意字符的下标\",{\"1\":{\"1404\":1}}],[\"返回最后一次出现的子串的下标\",{\"1\":{\"1404\":1}}],[\"返回第一次出现的子串的下标\",{\"1\":{\"1404\":3}}],[\"返回1\",{\"1\":{\"1397\":1}}],[\"返回切片的长度\",{\"1\":{\"1380\":1}}],[\"返回命令行参数的个数\",{\"1\":{\"1327\":1}}],[\"返回非命令行参数的个数\",{\"1\":{\"1327\":1}}],[\"返回所有非命令参数\",{\"1\":{\"1327\":1}}],[\"返回504\",{\"1\":{\"1158\":1}}],[\"返回有序集中\",{\"1\":{\"974\":1}}],[\"返回有序集中指定分数区间内的成员\",{\"1\":{\"974\":1}}],[\"返回有序集中指定区间内的成员\",{\"1\":{\"974\":1}}],[\"返回有序集合中指定成员的排名\",{\"1\":{\"974\":1}}],[\"返回有序集合中指定成员的索引\",{\"1\":{\"974\":1}}],[\"返回有序集合中该元素的排名\",{\"1\":{\"948\":2}}],[\"返回集合中一个或多个随机数\",{\"1\":{\"973\":1}}],[\"返回集合的元素数量\",{\"1\":{\"649\":1}}],[\"返回\",{\"1\":{\"967\":2,\"970\":1,\"1429\":1}}],[\"返回给定所有集合的交集并存储在\",{\"1\":{\"973\":1}}],[\"返回给定所有集合的差集\",{\"1\":{\"973\":1}}],[\"返回给定\",{\"1\":{\"967\":2}}],[\"返回给定集合的并集\",{\"1\":{\"941\":1}}],[\"返回给定集合的交集\",{\"1\":{\"941\":1}}],[\"返回给定集合的差集\",{\"1\":{\"941\":1}}],[\"返回提示ok表示验证通过\",{\"1\":{\"963\":1}}],[\"返回sha值\",{\"1\":{\"952\":1}}],[\"返回介于min和max之间的所有成员列表\",{\"1\":{\"949\":1}}],[\"返回介于min和max之间的成员数量\",{\"1\":{\"949\":1}}],[\"返回指定区间的元素\",{\"1\":{\"949\":1}}],[\"返回指向反射值的指针反射值\",{\"1\":{\"373\":1}}],[\"返回对元素的权值\",{\"1\":{\"949\":1}}],[\"返回结果集的长度\",{\"1\":{\"941\":3}}],[\"返回数据结构体\",{\"1\":{\"884\":3}}],[\"返回数据存储内存的过程\",{\"1\":{\"800\":1}}],[\"返回匹配某个单独值的所有行\",{\"1\":{\"814\":1}}],[\"返回多少条数据\",{\"1\":{\"813\":1}}],[\"返回记录\",{\"1\":{\"813\":1}}],[\"返回类型为t的引用\",{\"1\":{\"654\":1}}],[\"返回类型为\",{\"1\":{\"654\":1}}],[\"返回的token是怎么生成的\",{\"1\":{\"572\":1,\"644\":1}}],[\"返回的是引用类型的实例\",{\"1\":{\"533\":1}}],[\"返回这个内存的指针\",{\"1\":{\"532\":1}}],[\"返回false时\",{\"1\":{\"436\":1}}],[\"返回了一个cancelctx和cancel函数\",{\"1\":{\"427\":1}}],[\"返回context和一个函数\",{\"1\":{\"427\":1}}],[\"返回nil\",{\"1\":{\"424\":1}}],[\"返回空字符串如果不存在\",{\"1\":{\"1280\":1}}],[\"返回空字符串\",{\"1\":{\"369\":1}}],[\"返回一个pong\",{\"1\":{\"968\":1}}],[\"返回一个数据的唯一标识objectid\",{\"1\":{\"881\":2,\"882\":2,\"883\":2}}],[\"返回一个指向类型t的指针\",{\"1\":{\"654\":1}}],[\"返回一个指向v的原始值的unsafe\",{\"1\":{\"360\":1}}],[\"返回一个指向v的原始值的uintptr\",{\"1\":{\"360\":1}}],[\"返回一个指向v的原始值的uinptr\",{\"1\":{\"360\":1}}],[\"返回一个管道\",{\"1\":{\"427\":1}}],[\"返回一个表示v地址的指针反射值\",{\"1\":{\"360\":1}}],[\"返回值的状态\",{\"1\":{\"1157\":1}}],[\"返回值的数量\",{\"1\":{\"364\":1}}],[\"返回值以及正确的返回值\",{\"1\":{\"504\":1}}],[\"返回值为是否通过测试\",{\"1\":{\"473\":1}}],[\"返回值会返回对应的值和该值是否存在\",{\"1\":{\"436\":1}}],[\"返回值类型为int\",{\"1\":{\"278\":1}}],[\"返回值组成\",{\"1\":{\"278\":1}}],[\"返回值\",{\"0\":{\"280\":1},\"1\":{\"278\":1,\"514\":2}}],[\"返回值是指针\",{\"1\":{\"1325\":1}}],[\"返回值是值\",{\"1\":{\"277\":1}}],[\"返回值是类型指针\",{\"1\":{\"277\":1}}],[\"返回值是添加后的切片\",{\"1\":{\"244\":1}}],[\"拿到写锁\",{\"1\":{\"431\":4,\"432\":4}}],[\"拿到读锁\",{\"1\":{\"431\":8,\"432\":8}}],[\"拿到指针所指向元素的反射类型\",{\"1\":{\"352\":1}}],[\"拿官方的一个例子展示效果\",{\"1\":{\"382\":1}}],[\"拿人手软\",{\"1\":{\"12\":1}}],[\"核数和可用资源决定\",{\"1\":{\"645\":1}}],[\"核数\",{\"1\":{\"498\":1}}],[\"核心技术\",{\"1\":{\"1072\":1}}],[\"核心中去实现\",{\"1\":{\"1054\":1}}],[\"核心思想是\",{\"1\":{\"988\":1}}],[\"核心表\",{\"1\":{\"794\":1}}],[\"核心线程数可以设置较大\",{\"1\":{\"645\":1}}],[\"核心线程数\",{\"1\":{\"645\":2}}],[\"核心参数以及有啥作用\",{\"1\":{\"590\":1,\"662\":1}}],[\"核心\",{\"0\":{\"349\":1}}],[\"核对通过\",{\"1\":{\"49\":1}}],[\"静态路由\",{\"1\":{\"1287\":1}}],[\"静态路由与动态路由\",{\"1\":{\"1285\":1}}],[\"静态资源服务器\",{\"1\":{\"1136\":1}}],[\"静态资源虚拟化\",{\"1\":{\"1107\":1}}],[\"静态服务\",{\"1\":{\"1108\":1}}],[\"静态变量\",{\"1\":{\"636\":1}}],[\"静态指的是go所有变量的类型早在编译期间就已经确定了\",{\"1\":{\"381\":1}}],[\"静态强类型\",{\"0\":{\"381\":1}}],[\"静态这一词是体现在对外表现的抽象的接口类型是不变的\",{\"1\":{\"347\":1}}],[\"静态接口类型\",{\"1\":{\"347\":1}}],[\"静态链接库调用成功\",{\"1\":{\"313\":1}}],[\"静态链接库\",{\"0\":{\"313\":1}}],[\"很不方便\",{\"1\":{\"1307\":1}}],[\"很扯是吧\",{\"1\":{\"1199\":1}}],[\"很卡\",{\"1\":{\"1184\":1}}],[\"很可能有请求\",{\"1\":{\"1155\":1}}],[\"很容易造成性能瓶颈\",{\"1\":{\"1005\":1}}],[\"很容易就能找到原始错误\",{\"1\":{\"392\":1}}],[\"很长的varchar\",{\"1\":{\"815\":1}}],[\"很难进行查询优化\",{\"1\":{\"786\":1}}],[\"很显然\",{\"1\":{\"475\":1}}],[\"很生动的表示了数据的流动方向\",{\"1\":{\"415\":1}}],[\"很少会出现突然冒出一个错误却不知道是从哪里来的这种情况\",{\"1\":{\"388\":1}}],[\"很严重的问题\",{\"1\":{\"388\":1}}],[\"很大程度上是从c语言吸取了教训\",{\"1\":{\"382\":1}}],[\"很大程度上\",{\"1\":{\"346\":1}}],[\"很多\",{\"1\":{\"1309\":1}}],[\"很多用户会将那些从原始topic来的数据进行\",{\"1\":{\"1019\":1}}],[\"很多列都建立索引不如建立联合索引\",{\"0\":{\"816\":1}}],[\"很多sql语句和数据库整体方案开始逐渐显露出了性\",{\"1\":{\"799\":1}}],[\"很多人都分不清int\",{\"1\":{\"791\":1}}],[\"很多人都知道\",{\"1\":{\"12\":1}}],[\"很多系统会将隔离级别设置为读提交\",{\"1\":{\"656\":1}}],[\"很多公司都是基于它进行魔改\",{\"1\":{\"123\":1}}],[\"很多大型企业都在使用这个架构\",{\"1\":{\"119\":1}}],[\"密码是否符合要求位数等等\",{\"1\":{\"1288\":1}}],[\"密码不对\",{\"1\":{\"823\":1}}],[\"密码存到数据库中是用的哪种方式进行的加密\",{\"1\":{\"572\":1,\"644\":1}}],[\"密集型\",{\"1\":{\"645\":5}}],[\"密集型任务时更有优势\",{\"1\":{\"649\":1}}],[\"密集型任务\",{\"1\":{\"645\":2,\"649\":1}}],[\"密切相关\",{\"1\":{\"346\":1}}],[\"密钥配置\",{\"0\":{\"51\":1}}],[\"密钥的生成\",{\"0\":{\"50\":1}}],[\"借助框架开发\",{\"1\":{\"1273\":1}}],[\"借助接口和结构体代替传统的类继承机制\",{\"1\":{\"150\":1}}],[\"借由上面的那种方式就可以返回泛型零值\",{\"1\":{\"343\":1}}],[\"队列中的请求同时具有了被处理的资格\",{\"1\":{\"1156\":1}}],[\"队列中的元素类型可以是任意的\",{\"1\":{\"343\":1}}],[\"队列里的请求不会立即处理\",{\"1\":{\"1155\":1}}],[\"队列或日志请求\",{\"1\":{\"654\":1}}],[\"队列长度\",{\"1\":{\"645\":2}}],[\"队列出现消息积压\",{\"1\":{\"614\":1,\"686\":1}}],[\"队列\",{\"0\":{\"343\":1}}],[\"~galles\",{\"1\":{\"802\":1,\"803\":1,\"805\":1}}],[\"~\",{\"1\":{\"476\":12,\"720\":4,\"724\":2,\"1003\":1,\"1078\":1,\"1143\":3,\"1151\":1,\"1187\":4,\"1188\":2,\"1193\":3,\"1194\":4,\"1195\":4,\"1196\":6,\"1197\":11,\"1198\":2}}],[\"~uint64\",{\"1\":{\"340\":1,\"341\":2}}],[\"~uint32\",{\"1\":{\"340\":1,\"341\":2}}],[\"~uint\",{\"1\":{\"340\":1,\"341\":2}}],[\"~uint16\",{\"1\":{\"340\":1,\"341\":2}}],[\"~uint8\",{\"1\":{\"340\":1,\"341\":2}}],[\"~int64\",{\"1\":{\"340\":1,\"341\":2,\"471\":1}}],[\"~int32\",{\"1\":{\"340\":1,\"341\":2,\"471\":1}}],[\"~int\",{\"1\":{\"340\":1,\"341\":2,\"471\":1}}],[\"~int16\",{\"1\":{\"340\":1,\"341\":2,\"471\":1}}],[\"~int8\",{\"1\":{\"340\":1,\"341\":2,\"471\":1}}],[\"~r0\",{\"1\":{\"317\":1,\"318\":1}}],[\"底层实现\",{\"1\":{\"633\":1,\"634\":1}}],[\"底层实现原理\",{\"1\":{\"584\":1,\"656\":2}}],[\"底层的数据结构是什么\",{\"1\":{\"622\":1,\"694\":1}}],[\"底层数据结构分析\",{\"1\":{\"801\":1}}],[\"底层数据结构\",{\"1\":{\"621\":1,\"693\":1}}],[\"底层数据结构和一些特性\",{\"1\":{\"587\":1,\"659\":1}}],[\"底层数据机构\",{\"1\":{\"621\":1,\"693\":1}}],[\"底层结构\",{\"1\":{\"563\":1,\"635\":3}}],[\"底层是用c语言开发\",{\"1\":{\"1107\":1}}],[\"底层是一个指向数组的指针\",{\"1\":{\"635\":1}}],[\"底层是int32\",{\"1\":{\"537\":1}}],[\"底层是需要优化再考虑\",{\"1\":{\"511\":1}}],[\"底层原理\",{\"1\":{\"511\":1,\"621\":1,\"693\":1,\"1196\":1}}],[\"底层类型\",{\"1\":{\"340\":1}}],[\"底层所存储的数据是否相等\",{\"1\":{\"294\":1}}],[\"翻译一下就是s是否包含chars内的任意字符串\",{\"1\":{\"1398\":1}}],[\"翻译\",{\"1\":{\"655\":1,\"1163\":1}}],[\"翻译成人话就是\",{\"1\":{\"340\":1}}],[\"翻译过来就是\",{\"1\":{\"287\":1,\"289\":2}}],[\"交易\",{\"1\":{\"1054\":1}}],[\"交通出行\",{\"1\":{\"817\":1}}],[\"交给下层\",{\"1\":{\"614\":1,\"686\":1}}],[\"交替打印奇偶数\",{\"1\":{\"545\":1}}],[\"交集\",{\"1\":{\"340\":2}}],[\"交换方法\",{\"1\":{\"1375\":1,\"1380\":1}}],[\"交换集合中的第\",{\"1\":{\"649\":1}}],[\"交换值\",{\"1\":{\"439\":2}}],[\"交换\",{\"0\":{\"208\":1}}],[\"约束了类型形参的类型范围\",{\"1\":{\"337\":1}}],[\"形成了两个极端\",{\"1\":{\"800\":1}}],[\"形成树形结构\",{\"1\":{\"638\":1}}],[\"形成一个良好的规范\",{\"1\":{\"287\":1}}],[\"形参具体是什么类型取决于传进来什么类型\",{\"1\":{\"337\":1}}],[\"难道要每一个类型都要编写一个函数吗\",{\"1\":{\"337\":1}}],[\"泛型集注意\",{\"1\":{\"516\":1}}],[\"泛型实现一个简单的==队列==\",{\"1\":{\"516\":1}}],[\"泛型提供了更高效\",{\"1\":{\"516\":1}}],[\"泛型的加入会导致编译器的工作量增加\",{\"1\":{\"345\":1}}],[\"泛型接口\",{\"1\":{\"341\":1}}],[\"泛型要解决的问题是类型无关的\",{\"1\":{\"339\":1}}],[\"泛型类型无法使用类型断言\",{\"1\":{\"339\":1,\"516\":1}}],[\"泛型形参t是不能作为基础类型的\",{\"1\":{\"339\":1}}],[\"泛型不能作为一个类型的基本类型\",{\"1\":{\"339\":1,\"516\":1}}],[\"泛型结构注意\",{\"1\":{\"516\":1}}],[\"泛型结构注意点\",{\"0\":{\"339\":1}}],[\"泛型结构\",{\"0\":{\"338\":1}}],[\"泛型是为了解决执行逻辑与类型无关的问题\",{\"1\":{\"337\":1,\"516\":1}}],[\"泛型\",{\"0\":{\"336\":1},\"1\":{\"635\":1}}],[\"光是阅读它们的源代码就需要花费不少时间\",{\"1\":{\"334\":1}}],[\"光学字符识别\",{\"1\":{\"142\":1}}],[\"经历过多次双十一的考验\",{\"1\":{\"1054\":1}}],[\"经常用其来进行缓存的访问的负载均衡\",{\"1\":{\"1165\":1}}],[\"经常用作查询条件的列\",{\"1\":{\"651\":1}}],[\"经常使用的列放在最左边\",{\"1\":{\"816\":1}}],[\"经常增删改的表\",{\"1\":{\"811\":1}}],[\"经过参数优化配置\",{\"1\":{\"1054\":1}}],[\"经过了分析器\",{\"1\":{\"779\":1}}],[\"经过cgo包裹了一下就成了go数组\",{\"1\":{\"306\":1}}],[\"经度\",{\"1\":{\"730\":5}}],[\"经度键值对\",{\"1\":{\"730\":1}}],[\"经验丰富的人可能几天就上手了\",{\"1\":{\"329\":1}}],[\"展示所有的镜像\",{\"1\":{\"1187\":1}}],[\"展示\",{\"1\":{\"1187\":1}}],[\"展示最近gc的最大耗时\",{\"1\":{\"328\":1}}],[\"展示每组主函数的协程相关统计信息\",{\"1\":{\"328\":1}}],[\"线上环境\",{\"1\":{\"796\":1}}],[\"线性同余法\",{\"1\":{\"637\":1}}],[\"线性表是一个数据元素按顺序排列的数据结构\",{\"1\":{\"636\":1}}],[\"线越粗\",{\"1\":{\"327\":1}}],[\"线程对资源加锁\",{\"1\":{\"654\":1}}],[\"线程在需要利用多核\",{\"1\":{\"649\":1}}],[\"线程在执行时需要独立的堆栈\",{\"1\":{\"649\":1}}],[\"线程切换时\",{\"1\":{\"649\":1}}],[\"线程需要独立的内存栈空间\",{\"1\":{\"649\":1}}],[\"线程存活时间\",{\"1\":{\"645\":1}}],[\"线程由操作系统管理\",{\"1\":{\"639\":1}}],[\"线程由操作系统参与调度\",{\"1\":{\"540\":1}}],[\"线程比协程更重\",{\"1\":{\"639\":1}}],[\"线程是\",{\"1\":{\"645\":1}}],[\"线程是操作系统的执行单元\",{\"1\":{\"639\":1}}],[\"线程是进程中的执行单元\",{\"1\":{\"636\":1}}],[\"线程之间的通信相对简单\",{\"1\":{\"636\":1}}],[\"线程安全\",{\"1\":{\"595\":1,\"637\":1,\"667\":1}}],[\"线程安全的布隆过滤器\",{\"1\":{\"127\":1}}],[\"线程数是5个\",{\"1\":{\"593\":1,\"665\":1}}],[\"线程开销大的原因\",{\"1\":{\"577\":1,\"649\":3}}],[\"线程的创建和销毁比协程要慢\",{\"1\":{\"649\":1}}],[\"线程的生命周期你了解吗\",{\"1\":{\"588\":1,\"660\":1}}],[\"线程的超时时间设置\",{\"1\":{\"573\":1,\"645\":2}}],[\"线程的通信方式是通过共享内存\",{\"1\":{\"540\":1}}],[\"线程池不再接受新的任务\",{\"1\":{\"645\":1}}],[\"线程池首先判断是否有空闲线程处理该任务\",{\"1\":{\"645\":1}}],[\"线程池中的线程有一个\",{\"1\":{\"645\":1}}],[\"线程池中的核心参数\",{\"1\":{\"573\":1,\"645\":2}}],[\"线程池中可以创建的最大线程数\",{\"1\":{\"645\":1}}],[\"线程池中始终保持的线程数量\",{\"1\":{\"645\":1}}],[\"线程池怎么处理\",{\"1\":{\"593\":1,\"665\":1}}],[\"线程池用过吗\",{\"1\":{\"590\":1,\"662\":1}}],[\"线程池的核心参数根据任务的特性来调整\",{\"1\":{\"645\":1}}],[\"线程池的这几个参数是如何确定的\",{\"1\":{\"573\":1,\"645\":2}}],[\"线程池的执行流程\",{\"1\":{\"573\":1,\"645\":2}}],[\"线程池golang\",{\"1\":{\"137\":1}}],[\"线程\",{\"1\":{\"564\":1,\"595\":1,\"618\":3,\"619\":1,\"636\":2,\"641\":1,\"645\":2,\"649\":2,\"667\":1,\"690\":3,\"691\":1}}],[\"线程日志中的标记通常指示每个\",{\"1\":{\"634\":1}}],[\"线程日志中\",{\"1\":{\"634\":2}}],[\"线程日志上面会有标记\",{\"1\":{\"562\":1,\"634\":2}}],[\"线程日志\",{\"1\":{\"562\":1,\"634\":3}}],[\"线程不管在内存\",{\"1\":{\"540\":1}}],[\"占位符\",{\"1\":{\"651\":1}}],[\"占用资源更少\",{\"1\":{\"1181\":1}}],[\"占用启动\",{\"1\":{\"1031\":1}}],[\"占用的索引空间越大\",{\"1\":{\"793\":1}}],[\"占用的内存为0字节\",{\"1\":{\"651\":1}}],[\"占用一个位置\",{\"1\":{\"654\":1}}],[\"占用更多的内存\",{\"1\":{\"635\":1}}],[\"占用24字节\",{\"1\":{\"554\":1}}],[\"占用\",{\"1\":{\"554\":1}}],[\"占用越高\",{\"1\":{\"327\":2}}],[\"占了一行的位置\",{\"1\":{\"212\":1}}],[\"块的颜色越深\",{\"1\":{\"327\":1}}],[\"块与块之间的变量相互独立\",{\"1\":{\"210\":1}}],[\"正则表达式包\",{\"1\":{\"1308\":1}}],[\"正则表达式匹配\",{\"1\":{\"1143\":1}}],[\"正则匹配规则\",{\"0\":{\"1143\":1}}],[\"正处于成长期\",{\"1\":{\"1056\":1}}],[\"正在处理http请求\",{\"1\":{\"427\":6}}],[\"正在使用的内存空间\",{\"1\":{\"327\":1}}],[\"正在使用的对象数量\",{\"1\":{\"327\":1}}],[\"正因为无缓冲管道无法存放数据\",{\"1\":{\"416\":1}}],[\"正因如此\",{\"1\":{\"388\":1}}],[\"正常来说输出结果应该是10\",{\"1\":{\"1417\":1}}],[\"正常都是30000\",{\"1\":{\"1235\":1}}],[\"正常一个干净的网络\",{\"1\":{\"1194\":1}}],[\"正常运行时\",{\"1\":{\"1064\":1}}],[\"正常情况下\",{\"1\":{\"822\":1}}],[\"正常情况下每一个依赖都会有两条记录\",{\"1\":{\"460\":1}}],[\"正常的局部变量是分配在栈内存\",{\"1\":{\"548\":1}}],[\"正常的流程出错\",{\"1\":{\"388\":1}}],[\"正常逻辑\",{\"1\":{\"398\":1}}],[\"正确做法是\",{\"1\":{\"515\":1,\"654\":1}}],[\"正确的返回值\",{\"1\":{\"494\":1}}],[\"正确结果也确实是10\",{\"1\":{\"429\":1}}],[\"正确来说应该开启一个新的协程来发送数据\",{\"1\":{\"416\":1}}],[\"正确方式\",{\"1\":{\"287\":1}}],[\"正确示例\",{\"1\":{\"189\":1,\"239\":1}}],[\"正确\",{\"1\":{\"179\":2}}],[\"目的是让用户能知道没有持久化功能\",{\"1\":{\"982\":1}}],[\"目标\",{\"0\":{\"1160\":1},\"1\":{\"818\":1,\"1009\":1}}],[\"目前最新版本是\",{\"1\":{\"1307\":1}}],[\"目前nginx服务器的upstream模块支持6种方式的分配\",{\"1\":{\"1160\":1}}],[\"目前由\",{\"1\":{\"1056\":1}}],[\"目前是\",{\"1\":{\"1054\":1}}],[\"目前该插件支持热更新\",{\"1\":{\"743\":1}}],[\"目前来说threadlocal是能不用就不用的\",{\"1\":{\"592\":1,\"664\":1}}],[\"目前支持以下几种测试\",{\"1\":{\"466\":1}}],[\"目前国内做的比较好的有以下几家\",{\"1\":{\"451\":1}}],[\"目前为止已分配的所有内存空间\",{\"1\":{\"327\":1}}],[\"目前已分配的所有对象数量\",{\"1\":{\"327\":1}}],[\"目录下\",{\"1\":{\"446\":1,\"1028\":1}}],[\"目录下以\",{\"1\":{\"28\":2}}],[\"目录\",{\"0\":{\"109\":1,\"905\":1,\"907\":1,\"1050\":1},\"1\":{\"58\":2,\"400\":1,\"630\":1}}],[\"目录找我们的私钥进行匹配\",{\"1\":{\"52\":1}}],[\"目录生成一个默认的id\",{\"1\":{\"50\":1}}],[\"火焰图\",{\"1\":{\"327\":1}}],[\"免去了我们手动操作命令行\",{\"1\":{\"327\":1}}],[\"免费版本一个账号只能创建14个云文件\",{\"1\":{\"74\":1}}],[\"免费给企业用的\",{\"1\":{\"43\":1}}],[\"互不打搅\",{\"1\":{\"1060\":1}}],[\"互不冲突\",{\"1\":{\"822\":1}}],[\"互相隔离\",{\"1\":{\"645\":1}}],[\"互相影响\",{\"1\":{\"529\":1}}],[\"互联网+的比赛做的是什么\",{\"1\":{\"597\":1,\"669\":1}}],[\"互联网出口\",{\"1\":{\"145\":1}}],[\"互斥量总是悲观的认为共享数据肯定会被修改\",{\"1\":{\"440\":1}}],[\"互斥锁正常模式和饥饿模式的区别\",{\"1\":{\"587\":1,\"659\":1}}],[\"互斥锁解锁\",{\"1\":{\"514\":1}}],[\"互斥锁适合读操作与写操作频率都差不多的情况\",{\"1\":{\"431\":1}}],[\"互斥锁\",{\"0\":{\"430\":1,\"556\":1},\"1\":{\"412\":1,\"555\":1,\"639\":2}}],[\"互斥锁相关信息的跟踪\",{\"1\":{\"324\":1}}],[\"锁等待\",{\"1\":{\"654\":1}}],[\"锁定时间\",{\"1\":{\"813\":1}}],[\"锁定一个位置\",{\"1\":{\"654\":1}}],[\"锁定模式\",{\"1\":{\"654\":1}}],[\"锁定共享资源\",{\"1\":{\"639\":1}}],[\"锁的释放通过唯一标识来防止其它线程解锁\",{\"1\":{\"653\":1}}],[\"锁的获取与释放应该由同一个线程负责\",{\"1\":{\"653\":1}}],[\"锁的意义在于保护不变量\",{\"1\":{\"429\":1}}],[\"锁通常是放在内存中\",{\"1\":{\"639\":1}}],[\"锁来避免多次查询\",{\"1\":{\"639\":1}}],[\"锁机制\",{\"1\":{\"638\":1}}],[\"锁怎么实现的\",{\"1\":{\"595\":1,\"667\":1}}],[\"锁获取后程序退出了\",{\"1\":{\"588\":1,\"660\":1}}],[\"锁表还是锁行\",{\"1\":{\"584\":1,\"656\":1}}],[\"锁\",{\"0\":{\"429\":1,\"555\":1},\"1\":{\"321\":1,\"537\":1,\"557\":1,\"638\":1}}],[\"毕竟gc诞生的目的就是为了解放开发者\",{\"1\":{\"320\":1}}],[\"便于查询\",{\"1\":{\"805\":1}}],[\"便于查问题\",{\"1\":{\"794\":1}}],[\"便于进行数据同步或检查变化\",{\"1\":{\"653\":1}}],[\"便于高效扫描\",{\"1\":{\"649\":1}}],[\"便会退出循环\",{\"1\":{\"420\":1}}],[\"便会发生逃逸现象\",{\"1\":{\"320\":1}}],[\"便可以进行读取操作了\",{\"1\":{\"401\":1}}],[\"便可以直接访问其tag\",{\"1\":{\"369\":1}}],[\"便需要用到reflect\",{\"1\":{\"349\":1}}],[\"便携式\",{\"1\":{\"130\":1}}],[\"禁止自动创建topic\",{\"1\":{\"1029\":1}}],[\"禁止写入\",{\"1\":{\"982\":1}}],[\"禁止写成\",{\"1\":{\"796\":1}}],[\"禁止被更新\",{\"1\":{\"795\":1}}],[\"禁止在数据库中存储图片\",{\"1\":{\"794\":1}}],[\"禁止指针运算\",{\"0\":{\"276\":1}}],[\"禁用\",{\"1\":{\"1222\":1}}],[\"禁用缓存\",{\"1\":{\"486\":1}}],[\"禁用内联优化\",{\"1\":{\"317\":1}}],[\"人工智能和大规模分布式系统方面的能力\",{\"1\":{\"655\":1}}],[\"人工分析就不是那么的轻松了\",{\"1\":{\"317\":1}}],[\"人事相关\",{\"1\":{\"655\":1}}],[\"人事\",{\"1\":{\"583\":1,\"655\":1}}],[\"人才风险\",{\"1\":{\"118\":1}}],[\"引擎内部扫描了多行\",{\"1\":{\"780\":1}}],[\"引擎接口取这个表的第一行\",{\"1\":{\"780\":1}}],[\"引擎层\",{\"1\":{\"614\":1,\"686\":1}}],[\"引擎的特性\",{\"1\":{\"611\":1,\"683\":1}}],[\"引出文件秒传\",{\"1\":{\"562\":1,\"634\":2}}],[\"引用计数\",{\"1\":{\"645\":1}}],[\"引用传递\",{\"1\":{\"633\":1}}],[\"引用第三方库之类的\",{\"1\":{\"625\":1,\"697\":1}}],[\"引用的数组指针地址是有的\",{\"1\":{\"534\":1}}],[\"引用数组的指针是nil\",{\"1\":{\"534\":1}}],[\"引用存储在栈上\",{\"1\":{\"529\":1}}],[\"引用类型如切片\",{\"0\":{\"534\":1}}],[\"引用类型使用new不能直接使用会报错\",{\"1\":{\"532\":1}}],[\"引用类型没有初始化返回的指针为nil不能直接使用\",{\"1\":{\"532\":1}}],[\"引用类型\",{\"0\":{\"529\":1},\"1\":{\"529\":1}}],[\"引用类型赋值底层直接就是同一个\",{\"1\":{\"511\":1}}],[\"引用\",{\"0\":{\"450\":1}}],[\"引用局部指针\",{\"0\":{\"317\":1}}],[\"引入你要限流的规则\",{\"1\":{\"1158\":1}}],[\"引入外部配置\",{\"1\":{\"1131\":1}}],[\"引入了并发安全的\",{\"1\":{\"649\":1}}],[\"引入了并发\",{\"1\":{\"635\":1}}],[\"引入了类型参数\",{\"1\":{\"635\":1}}],[\"引入了泛型\",{\"1\":{\"165\":1}}],[\"引入mq\",{\"1\":{\"620\":1,\"692\":1}}],[\"引入\",{\"1\":{\"491\":1,\"494\":1,\"635\":1}}],[\"引入互斥锁会极大的降低性能\",{\"1\":{\"266\":1}}],[\"好像上面组件太多了\",{\"1\":{\"1066\":1}}],[\"好未来面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"好未来\",{\"0\":{\"620\":1,\"692\":1}}],[\"好处\",{\"0\":{\"991\":1},\"1\":{\"558\":1}}],[\"好在大多情况下并不需要自行编写汇编\",{\"1\":{\"438\":1}}],[\"好在go工具链集成了许多性能分析工具以供开发者使用\",{\"1\":{\"315\":1}}],[\"好物分享\",{\"0\":{\"66\":1}}],[\"堆排序\",{\"1\":{\"649\":1}}],[\"堆内存的管理更灵活\",{\"1\":{\"636\":1}}],[\"堆内存的分配量\",{\"1\":{\"633\":1}}],[\"堆分配\",{\"1\":{\"635\":1}}],[\"堆分配情况\",{\"1\":{\"315\":1}}],[\"堆和栈区别\",{\"1\":{\"621\":1,\"693\":1}}],[\"堆和栈有什么区别\",{\"1\":{\"564\":1,\"636\":2}}],[\"堆如何删除某一个特定的节点\",{\"1\":{\"620\":1,\"692\":1}}],[\"堆的分区\",{\"1\":{\"606\":1,\"678\":1}}],[\"堆是一种特殊的数据结构\",{\"1\":{\"344\":1}}],[\"堆\",{\"0\":{\"344\":1},\"1\":{\"636\":2}}],[\"堆栈跟踪\",{\"1\":{\"1302\":1}}],[\"堆栈信息等许多方面\",{\"1\":{\"321\":1}}],[\"堆栈\",{\"1\":{\"127\":1}}],[\"然而如果我们业务每天产生海量日志\",{\"1\":{\"1307\":1}}],[\"然而kafka忽略掉\",{\"1\":{\"1019\":1}}],[\"然而\",{\"1\":{\"644\":1}}],[\"然而go在早期并没有一个成熟的依赖管理解决方案\",{\"1\":{\"442\":1}}],[\"然而现实中对程序性能分析的需求远远不止于此\",{\"1\":{\"315\":1}}],[\"然后对应的tag标签文档\",{\"1\":{\"1289\":1}}],[\"然后遇到参数再进行正则解析变量部分\",{\"1\":{\"1287\":1}}],[\"然后加上路径\",{\"1\":{\"1285\":1}}],[\"然后路径段是路由被分解出来的\",{\"1\":{\"1285\":1}}],[\"然后请求检查用户是否有权限在资源上执行操作\",{\"1\":{\"1259\":1}}],[\"然后容器都会有被误删的可能\",{\"1\":{\"1199\":1}}],[\"然后docker是执行\",{\"1\":{\"1193\":1}}],[\"然后执行\",{\"1\":{\"1185\":1}}],[\"然后执行了一下提示的语句\",{\"1\":{\"825\":1}}],[\"然后大家一起挂\",{\"1\":{\"1165\":1}}],[\"然后c至少需要承受1\",{\"1\":{\"1165\":1}}],[\"然后c需要承受b+c的数据\",{\"1\":{\"1165\":1}}],[\"然后a的数据迁移至b\",{\"1\":{\"1165\":1}}],[\"然后继续cd都挂了\",{\"1\":{\"1165\":1}}],[\"然后从数据映射到的位置开始顺时针查找\",{\"1\":{\"1165\":1}}],[\"然后从服务器读取\",{\"1\":{\"633\":1}}],[\"然后进行恢复\",{\"1\":{\"1165\":1}}],[\"然后进入执行器阶段\",{\"1\":{\"779\":1}}],[\"然后输出的时候采用的是恒定的速率执行请求\",{\"1\":{\"1149\":1}}],[\"然后把令牌放到令牌桶中\",{\"1\":{\"1147\":1}}],[\"然后把每次请求的信息写入到logs\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"然后访问nginx的静态资源服务器\",{\"0\":{\"1138\":1}}],[\"然后分派给小伙伴去完成\",{\"1\":{\"1127\":1}}],[\"然后添加成为全局的即可\",{\"1\":{\"1093\":1}}],[\"然后可以使用下面的go命令安装gin\",{\"1\":{\"1274\":1}}],[\"然后可以注册账号\",{\"1\":{\"44\":1}}],[\"然后可用考虑分布式存储系统使用的raft算法\",{\"1\":{\"1064\":1}}],[\"然后队列可用通过链表的结构\",{\"1\":{\"1061\":1}}],[\"然后刷盘\",{\"1\":{\"1054\":1}}],[\"然后放到一个集中的位置\",{\"1\":{\"1019\":1}}],[\"然后这些信息会被收集和处理从而创建监控仪表盘并发送警告\",{\"1\":{\"1019\":1}}],[\"然后这次就可以得到一个比较完整的模糊测试输出日志\",{\"1\":{\"477\":1}}],[\"然后redis\",{\"1\":{\"1000\":1}}],[\"然后rune其实是int32别名\",{\"1\":{\"511\":1}}],[\"然后通过template语句来引用指定的模板\",{\"1\":{\"1426\":1}}],[\"然后通过ps\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"然后通过发布订功能通知其余的从节点\",{\"1\":{\"999\":1}}],[\"然后通过类似sql语句的and和or将查询条件组合起来\",{\"1\":{\"762\":1}}],[\"然后备份用子进程操作\",{\"1\":{\"980\":1}}],[\"然后才能使用\",{\"1\":{\"890\":1}}],[\"然后才会被唤醒\",{\"1\":{\"422\":1}}],[\"然后启动新的版本\",{\"1\":{\"1215\":1}}],[\"然后启动\",{\"1\":{\"853\":1}}],[\"然后找到\",{\"1\":{\"852\":1}}],[\"然后按照年龄排序\",{\"1\":{\"838\":1}}],[\"然后按照字母表顺序输出结果\",{\"1\":{\"633\":1}}],[\"然后检查slave是否存在此数据库\",{\"1\":{\"824\":1}}],[\"然后检查标准输出与示例函数的注释是否匹配\",{\"1\":{\"502\":1}}],[\"然后重新启动两个服务器即可\",{\"1\":{\"822\":1}}],[\"然后重启es即可\",{\"1\":{\"740\":1}}],[\"然后合并结果\",{\"1\":{\"821\":1}}],[\"然后一条一条地通过该结果集中的数据作为过滤条件到下一个表中查询数据\",{\"1\":{\"821\":1}}],[\"然后是语法分析\",{\"1\":{\"778\":1}}],[\"然后索引字符串中单词的个数\",{\"1\":{\"733\":1}}],[\"然后排序\",{\"1\":{\"621\":1,\"693\":1}}],[\"然后他说m是经理hhh\",{\"1\":{\"615\":1,\"687\":1}}],[\"然后用sort排序\",{\"1\":{\"580\":1,\"652\":1}}],[\"然后创建新的上下文\",{\"1\":{\"546\":1}}],[\"然后创建测试文件\",{\"1\":{\"471\":1,\"475\":1}}],[\"然后创建测试文件example\",{\"1\":{\"470\":1}}],[\"然后传递赋值是直接拷贝数据即深拷贝\",{\"1\":{\"528\":1}}],[\"然后每一个数据类型都是其对齐系数的整数倍\",{\"1\":{\"513\":1}}],[\"然后使用原始文件名创建一个新的日志文件\",{\"1\":{\"1307\":1}}],[\"然后使用f\",{\"1\":{\"477\":1}}],[\"然后使用软连接到指定的目录下面\",{\"1\":{\"76\":1}}],[\"然后停止执行\",{\"1\":{\"471\":1}}],[\"然后修改go\",{\"1\":{\"463\":1}}],[\"然后go会将其存放在$gopath\",{\"1\":{\"454\":1}}],[\"然后就会自动去调整和重新分配槽位\",{\"1\":{\"1010\":2}}],[\"然后就会出现一个交互式的命令行\",{\"1\":{\"326\":1}}],[\"然后就是两者不推荐混用\",{\"1\":{\"515\":1}}],[\"然后就可以进行开发工作了\",{\"1\":{\"446\":1}}],[\"然后当父级结束时取消当前上下文\",{\"1\":{\"427\":1}}],[\"然后写入副本文件\",{\"1\":{\"403\":1}}],[\"然后写入目标文件中\",{\"1\":{\"403\":1}}],[\"然后写属于需求1\",{\"1\":{\"35\":1}}],[\"然后层层上抛\",{\"1\":{\"396\":1}}],[\"然后你需要与数据库交互\",{\"1\":{\"330\":1}}],[\"然后各自运行100w次\",{\"1\":{\"314\":1}}],[\"然后制作动态链接库\",{\"1\":{\"312\":1}}],[\"然后再输出end\",{\"1\":{\"1435\":1}}],[\"然后再继续等待\",{\"1\":{\"1047\":1}}],[\"然后再去连接主节点进行数据交互\",{\"1\":{\"999\":1}}],[\"然后再次查询主从同步状态show\",{\"1\":{\"822\":1}}],[\"然后再写入内存中\",{\"1\":{\"805\":1}}],[\"然后再执行请求了\",{\"1\":{\"776\":1}}],[\"然后再将所有测试用例全都执行\",{\"1\":{\"468\":1}}],[\"然后再根据gosumdb所指定的服务器\",{\"1\":{\"460\":1}}],[\"然后再读取数据并输出\",{\"1\":{\"415\":1}}],[\"然后再使用工具对采样的数据进行分析并展示结果\",{\"1\":{\"321\":1}}],[\"然后再转换成对应的指针类型\",{\"1\":{\"310\":1}}],[\"然后再创建sum\",{\"1\":{\"299\":1}}],[\"然后返回一个c指针\",{\"1\":{\"303\":1}}],[\"然后在模板中直接使用\",{\"1\":{\"1420\":1}}],[\"然后在重启启动nginx服务\",{\"1\":{\"1171\":1}}],[\"然后在重启即可\",{\"1\":{\"1131\":1}}],[\"然后在server\",{\"1\":{\"1154\":1}}],[\"然后在nginx\",{\"1\":{\"1131\":1}}],[\"然后在启动\",{\"1\":{\"1078\":1}}],[\"然后在本地连接即可\",{\"1\":{\"1075\":1}}],[\"然后在执行删除即可\",{\"1\":{\"1010\":1}}],[\"然后在删除\",{\"1\":{\"1010\":1}}],[\"然后在内存中进行where过滤\",{\"1\":{\"817\":1}}],[\"然后在es的目录下载创建一个ik努力\",{\"1\":{\"740\":1}}],[\"然后在\",{\"1\":{\"739\":1}}],[\"然后在函数内根据参数的数量进行判断\",{\"1\":{\"651\":1}}],[\"然后在之前创建的项目下使用go\",{\"1\":{\"453\":1}}],[\"然后在其中编写相关代码\",{\"1\":{\"446\":1}}],[\"然后在go代码中引入sum\",{\"1\":{\"312\":1}}],[\"然后在go中这段内存被gc掉了或者发生偏移\",{\"1\":{\"300\":1}}],[\"然后在go中导出函数\",{\"1\":{\"300\":1}}],[\"然后在go中的main函数进行调用\",{\"1\":{\"298\":1}}],[\"然后在main\",{\"1\":{\"299\":1}}],[\"然后在尾部插入一些元素\",{\"1\":{\"244\":1}}],[\"然后直接调用\",{\"1\":{\"298\":1}}],[\"然后将partition分散部署到多个设备\",{\"1\":{\"1063\":1}}],[\"然后将master直接kill掉\",{\"1\":{\"1003\":1}}],[\"然后将记录交给server层去检测该记录是否满足where条件\",{\"1\":{\"614\":1,\"686\":1}}],[\"然后将遍历过的灰色对象放入黑色对象\",{\"1\":{\"551\":1}}],[\"然后将其丢入一个叫做\",{\"1\":{\"1019\":1}}],[\"然后将其克隆到本地\",{\"1\":{\"445\":1}}],[\"然后将其递增\",{\"1\":{\"233\":1}}],[\"然后将目标文件打包成静态链接库\",{\"1\":{\"313\":1}}],[\"然后将这个证书和私钥配置到nginx或者apache的配置文件中去就可以了\",{\"1\":{\"84\":1}}],[\"然后将根据你提交代码的质量决定是否合并\",{\"1\":{\"53\":1}}],[\"然后我们记一下安装路径\",{\"1\":{\"84\":1}}],[\"然后需要备份就备份\",{\"1\":{\"84\":1}}],[\"然后安装nvm\",{\"1\":{\"76\":1}}],[\"然后让别人下载\",{\"1\":{\"39\":1}}],[\"然后右键创建版本库\",{\"1\":{\"14\":1}}],[\"然后开始发布消息说\",{\"1\":{\"12\":1}}],[\"然后爬取信息被人发现了\",{\"1\":{\"12\":1}}],[\"然后由linus本人通过手工方式合并代码\",{\"1\":{\"12\":1}}],[\"然后取其中k个数有多少种\",{\"1\":{\"4\":1}}],[\"倘若想要对结构体进行排序的话必须实现sort\",{\"1\":{\"1375\":1}}],[\"倘若想要传入两个float64类型的浮点数求和的话\",{\"1\":{\"337\":1}}],[\"倘若使用复杂的结构\",{\"1\":{\"1312\":1}}],[\"倘若使用复制的值\",{\"1\":{\"422\":1}}],[\"倘若是递归锁的话\",{\"1\":{\"429\":1}}],[\"倘若没有default分支\",{\"1\":{\"421\":1}}],[\"倘若有其他协程已经写入了数据\",{\"1\":{\"417\":1}}],[\"倘若循环中子协程的工作不只是一个简单的输出数字\",{\"1\":{\"412\":1}}],[\"倘若只是想获取该文件的一些信息\",{\"1\":{\"400\":1}}],[\"倘若要修改结构体字段值\",{\"1\":{\"368\":1}}],[\"倘若通过反射来修改反射值\",{\"1\":{\"361\":1}}],[\"倘若你学习完后感到无处施展拳脚\",{\"1\":{\"329\":1}}],[\"倘若执行的不是单纯的两数相加\",{\"1\":{\"314\":1}}],[\"倘若go函数具有多个返回值\",{\"1\":{\"300\":1}}],[\"求两个时间的差值\",{\"1\":{\"1429\":1}}],[\"求对数\",{\"0\":{\"1356\":1}}],[\"求出每个服务器的hash\",{\"1\":{\"1165\":1}}],[\"求总数\",{\"1\":{\"884\":1}}],[\"求count\",{\"1\":{\"884\":1}}],[\"求有多少种方法可以爬到楼顶\",{\"1\":{\"654\":1}}],[\"求其平均耗时\",{\"1\":{\"314\":1}}],[\"求字符串长度使用内置函数len\",{\"1\":{\"255\":1}}],[\"制作完成后\",{\"1\":{\"312\":1}}],[\"链表或红黑树实现\",{\"1\":{\"638\":1}}],[\"链表是线性表的一种实现形式\",{\"1\":{\"636\":1}}],[\"链表是一个由节点组成的数据结构\",{\"1\":{\"636\":1}}],[\"链表的插入和删除操作时间复杂度为\",{\"1\":{\"636\":1}}],[\"链表和线性表的区别\",{\"1\":{\"636\":1}}],[\"链表额线性表的区别\",{\"1\":{\"564\":1,\"636\":1}}],[\"链表\",{\"1\":{\"562\":1,\"634\":3}}],[\"链接库\",{\"0\":{\"311\":1}}],[\"链路追踪\",{\"1\":{\"111\":1}}],[\"谈到了指针避不开内存\",{\"1\":{\"310\":1}}],[\"想删除\",{\"1\":{\"870\":1}}],[\"想必大家也很好奇吧\",{\"1\":{\"791\":1}}],[\"想让c访问到go中的切片就只能把切片的指针传过去\",{\"1\":{\"306\":1}}],[\"想要保护服务的同时又尽量不影响用户\",{\"1\":{\"1068\":1}}],[\"想要拆解组件\",{\"1\":{\"1068\":1}}],[\"想要削峰填谷\",{\"1\":{\"1068\":1}}],[\"想要了解更多的话可以去百度\",{\"1\":{\"1330\":1}}],[\"想要了解更多细节建议使用go\",{\"1\":{\"469\":1}}],[\"想要了解map的原理可以前往map实现\",{\"1\":{\"258\":1}}],[\"想要清空缓存可以执行如下命令\",{\"1\":{\"457\":1}}],[\"想要清空map\",{\"1\":{\"264\":1}}],[\"想要更深一步学习\",{\"1\":{\"329\":1}}],[\"想要更多需要收费\",{\"1\":{\"43\":1}}],[\"想要直接使用别人写好的库除了直接获取源代码之外\",{\"1\":{\"311\":1}}],[\"想要使用cgo特性\",{\"1\":{\"297\":1}}],[\"想要使用此布局\",{\"1\":{\"0\":1}}],[\"想要练手的话\",{\"1\":{\"226\":1}}],[\"想要访问包中的类型时\",{\"1\":{\"175\":1}}],[\"想要回退\",{\"1\":{\"55\":1}}],[\"话虽如此\",{\"1\":{\"303\":1}}],[\"顺序错乱不会影响最左匹配\",{\"1\":{\"818\":1}}],[\"顺序访问指针\",{\"1\":{\"805\":1}}],[\"顺序读1g文件需n秒\",{\"1\":{\"788\":1}}],[\"顺序写入可以极大提高吞吐量\",{\"1\":{\"636\":1}}],[\"顺序写入\",{\"1\":{\"636\":1}}],[\"顺序执行\",{\"1\":{\"634\":1}}],[\"顺序消费\",{\"1\":{\"634\":1}}],[\"顺序直接下一步傻瓜式安装即可\",{\"1\":{\"13\":1}}],[\"顺便写一个测试文件进行单元测试\",{\"1\":{\"446\":1}}],[\"顺着链表上寻找\",{\"1\":{\"392\":1}}],[\"顺带一提\",{\"1\":{\"300\":1,\"310\":1}}],[\"需在函数签名上方加上\",{\"1\":{\"300\":1}}],[\"需要先进行sort\",{\"1\":{\"1379\":1}}],[\"需要先将业务停止写日志\",{\"1\":{\"1307\":1}}],[\"需要先搞明白里面的每一个字段的含义\",{\"1\":{\"1302\":1}}],[\"需要先了解接口\",{\"1\":{\"287\":1}}],[\"需要正则匹配来动态匹配路径\",{\"1\":{\"1285\":1}}],[\"需要正确的理解仓库\",{\"1\":{\"1183\":1}}],[\"需要1\",{\"1\":{\"1274\":1}}],[\"需要额外的配置资源\",{\"1\":{\"1235\":1}}],[\"需要额外空间\",{\"1\":{\"786\":1}}],[\"需要运行该命令来刷新systemd对该文件的配置\",{\"1\":{\"1223\":1}}],[\"需要维护几个容器运行\",{\"1\":{\"1215\":1}}],[\"需要的时候从仓库中拉下来就可以了\",{\"1\":{\"1183\":1}}],[\"需要部署服务\",{\"1\":{\"1180\":1}}],[\"需要根据不同的场景选择性运用\",{\"1\":{\"1169\":1}}],[\"需要扩展我们的缓存系统\",{\"1\":{\"1165\":1}}],[\"需要从令牌桶中取出一个令牌\",{\"1\":{\"1147\":1}}],[\"需要禁用request\",{\"1\":{\"1133\":1}}],[\"需要设置client\",{\"1\":{\"1133\":1}}],[\"需要设置隐藏文件夹可见\",{\"1\":{\"14\":1}}],[\"需要关闭防火墙\",{\"1\":{\"1121\":1}}],[\"需要开启默认的nginx端口\",{\"1\":{\"1121\":1}}],[\"需要开发者手动管理内存\",{\"1\":{\"168\":1}}],[\"需要确保zookeeper集群已经正常启动\",{\"1\":{\"1033\":1}}],[\"需要确保消息的顺序和高吞吐量\",{\"1\":{\"637\":1}}],[\"需要c的环境\",{\"1\":{\"964\":1}}],[\"需要优化\",{\"1\":{\"814\":3}}],[\"需要控制事务处理间隔时间\",{\"1\":{\"796\":1}}],[\"需要控制最多只有10个执行\",{\"1\":{\"582\":1,\"654\":2}}],[\"需要删除\",{\"1\":{\"795\":1}}],[\"需要了解一下mysql的逻辑架构\",{\"1\":{\"775\":1}}],[\"需要传入一个上下文对象\",{\"1\":{\"746\":1,\"748\":1,\"749\":1,\"751\":1}}],[\"需要传入一个自定义的比较器\",{\"1\":{\"344\":1}}],[\"需要保持一致\",{\"1\":{\"891\":1}}],[\"需要保存和恢复大量的上下文信息\",{\"1\":{\"649\":1}}],[\"需要保护\",{\"1\":{\"638\":1}}],[\"需要在交互对话里面输入密码\",{\"1\":{\"776\":1}}],[\"需要在编译时知道类型信息\",{\"1\":{\"645\":1}}],[\"需要在子协程内使用\",{\"1\":{\"635\":1}}],[\"需要更新这两个不同的db\",{\"1\":{\"600\":1,\"672\":1}}],[\"需要把这个撤回\",{\"1\":{\"573\":1,\"645\":1}}],[\"需要修改成其他节点计算机可以访问的ip地址\",{\"1\":{\"1010\":1}}],[\"需要修改对象值\",{\"1\":{\"549\":1}}],[\"需要修改接收者的值\",{\"1\":{\"515\":1}}],[\"需要停止一个协程需要向协程发送一个信号\",{\"1\":{\"539\":1}}],[\"需要初始化后才能使用\",{\"1\":{\"529\":1}}],[\"需要一些初始化准备工作\",{\"1\":{\"499\":1}}],[\"需要结合引用次数和更新时间来决定是否采用该依赖\",{\"1\":{\"453\":1}}],[\"需要结合其他关键字来进行使用\",{\"1\":{\"231\":1}}],[\"需要为这个库编写简洁明了的readme\",{\"1\":{\"448\":1}}],[\"需要为其分配内存\",{\"1\":{\"275\":1}}],[\"需要同时打开两个文件\",{\"1\":{\"403\":1}}],[\"需要自行编写逻辑来进行读取时切片的动态扩容\",{\"1\":{\"401\":1}}],[\"需要第三方包解决或者自己封装\",{\"1\":{\"388\":1}}],[\"需要处理\",{\"1\":{\"388\":1}}],[\"需要进行一次系统调用\",{\"1\":{\"817\":1}}],[\"需要进行一些额外的操作\",{\"1\":{\"368\":1}}],[\"需要进行如下操作\",{\"1\":{\"26\":1}}],[\"需要返回零值\",{\"1\":{\"343\":1}}],[\"需要安装graphviz\",{\"1\":{\"326\":1}}],[\"需要使用\",{\"1\":{\"1307\":1}}],[\"需要使用分布式锁来控制资源访问\",{\"1\":{\"653\":1}}],[\"需要使用到time包下的sleep函数\",{\"1\":{\"412\":1}}],[\"需要使用c\",{\"1\":{\"303\":1}}],[\"需要使用sync\",{\"1\":{\"266\":1}}],[\"需要使用sync中提供的锁机制\",{\"1\":{\"121\":1}}],[\"需要满足关系low<=\",{\"1\":{\"250\":1}}],[\"需要注意的是c必须是大写字母\",{\"1\":{\"297\":1}}],[\"需要注意的是\",{\"1\":{\"239\":1,\"262\":1,\"396\":1,\"429\":1,\"470\":1,\"1029\":1,\"1133\":1,\"1417\":1}}],[\"需要完整治理方案\",{\"1\":{\"116\":1}}],[\"需要快速开发\",{\"1\":{\"116\":1}}],[\"需要定制化开发\",{\"1\":{\"116\":1}}],[\"需要指定域名且要有dns配置\",{\"1\":{\"84\":1}}],[\"需要下载代码然后查看仔细全部的代码\",{\"1\":{\"79\":1}}],[\"需要规则另外找就可以避免了\",{\"1\":{\"72\":1}}],[\"需要提交前\",{\"1\":{\"58\":1}}],[\"需要和团队成员共享代码时\",{\"1\":{\"12\":1}}],[\"跟burst缓存处理相比\",{\"1\":{\"1156\":1}}],[\"跟随新上任的主服务器\",{\"1\":{\"999\":1}}],[\"跟随新的主服务\",{\"1\":{\"996\":1}}],[\"跟must的作用相反\",{\"1\":{\"764\":1}}],[\"跟前面创建的article索引结构一一对应\",{\"1\":{\"746\":1}}],[\"跟\",{\"1\":{\"622\":1,\"694\":1}}],[\"跟踪所有的协程\",{\"1\":{\"324\":1}}],[\"跟上图一样\",{\"1\":{\"310\":1}}],[\"跟go代码糅杂在一起十分降低可读性\",{\"1\":{\"298\":1}}],[\"跟大多数语言类似\",{\"1\":{\"187\":1}}],[\"另外提供基于\",{\"1\":{\"1239\":1}}],[\"另外一个请求被拒绝\",{\"1\":{\"1155\":1}}],[\"另外有高级使用再另写一个文件\",{\"1\":{\"903\":1}}],[\"另外建议在使用这些命令时结合\",{\"1\":{\"813\":1}}],[\"另外两个是devicemapper驱动依赖的\",{\"1\":{\"774\":1}}],[\"另外\",{\"1\":{\"633\":1,\"635\":1,\"1309\":1}}],[\"另外要注意的一个点就是\",{\"1\":{\"297\":1}}],[\"另一种是自动触发\",{\"1\":{\"981\":1}}],[\"另一种是通过名称\",{\"1\":{\"367\":1}}],[\"另一种方法就是使用io\",{\"1\":{\"403\":1}}],[\"另一种方法是使用os\",{\"1\":{\"403\":1}}],[\"另一种就是通过var关键字来声明\",{\"1\":{\"278\":1}}],[\"另一个需要注意的点是当指针指向的元素地址移动时\",{\"1\":{\"1443\":1}}],[\"另一个地方跑单测\",{\"1\":{\"503\":1}}],[\"另一个是转换结果的布尔值\",{\"1\":{\"386\":1}}],[\"另一个是解引用符\",{\"1\":{\"275\":1}}],[\"另一个类则是有方法集的接口\",{\"1\":{\"347\":1}}],[\"另一个注意点是\",{\"1\":{\"300\":1}}],[\"另一个就是比较函数\",{\"1\":{\"281\":1}}],[\"另一方面\",{\"1\":{\"12\":1}}],[\"请注意\",{\"1\":{\"1152\":1,\"1156\":1,\"1307\":2}}],[\"请查看$uri更改或重写uri\",{\"1\":{\"1133\":1}}],[\"请查阅官方文档es\",{\"1\":{\"702\":1}}],[\"请登录\",{\"1\":{\"1092\":1}}],[\"请先自行了解和学习\",{\"1\":{\"827\":1}}],[\"请先自行学习\",{\"1\":{\"700\":1}}],[\"请参考es教程\",{\"1\":{\"762\":1}}],[\"请阅读\",{\"1\":{\"755\":1}}],[\"请移步泛型\",{\"1\":{\"295\":1}}],[\"请求超时时间配置\",{\"1\":{\"1332\":1}}],[\"请求方法\",{\"1\":{\"1286\":1}}],[\"请求体绑定\",{\"1\":{\"1283\":1}}],[\"请求体参数\",{\"0\":{\"1281\":1},\"1\":{\"1279\":1}}],[\"请求示例\",{\"1\":{\"1281\":3,\"1282\":1,\"1283\":1}}],[\"请求头参数\",{\"0\":{\"1282\":1},\"1\":{\"1279\":1}}],[\"请求头字段\",{\"1\":{\"1133\":2}}],[\"请求头字段>符合请求的服务器名\",{\"1\":{\"1133\":1}}],[\"请求使用条件r\",{\"1\":{\"1256\":1}}],[\"请求使用的web协议\",{\"1\":{\"1133\":1}}],[\"请求定义可能看起来像这样\",{\"1\":{\"1251\":1}}],[\"请求和匹配器\",{\"1\":{\"1249\":1}}],[\"请求和响应\",{\"1\":{\"1071\":1}}],[\"请求和响应转换\",{\"1\":{\"1071\":1}}],[\"请求会被发送到它这里\",{\"1\":{\"1161\":1}}],[\"请求数量超过限流频率时\",{\"1\":{\"1158\":1}}],[\"请求放入队列跟burst缓存处理是一样的\",{\"1\":{\"1156\":1}}],[\"请求成功率没变化\",{\"1\":{\"1156\":1}}],[\"请求排队的时间就会比较长\",{\"1\":{\"1156\":1}}],[\"请求先进入到漏桶里\",{\"1\":{\"1146\":1}}],[\"请求http\",{\"1\":{\"1139\":2}}],[\"请求地址\",{\"1\":{\"1133\":1}}],[\"请求的长度\",{\"1\":{\"1133\":1}}],[\"请求中的主机头字段\",{\"1\":{\"1133\":1}}],[\"请求中的当前uri\",{\"1\":{\"1133\":1}}],[\"请求中的参数值\",{\"1\":{\"1133\":1}}],[\"请求时候的ip\",{\"1\":{\"1123\":1}}],[\"请求验证\",{\"1\":{\"1071\":1}}],[\"请求路由到相应的后端服务\",{\"1\":{\"1071\":1}}],[\"请求路由\",{\"1\":{\"1071\":1}}],[\"请求激增\",{\"1\":{\"1068\":1}}],[\"请求同步数据\",{\"1\":{\"993\":1}}],[\"请求返回的内容格式是一行一个分词\",{\"1\":{\"743\":1}}],[\"请求需要返回两个头部\",{\"1\":{\"743\":1}}],[\"请求被路由到后端应用服务器\",{\"1\":{\"655\":1}}],[\"请求通过网络传输到目标服务器\",{\"1\":{\"655\":1}}],[\"请求上限通常是由以下几个因素决定的\",{\"1\":{\"645\":1}}],[\"请求是\",{\"1\":{\"641\":1}}],[\"请求\",{\"1\":{\"637\":1,\"638\":1,\"641\":3,\"1165\":1,\"1249\":1}}],[\"请求合并\",{\"1\":{\"636\":1}}],[\"请求到达项目服务器后的调用链路\",{\"1\":{\"600\":1,\"672\":1}}],[\"请求耗时过长\",{\"1\":{\"579\":1,\"651\":1}}],[\"请求跟踪等的微服务工具包\",{\"1\":{\"128\":1}}],[\"请求连接\",{\"1\":{\"82\":1}}],[\"请求求别人合并你修改的代码\",{\"1\":{\"53\":1}}],[\"则从字符串中删除该字符\",{\"1\":{\"1405\":1}}],[\"则字段名优先以json标签为准\",{\"1\":{\"1320\":1}}],[\"则保留所有文件\",{\"1\":{\"1307\":1}}],[\"则在os\",{\"1\":{\"1307\":1}}],[\"则在\",{\"1\":{\"1307\":1}}],[\"则放在文件名的末尾\",{\"1\":{\"1307\":1}}],[\"则通过将当前时间放在文件扩展名之前的名称中的时间戳中来重命名文件\",{\"1\":{\"1307\":1}}],[\"则通过通过镜像启动容器\",{\"1\":{\"1185\":1}}],[\"则表示当前用户节点后没有服务器节点\",{\"1\":{\"1165\":1}}],[\"则表示关闭这个配置项\",{\"1\":{\"911\":1}}],[\"则认为该server已经挂了或者宕机了\",{\"1\":{\"1163\":1}}],[\"则认为发生了冲突\",{\"1\":{\"653\":1}}],[\"则代表在1秒内请求某一server失败达到2次后\",{\"1\":{\"1163\":1}}],[\"则标记server已宕机\",{\"1\":{\"1163\":1}}],[\"则该参数失效\",{\"1\":{\"1163\":1}}],[\"则该索引仅出现在key列表\",{\"1\":{\"814\":1}}],[\"则该索引将被列出\",{\"1\":{\"814\":1}}],[\"则所有请求会等待排队\",{\"1\":{\"1151\":1}}],[\"则为空\",{\"1\":{\"1133\":1}}],[\"则为服务器处理请求的服务器名称\",{\"1\":{\"1133\":1}}],[\"则使用圆环中的第一个节点\",{\"1\":{\"1165\":1}}],[\"则使用gateway作为业务网关完全够用\",{\"1\":{\"1072\":1}}],[\"则使用默认格式\",{\"1\":{\"721\":1}}],[\"则不会分配内存且返回空字符串\",{\"1\":{\"1396\":1}}],[\"则不会删除旧的日志文件\",{\"1\":{\"1307\":1}}],[\"则不会读取策略文件中的结果字段\",{\"1\":{\"1252\":1}}],[\"则不会影响consumers的消息情况\",{\"1\":{\"1029\":1}}],[\"则不允许删除\",{\"1\":{\"58\":1}}],[\"则写入对应的partition\",{\"1\":{\"1023\":1}}],[\"则哨兵必须也配置密码\",{\"1\":{\"1000\":1}}],[\"则对网络资源要求就越高\",{\"1\":{\"1000\":1}}],[\"则判定该服务器为\",{\"1\":{\"997\":1}}],[\"则日志将会发送给\",{\"1\":{\"965\":1}}],[\"则可以按需以\",{\"1\":{\"1174\":1}}],[\"则可以使用更大的page\",{\"1\":{\"965\":1}}],[\"则可以分配到栈上\",{\"1\":{\"635\":1}}],[\"则可用管理员账号登录\",{\"1\":{\"872\":1}}],[\"则没有使用索引\",{\"1\":{\"814\":1}}],[\"则被标记为union\",{\"1\":{\"814\":1}}],[\"则其右边所有列都无法使用索引\",{\"1\":{\"806\":1}}],[\"则其module指令必须与所替换的模块路径匹配\",{\"1\":{\"459\":1}}],[\"则key\",{\"1\":{\"795\":1}}],[\"则是第一次调用的是\",{\"1\":{\"780\":1}}],[\"则执行后面的过程\",{\"1\":{\"777\":1}}],[\"则一直使用同一个连接\",{\"1\":{\"776\":1}}],[\"则遍历结果\",{\"1\":{\"756\":1}}],[\"则创建一个\",{\"1\":{\"745\":1}}],[\"则创建新线程执行任务\",{\"1\":{\"645\":1}}],[\"则提交成功\",{\"1\":{\"656\":1}}],[\"则任务将被放入任务队列\",{\"1\":{\"645\":1}}],[\"则将用户信息写入数据库\",{\"1\":{\"641\":1}}],[\"则替换堆顶元素并调整堆\",{\"1\":{\"639\":1}}],[\"则\",{\"1\":{\"635\":1,\"997\":1,\"998\":1}}],[\"则需要这样做http\",{\"1\":{\"1274\":1}}],[\"则需要进行数据迁移\",{\"1\":{\"1165\":1}}],[\"则需要进行1000次数据库连接\",{\"1\":{\"821\":1}}],[\"则需要分配到堆上\",{\"1\":{\"635\":1}}],[\"则需要提供一个io\",{\"1\":{\"401\":1}}],[\"则也无法捕获\",{\"1\":{\"635\":1}}],[\"则说明主从复制一直处于连接状态\",{\"1\":{\"823\":1}}],[\"则说明依赖版本不同\",{\"1\":{\"460\":1}}],[\"则说明该字段不存在\",{\"1\":{\"368\":1}}],[\"则会找不到对应的存储服务器\",{\"1\":{\"1165\":1}}],[\"则会直接溢出\",{\"1\":{\"1146\":1}}],[\"则会忽略\",{\"1\":{\"1143\":1}}],[\"则会采用轮询方式\",{\"1\":{\"1023\":1}}],[\"则会根据key的值hash出一个partition\",{\"1\":{\"1023\":1}}],[\"则会只扫描索引文件\",{\"1\":{\"818\":1}}],[\"则会失效\",{\"1\":{\"813\":1}}],[\"则会导致innodb内部页分裂和大量随机i\",{\"1\":{\"794\":1}}],[\"则会以\",{\"1\":{\"777\":1}}],[\"则会同时阻塞读协程和写协程\",{\"1\":{\"431\":1}}],[\"则会panic\",{\"1\":{\"294\":1}}],[\"则读取文件夹下所有的内容\",{\"1\":{\"408\":1}}],[\"则必须以o\",{\"1\":{\"402\":1}}],[\"则必须传入一个结构体指针\",{\"1\":{\"368\":1}}],[\"否\",{\"1\":{\"294\":2,\"1072\":5}}],[\"否则以结构体属性名为准\",{\"1\":{\"1320\":1}}],[\"否则不认识这个主机\",{\"1\":{\"1226\":1}}],[\"否则为\",{\"1\":{\"1133\":1}}],[\"否则为空字符串\",{\"1\":{\"1133\":2}}],[\"否则为false\",{\"1\":{\"436\":1}}],[\"否则也会造成集群没办法创建成功\",{\"1\":{\"1010\":1}}],[\"否则创建集群的时候无法访问对应节单机的端口\",{\"1\":{\"1010\":1}}],[\"否则哨兵无法对主从服务器进行监控\",{\"1\":{\"1000\":1}}],[\"否则一些\",{\"1\":{\"986\":1}}],[\"否则未更新数据丢弃\",{\"1\":{\"859\":1}}],[\"否则命令不会自动创建\",{\"1\":{\"851\":1}}],[\"否则可能会出现无法通过ip连接docker容器内mysql的问题\",{\"1\":{\"822\":1}}],[\"否则有可能出现刷屏的情况\",{\"1\":{\"813\":1}}],[\"否则sql会很慢\",{\"1\":{\"796\":1}}],[\"否则会就重复出现\",{\"1\":{\"1087\":1}}],[\"否则会产生间隙锁\",{\"1\":{\"796\":1}}],[\"否则会造成数据的丢失\",{\"1\":{\"1010\":1}}],[\"否则会造成失效\",{\"1\":{\"770\":1}}],[\"否则会造成es启动失败\",{\"1\":{\"736\":1}}],[\"否则会panic\",{\"1\":{\"352\":1,\"360\":2}}],[\"否则重试\",{\"1\":{\"656\":1}}],[\"否则其他写操作就无法获得读写锁了\",{\"1\":{\"557\":1}}],[\"否则得不到反射信息\",{\"1\":{\"526\":1}}],[\"否则返回false\",{\"1\":{\"516\":1}}],[\"否则的话什么也不做\",{\"1\":{\"440\":1}}],[\"否则的话编译不通过\",{\"1\":{\"176\":1}}],[\"否则将会提示undefined\",{\"1\":{\"1419\":1}}],[\"否则将无法正常解析\",{\"1\":{\"1418\":1}}],[\"否则将无法通过编译\",{\"1\":{\"239\":1}}],[\"否则将新的值存入并返回\",{\"1\":{\"436\":1}}],[\"否则无法命中索引\",{\"1\":{\"806\":1}}],[\"否则无法成功写入文件\",{\"1\":{\"402\":1}}],[\"否则无法通过编译\",{\"1\":{\"210\":1}}],[\"否则程序立即停止运行并输出堆栈信息\",{\"1\":{\"394\":1}}],[\"否则调用unwrap\",{\"1\":{\"393\":1}}],[\"否则就只是一个普通的函数\",{\"1\":{\"470\":1}}],[\"否则就不会\",{\"1\":{\"468\":1}}],[\"否则就不是完全相等\",{\"1\":{\"379\":1}}],[\"否则就一直向上查找\",{\"1\":{\"427\":1}}],[\"否则就阻塞等待\",{\"1\":{\"430\":1}}],[\"否则就阻塞\",{\"1\":{\"422\":1}}],[\"否则就会报错\",{\"1\":{\"1417\":1}}],[\"否则就会一直阻塞\",{\"1\":{\"417\":1}}],[\"否则就会阻塞等待\",{\"1\":{\"416\":1}}],[\"否则就是一个空指针\",{\"1\":{\"275\":1}}],[\"否则这块内存是不会被自动释放掉的\",{\"1\":{\"310\":1}}],[\"否则找不到c文件\",{\"1\":{\"299\":1}}],[\"否则水就溢出来了\",{\"1\":{\"243\":1}}],[\"否则生成的是切片\",{\"1\":{\"239\":1}}],[\"否则桌面就是一个仓库\",{\"1\":{\"18\":1}}],[\"依次在kafka各个节点上执行如下命令即可\",{\"1\":{\"1033\":1}}],[\"依赖安装\",{\"1\":{\"878\":1}}],[\"依赖\",{\"0\":{\"701\":1,\"890\":1}}],[\"依赖服务状态\",{\"1\":{\"655\":1}}],[\"依赖注入\",{\"1\":{\"645\":1}}],[\"依赖的代理服务器集合\",{\"1\":{\"461\":1}}],[\"依赖的源码压缩包\",{\"1\":{\"460\":1}}],[\"依赖难以管理\",{\"1\":{\"442\":1}}],[\"依赖问题\",{\"1\":{\"314\":1}}],[\"依据url分配方式\",{\"1\":{\"1160\":1}}],[\"依据ip分配方式\",{\"1\":{\"1160\":1}}],[\"依据\",{\"1\":{\"294\":1}}],[\"依旧是同一个锁\",{\"1\":{\"432\":1}}],[\"依旧在原先访问到的值基础上加一\",{\"1\":{\"429\":1}}],[\"依旧可以读取数据\",{\"1\":{\"420\":1}}],[\"依旧可以通过值接收者来修改其内部值\",{\"1\":{\"287\":1}}],[\"依旧采用any进行约束\",{\"1\":{\"344\":1}}],[\"依旧还是http\",{\"1\":{\"84\":1}}],[\"依旧没有就放弃这个连接\",{\"1\":{\"82\":1}}],[\"组件\",{\"1\":{\"1066\":1}}],[\"组成的\",{\"1\":{\"1006\":1}}],[\"组成的元组\",{\"1\":{\"294\":1}}],[\"组成\",{\"0\":{\"1007\":1},\"1\":{\"641\":1}}],[\"组合索引顺序不一致\",{\"1\":{\"819\":1}}],[\"组合索引缺少索引字段\",{\"1\":{\"819\":1}}],[\"组合索引\",{\"1\":{\"809\":1}}],[\"组合了两个子查询\",{\"1\":{\"763\":1,\"765\":1}}],[\"组合\",{\"0\":{\"5\":1,\"270\":1},\"1\":{\"513\":1,\"635\":1}}],[\"组合问题\",{\"1\":{\"4\":1}}],[\"向上取整\",{\"0\":{\"1354\":1}}],[\"向下取整\",{\"0\":{\"1353\":1}}],[\"向producer发送确认ack\",{\"1\":{\"1021\":1}}],[\"向zookeeper获取对应partition的leader信息\",{\"1\":{\"1021\":1}}],[\"向kafka推送消息\",{\"1\":{\"1020\":1}}],[\"向主服务发送了ping命令\",{\"1\":{\"997\":1}}],[\"向有序集合添加一个或多个成员\",{\"1\":{\"974\":1}}],[\"向集合插入数据\",{\"1\":{\"857\":1}}],[\"向集合users插入如下数据\",{\"1\":{\"832\":1}}],[\"向channel发送信号\",{\"1\":{\"654\":1}}],[\"向channel中发送一个信号\",{\"1\":{\"654\":1}}],[\"向oddch\",{\"1\":{\"545\":1}}],[\"向evench传一个空对象\",{\"1\":{\"545\":1}}],[\"向对象池申请的一个对象\",{\"1\":{\"435\":1}}],[\"向a管道写入数据\",{\"1\":{\"421\":1}}],[\"向文件写入字节切片也是类似的操作\",{\"1\":{\"402\":1}}],[\"向切片添加完元素后必须覆盖原切片\",{\"1\":{\"287\":1}}],[\"向互联网开放\",{\"1\":{\"43\":1}}],[\"遗憾的是\",{\"1\":{\"286\":1}}],[\"遗传算法和粒子群优化库\",{\"1\":{\"142\":1}}],[\"且官方声称该包不受go\",{\"1\":{\"1437\":1}}],[\"且要在6\",{\"1\":{\"1289\":1}}],[\"且消息队列会一直堆积直到奔溃\",{\"1\":{\"1062\":1}}],[\"且副本的数量不能大于broker的数量\",{\"1\":{\"1020\":1}}],[\"且可以进行分区\",{\"1\":{\"1018\":1}}],[\"且可以实现数据的并行处理和存储\",{\"1\":{\"636\":1}}],[\"且使用索引查找\",{\"1\":{\"796\":1}}],[\"且主键值\",{\"1\":{\"795\":1}}],[\"且为\",{\"1\":{\"794\":1}}],[\"且保留数组中每个对象的独立性\",{\"1\":{\"729\":1}}],[\"且不等同于any\",{\"1\":{\"1438\":1}}],[\"且不能被搜索\",{\"1\":{\"723\":1}}],[\"且不需要用户自己管理基础设施\",{\"1\":{\"655\":1}}],[\"且不存在时会自动创建\",{\"1\":{\"400\":1}}],[\"且被广泛用于map的键类型或通道的值类型\",{\"1\":{\"651\":1}}],[\"且由程序而非操作系统调度\",{\"1\":{\"649\":1}}],[\"且因为所有数据都在叶子节点\",{\"1\":{\"649\":1}}],[\"且库存数据更新没有及时同步\",{\"1\":{\"644\":1}}],[\"且重新计算哈希值\",{\"1\":{\"641\":1}}],[\"且加载时没有性能问题时\",{\"1\":{\"637\":1}}],[\"且没有其他阻塞操作\",{\"1\":{\"634\":1}}],[\"且没有开启足够的重试机制\",{\"1\":{\"634\":1}}],[\"且会按照\",{\"1\":{\"634\":1}}],[\"且会返回是否成功替换的布尔值\",{\"1\":{\"440\":1}}],[\"且未提交消费进度\",{\"1\":{\"634\":1}}],[\"且所有的空切片指向的是同一个地址\",{\"1\":{\"534\":1}}],[\"且每个测试用例执行两轮\",{\"1\":{\"475\":1}}],[\"且函数的入参必须是t\",{\"1\":{\"471\":1}}],[\"且其功能也仅限于本地开发\",{\"1\":{\"463\":1}}],[\"且其原始数据不可读\",{\"1\":{\"323\":1}}],[\"且新版本不加以区分的话\",{\"1\":{\"459\":1}}],[\"且vcs属于以下的其中之一\",{\"1\":{\"443\":1}}],[\"且提供了非常简单易用的api\",{\"1\":{\"429\":1}}],[\"且提供了更加完善的错误检查机制\",{\"1\":{\"389\":1}}],[\"且只能进行一种操作\",{\"1\":{\"421\":1}}],[\"且只能是管道\",{\"1\":{\"421\":1}}],[\"且只有自定义类型能够拥有方法\",{\"1\":{\"285\":1}}],[\"且权限为0666向指定写入数据的例子\",{\"1\":{\"402\":1}}],[\"且参数只能是一个有效的error\",{\"1\":{\"392\":1}}],[\"且类型名称不建议与已有的内置标识符重复\",{\"1\":{\"383\":1}}],[\"且返回值为func\",{\"1\":{\"382\":1}}],[\"且导入名称无法被重写\",{\"1\":{\"297\":1}}],[\"且该类型的值可以由该接口类型的变量存储\",{\"1\":{\"289\":2}}],[\"且后续使用过程中可能会频繁的插入和删除元素\",{\"1\":{\"242\":1}}],[\"且后续使用中不会有扩容的需求\",{\"1\":{\"238\":1}}],[\"半天排查不出来是什么原因\",{\"1\":{\"285\":1}}],[\"循环添加数据\",{\"1\":{\"863\":1}}],[\"循环步骤2\",{\"1\":{\"551\":1}}],[\"循环控制\",{\"0\":{\"509\":1}}],[\"循环内计数1\",{\"1\":{\"422\":1}}],[\"循环\",{\"0\":{\"284\":1}}],[\"关联是将外部的多个命名的\",{\"1\":{\"1426\":1}}],[\"关联\",{\"0\":{\"1426\":1}}],[\"关联到\",{\"1\":{\"970\":1}}],[\"关联查询太多join\",{\"1\":{\"799\":1}}],[\"关注公众号互联网架构师\",{\"1\":{\"876\":1}}],[\"关注的业务指标\",{\"1\":{\"610\":1,\"682\":1}}],[\"关系数据库\",{\"1\":{\"904\":1}}],[\"关系数据库管理系统\",{\"1\":{\"846\":1}}],[\"关系型数据库\",{\"0\":{\"904\":1}}],[\"关系总结\",{\"0\":{\"848\":1}}],[\"关键还是参数的添加\",{\"1\":{\"1188\":1}}],[\"关键\",{\"1\":{\"822\":1}}],[\"关键点包括\",{\"1\":{\"645\":1}}],[\"关键点在于sum\",{\"1\":{\"300\":1}}],[\"关键字类型\",{\"0\":{\"719\":1}}],[\"关键字并发执行\",{\"1\":{\"639\":1}}],[\"关键字\",{\"1\":{\"537\":1,\"717\":1}}],[\"关闭swap分区\",{\"1\":{\"1222\":1}}],[\"关闭swap分区等等\",{\"1\":{\"1222\":1}}],[\"关闭防火墙\",{\"1\":{\"1222\":2,\"1235\":1}}],[\"关闭服务\",{\"1\":{\"1175\":1}}],[\"关闭的\",{\"1\":{\"1163\":1}}],[\"关闭\",{\"1\":{\"852\":1,\"1010\":1,\"1122\":1}}],[\"关闭连接\",{\"0\":{\"913\":1},\"1\":{\"830\":1}}],[\"关闭资源\",{\"1\":{\"634\":1}}],[\"关闭或者超时\",{\"1\":{\"546\":1}}],[\"关闭文件\",{\"1\":{\"514\":1}}],[\"关闭管道\",{\"1\":{\"420\":2}}],[\"关闭已关闭的管道\",{\"1\":{\"418\":1}}],[\"关闭一个nil管道\",{\"1\":{\"418\":1}}],[\"关闭网络连接等操作\",{\"1\":{\"283\":1}}],[\"关于http相关的知识这里不再赘述\",{\"1\":{\"1330\":1}}],[\"关于redis\",{\"0\":{\"966\":1}}],[\"关于redis的驱动有很多\",{\"1\":{\"909\":1}}],[\"关于高级查询中会使用的操作符\",{\"0\":{\"885\":1}}],[\"关于索引\",{\"0\":{\"795\":1}}],[\"关于表\",{\"1\":{\"794\":1}}],[\"关于库\",{\"1\":{\"794\":1}}],[\"关于\",{\"1\":{\"588\":2,\"660\":2}}],[\"关于求职者基本情况\",{\"1\":{\"575\":1,\"647\":1}}],[\"关于go中的模糊测试可以前往go\",{\"1\":{\"477\":1}}],[\"关于go可用的版本号自行前往官方查阅\",{\"1\":{\"459\":1}}],[\"关于output有以下几种写法\",{\"1\":{\"470\":1}}],[\"关于如何删除模块的信息\",{\"1\":{\"450\":1}}],[\"关于如何分析数据\",{\"1\":{\"327\":1}}],[\"关于上传模块的更多详细信息\",{\"1\":{\"450\":1}}],[\"关于管道关闭的时机\",{\"1\":{\"420\":1}}],[\"关于管道阻塞的条件需要好好掌握和熟悉\",{\"1\":{\"418\":1}}],[\"关于读取文件的操作\",{\"1\":{\"401\":1}}],[\"关于文件权限的则提供了以下常量\",{\"1\":{\"400\":1}}],[\"关于文件描述符\",{\"1\":{\"400\":1}}],[\"关于代表\",{\"1\":{\"385\":1}}],[\"关于折线图\",{\"1\":{\"327\":1}}],[\"关于整数的类型映射还在可以在标准库cmd\",{\"1\":{\"304\":1}}],[\"关于cgo\",{\"1\":{\"296\":1}}],[\"关于接口的定义发生了变化\",{\"1\":{\"289\":1}}],[\"关于指针有两个常用的操作符\",{\"1\":{\"275\":1}}],[\"关于这一点社区也曾激烈讨论过\",{\"1\":{\"261\":1}}],[\"关于字符串的更多细节\",{\"1\":{\"258\":1}}],[\"关于函数后的花括号到底该不该换行\",{\"1\":{\"189\":1}}],[\"关于编码风格这一块go是强制所有人统一同一种风格\",{\"1\":{\"188\":1}}],[\"每当创建新的日志文件时\",{\"1\":{\"1307\":1}}],[\"每当写入会导致当前日志文件超过\",{\"1\":{\"1307\":1}}],[\"每当一个线程执行时\",{\"1\":{\"654\":1}}],[\"每当一个协程执行完毕时调用done\",{\"1\":{\"422\":1}}],[\"每棵树根据路由进行构建树\",{\"1\":{\"1286\":1}}],[\"每台服务器操作繁琐复杂\",{\"1\":{\"1180\":1}}],[\"每台机器的承受的压力是m\",{\"1\":{\"1165\":1}}],[\"每天定时为数据库备份\",{\"1\":{\"1175\":1}}],[\"每天晚上23\",{\"1\":{\"1175\":1}}],[\"每日凌晨1点执行\",{\"1\":{\"1175\":1}}],[\"每日凌晨\",{\"1\":{\"1175\":1}}],[\"每分钟执行\",{\"1\":{\"1175\":1}}],[\"每分钟放100个请求进入nginx\",{\"1\":{\"1158\":1}}],[\"每小时\",{\"1\":{\"1174\":1}}],[\"每半天\",{\"1\":{\"1174\":1}}],[\"每100毫秒处理一个请求\",{\"1\":{\"1154\":1}}],[\"每段就是一个partition分区\",{\"1\":{\"1062\":1}}],[\"每节点配置6个cpu\",{\"1\":{\"1039\":1}}],[\"每组segment文件⼜包含\",{\"1\":{\"1026\":1}}],[\"每条消息都会被分配⼀个顺序的唯⼀标识\",{\"1\":{\"1025\":1}}],[\"每种数据库都可能会不一样\",{\"1\":{\"891\":1}}],[\"每种消息队列都有其特点\",{\"1\":{\"637\":1}}],[\"每访问一个节点\",{\"1\":{\"804\":1}}],[\"每张表有多少行被优化器查询过\",{\"1\":{\"814\":1}}],[\"每张表的字段数量最多为65535个\",{\"1\":{\"798\":1,\"799\":1}}],[\"每张表的字段数量最多为4096个\",{\"1\":{\"798\":1,\"799\":1}}],[\"每张表的字段数量是有限制的\",{\"1\":{\"798\":1}}],[\"每张表能够拥有的字段数量是有限制的\",{\"1\":{\"797\":1}}],[\"每页大小\",{\"1\":{\"756\":1,\"757\":1,\"758\":1,\"763\":1}}],[\"每页100条\",{\"1\":{\"593\":1,\"665\":1}}],[\"每隔固定时间运行sql语句来更新字段\",{\"1\":{\"653\":1}}],[\"每秒放行一个请求\",{\"1\":{\"1158\":1}}],[\"每秒消费1000条消息\",{\"0\":{\"1043\":1,\"1046\":1}}],[\"每秒消费100条消息\",{\"0\":{\"1042\":1,\"1045\":1}}],[\"每秒处理55万消息\",{\"1\":{\"1018\":1}}],[\"每秒事务数\",{\"1\":{\"644\":1}}],[\"每秒请求数\",{\"1\":{\"644\":1}}],[\"每一步具体都在做些什么呢\",{\"1\":{\"592\":1,\"664\":1}}],[\"每一个\",{\"1\":{\"1420\":1}}],[\"每一个标准库的包级注释都会详细说明这个包是干什么用的\",{\"1\":{\"1308\":1}}],[\"每一个broker在集群中的唯一表示\",{\"1\":{\"1029\":1}}],[\"每一个分区都有多个副本\",{\"1\":{\"1020\":1}}],[\"每一个分区都是一个顺序的\",{\"1\":{\"1018\":1}}],[\"每一个库都有自己的集合和权限\",{\"1\":{\"845\":1}}],[\"每一个索引还会占用一定的物理空间\",{\"1\":{\"809\":1}}],[\"每一个轻量级线程都是一个g\",{\"1\":{\"654\":1}}],[\"每一个m绑定一个p\",{\"1\":{\"542\":1}}],[\"每一个测试用例的命名风格为testxxxx\",{\"1\":{\"471\":1}}],[\"每一个测试文件中都会有若干个测试函数用于不同的测试\",{\"1\":{\"467\":1}}],[\"每一个现代语言都会有属于自己的一个成熟的依赖管理工具\",{\"1\":{\"442\":1}}],[\"每一个原子类型都会提供以下三个方法\",{\"1\":{\"439\":1}}],[\"每一个协程在访问数据前\",{\"1\":{\"430\":1}}],[\"每一个case只能操作一个管道\",{\"1\":{\"421\":1}}],[\"每一个错误都是通过函数调用的返回值产生的\",{\"1\":{\"388\":1}}],[\"每一个新声明的类型都必须有一个与之对应的基础类型\",{\"1\":{\"383\":1}}],[\"每一个键所映射的值都完全相等\",{\"1\":{\"379\":1}}],[\"每个对应一个节点\",{\"1\":{\"1285\":1}}],[\"每个对象有一个唯一的标识符\",{\"1\":{\"634\":1}}],[\"每个镜像有不同的标签\",{\"1\":{\"1183\":1}}],[\"每个仓库中又包含了多个镜像\",{\"1\":{\"1183\":1}}],[\"每个域代表一个含义\",{\"1\":{\"1175\":1}}],[\"每个计算结果位置都放置⼀个此服务节点\",{\"1\":{\"1165\":1}}],[\"每个ip最多保持1个链接\",{\"1\":{\"1158\":1}}],[\"每个server最多保持100个连接\",{\"1\":{\"1158\":1}}],[\"每个工作进程的最大允许连接的客户端最大连接数\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"每个消费者负责一个partition\",{\"1\":{\"1062\":1}}],[\"每个消费者实例可以消费多个分区\",{\"1\":{\"1027\":1}}],[\"每个部分的含义如下\",{\"1\":{\"1029\":1}}],[\"每个值的格式均为\",{\"1\":{\"1029\":1}}],[\"每个配置项含义如下\",{\"1\":{\"1029\":1}}],[\"每个partition的文件夹下面会有多组segment\",{\"1\":{\"1026\":1}}],[\"每个partition都是⼀个有序并且不可变的消息记录集合\",{\"1\":{\"1025\":1}}],[\"每个p拥有一个本地队列\",{\"1\":{\"654\":1}}],[\"每个topic可以有多个分区\",{\"1\":{\"1020\":1}}],[\"每个kafka集群内的broker都有一个不重复的\",{\"1\":{\"1020\":1}}],[\"每个服务器上有一个或多个kafka的实\",{\"1\":{\"1020\":1}}],[\"每个主节点管理其中的一部分槽\",{\"1\":{\"1007\":1}}],[\"每个主节点负责存储一定数量的哈希槽和数据\",{\"1\":{\"1007\":1}}],[\"每个主节点负责若干个哈希槽\",{\"1\":{\"1006\":1}}],[\"每个副本节点是某个主节点的副本\",{\"1\":{\"1006\":1}}],[\"每个分片是主从结构\",{\"1\":{\"1005\":1}}],[\"每个表有固定的列和行\",{\"1\":{\"904\":1}}],[\"每个表可以包含多个字段来描述和定义数据的结构\",{\"1\":{\"797\":1}}],[\"每个数据库将概念和go实际使用两个模块\",{\"1\":{\"903\":1}}],[\"每个数据包都会进行校验\",{\"1\":{\"636\":1}}],[\"每个集合没有固定的结构\",{\"1\":{\"846\":1}}],[\"每个容器有其独立的ip\",{\"1\":{\"822\":1}}],[\"每个扇区的最小单位\",{\"1\":{\"805\":1}}],[\"每个磁盘块的大小为\",{\"1\":{\"805\":1}}],[\"每个字段都被索引并可被搜索\",{\"1\":{\"735\":1}}],[\"每个索引字段都有一个专用的\",{\"1\":{\"734\":1}}],[\"每个文档是字段的集合\",{\"1\":{\"734\":1}}],[\"每个格式都会被依次尝试\",{\"1\":{\"721\":1}}],[\"每个goroutine执行时向channel发送一个信号\",{\"1\":{\"654\":1}}],[\"每个goroutine在p上执行\",{\"1\":{\"651\":1}}],[\"每个m对应一个操作系统线程\",{\"1\":{\"654\":1}}],[\"每个元素都有两种状态\",{\"1\":{\"653\":1}}],[\"每个进程独立执行\",{\"1\":{\"645\":1}}],[\"每个进程拥有独立的内存空间\",{\"1\":{\"636\":1,\"645\":1}}],[\"每个请求会按时间顺序逐一分配到不同的后端服务器\",{\"1\":{\"1161\":1}}],[\"每个请求进来请求数就+1\",{\"1\":{\"1148\":1}}],[\"每个请求的平均响应时间\",{\"1\":{\"644\":1}}],[\"每个请求可能由不同的线程处理\",{\"1\":{\"641\":1}}],[\"每个请求开启一个协程处理\",{\"1\":{\"546\":1}}],[\"每个节点代表着一个路由的\",{\"1\":{\"1285\":1}}],[\"每个节点的密码\",{\"1\":{\"1010\":1}}],[\"每个节点都知道集群的拓扑结构\",{\"1\":{\"1006\":1}}],[\"每个节点负责管理若干个哈希槽\",{\"1\":{\"1006\":1}}],[\"每个节点负责一部分槽\",{\"1\":{\"1006\":1}}],[\"每个节点分别包含索引键值和一个指向对应数据记录的物理地址的指针\",{\"1\":{\"802\":1}}],[\"每个节点可以有多个子节点\",{\"1\":{\"641\":1}}],[\"每个节点包含数据和指向下一个节点的指针\",{\"1\":{\"636\":1}}],[\"每个客户端有一个唯一的\",{\"1\":{\"641\":1}}],[\"每个包前面加上表示数据包长度的字段\",{\"1\":{\"636\":1}}],[\"每个片段单独上传\",{\"1\":{\"634\":1}}],[\"每个状态之间怎么流转的你了解吗\",{\"1\":{\"588\":1,\"660\":1}}],[\"每个\",{\"1\":{\"525\":1,\"635\":1,\"1060\":2}}],[\"每个功能和语法决策都旨在让程序员的⽣活更轻松\",{\"1\":{\"522\":1}}],[\"每创建一个go\",{\"1\":{\"459\":1}}],[\"每创建一个defer\",{\"1\":{\"284\":1}}],[\"每次注册路由时\",{\"1\":{\"1286\":1}}],[\"每次启动ip都不一样为此需要service资源使用域名访问\",{\"1\":{\"1215\":1}}],[\"每次执行持久化操作的间隔时间较长\",{\"1\":{\"988\":1}}],[\"每次执行的时间\",{\"1\":{\"813\":1}}],[\"每次都执行很影响性能\",{\"1\":{\"987\":1}}],[\"每次创建\",{\"1\":{\"981\":1}}],[\"每次循环执行department表中的查询\",{\"1\":{\"821\":1}}],[\"每次循环执行employee表中的查询\",{\"1\":{\"821\":1}}],[\"每次返回的记录数\",{\"1\":{\"813\":1}}],[\"每次更新不单单更新数据\",{\"1\":{\"811\":1}}],[\"每次更新数据库时\",{\"1\":{\"644\":1}}],[\"每次查找的某个元素的时候都要取磁盘中查找\",{\"1\":{\"805\":1}}],[\"每次从磁盘中查找数据称为磁盘i\",{\"1\":{\"800\":1}}],[\"每次最多允许10个线程同时执行\",{\"1\":{\"654\":1}}],[\"每次可以爬1步或2步\",{\"1\":{\"654\":1}}],[\"每次修改时\",{\"1\":{\"653\":1}}],[\"每次窗口移动时\",{\"1\":{\"645\":1}}],[\"每次数据写入数据库时\",{\"1\":{\"641\":1}}],[\"每次与堆顶元素比较\",{\"1\":{\"639\":1}}],[\"每次抢单时\",{\"1\":{\"638\":1}}],[\"每次成功的包确认后\",{\"1\":{\"636\":1}}],[\"每次增加的值越大\",{\"1\":{\"498\":1}}],[\"每次增加数字前都会先上锁\",{\"1\":{\"440\":1}}],[\"每次读取数据都需要花费1毫秒\",{\"1\":{\"417\":1}}],[\"每将它调用一次\",{\"1\":{\"282\":1}}],[\"每声明一个变量\",{\"1\":{\"204\":1}}],[\"闭包的基础\",{\"1\":{\"514\":1}}],[\"闭包的输出是7\",{\"1\":{\"285\":1}}],[\"闭包recover不会恢复外部函数的任何panic\",{\"1\":{\"397\":1}}],[\"闭包函数可以看作调用了一个函数\",{\"1\":{\"397\":1}}],[\"闭包引用了\",{\"1\":{\"548\":1}}],[\"闭包引用了函数外的变量\",{\"1\":{\"318\":1}}],[\"闭包引用并修改\",{\"1\":{\"514\":1}}],[\"闭包引用\",{\"0\":{\"318\":1}}],[\"闭包\",{\"0\":{\"282\":1},\"1\":{\"282\":2,\"514\":1}}],[\"变多\",{\"1\":{\"1063\":1}}],[\"变随机io访问为顺序io操作\",{\"1\":{\"817\":1}}],[\"变长参数\",{\"1\":{\"651\":1}}],[\"变长参数可以接收0个或多个值\",{\"1\":{\"279\":1}}],[\"变量必须先声明才能使用\",{\"1\":{\"1419\":1}}],[\"变量会逃逸到堆上\",{\"1\":{\"633\":1}}],[\"变量会随着函数执行结束后释放内存\",{\"1\":{\"548\":1}}],[\"变量或者对象超出了原本的范围内\",{\"1\":{\"548\":1}}],[\"变量首字母小写是private\",{\"1\":{\"526\":1}}],[\"变量首字母大写是public\",{\"1\":{\"526\":1}}],[\"变量大小写的区别\",{\"0\":{\"526\":1}}],[\"变量和类型都存储在链接包中\",{\"1\":{\"525\":1}}],[\"变量遮蔽问题\",{\"1\":{\"388\":1}}],[\"变量的地址被返回或者传递到外部函数\",{\"1\":{\"548\":1}}],[\"变量的内存分配是由编译器决定的\",{\"1\":{\"316\":1}}],[\"变量的声明会用到var关键字\",{\"1\":{\"205\":1}}],[\"变量e就会以指数级增长一次\",{\"1\":{\"282\":1}}],[\"变量都是有效的\",{\"1\":{\"234\":1}}],[\"变量之间的比较有一个大前提\",{\"1\":{\"209\":1}}],[\"变量a被重新赋值\",{\"1\":{\"206\":1}}],[\"变量名中的后半部分name可以替换成任意响应头字段\",{\"1\":{\"1133\":1}}],[\"变量名中的后半部分name可以替换成任意请求头字段\",{\"1\":{\"1133\":1}}],[\"变量名的命名规则必须遵守标识符的命名规则\",{\"1\":{\"205\":1}}],[\"变量名\",{\"1\":{\"205\":1}}],[\"变量以查看更多细节\",{\"1\":{\"204\":1}}],[\"变量是用于保存一个值的存储位置\",{\"1\":{\"204\":1}}],[\"变量命名等等\",{\"1\":{\"178\":1}}],[\"变量\",{\"0\":{\"204\":1,\"1419\":1},\"1\":{\"174\":2,\"175\":1}}],[\"缓冲为空\",{\"1\":{\"535\":1}}],[\"缓冲满了\",{\"1\":{\"535\":1}}],[\"缓冲区为空返回一个零值\",{\"1\":{\"535\":1}}],[\"缓冲区为空\",{\"1\":{\"418\":1}}],[\"缓冲区已经满了\",{\"1\":{\"417\":1}}],[\"缓冲区有空位了\",{\"1\":{\"417\":1}}],[\"缓冲区满了以后就开始阻塞等待读协程来读取\",{\"1\":{\"417\":1}}],[\"缓冲区满了\",{\"1\":{\"417\":1}}],[\"缓冲区大小为1的管道\",{\"1\":{\"414\":1,\"417\":1}}],[\"缓冲区大小为10的通道\",{\"1\":{\"277\":1}}],[\"缓冲区默认大小为32kb\",{\"1\":{\"403\":1}}],[\"缓存命中率不高\",{\"1\":{\"1166\":1}}],[\"缓存系统的扩展或者节点宕机导致的缓存失效的问题\",{\"1\":{\"1165\":1}}],[\"缓存队列越来越长\",{\"1\":{\"1156\":1}}],[\"缓存多少受限于队列大小\",{\"1\":{\"1156\":1}}],[\"缓存后端服务的响应\",{\"1\":{\"1071\":1}}],[\"缓存到内存的修改命令越多\",{\"1\":{\"987\":1}}],[\"缓存内的数据没能及时写入磁盘就会有丢失风险\",{\"1\":{\"987\":1}}],[\"缓存来提高响应速度\",{\"1\":{\"656\":1}}],[\"缓存不一致问题\",{\"1\":{\"644\":1}}],[\"缓存和数据库之间的同步可能会滞后\",{\"1\":{\"644\":1}}],[\"缓存和数据库都没有数据\",{\"1\":{\"641\":1}}],[\"缓存和数据库都没有\",{\"1\":{\"636\":1}}],[\"缓存预热\",{\"1\":{\"641\":1,\"644\":1}}],[\"缓存预加载\",{\"1\":{\"639\":1}}],[\"缓存更新策略\",{\"1\":{\"641\":1}}],[\"缓存更新失败怎么办\",{\"1\":{\"576\":1,\"648\":1}}],[\"缓存热点数据\",{\"1\":{\"639\":1}}],[\"缓存\",{\"1\":{\"639\":1,\"655\":1,\"1071\":1}}],[\"缓存穿透\",{\"1\":{\"636\":1,\"639\":1,\"641\":1}}],[\"缓存穿透问题及解决方案\",{\"1\":{\"569\":1,\"641\":2}}],[\"缓存的过期时间错开\",{\"1\":{\"636\":1}}],[\"缓存雪崩\",{\"1\":{\"636\":1}}],[\"缓存中的某个热点数据失效\",{\"1\":{\"636\":1}}],[\"缓存优先\",{\"1\":{\"635\":1}}],[\"缓存用于存储常用数据和提高访问速度\",{\"1\":{\"635\":1}}],[\"缓存验证码用于快速验证\",{\"1\":{\"634\":1}}],[\"缓存等技术栈\",{\"1\":{\"655\":1}}],[\"缓存等\",{\"1\":{\"634\":1}}],[\"缓存同时过期会有什么问题以及如何解决\",{\"1\":{\"576\":1,\"648\":1}}],[\"缓存是否有过期时间机制\",{\"1\":{\"576\":1,\"648\":1}}],[\"缓存与数据库一致性是分布式系统中的一个经典问题\",{\"1\":{\"644\":1}}],[\"缓存与数据库一致性\",{\"1\":{\"576\":1,\"648\":1}}],[\"缓存击穿\",{\"1\":{\"564\":1,\"636\":3}}],[\"缓存没有大小限制且不会自动删除\",{\"1\":{\"457\":1}}],[\"缓存慢速数据库查询的通用接口\",{\"1\":{\"127\":1}}],[\"缓存库存\",{\"1\":{\"641\":1}}],[\"缓存库\",{\"1\":{\"127\":1}}],[\"缓存支持\",{\"1\":{\"111\":1}}],[\"专门针对特定格式的绑定\",{\"1\":{\"1283\":1}}],[\"专注于为不同场景下的权限管理提供灵活的解决方案\",{\"1\":{\"1238\":1}}],[\"专注于时序数据的收集与处理\",{\"1\":{\"166\":1}}],[\"专为并发设计的\",{\"1\":{\"635\":1}}],[\"专利\",{\"1\":{\"599\":1,\"671\":1}}],[\"专业问题\",{\"1\":{\"567\":1,\"639\":2}}],[\"专用\",{\"1\":{\"400\":1}}],[\"专用于给切片\",{\"1\":{\"277\":1}}],[\"专用于给指针分配内存空间\",{\"1\":{\"277\":1}}],[\"足足浪费了14个字节\",{\"1\":{\"273\":1}}],[\"算出的hash是一致的\",{\"1\":{\"1164\":1}}],[\"算得上是最流行的消息队列之一\",{\"1\":{\"1053\":1}}],[\"算是对文件系统的抽象\",{\"1\":{\"1308\":1}}],[\"算是读写锁的应用吧\",{\"1\":{\"558\":1}}],[\"算是一种语法糖\",{\"1\":{\"271\":1}}],[\"算法来实现分布式锁\",{\"1\":{\"633\":1}}],[\"算法手撕\",{\"1\":{\"578\":1,\"650\":1}}],[\"算法与反问\",{\"0\":{\"578\":1,\"650\":1}}],[\"算法题\",{\"1\":{\"569\":1,\"581\":1,\"584\":1,\"590\":1,\"597\":1,\"606\":1,\"611\":1,\"641\":1,\"653\":2,\"656\":2,\"662\":1,\"669\":1,\"678\":1,\"683\":1}}],[\"算法名称\",{\"1\":{\"460\":1}}],[\"算法和数据结构\",{\"1\":{\"127\":1}}],[\"算法\",{\"0\":{\"3\":1},\"1\":{\"566\":1,\"567\":1,\"573\":1,\"600\":1,\"613\":1,\"619\":1,\"621\":1,\"633\":1,\"638\":2,\"639\":2,\"645\":2,\"672\":1,\"685\":1,\"691\":1,\"693\":1}}],[\"拓展性强\",{\"1\":{\"269\":1}}],[\"拓展表达式就是为了解决此类问题而生的\",{\"1\":{\"250\":1}}],[\"拓展表达式\",{\"0\":{\"250\":1}}],[\"刻意弱化了面向对象的功能\",{\"1\":{\"266\":1}}],[\"读提交能满足业务需求\",{\"1\":{\"656\":1}}],[\"读提交\",{\"1\":{\"656\":1}}],[\"读解锁\",{\"1\":{\"557\":1}}],[\"读多写少\",{\"1\":{\"431\":1,\"432\":1,\"618\":1,\"690\":1}}],[\"读\",{\"1\":{\"418\":1}}],[\"读协程读取数据时\",{\"1\":{\"432\":1}}],[\"读协程可以正常获得读锁\",{\"1\":{\"431\":1}}],[\"读协程也执行结束\",{\"1\":{\"417\":1}}],[\"读协程执行完毕\",{\"1\":{\"417\":1}}],[\"读一个\",{\"1\":{\"417\":1}}],[\"读写操作\",{\"0\":{\"927\":1}}],[\"读写分离\",{\"1\":{\"799\":1}}],[\"读写锁还是互斥锁\",{\"1\":{\"618\":1,\"690\":1}}],[\"读写锁是针对读写操作的互斥锁\",{\"1\":{\"557\":1}}],[\"读写锁\",{\"0\":{\"431\":1,\"557\":1},\"1\":{\"555\":1,\"639\":1}}],[\"读写无缓冲管道\",{\"1\":{\"418\":1}}],[\"读写互斥锁内部实现依旧是互斥锁\",{\"1\":{\"431\":1}}],[\"读写互斥锁\",{\"1\":{\"412\":1}}],[\"读写\",{\"0\":{\"415\":1},\"1\":{\"400\":1}}],[\"读写io的抽象层\",{\"1\":{\"399\":1}}],[\"读操作\",{\"1\":{\"266\":1,\"649\":1}}],[\"读取配置使用viper\",{\"1\":{\"1303\":1}}],[\"读取值\",{\"1\":{\"910\":1}}],[\"读取当前集合的所有index信息\",{\"1\":{\"862\":1}}],[\"读取已提交数据\",{\"1\":{\"641\":1}}],[\"读取未提交数据\",{\"1\":{\"641\":1}}],[\"读取未提交事务的数据\",{\"1\":{\"634\":1}}],[\"读取会不会发生错误\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"读取指定k的值\",{\"1\":{\"558\":1}}],[\"读取或存入\",{\"1\":{\"436\":1}}],[\"读取并删除\",{\"1\":{\"436\":1}}],[\"读取空缓冲区的管道\",{\"1\":{\"418\":1}}],[\"读取空的管道和写入已满的管道都会造成阻塞\",{\"1\":{\"417\":1}}],[\"读取完毕\",{\"1\":{\"417\":2}}],[\"读取有缓冲管道时\",{\"1\":{\"417\":1}}],[\"读取数据时也是同理\",{\"1\":{\"416\":1}}],[\"读取数据\",{\"1\":{\"415\":1,\"416\":2,\"417\":1,\"418\":1,\"436\":1,\"800\":1}}],[\"读取\",{\"0\":{\"401\":1,\"408\":1},\"1\":{\"417\":11,\"545\":1}}],[\"读取固定长度的数组\",{\"1\":{\"224\":1}}],[\"读取两个数字\",{\"1\":{\"224\":1}}],[\"读取输入内容\",{\"1\":{\"223\":1}}],[\"读取和写入stl\",{\"1\":{\"132\":1}}],[\"读取和写入\",{\"1\":{\"132\":1}}],[\"举个例⼦\",{\"1\":{\"1027\":1}}],[\"举个例子解释一下长度与容量的区别\",{\"1\":{\"243\":1}}],[\"举例说明\",{\"1\":{\"583\":1,\"655\":2}}],[\"举例数据库巡检\",{\"1\":{\"583\":1,\"655\":2}}],[\"举例\",{\"1\":{\"545\":1,\"786\":1}}],[\"举几个例子\",{\"1\":{\"259\":1}}],[\"合在一起\",{\"1\":{\"796\":1}}],[\"合适的内存对齐可以提高内存访问效率\",{\"1\":{\"554\":1}}],[\"合理的过期时间\",{\"1\":{\"639\":1}}],[\"合理的顺序可减少内存浪费\",{\"1\":{\"554\":1}}],[\"合理控制协程的数量\",{\"1\":{\"542\":1}}],[\"合理使用是可以很方便解决一些问题\",{\"1\":{\"516\":1}}],[\"合起来就是v1\",{\"1\":{\"455\":1}}],[\"合法的utf8编码最大字节数只有4个字节\",{\"1\":{\"258\":1}}],[\"合并重复或冗余的字段\",{\"1\":{\"799\":1}}],[\"合并\",{\"1\":{\"139\":1}}],[\"合并分支至test分支\",{\"1\":{\"58\":1}}],[\"合并分支\",{\"1\":{\"58\":1}}],[\"合并到工作区\",{\"1\":{\"58\":1}}],[\"合并是冲突\",{\"1\":{\"36\":1}}],[\"合并时会报错\",{\"1\":{\"36\":1}}],[\"合并即可将需求1\",{\"1\":{\"35\":1}}],[\"界\",{\"1\":{\"258\":1}}],[\"世\",{\"1\":{\"258\":1}}],[\"世界\",{\"1\":{\"172\":2,\"177\":1,\"189\":2,\"214\":1,\"258\":4,\"511\":1,\"1388\":3,\"1396\":3,\"1423\":2}}],[\"世界上最大的电子书图书馆\",{\"1\":{\"73\":1}}],[\"世界各地的志愿者把源代码文件通过diff的方式发给linus\",{\"1\":{\"12\":1}}],[\"\",{\"1\":{\"258\":1}}],[\"\",{\"1\":{\"258\":1}}],[\"ç\",{\"1\":{\"258\":1}}],[\"\",{\"1\":{\"258\":1}}],[\"¸\",{\"1\":{\"258\":1}}],[\"拼接目标路径\",{\"1\":{\"410\":1}}],[\"拼接\",{\"0\":{\"257\":1},\"1\":{\"510\":1}}],[\"拼音\",{\"1\":{\"122\":1}}],[\"意思是每个key\",{\"1\":{\"1155\":1}}],[\"意思非常明确\",{\"1\":{\"419\":1}}],[\"意为检测该函数的输出是不是hello\",{\"1\":{\"470\":1}}],[\"意大利语\",{\"1\":{\"255\":1}}],[\"意味着每一页的数据更多\",{\"1\":{\"816\":1}}],[\"意味着如果多个\",{\"1\":{\"649\":1}}],[\"意味着优先进行运算\",{\"1\":{\"191\":1}}],[\"意味着两边同时确认连接才可建立连接为此三次握手\",{\"1\":{\"82\":1}}],[\"è\",{\"1\":{\"255\":1}}],[\"刚好业务场景是金融场景\",{\"1\":{\"1057\":1}}],[\"刚好能用一个字节表示\",{\"1\":{\"255\":1}}],[\"刚开始只能用勉强可以用来形容\",{\"1\":{\"12\":1}}],[\"再此收到请求\",{\"1\":{\"1166\":1}}],[\"再加入一个redis节点\",{\"1\":{\"1165\":1}}],[\"再增加一台redis作为缓存服务器\",{\"1\":{\"1165\":1}}],[\"再向其中放令牌\",{\"1\":{\"1147\":1}}],[\"再由业务网关将请求转发至各个系统\",{\"1\":{\"1072\":1}}],[\"再删除主节点\",{\"1\":{\"1010\":1}}],[\"再配置本地\",{\"0\":{\"852\":1}}],[\"再\",{\"1\":{\"825\":1}}],[\"再查看主从同步状态\",{\"1\":{\"822\":1}}],[\"再比如秒杀活动\",{\"1\":{\"1068\":1}}],[\"再比如\",{\"1\":{\"702\":1}}],[\"再通过负载均衡器返回给客户端\",{\"1\":{\"655\":1}}],[\"再输出\",{\"1\":{\"633\":1}}],[\"再进行对应的回表查询获取主键\",{\"1\":{\"614\":1,\"686\":1}}],[\"再请求其他接口\",{\"1\":{\"569\":1,\"641\":2}}],[\"再使用benchstat进行对比\",{\"1\":{\"476\":1}}],[\"再与go\",{\"1\":{\"460\":1}}],[\"再为其创建一个release\",{\"1\":{\"449\":1}}],[\"再来进行模糊测试\",{\"1\":{\"477\":1}}],[\"再来一个层级嵌套深一点的示例\",{\"1\":{\"427\":1}}],[\"再来看下面这个结构体\",{\"1\":{\"273\":1}}],[\"再去了解它的具体实现\",{\"1\":{\"424\":1}}],[\"再读取数据也不会导致当前协程阻塞\",{\"1\":{\"420\":1}}],[\"再读取数据\",{\"1\":{\"420\":1}}],[\"再写入到目标文件中\",{\"1\":{\"403\":1}}],[\"再写入目标文件\",{\"1\":{\"403\":1}}],[\"再次启动一个容器查看\",{\"1\":{\"1195\":1}}],[\"再次查看\",{\"1\":{\"1228\":1}}],[\"再次查看如下\",{\"1\":{\"1126\":1}}],[\"再次查询耗时\",{\"1\":{\"810\":1}}],[\"再次查询集群状态\",{\"1\":{\"769\":1}}],[\"再次运行项目\",{\"1\":{\"453\":1}}],[\"再次运行输出如下\",{\"1\":{\"400\":1}}],[\"再次执行模糊测试看看还有没有问题\",{\"1\":{\"477\":1}}],[\"再次执行\",{\"1\":{\"473\":1}}],[\"再次执行输出如下\",{\"1\":{\"412\":1}}],[\"再次执行就会报错\",{\"1\":{\"307\":1}}],[\"再次测试\",{\"1\":{\"58\":1}}],[\"再调用http\",{\"1\":{\"1337\":1}}],[\"再调用\",{\"1\":{\"285\":1}}],[\"再初始化\",{\"1\":{\"285\":1}}],[\"再声明了三个方法get\",{\"1\":{\"285\":1}}],[\"再将字符串的内存复制过去\",{\"1\":{\"254\":1}}],[\"二是控制并发连接数\",{\"1\":{\"1145\":1}}],[\"二是将dog\",{\"1\":{\"287\":1}}],[\"二阶段提交\",{\"1\":{\"614\":1,\"686\":1}}],[\"二叉树的节点越多\",{\"1\":{\"804\":1}}],[\"二叉树是只有左右孩子的树\",{\"1\":{\"804\":1}}],[\"二叉树是一种偏向树\",{\"1\":{\"802\":1}}],[\"二叉树也只能存两个节点\",{\"1\":{\"802\":1}}],[\"二叉树前序中序后序遍历怎么回事\",{\"1\":{\"621\":1,\"693\":1}}],[\"二叉树\",{\"1\":{\"580\":1,\"652\":1}}],[\"二\",{\"0\":{\"576\":1,\"648\":1,\"873\":1}}],[\"二面面试官\",{\"1\":{\"604\":1,\"676\":1}}],[\"二面\",{\"0\":{\"570\":1,\"573\":1,\"586\":1,\"593\":1,\"604\":1,\"607\":1,\"614\":1,\"618\":1,\"625\":1,\"642\":1,\"645\":1,\"658\":1,\"665\":1,\"676\":1,\"679\":1,\"686\":1,\"690\":1,\"697\":1}}],[\"二维切片\",{\"1\":{\"249\":1}}],[\"二进制指数\",{\"1\":{\"1390\":1}}],[\"二进制文件是编译完成后在src目录下\",{\"1\":{\"964\":1}}],[\"二进制json\",{\"1\":{\"842\":1}}],[\"二进制类型是base64编码字符串的二进制值\",{\"1\":{\"723\":1}}],[\"二进制型\",{\"0\":{\"723\":1}}],[\"二进制\",{\"1\":{\"625\":1,\"697\":1,\"723\":1,\"1309\":1}}],[\"二进制同理\",{\"1\":{\"221\":1}}],[\"二进制打包程序和解包程序可帮助用户构建自定义二进制流\",{\"1\":{\"127\":1}}],[\"遍历替换字符串\",{\"0\":{\"1405\":1}}],[\"遍历集合\",{\"1\":{\"945\":1}}],[\"遍历哈希表的键值对\",{\"0\":{\"932\":1}}],[\"遍历所有数据\",{\"1\":{\"639\":1}}],[\"遍历所有的键值对\",{\"1\":{\"558\":1}}],[\"遍历灰色集合的对象所引用到的白色对象放入到灰色\",{\"1\":{\"551\":1}}],[\"遍历到的放入到灰色集合\",{\"1\":{\"551\":1}}],[\"遍历字符串也是转为\",{\"1\":{\"537\":1}}],[\"遍历map中的键值对\",{\"1\":{\"932\":1}}],[\"遍历map\",{\"1\":{\"436\":2}}],[\"遍历赋值\",{\"1\":{\"375\":1}}],[\"遍历输出返回值\",{\"1\":{\"371\":1}}],[\"遍历输出方法信息\",{\"1\":{\"370\":2,\"371\":1}}],[\"遍历\",{\"0\":{\"248\":1,\"258\":1,\"263\":1,\"945\":1},\"1\":{\"510\":1,\"512\":1}}],[\"倍\",{\"1\":{\"244\":1,\"638\":1}}],[\"预读\",{\"1\":{\"805\":1}}],[\"预期员工数\",{\"1\":{\"724\":1}}],[\"预留的\",{\"1\":{\"244\":1}}],[\"预感提供功能\",{\"1\":{\"137\":1}}],[\"新终端\",{\"1\":{\"1189\":1}}],[\"新浪\",{\"1\":{\"1107\":1}}],[\"新生成的\",{\"1\":{\"985\":1}}],[\"新生代用于存储新创建的对象\",{\"1\":{\"638\":1}}],[\"新生代老年代是怎么划分的\",{\"1\":{\"566\":1,\"638\":2}}],[\"新的\",{\"1\":{\"985\":2}}],[\"新增redis的从节点\",{\"1\":{\"1010\":1}}],[\"新增主节点\",{\"1\":{\"1010\":1}}],[\"新增主\",{\"1\":{\"1010\":1}}],[\"新增元素\",{\"0\":{\"939\":1}}],[\"新增数据\",{\"1\":{\"894\":1}}],[\"新增\",{\"0\":{\"894\":1}}],[\"新创一个管理员账号\",{\"1\":{\"870\":1}}],[\"新加一个学号字段要考虑什么\",{\"1\":{\"603\":1,\"675\":1}}],[\"新开的线程与其他读取缓存的线程之间的协作关系怎么处理呢\",{\"1\":{\"597\":1,\"669\":1}}],[\"新数据库写mysql\",{\"1\":{\"576\":1,\"648\":1}}],[\"新分配的对象\",{\"1\":{\"553\":1}}],[\"新旧都不需要改动内部细节\",{\"1\":{\"516\":1}}],[\"新值\",{\"1\":{\"440\":2}}],[\"新接口定义就是为了泛型而服务的\",{\"1\":{\"289\":1}}],[\"新slice容量newcap\",{\"1\":{\"244\":1}}],[\"新slice\",{\"1\":{\"244\":1}}],[\"新\",{\"1\":{\"244\":3}}],[\"新建存放日志和数据的文件夹\",{\"1\":{\"1028\":1}}],[\"新建文件redis\",{\"1\":{\"994\":1}}],[\"新建定时器\",{\"1\":{\"426\":1}}],[\"新建一个协程去处理该连接\",{\"1\":{\"1374\":1}}],[\"新建一个配置\",{\"1\":{\"1303\":1}}],[\"新建一个yykk\",{\"1\":{\"1131\":1}}],[\"新建一个consumer\",{\"0\":{\"1089\":1}}],[\"新建一个redis连接的时候\",{\"1\":{\"911\":1}}],[\"新建一个elasticsearch\",{\"1\":{\"767\":1}}],[\"新建一个分支\",{\"1\":{\"58\":1}}],[\"新建一个tag\",{\"1\":{\"58\":1}}],[\"新建一个文件夹\",{\"1\":{\"18\":1,\"47\":1}}],[\"新建测试文件夹\",{\"1\":{\"14\":1}}],[\"水平分割\",{\"1\":{\"799\":1}}],[\"水的高度一定小于等于桶的高度\",{\"1\":{\"243\":1}}],[\"水并不是满的\",{\"1\":{\"243\":1}}],[\"水印\",{\"1\":{\"139\":1}}],[\"推出\",{\"1\":{\"1122\":1}}],[\"推模式\",{\"1\":{\"634\":1}}],[\"推和拉\",{\"1\":{\"562\":1,\"634\":2}}],[\"推荐按量付费\",{\"1\":{\"1217\":1}}],[\"推荐还是用命令方式构建\",{\"1\":{\"993\":1}}],[\"推荐\",{\"1\":{\"786\":1,\"1217\":1}}],[\"推荐视频等\",{\"1\":{\"644\":1}}],[\"推荐使用log\",{\"1\":{\"1029\":1}}],[\"推荐使用union\",{\"1\":{\"796\":1}}],[\"推荐使用指针接收者\",{\"1\":{\"515\":1}}],[\"推荐使用make内建函数\",{\"1\":{\"511\":1}}],[\"推荐使用make来创建一个空切片\",{\"1\":{\"243\":1}}],[\"推荐下面这些开源项目\",{\"1\":{\"331\":1}}],[\"推送完毕后\",{\"1\":{\"449\":1}}],[\"推送\",{\"1\":{\"17\":1,\"1193\":1}}],[\"若后续100毫秒内又有请求到达\",{\"1\":{\"1154\":1}}],[\"若架构复杂\",{\"1\":{\"1072\":1}}],[\"若主服务器设置了密码\",{\"1\":{\"1000\":1}}],[\"若主节点没有应答哨兵的\",{\"1\":{\"1000\":1}}],[\"若超过这个时间\",{\"1\":{\"1000\":1}}],[\"若需要调试使用请设置为false\",{\"1\":{\"852\":1}}],[\"若union包含在from子句的子查询中\",{\"1\":{\"814\":1}}],[\"若第二个select出现的union之后\",{\"1\":{\"814\":1}}],[\"若未指定\",{\"1\":{\"721\":1}}],[\"若没有明确指定锁类型\",{\"1\":{\"656\":1}}],[\"若发现不一致\",{\"1\":{\"644\":1}}],[\"若使用\",{\"1\":{\"641\":1}}],[\"若合法\",{\"1\":{\"641\":1}}],[\"若正确则生成一个\",{\"1\":{\"641\":1}}],[\"若大于堆顶\",{\"1\":{\"639\":1}}],[\"若有多个相同哈希值的数据\",{\"1\":{\"634\":1}}],[\"若缓冲区中仍有数据\",{\"1\":{\"633\":1}}],[\"若是涉及到html的模板处理建议使用后者会更安全\",{\"1\":{\"1414\":1}}],[\"若是路由需要携带参数的为动态路由\",{\"1\":{\"1285\":1}}],[\"若是有问题需要撤销\",{\"1\":{\"1228\":1}}],[\"若是还是没有网络\",{\"1\":{\"1219\":1}}],[\"若是还要在这个进程执行备份操作\",{\"1\":{\"980\":1}}],[\"若是挂一个broker还可用继续可用\",{\"1\":{\"1065\":1}}],[\"若是一个partition所在的broker挂了\",{\"1\":{\"1064\":1}}],[\"若是单个a和b的话\",{\"1\":{\"1062\":1}}],[\"若是b服务会奔溃\",{\"1\":{\"1061\":1}}],[\"若是要关闭节点\",{\"1\":{\"1010\":1}}],[\"若是数据量大了就会受限于内容容量\",{\"1\":{\"1005\":1}}],[\"若是no策略很不安全不推荐\",{\"1\":{\"987\":1}}],[\"若是遇到宕机前\",{\"1\":{\"987\":1}}],[\"若是系统运行起来\",{\"1\":{\"901\":1}}],[\"若是敷衍几句就不用报太大希望了\",{\"1\":{\"520\":1}}],[\"若是面试官详细介绍了\",{\"1\":{\"520\":1}}],[\"若是10来分钟直接写代码了\",{\"1\":{\"520\":1}}],[\"若是不是这个类型会panic\",{\"1\":{\"516\":1}}],[\"若是切片大小为0会直接跳过\",{\"1\":{\"509\":1}}],[\"若要将数组转换为切片类型\",{\"1\":{\"241\":1}}],[\"若你尝试去访问一个私有的类型\",{\"1\":{\"175\":1}}],[\"区的数据只能被消费者组中的某一个消费者消费\",{\"1\":{\"1020\":1}}],[\"区块链\",{\"1\":{\"335\":1}}],[\"区别在于\",{\"1\":{\"1443\":1}}],[\"区别在于后者会将非ascii字符转通过\",{\"1\":{\"1388\":1}}],[\"区别在于前两者的测试数据都需要开发者手动编写\",{\"1\":{\"477\":1}}],[\"区别在于前者无序\",{\"1\":{\"258\":1}}],[\"区别\",{\"1\":{\"532\":1,\"611\":1,\"637\":1,\"639\":1,\"683\":1}}],[\"区别只是切片可以动态变化长度\",{\"1\":{\"244\":1}}],[\"区别只是最后一种得到的值是指针\",{\"1\":{\"239\":1}}],[\"区间数字的代码\",{\"1\":{\"233\":1}}],[\"省略号必须存在\",{\"1\":{\"239\":1}}],[\"后台开发都会有角色和权限\",{\"1\":{\"1240\":1}}],[\"后台启动\",{\"1\":{\"1031\":1}}],[\"后台存储发送错误时\",{\"1\":{\"982\":1}}],[\"后台定时同步\",{\"1\":{\"641\":1}}],[\"后\",{\"1\":{\"965\":1}}],[\"后缀双击\",{\"1\":{\"849\":1}}],[\"后进先出\",{\"1\":{\"633\":1,\"634\":1,\"651\":1}}],[\"后端开发\",{\"0\":{\"580\":1,\"652\":1}}],[\"后接口又分用于泛型的类型约束接口\",{\"1\":{\"516\":1}}],[\"后记\",{\"0\":{\"329\":1}}],[\"后者仅仅是一个整数值\",{\"1\":{\"1443\":1}}],[\"后者基于前者并做了很多关于html的安全处理\",{\"1\":{\"1414\":1}}],[\"后者是寻找后缀\",{\"1\":{\"1403\":1}}],[\"后者是函数f的返回值来决定是否分割字符串\",{\"1\":{\"1402\":1}}],[\"后者是直接替换文档\",{\"1\":{\"836\":1}}],[\"后者是指定一个超时的时间间隔\",{\"1\":{\"428\":1}}],[\"后者则会直接停止执行\",{\"1\":{\"471\":1}}],[\"后者openfile能够提供更加细粒度的控制\",{\"1\":{\"400\":1}}],[\"后者使用起来更类似于继承\",{\"1\":{\"270\":1}}],[\"后者有序\",{\"1\":{\"258\":1}}],[\"后续出现虚拟机\",{\"1\":{\"1180\":1}}],[\"后续操作可能是需要对这个内容进行清理\",{\"1\":{\"1019\":1}}],[\"后续又可继续读写了\",{\"1\":{\"993\":1}}],[\"后续章节\",{\"1\":{\"756\":1}}],[\"后续的请求会携带该令牌\",{\"1\":{\"641\":1}}],[\"后续的接收操作会返回零值\",{\"1\":{\"633\":1}}],[\"后续接收会返回零值\",{\"1\":{\"633\":1}}],[\"后续可保持状态的特性\",{\"1\":{\"514\":1}}],[\"后续查阅文档时也可以来这里\",{\"1\":{\"453\":1}}],[\"后续会进行深入分析\",{\"1\":{\"258\":1}}],[\"后续也会讲到\",{\"1\":{\"234\":1}}],[\"后面就出现限流的状态429和错误提示信息\",{\"1\":{\"1103\":1}}],[\"后面就是每当读协程1毫秒读取一个数据\",{\"1\":{\"417\":1}}],[\"后面在介绍redis的哈希算法时具体介绍\",{\"1\":{\"965\":1}}],[\"后面都停止维护了\",{\"1\":{\"828\":1}}],[\"后面是一个正则表示\",{\"1\":{\"630\":1}}],[\"后面怎么使用的\",{\"1\":{\"592\":1,\"664\":1}}],[\"后面由gc负责回收\",{\"1\":{\"548\":1}}],[\"后面跟着的是被导入的包名\",{\"1\":{\"172\":1}}],[\"后面一个是子域名\",{\"1\":{\"84\":1}}],[\"后面开始流行这种模式\",{\"1\":{\"72\":1}}],[\"示例代码\",{\"1\":{\"630\":1}}],[\"示例代码如下\",{\"1\":{\"304\":1}}],[\"示例函数可以作为文档\",{\"1\":{\"505\":1}}],[\"示例函数没有参数和返回值\",{\"1\":{\"501\":1}}],[\"示例函数\",{\"0\":{\"501\":1},\"1\":{\"483\":1,\"501\":1,\"505\":1}}],[\"示例中使用f\",{\"1\":{\"477\":1}}],[\"示例测试在标准库中出现的非常多\",{\"1\":{\"470\":1}}],[\"示例测试并不是一个官方定义的概念\",{\"1\":{\"470\":1}}],[\"示例测试并不像其他三种测试一样是为了发现程序的问题所在\",{\"1\":{\"470\":1}}],[\"示例测试\",{\"0\":{\"470\":1},\"1\":{\"466\":1,\"468\":1}}],[\"示例仓库中的go\",{\"1\":{\"463\":1}}],[\"示例仓库\",{\"1\":{\"443\":1,\"462\":1}}],[\"示例\",{\"0\":{\"337\":1,\"463\":1,\"1328\":1},\"1\":{\"233\":1,\"634\":1,\"635\":5,\"649\":2,\"651\":4,\"653\":2,\"814\":2,\"1367\":1,\"1368\":1,\"1404\":2,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":1,\"1409\":1,\"1410\":1,\"1411\":1,\"1412\":1,\"1413\":1,\"1420\":1}}],[\"示例如下\",{\"1\":{\"232\":1,\"353\":1,\"360\":1,\"369\":1,\"386\":1,\"387\":1,\"404\":1,\"409\":1}}],[\"给出子串substr在字符串s内的出现次数\",{\"1\":{\"1399\":1}}],[\"给日志添加一些默认输出的内容\",{\"1\":{\"1302\":1}}],[\"给容器分配一个终端登入使用\",{\"1\":{\"1188\":1}}],[\"给容器取名\",{\"1\":{\"1188\":1}}],[\"给于access\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"给consumer添加一个认证jwt\",{\"0\":{\"1090\":1}}],[\"给8007开始进行设定操作\",{\"1\":{\"1010\":1}}],[\"给主节点8007分配多少个槽位\",{\"1\":{\"1010\":1}}],[\"给max函数中的字段添加索引\",{\"1\":{\"821\":1}}],[\"给查询其实并没用提高性能\",{\"1\":{\"802\":1}}],[\"给定\",{\"1\":{\"970\":1}}],[\"给定一个整数n\",{\"1\":{\"654\":1}}],[\"给定1\",{\"1\":{\"4\":1}}],[\"给关闭的channel发送数据\",{\"1\":{\"535\":1}}],[\"给一个对应的元素增加相应的权值\",{\"1\":{\"950\":1}}],[\"给一个文本文件\",{\"1\":{\"621\":1,\"693\":1}}],[\"给一个nil的channel发送或接收数据\",{\"1\":{\"535\":1}}],[\"给一个代码块打上标签\",{\"1\":{\"231\":1}}],[\"应及时的关闭\",{\"1\":{\"1433\":1}}],[\"应将ip地址提前设置在配置文件中\",{\"1\":{\"1133\":1}}],[\"应当尽量去避免\",{\"1\":{\"1053\":1}}],[\"应当使用括号来显式的表示谁应该优先计算\",{\"1\":{\"228\":1}}],[\"应根据实际需求合理安排字段\",{\"1\":{\"799\":1}}],[\"应使用悲观锁\",{\"1\":{\"653\":1}}],[\"应建立索引\",{\"1\":{\"651\":1}}],[\"应用\",{\"1\":{\"1302\":1}}],[\"应用文件\",{\"1\":{\"1228\":1}}],[\"应用间并发处理消息\",{\"1\":{\"1052\":1}}],[\"应用耦合\",{\"1\":{\"1052\":1}}],[\"应用程序及其依赖\",{\"1\":{\"1183\":1}}],[\"应用程序及其依赖被打包成一个容器\",{\"1\":{\"1181\":1}}],[\"应用程序的优化\",{\"1\":{\"645\":1}}],[\"应用程度使用kafka作为传统的消息系统实现标准的队列和消息的发布\",{\"1\":{\"1019\":1}}],[\"应用服务器会查询数据库\",{\"1\":{\"655\":1}}],[\"应用层控制\",{\"1\":{\"651\":1}}],[\"应用代码的效率和缓存的使用\",{\"1\":{\"645\":1}}],[\"应用场景\",{\"1\":{\"639\":1,\"641\":1}}],[\"应用持有锁时\",{\"1\":{\"634\":1}}],[\"应用崩溃或挂起时\",{\"1\":{\"634\":1}}],[\"应用的原生支持\",{\"1\":{\"165\":1}}],[\"应该是没有需要补充上去\",{\"1\":{\"1228\":1}}],[\"应该将数组a转换为切片类型来执行\",{\"1\":{\"654\":1}}],[\"应该在分布式环境下进行测试\",{\"1\":{\"638\":1}}],[\"应该怎么用\",{\"1\":{\"620\":1,\"692\":1}}],[\"应该运行所有测试\",{\"1\":{\"504\":1}}],[\"应该输出有用的内容\",{\"1\":{\"504\":1}}],[\"应该使用乐观锁还是悲观锁\",{\"1\":{\"581\":1,\"653\":2}}],[\"应该使用循环来判断条件是否满足\",{\"1\":{\"432\":1}}],[\"应该使用for而不是if\",{\"1\":{\"432\":1}}],[\"应该使用指针\",{\"1\":{\"431\":1}}],[\"应该使用interface\",{\"1\":{\"339\":1}}],[\"应该尽量在向管道发送数据的那一方关闭管道\",{\"1\":{\"420\":1}}],[\"应该对为什么要使用泛型\",{\"1\":{\"337\":1}}],[\"应对这种情况就需要用到rune类型\",{\"1\":{\"258\":1}}],[\"至于仓库\",{\"1\":{\"1183\":1}}],[\"至此就完成了主从切换的操作\",{\"1\":{\"999\":1}}],[\"至此\",{\"1\":{\"347\":1}}],[\"至少需要一个主体\",{\"1\":{\"1251\":1}}],[\"至少更新了\",{\"1\":{\"981\":3}}],[\"至少要经历磁盘寻道\",{\"1\":{\"800\":1}}],[\"至少在go中你可以仅通过函数名就知道它是干什么的\",{\"1\":{\"278\":1}}],[\"至少32位\",{\"1\":{\"197\":2}}],[\"至多两个判断分支\",{\"1\":{\"228\":1}}],[\"码\",{\"1\":{\"221\":1}}],[\"码云账号注册\",{\"0\":{\"44\":1}}],[\"码云\",{\"1\":{\"43\":1}}],[\"积累到了一定阈值再输出到指定的writer中\",{\"1\":{\"220\":1}}],[\"输完命令之后\",{\"1\":{\"776\":1}}],[\"输入你的密码即可\",{\"1\":{\"1193\":1}}],[\"输入yes开始进行重新分配hash槽\",{\"1\":{\"1010\":1}}],[\"输入密码回车\",{\"1\":{\"963\":1}}],[\"输入requirepass\",{\"1\":{\"963\":1}}],[\"输入命令\",{\"1\":{\"851\":1,\"963\":1}}],[\"输入cmd\",{\"1\":{\"851\":1}}],[\"输入的是由多个字符串和空格组成的一条\",{\"1\":{\"778\":1}}],[\"输入的总数\",{\"1\":{\"477\":1}}],[\"输入help\",{\"1\":{\"326\":1}}],[\"输入\",{\"0\":{\"222\":1},\"1\":{\"586\":1,\"658\":1}}],[\"输入输出\",{\"0\":{\"214\":1}}],[\"输出解释\",{\"1\":{\"656\":1}}],[\"输出每个url最多的访问次数\",{\"1\":{\"593\":1,\"665\":1}}],[\"输出什么内容\",{\"1\":{\"584\":1,\"656\":1}}],[\"输出测试运行的详细信息\",{\"1\":{\"487\":1}}],[\"输出更详细的测试日志\",{\"1\":{\"469\":1}}],[\"输出模块依赖图\",{\"1\":{\"456\":1}}],[\"输出都如下\",{\"1\":{\"422\":1}}],[\"输出timeerror的时间\",{\"1\":{\"393\":1}}],[\"输出文件名\",{\"1\":{\"388\":1}}],[\"输出错误信息\",{\"1\":{\"388\":1}}],[\"输出方法个数\",{\"1\":{\"370\":2,\"371\":1}}],[\"输出第一个返回值的类型\",{\"1\":{\"364\":1}}],[\"输出第一个参数的类型\",{\"1\":{\"364\":1}}],[\"输出参数\",{\"1\":{\"364\":1,\"504\":1}}],[\"输出函数名称\",{\"1\":{\"364\":1}}],[\"输出其名称\",{\"1\":{\"352\":1}}],[\"输出包路径\",{\"1\":{\"352\":1}}],[\"输出又变回3了\",{\"1\":{\"285\":1}}],[\"输出的结果就会变得非常有迷惑性\",{\"1\":{\"396\":1}}],[\"输出的是7\",{\"1\":{\"285\":1}}],[\"输出的字符串两端有双引号\",{\"1\":{\"221\":1}}],[\"输出为\",{\"1\":{\"282\":1,\"294\":1,\"352\":1,\"396\":3,\"401\":1,\"1428\":1}}],[\"输出是字节而不是字符\",{\"1\":{\"253\":1}}],[\"输出结构体\",{\"1\":{\"368\":2}}],[\"输出结构体字段的数量\",{\"1\":{\"367\":2}}],[\"输出结构体时将加上字段名\",{\"1\":{\"221\":1}}],[\"输出结果中的\",{\"1\":{\"498\":1}}],[\"输出结果\",{\"1\":{\"351\":1,\"355\":1,\"420\":1,\"833\":1,\"1423\":1}}],[\"输出结果如下\",{\"1\":{\"300\":1}}],[\"输出结果为\",{\"1\":{\"249\":1,\"350\":1,\"353\":1,\"357\":1}}],[\"输出如下\",{\"1\":{\"233\":1,\"247\":1,\"258\":1,\"284\":1,\"317\":1,\"354\":1,\"361\":1,\"400\":2,\"401\":1,\"427\":2,\"428\":1,\"434\":1,\"436\":1,\"475\":1,\"486\":1,\"487\":2,\"491\":1,\"493\":1,\"494\":1,\"498\":1,\"502\":1,\"1319\":1,\"1417\":2}}],[\"输出指针所指向的地址\",{\"1\":{\"221\":1}}],[\"输出字符对应的unicode码\",{\"1\":{\"221\":1}}],[\"输出unicode码对应的字符\",{\"1\":{\"221\":1}}],[\"输出值对应的go语言类型值\",{\"1\":{\"221\":1}}],[\"输出值原本的形式\",{\"1\":{\"221\":1}}],[\"输出布尔值\",{\"1\":{\"221\":1}}],[\"输出完整go语法格式的值\",{\"1\":{\"221\":1}}],[\"输出整型的大写十六进制表示\",{\"1\":{\"221\":1}}],[\"输出整型的完整大写十六进制表示\",{\"1\":{\"221\":1}}],[\"输出整型的完整小写十六进制表示\",{\"1\":{\"221\":1}}],[\"输出整型的完整八进制表示\",{\"1\":{\"221\":1}}],[\"输出整型的小写十六进制表示\",{\"1\":{\"221\":1}}],[\"输出整型的八进制表示\",{\"1\":{\"221\":1}}],[\"输出整型的二进制表现形式\",{\"1\":{\"221\":1}}],[\"输出二进制完整的表现形式\",{\"1\":{\"221\":1}}],[\"输出科学计数法形式\",{\"1\":{\"221\":1}}],[\"输出浮点数\",{\"1\":{\"221\":1}}],[\"输出十进制整型值\",{\"1\":{\"221\":1}}],[\"输出string\",{\"1\":{\"221\":1}}],[\"输出百分号\",{\"1\":{\"221\":1}}],[\"输出\",{\"0\":{\"216\":1},\"1\":{\"235\":2,\"236\":2,\"241\":3,\"251\":1,\"264\":1,\"274\":1,\"282\":1,\"283\":1,\"287\":2,\"292\":1,\"293\":1,\"294\":1,\"298\":2,\"301\":1,\"302\":1,\"303\":2,\"306\":2,\"307\":1,\"308\":2,\"309\":1,\"310\":2,\"318\":1,\"319\":1,\"320\":2,\"344\":1,\"356\":1,\"358\":1,\"359\":1,\"360\":2,\"362\":1,\"364\":1,\"365\":1,\"367\":2,\"368\":1,\"369\":1,\"370\":1,\"371\":1,\"374\":1,\"378\":1,\"379\":2,\"393\":1,\"396\":1,\"397\":1,\"398\":1,\"417\":2,\"436\":1,\"515\":2,\"516\":1,\"635\":1,\"651\":2,\"656\":2,\"702\":2,\"704\":1,\"705\":1,\"706\":1,\"707\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"834\":2,\"836\":2,\"838\":1,\"927\":1,\"1235\":1,\"1311\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1320\":1,\"1321\":1,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":1,\"1409\":1,\"1410\":1,\"1411\":1,\"1412\":1,\"1413\":1,\"1417\":1,\"1419\":1,\"1424\":1,\"1425\":1}}],[\"繁琐\",{\"1\":{\"213\":1,\"1309\":1}}],[\"枚举\",{\"0\":{\"213\":1,\"309\":1}}],[\"看个例子\",{\"1\":{\"1417\":1}}],[\"看个人喜好\",{\"1\":{\"388\":1}}],[\"看容器进程\",{\"1\":{\"1189\":1}}],[\"看它们是否满足配置文件中规定的持久化触发条件\",{\"1\":{\"980\":1}}],[\"看图其实可以看到一个节点可以存放多个数据\",{\"1\":{\"805\":1}}],[\"看是否是之前执行过的语句\",{\"1\":{\"777\":1}}],[\"看到这里你可能会问\",{\"1\":{\"1156\":1}}],[\"看到这里后\",{\"1\":{\"337\":1}}],[\"看到\",{\"1\":{\"634\":1}}],[\"看你简历感觉你对go的接触程度不是特别深\",{\"1\":{\"604\":1,\"676\":1}}],[\"看你简历里说比较了解集合\",{\"1\":{\"588\":1,\"660\":1}}],[\"看门狗机制\",{\"1\":{\"581\":1,\"634\":1,\"653\":3}}],[\"看explain的什么内容\",{\"1\":{\"573\":1,\"645\":2}}],[\"看一个使用案例就知道怎么用了\",{\"1\":{\"1427\":1}}],[\"看一个简单的使用例子\",{\"1\":{\"422\":1}}],[\"看一个例子\",{\"1\":{\"314\":1}}],[\"看两个例子\",{\"1\":{\"310\":1}}],[\"看下面的一段代码例子\",{\"1\":{\"1426\":1}}],[\"看下面的一个例子\",{\"1\":{\"298\":1,\"306\":1,\"385\":1,\"420\":1,\"440\":1}}],[\"看下面的例子\",{\"1\":{\"212\":1,\"287\":1,\"298\":1,\"303\":1,\"417\":1,\"1417\":1}}],[\"看下面一个例子\",{\"1\":{\"282\":1,\"283\":1,\"287\":1,\"297\":1,\"1422\":1}}],[\"看起来似乎是要比try\",{\"1\":{\"388\":1}}],[\"看起来中文字符串比英文字符串短\",{\"1\":{\"255\":1}}],[\"看起来长度是7\",{\"1\":{\"255\":1}}],[\"看起来长度是16\",{\"1\":{\"255\":1}}],[\"看几个例子\",{\"1\":{\"221\":1}}],[\"看几个使用案例\",{\"1\":{\"212\":1}}],[\"括起来以提升可读性\",{\"1\":{\"211\":1}}],[\"括起来或者反引号\",{\"1\":{\"186\":1}}],[\"除静态表或小表\",{\"1\":{\"796\":1}}],[\"除非在加载时指定了名称或者通过template语句手动指定\",{\"1\":{\"1425\":1}}],[\"除非有特殊需求\",{\"1\":{\"633\":1}}],[\"除非手动调用c\",{\"1\":{\"310\":1}}],[\"除了这些之外\",{\"1\":{\"1420\":1}}],[\"除了这种情况外还有其它情况可能会发生逃逸现象\",{\"1\":{\"317\":1}}],[\"除了g\",{\"1\":{\"1390\":1}}],[\"除了要求能够限制数据的平均传输速率外\",{\"1\":{\"1147\":1}}],[\"除了使用update\",{\"1\":{\"836\":1}}],[\"除了数据表需要占用物理空间之外\",{\"1\":{\"809\":1}}],[\"除了字段数量的限制外\",{\"1\":{\"798\":1,\"799\":1}}],[\"除了更新\",{\"1\":{\"644\":1}}],[\"除了\",{\"1\":{\"637\":1,\"638\":1}}],[\"除了递减指令还有哪些指令具有原子性呢\",{\"1\":{\"606\":1,\"678\":1}}],[\"除了explain还有其他定位慢sql的方式吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"除了synchronized还有其他更加灵活的方案吗\",{\"1\":{\"597\":1,\"669\":1}}],[\"除了加mutex锁以外还有哪些方式安全读写共享变量\",{\"1\":{\"587\":1,\"659\":1}}],[\"除了函数的初始化操作外\",{\"1\":{\"500\":1}}],[\"除了use指令外\",{\"1\":{\"465\":1}}],[\"除了profile和trace两个选项之外\",{\"1\":{\"324\":1}}],[\"除了极端的性能要求情况下\",{\"1\":{\"320\":1}}],[\"除了第一个元素\",{\"1\":{\"306\":1}}],[\"除了自己搭建服务器\",{\"1\":{\"43\":1}}],[\"除基本类型以外的其它类型\",{\"1\":{\"210\":1}}],[\"除此之外\",{\"1\":{\"209\":1,\"297\":1,\"314\":1,\"397\":1,\"401\":1,\"433\":1,\"438\":1,\"441\":1,\"498\":1,\"1424\":1}}],[\"元素从\",{\"1\":{\"973\":1}}],[\"元素是否是集合\",{\"1\":{\"973\":1}}],[\"元素是可比较类型的数组\",{\"1\":{\"209\":1}}],[\"元素排名\",{\"0\":{\"948\":1}}],[\"元旦3天做2个促销活动\",{\"1\":{\"30\":1}}],[\"匿名字段\",{\"1\":{\"635\":1}}],[\"匿名字段的名称默认为类型名\",{\"1\":{\"270\":1}}],[\"匿名结构体是不支持泛型的\",{\"1\":{\"339\":1}}],[\"匿名结构不支持泛型\",{\"1\":{\"339\":1,\"516\":1}}],[\"匿名函数不支持自定义泛型\",{\"1\":{\"339\":1,\"516\":1}}],[\"匿名函数就是没有签名的函数\",{\"1\":{\"281\":1}}],[\"匿名函数\",{\"0\":{\"281\":1}}],[\"匿名\",{\"0\":{\"207\":1}}],[\"匿名导入的包无法被使用\",{\"1\":{\"175\":1}}],[\"赋值为\",{\"1\":{\"1047\":1}}],[\"赋值或传参\",{\"1\":{\"529\":1}}],[\"赋值给变量\",{\"1\":{\"514\":1}}],[\"赋值给原字符串\",{\"1\":{\"254\":1}}],[\"赋值指针\",{\"1\":{\"352\":1}}],[\"赋值会用到运算符=\",{\"1\":{\"206\":1}}],[\"赋值\",{\"0\":{\"206\":1},\"1\":{\"351\":1}}],[\"格式格式化的日志轮换时间2006\",{\"1\":{\"1307\":1}}],[\"格式存储的\",{\"1\":{\"842\":1}}],[\"格式为\",{\"1\":{\"775\":1,\"1307\":2}}],[\"格式为var\",{\"1\":{\"205\":1}}],[\"格式\",{\"1\":{\"634\":1,\"911\":1,\"1133\":1,\"1239\":1,\"1307\":1}}],[\"格式的注释\",{\"1\":{\"502\":1}}],[\"格式是require\",{\"1\":{\"459\":1}}],[\"格式如下\",{\"1\":{\"259\":1,\"272\":1,\"1422\":2}}],[\"格式化类型\",{\"1\":{\"1392\":1}}],[\"格式化输出的数据\",{\"1\":{\"855\":1}}],[\"格式化字符数量\",{\"1\":{\"221\":2}}],[\"格式化字符串\",{\"1\":{\"122\":1,\"221\":1}}],[\"格式化\",{\"0\":{\"221\":1,\"1431\":1},\"1\":{\"221\":1,\"1310\":1}}],[\"声明一个互斥锁\",{\"1\":{\"556\":1}}],[\"声明一个新类型通常需要一个类型名称以及一个基础类型\",{\"1\":{\"383\":1}}],[\"声明一个any类型的变量\",{\"1\":{\"351\":1}}],[\"声明一个personoptions类型\",{\"1\":{\"269\":1}}],[\"声明函数有两种办法\",{\"1\":{\"278\":1}}],[\"声明\",{\"0\":{\"205\":1,\"267\":1,\"278\":1,\"291\":1},\"1\":{\"513\":1,\"516\":1}}],[\"声明了用于展示go包中的语法树类型\",{\"1\":{\"124\":1}}],[\"键相关的基本命令\",{\"1\":{\"967\":1}}],[\"键入it命令不能带\",{\"1\":{\"861\":1}}],[\"键输入\",{\"1\":{\"852\":1}}],[\"键设计得越多\",{\"1\":{\"793\":1}}],[\"键唯一\",{\"1\":{\"638\":1}}],[\"键值\",{\"1\":{\"1302\":1}}],[\"键值对\",{\"1\":{\"906\":1}}],[\"键值对地理点参数\",{\"1\":{\"730\":1}}],[\"键值对集合\",{\"1\":{\"638\":1}}],[\"键值数据库\",{\"1\":{\"334\":2}}],[\"键的类型必须是可比较的\",{\"1\":{\"338\":1}}],[\"键为字符串类型\",{\"1\":{\"201\":1}}],[\"键盘等\",{\"1\":{\"138\":1}}],[\"例\",{\"1\":{\"1027\":1}}],[\"例2\",{\"1\":{\"759\":1}}],[\"例1\",{\"1\":{\"759\":1}}],[\"例1s\",{\"1\":{\"469\":1}}],[\"例子输出如下\",{\"1\":{\"431\":1}}],[\"例子通过unsafe\",{\"1\":{\"303\":1}}],[\"例子中的模板根据传入的语言lang来决定要以何种方式展示内容\",{\"1\":{\"1423\":1}}],[\"例子中的t\",{\"1\":{\"471\":1}}],[\"例子中的\",{\"1\":{\"459\":1}}],[\"例子中的交集肯定就是signedint\",{\"1\":{\"340\":1}}],[\"例子中开启了1000个协程不断的在池中申请和释放对象\",{\"1\":{\"435\":1}}],[\"例子中创建了3个cancelctx\",{\"1\":{\"427\":1}}],[\"例子中编写了一个名为printsum的函数\",{\"1\":{\"298\":1}}],[\"例子中分别输出了字节的十进制形式和十六进制形式\",{\"1\":{\"258\":1}}],[\"例子中使用了匿名标识符\",{\"1\":{\"212\":1}}],[\"例子如下\",{\"1\":{\"208\":1,\"228\":1,\"231\":1,\"235\":1,\"236\":1,\"241\":1,\"254\":1,\"255\":1,\"259\":1,\"267\":1,\"271\":1,\"294\":1,\"300\":1,\"301\":1,\"340\":2,\"354\":1,\"371\":1,\"385\":2,\"393\":2,\"396\":1,\"412\":3,\"414\":1,\"421\":1,\"430\":1,\"1162\":2,\"1419\":1}}],[\"例子\",{\"1\":{\"201\":1,\"393\":1,\"459\":1,\"653\":1,\"757\":1,\"758\":1,\"1151\":1,\"1340\":1,\"1341\":1,\"1431\":1}}],[\"例如有如下自定义函数\",{\"1\":{\"1420\":1}}],[\"例如之前用到的index函数\",{\"1\":{\"1420\":1}}],[\"例如zap等等\",{\"1\":{\"1341\":1}}],[\"例如url之类的\",{\"1\":{\"1308\":1}}],[\"例如常用的closer\",{\"1\":{\"1308\":1}}],[\"例如系统中只有两台服务器\",{\"1\":{\"1165\":1}}],[\"例如一个文章推荐的处理流程\",{\"1\":{\"1019\":1}}],[\"例如一个常见的场景就是注册数据库驱动\",{\"1\":{\"175\":1}}],[\"例如搜索和内容提要\",{\"1\":{\"1019\":1}}],[\"例如当系统运行不正常时发邮件通知相关人员\",{\"1\":{\"1000\":1}}],[\"例如表的行大小和表的总数据大小\",{\"1\":{\"798\":1,\"799\":1}}],[\"例如redis的setnx设置ex参数\",{\"1\":{\"653\":1}}],[\"例如栈分配和调度\",{\"1\":{\"651\":1}}],[\"例如通过消息通知来更新缓存\",{\"1\":{\"644\":1}}],[\"例如网络带宽\",{\"1\":{\"638\":1}}],[\"例如设计一个\",{\"1\":{\"638\":1}}],[\"例如将strings\",{\"1\":{\"1411\":1}}],[\"例如将订单状态设置为\",{\"1\":{\"638\":1}}],[\"例如将\",{\"1\":{\"502\":1}}],[\"例如像下面这个例子一样\",{\"1\":{\"501\":1}}],[\"例如关闭和释放这些资源\",{\"1\":{\"500\":1}}],[\"例如创建一些资源\",{\"1\":{\"500\":1}}],[\"例如初始化一些配置信息\",{\"1\":{\"499\":1}}],[\"例如上述例子中的\",{\"1\":{\"477\":1}}],[\"例如标准库context\",{\"1\":{\"470\":1}}],[\"例如200x\",{\"1\":{\"469\":1}}],[\"例如只运行所有的基准测试的命令如下\",{\"1\":{\"468\":1}}],[\"例如示例测试是examplexxxx\",{\"1\":{\"467\":1}}],[\"例如benchmark\",{\"1\":{\"467\":1}}],[\"例如要测试某一个功能\",{\"1\":{\"467\":1}}],[\"例如在amd64的机器上\",{\"1\":{\"1442\":1}}],[\"例如在一个新的版本发布后发现了一个重大问题\",{\"1\":{\"459\":1}}],[\"例如在defer中再次闭包使用recover\",{\"1\":{\"397\":1}}],[\"例如打开gin依赖的go\",{\"1\":{\"459\":1}}],[\"例如google\",{\"1\":{\"459\":1}}],[\"例如go的版本号v1\",{\"1\":{\"455\":1}}],[\"例如java的gradle\",{\"1\":{\"442\":1}}],[\"例如int64类型的cas\",{\"1\":{\"440\":1}}],[\"例如int可以被int64类型所代表\",{\"1\":{\"385\":1}}],[\"例如事先知晓协程的数量\",{\"1\":{\"422\":1}}],[\"例如用于关闭通道的内置函数close的函数签名就用到了单向通道\",{\"1\":{\"419\":1}}],[\"例如修改文件描述符和文件权限\",{\"1\":{\"400\":1}}],[\"例如defer\",{\"1\":{\"396\":1}}],[\"例如执行defer语句\",{\"1\":{\"396\":1}}],[\"例如erros包下的errorstring就是一个很简单的实现\",{\"1\":{\"391\":1}}],[\"例如现在有一个类型map\",{\"1\":{\"384\":1}}],[\"例如性能问题等等\",{\"1\":{\"346\":1}}],[\"例如闭包中\",{\"1\":{\"339\":1}}],[\"例如切片是可寻址\",{\"1\":{\"287\":1}}],[\"例如访问字符串第一个元素\",{\"1\":{\"253\":1}}],[\"例如使用for\",{\"1\":{\"234\":1}}],[\"例如声明新变量\",{\"1\":{\"230\":1}}],[\"例如下面例子中的v0\",{\"1\":{\"459\":1}}],[\"例如下面的模板\",{\"1\":{\"1420\":1}}],[\"例如下面的例子\",{\"1\":{\"412\":1}}],[\"例如下面的错误示范\",{\"1\":{\"412\":1}}],[\"例如下面的函数func\",{\"1\":{\"281\":1}}],[\"例如下面的代码就可能会出现问题\",{\"1\":{\"1443\":1}}],[\"例如下面的代码\",{\"1\":{\"210\":1,\"836\":1}}],[\"例如下载由go语言编写的调试器delve\",{\"1\":{\"454\":1}}],[\"例如下例中的tinyint与~int8有交集\",{\"1\":{\"341\":1}}],[\"例如下列情况有非常大的可能性会触发fatal\",{\"1\":{\"266\":1}}],[\"例如下方节选自os\",{\"1\":{\"390\":1}}],[\"例如下方代码无论执行多少次都只会输出timeout\",{\"1\":{\"421\":1}}],[\"例如下方代码例子\",{\"1\":{\"388\":1}}],[\"例如下方代码\",{\"1\":{\"258\":1,\"412\":1}}],[\"例如下方的命令\",{\"1\":{\"468\":2}}],[\"例如下方的代码\",{\"1\":{\"258\":1,\"422\":1,\"437\":1}}],[\"例如下方的例子中省略了max\",{\"1\":{\"250\":1}}],[\"例如下方的数学运算\",{\"1\":{\"191\":1}}],[\"例如^a\",{\"1\":{\"179\":1}}],[\"例如a^b\",{\"1\":{\"179\":1}}],[\"例如包a导入了包b\",{\"1\":{\"175\":1}}],[\"例如没有类和继承\",{\"1\":{\"150\":1}}],[\"例如拉丁语\",{\"1\":{\"144\":1}}],[\"例如theano\",{\"1\":{\"142\":1}}],[\"例如os\",{\"1\":{\"132\":1}}],[\"例如md5和sha256\",{\"1\":{\"132\":1}}],[\"例如阿里巴巴dubbo\",{\"1\":{\"128\":1}}],[\"例如hilbert和peano曲线\",{\"1\":{\"127\":1}}],[\"例如我们经常会碰到如下的现象\",{\"1\":{\"9\":1}}],[\"例如\",{\"1\":{\"9\":1,\"55\":1,\"64\":1,\"150\":1,\"177\":1,\"206\":1,\"211\":1,\"221\":1,\"228\":1,\"247\":1,\"258\":1,\"260\":1,\"261\":1,\"262\":1,\"263\":2,\"270\":1,\"275\":5,\"276\":1,\"294\":1,\"351\":1,\"392\":1,\"421\":1,\"459\":4,\"468\":2,\"633\":2,\"634\":1,\"638\":4,\"639\":1,\"649\":1,\"651\":1,\"653\":1,\"654\":2,\"734\":1,\"789\":1,\"817\":1,\"1133\":1,\"1152\":1,\"1238\":1,\"1251\":1,\"1252\":1,\"1253\":1,\"1254\":1,\"1256\":2,\"1263\":2,\"1274\":1,\"1285\":1,\"1307\":1,\"1417\":3,\"1421\":1,\"1440\":1,\"1441\":1,\"1442\":1,\"1443\":3,\"1444\":1}}],[\"派生类型\",{\"0\":{\"201\":1}}],[\"浮点排序\",{\"0\":{\"1377\":1}}],[\"浮点常量\",{\"0\":{\"1344\":1}}],[\"浮点值和整数值\",{\"1\":{\"734\":1}}],[\"浮点数赋值\",{\"1\":{\"1419\":1}}],[\"浮点数转字符串\",{\"0\":{\"1390\":1}}],[\"浮点数\",{\"0\":{\"305\":1}}],[\"浮点数字面量\",{\"0\":{\"182\":1}}],[\"浮点\",{\"1\":{\"221\":4}}],[\"浮点型\",{\"0\":{\"198\":1},\"1\":{\"791\":1}}],[\"序列化时默认是没有任何缩进的\",{\"1\":{\"1319\":1}}],[\"序列化\",{\"0\":{\"1311\":1,\"1314\":1,\"1317\":1},\"1\":{\"1313\":1,\"1321\":1}}],[\"序列化给定\",{\"1\":{\"967\":1}}],[\"序列号\",{\"1\":{\"636\":1}}],[\"序列和数据整理方法的实现\",{\"1\":{\"127\":1}}],[\"序号从0开始\",{\"1\":{\"911\":1}}],[\"序号\",{\"1\":{\"197\":1,\"967\":1,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1}}],[\"整体部分如下\",{\"1\":{\"1303\":1}}],[\"整体的测试\",{\"1\":{\"884\":1}}],[\"整数常量\",{\"0\":{\"1343\":1}}],[\"整数数组\",{\"1\":{\"725\":1}}],[\"整数类型\",{\"1\":{\"637\":1}}],[\"整数\",{\"0\":{\"304\":1},\"1\":{\"841\":1,\"887\":1,\"1000\":3}}],[\"整数0并不代表假值\",{\"1\":{\"196\":1}}],[\"整个集群包含\",{\"1\":{\"1007\":1}}],[\"整个\",{\"1\":{\"985\":1}}],[\"整个过程中也只创建了5个对象\",{\"1\":{\"435\":1}}],[\"整个程序都会崩溃\",{\"1\":{\"394\":1}}],[\"整个结构体的内存占用似乎是8+4+2+1+4=19个字节吗\",{\"1\":{\"273\":1}}],[\"整个if语句的判断是从上到下\",{\"1\":{\"229\":1}}],[\"整型赋值\",{\"1\":{\"1419\":1}}],[\"整型转字符串\",{\"0\":{\"1385\":1}}],[\"整型排序\",{\"0\":{\"1376\":1}}],[\"整型切片指针\",{\"1\":{\"277\":1}}],[\"整型通道\",{\"1\":{\"201\":1}}],[\"整型\",{\"0\":{\"197\":1},\"1\":{\"197\":1,\"221\":3,\"791\":1}}],[\"整型字面量\",{\"0\":{\"181\":1}}],[\"描述你的思路\",{\"1\":{\"620\":1,\"692\":1}}],[\"描述\",{\"1\":{\"196\":1,\"199\":1,\"200\":1,\"221\":1,\"794\":1}}],[\"布隆过滤器\",{\"1\":{\"641\":1}}],[\"布隆过滤器实现\",{\"1\":{\"122\":1}}],[\"布尔值\",{\"1\":{\"1387\":1}}],[\"布尔值转字符串\",{\"0\":{\"1387\":1}}],[\"布尔值类型的字段命名为\",{\"1\":{\"794\":1}}],[\"布尔\",{\"1\":{\"209\":1,\"221\":1}}],[\"布尔类型的参数必须使用等号\",{\"1\":{\"1326\":1}}],[\"布尔类型只有真值和假值\",{\"1\":{\"196\":1}}],[\"布尔类型\",{\"0\":{\"196\":1,\"722\":1},\"1\":{\"202\":1}}],[\"三少一多\",{\"1\":{\"793\":1}}],[\"三类数值类型\",{\"1\":{\"791\":1}}],[\"三面\",{\"0\":{\"619\":1,\"691\":1}}],[\"三阶段提交的区别\",{\"1\":{\"614\":1,\"686\":1}}],[\"三阶段提交\",{\"1\":{\"600\":1,\"672\":1}}],[\"三次握手\",{\"1\":{\"579\":1,\"636\":2,\"641\":1,\"651\":2}}],[\"三\",{\"0\":{\"577\":1,\"649\":1}}],[\"三色标记算法\",{\"1\":{\"635\":1}}],[\"三色标记是哪三色\",{\"1\":{\"621\":1,\"693\":1}}],[\"三色标记\",{\"0\":{\"551\":1}}],[\"三色标记+增量式标记清除\",{\"0\":{\"550\":1}}],[\"三色标记法了解吗\",{\"1\":{\"588\":1,\"660\":1}}],[\"三色标记法\",{\"1\":{\"547\":1}}],[\"三个作用\",{\"0\":{\"502\":1}}],[\"三个变量在计算后的值分别是什么\",{\"1\":{\"208\":1}}],[\"三个变量也是同样如此\",{\"1\":{\"208\":1}}],[\"三种用法\",{\"1\":{\"509\":1}}],[\"三种方法有着不同的适用情况\",{\"1\":{\"412\":1}}],[\"三种必须指定一个\",{\"1\":{\"400\":1}}],[\"三元表达式\",{\"0\":{\"193\":1}}],[\"三方支持\",{\"1\":{\"111\":1}}],[\"花费时间自然变短了\",{\"1\":{\"1156\":1}}],[\"花括号省略\",{\"0\":{\"192\":1}}],[\"花了10天的时间git\",{\"1\":{\"12\":1}}],[\"代理服务器\",{\"1\":{\"1107\":1}}],[\"代理模式\",{\"1\":{\"654\":1}}],[\"代理修改成功后\",{\"1\":{\"451\":1}}],[\"代指当前路径的绝对路径\",{\"1\":{\"312\":1}}],[\"代表的含义是\",{\"1\":{\"1163\":1}}],[\"代表的是不区分大小写\",{\"1\":{\"1143\":2}}],[\"代表不限制\",{\"1\":{\"1163\":1}}],[\"代表就是直接从nginx安装目录开始查询\",{\"1\":{\"1139\":1}}],[\"代表客户端的请求地址\",{\"1\":{\"1133\":1}}],[\"代表将全部重新分配的hash槽位\",{\"1\":{\"1010\":1}}],[\"代表什么\",{\"1\":{\"778\":1}}],[\"代表添加环境变量\",{\"1\":{\"775\":1}}],[\"代表端口映射\",{\"1\":{\"775\":1}}],[\"代表必须匹配的条件\",{\"1\":{\"763\":1}}],[\"代表时间秒数的整数\",{\"1\":{\"721\":1}}],[\"代表时间毫秒数的长整型数字\",{\"1\":{\"721\":1}}],[\"代表一组方法的集合\",{\"1\":{\"635\":1}}],[\"代表一个goroutine\",{\"1\":{\"541\":1}}],[\"代表内核级的线程\",{\"1\":{\"541\":1}}],[\"代表键是否存在\",{\"1\":{\"260\":1}}],[\"代表着匹配结果\",{\"1\":{\"1254\":1}}],[\"代表着当前模块名为golearn\",{\"1\":{\"459\":1}}],[\"代表着当前函数所消耗的资源\",{\"1\":{\"326\":1}}],[\"代表着总共能装多少高度的水\",{\"1\":{\"243\":1}}],[\"代表着较后进行运算\",{\"1\":{\"191\":1}}],[\"代替\",{\"1\":{\"207\":1}}],[\"代码复制还难维护甚至有安全隐患\",{\"1\":{\"1240\":1}}],[\"代码命令如下\",{\"1\":{\"776\":1}}],[\"代码\",{\"1\":{\"706\":1,\"709\":1,\"711\":1,\"1425\":1}}],[\"代码优化来提升系统性能\",{\"1\":{\"655\":1}}],[\"代码自动补全\",{\"1\":{\"655\":1}}],[\"代码实现\",{\"1\":{\"654\":2}}],[\"代码段\",{\"1\":{\"636\":1}}],[\"代码示例\",{\"1\":{\"635\":1}}],[\"代码示例如下\",{\"1\":{\"305\":1,\"350\":1,\"352\":1,\"357\":1,\"400\":1,\"403\":1}}],[\"代码迭代过程中防止代码腐化\",{\"1\":{\"610\":1,\"682\":1}}],[\"代码里面会是什么时机做threadlocal的remove呢\",{\"1\":{\"597\":1,\"669\":1}}],[\"代码题输出解释\",{\"1\":{\"656\":1}}],[\"代码题\",{\"1\":{\"584\":1,\"656\":1}}],[\"代码的设计是务实的\",{\"1\":{\"522\":1}}],[\"代码的修改与提交\",{\"0\":{\"48\":1}}],[\"代码引用\",{\"0\":{\"453\":1}}],[\"代码相比复制文件有点多但算不上复杂\",{\"1\":{\"410\":1}}],[\"代码无法通过编译\",{\"1\":{\"341\":1}}],[\"代码行数有好几万\",{\"1\":{\"317\":1}}],[\"代码中res是go中的一个变量\",{\"1\":{\"299\":1}}],[\"代码调用\",{\"0\":{\"297\":1}}],[\"代码风格逐渐形成了规范\",{\"1\":{\"288\":1}}],[\"代码如下\",{\"1\":{\"282\":1,\"343\":1,\"400\":1,\"401\":1,\"475\":1,\"1428\":1}}],[\"代码块彼此之间的变量作用域是相互独立的\",{\"1\":{\"210\":1}}],[\"代码块\",{\"0\":{\"210\":1}}],[\"代码间隔\",{\"0\":{\"191\":1}}],[\"代码缩进\",{\"0\":{\"190\":1}}],[\"代码分析\",{\"1\":{\"172\":1}}],[\"代码生成完善\",{\"1\":{\"115\":1}}],[\"代码生成\",{\"1\":{\"111\":1}}],[\"代码库之大让linus很难继续通过手工方式管理了\",{\"1\":{\"12\":1}}],[\"代码开发中也需要这样的软件来管理我们的代码\",{\"1\":{\"9\":1}}],[\"乘法的优先级比加法要高\",{\"1\":{\"191\":1}}],[\"众所周知直接使用字符串进行+拼接性能是很低的\",{\"1\":{\"475\":1}}],[\"众所周知\",{\"1\":{\"191\":1}}],[\"仅通过几行代码就可以搭建一个非常简单的http服务器\",{\"1\":{\"1329\":1}}],[\"仅使用net\",{\"1\":{\"1308\":1}}],[\"仅给出关键代码片段\",{\"1\":{\"756\":1}}],[\"仅用于引用类型\",{\"1\":{\"533\":1}}],[\"仅对数据类型分配内存空间\",{\"1\":{\"532\":1}}],[\"仅需修改\",{\"1\":{\"494\":1}}],[\"仅需要一个go关键字\",{\"1\":{\"412\":1}}],[\"仅=>左边的版本被替换\",{\"1\":{\"459\":1}}],[\"仅当\",{\"1\":{\"967\":1}}],[\"仅当最后几行为output注释才会被视为示例测试\",{\"1\":{\"470\":1}}],[\"仅当发现数据未被修改时才会去执行对应操作\",{\"1\":{\"440\":1}}],[\"仅当v的kind为\",{\"1\":{\"360\":2}}],[\"仅仅叫法不一样\",{\"1\":{\"384\":1}}],[\"仅仅叫的名字不同\",{\"1\":{\"384\":1}}],[\"仅仅只是比较值是无法做到并发安全的\",{\"1\":{\"440\":1}}],[\"仅仅只是简单的数字相加\",{\"1\":{\"440\":1}}],[\"仅仅只是当作一台普通起重机来用\",{\"1\":{\"293\":1}}],[\"仅仅只是少了一个初始化长度\",{\"1\":{\"243\":1}}],[\"仅仅只有接口是无法被初始化的\",{\"1\":{\"292\":1}}],[\"仅goroutine可用\",{\"1\":{\"323\":1}}],[\"仅做调试用\",{\"1\":{\"218\":1}}],[\"仅支持相同长度的数组间的比较\",{\"1\":{\"209\":1}}],[\"仅支持判断是否相等\",{\"1\":{\"209\":3}}],[\"仅在一些特殊情况会使用空格\",{\"1\":{\"190\":1}}],[\"仅有的两个参数也只是输出格式化过程\",{\"1\":{\"188\":1}}],[\"仅限英语\",{\"1\":{\"144\":1}}],[\"风格的搜索和数据分析引擎\",{\"1\":{\"700\":1}}],[\"风格\",{\"0\":{\"188\":1}}],[\"风险类型\",{\"1\":{\"118\":1}}],[\"风险评估\",{\"0\":{\"118\":1}}],[\"函数即可\",{\"1\":{\"1307\":1,\"1337\":1}}],[\"函数重载的模拟\",{\"1\":{\"651\":1}}],[\"函数重载会让代码变得混淆和难以理解\",{\"1\":{\"278\":1}}],[\"函数可以获取当前时间\",{\"1\":{\"1429\":1}}],[\"函数可以将指定文件的内容从内核缓存刷到硬盘中\",{\"1\":{\"987\":1}}],[\"函数可以将变量转换成reflect\",{\"1\":{\"350\":1,\"357\":1}}],[\"函数可以接收不同类型的值\",{\"1\":{\"651\":1}}],[\"函数调用的格式为函数名后衔接参数列表\",{\"1\":{\"1420\":1}}],[\"函数调用等\",{\"1\":{\"636\":1}}],[\"函数调用耗费\",{\"1\":{\"498\":1}}],[\"函数内部修改指针所指向的值会影响原始数据\",{\"1\":{\"633\":1}}],[\"函数内部发生了panic\",{\"1\":{\"397\":1}}],[\"函数传参\",{\"1\":{\"549\":1}}],[\"函数形参使用泛型\",{\"1\":{\"516\":1}}],[\"函数作为一等公民\",{\"1\":{\"514\":1}}],[\"函数也可以当做参数\",{\"1\":{\"514\":1}}],[\"函数中发生的\",{\"1\":{\"635\":1}}],[\"函数中调用\",{\"1\":{\"504\":1}}],[\"函数中output注释表明了检测函数输出是否为hello\",{\"1\":{\"470\":1}}],[\"函数新增一个\",{\"1\":{\"501\":1}}],[\"函数每次调用前需要一些工作\",{\"1\":{\"500\":1}}],[\"函数更换为\",{\"1\":{\"495\":1}}],[\"函数os\",{\"1\":{\"402\":1}}],[\"函数open就是对openfile函数的一个简单封装\",{\"1\":{\"400\":1}}],[\"函数进行操作\",{\"1\":{\"400\":1}}],[\"函数用于解包一个错误链\",{\"1\":{\"393\":1}}],[\"函数类型也可以实现接口\",{\"1\":{\"293\":1}}],[\"函数签名由函数名称\",{\"1\":{\"278\":1}}],[\"函数签名如下\",{\"1\":{\"244\":1,\"395\":1,\"477\":1,\"1369\":1}}],[\"函数体\",{\"1\":{\"278\":1,\"514\":1}}],[\"函数名称为sum\",{\"1\":{\"278\":1}}],[\"函数名\",{\"1\":{\"278\":1,\"514\":2,\"1420\":1}}],[\"函数的实现\",{\"1\":{\"491\":1}}],[\"函数的第一个入参必须是t\",{\"1\":{\"477\":1}}],[\"函数的作用是在错误链中寻找第一个类型匹配的错误\",{\"1\":{\"393\":1}}],[\"函数的参数名变得不再重要\",{\"1\":{\"291\":1}}],[\"函数的参数传递过程中\",{\"1\":{\"287\":1}}],[\"函数的声明格式如下\",{\"1\":{\"278\":1}}],[\"函数的返回值\",{\"1\":{\"210\":1}}],[\"函数是go最基础的组成部分\",{\"1\":{\"277\":1,\"514\":1}}],[\"函数是一等公民\",{\"1\":{\"277\":1}}],[\"函数会为该指针分配内存\",{\"1\":{\"275\":1}}],[\"函数式选项模式只适合于复杂的实例化\",{\"1\":{\"269\":1}}],[\"函数式选项模式在很多开源项目中都能看见\",{\"1\":{\"269\":1}}],[\"函数花括号换行\",{\"0\":{\"189\":1}}],[\"函数\",{\"0\":{\"187\":1,\"363\":1,\"378\":1,\"514\":1,\"1420\":1},\"1\":{\"201\":1,\"202\":1,\"282\":1,\"379\":1,\"491\":1,\"641\":1,\"987\":3}}],[\"函数命名\",{\"1\":{\"178\":1}}],[\"双线链表的实现\",{\"1\":{\"1308\":1}}],[\"双击点击安装msi格式的安装包\",{\"1\":{\"963\":1}}],[\"双写策略\",{\"1\":{\"644\":1}}],[\"双向通信\",{\"1\":{\"637\":1}}],[\"双向管道可以转换为单向管道\",{\"1\":{\"419\":1}}],[\"双向管道指的是既可以写\",{\"1\":{\"419\":1}}],[\"双亲委派机制\",{\"1\":{\"590\":1,\"662\":1}}],[\"双值断言\",{\"1\":{\"516\":1}}],[\"双引号表示\",{\"1\":{\"252\":1}}],[\"双引号转义\",{\"1\":{\"185\":1}}],[\"双循环打印九九乘法表\",{\"1\":{\"233\":1}}],[\"双端队列\",{\"1\":{\"127\":1,\"651\":1}}],[\"反向代理\",{\"1\":{\"1108\":1}}],[\"反向代理服务器及电子邮件\",{\"1\":{\"1107\":1}}],[\"反向索引列出任何文档中出现的每个惟一单词\",{\"1\":{\"734\":1}}],[\"反序列化\",{\"0\":{\"1312\":1,\"1315\":1,\"1320\":1},\"1\":{\"833\":1,\"1310\":1,\"1313\":1,\"1321\":1}}],[\"反转链表\",{\"1\":{\"590\":1,\"662\":1}}],[\"反问\",{\"1\":{\"566\":1,\"567\":1,\"570\":1,\"572\":1,\"573\":1,\"578\":1,\"586\":1,\"590\":1,\"592\":1,\"593\":1,\"597\":1,\"598\":1,\"599\":1,\"606\":1,\"607\":1,\"638\":1,\"639\":1,\"642\":1,\"644\":1,\"645\":1,\"650\":1,\"658\":1,\"662\":1,\"664\":1,\"665\":1,\"669\":1,\"670\":1,\"671\":1,\"678\":1,\"679\":1}}],[\"反射操作包\",{\"1\":{\"1308\":1}}],[\"反射编码器\",{\"1\":{\"1302\":1}}],[\"反射是动态语言的一大特性\",{\"1\":{\"645\":1}}],[\"反射是一种在运行时检查语言自身结构的机制\",{\"1\":{\"346\":1}}],[\"反射允许程序在运行时动态地加载类\",{\"1\":{\"645\":1}}],[\"反射创建函数\",{\"1\":{\"378\":1}}],[\"反射创建管道\",{\"1\":{\"377\":1}}],[\"反射创建map\",{\"1\":{\"376\":1}}],[\"反射创建切片\",{\"1\":{\"375\":1}}],[\"反射可以将反射对象还原成interface\",{\"1\":{\"349\":1}}],[\"反射可以将interface\",{\"1\":{\"349\":1}}],[\"反射与interface\",{\"1\":{\"346\":1}}],[\"反射\",{\"0\":{\"346\":1}}],[\"反汇编查看\",{\"1\":{\"327\":1}}],[\"反过来也是如此\",{\"1\":{\"1446\":1}}],[\"反过来则不可以\",{\"1\":{\"419\":1}}],[\"反过来编译器轻松了\",{\"1\":{\"345\":1}}],[\"反过来signedint就是它们的超集\",{\"1\":{\"340\":1}}],[\"反过来\",{\"1\":{\"306\":1}}],[\"反而还可以存在多个\",{\"1\":{\"261\":1}}],[\"反引号字符串不允许转义\",{\"1\":{\"186\":1}}],[\"反斜杠转义\",{\"1\":{\"185\":1}}],[\"反编译\",{\"1\":{\"12\":1}}],[\"纵向制表符号\",{\"1\":{\"185\":1}}],[\"横向制表符号\",{\"1\":{\"185\":1}}],[\"换句话说\",{\"1\":{\"1254\":1}}],[\"换成一个map再来一遍\",{\"1\":{\"360\":1}}],[\"换行符用\",{\"1\":{\"743\":1}}],[\"换行符号\",{\"1\":{\"185\":1}}],[\"换行\",{\"1\":{\"252\":4}}],[\"换行也被当作空格\",{\"1\":{\"224\":1}}],[\"换页符号\",{\"1\":{\"185\":1}}],[\"换源工具\",{\"0\":{\"77\":1}}],[\"响应头不计算在内\",{\"1\":{\"1133\":1}}],[\"响应结果如下\",{\"1\":{\"768\":1}}],[\"响应体也是需要自己手动处理的\",{\"1\":{\"707\":1}}],[\"响应超时\",{\"1\":{\"655\":1}}],[\"响应时间短的优先分配\",{\"1\":{\"1168\":1}}],[\"响应时间方式\",{\"1\":{\"1160\":1}}],[\"响应时间\",{\"1\":{\"644\":1,\"655\":1}}],[\"响应协议\",{\"1\":{\"124\":1}}],[\"响铃符号\",{\"1\":{\"185\":1}}],[\"ä\",{\"1\":{\"184\":1,\"258\":1}}],[\"复杂\",{\"1\":{\"1309\":1}}],[\"复杂的计算应该在程序代码中实现\",{\"1\":{\"783\":1}}],[\"复制字符串\",{\"0\":{\"1396\":1}}],[\"复制自定义的\",{\"1\":{\"1193\":1}}],[\"复制前端文件\",{\"1\":{\"1193\":1}}],[\"复制5份redis\",{\"1\":{\"1010\":1}}],[\"复制过滤\",{\"1\":{\"822\":3}}],[\"复制代码\",{\"1\":{\"645\":1,\"649\":2,\"651\":5,\"653\":6,\"654\":8,\"656\":3}}],[\"复制后的值也不应该继续使用\",{\"1\":{\"422\":1}}],[\"复制文件内容\",{\"1\":{\"410\":1}}],[\"复制成功\",{\"1\":{\"403\":1}}],[\"复制\",{\"0\":{\"403\":1,\"410\":1},\"1\":{\"403\":1,\"653\":1}}],[\"复制human文件\",{\"1\":{\"132\":1}}],[\"复数\",{\"1\":{\"1392\":1}}],[\"复数转字符串\",{\"0\":{\"1392\":1}}],[\"复数操作包\",{\"1\":{\"1308\":1}}],[\"复数类型\",{\"0\":{\"199\":1}}],[\"复数字面量\",{\"0\":{\"183\":1}}],[\"来在模板中表示这是一个模板参数\",{\"1\":{\"1417\":1}}],[\"来判断\",{\"1\":{\"1381\":1}}],[\"来判断一个对象是否可以回收\",{\"1\":{\"645\":1}}],[\"来解析参数\",{\"1\":{\"1326\":1}}],[\"来解决这个问题呢\",{\"1\":{\"800\":1}}],[\"来为\",{\"1\":{\"1235\":1}}],[\"来做限流\",{\"1\":{\"1154\":1}}],[\"来应对大批量的网络请求\",{\"1\":{\"1073\":1}}],[\"来保证单个节点故障时保证一致性和高可用性\",{\"1\":{\"1064\":1}}],[\"来划分数据\",{\"1\":{\"1006\":1}}],[\"来查询主节点的地址\",{\"1\":{\"999\":1}}],[\"来查询评论和回复\",{\"1\":{\"638\":1}}],[\"来创建一个子进程\",{\"1\":{\"980\":1}}],[\"来启动mongodb\",{\"1\":{\"851\":1}}],[\"来管理数据存储和读写\",{\"1\":{\"842\":1}}],[\"来让优化器忽略掉某些索引\",{\"1\":{\"816\":1}}],[\"来重新初始化连接资源\",{\"1\":{\"776\":1}}],[\"来指定内存引擎创建表\",{\"1\":{\"775\":1}}],[\"来指定其存储的数据是什么类型\",{\"1\":{\"413\":1}}],[\"来评估系统健康状态\",{\"1\":{\"655\":1}}],[\"来设置日志的输出路径\",{\"1\":{\"1341\":1}}],[\"来设置\",{\"1\":{\"654\":1}}],[\"来定期执行任务\",{\"1\":{\"653\":1}}],[\"来定期执行sql更新操作或调用接口\",{\"1\":{\"653\":1}}],[\"来定义\",{\"1\":{\"1325\":2}}],[\"来定义排序规则\",{\"1\":{\"649\":1}}],[\"来定义服务\",{\"1\":{\"637\":1}}],[\"来加锁保护\",{\"1\":{\"649\":1}}],[\"来加锁同步访问\",{\"1\":{\"635\":1}}],[\"来操作库存数据\",{\"1\":{\"644\":1}}],[\"来缓解瞬时流量的压力\",{\"1\":{\"644\":1}}],[\"来确保数据的可靠性\",{\"1\":{\"644\":1}}],[\"来提高可用性和扩展性\",{\"1\":{\"641\":1}}],[\"来提高回收效率\",{\"1\":{\"635\":1}}],[\"来修复失败操作\",{\"1\":{\"641\":1}}],[\"来打通不同系统间的用户身份认证\",{\"1\":{\"639\":1}}],[\"来打包应用程序\",{\"1\":{\"637\":1}}],[\"来存储前1000个最大的整数\",{\"1\":{\"639\":1}}],[\"来关联主评论\",{\"1\":{\"638\":1}}],[\"来统计点赞数\",{\"1\":{\"638\":1}}],[\"来控制查询的起始位置和返回记录数\",{\"1\":{\"656\":1}}],[\"来控制\",{\"1\":{\"638\":2}}],[\"来限制抢单的数量\",{\"1\":{\"638\":1}}],[\"来自动化软件开发和运维流程\",{\"1\":{\"637\":1}}],[\"来实现路由匹配\",{\"1\":{\"1287\":1}}],[\"来实现并发控制\",{\"1\":{\"656\":1}}],[\"来实现索引\",{\"1\":{\"649\":1}}],[\"来实现高效的线程安全\",{\"1\":{\"641\":1}}],[\"来实现\",{\"1\":{\"638\":1,\"656\":1,\"1284\":1}}],[\"来实现原子操作\",{\"1\":{\"638\":1}}],[\"来实现双向通信\",{\"1\":{\"637\":1}}],[\"来实现多态\",{\"1\":{\"637\":1}}],[\"来实现的\",{\"1\":{\"633\":1}}],[\"来处理某个客户端的请求\",{\"1\":{\"1128\":1}}],[\"来处理缓存与数据库的不一致问题\",{\"1\":{\"644\":1}}],[\"来处理这种情况\",{\"1\":{\"638\":1}}],[\"来处理\",{\"1\":{\"635\":1}}],[\"来手动触发垃圾回收\",{\"1\":{\"633\":1}}],[\"来演示\",{\"1\":{\"491\":1}}],[\"来添加\",{\"1\":{\"477\":1}}],[\"来使输出结果更加详细一点\",{\"1\":{\"468\":1}}],[\"来看看下面的一个例子\",{\"1\":{\"417\":1}}],[\"来看一个对int类型的管道读写的例子\",{\"1\":{\"415\":1}}],[\"来获取其字符串表现形式\",{\"1\":{\"1417\":1}}],[\"来获取其原始值\",{\"1\":{\"360\":1}}],[\"来获取其类型\",{\"1\":{\"351\":1}}],[\"来进行赋值\",{\"1\":{\"1419\":1}}],[\"来进行测试\",{\"1\":{\"477\":1}}],[\"来进行类型转换和断言要优雅和方便很多\",{\"1\":{\"344\":1}}],[\"来进行数字划分\",{\"1\":{\"181\":1}}],[\"来表示根对象\",{\"1\":{\"1417\":1}}],[\"来表示底层类型\",{\"1\":{\"340\":1}}],[\"来表示字符串\",{\"1\":{\"303\":1}}],[\"来告诉gc可以将其回收\",{\"1\":{\"320\":1}}],[\"来讲解我们的课程\",{\"1\":{\"43\":1}}],[\"字长为64位\",{\"1\":{\"1442\":1}}],[\"字节切片操作包\",{\"1\":{\"1308\":1}}],[\"字节二面\",{\"0\":{\"583\":1,\"655\":1}}],[\"字节一面\",{\"0\":{\"582\":1,\"654\":1}}],[\"字节跳动面经详解3\",{\"1\":{\"626\":1,\"698\":1}}],[\"字节跳动面经详解2\",{\"1\":{\"626\":1,\"698\":1}}],[\"字节跳动面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"字节跳动\",{\"0\":{\"581\":1,\"653\":1}}],[\"字节对齐\",{\"1\":{\"554\":1}}],[\"字节\",{\"0\":{\"584\":1,\"656\":1},\"1\":{\"513\":3}}],[\"字节存储的是ascll码\",{\"1\":{\"511\":1}}],[\"字段重命名\",{\"0\":{\"1318\":1}}],[\"字段重置后释放对象到池中\",{\"1\":{\"435\":1}}],[\"字段必须是对外暴露的\",{\"1\":{\"1309\":1}}],[\"字段数量限制\",{\"0\":{\"798\":1}}],[\"字段相关的约定都能设置上\",{\"1\":{\"794\":1}}],[\"字段命名应尽可能使用表达实际含义的英文单词或\",{\"1\":{\"794\":1}}],[\"字段个数越多\",{\"1\":{\"793\":1}}],[\"字段没有索引\",{\"1\":{\"780\":1}}],[\"字段的长度越短\",{\"1\":{\"720\":1}}],[\"字段的字节偏移\",{\"1\":{\"367\":1}}],[\"字段后\",{\"1\":{\"656\":1}}],[\"字段包括\",{\"1\":{\"638\":1}}],[\"字段设置\",{\"1\":{\"634\":1}}],[\"字段\",{\"1\":{\"579\":1,\"651\":2,\"788\":1,\"810\":1,\"848\":1}}],[\"字段名称\",{\"1\":{\"367\":1}}],[\"字段名不能与方法名重复\",{\"1\":{\"267\":1}}],[\"字段值是否全部相等\",{\"1\":{\"294\":1}}],[\"字段类型都是可比较类型的结构体\",{\"1\":{\"209\":1}}],[\"字母t\",{\"1\":{\"255\":1}}],[\"字符设备\",{\"1\":{\"400\":1}}],[\"字符类型\",{\"0\":{\"200\":1}}],[\"字符串赋值\",{\"1\":{\"1419\":1}}],[\"字符串中的\",{\"1\":{\"1415\":1}}],[\"字符串reader\",{\"0\":{\"1413\":1}}],[\"字符串replacer\",{\"0\":{\"1412\":1}}],[\"字符串builder比起直接操作字符串更加节省内存\",{\"1\":{\"1411\":1}}],[\"字符串builder\",{\"0\":{\"1411\":1}}],[\"字符串追加数据\",{\"0\":{\"1393\":1}}],[\"字符串在转换浮点数时\",{\"1\":{\"1390\":1}}],[\"字符串排序\",{\"0\":{\"1378\":1}}],[\"字符串操作包\",{\"1\":{\"1308\":1}}],[\"字符串命令\",{\"1\":{\"970\":1}}],[\"字符串不加引号索引失效\",{\"1\":{\"818\":1}}],[\"字符串地理点参数\",{\"1\":{\"730\":1}}],[\"字符串数组\",{\"1\":{\"725\":1}}],[\"字符串解析为\",{\"1\":{\"656\":1}}],[\"字符串虽然可以作为主键\",{\"1\":{\"637\":1}}],[\"字符串转复数\",{\"0\":{\"1391\":1}}],[\"字符串转浮点数\",{\"0\":{\"1389\":1}}],[\"字符串转布尔值\",{\"0\":{\"1386\":1}}],[\"字符串转整型\",{\"0\":{\"1384\":1}}],[\"字符串转换包\",{\"1\":{\"1308\":1}}],[\"字符串转byte数组会发生内存拷贝吗\",{\"1\":{\"537\":1}}],[\"字符串转字符切片\",{\"1\":{\"511\":1}}],[\"字符串string\",{\"0\":{\"510\":1,\"970\":1}}],[\"字符串拷贝其实是字节切片拷贝\",{\"1\":{\"256\":1}}],[\"字符串的顺序不同\",{\"1\":{\"656\":1}}],[\"字符串的拼接使用+操作符\",{\"1\":{\"257\":1}}],[\"字符串的长度\",{\"1\":{\"255\":1}}],[\"字符串的内容是只读的不可变的\",{\"1\":{\"254\":1}}],[\"字符串可以转换为字节切片\",{\"1\":{\"254\":1}}],[\"字符串本质上是一个不可变的只读的字节数组\",{\"1\":{\"251\":1}}],[\"字符串表现形式需要自己实现\",{\"1\":{\"213\":1}}],[\"字符串\",{\"0\":{\"303\":1,\"922\":1},\"1\":{\"209\":1,\"234\":1,\"303\":1,\"641\":2,\"656\":1}}],[\"字符串类型的变量\",{\"1\":{\"206\":1}}],[\"字符串类型\",{\"0\":{\"717\":1},\"1\":{\"202\":1,\"294\":1}}],[\"字符串即字节序列\",{\"1\":{\"200\":1}}],[\"字符串字面量必须使用双引号\",{\"1\":{\"186\":1}}],[\"字符串字面量\",{\"0\":{\"186\":1}}],[\"字符串格式处理\",{\"1\":{\"122\":1}}],[\"字符字面量必须使用单引号括起来\",{\"1\":{\"184\":1}}],[\"字符字面量\",{\"0\":{\"184\":1}}],[\"字面意义上\",{\"1\":{\"180\":1}}],[\"字面量函数的类型没有名称\",{\"1\":{\"364\":1}}],[\"字面量\",{\"0\":{\"180\":1,\"252\":1},\"1\":{\"180\":1,\"210\":1,\"211\":3,\"234\":1}}],[\"因它的稳定性\",{\"1\":{\"1107\":1}}],[\"因该传递指针而不是值\",{\"1\":{\"422\":1}}],[\"因系统调用而阻塞的协程信息\",{\"1\":{\"328\":1}}],[\"因同步原语而阻塞的协程信息\",{\"1\":{\"328\":1}}],[\"因网络io而阻塞的协程信息\",{\"1\":{\"328\":1}}],[\"因此每个节点只处理部分数据\",{\"1\":{\"1006\":1}}],[\"因此应用程序无需重启即可自动完成主从节点切换\",{\"1\":{\"999\":1}}],[\"因此多个调用者只是读取操作时可以共享同一份资源\",{\"1\":{\"988\":1}}],[\"因此多个策略的效果不会叠加\",{\"1\":{\"981\":1}}],[\"因此新的\",{\"1\":{\"985\":1}}],[\"因此就需要对\",{\"1\":{\"985\":1}}],[\"因此其可用性欠佳\",{\"1\":{\"981\":1}}],[\"因此必须有一种机制能够保证\",{\"1\":{\"979\":1}}],[\"因此必须通过加锁来保证并发安全\",{\"1\":{\"635\":1}}],[\"因此子查询中的select\",{\"1\":{\"821\":1}}],[\"因此h非常小\",{\"1\":{\"805\":1}}],[\"因此需要进行mysql数据库\",{\"1\":{\"799\":1}}],[\"因此需要逃逸到堆\",{\"1\":{\"548\":1}}],[\"因此联合主键的字段个数越少越好\",{\"1\":{\"793\":1}}],[\"因此推荐自增主键使用int\",{\"1\":{\"791\":1}}],[\"因此冗余和范式的权衡符合任务需要\",{\"1\":{\"789\":1}}],[\"因此引擎扫描行数跟\",{\"1\":{\"780\":1}}],[\"因此可以支持各种数据类型和数据结构\",{\"1\":{\"842\":1}}],[\"因此可以创建大量的goroutine\",{\"1\":{\"654\":1}}],[\"因此可以利用位运算来生成所有子集\",{\"1\":{\"653\":1}}],[\"因此会在操作期间锁住数据\",{\"1\":{\"653\":1}}],[\"因此数据的访问更加有序\",{\"1\":{\"649\":1}}],[\"因此不同的发行版可以公用bootfs\",{\"1\":{\"1192\":1}}],[\"因此不同类型的变量无法进行运算\",{\"1\":{\"385\":1}}],[\"因此不会出现循环继承的问题\",{\"1\":{\"637\":1}}],[\"因此在正常的go开发过程中\",{\"1\":{\"463\":1}}],[\"因此熟悉go\",{\"1\":{\"459\":1}}],[\"因此ctx\",{\"1\":{\"426\":1}}],[\"因此\",{\"1\":{\"417\":1,\"654\":1,\"984\":1,\"1029\":1,\"1154\":1,\"1307\":1,\"1329\":1}}],[\"因此time\",{\"1\":{\"412\":1}}],[\"因此让每次循环都稍微的等一下\",{\"1\":{\"412\":1}}],[\"因此上下文切换开销非常小\",{\"1\":{\"412\":1}}],[\"因此num1的转换结果就是0\",{\"1\":{\"385\":1}}],[\"因此下面这种写法是错误的\",{\"1\":{\"300\":1}}],[\"因此无法直接支持反射\",{\"1\":{\"645\":1}}],[\"因此无法赋值给变量an\",{\"1\":{\"287\":1}}],[\"因此无法用于初始化数组长度\",{\"1\":{\"239\":1}}],[\"因此结果就是任何数字都不等于nan\",{\"1\":{\"261\":1}}],[\"因此a\",{\"1\":{\"179\":1}}],[\"因为后者可以作用全局\",{\"1\":{\"1420\":1}}],[\"因为后续的代码无法保证同步运行\",{\"1\":{\"473\":1}}],[\"因为两者的数据类型不同\",{\"1\":{\"1393\":1}}],[\"因为两者类型不同\",{\"1\":{\"381\":1}}],[\"因为国内无法直接访问google\",{\"1\":{\"1222\":1}}],[\"因为linux是在内核中进行数据的复制来实现虚拟接口之间的数据转发\",{\"1\":{\"1195\":1}}],[\"因为linus坚定地反对cvs和svn\",{\"1\":{\"12\":1}}],[\"因为在同一宿主机内的容器都接入同一个网桥\",{\"1\":{\"1195\":1}}],[\"因为在这里条件变量作用的是读协程\",{\"1\":{\"432\":1}}],[\"因为在这种情况下cgo没法判断其是否被引用\",{\"1\":{\"300\":1}}],[\"因为底层直接用host的kernel\",{\"1\":{\"1192\":1}}],[\"因为对于hash\",{\"1\":{\"1165\":1}}],[\"因为kong的token会携带一个前缀\",{\"1\":{\"1092\":1}}],[\"因为save命令无需创建子进程\",{\"1\":{\"981\":1}}],[\"因为season是自定义类型\",{\"1\":{\"213\":1}}],[\"因为\",{\"1\":{\"965\":1,\"1230\":1}}],[\"因为6379在手机按键上merz对应的号码\",{\"1\":{\"965\":1}}],[\"因为我们还没有开启主从复制过程\",{\"1\":{\"822\":1}}],[\"因为我们要在闭包中对person赋值\",{\"1\":{\"269\":1}}],[\"因为存储引擎底层的api限制的\",{\"1\":{\"817\":1}}],[\"因为b\",{\"1\":{\"817\":1}}],[\"因为b+树数据都在叶子节点\",{\"1\":{\"616\":1,\"688\":1}}],[\"因为需要更多地内存和磁盘io\",{\"1\":{\"816\":1}}],[\"因为需要更新索引\",{\"1\":{\"635\":1}}],[\"因为选择性高的索引可以在查找时过滤掉更多的行\",{\"1\":{\"815\":1}}],[\"因为索引列是按照\",{\"1\":{\"816\":1}}],[\"因为索引文件通常比数据文件要小all和index都是读全表\",{\"1\":{\"814\":1}}],[\"因为索引很大\",{\"1\":{\"805\":1}}],[\"因为只匹配一行数据\",{\"1\":{\"814\":1}}],[\"因为建立索引后\",{\"1\":{\"811\":1}}],[\"因为中间结点只是索引\",{\"1\":{\"805\":1}}],[\"因为都是要查找到叶子结点\",{\"1\":{\"805\":1}}],[\"因为进行一次i\",{\"1\":{\"805\":1}}],[\"因为过长的事务会导致锁数据较久\",{\"1\":{\"796\":1}}],[\"因为alter\",{\"1\":{\"796\":1}}],[\"因为a是int类型的变量\",{\"1\":{\"381\":1}}],[\"因为使用\",{\"1\":{\"794\":1}}],[\"因为如果设为主键且主键值为随机\",{\"1\":{\"794\":1}}],[\"因为一个主键可以理解是一张表的代表\",{\"1\":{\"793\":1}}],[\"因为查询缓存的失效非常频繁\",{\"1\":{\"777\":1}}],[\"因为mysql只是缓存索引的信息\",{\"1\":{\"817\":1}}],[\"因为mysql不允许索引这些\",{\"1\":{\"815\":1}}],[\"因为mysql\",{\"1\":{\"776\":1}}],[\"因为es请求使用的是json格式\",{\"1\":{\"746\":1}}],[\"因为errorstring实现太过于简单\",{\"1\":{\"391\":1}}],[\"因为叶子节点通过链表连接\",{\"1\":{\"649\":1}}],[\"因为涉及到大量的数据库操作和网络请求\",{\"1\":{\"645\":1}}],[\"因为登录信息\",{\"1\":{\"638\":1}}],[\"因为其具有较高的性能和存储效率\",{\"1\":{\"637\":1}}],[\"因为其内容都是依赖于本地的文件\",{\"1\":{\"463\":1}}],[\"因为递减和判断不是原子性的\",{\"1\":{\"592\":1,\"664\":1}}],[\"因为迁移涉及数据同步工作量巨大\",{\"1\":{\"576\":1,\"648\":1}}],[\"因为错误发生的方式本身会揭露错误的原因\",{\"1\":{\"504\":1}}],[\"因为基准测试运行器起初并不了解函数调用的具体耗时\",{\"1\":{\"498\":1}}],[\"因为replace指令所指定的target是一个文件路径而非网络url\",{\"1\":{\"462\":1}}],[\"因为这个时候表中的数据会村部缓存到内存中\",{\"1\":{\"800\":1}}],[\"因为这种情况下数据修改较多\",{\"1\":{\"653\":1}}],[\"因为这两个调用会阻止跟踪过程\",{\"1\":{\"504\":1}}],[\"因为这两个数据结构本质上都是指针\",{\"1\":{\"279\":1}}],[\"因为这样的编码风格看起来就跟表格一样\",{\"1\":{\"474\":1}}],[\"因为这会影响到模块名\",{\"1\":{\"445\":1}}],[\"因为原子操作的粒度过细\",{\"1\":{\"438\":1}}],[\"因为原始错误是被结构体包裹起来的\",{\"1\":{\"393\":1}}],[\"因为协程被唤醒时并不能保证当前条件就已经满足了\",{\"1\":{\"432\":1}}],[\"因为hello函数内部对一个形参waitgroup调用done并不会作用到原来的mainwait上\",{\"1\":{\"422\":1}}],[\"因为大多数情况下接收方只知道接收数据\",{\"1\":{\"420\":1}}],[\"因为子协程已经执行完毕了\",{\"1\":{\"420\":1}}],[\"因为不能对管道读写就失去了其存在的作用\",{\"1\":{\"419\":1}}],[\"因为管道缓冲区最大只有5\",{\"1\":{\"417\":1}}],[\"因为没有其他协程来向管道中写入或读取数据\",{\"1\":{\"417\":1}}],[\"因为没有数据库程序就运行的毫无意义\",{\"1\":{\"395\":1}}],[\"因为缓冲区容量为0\",{\"1\":{\"416\":1}}],[\"因为io错误的类型有很多\",{\"1\":{\"400\":1}}],[\"因为处理的方式非常简单\",{\"1\":{\"388\":1}}],[\"因为也就无法进行类型转换\",{\"1\":{\"385\":1}}],[\"因为前者是声明了一个新的类型\",{\"1\":{\"384\":1}}],[\"因为前者仅仅只是一个类型别名\",{\"1\":{\"294\":1}}],[\"因为tinyint在类型集int内\",{\"1\":{\"340\":1}}],[\"因为tinyint与int8底层类型就是一致的\",{\"1\":{\"340\":1}}],[\"因为无符号整数和有符号整数两个肯定没有交集\",{\"1\":{\"340\":1}}],[\"因为类型不匹配\",{\"1\":{\"337\":1}}],[\"因为c中没有字符串这个类型\",{\"1\":{\"303\":1}}],[\"因为const仅支持基本数据类型\",{\"1\":{\"213\":1}}],[\"因为该头文件生成的前提是所有go源文件能够通过编译\",{\"1\":{\"300\":1}}],[\"因为所有类型的方法集都是空集的超集\",{\"1\":{\"294\":1}}],[\"因为它只需要开始于索引的某一点\",{\"1\":{\"814\":1}}],[\"因为它没有任何字段\",{\"1\":{\"651\":1}}],[\"因为它没有堆栈信息\",{\"1\":{\"393\":1}}],[\"因为它们是轻量级的\",{\"1\":{\"649\":1}}],[\"因为它能有效利用多核\",{\"1\":{\"645\":1}}],[\"因为它与程序同时执⾏\",{\"1\":{\"522\":1}}],[\"因为它通过语法糖的方式解决了这类问题\",{\"1\":{\"388\":1}}],[\"因为它的参数必须是绝对路径\",{\"1\":{\"312\":1}}],[\"因为它仅仅只是一组规范\",{\"1\":{\"292\":1}}],[\"因为它支持高效的并发处理\",{\"1\":{\"159\":1}}],[\"因为通过指针可以找到dog结构体\",{\"1\":{\"287\":1}}],[\"因为docker容器是相互独立的\",{\"1\":{\"822\":1}}],[\"因为dog没有实现animal\",{\"1\":{\"287\":1}}],[\"因为defer是在函数返回前执行的\",{\"1\":{\"283\":1}}],[\"因为可读性很糟糕\",{\"1\":{\"268\":1}}],[\"因为nodelay只能保证burst的请求被立即处理\",{\"1\":{\"1156\":1}}],[\"因为nan是iee754标准所定义的\",{\"1\":{\"261\":1}}],[\"因为nil不属于任何类型\",{\"1\":{\"206\":1}}],[\"因为go会新分配一片内存空间给字节切片\",{\"1\":{\"254\":1}}],[\"因为字符串本质是字节数组\",{\"1\":{\"253\":1}}],[\"因为标准输出本身就是一个文件\",{\"1\":{\"217\":1}}],[\"因为数组长度也是类型的一部分\",{\"1\":{\"209\":1}}],[\"因为每次git提交都会使用该用户信息\",{\"1\":{\"55\":1}}],[\"因为总是放在本地\",{\"1\":{\"39\":1}}],[\"^uint\",{\"1\":{\"1343\":1}}],[\"^selinux=enforcin$\",{\"1\":{\"1222\":1}}],[\"^c\",{\"1\":{\"1195\":2,\"1196\":1,\"1197\":3}}],[\"^~\",{\"1\":{\"1143\":1,\"1144\":3}}],[\"^~~~~~~~~~~~~~~\",{\"1\":{\"300\":1}}],[\"^mongo\",{\"1\":{\"861\":1}}],[\"^开头$结尾\",{\"1\":{\"630\":1}}],[\"^pattern$\",{\"1\":{\"482\":1}}],[\"^$\",{\"1\":{\"468\":1}}],[\"^=\",{\"1\":{\"179\":1}}],[\"^\",{\"1\":{\"179\":2}}],[\"ymal文件地址\",{\"1\":{\"1229\":1}}],[\"yml也在许多项目里以配置文件的形式存在\",{\"1\":{\"1313\":1}}],[\"yml\",{\"0\":{\"1313\":1},\"1\":{\"1203\":1,\"1303\":1,\"1315\":1}}],[\"yml进行修改\",{\"1\":{\"768\":1}}],[\"yyy\",{\"1\":{\"1136\":1}}],[\"yyyy\",{\"1\":{\"721\":1,\"724\":1}}],[\"yyyymmddhhmmss\",{\"1\":{\"459\":1}}],[\"yykk\",{\"1\":{\"1131\":1,\"1163\":1}}],[\"yahoo\",{\"1\":{\"1056\":1}}],[\"yaml的语法和其他高级语言类似\",{\"1\":{\"1313\":1}}],[\"yaml\",{\"1\":{\"122\":3,\"453\":2,\"459\":1,\"1228\":6,\"1229\":2,\"1230\":1,\"1302\":26,\"1307\":6,\"1309\":2,\"1313\":2,\"1314\":1,\"1315\":1}}],[\"yum\",{\"1\":{\"774\":7,\"964\":1,\"1078\":3,\"1112\":1,\"1175\":1,\"1184\":10,\"1220\":8,\"1221\":3,\"1222\":6}}],[\"yellow\",{\"1\":{\"768\":1}}],[\"yesterday\",{\"1\":{\"1174\":1}}],[\"yes\",{\"1\":{\"722\":1,\"965\":3,\"982\":1,\"983\":1,\"986\":4,\"993\":1,\"1002\":3,\"1010\":8}}],[\"york\",{\"1\":{\"584\":1,\"656\":4}}],[\"yoursite\",{\"1\":{\"743\":1}}],[\"your\",{\"1\":{\"740\":1}}],[\"you\",{\"1\":{\"453\":2,\"477\":4,\"702\":1,\"993\":1,\"994\":1,\"1010\":6,\"1225\":2,\"1409\":4}}],[\"y\",{\"1\":{\"176\":1,\"187\":1,\"379\":1,\"459\":2,\"774\":2,\"1078\":2,\"1112\":1,\"1174\":1,\"1184\":4,\"1220\":2,\"1221\":1,\"1222\":1,\"1417\":2}}],[\"外存储器\",{\"1\":{\"805\":1}}],[\"外存储器和内存储器\",{\"0\":{\"805\":1}}],[\"外观模式\",{\"1\":{\"654\":1}}],[\"外键关系建立索引\",{\"1\":{\"811\":1}}],[\"外键的使用来增强数据表之间的复用率\",{\"1\":{\"793\":1}}],[\"外键字段可能用于表示表间的关系\",{\"1\":{\"653\":1}}],[\"外键字段\",{\"1\":{\"653\":1}}],[\"外键约束确保子表中的数据引用主表中的有效数据\",{\"1\":{\"638\":1}}],[\"外键支持\",{\"1\":{\"595\":1,\"667\":1}}],[\"外层select将被标记为deriver\",{\"1\":{\"814\":1}}],[\"外层的主线程无法捕获\",{\"1\":{\"635\":1}}],[\"外层的协程能捕获子协程的\",{\"1\":{\"635\":1}}],[\"外层的协程能捕获子协程的panic吗\",{\"1\":{\"563\":1,\"635\":1}}],[\"外层协程无法捕获子协程的\",{\"1\":{\"635\":1}}],[\"外部访问端口\",{\"1\":{\"1235\":1}}],[\"外部通过该端口访问\",{\"1\":{\"655\":1}}],[\"外部变量\",{\"1\":{\"514\":1}}],[\"外部包将无法访问内部包中的任何内容\",{\"1\":{\"176\":1}}],[\"外界对于go最诟病的点就在错误处理上\",{\"1\":{\"388\":1}}],[\"外设i\",{\"1\":{\"140\":1}}],[\"存活时间\",{\"1\":{\"645\":1}}],[\"存在\",{\"1\":{\"1185\":1}}],[\"存在的问题\",{\"1\":{\"1165\":1}}],[\"存在隐患\",{\"1\":{\"1160\":1}}],[\"存在是删除\",{\"1\":{\"967\":1}}],[\"存在存储引擎不支持覆盖索引\",{\"1\":{\"817\":1}}],[\"存在hash冲突\",{\"1\":{\"807\":1}}],[\"存在就返回值即可\",{\"1\":{\"558\":1}}],[\"存在循环导入的话将会无法通过编译\",{\"1\":{\"175\":1}}],[\"存储了特定的用户权限配置\",{\"1\":{\"1244\":1}}],[\"存储访问模型\",{\"1\":{\"1244\":1}}],[\"存储卷\",{\"1\":{\"1201\":1}}],[\"存储<k\",{\"1\":{\"1165\":1}}],[\"存储状态在32位平台上始终占用32或64个字节\",{\"1\":{\"1152\":1}}],[\"存储和消费消息\",{\"1\":{\"1061\":1}}],[\"存储和网络资源\",{\"1\":{\"655\":1}}],[\"存储的状态在32位平台上占用32或64字节的内存\",{\"1\":{\"1152\":1}}],[\"存储的路在\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"存储的过程中发挥着举足轻重的作用\",{\"1\":{\"1055\":1}}],[\"存储的文档分布在整个集群中\",{\"1\":{\"734\":1}}],[\"存储同一个topic的分区\",{\"1\":{\"1020\":1}}],[\"存储格式是bson\",{\"1\":{\"827\":1}}],[\"存储器读取数据按\",{\"1\":{\"805\":1}}],[\"存储数字的取值范围还是int本身数据类型的取值范围\",{\"1\":{\"791\":1}}],[\"存储数据库\",{\"1\":{\"908\":1}}],[\"存储数据\",{\"1\":{\"634\":1}}],[\"存储过程等\",{\"1\":{\"783\":1}}],[\"存储引擎的任务是将执行器的指令落在数据库文件上\",{\"1\":{\"781\":1}}],[\"存储引擎\",{\"0\":{\"781\":1}}],[\"存储引擎层负责数据的存储和提取\",{\"1\":{\"775\":1}}],[\"存储引擎使用的是\",{\"1\":{\"649\":1}}],[\"存储地理位置\",{\"1\":{\"730\":1}}],[\"存储分析\",{\"1\":{\"728\":1}}],[\"存储方式是\",{\"1\":{\"1165\":1}}],[\"存储方式\",{\"1\":{\"726\":1}}],[\"存储结果为5734\",{\"1\":{\"720\":1}}],[\"存储频繁访问的数据以减少数据库查询压力\",{\"1\":{\"651\":1}}],[\"存储滑动窗口中的最大元素的索引\",{\"1\":{\"645\":1}}],[\"存储视频文件\",{\"1\":{\"644\":1}}],[\"存储用户信息\",{\"1\":{\"641\":1}}],[\"存储\",{\"0\":{\"1246\":1},\"1\":{\"638\":1}}],[\"存储函数调用相关的局部变量和控制信息\",{\"1\":{\"636\":1}}],[\"存储程序运行时使用的全局变量\",{\"1\":{\"636\":1}}],[\"存储程序代码\",{\"1\":{\"636\":1}}],[\"存储到\",{\"1\":{\"558\":1}}],[\"存储值\",{\"1\":{\"439\":2}}],[\"存储一个键值对\",{\"1\":{\"436\":1}}],[\"存入数据\",{\"1\":{\"436\":1}}],[\"存值时使用已存在的键会覆盖原有的值\",{\"1\":{\"261\":1}}],[\"存值\",{\"0\":{\"261\":1}}],[\"存放了数量庞大的镜像供用户下载\",{\"1\":{\"1183\":1}}],[\"存放着准备好执行的goroutine\",{\"1\":{\"654\":1}}],[\"存放代码\",{\"1\":{\"17\":1}}],[\"存放我们的代码\",{\"1\":{\"17\":1}}],[\"存放结果\",{\"1\":{\"4\":1}}],[\"第五列10000\",{\"1\":{\"475\":1}}],[\"第五行\",{\"1\":{\"212\":1}}],[\"第四列4040056736\",{\"1\":{\"475\":1}}],[\"第四行\",{\"1\":{\"212\":1}}],[\"第三方的负载均衡策略的实现需要安装第三方插件\",{\"1\":{\"1166\":1}}],[\"第三方的慢查询日志分析工具\",{\"1\":{\"813\":1}}],[\"第三方不多描述\",{\"1\":{\"1160\":1}}],[\"第三方\",{\"1\":{\"1160\":2}}],[\"第三范式\",{\"1\":{\"789\":1}}],[\"第三个参数\",{\"1\":{\"1151\":2}}],[\"第三个项目是主导地位\",{\"1\":{\"606\":1,\"678\":1}}],[\"第三个写协程执行完毕\",{\"1\":{\"432\":1}}],[\"第三列277771375\",{\"1\":{\"475\":1}}],[\"第三种是无序输出\",{\"1\":{\"470\":1}}],[\"第三行\",{\"1\":{\"212\":1}}],[\"第七行\",{\"1\":{\"212\":1}}],[\"第六行\",{\"1\":{\"212\":1}}],[\"第二步\",{\"1\":{\"1154\":1}}],[\"第二范式\",{\"1\":{\"789\":1}}],[\"第二次执行结果\",{\"1\":{\"476\":1}}],[\"第二列的4代表了代码中b\",{\"1\":{\"475\":1}}],[\"第二个参数是处理器\",{\"1\":{\"1335\":1}}],[\"第二个参数\",{\"1\":{\"1151\":2}}],[\"第二个参数false表示逆序\",{\"1\":{\"756\":1,\"757\":1,\"758\":1,\"763\":1}}],[\"第二个就是数据源\",{\"1\":{\"891\":1}}],[\"第二个事务可以查询到id为2的记录吗\",{\"1\":{\"573\":1,\"645\":1}}],[\"第二个值是是否设置deadline\",{\"1\":{\"424\":1}}],[\"第二个返回值指的是能否成功读取数据\",{\"1\":{\"420\":1}}],[\"第二个返回值一个布尔值\",{\"1\":{\"260\":1}}],[\"第二个元素值\",{\"1\":{\"420\":1}}],[\"第二个是error\",{\"1\":{\"1420\":1}}],[\"第二个是性能比较好\",{\"1\":{\"1301\":1}}],[\"第二个是依赖包的go\",{\"1\":{\"460\":1}}],[\"第二个是可选参数为管道的缓冲大小\",{\"1\":{\"414\":1}}],[\"第二个是go指针引用c变量\",{\"1\":{\"310\":1}}],[\"第二个不同的点就是多返回值\",{\"1\":{\"187\":1}}],[\"第二种是\",{\"1\":{\"979\":1}}],[\"第二种是多行输出\",{\"1\":{\"470\":1}}],[\"第二种是使用fmt包下的errorf函数\",{\"1\":{\"390\":1}}],[\"第二种用法\",{\"1\":{\"337\":1}}],[\"第二种写法利用了if语句是从上到下的判断的前提\",{\"1\":{\"229\":1}}],[\"第二种方式是使用\",{\"1\":{\"408\":1}}],[\"第二种方式每次都要指定类型\",{\"1\":{\"206\":1}}],[\"第二种方法是使用内置函数make\",{\"1\":{\"259\":1}}],[\"第二种方法在实践中更加常用\",{\"1\":{\"175\":1}}],[\"第二行输出\",{\"1\":{\"656\":1}}],[\"第二行\",{\"1\":{\"212\":1}}],[\"第一步在http中添加\",{\"1\":{\"1154\":1}}],[\"第一步应该时找开发另一个需求的人员沟通\",{\"1\":{\"36\":1}}],[\"第一范式\",{\"1\":{\"789\":1}}],[\"第一版是怎么实现的\",{\"1\":{\"592\":1,\"664\":1}}],[\"第一版方案为什么会超卖呢\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"第一版长啥样没存档啊\",{\"1\":{\"9\":1}}],[\"第一次执行结果\",{\"1\":{\"476\":1}}],[\"第一次测试失败后\",{\"1\":{\"469\":1}}],[\"第一列benchmarkconcatdirect\",{\"1\":{\"475\":1}}],[\"第一种方式是使用os\",{\"1\":{\"408\":1}}],[\"第一种方法是将原文件中的数据读取出来\",{\"1\":{\"403\":1}}],[\"第一种是\",{\"1\":{\"979\":1}}],[\"第一种是只有一行输出\",{\"1\":{\"470\":1}}],[\"第一种是使用errors包下的new函数\",{\"1\":{\"390\":1}}],[\"第一种是往类型集中并入该类型\",{\"1\":{\"340\":1}}],[\"第一种是字面量\",{\"1\":{\"259\":1}}],[\"第一种用法\",{\"1\":{\"337\":1}}],[\"第一种写法\",{\"1\":{\"229\":1}}],[\"第一行输出\",{\"1\":{\"656\":1}}],[\"第一行\",{\"1\":{\"212\":1}}],[\"第一个master节点初始化\",{\"1\":{\"1235\":1}}],[\"第一个参数是监听的地址\",{\"1\":{\"1335\":1}}],[\"第一个参数是接收者\",{\"1\":{\"370\":1}}],[\"第一个参数\",{\"1\":{\"1151\":2}}],[\"第一个公开版本0\",{\"1\":{\"1107\":1}}],[\"第一个格式用于将时间毫秒值转换为对应格式的字符串\",{\"1\":{\"721\":1}}],[\"第一个事务插入一条记录并返回了id\",{\"1\":{\"573\":1,\"645\":1}}],[\"第一个项目是实习项目吗\",{\"1\":{\"569\":1,\"641\":1}}],[\"第一个是需要用到的返回值\",{\"1\":{\"1420\":1}}],[\"第一个是一个支持printf风格但是性能相对较低的sugar\",{\"1\":{\"1301\":1}}],[\"第一个是驱动名称\",{\"1\":{\"891\":1}}],[\"第一个是压缩包的哈希值\",{\"1\":{\"460\":1}}],[\"第一个是索引\",{\"1\":{\"420\":1}}],[\"第一个是管道的类型\",{\"1\":{\"414\":1}}],[\"第一个是c指针引用go变量的例子\",{\"1\":{\"310\":1}}],[\"第一个是访问指针所指向的元素\",{\"1\":{\"275\":1}}],[\"第一个是参数类型后置\",{\"1\":{\"187\":1}}],[\"第一个返回值对应类型的值\",{\"1\":{\"260\":1}}],[\"第一个常量使用iota值的表达式\",{\"1\":{\"212\":1}}],[\"导入方式\",{\"1\":{\"1307\":1}}],[\"导入net\",{\"1\":{\"1274\":1}}],[\"导入了fmt包\",{\"1\":{\"177\":1}}],[\"导入的语法就是import加上包名\",{\"1\":{\"175\":1}}],[\"导入一个包就是导入这个包的所有公有的类型\",{\"1\":{\"175\":1}}],[\"导入\",{\"0\":{\"175\":1,\"1323\":1,\"1383\":1,\"1395\":1},\"1\":{\"1307\":1}}],[\"导致不必要的多次下载\",{\"1\":{\"1166\":1}}],[\"导致雪崩\",{\"1\":{\"1165\":1}}],[\"导致b所需要承受的压力变为m\",{\"1\":{\"1165\":1}}],[\"导致数据库压力巨大\",{\"1\":{\"1165\":1}}],[\"导致数据冲突\",{\"1\":{\"641\":1}}],[\"导致延迟比较高\",{\"1\":{\"1055\":1}}],[\"导致每个节点都有全部的数据\",{\"1\":{\"1005\":1}}],[\"导致每次都查询数据库\",{\"1\":{\"641\":1}}],[\"导致每次查询都去数据库查询\",{\"1\":{\"636\":1}}],[\"导致长时间\",{\"1\":{\"985\":1}}],[\"导致系统性能下降\",{\"1\":{\"796\":1}}],[\"导致系统无法保证库存的正确性\",{\"1\":{\"644\":1}}],[\"导致查询效率降低\",{\"1\":{\"794\":1}}],[\"导致offset跳过大量数据\",{\"1\":{\"653\":1}}],[\"导致它们看到相同的库存量\",{\"1\":{\"644\":1}}],[\"导致它被分配在堆内存上了\",{\"1\":{\"548\":1}}],[\"导致原本不存在的数据变得可见\",{\"1\":{\"641\":1}}],[\"导致原因是因为返回值包含了函数内的局部指针\",{\"1\":{\"317\":1}}],[\"导致最终库存不足\",{\"1\":{\"639\":1}}],[\"导致大量请求直接访问数据库\",{\"1\":{\"636\":1}}],[\"导致大量请求直接打到数据库上\",{\"1\":{\"636\":1}}],[\"导致接收方无法正确区分数据包的边界\",{\"1\":{\"636\":1}}],[\"导致网络拥塞或崩溃\",{\"1\":{\"636\":1}}],[\"导致其他服务无法获取锁\",{\"1\":{\"634\":1}}],[\"导致了数据不一致\",{\"1\":{\"597\":1,\"669\":1}}],[\"导致死锁\",{\"1\":{\"588\":1,\"660\":1}}],[\"导致无法处理正常的请求\",{\"1\":{\"82\":1}}],[\"导致服务器一直处理大量的半连接\",{\"1\":{\"82\":1}}],[\"私有模块的模块路径前缀的通用模式列表\",{\"1\":{\"461\":1}}],[\"私有模块\",{\"0\":{\"461\":1}}],[\"私有\",{\"1\":{\"174\":1}}],[\"私钥\",{\"1\":{\"84\":1}}],[\"私钥签名\",{\"1\":{\"83\":1}}],[\"私钥解密\",{\"1\":{\"83\":1}}],[\"名称\",{\"1\":{\"1309\":1}}],[\"名称以\",{\"1\":{\"794\":2}}],[\"名称大写字母开头\",{\"1\":{\"174\":1}}],[\"名为\",{\"1\":{\"794\":1}}],[\"名字为one的内存区域\",{\"1\":{\"1151\":1,\"1154\":1}}],[\"名字\",{\"1\":{\"513\":1}}],[\"名字小写或下划线开头\",{\"1\":{\"174\":1}}],[\"前者在语法上是一个指针\",{\"1\":{\"1443\":1}}],[\"前者是寻找前缀\",{\"1\":{\"1403\":1}}],[\"前者是根据空格来分割字符串\",{\"1\":{\"1402\":1}}],[\"前者是指定一个具体的超时时间\",{\"1\":{\"428\":1}}],[\"前提与之同名的成员变量存在\",{\"1\":{\"1417\":1}}],[\"前提是你将这些路径添加到了环境变量中\",{\"1\":{\"454\":1}}],[\"前提是设置了\",{\"1\":{\"400\":1}}],[\"前后端分离\",{\"1\":{\"656\":1}}],[\"前后端通信用的什么协议\",{\"1\":{\"565\":1,\"637\":2}}],[\"前端校验只是一种辅助\",{\"1\":{\"1288\":1}}],[\"前端播放视频\",{\"1\":{\"644\":1}}],[\"前端通过\",{\"1\":{\"637\":1}}],[\"前期用php\",{\"1\":{\"595\":1,\"667\":1}}],[\"前缀树\",{\"1\":{\"1284\":1,\"1285\":1}}],[\"前缀树的实现\",{\"1\":{\"127\":1}}],[\"前缀\",{\"0\":{\"1340\":1},\"1\":{\"1133\":1,\"1341\":1}}],[\"前缀为\",{\"1\":{\"633\":1}}],[\"前缀命名\",{\"1\":{\"483\":4,\"491\":1,\"494\":1}}],[\"前缀加上结构体名称\",{\"1\":{\"307\":1}}],[\"前面没有斜线哦\",{\"1\":{\"1123\":1}}],[\"前面2次正常\",{\"1\":{\"1103\":1}}],[\"前面的jwt也一样\",{\"1\":{\"1096\":1}}],[\"前面两个项目是自己发起的还是什么契机去做这个项目的\",{\"1\":{\"606\":1,\"678\":1}}],[\"前面提到了go\",{\"1\":{\"462\":1}}],[\"前面提到过主板变化时要体现在模块名上\",{\"1\":{\"459\":1}}],[\"前面提到过读取管道是有两个返回值的\",{\"1\":{\"420\":1}}],[\"前面提到过内存的分配是由编译器主导的\",{\"1\":{\"317\":1}}],[\"前面提到过字符串有两种字面量表达方式\",{\"1\":{\"252\":1}}],[\"前面提到过包内共享所有变量\",{\"1\":{\"174\":1}}],[\"前面讲到了基本接口就是方法集\",{\"1\":{\"290\":1}}],[\"前往update\",{\"1\":{\"711\":1}}],[\"前往\",{\"1\":{\"464\":1}}],[\"前往go\",{\"1\":{\"456\":1}}],[\"前往removing\",{\"1\":{\"450\":1}}],[\"前往add\",{\"1\":{\"450\":1}}],[\"前往pprof\",{\"1\":{\"327\":1}}],[\"前往内存分配文章了解go具体是如分配内存的\",{\"1\":{\"316\":1}}],[\"前往cgo\",{\"1\":{\"300\":1,\"312\":1}}],[\"前往标准库\",{\"1\":{\"276\":1}}],[\"前往参考手册\",{\"1\":{\"204\":1}}],[\"程序会直接崩掉报fatal\",{\"1\":{\"1447\":1}}],[\"程序会直接退出\",{\"1\":{\"635\":1}}],[\"程序会panic\",{\"1\":{\"1411\":1}}],[\"程序代码必须截断\",{\"1\":{\"1093\":1}}],[\"程序端insert语句指定具体字段名称\",{\"1\":{\"796\":1}}],[\"程序端select语句必须指定具体字段名称\",{\"1\":{\"796\":1}}],[\"程序使用的账号\",{\"1\":{\"794\":1}}],[\"程序员需要手动管理\",{\"1\":{\"636\":1}}],[\"程序从加载到运行的过程\",{\"1\":{\"618\":1,\"690\":1}}],[\"程序中的包是什么\",{\"0\":{\"525\":1}}],[\"程序将无法正常运行\",{\"1\":{\"422\":1}}],[\"程序开始时调用add初始化计数\",{\"1\":{\"422\":1}}],[\"程序需要立刻停止运行\",{\"1\":{\"398\":1}}],[\"程序需要立即停止来处理该问题\",{\"1\":{\"394\":1}}],[\"程序执行剩下的逻辑后正常退出\",{\"1\":{\"397\":1}}],[\"程序正常退出\",{\"1\":{\"397\":5}}],[\"程序就直接退出了\",{\"1\":{\"396\":1}}],[\"程序就不应该启动\",{\"1\":{\"395\":1}}],[\"程序因为panic退出之前会做一些善后工作\",{\"1\":{\"396\":1}}],[\"程序应该立即退出\",{\"1\":{\"388\":1}}],[\"程序应该在处理完问题后立即退出\",{\"1\":{\"388\":1}}],[\"程序是通过将包链接在一起来构建的\",{\"1\":{\"173\":1}}],[\"程序包sftp实现ssh文件传输协议\",{\"1\":{\"145\":1}}],[\"程序包ftp实现rfc\",{\"1\":{\"145\":1}}],[\"程序包ethernet实施ieee\",{\"1\":{\"145\":1}}],[\"调试\",{\"1\":{\"1233\":1,\"1234\":1,\"1235\":1}}],[\"调节并发数量\",{\"1\":{\"542\":1}}],[\"调度模型的工作流程\",{\"1\":{\"654\":1}}],[\"调度会受到影响\",{\"1\":{\"651\":1}}],[\"调度和上下文切换比线程轻量\",{\"1\":{\"651\":1}}],[\"调度过程\",{\"1\":{\"651\":1}}],[\"调度由程序自己管理\",{\"1\":{\"649\":1}}],[\"调度由程序员控制\",{\"1\":{\"645\":2}}],[\"调度切换的开销较大\",{\"1\":{\"649\":1}}],[\"调度依赖操作系统\",{\"1\":{\"645\":1}}],[\"调度的最小单位\",{\"1\":{\"645\":1}}],[\"调度的目标是提高性能\",{\"1\":{\"635\":1}}],[\"调度流程\",{\"1\":{\"542\":1}}],[\"调度\",{\"1\":{\"540\":1}}],[\"调用过后必须将其手动关闭\",{\"1\":{\"1330\":1}}],[\"调用mongodb组件库中insertone方法来完成数据保存\",{\"1\":{\"881\":2}}],[\"调用存储过程插入数据\",{\"1\":{\"820\":1}}],[\"调用引擎接口取\",{\"1\":{\"780\":1}}],[\"调用指针接收者方法\",{\"1\":{\"515\":1}}],[\"调用后需要一些工作\",{\"1\":{\"500\":1}}],[\"调用者追踪\",{\"1\":{\"1302\":1}}],[\"调用者或许也不知道到底该由谁来关闭管道\",{\"1\":{\"418\":1}}],[\"调用者完全不知道dangerop\",{\"1\":{\"397\":1}}],[\"调用者调用的函数返回了一个错误\",{\"1\":{\"392\":1}}],[\"调用者可以直接访问该类型的字段和方法\",{\"1\":{\"270\":1}}],[\"调用方法与调用函数的过程相似\",{\"1\":{\"371\":1}}],[\"调用方法\",{\"0\":{\"371\":1},\"1\":{\"371\":1,\"645\":1}}],[\"调用\",{\"0\":{\"365\":1},\"1\":{\"645\":2,\"780\":1}}],[\"调用了fmt包下的println函数进行输出\",{\"1\":{\"172\":1}}],[\"调整缓存大小\",{\"1\":{\"799\":1}}],[\"调整隔离级别为读提交的原因\",{\"1\":{\"656\":1}}],[\"调整图像大小\",{\"1\":{\"139\":1}}],[\"调整大小\",{\"1\":{\"139\":1}}],[\"入队\",{\"1\":{\"516\":1}}],[\"入门的最佳选择\",{\"1\":{\"334\":1}}],[\"入口函数是main函数\",{\"1\":{\"172\":1}}],[\"入口文件都必须声明为main包\",{\"1\":{\"172\":1}}],[\"入职第一天\",{\"1\":{\"58\":1}}],[\"让我们以分层rbac模型的一个简单例子来说明\",{\"1\":{\"1264\":1}}],[\"让我们考虑一个简单的rbac模型\",{\"1\":{\"1260\":1}}],[\"让我们考虑一个简单的acl模型示例\",{\"1\":{\"1256\":1}}],[\"让我们看另一个例子\",{\"1\":{\"1254\":1}}],[\"让我们从一个最简单的例子开始\",{\"1\":{\"172\":1}}],[\"让开发者产生怪异的理解\",{\"1\":{\"1087\":1}}],[\"让sentinel\",{\"1\":{\"1000\":1}}],[\"让服务器自动执行\",{\"1\":{\"985\":1}}],[\"让列表只保留指定区间内的元素\",{\"1\":{\"971\":1}}],[\"让瘦高的树尽量变成矮胖的树\",{\"1\":{\"802\":1}}],[\"让您飞快完成搜索\",{\"1\":{\"700\":1}}],[\"让请求只有在缓存失效时才去数据库查询\",{\"1\":{\"639\":1}}],[\"让他的上限多一些\",{\"1\":{\"573\":1,\"645\":1}}],[\"让偶协程执行\",{\"1\":{\"545\":1}}],[\"让编译器自己判断\",{\"1\":{\"516\":1}}],[\"让编译器自行推断\",{\"1\":{\"337\":1}}],[\"让用户可以在浏览器中在线编辑和运行每个示例函数\",{\"1\":{\"502\":1}}],[\"让其它开发者看一眼就知道怎么使用\",{\"1\":{\"448\":1}}],[\"让go调用c\",{\"1\":{\"296\":1}}],[\"让结构体中的字段按照合理的顺序分布\",{\"1\":{\"273\":1}}],[\"让它写单元测试和规范的注释\",{\"1\":{\"79\":1}}],[\"总而言之\",{\"1\":{\"1341\":1}}],[\"总的来说\",{\"1\":{\"1071\":1}}],[\"总的来说recover函数有几个注意点\",{\"1\":{\"397\":1}}],[\"总之\",{\"1\":{\"1018\":1}}],[\"总共有\",{\"1\":{\"1006\":1}}],[\"总共返回的记录\",{\"1\":{\"813\":1}}],[\"总共六个提交并不多\",{\"1\":{\"449\":1}}],[\"总共只有四个方法pop\",{\"1\":{\"343\":1}}],[\"总体来说\",{\"1\":{\"170\":1}}],[\"总结观察\",{\"1\":{\"1195\":1}}],[\"总结就是\",{\"1\":{\"285\":1}}],[\"总结\",{\"0\":{\"799\":1,\"1012\":1,\"1127\":1,\"1169\":1},\"1\":{\"12\":1,\"513\":1,\"514\":2,\"515\":1,\"516\":1,\"649\":1,\"654\":1,\"821\":2}}],[\"系统配置\",{\"1\":{\"1235\":1}}],[\"系统瞬间的qps可能会超过rate设置的阈值\",{\"1\":{\"1156\":1}}],[\"系统分为消息队列\",{\"1\":{\"1052\":1}}],[\"系统比如scribe或者flume来说\",{\"1\":{\"1019\":1}}],[\"系统中使用\",{\"1\":{\"1001\":1}}],[\"系统才会真正复制一份专用副本给该调用者\",{\"1\":{\"988\":1}}],[\"系统的\",{\"1\":{\"987\":1}}],[\"系统上操作\",{\"1\":{\"986\":1}}],[\"系统变量\",{\"1\":{\"850\":1}}],[\"系统表\",{\"1\":{\"814\":1}}],[\"系统性能出现瓶颈的时候\",{\"1\":{\"813\":1}}],[\"系统架构的问题\",{\"1\":{\"799\":1}}],[\"系统日志和监控数据在过程中也会被记录和分析\",{\"1\":{\"655\":1}}],[\"系统进行视频格式转换\",{\"1\":{\"644\":1}}],[\"系统处理的总数据量\",{\"1\":{\"644\":1}}],[\"系统资源使用情况\",{\"1\":{\"644\":1}}],[\"系统每秒能处理多少个事务\",{\"1\":{\"644\":1}}],[\"系统每秒钟能够处理多少请求\",{\"1\":{\"644\":1}}],[\"系统会基于商品id生成特定的\",{\"1\":{\"644\":1}}],[\"系统会生成一个\",{\"1\":{\"641\":1}}],[\"系统可以通过\",{\"1\":{\"644\":1}}],[\"系统验证信息的合法性\",{\"1\":{\"641\":1}}],[\"系统验证密码是否正确\",{\"1\":{\"641\":1}}],[\"系统仍然允许用户下单\",{\"1\":{\"639\":1}}],[\"系统设计能力\",{\"1\":{\"657\":1}}],[\"系统设计\",{\"1\":{\"639\":1}}],[\"系统故障问题\",{\"1\":{\"610\":1,\"682\":1}}],[\"系统qps\",{\"1\":{\"610\":1,\"682\":1}}],[\"系统重构\",{\"1\":{\"576\":1,\"648\":1}}],[\"系统创建协程需要时间\",{\"1\":{\"412\":1}}],[\"系统工具等\",{\"1\":{\"165\":1}}],[\"系统编程\",{\"0\":{\"161\":1}}],[\"特别关注微服务架构和容器化部署\",{\"1\":{\"656\":1}}],[\"特别是不支持按\",{\"1\":{\"1057\":1}}],[\"特别是在处理大量数据时\",{\"1\":{\"906\":1}}],[\"特别是在云原生架构\",{\"1\":{\"655\":1}}],[\"特别是在服务发现\",{\"1\":{\"655\":1}}],[\"特别是在数据量大的情况下\",{\"1\":{\"653\":1}}],[\"特别是在高并发情况下\",{\"1\":{\"638\":1}}],[\"特别是在对象频繁创建和删除的场景下\",{\"1\":{\"549\":1}}],[\"特别是对于范围查询和排序\",{\"1\":{\"635\":1}}],[\"特别适用于需要取消操作或传递元数据的场景\",{\"1\":{\"546\":1}}],[\"特别适用于并发编程\",{\"1\":{\"148\":1}}],[\"特别适合用来表达或编辑数据结构\",{\"1\":{\"1313\":1}}],[\"特别适合用于\",{\"1\":{\"514\":1}}],[\"特别适合大量\",{\"1\":{\"649\":1}}],[\"特别适合构建用于云计算的工具和服务\",{\"1\":{\"160\":1}}],[\"特殊的共享内存地址\",{\"1\":{\"534\":1}}],[\"特点\",{\"0\":{\"1239\":1},\"1\":{\"514\":1,\"515\":1,\"544\":1,\"545\":1,\"546\":1,\"803\":1,\"805\":1,\"904\":1,\"906\":1,\"956\":1,\"1006\":1}}],[\"特性和\",{\"1\":{\"634\":1}}],[\"特性及注意\",{\"1\":{\"557\":1}}],[\"特性也并不多\",{\"1\":{\"329\":1}}],[\"特性\",{\"1\":{\"165\":1,\"529\":1,\"535\":1}}],[\"缺省配置就是轮询策略\",{\"1\":{\"1161\":1}}],[\"缺陷\",{\"1\":{\"990\":1}}],[\"缺少格式化动词\",{\"1\":{\"221\":1}}],[\"缺少泛型\",{\"1\":{\"165\":1}}],[\"缺乏对图形用户界面\",{\"1\":{\"165\":1}}],[\"缺点\",{\"0\":{\"165\":1},\"1\":{\"11\":1,\"635\":1,\"802\":1,\"803\":1,\"1053\":1,\"1054\":1,\"1055\":1,\"1056\":1}}],[\"能满足绝大多数场景的性能要求\",{\"1\":{\"1052\":1}}],[\"能被消费者组中的⼀个实例消费\",{\"1\":{\"1027\":1}}],[\"能提供易于使用的restfui\",{\"1\":{\"1073\":1}}],[\"能提供更高的吞吐量和容错性\",{\"1\":{\"1018\":1}}],[\"能提供很好的性能和可靠性\",{\"1\":{\"637\":1}}],[\"能问题\",{\"1\":{\"799\":1}}],[\"能力\",{\"1\":{\"645\":1,\"1057\":1}}],[\"能说一说你们怎么使用\",{\"1\":{\"637\":1}}],[\"能说一说你们怎么使用devops的吗\",{\"1\":{\"565\":1,\"637\":1}}],[\"能否通过github\",{\"1\":{\"1072\":1}}],[\"能否通过restful\",{\"1\":{\"1072\":1}}],[\"能否私有化部署\",{\"1\":{\"1072\":1}}],[\"能否实现map\",{\"1\":{\"621\":1,\"693\":1}}],[\"能否命中索引\",{\"1\":{\"585\":1,\"657\":1}}],[\"能简化开发流程\",{\"1\":{\"164\":1}}],[\"能够熟练运用标准库对日常开发将会有非常大的帮助\",{\"1\":{\"1308\":1}}],[\"能够提供更好的依赖管理\",{\"1\":{\"1230\":1}}],[\"能够提供更高的持久化保证\",{\"1\":{\"651\":1}}],[\"能够独立运行\",{\"1\":{\"996\":1}}],[\"能够支撑大量的数据吞吐\",{\"1\":{\"960\":1}}],[\"能够解决不断涌现出的各种用例\",{\"1\":{\"700\":1}}],[\"能够根据业务需求进行扩展\",{\"1\":{\"655\":1}}],[\"能够避免线程池中大量空闲线程占用资源\",{\"1\":{\"645\":1}}],[\"能够阅读\",{\"1\":{\"323\":1}}],[\"能够在不同操作系统上编译和运行\",{\"1\":{\"164\":1}}],[\"能够帮助开发者更快速地迭代和开发\",{\"1\":{\"164\":1}}],[\"能够帮助开发者快速构建\",{\"1\":{\"158\":1}}],[\"能够快速处理多个请求\",{\"1\":{\"159\":1}}],[\"能够隐藏图像中的任何文件\",{\"1\":{\"139\":1}}],[\"能够从音频流生成波形图像\",{\"1\":{\"126\":1}}],[\"能够记录历史版本\",{\"1\":{\"9\":1}}],[\"具备足够好的性能\",{\"1\":{\"1052\":1}}],[\"具备一定的系统编程能力\",{\"1\":{\"161\":1}}],[\"具名管道\",{\"1\":{\"400\":1}}],[\"具体代码省略\",{\"1\":{\"1303\":1}}],[\"具体信息\",{\"1\":{\"1215\":1}}],[\"具体很细在有时间慢慢补充\",{\"1\":{\"1212\":1}}],[\"具体做法可以在服务器ip或主机名的后⾯增加其他字符来实现\",{\"1\":{\"1165\":1}}],[\"具体处理流程是\",{\"1\":{\"1155\":1}}],[\"具体步骤如下\",{\"1\":{\"1174\":1}}],[\"具体步骤\",{\"1\":{\"1010\":1}}],[\"具体项目中选择哪个\",{\"1\":{\"1005\":1}}],[\"具体作用\",{\"1\":{\"814\":1}}],[\"具体限制取决于mysql版本和使用的存储引擎\",{\"1\":{\"799\":1}}],[\"具体需求可根据业务情况而定\",{\"1\":{\"639\":1}}],[\"具体数量视业务需求而定\",{\"1\":{\"639\":1}}],[\"具体测试的接口可能包括\",{\"1\":{\"639\":1}}],[\"具体取决于服务器的性能和配置\",{\"1\":{\"639\":1}}],[\"具体问题可以根据需要详细提问\",{\"1\":{\"639\":1}}],[\"具体可以进一步确认\",{\"1\":{\"636\":1}}],[\"具体类型替代接口\",{\"1\":{\"633\":1}}],[\"具体体现在哪些方面\",{\"1\":{\"618\":1,\"690\":1}}],[\"具体讲一下使用逻辑过期方案解决redis的缓存击穿问题\",{\"1\":{\"597\":1,\"669\":1}}],[\"具体实现方式可以是\",{\"1\":{\"638\":1}}],[\"具体实现\",{\"1\":{\"579\":1,\"651\":2}}],[\"具体压测的数据\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"具体是redis\",{\"1\":{\"576\":1,\"648\":1}}],[\"具体是怎么优化的呢\",{\"1\":{\"567\":1,\"639\":2}}],[\"具体是什么类型交给编译器自行推断\",{\"1\":{\"206\":1}}],[\"具体看原理部分\",{\"1\":{\"512\":1}}],[\"具体原理看下面原理部分\",{\"1\":{\"512\":1}}],[\"具体行为与gonoproxy和gonosumdb一致\",{\"1\":{\"461\":1}}],[\"具体的参数与上面对于的数据转换函数一致\",{\"1\":{\"1393\":1}}],[\"具体的sql知识这里不会做过多的赘述\",{\"1\":{\"889\":1}}],[\"具体的限制取决于所使用的mysql版本和表的存储引擎\",{\"1\":{\"798\":1}}],[\"具体的实现是由plan9汇编编写\",{\"1\":{\"438\":1}}],[\"具体的分析工作要留到后面再进行\",{\"1\":{\"324\":1}}],[\"具有快速灵活\",{\"1\":{\"1273\":1}}],[\"具有多租户\",{\"1\":{\"1056\":1}}],[\"具有多个存储\",{\"1\":{\"127\":1}}],[\"具有强类型\",{\"1\":{\"637\":1}}],[\"具有强大的\",{\"1\":{\"158\":1}}],[\"具有高扩展性和持久性\",{\"1\":{\"634\":1}}],[\"具有高级市场分析和交易策略的技术分析库\",{\"1\":{\"133\":1}}],[\"具有返回值的内置函数不允许跟随在go关键字后面\",{\"1\":{\"412\":1}}],[\"具有更简洁的语法\",{\"1\":{\"170\":1}}],[\"具有更好的性能\",{\"1\":{\"169\":1}}],[\"具有自动垃圾回收机制\",{\"1\":{\"168\":1}}],[\"具有同步全双工通信\",{\"1\":{\"145\":1}}],[\"具有灵活的标记器和go的存储后端\",{\"1\":{\"142\":1}}],[\"具有jsonpath支持的golang的抽象json\",{\"1\":{\"141\":1}}],[\"具有可变存储后端的图像代理和侧重于速度和弹性的图像处理引擎\",{\"1\":{\"139\":1}}],[\"具有可自定义的编辑费用和通用前缀的类似于winkler的奖金\",{\"1\":{\"127\":1}}],[\"具有简单双向javascript绑定的跨平台webview窗口\",{\"1\":{\"138\":1}}],[\"具有简单api的文件系统事件通知库\",{\"1\":{\"132\":1}}],[\"具有上下文和支持的例程控制\",{\"1\":{\"137\":1}}],[\"具有空间索引和实时地理围栏的地理位置数据库\",{\"1\":{\"135\":1}}],[\"具有空间实体框架和热插拔功能\",{\"1\":{\"134\":1}}],[\"具有群集支持和通过c\",{\"1\":{\"134\":1}}],[\"具有堆栈跟踪\",{\"1\":{\"131\":1}}],[\"具有渐进式输入功能的快速\",{\"1\":{\"130\":1}}],[\"具有中间件的超高性能api网关框架\",{\"1\":{\"128\":1}}],[\"具有luajit的高性能结合go的高并发\",{\"1\":{\"128\":1}}],[\"具有受限负载的一致哈希\",{\"1\":{\"128\":1}}],[\"具有过期的键\",{\"1\":{\"127\":1}}],[\"具有扇入和扇出的管线的实现\",{\"1\":{\"127\":1}}],[\"具有最小完美散列的ma\",{\"1\":{\"127\":1}}],[\"具有稀疏\",{\"1\":{\"127\":1}}],[\"具有有效点定位和邻居发现功能的区域四叉树\",{\"1\":{\"127\":1}}],[\"具有额外的位旋转功能的golang设置数据结构\",{\"1\":{\"127\":1}}],[\"许多并发安全的数据结构都采用了cas来进行实现\",{\"1\":{\"440\":1}}],[\"许多go配套工具链将无法使用\",{\"1\":{\"314\":1}}],[\"许多流行的云平台工具\",{\"1\":{\"160\":1}}],[\"许多知名的开源项目和工具都采用了\",{\"1\":{\"166\":1}}],[\"许多知名的\",{\"1\":{\"158\":1}}],[\"宠儿\",{\"1\":{\"160\":1}}],[\"都为\",{\"1\":{\"1307\":1}}],[\"都为nil时\",{\"1\":{\"379\":2}}],[\"都在order\",{\"1\":{\"1198\":1}}],[\"都在同一台机器上的话\",{\"1\":{\"1063\":1}}],[\"都出自它\",{\"1\":{\"1067\":1}}],[\"都不会发生变化\",{\"1\":{\"1197\":1}}],[\"都不存在\",{\"1\":{\"970\":1}}],[\"都不为nil时\",{\"1\":{\"379\":1}}],[\"都用于为\",{\"1\":{\"967\":1}}],[\"都特别适合做索引\",{\"1\":{\"815\":1}}],[\"都定义了json结构\",{\"1\":{\"746\":1}}],[\"都请求数据库不就击穿了吗\",{\"1\":{\"567\":1,\"639\":2}}],[\"都走缓存吗\",{\"1\":{\"563\":1,\"635\":2}}],[\"都未发生变化\",{\"1\":{\"486\":1}}],[\"都会造成永久阻塞\",{\"1\":{\"535\":1}}],[\"都会有如下的文件\",{\"1\":{\"460\":1}}],[\"都会为其分配一块内存以存储对应类型的值\",{\"1\":{\"204\":1}}],[\"都先上锁\",{\"1\":{\"430\":1}}],[\"都无法当作类型实参\",{\"1\":{\"341\":1}}],[\"都无法通过编译\",{\"1\":{\"341\":1}}],[\"都无法并入类型集中\",{\"1\":{\"341\":1}}],[\"都只不过是将两个数相加而已\",{\"1\":{\"337\":1}}],[\"都推荐使用指针接收者\",{\"1\":{\"287\":1}}],[\"都可以创建多个topic\",{\"1\":{\"1020\":1}}],[\"都可以是分布式的\",{\"1\":{\"1018\":1}}],[\"都可以修改内部的值\",{\"1\":{\"287\":1}}],[\"都可以访问\",{\"1\":{\"42\":1}}],[\"都是使用的字符串字面量来作为模板\",{\"1\":{\"1428\":1}}],[\"都是对已有的http包做的封装与修改\",{\"1\":{\"1329\":1}}],[\"都是nginx根据不同的算法实现的\",{\"1\":{\"1169\":1}}],[\"都是no\",{\"1\":{\"822\":1}}],[\"都是在做折中\",{\"1\":{\"1068\":1}}],[\"都是yes\",{\"1\":{\"822\":1}}],[\"都是通过\",{\"1\":{\"822\":1}}],[\"都是通过自定义类型\",{\"1\":{\"213\":1}}],[\"都是基于elasticsearch\",{\"1\":{\"716\":1}}],[\"都是指向头部元素的指针\",{\"1\":{\"303\":1}}],[\"都是用来指定请求资源的真实路径\",{\"1\":{\"1139\":1}}],[\"都是用\",{\"1\":{\"160\":1}}],[\"都建立在\",{\"1\":{\"158\":1}}],[\"尤其会发生这样的问题\",{\"1\":{\"429\":1}}],[\"尤其是where\",{\"1\":{\"651\":1}}],[\"尤其是解决高并发的业务场景\",{\"1\":{\"644\":1}}],[\"尤其是当抢单数量较大时\",{\"1\":{\"638\":1}}],[\"尤其是将其作为函数参数传递时\",{\"1\":{\"422\":1}}],[\"尤其是在分布式缓存系统中\",{\"1\":{\"1165\":1}}],[\"尤其是在云计算\",{\"1\":{\"655\":1}}],[\"尤其是在并发量特别大和实例化对象成本特别高的时候更能体现出优势\",{\"1\":{\"435\":1}}],[\"尤其是在扩容后\",{\"1\":{\"287\":1}}],[\"尤其是在延迟调用中将函数返回值作为参数的情况尤其需要注意\",{\"1\":{\"285\":1}}],[\"尤其是在业务中一些结构体的字段数可能多大几十个或者数百个\",{\"1\":{\"273\":1}}],[\"尤其是在需要处理大量并发请求的场景中表现出色\",{\"1\":{\"158\":1}}],[\"尤其在处理高并发任务时表现优异\",{\"1\":{\"148\":1}}],[\"测试互相ping\",{\"1\":{\"1197\":1}}],[\"测试容器之间的访问\",{\"1\":{\"1195\":1}}],[\"测试是否安装成功\",{\"1\":{\"1184\":1}}],[\"测试日志切割后的结果\",{\"1\":{\"1174\":1}}],[\"测试结果\",{\"0\":{\"1040\":1}}],[\"测试结果如下\",{\"1\":{\"314\":1}}],[\"测试环境\",{\"0\":{\"1039\":1}}],[\"测试环境可以不用密码\",{\"1\":{\"963\":1}}],[\"测试kafka基本命令操作\",{\"0\":{\"1034\":1}}],[\"测试主从复制方式就十分多了\",{\"1\":{\"824\":1}}],[\"测试主从复制\",{\"0\":{\"824\":1}}],[\"测试一下分页数据的相应时间\",{\"1\":{\"820\":1}}],[\"测试脚本\",{\"1\":{\"810\":1}}],[\"测试和部署\",{\"1\":{\"637\":1}}],[\"测试目标目录\",{\"1\":{\"630\":1}}],[\"测试的\",{\"1\":{\"505\":1}}],[\"测试的输入数据都是手动声明的一个个变量\",{\"1\":{\"474\":1}}],[\"测试真正需要关心的数据\",{\"1\":{\"504\":1}}],[\"测试不应该在失败时终止\",{\"1\":{\"504\":1}}],[\"测试代码\",{\"1\":{\"745\":1,\"746\":1,\"754\":1}}],[\"测试代码中不要调用\",{\"1\":{\"504\":1}}],[\"测试代码也需要稍作修改\",{\"1\":{\"477\":1}}],[\"测试用例\",{\"1\":{\"1039\":1}}],[\"测试用例修复后\",{\"1\":{\"504\":1}}],[\"测试用例失败时\",{\"1\":{\"504\":1}}],[\"测试工具会执行示例函数\",{\"1\":{\"502\":1}}],[\"测试总用时\",{\"1\":{\"498\":1}}],[\"测试失败时终止\",{\"0\":{\"495\":1}}],[\"测试通过\",{\"0\":{\"493\":1}}],[\"测试未通过\",{\"0\":{\"491\":1},\"1\":{\"491\":1,\"505\":1}}],[\"测试运行超时时间\",{\"1\":{\"488\":1}}],[\"测试旨在发现\",{\"1\":{\"480\":1}}],[\"测试有着非常多的标志参数\",{\"1\":{\"469\":1}}],[\"测试函数的命名的风格也不同\",{\"1\":{\"467\":1}}],[\"测试函数\",{\"1\":{\"467\":1}}],[\"测试文件通常以bench\",{\"1\":{\"475\":1}}],[\"测试文件通常以\",{\"1\":{\"467\":1}}],[\"测试文件\",{\"1\":{\"467\":1}}],[\"测试文件最好单独放在一个包中\",{\"1\":{\"467\":1}}],[\"测试包\",{\"1\":{\"467\":1,\"1308\":1}}],[\"测试\",{\"0\":{\"447\":1,\"466\":1,\"1082\":1},\"1\":{\"155\":1,\"748\":1,\"751\":1,\"994\":1,\"1099\":1,\"1181\":1}}],[\"测试人员测试通过\",{\"1\":{\"58\":1}}],[\"测试人员测试bug\",{\"1\":{\"58\":1}}],[\"测试人员会在test分支中测试\",{\"1\":{\"58\":1}}],[\"类加载的过程一般会做哪些事情\",{\"1\":{\"592\":1,\"664\":1}}],[\"类如果重复加载会有什么问题呢\",{\"1\":{\"592\":1,\"664\":1}}],[\"类型在集群节点上分配一个端口\",{\"1\":{\"655\":1}}],[\"类型在后面的原则\",{\"1\":{\"382\":1}}],[\"类型适用于云环境\",{\"1\":{\"655\":1}}],[\"类型为订阅的sub1可以包含多个类型为资源组的资源组\",{\"1\":{\"1263\":1}}],[\"类型为int或bigint\",{\"1\":{\"794\":1}}],[\"类型为\",{\"1\":{\"655\":1}}],[\"类型来缓存数据\",{\"1\":{\"641\":1}}],[\"类型可以实现接口\",{\"1\":{\"635\":1}}],[\"类型若是被拆开就需要多次读写\",{\"1\":{\"554\":1}}],[\"类型a|类型b\",{\"1\":{\"516\":1}}],[\"类型实现了\",{\"1\":{\"515\":1}}],[\"类型实参\",{\"1\":{\"337\":1}}],[\"类型支持\",{\"0\":{\"478\":1}}],[\"类型位的掩码\",{\"1\":{\"400\":1}}],[\"类型判断\",{\"0\":{\"387\":1}}],[\"类型断言的性能较差\",{\"1\":{\"633\":1}}],[\"类型断言语句有两个返回值\",{\"1\":{\"386\":1}}],[\"类型断言通常用于判断某一接口类型的变量是否属于某一个类型\",{\"1\":{\"386\":1}}],[\"类型断言\",{\"0\":{\"386\":1},\"1\":{\"393\":1}}],[\"类型别名对于一些特别复杂的类型有很大的用处\",{\"1\":{\"384\":1}}],[\"类型别名仅仅只是一个别名\",{\"1\":{\"384\":1}}],[\"类型别名与类型声明则不同\",{\"1\":{\"384\":1}}],[\"类型别名\",{\"0\":{\"384\":1}}],[\"类型声明\",{\"0\":{\"383\":1}}],[\"类型后置在可读性上要好得多\",{\"1\":{\"382\":1}}],[\"类型后置\",{\"0\":{\"382\":1}}],[\"类型变量\",{\"1\":{\"349\":1}}],[\"类型变量转换成反射对象\",{\"1\":{\"349\":1}}],[\"类型哈希\",{\"1\":{\"347\":1}}],[\"类型并集中不能有交集\",{\"1\":{\"341\":1}}],[\"类型集不能直接或间接的并入自身\",{\"1\":{\"341\":1,\"516\":1}}],[\"类型集中的交集问题\",{\"1\":{\"341\":1,\"516\":1}}],[\"类型集无法当作类型实参使用\",{\"1\":{\"341\":1,\"516\":1}}],[\"类型集注意点\",{\"0\":{\"341\":1}}],[\"类型集主要用于类型约束\",{\"1\":{\"340\":1}}],[\"类型集\",{\"0\":{\"340\":1}}],[\"类型集就是一组类型的集合\",{\"1\":{\"289\":1}}],[\"类型约束为t\",{\"1\":{\"338\":1}}],[\"类型约束为int\",{\"1\":{\"338\":1}}],[\"类型约束\",{\"1\":{\"337\":1,\"516\":1}}],[\"类型形参t\",{\"1\":{\"516\":1}}],[\"类型形参\",{\"1\":{\"337\":1}}],[\"类型转换的结果也不总是正确的\",{\"1\":{\"385\":1}}],[\"类型转换的另一个前提是\",{\"1\":{\"385\":1}}],[\"类型转换适用的前提是知晓被转换变量的类型和要转换成的目标类型\",{\"1\":{\"385\":1}}],[\"类型转换\",{\"0\":{\"301\":1,\"385\":1},\"1\":{\"520\":1,\"641\":1}}],[\"类型number的底层类型是int\",{\"1\":{\"293\":1}}],[\"类型的变量\",{\"1\":{\"293\":1}}],[\"类型不需要显式声明实现了某个接口\",{\"1\":{\"637\":1}}],[\"类型不匹配\",{\"1\":{\"221\":1}}],[\"类型不安全\",{\"1\":{\"213\":1}}],[\"类型必须保持一致\",{\"1\":{\"206\":1}}],[\"类型名\",{\"1\":{\"205\":1,\"367\":1}}],[\"类型和描述\",{\"1\":{\"197\":1,\"198\":1}}],[\"类型\",{\"0\":{\"350\":1,\"380\":1,\"438\":1,\"1324\":1},\"1\":{\"195\":1,\"196\":1,\"198\":1,\"199\":1,\"200\":1,\"201\":1,\"202\":1,\"243\":1,\"294\":1,\"347\":1,\"386\":1,\"515\":1,\"554\":1,\"634\":1,\"635\":1,\"645\":1,\"656\":1,\"720\":1,\"724\":1,\"794\":1,\"1302\":1}}],[\"类型是静态检查的\",{\"1\":{\"152\":1}}],[\"类似add\",{\"1\":{\"1193\":1}}],[\"类似sql中的\",{\"1\":{\"765\":1}}],[\"类似sql的and\",{\"1\":{\"763\":1}}],[\"类似数组或切片\",{\"1\":{\"651\":1}}],[\"类似数组切片的拷贝方式\",{\"1\":{\"256\":1}}],[\"类似华子实习笔试第一题\",{\"1\":{\"593\":1,\"665\":1}}],[\"类似fmt\",{\"1\":{\"491\":1,\"494\":1}}],[\"类似的\",{\"1\":{\"421\":1}}],[\"类似的问题我曾经也碰到过很多\",{\"1\":{\"9\":1}}],[\"类似于keys\",{\"1\":{\"968\":1}}],[\"类似于\",{\"1\":{\"846\":1}}],[\"类似于关系型数据库中的表\",{\"1\":{\"841\":1,\"887\":1}}],[\"类似于关系型数据库中的一行记录\",{\"1\":{\"841\":1,\"887\":1}}],[\"类似于管道\",{\"1\":{\"535\":1}}],[\"类似于os\",{\"1\":{\"132\":1}}],[\"类似于count\",{\"1\":{\"127\":1}}],[\"类似\",{\"1\":{\"43\":1,\"967\":1}}],[\"运维\",{\"2\":{\"1178\":1,\"1209\":1,\"1211\":1,\"1216\":1,\"1236\":1}}],[\"运维成本\",{\"1\":{\"117\":1}}],[\"运作的server\",{\"1\":{\"1163\":1}}],[\"运营不太友好\",{\"1\":{\"1057\":1}}],[\"运动\",{\"1\":{\"985\":1}}],[\"运行外部访问\",{\"1\":{\"1234\":1}}],[\"运行是容器\",{\"1\":{\"1183\":1}}],[\"运行如下\",{\"1\":{\"964\":1}}],[\"运行如下命令\",{\"1\":{\"463\":1}}],[\"运行时操作包\",{\"1\":{\"1308\":1}}],[\"运行时\",{\"1\":{\"1191\":1}}],[\"运行时调度\",{\"1\":{\"639\":2}}],[\"运行时的一个调度单位\",{\"1\":{\"541\":1}}],[\"运行时管理的轻量级线程\",{\"1\":{\"151\":1}}],[\"运行\",{\"1\":{\"503\":1,\"738\":1,\"825\":1,\"1188\":1}}],[\"运行的可执行测试\",{\"1\":{\"502\":1}}],[\"运行的输入总数\",{\"1\":{\"477\":1}}],[\"运行开始前\",{\"1\":{\"499\":1}}],[\"运行基准测试\",{\"1\":{\"498\":1}}],[\"运行特定的测试函数\",{\"1\":{\"489\":1}}],[\"运行测试\",{\"1\":{\"502\":1}}],[\"运行测试的次数\",{\"1\":{\"486\":1}}],[\"运行测试n次\",{\"1\":{\"469\":1}}],[\"运行子目录下的测试用例\",{\"1\":{\"482\":1}}],[\"运行当前目录以及所有子目录下的测试用例\",{\"1\":{\"482\":1}}],[\"运行当前目录下的测试用例\",{\"1\":{\"482\":1}}],[\"运行当前目录对应的包下面某个测试用例\",{\"1\":{\"482\":1}}],[\"运行命令行程序\",{\"1\":{\"447\":1}}],[\"运算符查看更多细节\",{\"1\":{\"179\":1}}],[\"运算符\",{\"0\":{\"179\":1}}],[\"配合\",{\"1\":{\"151\":1,\"487\":1}}],[\"配置http客户端数据传输相关的配置项\",{\"1\":{\"1332\":1}}],[\"配置模型和规则来满足大部分的权限控制需求\",{\"1\":{\"1239\":1}}],[\"配置docker源并安装docker\",{\"1\":{\"1235\":1}}],[\"配置主机名和hosts\",{\"1\":{\"1235\":1}}],[\"配置主从还是比较简单的\",{\"1\":{\"993\":1}}],[\"配置内核参数\",{\"1\":{\"1235\":1}}],[\"配置一个\",{\"1\":{\"1235\":1}}],[\"配置一个外部访问入口\",{\"1\":{\"1235\":1}}],[\"配置一致性hash策略\",{\"1\":{\"1165\":1}}],[\"配置阿里云镜像加速\",{\"1\":{\"1221\":1}}],[\"配置镜像源为1panel的\",{\"1\":{\"1221\":1}}],[\"配置软件源\",{\"0\":{\"1220\":1}}],[\"配置要求\",{\"1\":{\"1217\":1}}],[\"配置配置信息\",{\"1\":{\"1192\":1}}],[\"配置好的参数和项目一起打包到一个容器\",{\"1\":{\"1180\":1}}],[\"配置好后\",{\"1\":{\"990\":1}}],[\"配置环境啥的\",{\"1\":{\"1180\":1}}],[\"配置如下\",{\"1\":{\"1164\":1,\"1167\":1}}],[\"配置写入日志\",{\"1\":{\"1151\":1}}],[\"配置网络传输的模块\",{\"1\":{\"1131\":1}}],[\"配置错误日志的目录\",{\"1\":{\"1131\":1}}],[\"配置日志格式\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"配置系统的线程模型和工作线程的线程数量\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"配置的好处\",{\"1\":{\"1122\":1}}],[\"配置的是consul的dns端⼝\",{\"1\":{\"1078\":1}}],[\"配置nginx的环境变量\",{\"0\":{\"1122\":1}}],[\"配置nginx的安装路径\",{\"0\":{\"1116\":1}}],[\"配置bot\",{\"0\":{\"1096\":1}}],[\"配置全局的jwt\",{\"0\":{\"1091\":1}}],[\"配置跨域\",{\"1\":{\"1087\":1}}],[\"配置商品服务的路径\",{\"0\":{\"1087\":1}}],[\"配置服务services\",{\"0\":{\"1084\":1}}],[\"配置信息如下\",{\"1\":{\"1079\":1}}],[\"配置k8s源\",{\"1\":{\"1235\":1}}],[\"配置kong网关代理\",{\"0\":{\"1083\":1}}],[\"配置kongadmin的链接\",{\"1\":{\"1079\":1}}],[\"配置kafka\",{\"0\":{\"1029\":1}}],[\"配置生产者信息\",{\"1\":{\"1035\":1}}],[\"配置partition中每个segment数据文件的大小\",{\"1\":{\"1029\":1}}],[\"配置过小会影响消费性能\",{\"1\":{\"1029\":1}}],[\"配置当某一事件发生时所需要执行的脚本\",{\"1\":{\"1000\":1}}],[\"配置对应的sentinel\",{\"1\":{\"1000\":1}}],[\"配置参数\",{\"1\":{\"997\":1}}],[\"配置就比较简单一些\",{\"1\":{\"994\":1}}],[\"配置策略说明如下\",{\"1\":{\"981\":1}}],[\"配置文件更加高效和可靠\",{\"1\":{\"1230\":1}}],[\"配置文件的其他配置项做简单说明\",{\"1\":{\"1000\":1}}],[\"配置文件方式\",{\"0\":{\"994\":1}}],[\"配置文件开启\",{\"1\":{\"986\":1}}],[\"配置文件\",{\"1\":{\"985\":1,\"1004\":3,\"1193\":1,\"1309\":1,\"1310\":1,\"1313\":1}}],[\"配置文件定义\",{\"1\":{\"981\":1}}],[\"配置文件中提到的如下配置\",{\"1\":{\"743\":1}}],[\"配置等多个维度\",{\"1\":{\"901\":1}}],[\"配置最大并发数my\",{\"1\":{\"799\":1}}],[\"配置优化\",{\"1\":{\"799\":1}}],[\"配置项\",{\"1\":{\"1000\":1}}],[\"配置项说明如下\",{\"1\":{\"965\":1}}],[\"配置项有关\",{\"1\":{\"639\":1}}],[\"配置项的相关说明详见\",{\"1\":{\"0\":1}}],[\"配置\",{\"0\":{\"1302\":1},\"1\":{\"625\":1,\"697\":1,\"1197\":1,\"1235\":1,\"1309\":1}}],[\"配置较复杂\",{\"1\":{\"115\":1}}],[\"配置完成之后我们克隆我们之前的项目\",{\"1\":{\"52\":1}}],[\"语音聊天室等\",{\"1\":{\"1108\":1}}],[\"语义\",{\"1\":{\"634\":1,\"1309\":1}}],[\"语义化版本通常指的是某一个release\",{\"1\":{\"459\":1}}],[\"语句块操作命令\",{\"0\":{\"863\":1}}],[\"语句中出现了using\",{\"1\":{\"814\":1}}],[\"语句是否满足\",{\"1\":{\"778\":1}}],[\"语句用于显示\",{\"1\":{\"651\":1}}],[\"语句会在函数退出时按\",{\"1\":{\"651\":1}}],[\"语句会延迟函数调用直到外围函数返回时执行\",{\"1\":{\"634\":1}}],[\"语句会按照定义的顺序逆序执行\",{\"1\":{\"633\":1}}],[\"语句会发现除了参数有变化外\",{\"1\":{\"494\":1}}],[\"语句的执行顺序是\",{\"1\":{\"633\":1}}],[\"语句了\",{\"1\":{\"494\":1}}],[\"语句\",{\"1\":{\"494\":1,\"584\":1,\"656\":1,\"778\":1,\"794\":1}}],[\"语句可以在if\",{\"1\":{\"229\":1}}],[\"语句格式如下\",{\"1\":{\"228\":1,\"229\":1,\"230\":1,\"233\":1,\"234\":1}}],[\"语言支持\",{\"1\":{\"1309\":1}}],[\"语言第三方库\",{\"1\":{\"1307\":1}}],[\"语言标准库的\",{\"1\":{\"1307\":1}}],[\"语言实现\",{\"1\":{\"1054\":1}}],[\"语言编写\",{\"1\":{\"908\":1}}],[\"语言编写的\",{\"1\":{\"160\":1}}],[\"语言开发经验\",{\"1\":{\"638\":1}}],[\"语言基础\",{\"0\":{\"521\":1}}],[\"语言特点\",{\"1\":{\"520\":1}}],[\"语言特别适用于以下场景\",{\"1\":{\"157\":1}}],[\"语言以其简洁\",{\"1\":{\"170\":1}}],[\"语言\",{\"1\":{\"166\":1,\"638\":1,\"746\":1,\"794\":1}}],[\"语言那么底层\",{\"1\":{\"161\":1}}],[\"语言中的\",{\"1\":{\"150\":1}}],[\"语言的后端开发工程师\",{\"1\":{\"638\":1}}],[\"语言的测试命令行工具\",{\"1\":{\"630\":1}}],[\"语言的设计简洁\",{\"1\":{\"164\":1}}],[\"语言的设计强调简洁性和高效性\",{\"1\":{\"148\":1}}],[\"语言的优点与缺点\",{\"0\":{\"163\":1}}],[\"语言的基础上\",{\"1\":{\"158\":1}}],[\"语言的应用场景\",{\"0\":{\"157\":1}}],[\"语言的程序编译后通常会生成一个静态链接的单一可执行文件\",{\"1\":{\"156\":1}}],[\"语言的语法设计简洁\",{\"1\":{\"150\":1}}],[\"语法上像是\",{\"1\":{\"1309\":1}}],[\"语法上看起来非常直观\",{\"1\":{\"208\":1}}],[\"语法分析器会根据语法规则\",{\"1\":{\"778\":1}}],[\"语法糖使用最多\",{\"1\":{\"509\":1}}],[\"语法基础的使用强化\",{\"0\":{\"508\":1}}],[\"语法简洁\",{\"1\":{\"168\":1}}],[\"语法\",{\"1\":{\"60\":1,\"778\":1,\"858\":1,\"859\":1,\"860\":1,\"861\":1}}],[\"旨在为web应用提供可扩展的高性能数据存储解决方案\",{\"1\":{\"841\":1,\"887\":1}}],[\"旨在更好的进行本地的多模块开发工作\",{\"1\":{\"462\":1}}],[\"旨在提供一种简单\",{\"1\":{\"148\":1}}],[\"旨在与gnu\",{\"1\":{\"132\":1}}],[\"套接字服务器变得简单\",{\"1\":{\"145\":1}}],[\"事件驱动\",{\"1\":{\"1038\":1}}],[\"事件驱动架构\",{\"1\":{\"651\":1}}],[\"事件等待\",{\"1\":{\"634\":1}}],[\"事件循环网络库\",{\"1\":{\"145\":1}}],[\"事务里更新语句尽量基于主键或unique\",{\"1\":{\"796\":1}}],[\"事务里包含sql不超过5个\",{\"1\":{\"796\":1}}],[\"事务会在读取数据时加锁\",{\"1\":{\"656\":1}}],[\"事务开始时不加锁\",{\"1\":{\"656\":1}}],[\"事务控制\",{\"1\":{\"653\":1}}],[\"事务等\",{\"1\":{\"653\":1}}],[\"事务机制\",{\"1\":{\"644\":1}}],[\"事务顺序执行\",{\"1\":{\"641\":1}}],[\"事务或补偿机制\",{\"1\":{\"641\":1}}],[\"事务\",{\"0\":{\"897\":1,\"989\":1},\"1\":{\"638\":1,\"644\":1}}],[\"事务支持\",{\"1\":{\"595\":1,\"667\":1}}],[\"事务隔离级别\",{\"1\":{\"585\":1,\"657\":1}}],[\"事务实现的底层原理\",{\"1\":{\"562\":1,\"634\":1}}],[\"事实上nginx的并发能力在同类型的网页服务器中表现较好\",{\"1\":{\"1107\":1}}],[\"事实上第一种函数读取的文件仅仅只是只读的\",{\"1\":{\"400\":1}}],[\"事实上当初go1\",{\"1\":{\"345\":1}}],[\"事实是\",{\"1\":{\"12\":1}}],[\"西里尔字母等\",{\"1\":{\"144\":1}}],[\"书写系统\",{\"1\":{\"144\":1}}],[\"句子标记器\",{\"1\":{\"144\":1}}],[\"词性标记\",{\"1\":{\"144\":1}}],[\"潜在语义分析\",{\"1\":{\"144\":1}}],[\"搬运程序阻止算法的实现\",{\"1\":{\"144\":1}}],[\"建表或加索引时\",{\"1\":{\"795\":1}}],[\"建表时关于主键\",{\"1\":{\"794\":1}}],[\"建表必须有comment\",{\"1\":{\"794\":1}}],[\"建模也是以任务驱动的\",{\"1\":{\"789\":1}}],[\"建造者模式\",{\"1\":{\"654\":1}}],[\"建筑完成\",{\"1\":{\"293\":3}}],[\"建筑得以顺利完成\",{\"1\":{\"293\":1}}],[\"建筑公司结构体内部声明了一个crane类型的成员变量\",{\"1\":{\"293\":1}}],[\"建筑公司不在乎是用什么技术实现的\",{\"1\":{\"293\":1}}],[\"建筑公司并不负责造起重机\",{\"1\":{\"293\":1}}],[\"建议在使用时应当格外注意\",{\"1\":{\"1443\":1}}],[\"建议开启gzip\",{\"1\":{\"1131\":1}}],[\"建议设置密码的时候都保持一致\",{\"1\":{\"1010\":1}}],[\"建议\",{\"1\":{\"794\":11,\"795\":6,\"796\":11}}],[\"建议以英文字\",{\"1\":{\"794\":1}}],[\"建议拆分到单独的表\",{\"1\":{\"787\":1}}],[\"建议使用html\",{\"1\":{\"1428\":1}}],[\"建议使用unsigned无符号型\",{\"1\":{\"794\":1}}],[\"建议使用长连接\",{\"1\":{\"776\":1}}],[\"建议使用<stdint\",{\"1\":{\"304\":1}}],[\"建议使用下面这种方式进行转换\",{\"1\":{\"241\":1}}],[\"建议还是用普通的构造函数来解决\",{\"1\":{\"269\":1}}],[\"建议预分配一个足够的容量\",{\"1\":{\"243\":1}}],[\"建议和协作过滤引擎\",{\"1\":{\"142\":1}}],[\"建立索引会占用磁盘空间的索引文件\",{\"1\":{\"809\":1}}],[\"建立索引\",{\"1\":{\"809\":1}}],[\"建立索引可以大大提高检索的数据\",{\"1\":{\"809\":1}}],[\"建立了索引\",{\"1\":{\"799\":1}}],[\"建立的索引失效\",{\"1\":{\"799\":1}}],[\"建立连接成功后\",{\"1\":{\"777\":1}}],[\"建立连接的过程比较复杂\",{\"1\":{\"776\":1}}],[\"建立连接\",{\"0\":{\"912\":1},\"1\":{\"636\":1,\"1374\":2}}],[\"建立分词后\",{\"1\":{\"585\":1,\"657\":1}}],[\"建立在termbox之上\",{\"1\":{\"134\":1}}],[\"建立用于支持为golang服务定义异步服务运行状况检查的库\",{\"1\":{\"128\":1}}],[\"概述\",{\"0\":{\"480\":1,\"1071\":1,\"1126\":1},\"1\":{\"1233\":1,\"1234\":1,\"1235\":1}}],[\"概率分布函数\",{\"1\":{\"142\":1}}],[\"概念及作用\",{\"1\":{\"814\":1}}],[\"概念\",{\"0\":{\"289\":1},\"1\":{\"53\":1}}],[\"各种配置文件\",{\"1\":{\"1313\":1}}],[\"各种子查询导致用不上索引或者没有建立索引\",{\"1\":{\"799\":1}}],[\"各种连接\",{\"1\":{\"799\":1}}],[\"各种概率分布及相关方法\",{\"1\":{\"142\":1}}],[\"各地校车将享最高路权\",{\"1\":{\"741\":1}}],[\"各有什么优缺点\",{\"1\":{\"618\":1,\"690\":1}}],[\"各有优劣\",{\"1\":{\"322\":1}}],[\"各个隔离级别怎么实现的\",{\"1\":{\"618\":1,\"690\":1}}],[\"各个类型仓库之间的区别\",{\"1\":{\"45\":1}}],[\"各自的优缺点\",{\"1\":{\"587\":1,\"659\":1}}],[\"各自独立\",{\"1\":{\"528\":1}}],[\"各大社区开发者百家争鸣\",{\"1\":{\"442\":1}}],[\"库和配置文件\",{\"1\":{\"1183\":1}}],[\"库\",{\"0\":{\"845\":1},\"1\":{\"1191\":1}}],[\"库名禁止使用关键字\",{\"1\":{\"794\":1}}],[\"库名中英文\",{\"1\":{\"794\":1}}],[\"库的名称格式\",{\"1\":{\"794\":1}}],[\"库的名称必须控制在32个字符以内\",{\"1\":{\"794\":1}}],[\"库的go绑定\",{\"1\":{\"142\":1}}],[\"库存管理等\",{\"1\":{\"644\":1}}],[\"库存\",{\"1\":{\"641\":1}}],[\"库存等\",{\"1\":{\"641\":1}}],[\"库坐标转换和变换\",{\"1\":{\"135\":1}}],[\"原文件名+当前时间\",{\"1\":{\"1307\":1}}],[\"原文件写到maxsize大小之后\",{\"1\":{\"1307\":1}}],[\"原文为dynamic\",{\"1\":{\"347\":1}}],[\"原信息\",{\"1\":{\"1215\":1}}],[\"原本是不会有问题的\",{\"1\":{\"1165\":1}}],[\"原本存储在b节点的k1\",{\"1\":{\"1165\":1}}],[\"原本不可排序的类型传入比较器后也可以使用堆了\",{\"1\":{\"344\":1}}],[\"原来访问的地址是\",{\"1\":{\"1086\":1,\"1087\":1}}],[\"原来的值的末尾\",{\"1\":{\"970\":1}}],[\"原来的上下文附加上键值对\",{\"1\":{\"546\":1}}],[\"原有aof文件\",{\"1\":{\"985\":1}}],[\"原型模式\",{\"1\":{\"654\":1}}],[\"原型聚类算法的go实现\",{\"1\":{\"142\":1}}],[\"原对象和拷贝对象共享引用的资源\",{\"1\":{\"641\":1}}],[\"原对象和新对象不是同一个内存地址\",{\"1\":{\"528\":1}}],[\"原因在于如果一台机器挂了\",{\"1\":{\"1165\":1}}],[\"原因是告诉你\",{\"1\":{\"1163\":1}}],[\"原因是从美国服务器在线安装\",{\"1\":{\"877\":1}}],[\"原因是\",{\"1\":{\"736\":1}}],[\"原因是字符串反转后变成了非utf8格式\",{\"1\":{\"477\":1}}],[\"原因包括\",{\"1\":{\"637\":1}}],[\"原生支持go语言\",{\"1\":{\"1239\":1}}],[\"原生的\",{\"1\":{\"635\":1}}],[\"原生字符串里面所有的字符都会原封不动的输出\",{\"1\":{\"252\":1}}],[\"原生字符串由反引号表示\",{\"1\":{\"252\":1}}],[\"原生字符串\",{\"1\":{\"252\":1,\"510\":1}}],[\"原则上不准有drop权限\",{\"1\":{\"794\":1}}],[\"原则的核心就是简单可复用\",{\"1\":{\"793\":1}}],[\"原则\",{\"1\":{\"610\":1,\"682\":1}}],[\"原空间是用来做什么的\",{\"1\":{\"606\":1,\"678\":1}}],[\"原字符为\",{\"1\":{\"477\":1}}],[\"原始类型是json数据\",{\"1\":{\"754\":1}}],[\"原始压缩包等\",{\"1\":{\"457\":1}}],[\"原始错误\",{\"1\":{\"393\":2}}],[\"原子性\",{\"1\":{\"961\":1}}],[\"原子递减操作\",{\"1\":{\"638\":1}}],[\"原子操作和锁的区别\",{\"1\":{\"587\":1,\"659\":1}}],[\"原子的存储值\",{\"1\":{\"439\":1}}],[\"原子的交换值\",{\"1\":{\"439\":1}}],[\"原子的获取值\",{\"1\":{\"439\":1}}],[\"原子或原语操作\",{\"1\":{\"437\":1}}],[\"原子\",{\"0\":{\"437\":1},\"1\":{\"957\":1}}],[\"原子加载数据\",{\"1\":{\"434\":1}}],[\"原slice容量超过256\",{\"1\":{\"244\":1}}],[\"原\",{\"1\":{\"244\":1}}],[\"原理\",{\"0\":{\"996\":1,\"1006\":1,\"1190\":1,\"1195\":1,\"1214\":1},\"1\":{\"76\":1,\"618\":1,\"621\":1,\"633\":1,\"634\":1,\"690\":1,\"693\":1}}],[\"灵活的策略表达式\",{\"1\":{\"1239\":1}}],[\"灵活的路由配置\",{\"1\":{\"1053\":1}}],[\"灵活的数据模型和高性能优势\",{\"1\":{\"843\":1}}],[\"灵活的数据模型\",{\"1\":{\"842\":1,\"906\":1,\"907\":1}}],[\"灵活\",{\"1\":{\"142\":1,\"323\":1}}],[\"物流\",{\"1\":{\"1108\":1}}],[\"物流数据等实时数据\",{\"1\":{\"843\":1}}],[\"物理计算和物联网的框架\",{\"1\":{\"140\":1}}],[\"物联网中的实时通讯\",{\"1\":{\"1057\":1}}],[\"物联网和实时数据分析\",{\"1\":{\"843\":1}}],[\"物联网设备编程库\",{\"1\":{\"120\":1}}],[\"物联网\",{\"0\":{\"140\":1},\"1\":{\"120\":1}}],[\"盖特是一个围棋包构建低功耗蓝牙外设\",{\"1\":{\"140\":1}}],[\"动态路由\",{\"1\":{\"1287\":1}}],[\"动态ssl证书\",{\"1\":{\"1072\":1}}],[\"动态添加数据时\",{\"1\":{\"725\":1}}],[\"动态地给一个对象添加额外的职责\",{\"1\":{\"654\":1}}],[\"动态加载类\",{\"1\":{\"645\":1}}],[\"动态分配内存区域\",{\"1\":{\"636\":1}}],[\"动态语言则完全相反\",{\"1\":{\"381\":1}}],[\"动态具体类型\",{\"1\":{\"347\":2}}],[\"动态链接库无法单独运行\",{\"1\":{\"312\":1}}],[\"动态链接库\",{\"0\":{\"312\":1}}],[\"动态网页必须要结合服务器端的技术\",{\"1\":{\"110\":1}}],[\"动态网站请租赁服务器搭建提供服务\",{\"1\":{\"54\":1}}],[\"动画\",{\"1\":{\"139\":1}}],[\"裁切\",{\"1\":{\"139\":1}}],[\"绑定路由规则\",{\"1\":{\"1275\":1}}],[\"绑定的命令是\",{\"1\":{\"1010\":1}}],[\"绑定的主机地址\",{\"1\":{\"965\":1}}],[\"绑定后只能通过127访问\",{\"1\":{\"852\":1}}],[\"绑定到imagemagick的magickwand\",{\"1\":{\"139\":1}}],[\"绑定portmidi\",{\"1\":{\"126\":1}}],[\"纯go中的2d渲染\",{\"1\":{\"139\":1}}],[\"纯go中图像处理算法的集合\",{\"1\":{\"139\":1}}],[\"控制速率\",{\"0\":{\"1154\":1}}],[\"控制客户端在特定时间段内发出的请求数量\",{\"1\":{\"1071\":1}}],[\"控制台输出间隔字符串\",{\"1\":{\"1302\":1}}],[\"控制台\",{\"1\":{\"1057\":1}}],[\"控制的\",{\"1\":{\"776\":1}}],[\"控制并发\",{\"1\":{\"654\":1}}],[\"控制并发顺序\",{\"1\":{\"544\":1}}],[\"控制执行的数量\",{\"1\":{\"654\":1}}],[\"控制资源的分配\",{\"1\":{\"634\":1}}],[\"控制平衡还是视觉识别\",{\"1\":{\"597\":1,\"669\":1}}],[\"控制消费速度\",{\"1\":{\"562\":1,\"634\":3}}],[\"控制内存分配统计的频率\",{\"1\":{\"469\":1}}],[\"控制协程阻塞统计频率\",{\"1\":{\"469\":1}}],[\"控制鼠标\",{\"1\":{\"138\":1}}],[\"控制goroutine的执行顺序\",{\"1\":{\"137\":1}}],[\"qlen\",{\"1\":{\"1194\":3,\"1195\":1}}],[\"ql建表\",{\"1\":{\"603\":1,\"675\":1}}],[\"qdisc\",{\"1\":{\"1194\":5,\"1195\":5}}],[\"q只显示id\",{\"1\":{\"1187\":1}}],[\"qianyugang\",{\"1\":{\"1073\":1}}],[\"qw退出即可\",{\"1\":{\"1235\":1}}],[\"qwertyuiopasdfghjklzxcvbnm\",{\"1\":{\"820\":1}}],[\"qw\",{\"1\":{\"818\":1}}],[\"qq\",{\"1\":{\"806\":4}}],[\"qps\",{\"1\":{\"567\":1,\"639\":3,\"644\":1}}],[\"qps提升3倍说明系统已接近瓶颈\",{\"1\":{\"639\":1}}],[\"qps提升3倍\",{\"1\":{\"566\":1,\"638\":2}}],[\"q\",{\"1\":{\"221\":2,\"343\":18,\"477\":15,\"516\":8,\"1078\":1,\"1400\":4,\"1402\":2,\"1408\":4}}],[\"qt\",{\"1\":{\"138\":1}}],[\"quotetoascii\",{\"1\":{\"1388\":1}}],[\"quote\",{\"1\":{\"1388\":1}}],[\"quorumpeermain\",{\"1\":{\"1033\":1}}],[\"quorum是多少个sentinel监听到宕机才判定为宕机进行故障转移\",{\"1\":{\"1000\":1}}],[\"quorum>\",{\"1\":{\"1000\":1}}],[\"quit\",{\"1\":{\"968\":2,\"1127\":1,\"1172\":1}}],[\"quiet=true\",{\"1\":{\"852\":1}}],[\"quic\",{\"1\":{\"145\":1}}],[\"quick\",{\"1\":{\"124\":1}}],[\"quantity\",{\"1\":{\"720\":1}}],[\"quartz\",{\"1\":{\"653\":1}}],[\"queries\",{\"1\":{\"639\":1,\"813\":1}}],[\"query转义\",{\"1\":{\"1420\":1}}],[\"querymap\",{\"1\":{\"1280\":1}}],[\"query参数\",{\"1\":{\"1280\":2}}],[\"query\",{\"1\":{\"463\":2,\"633\":1,\"713\":2,\"724\":2,\"729\":2,\"730\":1,\"732\":1,\"733\":1,\"741\":2,\"749\":1,\"752\":1,\"756\":1,\"757\":1,\"758\":1,\"763\":1,\"766\":3,\"776\":1,\"813\":8,\"822\":1,\"885\":1,\"893\":4,\"897\":2,\"1280\":1,\"1420\":1}}],[\"queue\",{\"1\":{\"122\":1,\"137\":1,\"343\":7,\"516\":3,\"768\":1,\"1053\":1}}],[\"quux\",{\"1\":{\"176\":1}}],[\"跨多台服务器部署\",{\"1\":{\"1018\":1}}],[\"跨多种文件系统类型\",{\"1\":{\"132\":1}}],[\"跨域配置\",{\"1\":{\"768\":1,\"769\":1,\"770\":1}}],[\"跨语言支持\",{\"1\":{\"637\":1}}],[\"跨平台支持\",{\"0\":{\"153\":1},\"1\":{\"164\":1}}],[\"跨平台的go库\",{\"1\":{\"138\":2}}],[\"跨平台\",{\"1\":{\"138\":3,\"1053\":1}}],[\"由上至下执行\",{\"1\":{\"1193\":1}}],[\"由此可见对于不同的linux发行版\",{\"1\":{\"1192\":1}}],[\"由c++语言编写\",{\"1\":{\"841\":1,\"887\":1}}],[\"由数组组成的数组\",{\"1\":{\"725\":1}}],[\"由消费者异步处理\",{\"1\":{\"644\":1}}],[\"由操作系统调度\",{\"1\":{\"639\":1}}],[\"由操作系统自动管理\",{\"1\":{\"636\":1}}],[\"由\",{\"1\":{\"639\":1,\"1165\":1}}],[\"由三部分组成\",{\"1\":{\"634\":1}}],[\"由任意数量的读操作或者单个写操作\",{\"1\":{\"557\":1}}],[\"由go的运行时调度系统管理\",{\"1\":{\"651\":1}}],[\"由go语言自身的调度器进行运行时调度\",{\"1\":{\"412\":1}}],[\"由go\",{\"1\":{\"328\":1}}],[\"由root或alias指令与uri请求生成\",{\"1\":{\"1133\":1}}],[\"由runtime\",{\"1\":{\"310\":1}}],[\"由redis将访问量较少的页即冷数据swap到磁盘上\",{\"1\":{\"965\":1}}],[\"由redis\",{\"1\":{\"127\":1}}],[\"由于字符串字面量是存放在进程中的只读段\",{\"1\":{\"1447\":1}}],[\"由于unsafe\",{\"1\":{\"1443\":1}}],[\"由于官方已经帮我们实现了float64slicestringsliceintslice三个类型\",{\"1\":{\"1375\":1}}],[\"由于夏令时\",{\"1\":{\"1307\":1}}],[\"由于我们现在是跨网络的\",{\"1\":{\"1198\":1}}],[\"由于\",{\"1\":{\"1055\":1}}],[\"由于kafka会将数据进行持久化存储\",{\"1\":{\"1025\":1}}],[\"由于页表\",{\"1\":{\"965\":1}}],[\"由于mysql比较流行\",{\"1\":{\"890\":1}}],[\"由于前期数据量少\",{\"1\":{\"799\":1}}],[\"由于数据包的边界不明确\",{\"1\":{\"636\":1}}],[\"由于线程的调度和管理高度依赖与操作系统\",{\"1\":{\"540\":1}}],[\"由于它有一个请求队列\",{\"1\":{\"1156\":1}}],[\"由于它的收发数据都是原子性的\",{\"1\":{\"535\":1}}],[\"由于它是函数内创建的\",{\"1\":{\"317\":1}}],[\"由于它是在编译期进行\",{\"1\":{\"316\":1}}],[\"由于单⼀的标准代码格式\",{\"1\":{\"522\":1}}],[\"由于一些字符占用并不止一个字节\",{\"1\":{\"477\":1}}],[\"由于传入的字符串是不可预知的\",{\"1\":{\"477\":1}}],[\"由于其他事务的插入\",{\"1\":{\"641\":1}}],[\"由于其vx\",{\"1\":{\"459\":1}}],[\"由于其长度未知\",{\"1\":{\"320\":1}}],[\"由于无锁化实现的并发安全效率相对于锁要高一些\",{\"1\":{\"440\":1}}],[\"由于这些操作无法再细化为更小的步骤\",{\"1\":{\"437\":1}}],[\"由于每个协程访问和计算所需的时间不同\",{\"1\":{\"429\":1}}],[\"由于上例中没有对管道写入数据\",{\"1\":{\"421\":1}}],[\"由于管道已经关闭了\",{\"1\":{\"420\":1}}],[\"由于管道的缓冲区大小为1\",{\"1\":{\"417\":1}}],[\"由于缓冲区大小为1\",{\"1\":{\"417\":1}}],[\"由于是根据年龄比较的\",{\"1\":{\"1380\":1}}],[\"由于是磁盘的io操作\",{\"1\":{\"987\":1}}],[\"由于是以os\",{\"1\":{\"402\":1}}],[\"由于是crane\",{\"1\":{\"293\":1}}],[\"由于项目下并没有文件readme\",{\"1\":{\"400\":1}}],[\"由于在创建结构体时返回的是结构体指针\",{\"1\":{\"393\":1}}],[\"由于该结构体并不对外暴露\",{\"1\":{\"392\":1}}],[\"由于该数组的内存是由go管理\",{\"1\":{\"306\":1}}],[\"由于interface\",{\"1\":{\"386\":1}}],[\"由于对元素没有任何的要求\",{\"1\":{\"344\":1}}],[\"由于采用了泛型\",{\"1\":{\"343\":1}}],[\"由于do函数本身什么都没做\",{\"1\":{\"326\":1}}],[\"由于cobra十分常用\",{\"1\":{\"335\":1}}],[\"由于c\",{\"1\":{\"303\":1}}],[\"由于go语言本身的并发特性\",{\"1\":{\"1365\":1}}],[\"由于go并不支持联合体\",{\"1\":{\"308\":1}}],[\"由于go需要gc\",{\"1\":{\"296\":1}}],[\"由于go函数是传值传递\",{\"1\":{\"238\":1}}],[\"由于同样具有起重和吊货的功能\",{\"1\":{\"293\":1}}],[\"由于例子中的字符都是属于ascii字符\",{\"1\":{\"258\":1}}],[\"由于容量为6\",{\"1\":{\"250\":1}}],[\"由文件结构中可知\",{\"1\":{\"176\":1}}],[\"由vlc媒体播放器使用\",{\"1\":{\"146\":1}}],[\"由electron支持\",{\"1\":{\"138\":1}}],[\"等同于s\",{\"1\":{\"1417\":1}}],[\"等方法将路由注册到树中\",{\"1\":{\"1286\":1}}],[\"等来定义多个图比较器\",{\"1\":{\"1262\":1}}],[\"等于日志选择性记录\",{\"1\":{\"1302\":1}}],[\"等于策略中找到的那些\",{\"1\":{\"1253\":1}}],[\"等于也要开启cgo\",{\"1\":{\"314\":1}}],[\"等等\",{\"1\":{\"1189\":1}}],[\"等号后边为下载的插件的解压目录\",{\"1\":{\"1165\":1}}],[\"等到1s结束后计数清零\",{\"1\":{\"1148\":1}}],[\"等接口\",{\"1\":{\"1054\":1}}],[\"等技术也可以实现水平扩展\",{\"1\":{\"904\":1}}],[\"等其他关系数据库\",{\"1\":{\"890\":1}}],[\"等其他协程来读\",{\"1\":{\"417\":1}}],[\"等多个存储引擎\",{\"1\":{\"775\":1}}],[\"等数据类型\",{\"1\":{\"641\":1}}],[\"等原因\",{\"1\":{\"639\":1}}],[\"等机制\",{\"1\":{\"637\":1}}],[\"等消息队列系统\",{\"1\":{\"637\":1}}],[\"等算法来完成排序\",{\"1\":{\"649\":1}}],[\"等算法\",{\"1\":{\"636\":1}}],[\"等问题\",{\"1\":{\"634\":1}}],[\"等待锁的时间\",{\"1\":{\"813\":1}}],[\"等待时间长\",{\"1\":{\"799\":1}}],[\"等待任务队列里的任务执行完再关闭\",{\"1\":{\"645\":1}}],[\"等待任务队列里的任务执行完再关闭v1版本的项目\",{\"1\":{\"573\":1,\"645\":1}}],[\"等待执行\",{\"1\":{\"645\":1}}],[\"等待分配到其它\",{\"1\":{\"635\":1}}],[\"等待取消中\",{\"1\":{\"427\":6,\"428\":6}}],[\"等待所有的协程执行完毕\",{\"1\":{\"422\":1}}],[\"等待所有goroutine结束等等\",{\"1\":{\"137\":1}}],[\"等待当前循环的协程执行完毕\",{\"1\":{\"422\":1}}],[\"等待子协程结束\",{\"1\":{\"431\":1,\"432\":1}}],[\"等待子协程\",{\"1\":{\"422\":1}}],[\"等价表达式\",{\"1\":{\"759\":2}}],[\"等价于pointer\",{\"1\":{\"1444\":1}}],[\"等价于s\",{\"1\":{\"1420\":1}}],[\"等价于stings\",{\"1\":{\"1407\":1}}],[\"等价于go\",{\"1\":{\"469\":1}}],[\"等价于nums\",{\"1\":{\"239\":1}}],[\"等价于\",{\"1\":{\"230\":2,\"360\":1,\"385\":2,\"725\":1,\"834\":2,\"836\":1}}],[\"等价于无符号64位整型\",{\"1\":{\"197\":1}}],[\"等价\",{\"1\":{\"200\":2}}],[\"等\",{\"1\":{\"158\":1,\"529\":1,\"634\":4,\"635\":1,\"638\":1,\"641\":2,\"651\":2,\"653\":1,\"656\":1,\"1183\":1,\"1238\":1,\"1286\":1}}],[\"等过程\",{\"1\":{\"58\":1}}],[\"帮助提高工作效率\",{\"1\":{\"655\":1}}],[\"帮助分析查询的执行效率\",{\"1\":{\"651\":1}}],[\"帮助函数不会单独作为一个测试用例用于执行\",{\"1\":{\"472\":1}}],[\"帮助您节流和限制goroutine\",{\"1\":{\"137\":1}}],[\"帮助测试使用通道的代码\",{\"1\":{\"124\":1}}],[\"轻巧的goroutine池\",{\"1\":{\"137\":1}}],[\"轻松编排goroutine\",{\"1\":{\"137\":1}}],[\"轻量级并且高性能的文件系统\",{\"1\":{\"1192\":1}}],[\"轻量级线程\",{\"1\":{\"645\":1}}],[\"轻量级的嵌入式数据库\",{\"1\":{\"905\":1}}],[\"轻量级的命令行框架\",{\"1\":{\"335\":1}}],[\"轻量级的协程池\",{\"1\":{\"122\":1}}],[\"轻量级游戏服务器框架\",{\"1\":{\"134\":1}}],[\"轻量级mp3解码器库\",{\"1\":{\"126\":1}}],[\"轻量级web框架\",{\"1\":{\"123\":1}}],[\"轻量级\",{\"1\":{\"113\":1,\"1272\":1}}],[\"矢量数据\",{\"1\":{\"135\":1}}],[\"去仓库dockerhub下载镜像\",{\"1\":{\"1185\":1}}],[\"去掉时间的单调时钟读数\",{\"1\":{\"1429\":1}}],[\"去掉dep\",{\"1\":{\"818\":1}}],[\"去掉name条件\",{\"1\":{\"818\":1}}],[\"去使用这个引擎提供的接口\",{\"1\":{\"780\":1}}],[\"去除注释真正的代码逻辑只有16行\",{\"1\":{\"434\":1}}],[\"去除utf编码中的bom\",{\"1\":{\"122\":1}}],[\"去洛谷做几道简单的acm模式算法题就能上手熟悉了\",{\"1\":{\"226\":1}}],[\"去绑定raylib\",{\"1\":{\"134\":1}}],[\"或运算\",{\"1\":{\"1420\":1}}],[\"或是你的应用场景大量使用\",{\"1\":{\"1057\":1}}],[\"或日志模式\",{\"1\":{\"984\":1}}],[\"或将排序放到程序端去做\",{\"1\":{\"796\":1}}],[\"或将失败的消息存入死信队列\",{\"1\":{\"638\":1}}],[\"或临时表\",{\"1\":{\"794\":1}}],[\"或更新版本\",{\"1\":{\"776\":1}}],[\"或更先进的技术\",{\"1\":{\"641\":1}}],[\"或时间戳\",{\"1\":{\"656\":1}}],[\"或指标异常\",{\"1\":{\"655\":1}}],[\"或quartz\",{\"1\":{\"653\":1}}],[\"或在mysql更新后更新redis\",{\"1\":{\"651\":1}}],[\"或执行\",{\"1\":{\"649\":1}}],[\"或内存的压力\",{\"1\":{\"645\":1}}],[\"或内存资源的限制\",{\"1\":{\"638\":1}}],[\"或其他简易\",{\"1\":{\"743\":1}}],[\"或其他异常\",{\"1\":{\"644\":1}}],[\"或其他小数据\",{\"1\":{\"641\":1}}],[\"或通过\",{\"1\":{\"638\":1}}],[\"或引入索引等机制来优化查询速度\",{\"1\":{\"636\":1}}],[\"或\",{\"1\":{\"512\":1,\"522\":1,\"588\":1,\"634\":2,\"635\":1,\"637\":5,\"638\":5,\"641\":9,\"644\":2,\"645\":1,\"649\":2,\"655\":1,\"656\":1,\"660\":1,\"721\":1,\"795\":1,\"805\":1,\"1133\":3,\"1252\":1,\"1285\":1}}],[\"或解析响应\",{\"1\":{\"133\":1}}],[\"或者cmd命令执行\",{\"1\":{\"1281\":1}}],[\"或者cursor\",{\"1\":{\"863\":1}}],[\"或者文件被误删\",{\"1\":{\"1171\":1}}],[\"或者节点增加也会发生这种问题的出现\",{\"1\":{\"1165\":1}}],[\"或者localhost\",{\"1\":{\"1130\":1,\"1131\":2,\"1136\":1,\"1141\":1,\"1142\":1,\"1143\":1,\"1144\":1,\"1160\":1}}],[\"或者设置为n\",{\"1\":{\"1130\":1}}],[\"或者更新已存在成员的分数\",{\"1\":{\"974\":1}}],[\"或者在一个语句有多表关联\",{\"1\":{\"779\":1}}],[\"或者在多个\",{\"1\":{\"635\":1}}],[\"或者这两种同时存在\",{\"1\":{\"724\":1}}],[\"或者这样也可以\",{\"1\":{\"206\":1}}],[\"或者利用主键id范围分页\",{\"1\":{\"653\":1}}],[\"或者通过更新操作时验证版本号\",{\"1\":{\"653\":1}}],[\"或者是递归分治法中的两个子问题\",{\"1\":{\"645\":1}}],[\"或者是一个类型\",{\"1\":{\"471\":1}}],[\"或者是一个包\",{\"1\":{\"471\":1}}],[\"或者缓存空数据\",{\"1\":{\"636\":1}}],[\"或者采用\",{\"1\":{\"634\":1}}],[\"或者存在多线程的共享情况时\",{\"1\":{\"633\":1}}],[\"或者占用内存较大的结构体\",{\"1\":{\"549\":1}}],[\"或者说返回值就是结构体地址起始处到字段地址起始处两者之间的字节数\",{\"1\":{\"1441\":1}}],[\"或者说招你进去安排哪些工作就很有机会\",{\"1\":{\"520\":1}}],[\"或者说是用户态的线程\",{\"1\":{\"412\":1}}],[\"或者可以单独指定某一个测试文件的某一个测试用例\",{\"1\":{\"468\":1}}],[\"或者可以自行查询可用的release版本号\",{\"1\":{\"453\":1}}],[\"或者example\",{\"1\":{\"467\":1}}],[\"或者使用index指令进行修改\",{\"1\":{\"1133\":1}}],[\"或者使用go\",{\"1\":{\"450\":1}}],[\"或者使用云上的ide开发环境\",{\"1\":{\"79\":1}}],[\"或者不支持该方法\",{\"1\":{\"424\":1}}],[\"或者不用框架\",{\"1\":{\"330\":1}}],[\"或者计数数量大于子协程数量时\",{\"1\":{\"422\":1}}],[\"或者都不为空时\",{\"1\":{\"379\":1}}],[\"或者any\",{\"1\":{\"339\":1}}],[\"或者也可以手动指定模板\",{\"1\":{\"1425\":1}}],[\"或者也可以直接传入当前模板的根对象\",{\"1\":{\"1426\":1}}],[\"或者也可以直接使用函数\",{\"1\":{\"439\":1}}],[\"或者也可以直接看文档cgo\",{\"1\":{\"296\":1}}],[\"或者也可以使用any类型加反射来判断\",{\"1\":{\"337\":1}}],[\"或者\",{\"1\":{\"228\":1,\"635\":1,\"641\":1,\"775\":1,\"814\":1,\"911\":1,\"1033\":1,\"1174\":1}}],[\"或者包名比较复杂\",{\"1\":{\"175\":1}}],[\"或者从json字符串反序列化出一个具体的对象等\",{\"1\":{\"121\":1}}],[\"或者某个功能\",{\"1\":{\"58\":1}}],[\"或者自己该公司的服务器\",{\"1\":{\"17\":1}}],[\"或者重启电脑\",{\"1\":{\"13\":1}}],[\"债券和折旧计算\",{\"1\":{\"133\":1}}],[\"利于文件和请求数据的传输\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"利率转换\",{\"1\":{\"133\":1}}],[\"利用go语言本身的高并发的特性吞吐量也是非常高\",{\"1\":{\"1272\":1}}],[\"利用上电脑资源\",{\"1\":{\"1217\":1}}],[\"利用hash\",{\"1\":{\"1165\":1}}],[\"利用konga进行限流\",{\"0\":{\"1100\":1}}],[\"利用率\",{\"1\":{\"1068\":1}}],[\"利用度越高\",{\"1\":{\"793\":1}}],[\"利用管道的阻塞条件\",{\"1\":{\"417\":1}}],[\"利用闭包\",{\"1\":{\"282\":1}}],[\"利用\",{\"0\":{\"54\":1},\"1\":{\"656\":1}}],[\"云原生领域apisix更加优于kong和nginx\",{\"1\":{\"1072\":1}}],[\"云服务等不同的环境中\",{\"1\":{\"641\":1}}],[\"云计算等等\",{\"1\":{\"335\":1}}],[\"云计算与\",{\"0\":{\"160\":1}}],[\"云计算\",{\"1\":{\"148\":1}}],[\"云\",{\"1\":{\"132\":1}}],[\"带默认值\",{\"1\":{\"1281\":1}}],[\"带锁的写入区域\",{\"1\":{\"558\":1}}],[\"带有\",{\"1\":{\"459\":1}}],[\"带有方法集的接口无法并入类型集\",{\"1\":{\"341\":1,\"516\":1}}],[\"带有堆栈跟踪和源代码片段的golang错误\",{\"1\":{\"131\":1}}],[\"带黄色感叹号的文件都是冲突的文件\",{\"1\":{\"36\":1}}],[\"错误日志\",{\"1\":{\"1339\":1}}],[\"错误文件输出路径\",{\"1\":{\"1302\":1}}],[\"错误级别从左到右越来越大\",{\"1\":{\"1130\":1}}],[\"错误的时候\",{\"1\":{\"775\":1}}],[\"错误率等\",{\"1\":{\"655\":1}}],[\"错误代码\",{\"1\":{\"654\":2}}],[\"错误捕获和恢复\",{\"1\":{\"514\":1}}],[\"错误信息有包含了校验失败的原因\",{\"1\":{\"1289\":1}}],[\"错误信息的时候\",{\"1\":{\"1171\":1}}],[\"错误信息\",{\"1\":{\"504\":1}}],[\"错误提示所有的协程都已经退出\",{\"1\":{\"422\":1}}],[\"错误在传递的过程中可能会层层包装\",{\"1\":{\"392\":1}}],[\"错误中没有堆栈信息\",{\"1\":{\"388\":1}}],[\"错误例子如下\",{\"1\":{\"239\":1}}],[\"错误情况\",{\"1\":{\"221\":1}}],[\"错误示例\",{\"1\":{\"189\":1,\"206\":2,\"239\":1}}],[\"错误\",{\"0\":{\"388\":1,\"1455\":1},\"1\":{\"179\":1,\"392\":1}}],[\"错误包装程序为go中的错误类型创建了一个包装程序\",{\"1\":{\"131\":1}}],[\"错误组成等的功能丰富的错误包\",{\"1\":{\"131\":1}}],[\"错误处理中的最后一步就是如何处理和检查错误\",{\"1\":{\"393\":1}}],[\"错误处理机制繁琐\",{\"1\":{\"165\":1}}],[\"错误处理\",{\"0\":{\"131\":1},\"1\":{\"120\":1,\"298\":1,\"1071\":1}}],[\"容\",{\"1\":{\"1019\":1}}],[\"容易出错\",{\"1\":{\"1240\":1}}],[\"容易构建镜像是基于镜像加载机制===搭积木方式构建\",{\"1\":{\"1192\":1}}],[\"容易因为节点分部不均匀⽽造成数据倾斜问题\",{\"1\":{\"1165\":1}}],[\"容易水平扩展\",{\"1\":{\"906\":1}}],[\"容易学习和使用\",{\"1\":{\"842\":1}}],[\"容易造成内存泄漏\",{\"1\":{\"633\":1}}],[\"容灾\",{\"1\":{\"655\":1}}],[\"容量大\",{\"1\":{\"636\":1,\"805\":1}}],[\"容量问题\",{\"1\":{\"633\":1}}],[\"容量100的整型切片\",{\"1\":{\"277\":1}}],[\"容量不足\",{\"1\":{\"250\":1}}],[\"容量为10的映射表\",{\"1\":{\"277\":1}}],[\"容量为原来的2倍\",{\"1\":{\"244\":1}}],[\"容量为0的空切片\",{\"1\":{\"244\":1}}],[\"容量超过\",{\"1\":{\"244\":1}}],[\"容量变成原来的1\",{\"1\":{\"244\":1}}],[\"容量变成原来的\",{\"1\":{\"244\":1}}],[\"容量小于\",{\"1\":{\"244\":1}}],[\"容量\",{\"1\":{\"243\":1,\"511\":1,\"554\":1,\"649\":1}}],[\"容量对于切片才有意义\",{\"1\":{\"240\":1}}],[\"容错方便等特点\",{\"1\":{\"1273\":1}}],[\"容错性\",{\"1\":{\"1018\":1}}],[\"容错应用程序层分片\",{\"1\":{\"128\":1}}],[\"容错消息流\",{\"1\":{\"128\":1}}],[\"容器资源占用过高\",{\"1\":{\"1208\":1}}],[\"容器资源利用与监控\",{\"1\":{\"1207\":1}}],[\"容器无法联网\",{\"1\":{\"1208\":1}}],[\"容器无法启动\",{\"1\":{\"1208\":1}}],[\"容器间网络通信与\",{\"1\":{\"1202\":1}}],[\"容器间的通信与链接\",{\"1\":{\"1201\":1}}],[\"容器的性能优化\",{\"1\":{\"1207\":1}}],[\"容器的调度与自动化\",{\"1\":{\"1206\":1}}],[\"容器的调试与问题排查\",{\"1\":{\"1201\":1}}],[\"容器的生命周期管理\",{\"1\":{\"1201\":1}}],[\"容器的日志管理\",{\"1\":{\"1201\":1}}],[\"容器的资源限制\",{\"1\":{\"1201\":1}}],[\"容器的id\",{\"1\":{\"1188\":1}}],[\"容器之间无法访问\",{\"1\":{\"1198\":1}}],[\"容器和宿主机共享network\",{\"1\":{\"1197\":1}}],[\"容器和另外一个容器共享network\",{\"1\":{\"1197\":1}}],[\"容器删除后再次启动\",{\"1\":{\"1195\":1}}],[\"容器外本地可以ping到容器里面\",{\"1\":{\"1194\":1}}],[\"容器数据卷\",{\"0\":{\"1199\":1},\"1\":{\"1193\":1}}],[\"容器构建时需要运行的命令\",{\"1\":{\"1193\":1}}],[\"容器内的文件\",{\"1\":{\"1189\":1}}],[\"容器内的端口\",{\"1\":{\"1188\":1}}],[\"容器内开启一个新进程\",{\"1\":{\"1189\":1}}],[\"容器名\",{\"1\":{\"1188\":1,\"1194\":1}}],[\"容器交互的方式启动\",{\"1\":{\"1188\":1}}],[\"容器后台运行\",{\"1\":{\"1188\":1}}],[\"容器命令\",{\"0\":{\"1188\":1}}],[\"容器这几个概念\",{\"1\":{\"1183\":1}}],[\"容器提供了应用级别的隔离\",{\"1\":{\"1181\":1}}],[\"容器比虚拟机更轻量级\",{\"1\":{\"1181\":1}}],[\"容器运行端口\",{\"1\":{\"775\":1}}],[\"容器化环境\",{\"1\":{\"641\":1}}],[\"容器化部署可用很容易解决上面的问题\",{\"1\":{\"1212\":1}}],[\"容器化部署与自动化运维\",{\"1\":{\"1204\":1}}],[\"容器化部署\",{\"1\":{\"638\":1}}],[\"容器化\",{\"1\":{\"637\":1}}],[\"容器化平台\",{\"1\":{\"166\":1}}],[\"容器\",{\"1\":{\"127\":1,\"1182\":1,\"1183\":1,\"1189\":5}}],[\"全面的话可分四种情况\",{\"1\":{\"1279\":1}}],[\"全部业务\",{\"1\":{\"1198\":1}}],[\"全部在纯go中进行\",{\"1\":{\"128\":1}}],[\"全量备份\",{\"1\":{\"988\":1}}],[\"全值匹配\",{\"1\":{\"818\":1}}],[\"全表遍历\",{\"1\":{\"788\":1}}],[\"全表扫描\",{\"1\":{\"595\":1,\"653\":1,\"667\":1}}],[\"全文\",{\"1\":{\"817\":1}}],[\"全文索引fulltext\",{\"1\":{\"809\":1}}],[\"全文索引底层怎么实现的\",{\"1\":{\"585\":1,\"657\":1}}],[\"全文本\",{\"1\":{\"717\":1}}],[\"全局解释器锁\",{\"1\":{\"645\":1}}],[\"全局变量\",{\"1\":{\"635\":1}}],[\"全局访问\",{\"1\":{\"526\":1}}],[\"全民k歌\",{\"1\":{\"575\":1,\"647\":1}}],[\"全球有大量开发者参与其中\",{\"1\":{\"166\":1}}],[\"全栈web应用\",{\"1\":{\"116\":1}}],[\"易用性\",{\"1\":{\"1057\":1}}],[\"易用\",{\"1\":{\"1053\":1}}],[\"易于生成客户端和服务端代码\",{\"1\":{\"637\":1}}],[\"易于使用\",{\"1\":{\"542\":1}}],[\"易于使用的tensorflow绑定\",{\"1\":{\"142\":1}}],[\"易于使用的可扩展的分布式大数据处理\",{\"1\":{\"128\":1}}],[\"易于调试\",{\"1\":{\"388\":1}}],[\"易学易用\",{\"1\":{\"150\":1}}],[\"易操作\",{\"1\":{\"11\":1}}],[\"单文件\",{\"1\":{\"1281\":1}}],[\"单位\",{\"1\":{\"1307\":2}}],[\"单位为秒\",{\"1\":{\"1133\":1}}],[\"单位是毫秒\",{\"1\":{\"1003\":1,\"1004\":3,\"1010\":1}}],[\"单机是否可以完成部署\",{\"1\":{\"1072\":1}}],[\"单机和集群\",{\"1\":{\"1072\":3}}],[\"单机支持队列数\",{\"1\":{\"1057\":1}}],[\"单机吞吐\",{\"1\":{\"1057\":1}}],[\"单机吞吐量\",{\"1\":{\"1054\":1}}],[\"单机写入tps约在百万条\",{\"1\":{\"1055\":2}}],[\"单机集群\",{\"0\":{\"1010\":1},\"1\":{\"1011\":1}}],[\"单机可以支撑并发量几万到十几万\",{\"1\":{\"960\":1}}],[\"单版本配置sentinel哨兵\",{\"0\":{\"1003\":1}}],[\"单纯的主从存在不具备自动恢复的功能\",{\"1\":{\"995\":1}}],[\"单纯的使用标签是没有任何意义的\",{\"1\":{\"231\":1}}],[\"单线程简单\",{\"1\":{\"959\":1}}],[\"单数据保存\",{\"0\":{\"880\":1}}],[\"单个参数获取\",{\"1\":{\"1280\":1}}],[\"单个ip\",{\"1\":{\"1156\":1}}],[\"单个topic拆分几段\",{\"1\":{\"1062\":1}}],[\"单个topic还是有点多\",{\"1\":{\"1062\":1}}],[\"单个消费者\",{\"1\":{\"1047\":1}}],[\"单个访问\",{\"1\":{\"927\":1}}],[\"单个设置\",{\"1\":{\"927\":1}}],[\"单个删除\",{\"1\":{\"883\":1}}],[\"单个更新\",{\"1\":{\"882\":1}}],[\"单个节点可以存储更多的数据\",{\"1\":{\"805\":1}}],[\"单个表上的索引个数\",{\"1\":{\"795\":1}}],[\"单个表到达多大要进行拆分\",{\"1\":{\"613\":1,\"685\":1}}],[\"单个字段不可再分\",{\"1\":{\"789\":1}}],[\"单表的规模一般要保持在千万级别\",{\"1\":{\"791\":1}}],[\"单表的字段数量也不能太多\",{\"1\":{\"788\":1}}],[\"单表的字段应该少而精\",{\"1\":{\"785\":1}}],[\"单表不超20个char\",{\"1\":{\"788\":1}}],[\"单表不超50个纯int字段\",{\"1\":{\"788\":1}}],[\"单行不超过200byte\",{\"1\":{\"788\":1}}],[\"单行写\",{\"1\":{\"510\":1}}],[\"单关键词搜索\",{\"0\":{\"760\":1}}],[\"单进程多线程适合\",{\"1\":{\"645\":1}}],[\"单点登录\",{\"1\":{\"639\":1}}],[\"单链表判断有没有环\",{\"1\":{\"579\":1,\"651\":1}}],[\"单例模式\",{\"1\":{\"565\":1,\"637\":3,\"654\":1}}],[\"单值断言\",{\"1\":{\"516\":1}}],[\"单测程序\",{\"1\":{\"503\":1}}],[\"单元素查找是从根一直查找到叶子结点\",{\"1\":{\"805\":1}}],[\"单元的大小定义取决于开发者\",{\"1\":{\"471\":1}}],[\"单元测试就是业务逻辑\",{\"1\":{\"480\":1}}],[\"单元测试就是对软件中的最小可测试单元进行测试\",{\"1\":{\"471\":1}}],[\"单元测试基础必备\",{\"0\":{\"479\":1}}],[\"单元测试是testxxxx\",{\"1\":{\"467\":1}}],[\"单元测试\",{\"0\":{\"471\":1},\"1\":{\"466\":1}}],[\"单向管道通常是用来限制通道的行为\",{\"1\":{\"419\":1}}],[\"单向管道指的是只读或只写的管道\",{\"1\":{\"419\":1}}],[\"单向管道\",{\"0\":{\"419\":1}}],[\"单体项目量不大\",{\"1\":{\"625\":1,\"697\":1}}],[\"单体web项目我比较推荐参考该项目进行学习\",{\"1\":{\"330\":1}}],[\"单体应用多层异常处理原则\",{\"1\":{\"610\":1,\"682\":1}}],[\"单体应用\",{\"1\":{\"111\":1}}],[\"单引号转义\",{\"1\":{\"185\":1}}],[\"单一可执行文件\",{\"0\":{\"156\":1}}],[\"单独运行或分发\",{\"1\":{\"128\":1}}],[\"空闲连接\",{\"1\":{\"911\":1}}],[\"空数组\",{\"1\":{\"725\":1}}],[\"空字符串\",{\"1\":{\"722\":1}}],[\"空间索引都不能做覆盖索引\",{\"1\":{\"817\":1}}],[\"空间利用率提高\",{\"1\":{\"603\":1,\"675\":1}}],[\"空间不足\",{\"0\":{\"319\":1}}],[\"空struct用途\",{\"1\":{\"579\":1,\"651\":2}}],[\"空切片\",{\"1\":{\"534\":1}}],[\"空集就是没有交集\",{\"1\":{\"340\":1}}],[\"空集\",{\"1\":{\"340\":1}}],[\"空接口的别名\",{\"1\":{\"516\":1}}],[\"空接口类型可以代表所有的类型\",{\"1\":{\"386\":1}}],[\"空接口就是连接go类型系统与反射的桥梁\",{\"1\":{\"348\":1}}],[\"空接口是所有类型集的集合\",{\"1\":{\"340\":1}}],[\"空接口与空集并不同\",{\"1\":{\"340\":1}}],[\"空接口\",{\"0\":{\"294\":1},\"1\":{\"340\":1,\"516\":2}}],[\"空结构体不会占用内存\",{\"1\":{\"651\":1}}],[\"空结构体不占内存空间\",{\"1\":{\"513\":1}}],[\"空结构体作为信号量标志\",{\"1\":{\"651\":1}}],[\"空结构体通常用于以下场景\",{\"1\":{\"651\":1}}],[\"空结构体的使用场景有很多\",{\"1\":{\"274\":1}}],[\"空结构体没有字段\",{\"1\":{\"274\":1}}],[\"空结构体\",{\"0\":{\"274\":1},\"1\":{\"513\":1,\"651\":1}}],[\"空类型\",{\"1\":{\"127\":1}}],[\"空格\",{\"1\":{\"58\":1}}],[\"映射到的结构体\",{\"1\":{\"1303\":1}}],[\"映射和通道\",{\"1\":{\"654\":1}}],[\"映射map\",{\"0\":{\"512\":1}}],[\"映射表有一个图映射角色到操作\",{\"1\":{\"1266\":1}}],[\"映射表其中之一\",{\"1\":{\"352\":1}}],[\"映射表数据结构实现通常有两种\",{\"1\":{\"258\":1}}],[\"映射表\",{\"1\":{\"201\":1,\"202\":1,\"234\":1,\"277\":1,\"379\":1}}],[\"映射\",{\"1\":{\"127\":1,\"529\":1}}],[\"围棋utp微传输协议的实现\",{\"1\":{\"145\":1}}],[\"围棋实现了高性能\",{\"1\":{\"127\":1}}],[\"围绕sql提供了一个通用的接口\",{\"1\":{\"124\":1}}],[\"出错的时候进行访问的页面\",{\"1\":{\"1123\":1}}],[\"出生日期\",{\"1\":{\"603\":1,\"675\":1}}],[\"出生日明\",{\"1\":{\"603\":1,\"675\":1}}],[\"出现在这里仅仅只是为了文档目的\",{\"1\":{\"1438\":1,\"1439\":1}}],[\"出现死锁\",{\"1\":{\"634\":1}}],[\"出现了比如oom的情况\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"出现的地方\",{\"1\":{\"346\":1}}],[\"出队\",{\"1\":{\"516\":1}}],[\"出安全考虑\",{\"1\":{\"312\":1}}],[\"出哈希以防止将id发送给客户端\",{\"1\":{\"127\":1}}],[\"出来以后毕竟是一个人做的\",{\"1\":{\"12\":1}}],[\"出来了\",{\"1\":{\"12\":1}}],[\"树的层级和高度就越低\",{\"1\":{\"803\":1}}],[\"树的范围查询\",{\"1\":{\"649\":1}}],[\"树的所有叶子节点都在同一层次\",{\"1\":{\"649\":1}}],[\"树中\",{\"1\":{\"649\":2}}],[\"树中节点孩子的数量就是集合的大小\",{\"1\":{\"4\":1}}],[\"树形结构\",{\"1\":{\"638\":1}}],[\"树\",{\"1\":{\"127\":1,\"649\":4}}],[\"列中\",{\"1\":{\"1053\":1}}],[\"列的完整长度\",{\"1\":{\"815\":1}}],[\"列名和列类型必须一致\",{\"1\":{\"794\":1}}],[\"列名禁止使用关键字\",{\"1\":{\"794\":1}}],[\"列\",{\"1\":{\"778\":1,\"794\":1,\"848\":1}}],[\"列表list\",{\"0\":{\"971\":1}}],[\"列表\",{\"0\":{\"933\":1},\"1\":{\"127\":1,\"641\":2}}],[\"列出regexp匹配的测试用例\",{\"1\":{\"469\":1}}],[\"列出模块\",{\"1\":{\"456\":1}}],[\"列出所有tag\",{\"1\":{\"58\":1}}],[\"列出所有远程分支\",{\"1\":{\"58\":1}}],[\"列出所有本地分支和远程分支\",{\"1\":{\"58\":1}}],[\"列出所有本地分支\",{\"1\":{\"58\":1}}],[\"列出\",{\"1\":{\"56\":1}}],[\"列出指定的每一个远程服务器的简写\",{\"1\":{\"56\":1}}],[\"值只能设置\",{\"1\":{\"1151\":1}}],[\"值为\",{\"1\":{\"1133\":4}}],[\"值为整型的映射表\",{\"1\":{\"201\":1}}],[\"值越大越好\",{\"1\":{\"814\":1}}],[\"值分为三种情况\",{\"1\":{\"814\":1}}],[\"值过多虽然上线很\",{\"1\":{\"796\":1}}],[\"值是不是\",{\"1\":{\"780\":1}}],[\"值是否相等\",{\"1\":{\"294\":2}}],[\"值可重复\",{\"1\":{\"638\":1}}],[\"值传递\",{\"1\":{\"633\":1}}],[\"值类型不能使用make函数编译会报错\",{\"1\":{\"533\":1}}],[\"值类型go默认提供零值可直接使用\",{\"1\":{\"532\":1}}],[\"值类型\",{\"0\":{\"528\":1},\"1\":{\"529\":1}}],[\"值类型和引用类型分别有哪些\",{\"1\":{\"527\":1}}],[\"值的类型约束为v\",{\"1\":{\"338\":1}}],[\"值接收者和指针接收者也是同样的道理\",{\"1\":{\"287\":1}}],[\"值接收者和指针接收者\",{\"1\":{\"286\":1}}],[\"值接收者\",{\"0\":{\"286\":1},\"1\":{\"515\":1}}],[\"值得一提的是\",{\"1\":{\"263\":1,\"279\":1}}],[\"值得我们去学习\",{\"1\":{\"79\":1}}],[\"值\",{\"0\":{\"357\":1},\"1\":{\"243\":3,\"554\":1,\"972\":1,\"1165\":1}}],[\"值就是\",{\"1\":{\"180\":1}}],[\"值就是什么\",{\"1\":{\"180\":1}}],[\"值对的地图\",{\"1\":{\"127\":1}}],[\"值存储\",{\"1\":{\"127\":1}}],[\"迷你音频库\",{\"1\":{\"126\":1}}],[\"该类型与uintptr结合使用\",{\"1\":{\"1443\":1}}],[\"该类型也仅有这一个方法\",{\"1\":{\"351\":1}}],[\"该级别以下的日志不会再通过syncer输出\",{\"1\":{\"1302\":1}}],[\"该模块可以根据配置参数采取不同的⽅式将请求均匀映射到后端机器\",{\"1\":{\"1165\":1}}],[\"该模式可包装进低级的块加密实现中\",{\"1\":{\"124\":1}}],[\"该变量的值即为cookie名称的值\",{\"1\":{\"1133\":1}}],[\"该值为空字符串\",{\"1\":{\"1133\":1}}],[\"该密码与主服务器密码相同\",{\"1\":{\"1000\":1}}],[\"该集群仍然可以正常运转\",{\"1\":{\"996\":1}}],[\"该文件具有以下特点\",{\"1\":{\"985\":1}}],[\"该文件存储了服务器执行过的所有修改命令\",{\"1\":{\"984\":1}}],[\"该子进程与父进程享有相同的地址空间\",{\"1\":{\"980\":1}}],[\"该命令用于在\",{\"1\":{\"967\":1}}],[\"该插件就会去抓取新的分词进而更新词库\",{\"1\":{\"743\":1}}],[\"该\",{\"1\":{\"743\":2}}],[\"该请求只需满足以下两点即可完成分词热更新\",{\"1\":{\"743\":1}}],[\"该题目需要计算下雨后能够积水的总量\",{\"1\":{\"656\":1}}],[\"该查询慢的原因可能是\",{\"1\":{\"653\":1}}],[\"该语句为什么查询慢\",{\"1\":{\"581\":1,\"653\":1}}],[\"该工具便是为了解决性能分析问题而生\",{\"1\":{\"476\":1}}],[\"该工具使用起来十分方便\",{\"1\":{\"466\":1}}],[\"该包可能不具有移植性\",{\"1\":{\"1437\":1}}],[\"该包提供的操作可以直接跳过go的类型系统从而读写内存\",{\"1\":{\"1437\":1}}],[\"该包在⽂件顶部使⽤以下命令声明\",{\"1\":{\"525\":1}}],[\"该包通常是为了存储用于测试的辅助数据\",{\"1\":{\"467\":1}}],[\"该包装程序捕获了调用它的文件\",{\"1\":{\"131\":1}}],[\"该版本的go\",{\"1\":{\"460\":1}}],[\"该目录下一定有一个list文件\",{\"1\":{\"460\":1}}],[\"该目录根据域名来划分不同网站的依赖包\",{\"1\":{\"460\":1}}],[\"该关键字仅在主模块中才生效\",{\"1\":{\"459\":1}}],[\"该例开启了3个写协程\",{\"1\":{\"431\":1}}],[\"该例输出的结果为\",{\"1\":{\"221\":1}}],[\"该上下文的任何子级也会随之取消\",{\"1\":{\"427\":1}}],[\"该通道就会被关闭\",{\"1\":{\"424\":1}}],[\"该管道仅仅起到通知作用\",{\"1\":{\"424\":1}}],[\"该方法签名如下\",{\"1\":{\"473\":1}}],[\"该方法返回对应的键值\",{\"1\":{\"424\":1}}],[\"该方法返回一个error\",{\"1\":{\"424\":1}}],[\"该方法具有两个返回值\",{\"1\":{\"424\":1}}],[\"该方法的返回值是字符串\",{\"1\":{\"389\":1}}],[\"该结构体只对外暴露三个方法\",{\"1\":{\"422\":1}}],[\"该结构体中最大的是int64占用8个字节\",{\"1\":{\"273\":1}}],[\"该case则会被忽略\",{\"1\":{\"421\":1}}],[\"该接口下只有一个方法error\",{\"1\":{\"389\":1}}],[\"该函数接收一个切片\",{\"1\":{\"1445\":1}}],[\"该函数用于表示结构体内字段偏移量\",{\"1\":{\"1441\":1}}],[\"该函数会在测试用例结束时执行\",{\"1\":{\"471\":1}}],[\"该函数会将采集到的数据写入到指定文件中\",{\"1\":{\"323\":1}}],[\"该函数中展现了deadlinecontext的基本使用方法\",{\"1\":{\"470\":1}}],[\"该函数配合select使用可以非常简单的实现超时机制\",{\"1\":{\"421\":1}}],[\"该函数签名如下\",{\"1\":{\"414\":1}}],[\"该函数对于文件夹也是同样的效果\",{\"1\":{\"404\":1}}],[\"该函数对于每一种基础类型都做了处理\",{\"1\":{\"379\":1}}],[\"该函数默认会将参数输出到标准输出中\",{\"1\":{\"219\":1}}],[\"该字符串的内存是由go进行管理的\",{\"1\":{\"303\":1}}],[\"该指令会考虑到nan的情况\",{\"1\":{\"261\":1}}],[\"该特性于go1\",{\"1\":{\"250\":1}}],[\"该格式化工具没有任何的格式化参数可以传递\",{\"1\":{\"188\":1}}],[\"该转义仅在字符串内有效\",{\"1\":{\"185\":1}}],[\"该转义仅在字符内有效\",{\"1\":{\"185\":1}}],[\"该数据的格式正是pprof可视化工具需要的\",{\"1\":{\"124\":1}}],[\"大于等于\",{\"1\":{\"1420\":1}}],[\"大于\",{\"1\":{\"1420\":1}}],[\"大于或等于64mb自动触发\",{\"1\":{\"985\":1}}],[\"大写e的十进制指数\",{\"1\":{\"1390\":1}}],[\"大\",{\"1\":{\"1309\":1}}],[\"大都是多种策略结合使用以达到实际需求\",{\"1\":{\"1169\":1}}],[\"大规模日志处理\",{\"1\":{\"1057\":1}}],[\"大量的消息积压是一种不正常的情况\",{\"1\":{\"1053\":1}}],[\"大量缓存同时失效\",{\"1\":{\"636\":1}}],[\"大家公司项目部署的业务都非常多\",{\"1\":{\"1198\":1}}],[\"大家应该使用过navicat\",{\"1\":{\"876\":1}}],[\"大家也可以找到之前的robomongo\",{\"1\":{\"875\":1}}],[\"大家都知道\",{\"1\":{\"791\":1}}],[\"大大提升查找效率\",{\"1\":{\"805\":1}}],[\"大大减少了内存泄漏和野指针的风险\",{\"1\":{\"152\":1}}],[\"大影响\",{\"1\":{\"796\":1}}],[\"大批量\",{\"1\":{\"790\":1}}],[\"大sql\",{\"1\":{\"790\":1}}],[\"大事务\",{\"1\":{\"785\":1,\"790\":1}}],[\"大端\",{\"1\":{\"651\":1}}],[\"大端编码\",{\"1\":{\"651\":1}}],[\"大文件分成多个小块\",{\"1\":{\"634\":1}}],[\"大顶堆如何转换为一个小顶堆\",{\"1\":{\"620\":1,\"692\":1}}],[\"大顶堆和小顶堆的使用场景\",{\"1\":{\"620\":1,\"692\":1}}],[\"大模型这块有了解过相关的技术或者产品吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"大厂面试题\",{\"0\":{\"560\":1}}],[\"大致都是一样的\",{\"1\":{\"1302\":1}}],[\"大致估算出找到所需的记录所需要读取的行数\",{\"1\":{\"814\":1}}],[\"大致的过程\",{\"1\":{\"551\":1}}],[\"大致如下\",{\"1\":{\"460\":1}}],[\"大概率是不满意不想继续聊了\",{\"1\":{\"520\":1}}],[\"大概第一眼就可以知道这是一个函数\",{\"1\":{\"382\":1}}],[\"大小写转换\",{\"0\":{\"1409\":1}}],[\"大小写不敏感\",{\"1\":{\"813\":1}}],[\"大小为编译时已知\",{\"1\":{\"635\":1}}],[\"大小为0直接会跳过\",{\"1\":{\"511\":1}}],[\"大小分割成多个文件\",{\"1\":{\"633\":1}}],[\"大小的倍数\",{\"1\":{\"554\":1}}],[\"大小\",{\"1\":{\"511\":1,\"516\":1,\"1187\":1}}],[\"大小就是4字节大小\",{\"1\":{\"511\":1}}],[\"大小是有一定规律的\",{\"1\":{\"244\":1}}],[\"大部分可以直接开箱即用\",{\"1\":{\"1375\":1}}],[\"大部分对象在新生代被回收\",{\"1\":{\"638\":1}}],[\"大部分场景下\",{\"1\":{\"635\":1}}],[\"大部分开源项目都是在托管在gitub上的\",{\"1\":{\"459\":1}}],[\"大部分情况\",{\"1\":{\"390\":1}}],[\"大部分情况下都很容易读懂代码\",{\"1\":{\"388\":1}}],[\"大部分情况下会以c为主导\",{\"1\":{\"307\":1}}],[\"大部分情况下\",{\"1\":{\"301\":1}}],[\"大部分情况下可以通过\",{\"1\":{\"301\":1}}],[\"大体意思都差不多\",{\"1\":{\"458\":1}}],[\"大内存\",{\"1\":{\"435\":1}}],[\"大多数功能都是通过函数来实现的\",{\"1\":{\"1420\":1}}],[\"大多数读操作是无锁的\",{\"1\":{\"558\":1}}],[\"大多数情况第一种使用的较多\",{\"1\":{\"401\":1}}],[\"大多数情况都是被动触发\",{\"1\":{\"398\":1}}],[\"大多数情况下使用默认的处理器defaultservemux即可\",{\"1\":{\"1335\":1}}],[\"大多数情况下\",{\"1\":{\"440\":1,\"515\":1}}],[\"大多数情况下这些问题隐藏的十分隐蔽\",{\"1\":{\"418\":1}}],[\"大多数情况下应该对其进行处理\",{\"1\":{\"389\":1}}],[\"大多数情况下采用如下的方式来实例化结构体\",{\"1\":{\"268\":1}}],[\"大多数时候我们也无需太过于专注内存分配的细节\",{\"1\":{\"320\":1}}],[\"大数高精度计算包\",{\"1\":{\"1308\":1}}],[\"大数\",{\"1\":{\"124\":1}}],[\"大型项目有大量写就需要cluster\",{\"1\":{\"1005\":1}}],[\"大型项目也基本是使用微服务架构的\",{\"1\":{\"119\":1}}],[\"大型项目推荐beego\",{\"1\":{\"119\":1}}],[\"接着\",{\"1\":{\"1033\":1}}],[\"接受并分析字符串值\",{\"1\":{\"733\":1}}],[\"接受者方式\",{\"1\":{\"515\":1}}],[\"接雨水\",{\"1\":{\"584\":1,\"656\":2}}],[\"接下来就一步一步的来解决问题\",{\"1\":{\"1303\":1}}],[\"接下来就说下b+树的特点\",{\"1\":{\"805\":1}}],[\"接下来我们要做的就是这件事\",{\"1\":{\"1432\":1}}],[\"接下来我们来看一下\",{\"1\":{\"1165\":1}}],[\"接下来我们看一下\",{\"1\":{\"1165\":1}}],[\"接下来我们修正\",{\"1\":{\"491\":1}}],[\"接下来\",{\"1\":{\"1002\":1}}],[\"接下来直接运行根据上次模糊测试失败的用例\",{\"1\":{\"477\":1}}],[\"接下来执行测试命令看看结果\",{\"1\":{\"470\":1}}],[\"接下来运行auth模块中的代码\",{\"1\":{\"463\":1}}],[\"接下来看看下载一个依赖时\",{\"1\":{\"460\":1}}],[\"接下来看一个并发使用map的例子\",{\"1\":{\"436\":1}}],[\"接下来安装一个第三方依赖试试\",{\"1\":{\"452\":1}}],[\"接下来继续编写一个命令行程序用于输出hello\",{\"1\":{\"446\":1}}],[\"接下来使用cas改造一下\",{\"1\":{\"440\":1}}],[\"接下来使用gcc来制作动态链接库\",{\"1\":{\"312\":1}}],[\"接下来都会一一介绍\",{\"1\":{\"389\":1}}],[\"接下来将会讲解这三种情况\",{\"1\":{\"340\":1}}],[\"接下来会用go描述上述情形\",{\"1\":{\"293\":1}}],[\"接下来逐个讲解\",{\"1\":{\"287\":1}}],[\"接下来创建选项函数\",{\"1\":{\"269\":1}}],[\"接收一个字节类型指针\",{\"1\":{\"1448\":1}}],[\"接收端根据分隔符识别包边界\",{\"1\":{\"636\":1}}],[\"接收方会向发送方告知自己可以接收的数据量\",{\"1\":{\"636\":1}}],[\"接收方确认接收到数据后发送\",{\"1\":{\"636\":1}}],[\"接收方只有在缓冲区为空时才会阻塞\",{\"1\":{\"635\":1}}],[\"接收操作会继续读取数据直到缓冲区为空\",{\"1\":{\"633\":1}}],[\"接收操作阻塞\",{\"1\":{\"535\":1}}],[\"接收登录请求是http吗\",{\"1\":{\"592\":1,\"664\":1}}],[\"接收的第一个参数是类型\",{\"1\":{\"277\":1}}],[\"接收参数是类型\",{\"1\":{\"277\":1}}],[\"接收两个参数\",{\"1\":{\"259\":1}}],[\"接收类型\",{\"1\":{\"221\":1}}],[\"接收者是较大的数据结构\",{\"1\":{\"515\":1}}],[\"接收者是小数据结构\",{\"1\":{\"515\":1}}],[\"接收者也不例外\",{\"1\":{\"287\":1}}],[\"接收者也分两种类型\",{\"1\":{\"286\":1}}],[\"接收者就类似于其他语言中的this或self\",{\"1\":{\"285\":1}}],[\"接收者\",{\"1\":{\"124\":1}}],[\"接口则提供了类似于多态和抽象的功能\",{\"1\":{\"651\":1}}],[\"接口允许不同模块之间没有直接的依赖\",{\"1\":{\"651\":1}}],[\"接口在go中主要用于实现多态和解耦\",{\"1\":{\"651\":1}}],[\"接口定义语言\",{\"1\":{\"637\":1}}],[\"接口定义为\",{\"1\":{\"289\":1}}],[\"接口实现是隐式的\",{\"1\":{\"637\":1}}],[\"接口实现的定义为\",{\"1\":{\"289\":2}}],[\"接口与非\",{\"1\":{\"635\":1}}],[\"接口值为\",{\"1\":{\"635\":1}}],[\"接口值是比较的对象时\",{\"1\":{\"635\":1}}],[\"接口内部的类型和值都必须相同\",{\"1\":{\"635\":1}}],[\"接口是不同的\",{\"1\":{\"635\":1}}],[\"接口是\",{\"1\":{\"635\":1}}],[\"接口是一个非常重要的概念\",{\"1\":{\"288\":1}}],[\"接口缓存\",{\"1\":{\"633\":1}}],[\"接口性能如何优化\",{\"1\":{\"561\":1,\"617\":1,\"633\":2,\"689\":1}}],[\"接口的具体类型完全相等时\",{\"1\":{\"379\":1}}],[\"接口的定义变为了类型集\",{\"1\":{\"340\":1}}],[\"接口类型的约束\",{\"1\":{\"516\":1}}],[\"接口类型如下\",{\"1\":{\"427\":1}}],[\"接口类型\",{\"1\":{\"347\":1,\"516\":1}}],[\"接口类型signedint是一个类型集\",{\"1\":{\"340\":1}}],[\"接口本质上是结构体\",{\"1\":{\"347\":1}}],[\"接口\",{\"0\":{\"288\":1,\"347\":1,\"516\":1},\"1\":{\"201\":1,\"202\":1,\"210\":1,\"294\":1,\"379\":1,\"529\":1,\"635\":1,\"639\":1}}],[\"接口为unix风格\",{\"1\":{\"121\":1}}],[\"发现主服务器出现了故障\",{\"1\":{\"998\":1}}],[\"发现p的本地队列为空\",{\"1\":{\"542\":1}}],[\"发展时间线\",{\"1\":{\"724\":1}}],[\"发展了很多年都没有干过其他软件\",{\"1\":{\"12\":1}}],[\"发布订阅模式\",{\"1\":{\"996\":1}}],[\"发布订阅\",{\"0\":{\"953\":1}}],[\"发布时间\",{\"1\":{\"756\":1}}],[\"发布状态\",{\"1\":{\"746\":1}}],[\"发布\",{\"1\":{\"634\":1,\"1018\":1}}],[\"发布新版本\",{\"1\":{\"463\":1}}],[\"发布到postgis和geoserver\",{\"1\":{\"135\":1}}],[\"发送消息\",{\"1\":{\"1035\":1}}],[\"发送消息到leader所在的broker\",{\"1\":{\"1021\":1}}],[\"发送消息到指定频道\",{\"1\":{\"953\":1}}],[\"发送写命令\",{\"1\":{\"984\":1}}],[\"发送\",{\"1\":{\"638\":1}}],[\"发送方根据接收方的反馈调整发送的数据量\",{\"1\":{\"636\":1}}],[\"发送方只有在缓冲区满时才会阻塞\",{\"1\":{\"635\":1}}],[\"发送方的协程和接收方的协程必须是同步\",{\"1\":{\"544\":1}}],[\"发送验证码邮件\",{\"1\":{\"634\":1}}],[\"发送操作会阻塞\",{\"1\":{\"635\":1}}],[\"发送操作会阻塞直到另一个\",{\"1\":{\"633\":1}}],[\"发送操作只有在缓冲区已满时才会阻塞\",{\"1\":{\"633\":1}}],[\"发送操作阻塞\",{\"1\":{\"535\":1}}],[\"发送客户\",{\"1\":{\"625\":1,\"697\":1}}],[\"发送和接收操作是同步的\",{\"1\":{\"535\":1}}],[\"发送数据或读取数据\",{\"1\":{\"1374\":1}}],[\"发送数据包时固定每个包的长度\",{\"1\":{\"636\":1}}],[\"发送数据\",{\"1\":{\"418\":1,\"419\":1,\"1374\":1}}],[\"发送者\",{\"1\":{\"124\":1}}],[\"发生意外\",{\"1\":{\"996\":1}}],[\"发生磁盘的io会越频繁\",{\"1\":{\"802\":1}}],[\"发生在\",{\"1\":{\"635\":1}}],[\"发生的原因包括消费者重复读取已提交的消息\",{\"1\":{\"634\":1}}],[\"发生这种情况时\",{\"1\":{\"459\":1,\"460\":1}}],[\"发生错误时\",{\"1\":{\"401\":1}}],[\"发生panic\",{\"1\":{\"397\":4}}],[\"发生panic时后续的逻辑将无法执行\",{\"1\":{\"396\":1}}],[\"访问控制模型被抽象为基于perm元模型\",{\"1\":{\"1249\":1}}],[\"访问控制列表\",{\"1\":{\"1238\":1,\"1239\":1}}],[\"访问页面方式\",{\"1\":{\"1229\":1}}],[\"访问怎么解决\",{\"1\":{\"1194\":1}}],[\"访问地址\",{\"1\":{\"1166\":1}}],[\"访问不到了\",{\"1\":{\"1165\":1}}],[\"访问路径\",{\"1\":{\"1143\":1}}],[\"访问生效\",{\"1\":{\"1123\":1}}],[\"访问虚拟机所处内网ip即可打开nginx默认页面\",{\"0\":{\"1120\":1}}],[\"访问测试\",{\"0\":{\"1086\":1}}],[\"访问查看kong的节点信息\",{\"1\":{\"1078\":1}}],[\"访问当前redis服务密码\",{\"1\":{\"993\":1}}],[\"访问多的页面由磁盘自动换出到内存中\",{\"1\":{\"965\":1}}],[\"访问集合元素\",{\"0\":{\"940\":1}}],[\"访问指定范围内的元素\",{\"1\":{\"936\":1}}],[\"访问指定下标的元素\",{\"1\":{\"936\":1}}],[\"访问元素\",{\"0\":{\"936\":1,\"949\":1}}],[\"访问列表长度\",{\"1\":{\"935\":1}}],[\"访问长度\",{\"0\":{\"935\":1}}],[\"访问类型排列\",{\"1\":{\"814\":1}}],[\"访问计数\",{\"1\":{\"813\":1}}],[\"访问速度对于国内的用户不甚友好\",{\"1\":{\"451\":1}}],[\"访问数据\",{\"1\":{\"429\":1,\"430\":1}}],[\"访问方法信息示例如下\",{\"1\":{\"370\":1}}],[\"访问方法与访问字段的过程很相似\",{\"1\":{\"370\":1}}],[\"访问方法\",{\"0\":{\"370\":1},\"1\":{\"1251\":1}}],[\"访问tag\",{\"0\":{\"369\":1}}],[\"访问结构体字段的方法有两种\",{\"1\":{\"367\":1}}],[\"访问字段等\",{\"1\":{\"645\":1}}],[\"访问字段\",{\"0\":{\"367\":1}}],[\"访问一个map的方式就像通过索引访问一个数组一样\",{\"1\":{\"260\":1}}],[\"访问\",{\"0\":{\"253\":1,\"260\":1},\"1\":{\"649\":1,\"736\":1,\"1123\":1,\"1198\":1,\"1233\":1,\"1234\":1,\"1235\":1,\"1341\":1}}],[\"访问go语言二进制程序中的调试信息\",{\"1\":{\"124\":1}}],[\"访问开源项目\",{\"1\":{\"84\":1}}],[\"同slice函数\",{\"1\":{\"1448\":1}}],[\"同slicedata函数\",{\"1\":{\"1447\":1}}],[\"同sql包的使用方式\",{\"1\":{\"124\":1}}],[\"同\",{\"1\":{\"1133\":2}}],[\"同order\",{\"1\":{\"819\":1}}],[\"同一机\",{\"1\":{\"1020\":1}}],[\"同一局域网内注意要唯一\",{\"1\":{\"822\":1}}],[\"同一模块的表名尽量使用\",{\"1\":{\"794\":1}}],[\"同一个资源多次请求\",{\"1\":{\"1166\":1}}],[\"同一个消费者组的消费者可以消费同一个\",{\"1\":{\"1020\":1}}],[\"同一个topic在不同的分区的数据是不重复的\",{\"1\":{\"1020\":1}}],[\"同一个partition需要在不同broker上设置备份\",{\"1\":{\"1020\":1}}],[\"同一个ip\",{\"1\":{\"1011\":1}}],[\"同一个进程中的线程共享内存空间和资源\",{\"1\":{\"645\":1}}],[\"同一个机器上的所有go\",{\"1\":{\"457\":1}}],[\"同步生产者\",{\"1\":{\"1047\":1}}],[\"同步服务和命名注册\",{\"1\":{\"1021\":1}}],[\"同步数据完成\",{\"1\":{\"993\":1}}],[\"同步数据用户的密码\",{\"1\":{\"822\":1}}],[\"同步写命令\",{\"1\":{\"984\":1}}],[\"同步进行了\",{\"1\":{\"825\":1}}],[\"同步\",{\"1\":{\"633\":1}}],[\"同步工作区的模块依赖\",{\"1\":{\"464\":1}}],[\"同步原语的阻塞跟踪\",{\"1\":{\"324\":1}}],[\"同理\",{\"1\":{\"459\":1}}],[\"同命令top\",{\"1\":{\"327\":1}}],[\"同样也可以省略括号的写法\",{\"1\":{\"863\":1}}],[\"同样都是官方写的\",{\"1\":{\"393\":1}}],[\"同样会下载一个文件\",{\"1\":{\"324\":1}}],[\"同样的还有t\",{\"1\":{\"471\":1}}],[\"同样的os包也为此提供了方便函数\",{\"1\":{\"400\":1}}],[\"同样的也无法取地址\",{\"1\":{\"1443\":1}}],[\"同样的也无法在类型约束中并入\",{\"1\":{\"341\":1}}],[\"同样的也可以修改数组元素\",{\"1\":{\"240\":1}}],[\"同样的\",{\"1\":{\"289\":1,\"293\":1,\"341\":1,\"388\":1,\"417\":1,\"1434\":1}}],[\"同样可以省略\",{\"1\":{\"863\":1}}],[\"同样可以这样写\",{\"1\":{\"863\":1}}],[\"同样可以\",{\"1\":{\"287\":1}}],[\"同样是二维的数组和切片\",{\"1\":{\"249\":1}}],[\"同时docker网桥是每个容器的默认网关\",{\"1\":{\"1195\":1}}],[\"同时可以将不同目录挂载到同一个虚拟文件系统下\",{\"1\":{\"1192\":1}}],[\"同时可以通过线程池控制并发量\",{\"1\":{\"645\":1}}],[\"同时可以通过添加\",{\"1\":{\"505\":1}}],[\"同时限制连接到虚拟服务器的总数\",{\"1\":{\"1152\":1}}],[\"同时消耗cpu时间\",{\"1\":{\"1131\":1}}],[\"同时不希望有\",{\"1\":{\"1057\":1}}],[\"同时为发布和订阅提供高吞吐量\",{\"1\":{\"1018\":1}}],[\"同时为了更好的gc和安全考虑\",{\"1\":{\"274\":1}}],[\"同时设置一个或多个\",{\"1\":{\"970\":2}}],[\"同时还省去了多线程切换带来的时间和性能上的开销\",{\"1\":{\"959\":1}}],[\"同时还提供list\",{\"1\":{\"956\":1}}],[\"同时redis还支持对几个操作全并后的原子性执行\",{\"1\":{\"957\":1}}],[\"同时mongo还提供了findoneandupdate和findoneandreplace来获取文档和更新文档\",{\"1\":{\"836\":1}}],[\"同时存在\",{\"1\":{\"814\":1}}],[\"同时慢查询日志默认不记录管理语句和不使用索引进行查询的语句\",{\"1\":{\"813\":1}}],[\"同时却会降低更新表的速度\",{\"1\":{\"811\":1}}],[\"同时使用rdb和aof\",{\"1\":{\"651\":1}}],[\"同时访问的场景\",{\"1\":{\"649\":1}}],[\"同时读写同一个\",{\"1\":{\"649\":1}}],[\"同时读写一个普通的\",{\"1\":{\"635\":1}}],[\"同时更新缓存\",{\"1\":{\"641\":1}}],[\"同时要处理\",{\"1\":{\"637\":1}}],[\"同时向mysql中插入一条数据\",{\"1\":{\"581\":1,\"653\":2}}],[\"同时模块a的1\",{\"1\":{\"458\":1}}],[\"同时监测多个元素是否可用\",{\"1\":{\"421\":1}}],[\"同时panic也可以被恢复来保证程序继续运行\",{\"1\":{\"394\":1}}],[\"同时出现两个会更加进行细节的输出\",{\"1\":{\"317\":1}}],[\"同时修改头文件sum\",{\"1\":{\"300\":1}}],[\"同时需要确保环境变量cgo\",{\"1\":{\"297\":1}}],[\"同时接口也分为了两类\",{\"1\":{\"289\":1}}],[\"同时也支持多种持久化方案\",{\"1\":{\"1239\":1}}],[\"同时也提供了imap\",{\"1\":{\"1107\":1}}],[\"同时也会将数据同步至从节点服务器\",{\"1\":{\"990\":1}}],[\"同时也会发现目录下多了一个名为go\",{\"1\":{\"453\":1}}],[\"同时也只有一个协程能够读取管道中的数据\",{\"1\":{\"415\":1}}],[\"同时也必须声明管道的存储类型\",{\"1\":{\"413\":1}}],[\"同时也可以用于并发控制\",{\"1\":{\"413\":1}}],[\"同时也抛弃了构造方法\",{\"1\":{\"266\":1}}],[\"同时也是一个换源框架\",{\"1\":{\"77\":1}}],[\"同时if语句也可以包含一些简单的语句\",{\"1\":{\"228\":1}}],[\"同时去除了许多不必要的复杂性\",{\"1\":{\"148\":1}}],[\"同时都合并到主分支上\",{\"1\":{\"36\":1}}],[\"同时开发人员b\",{\"1\":{\"36\":1}}],[\"同时\",{\"1\":{\"30\":1}}],[\"以字节为单位返回变量x的大小\",{\"1\":{\"1440\":1}}],[\"以字段的名称或缩写作为后缀\",{\"1\":{\"795\":1}}],[\"以空格为分隔符\",{\"1\":{\"1420\":1}}],[\"以保证session会话\",{\"1\":{\"1164\":1}}],[\"以保证节点故障时数据不丢失\",{\"1\":{\"653\":1}}],[\"以某种字符路径开头请求\",{\"1\":{\"1144\":1}}],[\"以某种字符串开头的匹配规则\",{\"0\":{\"1144\":1}}],[\"以后\",{\"1\":{\"1085\":1}}],[\"以帮助开发人员理解和使用可用的端点\",{\"1\":{\"1071\":1}}],[\"以跟踪\",{\"1\":{\"1071\":1}}],[\"以防滥用\",{\"1\":{\"1071\":1}}],[\"以防万一\",{\"1\":{\"137\":1}}],[\"以匹配所需的格式或标准\",{\"1\":{\"1071\":1}}],[\"以提供之后对接的storm或其他流式计算框架进行处理\",{\"1\":{\"1019\":1}}],[\"以提高数据库的性能和可维护性\",{\"1\":{\"799\":1}}],[\"以8001为例\",{\"1\":{\"1010\":1}}],[\"以秒为单位\",{\"1\":{\"967\":2,\"970\":2}}],[\"以毫秒级精确的速度慢慢处理\",{\"1\":{\"1155\":1}}],[\"以毫秒为单位返回\",{\"1\":{\"967\":2}}],[\"以毫秒计\",{\"1\":{\"967\":1}}],[\"以系统管理员的身份运行powershell\",{\"0\":{\"866\":1}}],[\"以追加的方式记录日志\",{\"1\":{\"852\":1}}],[\"以备slave作为其它slave的master时使用\",{\"1\":{\"822\":2}}],[\"以几个常见的例子来进行说明\",{\"1\":{\"791\":1}}],[\"以往我们经常说要严格遵循三大范式\",{\"1\":{\"789\":1}}],[\"以获得更准确的性能结果\",{\"1\":{\"638\":1}}],[\"以获得更详细的错误细节\",{\"1\":{\"393\":1}}],[\"以适应当前网络状态\",{\"1\":{\"636\":1}}],[\"以减少字段数量\",{\"1\":{\"798\":1,\"799\":1}}],[\"以减少缓存不一致的时间窗口\",{\"1\":{\"644\":1}}],[\"以减少数据库的查询压力\",{\"1\":{\"638\":1}}],[\"以减少查找时间复杂度\",{\"1\":{\"634\":1}}],[\"以减少扩容次数\",{\"1\":{\"259\":1}}],[\"以避免接口的额外开销\",{\"1\":{\"633\":1}}],[\"以\",{\"1\":{\"481\":1,\"794\":2,\"1307\":1}}],[\"以json格式输出测试日志\",{\"1\":{\"469\":1}}],[\"以表示输出结果是上一次的缓存\",{\"1\":{\"468\":1}}],[\"以便输出不同的样式\",{\"1\":{\"1390\":1}}],[\"以便为后\",{\"1\":{\"1025\":1}}],[\"以便优化和故障排查\",{\"1\":{\"655\":1}}],[\"以便后续处理\",{\"1\":{\"638\":1}}],[\"以便在全局可以执行该二进制文件\",{\"1\":{\"454\":1}}],[\"以便更轻松地处理和取消goroutine\",{\"1\":{\"137\":1}}],[\"以同步io的方式打开文件\",{\"1\":{\"400\":1}}],[\"以读写的模式打开文件\",{\"1\":{\"400\":1}}],[\"以只写的方式打开副本文件\",{\"1\":{\"403\":2}}],[\"以只写的模式打开文件\",{\"1\":{\"400\":1}}],[\"以只读的方式打开原文件\",{\"1\":{\"403\":2}}],[\"以只读的模式打开文件\",{\"1\":{\"400\":1}}],[\"以满足不同的错误需求\",{\"1\":{\"391\":1}}],[\"以string为例\",{\"1\":{\"373\":1}}],[\"以指针为例子\",{\"1\":{\"359\":1}}],[\"以下为对比表格\",{\"1\":{\"1309\":1}}],[\"以下是一些mongodb的应用场景\",{\"1\":{\"843\":1}}],[\"以下两个代码片段输出的结果\",{\"1\":{\"620\":1,\"692\":1}}],[\"以下两种写法都是错误的\",{\"1\":{\"341\":1}}],[\"以下两种写法都将无法通过编译\",{\"1\":{\"339\":1}}],[\"以下几种情况还会导致panic\",{\"1\":{\"418\":1}}],[\"以下几种情况使用不当会导致管道阻塞\",{\"1\":{\"418\":1}}],[\"以下示例中\",{\"1\":{\"341\":1}}],[\"以下写法是错误的\",{\"1\":{\"339\":1}}],[\"以上便是6种负载均衡策略的实现方式\",{\"1\":{\"1169\":1}}],[\"以上配置将限制每个客户端ip连接到服务器的数量\",{\"1\":{\"1152\":1}}],[\"以上就是模块开发的一个基本流程\",{\"1\":{\"449\":1}}],[\"以上就是一个简单的语法介绍\",{\"1\":{\"172\":1}}],[\"以上三种开启协程的方式都是可以的\",{\"1\":{\"412\":1}}],[\"以上两种拼接方式性能都很差\",{\"1\":{\"257\":1}}],[\"以上几种方式都会给nums分配一片固定大小的内存\",{\"1\":{\"239\":1}}],[\"以供参考\",{\"1\":{\"195\":1}}],[\"以前的yanff\",{\"1\":{\"145\":1}}],[\"以前的rijndael\",{\"1\":{\"124\":1}}],[\"以了解电子游戏编程\",{\"1\":{\"134\":1}}],[\"以多线程模式运行的嵌入式帐户嵌入式事务数据库\",{\"1\":{\"133\":1}}],[\"以及其长度偏移量\",{\"1\":{\"1448\":1}}],[\"以及其他模型\",{\"1\":{\"1239\":1}}],[\"以及其他一些快速调试功能\",{\"1\":{\"131\":1}}],[\"以及长度偏移量\",{\"1\":{\"1446\":1}}],[\"以及channel\",{\"1\":{\"1424\":1}}],[\"以及资源组角色和操作\",{\"1\":{\"1263\":1}}],[\"以及一些资源时间的浪费\",{\"1\":{\"1166\":1}}],[\"以及不具备宕机\",{\"1\":{\"1057\":1}}],[\"以及更低的端到端延迟\",{\"1\":{\"1019\":1}}],[\"以及许多其他修复和改进\",{\"1\":{\"875\":1}}],[\"以及减少表的检索行数\",{\"1\":{\"809\":1}}],[\"以及各种字段之间的关系\",{\"1\":{\"793\":1}}],[\"以及所有的内置函数\",{\"1\":{\"775\":1}}],[\"以及所有定义的类型\",{\"1\":{\"173\":1,\"174\":1}}],[\"以及\",{\"1\":{\"622\":1,\"694\":1}}],[\"以及怎么实现的\",{\"1\":{\"595\":1,\"667\":1}}],[\"以及优化\",{\"0\":{\"549\":1}}],[\"以及总体的耗时\",{\"1\":{\"468\":1}}],[\"以及io包下的readall函数\",{\"1\":{\"401\":1}}],[\"以及泛型解决了哪种问题有了一个大概的了解\",{\"1\":{\"337\":1}}],[\"以及对固定尺寸值的读和写\",{\"1\":{\"124\":1}}],[\"以收集唯一的字段和事件\",{\"1\":{\"127\":1}}],[\"以pprof可视化工具需要的格式写运行时性能测试数据\",{\"1\":{\"124\":1}}],[\"以linux\",{\"1\":{\"53\":1}}],[\"收费\",{\"0\":{\"1168\":1}}],[\"收集了常见的加密常数\",{\"1\":{\"124\":1}}],[\"收到修改命令就会对其进行校验\",{\"1\":{\"985\":1}}],[\"收到\",{\"1\":{\"82\":1}}],[\"子模板只是在一个模板内部声明多个命名的模板\",{\"1\":{\"1426\":1}}],[\"子串的位置\",{\"0\":{\"1404\":1}}],[\"子串出现次数\",{\"0\":{\"1399\":1}}],[\"子网网段\",{\"1\":{\"1197\":1}}],[\"子句的值总是false\",{\"1\":{\"814\":1}}],[\"子查询等操作表现优秀\",{\"1\":{\"904\":1}}],[\"子查询等复杂查询\",{\"1\":{\"814\":1}}],[\"子查询优化\",{\"1\":{\"820\":2}}],[\"子查询怎么设计\",{\"1\":{\"593\":1,\"665\":1}}],[\"子系统名\",{\"1\":{\"794\":1}}],[\"子评论通过记录父评论id\",{\"1\":{\"638\":1}}],[\"子集\",{\"1\":{\"581\":1,\"653\":2}}],[\"子集问题\",{\"1\":{\"4\":1}}],[\"子测试\",{\"0\":{\"473\":1}}],[\"子协程要执行一些逻辑\",{\"1\":{\"396\":1}}],[\"子数组范围\",{\"1\":{\"241\":4}}],[\"子包\",{\"1\":{\"124\":1}}],[\"见识过mysql性能瓶颈之后你会想要选择的一款数据库\",{\"1\":{\"123\":1}}],[\"必要时在加锁的同时立即使用defer语句解锁\",{\"1\":{\"429\":1}}],[\"必要时为了提高可读性\",{\"1\":{\"228\":1}}],[\"必须与花括号相邻\",{\"1\":{\"1418\":1}}],[\"必须手动down掉\",{\"1\":{\"1164\":1}}],[\"必须修改配置文件\",{\"1\":{\"813\":1}}],[\"必须经过dba审核\",{\"1\":{\"796\":1}}],[\"必须有这个选项\",{\"1\":{\"1047\":1}}],[\"必须有行数据的\",{\"1\":{\"794\":1}}],[\"必须有个index\",{\"1\":{\"54\":1}}],[\"必须在早上8点之前处理完成\",{\"1\":{\"789\":1}}],[\"必须在你电脑中安装一个jdk1\",{\"1\":{\"736\":1}}],[\"必须在defer中使用\",{\"1\":{\"397\":1}}],[\"必须指定版本号\",{\"1\":{\"454\":1}}],[\"必须立刻有人接收\",{\"1\":{\"417\":1}}],[\"必须要先切换到对应的数据库\",{\"1\":{\"872\":1}}],[\"必须要在defer语句中运行\",{\"1\":{\"397\":1}}],[\"必须要指定当前文件夹\",{\"1\":{\"299\":1}}],[\"必须使用前缀索引\",{\"1\":{\"815\":1}}],[\"必须使用\",{\"1\":{\"392\":1}}],[\"必须是正整数\",{\"1\":{\"390\":1}}],[\"必须是lib前缀开头\",{\"1\":{\"313\":1}}],[\"必须是一个布尔值\",{\"1\":{\"228\":1}}],[\"必须声明在参数列表的末尾\",{\"1\":{\"279\":1}}],[\"必看项目\",{\"0\":{\"123\":1}}],[\"结论\",{\"1\":{\"1198\":1}}],[\"结合else使用\",{\"1\":{\"1424\":1}}],[\"结合i才可输入\",{\"1\":{\"1188\":1}}],[\"结合gmp调度模型使得并发效率更高\",{\"1\":{\"540\":1}}],[\"结合反射可以实现很多功能\",{\"1\":{\"513\":1}}],[\"结合反射可以做出很多奇妙的功能\",{\"1\":{\"272\":1}}],[\"结合前面完成删除\",{\"1\":{\"511\":1}}],[\"结合break和continue控制循环\",{\"1\":{\"509\":1}}],[\"结合上面所讲的内容也就非常好懂\",{\"1\":{\"349\":1}}],[\"结合标签使用可以达到跳过外层循环的效果\",{\"1\":{\"236\":1}}],[\"结合标签一起使用可以达到终止外层循环的效果\",{\"1\":{\"235\":1}}],[\"结束该次进程\",{\"1\":{\"851\":1}}],[\"结束了先前的混乱局面\",{\"1\":{\"442\":1}}],[\"结束子协程\",{\"1\":{\"421\":1}}],[\"结束\",{\"1\":{\"252\":2,\"551\":1}}],[\"结果\",{\"1\":{\"1280\":3,\"1317\":1}}],[\"结果将是\",{\"1\":{\"1257\":1,\"1261\":1,\"1265\":1}}],[\"结果会怎样呢\",{\"1\":{\"1154\":1,\"1155\":1}}],[\"结果值\",{\"1\":{\"814\":2}}],[\"结果总数\",{\"1\":{\"756\":1}}],[\"结果为真\",{\"1\":{\"1254\":2}}],[\"结果为\",{\"1\":{\"645\":1}}],[\"结果中还给出了相关的时间数据\",{\"1\":{\"498\":1}}],[\"结果也提示了删除成功\",{\"1\":{\"453\":1}}],[\"结果大概率会如下\",{\"1\":{\"436\":1}}],[\"结果又不一样了\",{\"1\":{\"285\":1}}],[\"结果如下\",{\"1\":{\"226\":1,\"1156\":1}}],[\"结果是常量的类型转换\",{\"1\":{\"210\":1}}],[\"结果没有变化\",{\"1\":{\"208\":1}}],[\"结构\",{\"0\":{\"1285\":1}}],[\"结构化\",{\"1\":{\"1299\":1}}],[\"结构化数据\",{\"1\":{\"904\":1}}],[\"结构化日志处理\",{\"1\":{\"122\":1}}],[\"结构型模式\",{\"1\":{\"654\":1}}],[\"结构里搞个切片\",{\"1\":{\"580\":1,\"652\":1}}],[\"结构体验证\",{\"0\":{\"1289\":1}}],[\"结构体绑定\",{\"1\":{\"1283\":2}}],[\"结构体参数\",{\"0\":{\"1283\":1},\"1\":{\"1279\":1}}],[\"结构体支持组合\",{\"1\":{\"513\":1}}],[\"结构体切片就可以\",{\"1\":{\"494\":1}}],[\"结构体是临时声明的匿名结构体\",{\"1\":{\"474\":1}}],[\"结构体如下\",{\"1\":{\"441\":1}}],[\"结构体来进行表示\",{\"1\":{\"347\":1}}],[\"结构体的创建同样用到reflect\",{\"1\":{\"374\":1}}],[\"结构体的内存占用长度至少是最大字段的整数倍\",{\"1\":{\"273\":1}}],[\"结构体的声明非常简单\",{\"1\":{\"267\":1}}],[\"结构体标签最广泛的应用就是在各种序列化格式中的别名定义\",{\"1\":{\"272\":1}}],[\"结构体标签的容错性很低\",{\"1\":{\"272\":1}}],[\"结构体标签是一种元编程的形式\",{\"1\":{\"272\":1}}],[\"结构体之间的关系是通过组合来表示的\",{\"1\":{\"270\":1}}],[\"结构体本身以及其内部的字段都遵守大小写命名的暴露方式\",{\"1\":{\"267\":1}}],[\"结构体可以存储一组不同类型的数据\",{\"1\":{\"266\":1}}],[\"结构体\",{\"0\":{\"307\":1,\"366\":1,\"374\":1,\"513\":1},\"1\":{\"201\":1,\"202\":1,\"294\":1,\"379\":2,\"529\":1,\"1332\":1}}],[\"结构定义\",{\"1\":{\"141\":1}}],[\"结尾的文件中\",{\"1\":{\"483\":1}}],[\"结尾的文件来寻找特殊函数\",{\"1\":{\"481\":1}}],[\"结尾的文件是\",{\"1\":{\"481\":1}}],[\"结尾的文件\",{\"1\":{\"28\":2}}],[\"结尾的文件讲被忽略\",{\"1\":{\"28\":1}}],[\"驼峰转换\",{\"1\":{\"122\":1}}],[\"表单字段\",{\"1\":{\"1281\":1}}],[\"表单做提交\",{\"1\":{\"595\":1,\"667\":1}}],[\"表现层状态转化\",{\"1\":{\"1278\":1}}],[\"表列出了常用的\",{\"1\":{\"970\":1}}],[\"表结构\",{\"1\":{\"901\":1}}],[\"表关联的算法是\",{\"1\":{\"821\":1}}],[\"表关联查询\",{\"1\":{\"821\":1}}],[\"表明使用了where过滤\",{\"1\":{\"814\":1}}],[\"表明索引\",{\"1\":{\"814\":1}}],[\"表明索引被用来执行索引键值的查找\",{\"1\":{\"814\":1}}],[\"表明它正在等待事件\",{\"1\":{\"634\":1}}],[\"表数据文件本身就是按照b+tree组织的一个索引结构文件\",{\"1\":{\"808\":1}}],[\"表数据量大\",{\"1\":{\"624\":2,\"696\":2}}],[\"表锁\",{\"1\":{\"796\":1}}],[\"表锁等方式实现\",{\"1\":{\"653\":1}}],[\"表\",{\"1\":{\"795\":1,\"848\":1}}],[\"表中只有一条记录与之匹配\",{\"1\":{\"814\":1}}],[\"表中有一行记录\",{\"1\":{\"814\":1}}],[\"表中有业务主键\",{\"1\":{\"610\":1,\"682\":1}}],[\"表中所有字段尽量都是\",{\"1\":{\"794\":1}}],[\"表必须有主键\",{\"1\":{\"794\":1}}],[\"表和列的名称必须控制在32个字符以内\",{\"1\":{\"794\":2}}],[\"表修复快\",{\"1\":{\"788\":1}}],[\"表名要求有模块名强相关\",{\"1\":{\"794\":1}}],[\"表名只能使用英文字母\",{\"1\":{\"794\":2}}],[\"表名\",{\"1\":{\"778\":1,\"794\":1,\"810\":3,\"861\":1}}],[\"表的结构一旦确定\",{\"1\":{\"904\":1}}],[\"表的设计合理化\",{\"1\":{\"799\":1}}],[\"表的健康状态\",{\"1\":{\"655\":1}}],[\"表的主键用什么类型的字段\",{\"1\":{\"565\":1,\"637\":2}}],[\"表索引量大\",{\"1\":{\"624\":1,\"696\":1}}],[\"表需求是可以记录学生姓名\",{\"1\":{\"603\":1,\"675\":1}}],[\"表文件结构\",{\"1\":{\"595\":1,\"667\":1}}],[\"表格风格\",{\"0\":{\"474\":1}}],[\"表格打印\",{\"1\":{\"122\":1}}],[\"表面上看该测试函数就是一个普通的函数\",{\"1\":{\"470\":1}}],[\"表达能力不足\",{\"1\":{\"391\":1}}],[\"表达能力弱\",{\"1\":{\"213\":1}}],[\"表示失败的重试时间\",{\"1\":{\"1163\":1}}],[\"表示失败几次\",{\"1\":{\"1163\":1}}],[\"表示一个大小为10m\",{\"1\":{\"1154\":1}}],[\"表示一个逻辑cpu\",{\"1\":{\"651\":1}}],[\"表示基于\",{\"1\":{\"1154\":1}}],[\"表示基准测试运行\",{\"1\":{\"497\":2}}],[\"表示通过remote\",{\"1\":{\"1151\":1}}],[\"表示通过索引一次就找到了\",{\"1\":{\"814\":1}}],[\"表示kafka在zookeeper上的根目录\",{\"1\":{\"1029\":1}}],[\"表示是zookeeper服务器监听连接的端口号\",{\"1\":{\"1029\":1}}],[\"表示是否从父上下文中删除自身\",{\"1\":{\"427\":1}}],[\"表示zookeeper服务器的主机名或者ip地址\",{\"1\":{\"1029\":1}}],[\"表示触发aof重写的最小文件体积\",{\"1\":{\"985\":1}}],[\"表示aof文件增量的比例来触发\",{\"1\":{\"985\":1}}],[\"表示在\",{\"1\":{\"981\":2}}],[\"表示在函数调用期间发生了错误\",{\"1\":{\"298\":1}}],[\"表示每秒最多处理10个请求\",{\"1\":{\"1154\":1}}],[\"表示每秒同步一次\",{\"1\":{\"965\":1}}],[\"表示每次更新操作后手动调用fsync\",{\"1\":{\"965\":1}}],[\"表示等操作系统进行数据缓存同步到磁盘\",{\"1\":{\"965\":1}}],[\"表示不作限制\",{\"1\":{\"965\":1}}],[\"表示关闭该功能\",{\"1\":{\"965\":1}}],[\"表示关闭空闲连接检测\",{\"1\":{\"911\":1}}],[\"表示关闭\",{\"1\":{\"911\":2}}],[\"表示相应的select中使用了覆盖索引\",{\"1\":{\"814\":1}}],[\"表示索引中使用的字节数\",{\"1\":{\"814\":1}}],[\"表示查询中执行select子句或操作表的顺序\",{\"1\":{\"814\":1}}],[\"表示这个语句执行过程中扫描了多少行\",{\"1\":{\"780\":1}}],[\"表示这是匿名的\",{\"1\":{\"343\":1}}],[\"表示搜索author=tizi或者title匹配\",{\"1\":{\"765\":1}}],[\"表示搜索匹配author=tizi且title匹配\",{\"1\":{\"763\":1}}],[\"表示楼梯的总阶数\",{\"1\":{\"654\":1}}],[\"表示全表扫描\",{\"1\":{\"645\":1}}],[\"表示准备关闭连接\",{\"1\":{\"641\":1}}],[\"表示数据发送完毕\",{\"1\":{\"641\":2}}],[\"表示同意连接\",{\"1\":{\"641\":1}}],[\"表示请求建立连接\",{\"1\":{\"641\":1}}],[\"表示任务完成\",{\"1\":{\"545\":1}}],[\"表示无效引用\",{\"1\":{\"529\":1}}],[\"表示\",{\"1\":{\"498\":1,\"981\":1}}],[\"表示测试用例运行的次数\",{\"1\":{\"498\":1,\"499\":1,\"500\":1}}],[\"表示时间或运行次数\",{\"1\":{\"497\":1}}],[\"表示次数\",{\"1\":{\"469\":1}}],[\"表示当前服务器节点是备用机\",{\"1\":{\"1163\":1}}],[\"表示当前目录\",{\"1\":{\"468\":1}}],[\"表示当前的代码将不允许提交\",{\"1\":{\"37\":1}}],[\"表示取消的原因\",{\"1\":{\"427\":1}}],[\"表示对一个管道读取数据\",{\"1\":{\"415\":1}}],[\"表示对一个管道写入数据\",{\"1\":{\"415\":1}}],[\"表示为所有人都可以对该文件进行读写\",{\"1\":{\"400\":1}}],[\"表示十分严重的程序问题\",{\"1\":{\"394\":1}}],[\"表示打印panic风格的堆栈信息\",{\"1\":{\"323\":1}}],[\"表示仅做通知类型的通道\",{\"1\":{\"274\":1}}],[\"表示身份无误\",{\"1\":{\"49\":1}}],[\"表示我们上次提交后该文件被修改过\",{\"1\":{\"21\":1}}],[\"彩色输出\",{\"1\":{\"122\":1}}],[\"过来时\",{\"1\":{\"1151\":1}}],[\"过滤掉一些无用的日志信息\",{\"1\":{\"852\":1}}],[\"过滤条件\",{\"1\":{\"833\":1,\"834\":2}}],[\"过滤html标签\",{\"1\":{\"122\":1}}],[\"过期等等特性\",{\"1\":{\"957\":1}}],[\"过期后的重新加载\",{\"1\":{\"639\":1}}],[\"过期时间的时间戳\",{\"1\":{\"967\":1}}],[\"过期时间\",{\"0\":{\"916\":1},\"1\":{\"562\":1,\"634\":4}}],[\"过度消耗\",{\"1\":{\"633\":1}}],[\"过大的缓冲区就不用放回对象池\",{\"1\":{\"435\":1}}],[\"过了一段时间\",{\"1\":{\"293\":1}}],[\"过程中不涉及内存拷贝\",{\"1\":{\"1448\":1}}],[\"过程中不会涉及到内存拷贝\",{\"1\":{\"1446\":1}}],[\"过程中的类型变化如下\",{\"1\":{\"1443\":1}}],[\"过程中会下载很多的依赖\",{\"1\":{\"453\":1}}],[\"过程中会导致其他协程阻塞\",{\"1\":{\"440\":1}}],[\"过程包括\",{\"1\":{\"638\":1}}],[\"过程与访问函数信息一致\",{\"1\":{\"370\":1}}],[\"过程\",{\"1\":{\"83\":1,\"611\":1,\"633\":1,\"683\":1,\"984\":1}}],[\"搜索和分析引擎\",{\"1\":{\"907\":1}}],[\"搜索词条高亮处理\",{\"0\":{\"766\":1}}],[\"搜索api就跟平时http\",{\"1\":{\"713\":1}}],[\"搜索等\",{\"1\":{\"641\":1}}],[\"搜索二维矩阵ⅱ\",{\"1\":{\"638\":1}}],[\"搜索\",{\"0\":{\"713\":1},\"1\":{\"122\":1}}],[\"搜索es\",{\"1\":{\"122\":1}}],[\"打酱油的一天\",{\"1\":{\"746\":1}}],[\"打乱测试的执行顺序\",{\"1\":{\"469\":1}}],[\"打印结果\",{\"1\":{\"754\":1}}],[\"打印出的\",{\"1\":{\"656\":1}}],[\"打印出代码优化建议\",{\"1\":{\"317\":1}}],[\"打印go的详细数据结构\",{\"1\":{\"122\":1}}],[\"打包以使用go\",{\"1\":{\"138\":1}}],[\"打开编辑器并将上述模型粘贴到模型编辑器中\",{\"1\":{\"1257\":1,\"1261\":1,\"1265\":1}}],[\"打开yykk\",{\"0\":{\"1136\":1}}],[\"打开有利于文件传输的性能\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"打开浏览器\",{\"0\":{\"1120\":1}}],[\"打开下载的文件\",{\"1\":{\"849\":1}}],[\"打开数据从库\",{\"1\":{\"825\":1}}],[\"打开表的时候\",{\"1\":{\"780\":1}}],[\"打开kibana\",{\"0\":{\"739\":1}}],[\"打开方式有两种\",{\"1\":{\"408\":1}}],[\"打开文件时\",{\"1\":{\"403\":1}}],[\"打开\",{\"0\":{\"400\":1},\"1\":{\"1123\":1}}],[\"打开一个名为readme\",{\"1\":{\"388\":1}}],[\"打开一个文件后永远要记得关闭该文件\",{\"1\":{\"400\":1}}],[\"打开一个文件\",{\"1\":{\"388\":1}}],[\"打开后页面大概如下所示\",{\"1\":{\"328\":1}}],[\"打开readme文件咨询\",{\"1\":{\"79\":1}}],[\"打开每一个应该提交的文件\",{\"1\":{\"58\":1}}],[\"xvf\",{\"1\":{\"1223\":1}}],[\"xeon®\",{\"1\":{\"1039\":1}}],[\"xe4\",{\"1\":{\"477\":9}}],[\"xzf\",{\"1\":{\"964\":1}}],[\"x只是数据显示的长度而已\",{\"1\":{\"791\":1}}],[\"x的值是什么值\",{\"1\":{\"791\":1}}],[\"x的绑定\",{\"1\":{\"146\":1}}],[\"x86\",{\"1\":{\"767\":1,\"1218\":1,\"1222\":1}}],[\"x84\",{\"1\":{\"477\":2}}],[\"xiaoxielinux\",{\"1\":{\"1194\":4,\"1195\":4,\"1196\":6,\"1197\":8,\"1198\":2}}],[\"xiaoxie\",{\"1\":{\"1187\":4,\"1188\":2,\"1193\":3}}],[\"xiaobai\",{\"0\":{\"1060\":1}}],[\"xiaohong\",{\"1\":{\"513\":1}}],[\"xiaoming\",{\"1\":{\"513\":2,\"881\":1}}],[\"xf0\",{\"1\":{\"477\":2}}],[\"xff\",{\"1\":{\"184\":1,\"186\":1}}],[\"x90\",{\"1\":{\"477\":2}}],[\"x91\",{\"1\":{\"477\":2}}],[\"xprog\",{\"1\":{\"469\":1}}],[\"x07\",{\"1\":{\"184\":1}}],[\"xtcp\",{\"1\":{\"145\":1}}],[\"xlsx\",{\"1\":{\"143\":4}}],[\"xmlstr\",{\"1\":{\"1312\":2}}],[\"xml序列化\",{\"1\":{\"1310\":1}}],[\"xml又名extensible\",{\"1\":{\"1310\":1}}],[\"xml之类的\",{\"1\":{\"1308\":1}}],[\"xml格式\",{\"1\":{\"1283\":1}}],[\"xml`\",{\"1\":{\"742\":2}}],[\"xml\",{\"0\":{\"1310\":1},\"1\":{\"124\":1,\"742\":2,\"1309\":1,\"1311\":1,\"1312\":1}}],[\"x509\",{\"1\":{\"124\":2}}],[\"xurls\",{\"1\":{\"122\":1}}],[\"x\",{\"1\":{\"122\":1,\"124\":1,\"146\":2,\"176\":1,\"187\":1,\"221\":10,\"228\":3,\"258\":3,\"361\":1,\"379\":1,\"385\":2,\"435\":1,\"453\":10,\"454\":2,\"459\":14,\"476\":1,\"477\":1,\"516\":3,\"548\":5,\"791\":1,\"863\":3,\"1081\":1,\"1092\":2,\"1093\":1,\"1107\":1,\"1130\":1,\"1131\":1,\"1133\":1,\"1158\":1,\"1160\":3,\"1281\":2,\"1390\":3,\"1417\":2,\"1440\":1,\"1441\":1,\"1442\":1,\"1443\":1}}],[\"xorm\",{\"1\":{\"122\":2,\"330\":1,\"889\":1}}],[\"xx\",{\"1\":{\"796\":3}}],[\"xxim\",{\"1\":{\"331\":1}}],[\"xxdefault\",{\"1\":{\"84\":1}}],[\"xxxput\",{\"1\":{\"1277\":1}}],[\"xxxpost\",{\"1\":{\"1277\":1}}],[\"xxxx\",{\"1\":{\"822\":1}}],[\"xxx\",{\"1\":{\"84\":6,\"510\":1,\"742\":2,\"806\":4,\"1136\":1,\"1160\":2,\"1215\":1,\"1222\":1,\"1229\":1,\"1278\":4,\"1326\":2}}],[\"地点\",{\"1\":{\"1193\":3}}],[\"地铁站名\",{\"1\":{\"817\":1}}],[\"地图\",{\"1\":{\"127\":1}}],[\"地址解析\",{\"0\":{\"1366\":1}}],[\"地址为\",{\"1\":{\"1277\":1}}],[\"地址是否相等\",{\"1\":{\"294\":1}}],[\"地址\",{\"1\":{\"122\":1,\"123\":1,\"655\":1,\"831\":1,\"963\":1,\"1073\":1,\"1218\":1}}],[\"地理形状类型\",{\"0\":{\"731\":1}}],[\"地理盒子模型的下\",{\"1\":{\"730\":1}}],[\"地理盒子模型的上\",{\"1\":{\"730\":1}}],[\"地理点类型用于存储地理位置的经纬度对\",{\"1\":{\"730\":1}}],[\"地理点类型\",{\"0\":{\"730\":1}}],[\"地理相关的位置信息和工具库\",{\"1\":{\"120\":1}}],[\"地理位置查询等\",{\"1\":{\"842\":1}}],[\"地理位置\",{\"0\":{\"135\":1},\"1\":{\"120\":1}}],[\"绝对值\",{\"0\":{\"1348\":1}}],[\"绝对路径链接\",{\"1\":{\"65\":1}}],[\"绝世起重机出故障了\",{\"1\":{\"293\":1}}],[\"绝大部分的命令行程序都需要用到这个包\",{\"1\":{\"121\":1}}],[\"信号\",{\"1\":{\"636\":1}}],[\"信号量和锁的区别\",{\"1\":{\"609\":1,\"681\":1}}],[\"信号量\",{\"1\":{\"412\":1,\"651\":1}}],[\"信号和用户账号等\",{\"1\":{\"121\":1}}],[\"信息\",{\"0\":{\"364\":1},\"1\":{\"634\":1}}],[\"信息容器\",{\"1\":{\"62\":1}}],[\"信息文字\",{\"1\":{\"61\":1}}],[\"与timer的区别在于\",{\"1\":{\"1434\":1}}],[\"与运算\",{\"1\":{\"1420\":1}}],[\"与数据库进行交互的包\",{\"1\":{\"1308\":1}}],[\"与数据库的一致性怎么保证\",{\"1\":{\"569\":1,\"641\":2}}],[\"与go第三方库zap\",{\"1\":{\"1307\":1}}],[\"与标准库的\",{\"1\":{\"1307\":1}}],[\"与资源层次结构类似\",{\"1\":{\"1263\":1}}],[\"与持续部署\",{\"1\":{\"1205\":1}}],[\"与高可用性\",{\"1\":{\"1205\":1}}],[\"与挂载\",{\"1\":{\"1201\":1}}],[\"与容器独立开\",{\"1\":{\"1199\":1}}],[\"与上面limit\",{\"1\":{\"1151\":1}}],[\"与周边生态系统的集成和兼容程度要略逊一筹\",{\"1\":{\"1054\":1}}],[\"与传统关系型数据库对比\",{\"0\":{\"961\":1}}],[\"与各种数据源和分析工具进行集成\",{\"1\":{\"843\":1}}],[\"与第一个节点要增加配置\",{\"1\":{\"769\":1}}],[\"与原始输入\",{\"1\":{\"656\":1}}],[\"与业务逻辑相关的字段\",{\"1\":{\"653\":1}}],[\"与线程相比\",{\"1\":{\"645\":1}}],[\"与后端进行数据交换\",{\"1\":{\"637\":1}}],[\"与其他作为学术实验开始的语⾔不同\",{\"1\":{\"522\":1}}],[\"与其他语⾔相⽐\",{\"0\":{\"522\":1}}],[\"与其他语言的比较\",{\"0\":{\"167\":1}}],[\"与其注意这个不然上面就统一接收者类型呢\",{\"1\":{\"515\":1}}],[\"与之前的区别在于test\",{\"1\":{\"472\":1}}],[\"与互斥锁一同出现和使用\",{\"1\":{\"432\":1}}],[\"与switch类似\",{\"1\":{\"421\":1}}],[\"与scan类似\",{\"1\":{\"224\":1}}],[\"与o\",{\"1\":{\"400\":1}}],[\"与rust相比之下\",{\"1\":{\"388\":1}}],[\"与reflect\",{\"1\":{\"348\":1}}],[\"与匿名函数一起使用\",{\"1\":{\"282\":1}}],[\"与格式化动词之间加上一个空格便可以达到分隔符的效果\",{\"1\":{\"221\":1}}],[\"与\",{\"0\":{\"168\":1,\"169\":1,\"170\":1,\"1204\":1},\"1\":{\"152\":1,\"221\":1,\"1204\":2,\"1205\":1,\"1207\":1}}],[\"与cpython\",{\"1\":{\"130\":1}}],[\"与网络各层配合使用的库\",{\"1\":{\"120\":1}}],[\"与再次提交文件\",{\"0\":{\"21\":1}}],[\"微秒\",{\"1\":{\"1341\":1}}],[\"微软的iis\",{\"1\":{\"1108\":1}}],[\"微软办公软件\",{\"1\":{\"120\":1}}],[\"微妙级\",{\"1\":{\"1057\":1}}],[\"微调相关性\",{\"1\":{\"700\":1}}],[\"微信小游戏的token存于sync\",{\"1\":{\"576\":1,\"648\":1}}],[\"微服务这么多\",{\"1\":{\"1194\":1}}],[\"微服务设计和高可用系统方面积累更多经验\",{\"1\":{\"655\":1}}],[\"微服务的优势\",{\"1\":{\"609\":1,\"681\":1}}],[\"微服务的服务发现\",{\"1\":{\"580\":1,\"652\":1}}],[\"微服务中间件开发部门\",{\"0\":{\"609\":1,\"681\":1}}],[\"微服务r如何理解\",{\"1\":{\"579\":1,\"651\":1}}],[\"微服务相比于单体服务的缺点\",{\"1\":{\"576\":1,\"648\":1}}],[\"微服务相关\",{\"1\":{\"576\":1,\"648\":1}}],[\"微服务项目我推荐参考该项目进行学习\",{\"1\":{\"330\":1}}],[\"微服务架构中的权限控制\",{\"1\":{\"1241\":1}}],[\"微服务架构中的主要消息队列\",{\"1\":{\"1038\":1}}],[\"微服务架构以及高性能网络应用\",{\"1\":{\"148\":1}}],[\"微服务架构\",{\"0\":{\"159\":1},\"1\":{\"116\":1}}],[\"微服务治理能力强\",{\"1\":{\"115\":1,\"119\":1}}],[\"微服务支持有限\",{\"1\":{\"113\":1}}],[\"微服务特性\",{\"1\":{\"111\":1}}],[\"微服务\",{\"1\":{\"111\":1,\"170\":1},\"2\":{\"90\":1,\"93\":1,\"95\":1,\"97\":1,\"99\":1,\"101\":1,\"103\":1}}],[\"jboss\",{\"1\":{\"1108\":1}}],[\"jtoken\",{\"1\":{\"1090\":1,\"1092\":4}}],[\"jtolds\",{\"1\":{\"122\":1}}],[\"jj\",{\"1\":{\"985\":2}}],[\"jps\",{\"1\":{\"1033\":2}}],[\"jpg\",{\"1\":{\"746\":1,\"1082\":3,\"1135\":5,\"1143\":1,\"1144\":1}}],[\"jpeg\",{\"1\":{\"124\":1}}],[\"jvm的组成部分\",{\"1\":{\"606\":1,\"678\":1}}],[\"jdk的类库里面有没有了解到可以做线程之间协作关系的\",{\"1\":{\"597\":1,\"669\":1}}],[\"jmter\",{\"1\":{\"1130\":1}}],[\"jmter压测的哪个接口\",{\"1\":{\"567\":1,\"639\":1}}],[\"jms\",{\"1\":{\"1054\":1}}],[\"jmoiron\",{\"1\":{\"890\":1}}],[\"jmeter\",{\"1\":{\"639\":1,\"1130\":1}}],[\"jmeter压测的哪个接口\",{\"1\":{\"639\":1}}],[\"jmeter做了压测\",{\"1\":{\"597\":1,\"669\":1}}],[\"jwtauth\",{\"1\":{\"1092\":1}}],[\"jwt的拦截器验证\",{\"1\":{\"1092\":1}}],[\"jwt的格式\",{\"1\":{\"562\":1,\"634\":2}}],[\"jwt\",{\"1\":{\"622\":1,\"634\":2,\"641\":6,\"694\":1,\"1090\":2}}],[\"jwt对于登录数量有要求的就很痛苦\",{\"1\":{\"592\":1,\"664\":1}}],[\"jwt和普通的session的方式有什么区别\",{\"1\":{\"592\":1,\"664\":1}}],[\"jwt里面保持了哪些东西\",{\"1\":{\"592\":1,\"664\":1}}],[\"jet\",{\"1\":{\"1414\":1}}],[\"jetty\",{\"1\":{\"1108\":1}}],[\"jettison\",{\"1\":{\"141\":1}}],[\"jemter压力软件进行nginx\",{\"1\":{\"1160\":1}}],[\"jemter压力软件进行单台tomcat压力的线程测试\",{\"1\":{\"1160\":1}}],[\"jeager出现链路日志\",{\"1\":{\"1082\":1}}],[\"jenny\",{\"1\":{\"832\":1,\"834\":1}}],[\"jenkins\",{\"0\":{\"1210\":1},\"1\":{\"637\":1,\"1204\":1}}],[\"jerry\",{\"1\":{\"584\":1,\"656\":4,\"725\":1}}],[\"juejin\",{\"1\":{\"1312\":1,\"1442\":1}}],[\"julienschmidt\",{\"1\":{\"1277\":1}}],[\"justone\",{\"1\":{\"860\":1}}],[\"just\",{\"1\":{\"448\":1,\"1053\":1}}],[\"jump\",{\"1\":{\"128\":2}}],[\"joho\",{\"1\":{\"878\":1}}],[\"john和snow之间的关联性就丢失了\",{\"1\":{\"728\":1}}],[\"john\",{\"1\":{\"269\":1,\"307\":1,\"344\":2,\"516\":2,\"584\":1,\"656\":4,\"728\":2,\"729\":2,\"733\":1,\"835\":1}}],[\"journal=true\",{\"1\":{\"852\":1}}],[\"join命令\",{\"1\":{\"1235\":2}}],[\"join和order\",{\"1\":{\"651\":1}}],[\"join原理实现\",{\"1\":{\"610\":1,\"682\":1}}],[\"join\",{\"1\":{\"410\":1,\"779\":1,\"795\":1,\"796\":1,\"813\":1,\"814\":3,\"821\":1,\"1225\":4,\"1226\":2,\"1227\":1}}],[\"job\",{\"1\":{\"266\":1,\"268\":1,\"270\":2,\"272\":2}}],[\"j++\",{\"1\":{\"233\":1,\"235\":2,\"236\":2,\"556\":1,\"653\":1}}],[\"j+1\",{\"1\":{\"233\":1}}],[\"j\",{\"1\":{\"233\":9,\"235\":8,\"236\":8,\"390\":3,\"477\":15,\"537\":6,\"556\":3,\"649\":9,\"653\":3,\"1092\":2,\"1375\":2,\"1380\":5,\"1417\":2}}],[\"js做了安全处理\",{\"1\":{\"1428\":1}}],[\"js转义\",{\"1\":{\"1420\":1}}],[\"js进行快速简单的桌面ui开发\",{\"1\":{\"138\":1}}],[\"js\",{\"1\":{\"138\":1,\"1238\":1,\"1420\":2}}],[\"json包下提供对应的函数来进行json的序列化与反序列化\",{\"1\":{\"1316\":1}}],[\"json在restful风格的接口通信中经常会用到\",{\"1\":{\"1316\":1}}],[\"json或者console\",{\"1\":{\"1303\":1}}],[\"json数据\",{\"1\":{\"1281\":1}}],[\"json文档是分层的\",{\"1\":{\"726\":1}}],[\"json没有日期数据类型\",{\"1\":{\"721\":1}}],[\"jsonb\",{\"1\":{\"584\":2,\"656\":4}}],[\"jsonstr\",{\"1\":{\"584\":2,\"656\":4,\"1320\":2}}],[\"jsonhal\",{\"1\":{\"141\":1}}],[\"jsongo\",{\"1\":{\"141\":1}}],[\"jsonf\",{\"1\":{\"141\":1}}],[\"jsonapi\",{\"1\":{\"141\":1}}],[\"json2go\",{\"1\":{\"141\":1}}],[\"json查询\",{\"1\":{\"141\":1}}],[\"json响应\",{\"1\":{\"141\":1}}],[\"jsonerror可让我们轻松创建遵循jsonapi规范的json响应错误\",{\"1\":{\"141\":1}}],[\"jsonerror\",{\"1\":{\"141\":1}}],[\"jsonrpc软件包可帮助实现json\",{\"1\":{\"128\":1}}],[\"jsonrpc\",{\"1\":{\"124\":1,\"128\":2}}],[\"json相关\",{\"1\":{\"122\":1}}],[\"json目前广泛用做网络程序中的通信格式\",{\"1\":{\"121\":1}}],[\"json\",{\"0\":{\"1316\":1},\"1\":{\"121\":1,\"122\":1,\"124\":1,\"128\":1,\"141\":1,\"369\":2,\"453\":4,\"459\":2,\"469\":1,\"584\":3,\"637\":1,\"641\":1,\"656\":13,\"754\":1,\"766\":1,\"774\":1,\"827\":1,\"841\":1,\"887\":1,\"1087\":1,\"1092\":3,\"1221\":1,\"1281\":12,\"1282\":1,\"1283\":6,\"1303\":3,\"1309\":2,\"1317\":1,\"1319\":1,\"1320\":1,\"1331\":4}}],[\"json格式的版本元数据\",{\"1\":{\"460\":1}}],[\"json格式\",{\"0\":{\"141\":1},\"1\":{\"120\":1,\"1283\":1}}],[\"jinzhu\",{\"1\":{\"122\":1}}],[\"jar\",{\"1\":{\"1332\":1}}],[\"jan\",{\"1\":{\"993\":12,\"1132\":1,\"1173\":1,\"1431\":1}}],[\"jane\",{\"1\":{\"269\":1}}],[\"jackmike\",{\"1\":{\"1422\":1}}],[\"jack123456\",{\"1\":{\"463\":2}}],[\"jackup\",{\"1\":{\"293\":8}}],[\"jack\",{\"1\":{\"174\":1,\"206\":5,\"211\":2,\"221\":1,\"268\":2,\"270\":2,\"271\":1,\"317\":1,\"338\":1,\"339\":1,\"368\":2,\"379\":6,\"446\":1,\"447\":2,\"448\":1,\"450\":4,\"463\":2,\"465\":1,\"709\":2,\"710\":1,\"711\":2,\"832\":1,\"833\":1,\"834\":1,\"837\":1,\"915\":1,\"916\":1,\"917\":1,\"927\":2,\"985\":2,\"993\":1,\"1311\":1,\"1312\":1,\"1317\":2,\"1318\":1,\"1319\":2,\"1320\":2,\"1331\":1,\"1380\":1,\"1381\":1,\"1409\":4,\"1417\":1,\"1419\":3,\"1422\":3,\"1426\":2,\"1427\":2,\"1428\":3,\"1443\":2}}],[\"jazigo是用go语言编写的工具\",{\"1\":{\"145\":1}}],[\"jazigo\",{\"1\":{\"145\":1}}],[\"jaydiff\",{\"1\":{\"141\":1}}],[\"jaytaylor\",{\"1\":{\"122\":1}}],[\"java会自动完成类型转换\",{\"1\":{\"1393\":1}}],[\"java之类的要小\",{\"1\":{\"1273\":1}}],[\"javax\",{\"1\":{\"1166\":1}}],[\"java代码如下\",{\"1\":{\"1166\":1}}],[\"java面向对象的三个特性\",{\"1\":{\"590\":1,\"662\":1}}],[\"java中怎么实现悲观锁和乐观锁\",{\"1\":{\"590\":1,\"662\":1}}],[\"java中如何判断一个对象可以被回收了\",{\"1\":{\"573\":1,\"645\":2}}],[\"java中的反射解决的问题\",{\"1\":{\"573\":1,\"645\":2}}],[\"java里面接口和抽象类的区别\",{\"1\":{\"572\":1,\"644\":1}}],[\"java判断相等使用==和使用equals的区别\",{\"1\":{\"572\":1,\"644\":1}}],[\"java的scheduledexecutorservice\",{\"1\":{\"653\":1}}],[\"java的list有哪些以及他们的区别和原理\",{\"1\":{\"598\":1,\"670\":1}}],[\"java的双亲委派\",{\"1\":{\"592\":1,\"664\":1}}],[\"java的垃圾收集机制\",{\"1\":{\"566\":1,\"638\":2}}],[\"java的集合大概讲一讲\",{\"1\":{\"566\":1,\"638\":2}}],[\"javascript\",{\"1\":{\"1238\":1}}],[\"javascript转译器\",{\"1\":{\"136\":1}}],[\"javascript引擎绑定\",{\"1\":{\"130\":1}}],[\"java\",{\"0\":{\"170\":1,\"610\":1,\"682\":1},\"1\":{\"136\":1,\"170\":3,\"522\":1,\"637\":1,\"638\":2,\"645\":1,\"742\":1,\"746\":1,\"984\":1,\"1017\":1,\"1054\":2,\"1056\":1,\"1057\":2,\"1081\":1,\"1165\":2,\"1166\":2,\"1238\":1}}],[\"java等\",{\"1\":{\"110\":1}}],[\"jaeger\",{\"0\":{\"94\":1}}],[\"图像操作的包\",{\"1\":{\"1308\":1}}],[\"图像处理等\",{\"1\":{\"645\":1}}],[\"图像处理过滤器的包装\",{\"1\":{\"139\":1}}],[\"图解说明\",{\"1\":{\"1164\":1}}],[\"图等\",{\"1\":{\"906\":1}}],[\"图数据库\",{\"1\":{\"334\":2,\"907\":1}}],[\"图画的并不严谨\",{\"1\":{\"310\":1}}],[\"图文电视\",{\"1\":{\"146\":1}}],[\"图片和视频等多媒体数据\",{\"1\":{\"843\":1}}],[\"图片存数据库的弊端\",{\"1\":{\"792\":1}}],[\"图片缩放\",{\"1\":{\"122\":1}}],[\"图片\",{\"0\":{\"139\":1},\"1\":{\"120\":1,\"132\":1}}],[\"图形界面或各种语言的驱动程序进行操作\",{\"1\":{\"842\":1}}],[\"图形界面\",{\"0\":{\"138\":1},\"1\":{\"120\":1}}],[\"转发数\",{\"1\":{\"746\":1}}],[\"转发等操作\",{\"1\":{\"644\":1}}],[\"转而使用传统的\",{\"1\":{\"637\":1}}],[\"转而尝试查找相同名称的目录或\",{\"1\":{\"65\":1}}],[\"转mysql字段\",{\"1\":{\"513\":1}}],[\"转字节切片后进行处理\",{\"1\":{\"511\":1}}],[\"转换函数\",{\"1\":{\"1390\":1}}],[\"转换成对应语言的大写字符串\",{\"1\":{\"1409\":1}}],[\"转换成对应语言的小写字符串\",{\"1\":{\"1409\":1}}],[\"转换成go字符串\",{\"0\":{\"1388\":1}}],[\"转换成article对象\",{\"1\":{\"756\":1}}],[\"转换一下就是500ms内单个ip只允许通过1个请求\",{\"1\":{\"1154\":1}}],[\"转换回\",{\"1\":{\"656\":1}}],[\"转换为\",{\"1\":{\"1307\":1}}],[\"转换为切片\",{\"1\":{\"654\":1}}],[\"转换为float64类型\",{\"1\":{\"385\":1}}],[\"转换\",{\"0\":{\"254\":1}}],[\"转换后的切片与原数组指向的是同一片内存\",{\"1\":{\"241\":1}}],[\"转义字符\",{\"0\":{\"185\":1}}],[\"转到开放神经网络交换\",{\"1\":{\"142\":1}}],[\"转到基于gopher\",{\"1\":{\"130\":1}}],[\"转到其他语言\",{\"1\":{\"120\":1}}],[\"金融功能库\",{\"1\":{\"133\":1}}],[\"金融\",{\"0\":{\"133\":1,\"143\":1},\"1\":{\"120\":1,\"1108\":1}}],[\"电信\",{\"1\":{\"1108\":1}}],[\"电信系统的手机号\",{\"1\":{\"811\":1}}],[\"电子商务和金融服务\",{\"1\":{\"843\":1}}],[\"电子邮件\",{\"0\":{\"129\":1},\"1\":{\"120\":1}}],[\"电话面\",{\"0\":{\"567\":1,\"572\":1,\"592\":1,\"593\":1,\"597\":1,\"598\":1,\"639\":1,\"644\":1,\"664\":1,\"665\":1,\"669\":1,\"670\":1}}],[\"电纸书\",{\"0\":{\"73\":1}}],[\"音频和音乐\",{\"0\":{\"126\":1},\"1\":{\"120\":1}}],[\"音乐\",{\"0\":{\"69\":1}}],[\"包一起使用\",{\"1\":{\"1307\":1}}],[\"包和\",{\"1\":{\"1307\":1}}],[\"包月包年收费不划算\",{\"1\":{\"1217\":1}}],[\"包更新到最新\",{\"1\":{\"774\":1}}],[\"包中的原子操作\",{\"1\":{\"635\":1}}],[\"包来进行排序\",{\"1\":{\"649\":1}}],[\"包来收集和分析性能数据\",{\"1\":{\"634\":1}}],[\"包来编译和运行\",{\"1\":{\"481\":1}}],[\"包应该是再熟悉不过的概念了\",{\"1\":{\"455\":1}}],[\"包裹原始错误\",{\"1\":{\"393\":2}}],[\"包名\",{\"1\":{\"367\":1,\"370\":1}}],[\"包为内部包\",{\"1\":{\"176\":1}}],[\"包b又导入了包a\",{\"1\":{\"175\":1}}],[\"包b也导入了包a\",{\"1\":{\"175\":1}}],[\"包c导入了包b\",{\"1\":{\"175\":1}}],[\"包a导入了包c\",{\"1\":{\"175\":1}}],[\"包arp实现arp协议\",{\"1\":{\"145\":1}}],[\"包的命名风格建议都是小写字母\",{\"1\":{\"173\":1}}],[\"包内共享所有变量\",{\"1\":{\"173\":1}}],[\"包其实就是一个文件夹\",{\"1\":{\"173\":1}}],[\"包装crypto\",{\"1\":{\"145\":1}}],[\"包raw允许在设备驱动程序级别为网络接口读取和写入数据\",{\"1\":{\"145\":1}}],[\"包括斜杠\",{\"1\":{\"1280\":1}}],[\"包括运行状态\",{\"1\":{\"1223\":1}}],[\"包括请求的地址\",{\"1\":{\"1133\":1}}],[\"包括自己\",{\"1\":{\"1020\":1}}],[\"包括java\",{\"1\":{\"1018\":1}}],[\"包括元素成员和元素分值\",{\"1\":{\"974\":1}}],[\"包括范围查询\",{\"1\":{\"842\":1}}],[\"包括数据库分片\",{\"1\":{\"655\":1}}],[\"包括数组和链表\",{\"1\":{\"636\":1}}],[\"包括订单id\",{\"1\":{\"638\":1}}],[\"包括\",{\"1\":{\"635\":1,\"637\":1}}],[\"包括内存分配次数和分配的字节数\",{\"1\":{\"630\":1}}],[\"包括哈希文件\",{\"1\":{\"457\":1}}],[\"包括已释放\",{\"1\":{\"327\":2}}],[\"包括换行和缩进\",{\"1\":{\"252\":1}}],[\"包括英语和德语词干\",{\"1\":{\"144\":1}}],[\"包括porter\",{\"1\":{\"144\":1}}],[\"包括tcp\",{\"1\":{\"124\":1}}],[\"包含字符串\",{\"0\":{\"1398\":1}}],[\"包含了构建\",{\"1\":{\"1183\":1}}],[\"包含了order\",{\"1\":{\"796\":1}}],[\"包含和导入外部的文件\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"包含一组数字\",{\"1\":{\"814\":1}}],[\"包含一个低级的操作系统原语的接口\",{\"1\":{\"124\":1}}],[\"包含格式化日期的字符串\",{\"1\":{\"721\":1}}],[\"包含这些新增字段\",{\"1\":{\"656\":1}}],[\"包含三个方法\",{\"1\":{\"649\":1}}],[\"包含无法比较的类型\",{\"1\":{\"635\":1}}],[\"包含指针\",{\"1\":{\"635\":1}}],[\"包含声明\",{\"1\":{\"634\":1}}],[\"包含\",{\"0\":{\"1131\":1},\"1\":{\"347\":1}}],[\"包含当程序在运行时调试其自身的功能\",{\"1\":{\"124\":1}}],[\"包含用于对x\",{\"1\":{\"124\":1}}],[\"包含与go运行时系统交互的操作\",{\"1\":{\"124\":1}}],[\"包\",{\"0\":{\"173\":1},\"1\":{\"120\":1,\"122\":1,\"124\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"491\":1,\"494\":1,\"525\":1,\"641\":1,\"1382\":1,\"1394\":1}}],[\"技术选型\",{\"0\":{\"1051\":1}}],[\"技术选型相关\",{\"1\":{\"576\":1,\"648\":1}}],[\"技术相关\",{\"1\":{\"655\":1}}],[\"技术栈等\",{\"1\":{\"639\":1}}],[\"技术上的难点没有\",{\"1\":{\"625\":1,\"697\":1}}],[\"技术+人事\",{\"0\":{\"583\":1,\"655\":1}}],[\"技术\",{\"0\":{\"582\":1,\"654\":1},\"1\":{\"583\":1,\"655\":1}}],[\"技术风险\",{\"1\":{\"118\":1}}],[\"技术特性\",{\"1\":{\"111\":1}}],[\"低廉的学习成本使其在web领域称为了主流的数据交换格式\",{\"1\":{\"1316\":1}}],[\"低位在前\",{\"1\":{\"651\":1}}],[\"低位字节存储在高地址中\",{\"1\":{\"651\":1}}],[\"低开销\",{\"1\":{\"542\":1}}],[\"低级的结构\",{\"1\":{\"124\":1}}],[\"低\",{\"1\":{\"117\":6,\"118\":7,\"1309\":4}}],[\"强行停止\",{\"1\":{\"1188\":1}}],[\"强类型\",{\"1\":{\"637\":1}}],[\"强类型则指的是在程序中执行严格的类型检查\",{\"1\":{\"381\":1}}],[\"强类型与垃圾回收\",{\"0\":{\"152\":1}}],[\"强烈推荐使用cobra进行cli开发\",{\"1\":{\"335\":1}}],[\"强调基本可用性\",{\"1\":{\"906\":1}}],[\"强调通过组合来实现代码复用\",{\"1\":{\"150\":1}}],[\"强调可观测性\",{\"1\":{\"116\":1}}],[\"强大灵活的命令行解析库\",{\"1\":{\"335\":1}}],[\"强大的websocket框架\",{\"1\":{\"145\":1}}],[\"强大的gltf\",{\"1\":{\"139\":1}}],[\"强大而灵活的合并库\",{\"1\":{\"127\":1}}],[\"强制关闭\",{\"1\":{\"1172\":1}}],[\"强制执行身份验证和授权机制\",{\"1\":{\"1071\":1}}],[\"强制要求主键为id\",{\"1\":{\"794\":1}}],[\"强制\",{\"1\":{\"794\":15,\"795\":2,\"796\":1}}],[\"强制生成硬盘临时表\",{\"1\":{\"787\":1}}],[\"强制全表扫描\",{\"1\":{\"633\":1}}],[\"强制删除分支\",{\"1\":{\"58\":1}}],[\"强制拉取合并\",{\"1\":{\"58\":1}}],[\"强制不忽略\",{\"1\":{\"28\":1}}],[\"🌟weight\",{\"0\":{\"1162\":1}}],[\"🌟轮询\",{\"0\":{\"1161\":1}}],[\"🌟并发\",{\"0\":{\"543\":1}}],[\"🌟协程\",{\"0\":{\"538\":1}}],[\"🌟go\",{\"0\":{\"115\":1}}],[\"🎉总结\",{\"0\":{\"119\":1}}],[\"🌐实用网站\",{\"0\":{\"78\":1}}],[\"劣势\",{\"1\":{\"113\":1,\"114\":1,\"115\":1,\"809\":1}}],[\"适配器模式\",{\"1\":{\"654\":1}}],[\"适用范围\",{\"1\":{\"1309\":1}}],[\"适用所有类型\",{\"1\":{\"532\":1}}],[\"适用于主服务器和从服务器\",{\"1\":{\"997\":1}}],[\"适用于处理动态或半结构化数据\",{\"1\":{\"906\":1}}],[\"适用于linux\",{\"1\":{\"877\":1}}],[\"适用于深分页\",{\"1\":{\"656\":1}}],[\"适用于写多读少的场景\",{\"1\":{\"653\":1}}],[\"适用于读多写少的场景\",{\"1\":{\"653\":1}}],[\"适用于存储对象\",{\"1\":{\"651\":1}}],[\"适用于\",{\"1\":{\"645\":1}}],[\"适用于任务队列\",{\"1\":{\"641\":1}}],[\"适用于实时搜索和分析大规模数据\",{\"1\":{\"637\":1}}],[\"适用于实例化开销较大或资源密集型对象的情况\",{\"1\":{\"637\":1}}],[\"适用于大量相似对象\",{\"1\":{\"654\":1}}],[\"适用于大量并发任务\",{\"1\":{\"636\":1}}],[\"适用于大规模分布式系统\",{\"1\":{\"637\":1}}],[\"适用于大部分情况\",{\"1\":{\"219\":1}}],[\"适用于对实时性要求较高的场景\",{\"1\":{\"636\":1}}],[\"适用于解耦任务\",{\"1\":{\"635\":1}}],[\"适用于同步任务\",{\"1\":{\"635\":1}}],[\"适用于高并发\",{\"1\":{\"169\":1}}],[\"适用于开发需要高效执行的系统级应用\",{\"1\":{\"161\":1}}],[\"适用于go的飞利浦hue扩展客户端库\",{\"1\":{\"140\":1}}],[\"适用于基于地理位置的应用程序的内存中缓存\",{\"1\":{\"135\":1}}],[\"适用场景\",{\"1\":{\"111\":1,\"514\":1,\"515\":2,\"1057\":1,\"1233\":1,\"1234\":1,\"1235\":1}}],[\"适合临时访问或开发环境\",{\"1\":{\"1233\":1}}],[\"适合处理大量非结构化数据\",{\"1\":{\"907\":1}}],[\"适合大数据应用\",{\"1\":{\"906\":1}}],[\"适合大规模开发和快速迭代\",{\"1\":{\"154\":1}}],[\"适合移动和小型应用\",{\"1\":{\"905\":1}}],[\"适合需要严格数据完整性和事务处理的应用场景\",{\"1\":{\"904\":1}}],[\"适合需要实时消息传递的场景\",{\"1\":{\"634\":1}}],[\"适合复杂查询\",{\"1\":{\"904\":1}}],[\"适合建立索引\",{\"1\":{\"811\":1}}],[\"适合冲突较多的场景\",{\"1\":{\"653\":1}}],[\"适合冲突较少的场景\",{\"1\":{\"653\":1}}],[\"适合范围查询\",{\"1\":{\"641\":1}}],[\"适合存储对象数据\",{\"1\":{\"641\":1}}],[\"适合存储大文件\",{\"1\":{\"634\":1}}],[\"适合存储大量的小文件\",{\"1\":{\"634\":1}}],[\"适合高可靠性场景\",{\"1\":{\"637\":1}}],[\"适合高吞吐量的场景\",{\"1\":{\"634\":1}}],[\"适合并发读写\",{\"1\":{\"635\":1}}],[\"适合在多个\",{\"1\":{\"635\":1}}],[\"适合多种消息传递模式\",{\"1\":{\"634\":1}}],[\"适合用于容器化和云原生应用\",{\"1\":{\"159\":1}}],[\"适合全栈开发\",{\"1\":{\"114\":1}}],[\"适合快速开发api\",{\"1\":{\"113\":1}}],[\"生效\",{\"1\":{\"1030\":1}}],[\"生态系统的管理和效率\",{\"1\":{\"1071\":1}}],[\"生态完善等等\",{\"1\":{\"961\":1}}],[\"生态丰富\",{\"1\":{\"113\":1}}],[\"生产用ingress暴露服务\",{\"1\":{\"1235\":1}}],[\"生产环境可以保持一致\",{\"1\":{\"1181\":1}}],[\"生产环境中\",{\"1\":{\"656\":1}}],[\"生产方向其中写入\",{\"1\":{\"1020\":1}}],[\"生产消息\",{\"1\":{\"1020\":1,\"1034\":1}}],[\"生产数据库的mysql的并发数\",{\"1\":{\"799\":1}}],[\"生产者负责产生消息\",{\"1\":{\"1052\":1}}],[\"生产者每秒钟发送2万条消息\",{\"1\":{\"1039\":1}}],[\"生产者\",{\"0\":{\"1047\":1},\"1\":{\"1036\":1}}],[\"生产者等待所有分区副本成功提交消息\",{\"1\":{\"1035\":1}}],[\"生产者将消息发送给leader\",{\"1\":{\"1022\":1}}],[\"生产者从kafka集群获取分区leader信息\",{\"1\":{\"1022\":1}}],[\"生产者发送的消息将严格按照顺序存储到对应的分区\",{\"1\":{\"1018\":1}}],[\"生产者可以通过配置acks=all和enable\",{\"1\":{\"653\":1}}],[\"生产者端丢失\",{\"1\":{\"634\":1}}],[\"生产中一般用那个\",{\"1\":{\"618\":1,\"690\":1}}],[\"生产中哪些服务用的\",{\"1\":{\"618\":1,\"690\":1}}],[\"生表现评价\",{\"1\":{\"603\":1,\"675\":1}}],[\"生命周期超出了当前函数\",{\"1\":{\"548\":1}}],[\"生成文件后\",{\"1\":{\"1321\":1}}],[\"生成配置文件\",{\"1\":{\"1235\":1}}],[\"生成token\",{\"1\":{\"1235\":1}}],[\"生成一个镜像并提交\",{\"0\":{\"1193\":1}}],[\"生成并公开\",{\"1\":{\"1071\":1}}],[\"生成日常报告\",{\"1\":{\"1019\":1}}],[\"生成的伪随机数也不同\",{\"1\":{\"637\":1}}],[\"生成验证码并发送到用户邮箱\",{\"1\":{\"634\":1}}],[\"生成内存性能分析文件并保存到data\",{\"1\":{\"630\":1}}],[\"生成cpu性能分析文件并保存到data\",{\"1\":{\"630\":1}}],[\"生成\",{\"1\":{\"122\":1}}],[\"生成公钥私钥\",{\"1\":{\"50\":1}}],[\"高质量增加\",{\"1\":{\"1240\":1}}],[\"高扩展\",{\"0\":{\"1063\":1}}],[\"高扩展性\",{\"1\":{\"906\":1,\"1067\":1}}],[\"高可靠的消息系统\",{\"1\":{\"1017\":1}}],[\"高可用性\",{\"1\":{\"1006\":1}}],[\"高可用和分片特性\",{\"1\":{\"1006\":1}}],[\"高可用还是要看哨兵模式来实现\",{\"1\":{\"991\":1}}],[\"高可用\",{\"0\":{\"1064\":1},\"1\":{\"961\":1,\"1067\":1}}],[\"高可用系统的架构设计与实现\",{\"1\":{\"655\":1}}],[\"高阶版的主从复制\",{\"1\":{\"995\":1}}],[\"高吞吐量的需求\",{\"1\":{\"843\":1}}],[\"高吞吐的实现依赖于以下几个关键因素\",{\"1\":{\"636\":1}}],[\"高度可扩展\",{\"1\":{\"842\":1}}],[\"高度优化的双端队列\",{\"1\":{\"127\":1}}],[\"高位在前\",{\"1\":{\"651\":1}}],[\"高位字节存储在高地址中\",{\"1\":{\"651\":1}}],[\"高并发把网站冲垮了\",{\"1\":{\"1163\":1}}],[\"高并发\",{\"0\":{\"960\":1}}],[\"高并发的系统\",{\"1\":{\"656\":1}}],[\"高并发条件下\",{\"1\":{\"558\":1}}],[\"高并发直接替换bufio\",{\"1\":{\"127\":1}}],[\"高于0\",{\"1\":{\"476\":1}}],[\"高精度整数在向低精度整数转换时会抛弃高位保留低位\",{\"1\":{\"385\":1}}],[\"高速kv数据库\",{\"1\":{\"334\":1}}],[\"高效的调度使得go能够高效地运行大量并发任务\",{\"1\":{\"654\":1}}],[\"高效的并发模型\",{\"1\":{\"164\":1,\"542\":1}}],[\"高效的并发支持\",{\"0\":{\"151\":1}}],[\"高效利用资源\",{\"1\":{\"634\":1}}],[\"高效\",{\"1\":{\"139\":1,\"170\":1}}],[\"高\",{\"1\":{\"117\":3,\"1072\":3}}],[\"高性能服务器编程\",{\"1\":{\"1108\":1}}],[\"高性能等优势\",{\"1\":{\"1056\":1}}],[\"高性能读写\",{\"1\":{\"906\":1}}],[\"高性能的应用\",{\"1\":{\"169\":1}}],[\"高性能的基于golang游戏服务器架构\",{\"1\":{\"134\":1}}],[\"高性能和准确的货币计算包\",{\"1\":{\"133\":1}}],[\"高性能和线程安全的数据结构的集合\",{\"1\":{\"127\":1}}],[\"高性能中间件\",{\"1\":{\"128\":1}}],[\"高性能\",{\"0\":{\"959\":1,\"1062\":1},\"1\":{\"113\":1,\"842\":1,\"1239\":1,\"1272\":1}}],[\"高级点的deploymen怎么不中断更新容器\",{\"1\":{\"1212\":1}}],[\"高级特性\",{\"0\":{\"1206\":1}}],[\"高级消息队列协议\",{\"1\":{\"1053\":1}}],[\"高级查询\",{\"0\":{\"755\":1}}],[\"高级语法\",{\"0\":{\"530\":1}}],[\"高级回显服务器和web\",{\"1\":{\"145\":1}}],[\"高级json到go结构转换\",{\"1\":{\"141\":1}}],[\"高级选择器\",{\"1\":{\"72\":1}}],[\"高级指南\",{\"1\":{\"65\":3}}],[\"✓\",{\"1\":{\"111\":3}}],[\"✓✓\",{\"1\":{\"111\":3}}],[\"✓✓✓\",{\"1\":{\"111\":6}}],[\"小指数采用\",{\"1\":{\"1390\":2}}],[\"小写e十进制指数\",{\"1\":{\"1390\":1}}],[\"小写字母\",{\"1\":{\"459\":1}}],[\"小\",{\"1\":{\"1309\":1}}],[\"小于等于\",{\"1\":{\"1420\":1}}],[\"小于\",{\"1\":{\"1420\":1}}],[\"小于漏桶的容量\",{\"1\":{\"1149\":1}}],[\"小于256的时候\",{\"1\":{\"244\":1}}],[\"小项目读多写少sentinel足够\",{\"1\":{\"1005\":1}}],[\"小的存储在左边\",{\"1\":{\"803\":1}}],[\"小时\",{\"1\":{\"776\":1,\"1307\":1}}],[\"小蛮腰\",{\"1\":{\"730\":3}}],[\"小端\",{\"1\":{\"651\":1}}],[\"小端编码\",{\"1\":{\"579\":1,\"651\":3}}],[\"小版本号是20\",{\"1\":{\"455\":1}}],[\"小细节\",{\"1\":{\"320\":1}}],[\"小数处理\",{\"1\":{\"122\":1}}],[\"小型项目\",{\"1\":{\"111\":1}}],[\"小结\",{\"0\":{\"345\":1,\"505\":1,\"714\":1,\"782\":1,\"887\":1},\"1\":{\"84\":1,\"1183\":1}}],[\"较复杂\",{\"1\":{\"1309\":1}}],[\"较简单\",{\"1\":{\"1309\":2}}],[\"较陡\",{\"1\":{\"111\":1}}],[\"较多\",{\"1\":{\"111\":1,\"1309\":1}}],[\"熔断限流\",{\"1\":{\"111\":1}}],[\"部署网络插件\",{\"1\":{\"1235\":1}}],[\"部署的每一个pod都会有自己的ip\",{\"1\":{\"1215\":1}}],[\"部署服务从实体部署到虚拟机再到容器化部署\",{\"1\":{\"1212\":1}}],[\"部署nacos\",{\"1\":{\"1081\":1}}],[\"部署和运维成本\",{\"1\":{\"1072\":1}}],[\"部署和管理容器化的服务\",{\"1\":{\"656\":1}}],[\"部署和管理容器化应用\",{\"1\":{\"637\":1}}],[\"部署集群挽环境\",{\"1\":{\"1197\":1}}],[\"部署集群的端口\",{\"1\":{\"1010\":1}}],[\"部署集群\",{\"0\":{\"1008\":1}}],[\"部署时通常使用\",{\"1\":{\"641\":1}}],[\"部署方式\",{\"1\":{\"579\":1,\"651\":1,\"1072\":1}}],[\"部分的大小写\",{\"1\":{\"1143\":1}}],[\"部分实现了rfc\",{\"1\":{\"124\":1}}],[\"部分支持\",{\"1\":{\"111\":4}}],[\"部门领导\",{\"1\":{\"30\":1}}],[\"丰富的功能集\",{\"1\":{\"1107\":1}}],[\"丰富的特性\",{\"1\":{\"957\":1}}],[\"丰富的数据类型\",{\"1\":{\"957\":1,\"961\":1}}],[\"丰富\",{\"1\":{\"111\":2,\"169\":1}}],[\"中只有一台\",{\"1\":{\"1163\":1}}],[\"中大规模的金融交易\",{\"1\":{\"1057\":1}}],[\"中小规模企业级消息服务\",{\"1\":{\"1057\":1}}],[\"中储存的数字值减一\",{\"1\":{\"970\":1}}],[\"中储存的数字值增一\",{\"1\":{\"970\":1}}],[\"中字符串值的子字符\",{\"1\":{\"970\":1}}],[\"中新建配置文件\",{\"1\":{\"852\":1}}],[\"中国大陆使用nginx网站用户有\",{\"1\":{\"1107\":1}}],[\"中国大陆安装mongodb数据库\",{\"1\":{\"877\":1}}],[\"中国\",{\"1\":{\"741\":1}}],[\"中国驻洛杉矶领事馆遭亚裔男子枪击\",{\"1\":{\"741\":2}}],[\"中韩渔警冲突调查\",{\"1\":{\"741\":2}}],[\"中还有任务在线程池中\",{\"1\":{\"645\":1}}],[\"中使用limit\",{\"1\":{\"1154\":1}}],[\"中使用\",{\"1\":{\"641\":1,\"1307\":1}}],[\"中抢单成功后\",{\"1\":{\"638\":1}}],[\"中生效\",{\"1\":{\"635\":1}}],[\"中共享\",{\"1\":{\"635\":2}}],[\"中并发读写会导致程序崩溃或不确定行为\",{\"1\":{\"635\":1}}],[\"中获取验证\",{\"1\":{\"634\":1}}],[\"中推送消息\",{\"1\":{\"634\":1}}],[\"中拉取消息\",{\"1\":{\"634\":1}}],[\"中的字段\",{\"1\":{\"972\":1}}],[\"中的指定字段的浮点数值加上增量\",{\"1\":{\"972\":1}}],[\"中的指定字段的整数值加上增量\",{\"1\":{\"972\":1}}],[\"中的表的概念\",{\"1\":{\"846\":1}}],[\"中的切片实现\",{\"1\":{\"649\":1}}],[\"中的令牌\",{\"1\":{\"641\":1}}],[\"中的多重继承可能导致循环继承或菱形继承问题\",{\"1\":{\"637\":1}}],[\"中的轻量级线程\",{\"1\":{\"635\":1}}],[\"中的一个类型\",{\"1\":{\"635\":1}}],[\"中的\",{\"1\":{\"634\":1,\"645\":1}}],[\"中的参数传递是值传递还是引用传递\",{\"1\":{\"633\":1}}],[\"中的defer语句一个都没有执行\",{\"1\":{\"396\":1}}],[\"中间的text模板就不会生成\",{\"1\":{\"1422\":1}}],[\"中间元素不存数据\",{\"1\":{\"805\":1}}],[\"中间表和备份表定期清理\",{\"1\":{\"794\":1}}],[\"中间表\",{\"1\":{\"794\":1}}],[\"中间漏了几个问题\",{\"1\":{\"567\":1,\"639\":2}}],[\"中间件\",{\"1\":{\"111\":1}}],[\"中相关函数\",{\"1\":{\"505\":1}}],[\"中进行创建\",{\"1\":{\"446\":1}}],[\"中许多繁琐的代码\",{\"1\":{\"170\":1}}],[\"中文网站\",{\"1\":{\"955\":1}}],[\"中文是需要3字节大小\",{\"1\":{\"511\":1}}],[\"中文汉字\",{\"1\":{\"255\":1}}],[\"中文\",{\"1\":{\"144\":1}}],[\"中提取源代码文档\",{\"1\":{\"124\":1}}],[\"中\",{\"1\":{\"117\":6,\"118\":5,\"558\":1,\"638\":3,\"641\":3,\"780\":1,\"972\":2,\"973\":2,\"974\":2,\"1072\":1,\"1309\":4}}],[\"中等\",{\"1\":{\"111\":1}}],[\"中设置\",{\"1\":{\"0\":1,\"2\":1}}],[\"功能也十分强大\",{\"1\":{\"1308\":1}}],[\"功能较为简单\",{\"1\":{\"1055\":1}}],[\"功能支持\",{\"1\":{\"1054\":1,\"1055\":1}}],[\"功能丰富\",{\"1\":{\"905\":1}}],[\"功能最全的搜索引擎库\",{\"1\":{\"735\":1}}],[\"功能\",{\"1\":{\"641\":1,\"1072\":1}}],[\"功能测试以\",{\"1\":{\"491\":1,\"494\":1}}],[\"功能测试\",{\"0\":{\"484\":1}}],[\"功能测试函数结果分为两种\",{\"1\":{\"505\":1}}],[\"功能测试函数\",{\"1\":{\"483\":1,\"505\":1}}],[\"功能类似的还有t\",{\"1\":{\"471\":1}}],[\"功能完整\",{\"1\":{\"114\":1}}],[\"功能相对简单\",{\"1\":{\"113\":1}}],[\"功能特性\",{\"1\":{\"111\":1}}],[\"功能更强\",{\"1\":{\"74\":1}}],[\"★★☆☆☆\",{\"1\":{\"111\":1}}],[\"★★★☆☆\",{\"1\":{\"111\":2}}],[\"★★★★☆\",{\"1\":{\"111\":9}}],[\"★★★★★\",{\"1\":{\"111\":9}}],[\"路由的匹配是\",{\"1\":{\"1287\":1}}],[\"路由的规则也非常灵活\",{\"1\":{\"1053\":1}}],[\"路由底层实现的大致概述\",{\"1\":{\"1284\":1}}],[\"路由树的结构\",{\"1\":{\"1284\":1}}],[\"路由树\",{\"0\":{\"1285\":1,\"1286\":1,\"1287\":1},\"1\":{\"1284\":1}}],[\"路由相关参数因为参数都在url上\",{\"1\":{\"1280\":1}}],[\"路由相关参数\",{\"0\":{\"1280\":1},\"1\":{\"1279\":1}}],[\"路由\",{\"1\":{\"122\":1,\"1280\":1}}],[\"路由管理\",{\"1\":{\"111\":1}}],[\"路由性能\",{\"1\":{\"111\":1}}],[\"路径的起点\",{\"1\":{\"1285\":1}}],[\"路径段\",{\"1\":{\"1285\":2}}],[\"路径参数\",{\"1\":{\"1280\":1}}],[\"路径查找算法的go实现\",{\"1\":{\"134\":1}}],[\"路径\",{\"1\":{\"4\":1}}],[\"基类的虚函数可以在派生类中被重写\",{\"1\":{\"637\":1}}],[\"基础镜像\",{\"1\":{\"1193\":1}}],[\"基础环境+配置好的参数+项目\",{\"1\":{\"1183\":1}}],[\"基础上完成的\",{\"1\":{\"1053\":1}}],[\"基础\",{\"0\":{\"899\":1}}],[\"基础操作差不多就是这些\",{\"1\":{\"714\":1}}],[\"基础数据类型是其大小的整数倍\",{\"1\":{\"513\":1}}],[\"基础面试\",{\"0\":{\"507\":1}}],[\"基础路由\",{\"1\":{\"111\":1}}],[\"基准测试用例\",{\"0\":{\"498\":1}}],[\"基准测试函数会输出程序耗时相关数据\",{\"1\":{\"505\":1}}],[\"基准测试函数\",{\"1\":{\"483\":1,\"505\":1}}],[\"基准测试又称为性能测试\",{\"1\":{\"475\":1}}],[\"基准测试是benchmarkxxxx\",{\"1\":{\"467\":1}}],[\"基准测试\",{\"0\":{\"475\":1,\"496\":1},\"1\":{\"466\":1,\"630\":1}}],[\"基本路由\",{\"0\":{\"1277\":1}}],[\"基本请求是一个元组对象\",{\"1\":{\"1251\":1}}],[\"基本权限设置\",{\"1\":{\"1245\":1}}],[\"基本的yaml格式\",{\"1\":{\"1215\":1}}],[\"基本上都是这三步\",{\"1\":{\"1415\":1}}],[\"基本上体会不到两个命令的差别\",{\"1\":{\"981\":1}}],[\"基本上只要知道redis命令怎么用\",{\"1\":{\"913\":1}}],[\"基本操作过程如下\",{\"1\":{\"1028\":1}}],[\"基本操作\",{\"0\":{\"914\":1}}],[\"基本概念\",{\"0\":{\"1250\":1},\"1\":{\"629\":1}}],[\"基本与cancelctx一致\",{\"1\":{\"428\":1}}],[\"基本类型\",{\"0\":{\"373\":1},\"1\":{\"529\":1}}],[\"基本类型之类的\",{\"1\":{\"301\":1}}],[\"基本数据类型如此\",{\"1\":{\"340\":1}}],[\"基本接口\",{\"0\":{\"290\":1},\"1\":{\"289\":1,\"516\":2}}],[\"基本语法\",{\"0\":{\"172\":1}}],[\"基本信息\",{\"1\":{\"111\":1}}],[\"基于路由树的httprouter作为路由引擎可快速匹配路由\",{\"1\":{\"1272\":1}}],[\"基于属性的访问控制\",{\"1\":{\"1238\":1,\"1239\":1}}],[\"基于角色的访问控制\",{\"1\":{\"1238\":1,\"1239\":1}}],[\"基于一个空的镜像\",{\"1\":{\"1193\":1}}],[\"基于基础镜像\",{\"1\":{\"1192\":1}}],[\"基于conn的限流引用\",{\"1\":{\"1158\":1}}],[\"基于cas的快速可调整大小的信号量实现\",{\"1\":{\"137\":1}}],[\"基于服务器级别的限制\",{\"1\":{\"1158\":1}}],[\"基于连接数的限流规则\",{\"1\":{\"1158\":1}}],[\"基于链接限流\",{\"0\":{\"1158\":1}}],[\"基于ip地址的限制\",{\"1\":{\"1158\":1}}],[\"基于ip地址的每分钟2次请求\",{\"0\":{\"1102\":1}}],[\"基于ip限流配置\",{\"0\":{\"1154\":1}}],[\"基于请求的路径\",{\"1\":{\"1071\":1}}],[\"基于lucene\",{\"1\":{\"907\":1}}],[\"基于libsvm\",{\"1\":{\"142\":1}}],[\"基于数据库的锁\",{\"1\":{\"633\":1}}],[\"基于表的测试用例\",{\"0\":{\"494\":1}}],[\"基于它进行命令行开发的项目非常多\",{\"1\":{\"335\":1}}],[\"基于sqlite的分布式数据库\",{\"1\":{\"334\":1}}],[\"基于go语言的数据库或引擎同样也不少\",{\"1\":{\"334\":1}}],[\"基于go编写的协作过滤的离线推荐系统后端\",{\"1\":{\"142\":1}}],[\"基于kcp协议的极其简单和快速的udp隧道\",{\"1\":{\"145\":1}}],[\"基于字典和goram语言的bigram语言模型的标记器\",{\"1\":{\"144\":1}}],[\"基于图形的计算库\",{\"1\":{\"142\":1}}],[\"基于软件交易内存\",{\"1\":{\"137\":1}}],[\"基于通道和上下文的具有锁定\",{\"1\":{\"137\":1}}],[\"基于http\",{\"1\":{\"128\":1,\"756\":1,\"771\":1}}],[\"基于流的编程包\",{\"1\":{\"128\":1}}],[\"基于drmaa标准的集群调度程序的作业提交库\",{\"1\":{\"128\":1}}],[\"基于ringbuffer实现的队列\",{\"1\":{\"122\":1}}],[\"基于ringbuffer的无锁golang\",{\"1\":{\"122\":1}}],[\"基于\",{\"1\":{\"72\":1,\"633\":3,\"634\":1,\"637\":2}}],[\"最新面板安装\",{\"0\":{\"1230\":1}}],[\"最基本的配置方法\",{\"1\":{\"1161\":1}}],[\"最基本的数据类型\",{\"1\":{\"651\":1}}],[\"最少连接方式\",{\"1\":{\"1160\":1}}],[\"最明智的做法就是直接拒绝用户的请求\",{\"1\":{\"1156\":1}}],[\"最严重\",{\"1\":{\"1131\":1}}],[\"最全面\",{\"1\":{\"1131\":1}}],[\"最初由\",{\"1\":{\"1056\":1}}],[\"最初的go是没有泛型这一说法的\",{\"1\":{\"336\":1}}],[\"最小的单位是纳秒\",{\"1\":{\"1430\":1}}],[\"最小值\",{\"0\":{\"1347\":1}}],[\"最小化的语言了解一下\",{\"1\":{\"1309\":1}}],[\"最小日志级别\",{\"1\":{\"1302\":2}}],[\"最小重试时间间隔\",{\"1\":{\"911\":1}}],[\"最小堆的实现\",{\"1\":{\"1308\":1}}],[\"最小堆\",{\"1\":{\"639\":1}}],[\"最左匹配原则\",{\"1\":{\"818\":1}}],[\"最左前缀原则\",{\"1\":{\"610\":1,\"682\":1}}],[\"最好不要超过机器的核数\",{\"1\":{\"965\":1}}],[\"最好能达到ref\",{\"1\":{\"814\":1}}],[\"最好到最差\",{\"1\":{\"814\":1}}],[\"最好手动取消上下文\",{\"1\":{\"428\":1}}],[\"最外层查询则被标记为primary\",{\"1\":{\"814\":1}}],[\"最坏的情况下磁盘io的次数由树的高度来决定\",{\"1\":{\"802\":1}}],[\"最多等于\",{\"1\":{\"1307\":1}}],[\"最多允许4个突发请求的到来\",{\"1\":{\"1155\":1}}],[\"最多允许10个线程同时执行\",{\"1\":{\"654\":1}}],[\"最多只能有一个协程对变量count进行修改\",{\"1\":{\"417\":1}}],[\"最多只有一个数据存放在缓冲区中\",{\"1\":{\"417\":1}}],[\"最先执行\",{\"1\":{\"651\":1}}],[\"最不常用淘汰策略\",{\"1\":{\"635\":1}}],[\"最近的项目涉及到\",{\"1\":{\"636\":1}}],[\"最近最少使用淘汰\",{\"1\":{\"635\":1}}],[\"最近有了解一些新的技术或者看一些技术书籍之类的吗\",{\"1\":{\"590\":1,\"662\":1}}],[\"最接近的三数之和\",{\"1\":{\"606\":1,\"678\":1}}],[\"最开始有没有考虑乐观锁的适用场景和悲观锁的适用场景\",{\"1\":{\"588\":1,\"660\":1}}],[\"最大值\",{\"0\":{\"1346\":1}}],[\"最大的是小时\",{\"1\":{\"1430\":1}}],[\"最大的公开仓库是\",{\"1\":{\"1183\":1}}],[\"最大的问题就在于\",{\"1\":{\"1165\":1}}],[\"最大的失败次数\",{\"1\":{\"1163\":1}}],[\"最大的优点\",{\"1\":{\"1055\":1}}],[\"最大的优化就是减少磁盘i\",{\"1\":{\"800\":1}}],[\"最大重试时间间隔\",{\"1\":{\"911\":1}}],[\"最大线程数\",{\"1\":{\"645\":2}}],[\"最大子数组和\",{\"1\":{\"645\":1}}],[\"最大限度提高cpu利用率\",{\"1\":{\"542\":1}}],[\"最大并发度\",{\"1\":{\"542\":1}}],[\"最大也只有三个字节\",{\"1\":{\"258\":1}}],[\"最为chan的类型\",{\"1\":{\"513\":1}}],[\"最佳实践\",{\"0\":{\"504\":1}}],[\"最重要的是\",{\"1\":{\"494\":1}}],[\"最重要的一点就是降低gc压力\",{\"1\":{\"435\":1}}],[\"最根本的区别在于它的类型一旦推断出来后不会再发生变化\",{\"1\":{\"381\":1}}],[\"最轻松的当然是直接不要泛型\",{\"1\":{\"345\":1}}],[\"最后效果\",{\"1\":{\"1306\":1}}],[\"最后获得core和options\",{\"1\":{\"1306\":1}}],[\"最后构建\",{\"0\":{\"1306\":1}}],[\"最后代码如下\",{\"1\":{\"1304\":1}}],[\"最后生成并提交镜像\",{\"1\":{\"1190\":1}}],[\"最后一个请求要排队2s才会被处理\",{\"1\":{\"1156\":1}}],[\"最后一步运行mongodb服务\",{\"0\":{\"851\":1}}],[\"最后要注意的是\",{\"1\":{\"1024\":1}}],[\"最后再将内容匹配的结果返\",{\"1\":{\"1019\":1}}],[\"最后再推送到远程仓库\",{\"1\":{\"449\":1}}],[\"最后说明优化方案\",{\"1\":{\"901\":1}}],[\"最后更新时间字段\",{\"1\":{\"794\":1}}],[\"最后还是花钱买服务\",{\"1\":{\"615\":1,\"687\":1}}],[\"最后清除过程中产生的临时文件\",{\"1\":{\"481\":1}}],[\"最后依旧需要发布新版本\",{\"1\":{\"463\":1}}],[\"最后的最后\",{\"1\":{\"448\":1}}],[\"最后需要注意的是\",{\"1\":{\"435\":1}}],[\"最后会将自身从父级中删除\",{\"1\":{\"427\":1}}],[\"最后输出到传入的writer中也就是os\",{\"1\":{\"1415\":1}}],[\"最后输出如下\",{\"1\":{\"426\":1}}],[\"最后输出长度和容量\",{\"1\":{\"244\":1}}],[\"最后主协程退出\",{\"1\":{\"417\":1}}],[\"最后关闭该管道\",{\"1\":{\"415\":1}}],[\"最后\",{\"0\":{\"314\":1}}],[\"最后编译go程序并执行\",{\"1\":{\"312\":1}}],[\"最典型的例子就是fmt\",{\"1\":{\"279\":1}}],[\"最终都会通过fmt\",{\"1\":{\"1417\":1}}],[\"最终的模板生成结果为\",{\"1\":{\"1426\":1}}],[\"最终的日志编码\",{\"1\":{\"1303\":1}}],[\"最终的输出为\",{\"1\":{\"250\":1}}],[\"最终得到积水的总量\",{\"1\":{\"656\":1}}],[\"最终得到的数据是i最大的值\",{\"1\":{\"514\":1}}],[\"最终一致性\",{\"1\":{\"644\":1}}],[\"最终是进入黑色\",{\"1\":{\"551\":1}}],[\"最终结果即为只出现一次的数字\",{\"1\":{\"645\":1}}],[\"最终结果一定是10\",{\"1\":{\"429\":1}}],[\"最终结果\",{\"1\":{\"429\":2,\"430\":2,\"431\":2,\"432\":2}}],[\"最终输出\",{\"1\":{\"1432\":1}}],[\"最终输出的结果为\",{\"1\":{\"1427\":1}}],[\"最终输出为\",{\"1\":{\"439\":1}}],[\"最终输出如下\",{\"1\":{\"421\":1}}],[\"最终输出结果为\",{\"1\":{\"249\":1}}],[\"最终呈现一个完整的网页\",{\"1\":{\"110\":1}}],[\"最常用的独立于语言的数据格式有xml\",{\"1\":{\"1309\":1}}],[\"最常用的排序方法是通过实现\",{\"1\":{\"649\":1}}],[\"最常用的\",{\"1\":{\"239\":1}}],[\"最常见的用法是使用fmt包\",{\"1\":{\"219\":1}}],[\"最简单的是在master创建一个数据库\",{\"1\":{\"824\":1}}],[\"最简单的做法就是让主协程等一会儿\",{\"1\":{\"412\":1}}],[\"最简单\",{\"1\":{\"83\":1}}],[\"先准备结构体\",{\"1\":{\"1313\":1}}],[\"先准备数据\",{\"1\":{\"713\":1}}],[\"先总结一些\",{\"1\":{\"1060\":1}}],[\"先写入系统\",{\"1\":{\"1054\":1}}],[\"先写数据库成功再写redis\",{\"1\":{\"576\":1,\"648\":1}}],[\"先移除数据\",{\"1\":{\"1010\":1}}],[\"先添加一个从节点8008\",{\"1\":{\"1010\":1}}],[\"先说明怎么发现和定位问题\",{\"1\":{\"901\":1}}],[\"先stop\",{\"1\":{\"825\":1}}],[\"先定义文章的的struct\",{\"1\":{\"746\":1}}],[\"先从\",{\"1\":{\"634\":1}}],[\"先进入p的私有队列\",{\"1\":{\"600\":1,\"672\":1}}],[\"先读猫channel输出\",{\"1\":{\"595\":1,\"667\":1}}],[\"先编译出\",{\"0\":{\"503\":1}}],[\"先后顺序\",{\"1\":{\"412\":1}}],[\"先将内容读到缓冲区中\",{\"1\":{\"403\":1}}],[\"先将源文件编译成目标文件\",{\"1\":{\"313\":1}}],[\"先只需要了解这两个类型的存在即可\",{\"1\":{\"348\":1}}],[\"先看一个例子\",{\"1\":{\"286\":1}}],[\"先看单线程开发\",{\"1\":{\"30\":1}}],[\"先声明泛型结构体\",{\"1\":{\"344\":1}}],[\"先声明\",{\"1\":{\"285\":1}}],[\"先声明了一个类型intslice\",{\"1\":{\"285\":1}}],[\"先来认识下channel的基本语法\",{\"1\":{\"413\":1}}],[\"先来介绍第一种使用方法\",{\"1\":{\"400\":1}}],[\"先来看看的一个例子\",{\"1\":{\"429\":1}}],[\"先来看看context接口的定义\",{\"1\":{\"424\":1}}],[\"先来看看接口长什么样子\",{\"1\":{\"291\":1}}],[\"先来看一个简单的例子\",{\"1\":{\"337\":1}}],[\"先来看一个例子\",{\"1\":{\"285\":1,\"293\":1}}],[\"先来看一段c++代码\",{\"1\":{\"276\":1}}],[\"先来看下面的一个例子\",{\"1\":{\"249\":1}}],[\"先来初始化一个长度为5的整型数组\",{\"1\":{\"239\":1}}],[\"先根据ip找到服务器在哪里\",{\"1\":{\"110\":1}}],[\"于是形成六个虚拟节点\",{\"1\":{\"1165\":1}}],[\"于是可以分别计算\",{\"1\":{\"1165\":1}}],[\"于是我们引入\",{\"1\":{\"1066\":1}}],[\"于是就进入了执行器阶段\",{\"1\":{\"780\":1}}],[\"于是就有了现在人们所推崇的面向接口编程\",{\"1\":{\"288\":1}}],[\"于是\",{\"1\":{\"453\":1}}],[\"于是也将错误作为返回值返回\",{\"1\":{\"392\":1}}],[\"于是公司b依据规范造了一台更厉害的巨无霸起重机\",{\"1\":{\"293\":1}}],[\"于是公司a接下了订单\",{\"1\":{\"293\":1}}],[\"于是给出了起重机的特殊规范和图纸\",{\"1\":{\"293\":1}}],[\"于是乎开始有了动态网页\",{\"1\":{\"110\":1}}],[\"于是linus选择了一个商业的版本控制系统bitkeeper\",{\"1\":{\"12\":1}}],[\"随机返回count个元素\",{\"1\":{\"940\":1}}],[\"随机数据可以更好的测试程序的边界条件\",{\"1\":{\"477\":1}}],[\"随便说说\",{\"1\":{\"595\":1,\"667\":1}}],[\"随便都可以找到\",{\"1\":{\"335\":1}}],[\"随着\",{\"1\":{\"1063\":1}}],[\"随着越来越多的公司和组织开始采用kafka作为基础消息队列技术\",{\"1\":{\"1038\":1}}],[\"随着数据量的增加而增加\",{\"1\":{\"809\":1}}],[\"随着生成数据量的急剧增长\",{\"1\":{\"799\":1}}],[\"随着覆盖范围的不断扩大\",{\"1\":{\"477\":1}}],[\"随着互联网技术的发展\",{\"1\":{\"110\":1}}],[\"随之而来的是项目复杂度的增加\",{\"1\":{\"337\":1}}],[\"随后再过1秒\",{\"1\":{\"1163\":1}}],[\"随后使用compareandswapint64来进行比较交换\",{\"1\":{\"440\":1}}],[\"随后协程b又初始化了一遍\",{\"1\":{\"434\":1}}],[\"随后又花费了400毫秒计算\",{\"1\":{\"429\":1}}],[\"随后当读协程将缓冲区所有数据读取完毕后\",{\"1\":{\"417\":1}}],[\"随后\",{\"1\":{\"64\":1}}],[\"作者建议如果存储很多小对象\",{\"1\":{\"965\":1}}],[\"作者在自己的一篇博文中解释了为什么选用6379作为默认端口\",{\"1\":{\"965\":1}}],[\"作者\",{\"1\":{\"756\":1}}],[\"作为国产的消息队列\",{\"1\":{\"1054\":1}}],[\"作为隐藏文档进行索引\",{\"1\":{\"729\":1}}],[\"作为\",{\"1\":{\"700\":1}}],[\"作为表中记录的唯一标识\",{\"1\":{\"653\":1}}],[\"作为消息队列\",{\"1\":{\"651\":1}}],[\"作为消息队列时\",{\"1\":{\"637\":1}}],[\"作为缓存时\",{\"1\":{\"641\":1}}],[\"作为一等公民\",{\"1\":{\"514\":1}}],[\"作为文档\",{\"1\":{\"501\":1}}],[\"作为map的值类型\",{\"1\":{\"274\":1}}],[\"作为初学者很多时候\",{\"1\":{\"110\":1}}],[\"作用\",{\"1\":{\"633\":1,\"651\":1,\"813\":1,\"1020\":1,\"1163\":2,\"1420\":1}}],[\"作用就是将两个int类型的整数相加并返回结果\",{\"1\":{\"337\":1}}],[\"作用二\",{\"1\":{\"53\":1}}],[\"作用一\",{\"1\":{\"53\":1}}],[\"终端默认登录的进来工作目录\",{\"1\":{\"1193\":1}}],[\"终止复制\",{\"1\":{\"990\":1}}],[\"终止条件\",{\"1\":{\"4\":1}}],[\"终于go在1\",{\"1\":{\"336\":1}}],[\"终极方案\",{\"1\":{\"85\":1}}],[\"更大的区别在于垃圾回收的处理\",{\"1\":{\"1443\":1}}],[\"更简单地说\",{\"1\":{\"1254\":1}}],[\"更好\",{\"1\":{\"1054\":1}}],[\"更容易支持多数据源和分布式数据处理\",{\"1\":{\"1019\":1}}],[\"更容易做范围查询\",{\"1\":{\"805\":1}}],[\"更改配置文件\",{\"1\":{\"999\":1}}],[\"更改索引\",{\"1\":{\"810\":1}}],[\"更改语言\",{\"1\":{\"13\":1}}],[\"更少的联合主键字段来完成数据表的设计\",{\"1\":{\"793\":1}}],[\"更少的字段\",{\"1\":{\"793\":1}}],[\"更安全\",{\"1\":{\"638\":1}}],[\"更安全但是复杂响应太慢了\",{\"1\":{\"85\":1}}],[\"更优雅的解决方案是使用\",{\"1\":{\"638\":1}}],[\"更高\",{\"1\":{\"637\":1}}],[\"更高效的反射api\",{\"1\":{\"122\":1}}],[\"更加高效\",{\"1\":{\"649\":1}}],[\"更加灵活\",{\"1\":{\"637\":1}}],[\"更加简洁和高效\",{\"1\":{\"168\":1}}],[\"更偏向算法还是更偏向工程\",{\"1\":{\"597\":1,\"669\":1}}],[\"更可能长时间存在\",{\"1\":{\"553\":1}}],[\"更可能是垃圾\",{\"1\":{\"553\":1}}],[\"更有效\",{\"1\":{\"522\":1}}],[\"更像是一种工程上的约定俗成\",{\"1\":{\"470\":1}}],[\"更适合处理这些基础的数据类型\",{\"1\":{\"438\":1}}],[\"更新必要的包\",{\"1\":{\"1220\":1}}],[\"更新系统包\",{\"1\":{\"1220\":1}}],[\"更新yum索引\",{\"1\":{\"1184\":1}}],[\"更新数据\",{\"1\":{\"895\":1}}],[\"更新内容\",{\"1\":{\"882\":2}}],[\"更新一条数据\",{\"1\":{\"859\":1}}],[\"更新和查询等操作\",{\"1\":{\"841\":1,\"887\":1}}],[\"更新retweets=0\",{\"1\":{\"748\":1}}],[\"更新文档\",{\"0\":{\"747\":1,\"836\":1}}],[\"更新文档内容\",{\"1\":{\"711\":1}}],[\"更新时间\",{\"1\":{\"653\":1}}],[\"更新的开销\",{\"1\":{\"651\":1}}],[\"更新队列\",{\"1\":{\"645\":1}}],[\"更新\",{\"0\":{\"711\":1,\"895\":1},\"1\":{\"635\":1}}],[\"更新完成后再解锁\",{\"1\":{\"430\":1}}],[\"更新您现有的microsoft\",{\"1\":{\"143\":1}}],[\"更推荐这种写法\",{\"1\":{\"338\":1}}],[\"更换起重机b\",{\"1\":{\"293\":1}}],[\"更换为变量名\",{\"1\":{\"122\":1}}],[\"更多功能\",{\"1\":{\"1056\":1}}],[\"更多的是使用短变量\",{\"1\":{\"275\":1}}],[\"更多细节前往参考手册\",{\"1\":{\"243\":1}}],[\"更多细节可以前往参考手册\",{\"1\":{\"195\":1}}],[\"更易学易用\",{\"1\":{\"168\":1}}],[\"加权重方式\",{\"1\":{\"1162\":1}}],[\"加权轮询\",{\"0\":{\"1162\":1}}],[\"加一层中间层\",{\"1\":{\"1060\":1}}],[\"加一个中间层\",{\"1\":{\"1012\":1}}],[\"加入前需要每一个节点假如域名\",{\"1\":{\"1226\":1}}],[\"加入控制节点\",{\"0\":{\"1226\":1}}],[\"加入work节点\",{\"0\":{\"1227\":1},\"1\":{\"1225\":1}}],[\"加入主节点\",{\"1\":{\"1225\":1}}],[\"加入了nodelay参数之后的限速算法\",{\"1\":{\"1156\":1}}],[\"加入集群\",{\"1\":{\"1010\":1}}],[\"加入元素\",{\"0\":{\"947\":1}}],[\"加$set表示未更新数据保留\",{\"1\":{\"859\":1}}],[\"加速查找+约束\",{\"1\":{\"809\":2}}],[\"加速查找\",{\"1\":{\"809\":1}}],[\"加末单词组成column\",{\"1\":{\"795\":1}}],[\"加索引\",{\"1\":{\"653\":1}}],[\"加什么锁\",{\"1\":{\"618\":1,\"690\":1}}],[\"加快访问速度之类的\",{\"1\":{\"615\":1,\"687\":1}}],[\"加载原理\",{\"0\":{\"1192\":1},\"1\":{\"1190\":1}}],[\"加载默认页面\",{\"0\":{\"1123\":1}}],[\"加载脚本\",{\"1\":{\"952\":1}}],[\"加载等基本功能\",{\"1\":{\"644\":1}}],[\"加载因子多大\",{\"1\":{\"566\":1,\"638\":2}}],[\"加载\",{\"1\":{\"439\":1}}],[\"加载值\",{\"1\":{\"439\":1}}],[\"加载并执行经过python训练的模型\",{\"1\":{\"142\":1}}],[\"加写锁\",{\"1\":{\"431\":1}}],[\"加读锁\",{\"1\":{\"431\":1}}],[\"加锁通常是在修改数据时进行的\",{\"1\":{\"656\":1}}],[\"加锁怎么解决超卖问题呢\",{\"1\":{\"606\":1,\"678\":1}}],[\"加锁是希望数据不会被其他协程修改\",{\"1\":{\"429\":1}}],[\"加锁只需要lock\",{\"1\":{\"429\":1}}],[\"加锁\",{\"1\":{\"417\":2,\"430\":2,\"434\":1,\"556\":1}}],[\"加上cookie名称的变量\",{\"1\":{\"1133\":1}}],[\"加上去除空格的函数\",{\"1\":{\"818\":1}}],[\"加上枚举类型名就可以访问c中的枚举类型\",{\"1\":{\"309\":1}}],[\"加上名称就可以访问c中的联合体\",{\"1\":{\"308\":1}}],[\"加密过程是怎样的\",{\"1\":{\"590\":1,\"662\":1}}],[\"加密算法\",{\"1\":{\"562\":1,\"634\":4}}],[\"加密简单\",{\"1\":{\"85\":1}}],[\"加密几种方式的优缺点\",{\"1\":{\"85\":1}}],[\"加号\",{\"1\":{\"19\":1,\"22\":1}}],[\"篡改\",{\"1\":{\"85\":1}}],[\"用http描述操作\",{\"1\":{\"1278\":1}}],[\"用deployment来优化升级\",{\"1\":{\"1215\":1}}],[\"用docker命令合成一个自己的镜像并提交到远程仓库了\",{\"1\":{\"1193\":1}}],[\"用dbquery\",{\"1\":{\"861\":1}}],[\"用同样的方法求出待存储对象的主键\",{\"1\":{\"1165\":1}}],[\"用这种算法来实现的话\",{\"1\":{\"1165\":1}}],[\"用这个开源工具实现https\",{\"1\":{\"84\":1}}],[\"用kong的\",{\"1\":{\"1087\":1}}],[\"用它\",{\"1\":{\"1068\":1}}],[\"用redis\",{\"1\":{\"1010\":1}}],[\"用redis做缓存\",{\"1\":{\"625\":1,\"697\":1}}],[\"用一个服务单独处理这些消息队列\",{\"1\":{\"1061\":1}}],[\"用一个offset定位处理的位置\",{\"1\":{\"1061\":1}}],[\"用一个触发机制来判断是否需要执行备份\",{\"1\":{\"980\":1}}],[\"用一句话来总结范式和冗余\",{\"1\":{\"789\":1}}],[\"用toarray方法将其转换为数组\",{\"1\":{\"863\":1}}],[\"用管理员身份打开\",{\"1\":{\"852\":1}}],[\"用记事本打开编辑即可\",{\"1\":{\"852\":1}}],[\"用好数值字段类型\",{\"0\":{\"791\":1}}],[\"用nested类型解决object类型的不足\",{\"0\":{\"729\":1}}],[\"用起来跟http\",{\"1\":{\"714\":1}}],[\"用起来跟c差不多\",{\"1\":{\"224\":1}}],[\"用密钥对头部和载荷进行加密\",{\"1\":{\"634\":1}}],[\"用两个协程\",{\"1\":{\"622\":1,\"694\":1}}],[\"用\",{\"1\":{\"619\":1,\"691\":1,\"1054\":1}}],[\"用sync\",{\"1\":{\"595\":1,\"667\":1}}],[\"用到覆盖索引\",{\"1\":{\"595\":1,\"667\":1}}],[\"用到什么锁\",{\"1\":{\"595\":1,\"667\":1}}],[\"用处\",{\"1\":{\"579\":1,\"651\":3,\"1163\":1}}],[\"用过\",{\"1\":{\"655\":1}}],[\"用过命令去打过jar包吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"用过k8s吗\",{\"1\":{\"595\":1,\"667\":1}}],[\"用过limit查询吗\",{\"1\":{\"593\":1,\"665\":1}}],[\"用过open\",{\"1\":{\"583\":1,\"655\":1}}],[\"用过云产品吗\",{\"1\":{\"583\":1,\"655\":2}}],[\"用过+1\",{\"1\":{\"580\":1,\"652\":1}}],[\"用过吗\",{\"1\":{\"573\":1,\"645\":1}}],[\"用过其他容器运行时吗\",{\"1\":{\"562\":1,\"634\":1}}],[\"用在什么地方\",{\"1\":{\"567\":1,\"639\":2}}],[\"用什么数据结构\",{\"1\":{\"566\":1,\"638\":1}}],[\"用什么技术栈\",{\"1\":{\"520\":1}}],[\"用get会有什么问题\",{\"1\":{\"566\":1,\"638\":2}}],[\"用go自带的原生http标准库\",{\"1\":{\"330\":1}}],[\"用go\",{\"1\":{\"142\":1}}],[\"用go语言编写的神经网络\",{\"1\":{\"142\":1}}],[\"用go语言编写的路径跟踪引擎\",{\"1\":{\"139\":1}}],[\"用go语言编写的2d游戏引擎\",{\"1\":{\"134\":1}}],[\"用go语言编写的3d游戏引擎\",{\"1\":{\"134\":1}}],[\"用go语言编写的可编写脚本的解释器\",{\"1\":{\"130\":1}}],[\"用go编写的linux视频捕获库\",{\"1\":{\"146\":1}}],[\"用go编写的lua\",{\"1\":{\"130\":1}}],[\"用go编写的推荐算法库\",{\"1\":{\"142\":1}}],[\"用go编写的深度神经网络库\",{\"1\":{\"142\":1}}],[\"用go编写的json\",{\"1\":{\"141\":1}}],[\"用go编写的javascript解释器\",{\"1\":{\"130\":1}}],[\"用go编写的图像大小调整服务器\",{\"1\":{\"139\":1}}],[\"用go编写的存储和图像处理服务器\",{\"1\":{\"139\":1}}],[\"用go编写的高度可定制的表达语言\",{\"1\":{\"130\":1}}],[\"用go编写的smtp服务器\",{\"1\":{\"129\":1}}],[\"用字符串不可以吗\",{\"1\":{\"565\":1,\"637\":2}}],[\"用法和must类似\",{\"1\":{\"764\":1}}],[\"用法和数组一样\",{\"1\":{\"512\":1}}],[\"用法也简单\",{\"1\":{\"556\":1}}],[\"用值来调用而不是\",{\"1\":{\"515\":1}}],[\"用来在构建镜像过程中设置环境变量\",{\"1\":{\"1193\":1}}],[\"用来映射到圈上的位置\",{\"1\":{\"1165\":1}}],[\"用来将数据分散到各个redis存储系统中\",{\"1\":{\"1165\":1}}],[\"用来标识访问的限流频率\",{\"1\":{\"1158\":1}}],[\"用来标识日志会在kafka集群内保留多⻓时间\",{\"1\":{\"1025\":1}}],[\"用来存储访问的频次信息\",{\"1\":{\"1151\":1}}],[\"用来存放日志文件\",{\"1\":{\"852\":1}}],[\"用来限制同一时间连接数\",{\"1\":{\"1150\":1}}],[\"用来限制单位时间内的请求数\",{\"1\":{\"1150\":1,\"1154\":1}}],[\"用来记录从那个页面链接访问过来的\",{\"1\":{\"1133\":1}}],[\"用来通过不同库隔离不同应用数据\",{\"1\":{\"845\":1}}],[\"用来读取数据而非执行查找动作\",{\"1\":{\"814\":1}}],[\"用来跟服务端建立连接\",{\"1\":{\"776\":1}}],[\"用来关联主评论\",{\"1\":{\"638\":1}}],[\"用来确定一个变量是否需要分配到堆上\",{\"1\":{\"635\":1}}],[\"用来表示未定义或不可表示的值\",{\"1\":{\"512\":1}}],[\"用来提供自动化测试技术\",{\"1\":{\"483\":1}}],[\"用来提供文档\",{\"1\":{\"483\":1}}],[\"用来测试程序的性能\",{\"1\":{\"483\":1}}],[\"用来测试程序逻辑的正确性\",{\"1\":{\"483\":1}}],[\"用完之后再释放对象\",{\"1\":{\"435\":1}}],[\"用完整的\",{\"1\":{\"84\":1}}],[\"用指定的权限创建指定名称的目录\",{\"1\":{\"409\":1}}],[\"用户的输入需要数据合法\",{\"1\":{\"1288\":1}}],[\"用户名为\",{\"1\":{\"1280\":2}}],[\"用户名和密码\",{\"1\":{\"641\":1}}],[\"用户被分配一个资源的角色\",{\"1\":{\"1259\":1}}],[\"用户角色\",{\"1\":{\"1223\":2}}],[\"用户角度看来就是rt变长了\",{\"1\":{\"1156\":1}}],[\"用户自己使用network相关命令定义网络\",{\"1\":{\"1197\":1}}],[\"用户自定义\",{\"1\":{\"1197\":1}}],[\"用户终端浏览器等信息\",{\"1\":{\"1133\":1}}],[\"用户路由接口初始化\",{\"1\":{\"1087\":1}}],[\"用户访问\",{\"1\":{\"1073\":1}}],[\"用户删除key的过期时间\",{\"1\":{\"967\":1}}],[\"用户可以稍后进入容器\",{\"1\":{\"1197\":1}}],[\"用户可以在这里配置远程扩展停止词字典\",{\"1\":{\"742\":1,\"743\":1}}],[\"用户可以在这里配置远程扩展字典\",{\"1\":{\"742\":1,\"743\":1}}],[\"用户可以在这里配置自己的扩展停止词字典\",{\"1\":{\"742\":1}}],[\"用户可以在这里配置自己的扩展字典\",{\"1\":{\"742\":1}}],[\"用户可以关注其他用户\",{\"1\":{\"644\":1}}],[\"用户可以对视频进行评论\",{\"1\":{\"644\":1}}],[\"用户上传视频文件\",{\"1\":{\"644\":1}}],[\"用户系统\",{\"1\":{\"644\":1}}],[\"用户注册\",{\"1\":{\"641\":1,\"644\":1}}],[\"用户通过邮箱验证码或短信验证码进行注册\",{\"1\":{\"641\":1}}],[\"用户通过\",{\"1\":{\"641\":1}}],[\"用户填写信息后\",{\"1\":{\"641\":1}}],[\"用户提供用户名和密码\",{\"1\":{\"641\":1}}],[\"用户提交验证码时\",{\"1\":{\"634\":1}}],[\"用户id\",{\"1\":{\"638\":3}}],[\"用户id活动id\",{\"1\":{\"625\":1,\"697\":1}}],[\"用户数据报协议\",{\"1\":{\"636\":1}}],[\"用户专注于\",{\"1\":{\"636\":1}}],[\"用户信息怎么做加密\",{\"1\":{\"625\":1,\"697\":1}}],[\"用户信息怎么存的\",{\"1\":{\"563\":1,\"635\":2}}],[\"用户登录安全有了解过吗\",{\"1\":{\"624\":1,\"696\":1}}],[\"用户登录的处理流程是怎么个样子\",{\"1\":{\"592\":1,\"664\":1}}],[\"用户登录之后怎么找到对应的session的呢\",{\"1\":{\"590\":1,\"662\":1}}],[\"用户登录以后\",{\"1\":{\"569\":1,\"641\":2}}],[\"用户下单用户派送的优劣了解过吗\",{\"1\":{\"588\":1,\"660\":1}}],[\"用户量相关\",{\"1\":{\"576\":1,\"648\":1}}],[\"用户悬赏下单的业务流程讲一下\",{\"1\":{\"569\":1,\"641\":1}}],[\"用户\",{\"1\":{\"459\":1}}],[\"用户定义代码区域的相关协程信息\",{\"1\":{\"328\":1}}],[\"用户定义任务的相关协程信息\",{\"1\":{\"328\":1}}],[\"用户在浏览器通过ip+port+路由这样的地址访问\",{\"1\":{\"110\":1}}],[\"用web\",{\"1\":{\"326\":1}}],[\"用malloc\",{\"1\":{\"310\":1}}],[\"用下划线可以表示不需要某一个变量\",{\"1\":{\"207\":1}}],[\"用纯围棋轻便\",{\"1\":{\"145\":1}}],[\"用纯围棋和luajit快速和可扩展的分布式的map\",{\"1\":{\"128\":1}}],[\"用纯go语言编写的jp形态分析仪\",{\"1\":{\"144\":1}}],[\"用纯go语言编写\",{\"1\":{\"142\":1}}],[\"用于记录函数的映射\",{\"1\":{\"1420\":1}}],[\"用于记录该依赖已知的版本号\",{\"1\":{\"460\":1}}],[\"用于比较是否相等的函数eq函数\",{\"1\":{\"1420\":1}}],[\"用于获取操作系统的用户信息\",{\"1\":{\"1308\":1}}],[\"用于监听操作系统的信号\",{\"1\":{\"1308\":1}}],[\"用于map类型参数\",{\"1\":{\"1280\":1}}],[\"用于mpo\",{\"1\":{\"139\":1}}],[\"用于外部访问\",{\"1\":{\"1234\":1}}],[\"用于数据保存和持久化工作\",{\"1\":{\"1193\":1}}],[\"用于标识服务器当前的状态\",{\"1\":{\"1163\":1}}],[\"用于标识用户\",{\"1\":{\"641\":1}}],[\"用于设置最大访问速率\",{\"1\":{\"1154\":1}}],[\"用于设置响应的速度限制\",{\"1\":{\"1133\":1}}],[\"用于http基础认证服务的用户名\",{\"1\":{\"1133\":1}}],[\"用于检索消息\",{\"1\":{\"1026\":1}}],[\"用于检索多个网络设备的配置\",{\"1\":{\"145\":1}}],[\"用于备份partition的内容保证稳定性\",{\"1\":{\"1020\":1}}],[\"用于组织一类消息\",{\"1\":{\"1020\":1}}],[\"用于提供数据的高可用性\",{\"1\":{\"1007\":1}}],[\"用于提交数据\",{\"1\":{\"638\":1}}],[\"用于删除所有数据库中的key\",{\"1\":{\"968\":1}}],[\"用于删除当前选择的数据库所有的key\",{\"1\":{\"968\":1}}],[\"用于删除项目模块依赖缓存\",{\"1\":{\"456\":1}}],[\"用于查看redis服务器各种信息和统计数值\",{\"1\":{\"968\":1}}],[\"用于选择数据库\",{\"1\":{\"967\":1}}],[\"用于同步数据的用户\",{\"1\":{\"822\":1}}],[\"用于搜索很长一篇文章的时候\",{\"1\":{\"809\":1}}],[\"用于保留中间结果集\",{\"1\":{\"794\":1}}],[\"用于保护共享资源\",{\"1\":{\"651\":1}}],[\"用于保护内存中的共享资源\",{\"1\":{\"639\":1}}],[\"用于精确查询\",{\"1\":{\"756\":1}}],[\"用于分配内存\",{\"1\":{\"654\":1}}],[\"用于分析\",{\"1\":{\"634\":1}}],[\"用于追踪数据的生命周期\",{\"1\":{\"653\":1}}],[\"用于排名和计数\",{\"1\":{\"651\":1}}],[\"用于实现生产者消费者模式\",{\"1\":{\"651\":1}}],[\"用于读写分离和容错\",{\"1\":{\"651\":1}}],[\"用于读取器\",{\"1\":{\"145\":1}}],[\"用于读取\",{\"1\":{\"135\":1}}],[\"用于等待多个协程执行完毕\",{\"1\":{\"651\":1}}],[\"用于缓存等待执行的任务\",{\"1\":{\"645\":1}}],[\"用于身份验证的令牌\",{\"1\":{\"641\":1}}],[\"用于加密对称加密的密钥交换\",{\"1\":{\"641\":1}}],[\"用于加密数据传输\",{\"1\":{\"641\":1}}],[\"用于请求数据\",{\"1\":{\"638\":1}}],[\"用于动态分配内存\",{\"1\":{\"636\":1}}],[\"用于索引查找\",{\"1\":{\"635\":1}}],[\"用于帮助分析线程的行为\",{\"1\":{\"634\":1}}],[\"用于定义一些通用的函数\",{\"1\":{\"516\":1}}],[\"用于定义和规范一组方法集\",{\"1\":{\"516\":1}}],[\"用于存储需要排序的集合\",{\"1\":{\"641\":1}}],[\"用于存储简单的缓存数据\",{\"1\":{\"641\":1}}],[\"用于存储频繁读取的数据\",{\"1\":{\"641\":1}}],[\"用于存储局部变量\",{\"1\":{\"636\":1}}],[\"用于存储一组不同的数据类型\",{\"1\":{\"513\":1}}],[\"用于存放死的指针地址\",{\"1\":{\"197\":1}}],[\"用于可遍历的类型\",{\"1\":{\"509\":1}}],[\"用于和结果进行比较\",{\"1\":{\"494\":1}}],[\"用于格式化输出测试失败的日志信息\",{\"1\":{\"471\":1}}],[\"用于计数过程中总共创建了多少个对象\",{\"1\":{\"435\":1}}],[\"用于对象池在申请不到对象时初始化一个对象\",{\"1\":{\"435\":1}}],[\"用于判断操作是否已经执行\",{\"1\":{\"434\":1}}],[\"用于表示业务实体的当前状态\",{\"1\":{\"653\":1}}],[\"用于表示某种逻辑上的存在\",{\"1\":{\"651\":1}}],[\"用于表示测试完毕\",{\"1\":{\"471\":1}}],[\"用于表示上下关闭的原因\",{\"1\":{\"424\":1}}],[\"用于表示数据是否读取成功\",{\"1\":{\"415\":1}}],[\"用于返回其内部对于原error的引用\",{\"1\":{\"392\":1}}],[\"用于输出错误信息\",{\"1\":{\"389\":1}}],[\"用于包命名\",{\"1\":{\"178\":1}}],[\"用于声明一个函数\",{\"1\":{\"172\":1}}],[\"用于自动化部署\",{\"1\":{\"166\":1}}],[\"用于更快地构建tcp服务器的go库\",{\"1\":{\"145\":1}}],[\"用于快速开发云和裸机\",{\"1\":{\"145\":1}}],[\"用于快速编写tcp应用程序的go软件包\",{\"1\":{\"145\":1}}],[\"用于执行操作系统命令\",{\"1\":{\"1308\":1}}],[\"用于执行goroutine\",{\"1\":{\"654\":1}}],[\"用于执行snmp操作的本机go库\",{\"1\":{\"145\":1}}],[\"用于执行unicode标准附件\",{\"1\":{\"144\":1}}],[\"用于发送和接收以太网帧的跨平台go软件包\",{\"1\":{\"145\":1}}],[\"用于发送电子邮件\",{\"1\":{\"129\":1}}],[\"用于基于n\",{\"1\":{\"144\":1}}],[\"用于文本处理的库\",{\"1\":{\"144\":1}}],[\"用于word2vec嵌入的阅读器和实用程序功能\",{\"1\":{\"144\":1}}],[\"用于简化在go程序中读取microsoft\",{\"1\":{\"143\":1}}],[\"用于编写xlsx\",{\"1\":{\"143\":1}}],[\"用于创建和处理office\",{\"1\":{\"143\":1}}],[\"用于创建json对象的小型实用程序\",{\"1\":{\"141\":1}}],[\"用于增强拓扑神经演化\",{\"1\":{\"142\":1}}],[\"用于pmml的go\",{\"1\":{\"142\":1}}],[\"用于portaudio音频i\",{\"1\":{\"126\":1}}],[\"用于纯go中的机器学习\",{\"1\":{\"142\":1}}],[\"用于json文档的任意转换的api\",{\"1\":{\"141\":1}}],[\"用于将操作系统中缓存的io写入落实到磁盘上\",{\"1\":{\"406\":1}}],[\"用于将自定义结构编组为hal兼容的json响应\",{\"1\":{\"141\":1}}],[\"用于将错误列表表示为单个错误\",{\"1\":{\"131\":1}}],[\"用于物联网的轻量级流处理引擎\",{\"1\":{\"140\":1}}],[\"用于跟踪连接的设备\",{\"1\":{\"140\":1}}],[\"用于svg生成的go语言库\",{\"1\":{\"139\":1}}],[\"用于lsb隐写术的go工具\",{\"1\":{\"139\":1}}],[\"用于lsb隐写术的pure\",{\"1\":{\"139\":1}}],[\"用于图像处理\",{\"1\":{\"139\":1}}],[\"用于图像大小调整的快速\",{\"1\":{\"139\":1}}],[\"用于生成有趣头像的库和cmd工具\",{\"1\":{\"139\":1}}],[\"用于生成类似html的文本输出格式\",{\"1\":{\"124\":1}}],[\"用于opencv的绑定\",{\"1\":{\"139\":1}}],[\"用于cairo图形库的绑定\",{\"1\":{\"139\":1}}],[\"用于collada文件格式\",{\"1\":{\"134\":1}}],[\"用于通知取消的原因\",{\"1\":{\"427\":1}}],[\"用于通知计算机上的任何\",{\"1\":{\"138\":1}}],[\"用于通过tcp\",{\"1\":{\"145\":1}}],[\"用于通过geoserver\",{\"1\":{\"135\":1}}],[\"用于现代桌面ui开发的可嵌入html\",{\"1\":{\"138\":1}}],[\"用于管理\",{\"1\":{\"546\":1}}],[\"用于管理文件下载的软件包\",{\"1\":{\"145\":1}}],[\"用于管理闭包和回调的执行\",{\"1\":{\"137\":1}}],[\"用于管理和使用goroutines的工具\",{\"1\":{\"120\":1}}],[\"用于go编程语言的stemmer软件包\",{\"1\":{\"144\":1}}],[\"用于go语言编写的黑盒函数的贝叶斯优化框架\",{\"1\":{\"142\":1}}],[\"用于golang的cyclicbarrier\",{\"1\":{\"137\":1}}],[\"用于golang的高性能goroutine池\",{\"1\":{\"137\":1}}],[\"用于go的通用机器学习库\",{\"1\":{\"142\":1}}],[\"用于go的高性能\",{\"1\":{\"141\":1}}],[\"用于go的面向性能的2d\",{\"1\":{\"134\":1}}],[\"用于go的字节码编译脚本语言\",{\"1\":{\"130\":1}}],[\"用于go的强大而灵活的电子邮件库\",{\"1\":{\"129\":1}}],[\"用于go的快速\",{\"1\":{\"126\":1}}],[\"用于go的libsamplerate绑定\",{\"1\":{\"126\":1}}],[\"用于go的libsox绑定\",{\"1\":{\"126\":1}}],[\"用于go的libmediainfo绑定\",{\"1\":{\"126\":1}}],[\"用于货币时间价值\",{\"1\":{\"133\":1}}],[\"用于从文件\",{\"1\":{\"132\":1}}],[\"用于确定错误的负责任的源代码\",{\"1\":{\"131\":1}}],[\"用于使用udp多播的跨平台本地对等发现\",{\"1\":{\"145\":1}}],[\"用于使用url从各种来源下载文件或目录\",{\"1\":{\"145\":1}}],[\"用于使用libpcap绑定进行数据包处理\",{\"1\":{\"145\":1}}],[\"用于使用mailgun\",{\"1\":{\"129\":1}}],[\"用于使用tendermint共识和区块链协议将以任何编程语言编写的状态机转换为拜占庭容错复制状态机\",{\"1\":{\"128\":1}}],[\"用于客户端和服务器的imap库\",{\"1\":{\"129\":1}}],[\"用于签名和验证电子邮件\",{\"1\":{\"129\":1}}],[\"用于构建\",{\"1\":{\"166\":1}}],[\"用于构建ssh服务器的高级api\",{\"1\":{\"145\":1}}],[\"用于构建rest\",{\"1\":{\"128\":1}}],[\"用于构建gui应用程序的库\",{\"1\":{\"120\":1}}],[\"用于微服务\",{\"1\":{\"128\":1}}],[\"用于在多台服务器上同步操作\",{\"1\":{\"639\":1}}],[\"用于在命令行进行美观的输出\",{\"1\":{\"335\":1}}],[\"用于在主机操作系统的任务栏中放置一个图标\",{\"1\":{\"138\":1}}],[\"用于在通知区域中放置图标和菜单\",{\"1\":{\"138\":1}}],[\"用于在http服务之间进行无主p2p自动发现和rpc的库\",{\"1\":{\"128\":1}}],[\"用于在服务中启用异步依赖项运行状况检查的库\",{\"1\":{\"128\":1}}],[\"用于在go中添加支持以交互和监视celery工作者\",{\"1\":{\"128\":1}}],[\"用于在空间填充曲线\",{\"1\":{\"127\":1}}],[\"用于解析类似json的日志的工具\",{\"1\":{\"127\":1}}],[\"用于信息检索的多字符串模式匹配算法\",{\"1\":{\"127\":1}}],[\"用于btoa工具和adobe\",{\"1\":{\"124\":1}}],[\"用于处理格式化输入输出的包\",{\"1\":{\"1308\":1}}],[\"用于处理离散概率分布的实用程序和其他可用于执行nlp工作的工具\",{\"1\":{\"144\":1}}],[\"用于处理本地化文本的软件包和一个随附工具\",{\"1\":{\"144\":1}}],[\"用于处理常见的http\",{\"1\":{\"141\":1}}],[\"用于处理连续无界流的概率数据结构\",{\"1\":{\"127\":1}}],[\"用于处理标准midi文件\",{\"1\":{\"126\":1}}],[\"用于处理视频的库\",{\"1\":{\"120\":1}}],[\"用于处理json的库\",{\"1\":{\"120\":1}}],[\"用于处理图像的库\",{\"1\":{\"120\":1}}],[\"用于寻址\",{\"1\":{\"110\":1}}],[\"快照模式\",{\"0\":{\"980\":1}}],[\"快照持久化\",{\"1\":{\"651\":1}}],[\"快\",{\"1\":{\"796\":1,\"965\":1,\"1309\":1}}],[\"快恢复\",{\"1\":{\"656\":1}}],[\"快重传和快恢复则用于丢包后的恢复\",{\"1\":{\"656\":1}}],[\"快重传\",{\"1\":{\"656\":1}}],[\"快结束时候\",{\"1\":{\"520\":1}}],[\"快速的\",{\"1\":{\"1299\":1}}],[\"快速的环形缓冲区双端队列\",{\"1\":{\"127\":1}}],[\"快速开始\",{\"0\":{\"910\":1,\"1242\":1,\"1301\":1,\"1415\":1}}],[\"快速入门\",{\"1\":{\"744\":1}}],[\"快速排序\",{\"1\":{\"649\":1}}],[\"快速恢复\",{\"1\":{\"636\":1}}],[\"快速重传\",{\"1\":{\"636\":1}}],[\"快速编译\",{\"1\":{\"164\":1}}],[\"快速且高效的语言\",{\"1\":{\"148\":1}}],[\"快速可靠的arq协议\",{\"1\":{\"145\":1}}],[\"快速自动关键字提取算法\",{\"1\":{\"144\":1}}],[\"快速自然语言检测程序包\",{\"1\":{\"144\":1}}],[\"快速人工神经网络\",{\"1\":{\"142\":1}}],[\"快速\",{\"1\":{\"142\":1,\"145\":1}}],[\"快速和可扩展的rpc库\",{\"1\":{\"128\":1}}],[\"快速内存键\",{\"1\":{\"127\":1}}],[\"快速提高自己的代码能力\",{\"1\":{\"79\":1}}],[\"快过期就自动续签\",{\"1\":{\"84\":1}}],[\"重定向配置\",{\"1\":{\"1332\":1}}],[\"重量\",{\"0\":{\"1162\":1}}],[\"重量轻\",{\"1\":{\"134\":1}}],[\"重写功能\",{\"1\":{\"985\":1}}],[\"重写后aof文件\",{\"1\":{\"985\":1}}],[\"重写期间\",{\"1\":{\"985\":1}}],[\"重写机制\",{\"1\":{\"985\":2}}],[\"重演\",{\"1\":{\"985\":1}}],[\"重点在lumberjack\",{\"1\":{\"1307\":1}}],[\"重点说明一下这个配置\",{\"1\":{\"1151\":1}}],[\"重点介绍一些常用配置项的含义\",{\"1\":{\"1029\":1}}],[\"重点\",{\"1\":{\"799\":2}}],[\"重入锁\",{\"1\":{\"654\":1}}],[\"重复复制字符串\",{\"0\":{\"1406\":1}}],[\"重复上一过程\",{\"1\":{\"1163\":1}}],[\"重复性越低越适合做索引列\",{\"1\":{\"815\":1}}],[\"重复相同的判断逻辑\",{\"1\":{\"780\":1}}],[\"重复数据\",{\"1\":{\"653\":1}}],[\"重复代码多\",{\"1\":{\"388\":1}}],[\"重新载入配置\",{\"1\":{\"1175\":1}}],[\"重新创建此目录即可\",{\"1\":{\"1171\":1}}],[\"重新开始计数\",{\"1\":{\"1148\":1}}],[\"重新加载\",{\"1\":{\"1119\":1}}],[\"重新加载数据到缓存\",{\"1\":{\"644\":1}}],[\"重新把8007的占用hash槽进行释放或者说把数据进行迁移\",{\"1\":{\"1010\":1}}],[\"重新扩容\",{\"1\":{\"595\":1,\"667\":1}}],[\"重置定时器\",{\"1\":{\"499\":1}}],[\"重命名成功\",{\"1\":{\"404\":1}}],[\"重命名也可以理解为移动文件\",{\"1\":{\"404\":1}}],[\"重命名\",{\"0\":{\"404\":1,\"919\":1},\"1\":{\"1307\":1}}],[\"重启网络\",{\"1\":{\"1219\":1}}],[\"重启定时任务\",{\"1\":{\"1175\":1}}],[\"重启\",{\"1\":{\"1126\":1,\"1188\":1}}],[\"重启nginx服务\",{\"1\":{\"1123\":1,\"1126\":1}}],[\"重启配置文件\",{\"1\":{\"1122\":1}}],[\"重启加载\",{\"1\":{\"1122\":1}}],[\"重启服务\",{\"1\":{\"986\":1,\"1175\":1}}],[\"重启服务器\",{\"1\":{\"986\":1}}],[\"重启的时候可以再次加载进行使用\",{\"1\":{\"956\":1}}],[\"重启mongodb服务\",{\"0\":{\"872\":1}}],[\"重启就可以直接通过https访问了\",{\"1\":{\"84\":1}}],[\"重启一下nginx服务\",{\"1\":{\"84\":1}}],[\"重要\",{\"1\":{\"814\":4,\"1163\":1}}],[\"重要容器\",{\"1\":{\"62\":2}}],[\"重要文字\",{\"1\":{\"61\":1}}],[\"|grep\",{\"1\":{\"1228\":2}}],[\"|ngx\",{\"1\":{\"1164\":5}}],[\"|=\",{\"1\":{\"1164\":1}}],[\"||\",{\"1\":{\"179\":1,\"298\":1,\"344\":4,\"390\":1,\"395\":1,\"766\":1,\"895\":1,\"896\":1,\"1164\":1,\"1244\":1,\"1304\":2}}],[\"|\",{\"1\":{\"84\":1,\"179\":1,\"297\":1,\"337\":2,\"338\":17,\"339\":11,\"340\":61,\"341\":33,\"449\":1,\"453\":1,\"471\":4,\"476\":2,\"516\":1,\"700\":1,\"813\":1,\"1010\":1,\"1078\":1,\"1108\":2,\"1126\":2,\"1130\":8,\"1131\":1,\"1151\":3,\"1152\":3,\"1222\":2,\"1223\":1,\"1238\":1,\"1289\":1,\"1303\":2,\"1341\":5,\"1421\":2}}],[\"实体\",{\"1\":{\"1253\":1}}],[\"实时大数据处理等场景\",{\"1\":{\"906\":1}}],[\"实时和rpc\",{\"1\":{\"128\":1}}],[\"实战索引\",{\"1\":{\"818\":1}}],[\"实践经验\",{\"1\":{\"638\":1}}],[\"实质上是引用传递\",{\"1\":{\"633\":1}}],[\"实习项目过程中还有什么可以优化的地方\",{\"1\":{\"609\":1,\"681\":1}}],[\"实习项目上游数据有问题怎么办\",{\"1\":{\"609\":1,\"681\":1}}],[\"实习项目中确保结果准确性\",{\"1\":{\"609\":1,\"681\":1}}],[\"实例\",{\"1\":{\"743\":1}}],[\"实例间的协作\",{\"1\":{\"653\":1}}],[\"实例对象中\",{\"1\":{\"530\":1}}],[\"实例化\",{\"0\":{\"268\":1},\"1\":{\"513\":1}}],[\"实线代表着直接调用\",{\"1\":{\"327\":1}}],[\"实际应用中通常是一个业务线建一个topic\",{\"1\":{\"1020\":1}}],[\"实际用到了哪些索引\",{\"1\":{\"814\":1}}],[\"实际用到索引\",{\"1\":{\"814\":1}}],[\"实际没用到索引\",{\"1\":{\"814\":1}}],[\"实际操作\",{\"1\":{\"704\":1}}],[\"实际使用还是要知道怎么样\",{\"1\":{\"1212\":1}}],[\"实际使用的索引\",{\"1\":{\"645\":1,\"651\":1,\"814\":1}}],[\"实际使用的键\",{\"1\":{\"645\":1}}],[\"实际使用时候会在new和make函数中需要考虑\",{\"1\":{\"527\":1}}],[\"实际执行任务的操作系统线程\",{\"1\":{\"635\":1}}],[\"实际声明的构造函数签名如下\",{\"1\":{\"269\":1}}],[\"实际上该类型并不属于unsafe包\",{\"1\":{\"1438\":1,\"1439\":1}}],[\"实际上并没有这个语法限制\",{\"1\":{\"1417\":1}}],[\"实际上以毫秒为粒度来跟踪请求信息\",{\"1\":{\"1154\":1}}],[\"实际上在服务器上的目录是\",{\"1\":{\"1142\":1}}],[\"实际上是限制\",{\"1\":{\"1154\":1}}],[\"实际上是\",{\"1\":{\"980\":1}}],[\"实际上是同一个引用\",{\"1\":{\"432\":1}}],[\"实际上就是组合了前面的查询条件\",{\"1\":{\"762\":1}}],[\"实际上执行的是vcs命令\",{\"1\":{\"443\":1}}],[\"实际上底层依旧是使用的命令行帮我们执行\",{\"1\":{\"55\":1}}],[\"实际上git\",{\"1\":{\"49\":1}}],[\"实际上我们可以搭建一个单间的局域网服务器共享我们的代码\",{\"1\":{\"40\":1}}],[\"实际上\",{\"1\":{\"9\":1,\"55\":1,\"794\":1}}],[\"实施rfc\",{\"1\":{\"145\":1}}],[\"实施压缩位集的软件包\",{\"1\":{\"127\":1}}],[\"实验性ftp服务器框架\",{\"1\":{\"145\":1}}],[\"实现与基本数据类型的字符串表示形式之间的转换\",{\"1\":{\"1382\":1}}],[\"实现每个url定向到同一个后端服务器\",{\"1\":{\"1166\":1}}],[\"实现的思路就是从第一个请求进来开始计时\",{\"1\":{\"1148\":1}}],[\"实现的方法都是返回零值\",{\"1\":{\"425\":1}}],[\"实现机制\",{\"0\":{\"985\":1}}],[\"实现对数据的持久存储\",{\"1\":{\"979\":1}}],[\"实现对tar压缩文档的访问\",{\"1\":{\"124\":1}}],[\"实现类似created\",{\"1\":{\"759\":1}}],[\"实现乐观锁和悲观锁\",{\"1\":{\"656\":1}}],[\"实现后端服务\",{\"1\":{\"656\":1}}],[\"实现协程间的通信和同步\",{\"1\":{\"651\":1}}],[\"实现多个读线程并行\",{\"1\":{\"639\":1}}],[\"实现多人抢单是可以的\",{\"1\":{\"638\":1}}],[\"实现自动化的扩展\",{\"1\":{\"637\":1}}],[\"实现自动化构建\",{\"1\":{\"637\":1}}],[\"实现方法\",{\"1\":{\"634\":1}}],[\"实现异步提速\",{\"1\":{\"620\":1,\"692\":1}}],[\"实现lru算法\",{\"1\":{\"618\":1,\"690\":1}}],[\"实现筛选没看过的视频\",{\"1\":{\"593\":1,\"665\":1}}],[\"实现并发控制\",{\"0\":{\"544\":1,\"545\":1}}],[\"实现一个接口不需要implements关键字显式的去指定要实现哪一个接口\",{\"1\":{\"293\":1}}],[\"实现\",{\"0\":{\"293\":1},\"1\":{\"579\":1,\"651\":5}}],[\"实现stringer接口即可\",{\"1\":{\"213\":1}}],[\"实现位集的go包\",{\"1\":{\"127\":1}}],[\"实现了基本的方法\",{\"1\":{\"1337\":1}}],[\"实现了支持以utf\",{\"1\":{\"124\":1}}],[\"实现了utf\",{\"1\":{\"124\":1}}],[\"实现了用于黑箱测试的实用函数\",{\"1\":{\"124\":1}}],[\"实现了以与目标操作系统定义文件路径相兼容的方式处理文件名路径\",{\"1\":{\"124\":1}}],[\"实现了fastcgi协议\",{\"1\":{\"124\":1}}],[\"实现了fips\",{\"1\":{\"124\":4}}],[\"实现了伪随机数生成器\",{\"1\":{\"124\":1}}],[\"实现了多精度的算术运算\",{\"1\":{\"124\":1}}],[\"实现了glenn\",{\"1\":{\"124\":1}}],[\"实现了64位的循环冗余校验或crc\",{\"1\":{\"124\":1}}],[\"实现了32位的循环冗余校验或crc\",{\"1\":{\"124\":1}}],[\"实现了pem\",{\"1\":{\"124\":1}}],[\"实现了pkcs\",{\"1\":{\"124\":1}}],[\"实现了定义于rfc\",{\"1\":{\"124\":3}}],[\"实现了十六进制的编码和解码\",{\"1\":{\"124\":1}}],[\"实现了在http\",{\"1\":{\"124\":1}}],[\"实现了在rfc\",{\"1\":{\"124\":1}}],[\"实现了在无符号整数值和字节串之间的转化\",{\"1\":{\"124\":1}}],[\"实现了在基本数据类型和字符串之间的转换\",{\"1\":{\"124\":1}}],[\"实现了解析der编码的asn\",{\"1\":{\"124\":1}}],[\"实现了adler\",{\"1\":{\"124\":1}}],[\"实现了ascii85数据编码\",{\"1\":{\"124\":1}}],[\"实现了aes加密\",{\"1\":{\"124\":1}}],[\"实现了reader和writer标准接口\",{\"1\":{\"124\":1}}],[\"实现了rc4加密\",{\"1\":{\"124\":1}}],[\"实现了rfc\",{\"1\":{\"124\":7}}],[\"实现了键控哈希消息身份验证码\",{\"1\":{\"124\":1}}],[\"实现了素数域上几个标准的椭圆曲线\",{\"1\":{\"124\":1}}],[\"实现了数据加密标准\",{\"1\":{\"124\":1}}],[\"实现了标准的密码块模式\",{\"1\":{\"124\":1}}],[\"实现了对邮件消息的解析\",{\"1\":{\"124\":1}}],[\"实现了对ast\",{\"1\":{\"124\":1}}],[\"实现了对pe\",{\"1\":{\"124\":1}}],[\"实现了对mach\",{\"1\":{\"124\":1}}],[\"实现了对elf对象文件的访问\",{\"1\":{\"124\":1}}],[\"实现了对循环链表的操作\",{\"1\":{\"124\":1}}],[\"实现了对斜线分割的文件名路径的操作\",{\"1\":{\"124\":1}}],[\"实现了\",{\"1\":{\"124\":1}}],[\"实现了bzip2解压缩\",{\"1\":{\"124\":1}}],[\"实现了操作字符串的简单函数\",{\"1\":{\"124\":1}}],[\"实现了操作错误的函数\",{\"1\":{\"124\":1}}],[\"实现了运行时反射\",{\"1\":{\"124\":1}}],[\"实现了部分的mime规范\",{\"1\":{\"124\":1}}],[\"实现了一些实用的i\",{\"1\":{\"124\":1}}],[\"实现了一些有用的加密函数\",{\"1\":{\"124\":1}}],[\"实现了一个写筛选器\",{\"1\":{\"124\":1}}],[\"实现了一个png图像解码器和编码器\",{\"1\":{\"124\":1}}],[\"实现了一个jpeg图像解码器和编码器\",{\"1\":{\"124\":1}}],[\"实现了一个gif图像解码器\",{\"1\":{\"124\":1}}],[\"实现了一个go源代码文本的扫描器\",{\"1\":{\"124\":1}}],[\"实现了一个go源文件解析器\",{\"1\":{\"124\":1}}],[\"实现了一个基本的颜色库\",{\"1\":{\"124\":1}}],[\"实现了一个基本的二维图像库\",{\"1\":{\"124\":1}}],[\"实现了一个简单的可理解xml名字空间的xml\",{\"1\":{\"124\":1}}],[\"实现了一个简单的正则表达式库\",{\"1\":{\"124\":1}}],[\"实现了一个加密安全的伪随机数生成器\",{\"1\":{\"124\":1}}],[\"实现了一个双链表\",{\"1\":{\"124\":1}}],[\"实现了一个html5兼容的分词器和解析器\",{\"1\":{\"124\":1}}],[\"实现了一系列非平台相关的io相关接口和实现\",{\"1\":{\"121\":1}}],[\"实现了格式化输入输出\",{\"1\":{\"124\":1}}],[\"实现了命令行标记解析\",{\"1\":{\"124\":1}}],[\"实现格式化的输入输出操作\",{\"1\":{\"121\":1}}],[\"实现电子邮件创建和发送的库和工具\",{\"1\":{\"120\":1}}],[\"实现https\",{\"0\":{\"84\":1}}],[\"任务完成后\",{\"1\":{\"654\":1}}],[\"任务的响应时间和硬件资源来调整\",{\"1\":{\"645\":1}}],[\"任务队列的长度\",{\"1\":{\"645\":1}}],[\"任务\",{\"1\":{\"645\":2}}],[\"任务调度\",{\"1\":{\"633\":1}}],[\"任务和事件的库\",{\"1\":{\"128\":1}}],[\"任何类型的指针都可以转换为unsafe\",{\"1\":{\"1443\":1}}],[\"任何能够产生数据的操作都称其为pipeline\",{\"1\":{\"1421\":1}}],[\"任何编码时间戳早于\",{\"1\":{\"1307\":1}}],[\"任何实现了driver\",{\"1\":{\"890\":1}}],[\"任何数字与零异或结果是该数字本身\",{\"1\":{\"645\":1}}],[\"任何自定义类型都可以实现接口\",{\"1\":{\"293\":1}}],[\"任何人拿到编号都可以获取我们个人学籍信息\",{\"1\":{\"83\":1}}],[\"任意\",{\"1\":{\"221\":5}}],[\"任意精度定点十进制数字\",{\"1\":{\"133\":1}}],[\"任意即可\",{\"1\":{\"13\":1}}],[\"明显\",{\"1\":{\"1309\":1}}],[\"明白了上面的规则后\",{\"1\":{\"273\":1}}],[\"明明a已经被赋予b的值了\",{\"1\":{\"208\":1}}],[\"明文计算hash值私钥加密公钥解密\",{\"1\":{\"83\":1}}],[\"明年\",{\"1\":{\"30\":1}}],[\"两条记录会插入到数据库中\",{\"1\":{\"653\":1}}],[\"两阶段提交\",{\"1\":{\"600\":1,\"672\":1}}],[\"两数相除\",{\"1\":{\"600\":1,\"672\":1}}],[\"两道语法纠错题\",{\"1\":{\"582\":1,\"654\":2}}],[\"两种形式\",{\"1\":{\"1183\":1}}],[\"两种算法的区别\",{\"0\":{\"1149\":1}}],[\"两种锁各自的应用场景\",{\"1\":{\"606\":1,\"678\":1}}],[\"两种方式\",{\"1\":{\"515\":1}}],[\"两种方法都需要修改go\",{\"1\":{\"463\":1}}],[\"两种输出的结果不一致\",{\"1\":{\"294\":1}}],[\"两者组合就是子节点的字符串了\",{\"1\":{\"1285\":1}}],[\"两者配置就这个区别\",{\"1\":{\"1011\":1}}],[\"两者的区别在于前者是更新文档字段\",{\"1\":{\"836\":1}}],[\"两者都会将字符串转换为带引号的go字符串\",{\"1\":{\"1388\":1}}],[\"两者都为假\",{\"1\":{\"1254\":1}}],[\"两者都是在elaticsearch服务端生成的\",{\"1\":{\"702\":1}}],[\"两者都需要借助pprof命令行工具\",{\"1\":{\"325\":1}}],[\"两者必须同步进行\",{\"1\":{\"535\":1}}],[\"两者等价\",{\"1\":{\"516\":1}}],[\"两者功能类似\",{\"1\":{\"428\":1}}],[\"两者完全等价\",{\"1\":{\"384\":1}}],[\"两者是一个互补而不是替代的关系\",{\"1\":{\"735\":1}}],[\"两者是都是同一个类型\",{\"1\":{\"384\":1}}],[\"两者是完全等价的\",{\"1\":{\"294\":1}}],[\"两者是完全不同的类型\",{\"1\":{\"196\":1}}],[\"两者其实都一样\",{\"1\":{\"303\":1}}],[\"两者内容是完全一样的\",{\"1\":{\"296\":1}}],[\"两者有点类似\",{\"1\":{\"277\":1}}],[\"两者之间毫无关联\",{\"1\":{\"254\":1}}],[\"两个builder在写入字符串的时候都是在对同一个切片进行操作\",{\"1\":{\"1411\":1}}],[\"两个都是产品级别的日志\",{\"1\":{\"1301\":1}}],[\"两个参数需要配合一起使用才有意义\",{\"1\":{\"1163\":1}}],[\"两个文件的所处的文件目录关系\",{\"1\":{\"1131\":1}}],[\"两个union合并的结果集在最后\",{\"1\":{\"814\":1}}],[\"两个节点信息\",{\"1\":{\"770\":1}}],[\"两个channel分别接收1\",{\"1\":{\"622\":1,\"694\":1}}],[\"两个项目里面你觉得那部分是有技术难点的\",{\"1\":{\"606\":1,\"678\":1}}],[\"两个项目哪个有挑战一点\",{\"1\":{\"590\":1,\"662\":1}}],[\"两个线程\",{\"1\":{\"581\":1,\"653\":2}}],[\"两个结构体可以等值比较吗\",{\"1\":{\"563\":1,\"635\":2}}],[\"两个函数的签名如下\",{\"1\":{\"428\":1}}],[\"两个函数如下\",{\"1\":{\"425\":1}}],[\"两个计数\",{\"1\":{\"422\":1}}],[\"两个无缓冲管道用于同步父子协程的执行顺序\",{\"1\":{\"417\":1}}],[\"两个叫法都是一个意思\",{\"1\":{\"180\":1}}],[\"两个最大的作用\",{\"1\":{\"83\":1}}],[\"两次和四次为什么不可以\",{\"1\":{\"82\":1}}],[\"安卓手机下载就可使用\",{\"1\":{\"1181\":1}}],[\"安全和优化\",{\"1\":{\"1071\":1}}],[\"安全和低延迟的发布\",{\"1\":{\"128\":1}}],[\"安全\",{\"1\":{\"965\":1}}],[\"安全比php明文安全\",{\"1\":{\"595\":1,\"667\":1}}],[\"安全关闭\",{\"1\":{\"145\":1}}],[\"安全地读取\",{\"1\":{\"143\":1}}],[\"安全的静态类型约束\",{\"1\":{\"516\":1}}],[\"安全的原始类型转换和从复杂结构中获取值\",{\"1\":{\"127\":1}}],[\"安全的类型转换包\",{\"1\":{\"122\":1}}],[\"安全性最⾼高\",{\"1\":{\"1024\":1}}],[\"安全性最低但是效\",{\"1\":{\"1024\":1}}],[\"安全性\",{\"1\":{\"83\":1,\"1071\":1}}],[\"安全但是加解密耗时\",{\"1\":{\"83\":1}}],[\"安装依赖\",{\"1\":{\"1321\":1}}],[\"安装基础组件\",{\"1\":{\"1235\":1}}],[\"安装基础软件\",{\"1\":{\"1180\":1}}],[\"安装好后可以看到\",{\"1\":{\"1232\":1}}],[\"安装好redis\",{\"1\":{\"1009\":1}}],[\"安装helm并升级安装dashboard\",{\"0\":{\"1231\":1}}],[\"安装面板\",{\"0\":{\"1229\":1}}],[\"安装pod网络calico\",{\"0\":{\"1228\":1}}],[\"安装集群三大件\",{\"1\":{\"1222\":1}}],[\"安装kubelet\",{\"1\":{\"1235\":1}}],[\"安装k8s\",{\"0\":{\"1222\":1}}],[\"安装konga\",{\"0\":{\"1079\":1}}],[\"安装与配置\",{\"1\":{\"1203\":1}}],[\"安装其他软件构成新的镜像\",{\"1\":{\"1192\":1}}],[\"安装定时任务\",{\"1\":{\"1175\":1}}],[\"安装步骤\",{\"1\":{\"1165\":1}}],[\"安装的信息如下\",{\"1\":{\"1116\":1}}],[\"安装以后的目录信息\",{\"1\":{\"1116\":1}}],[\"安装编译工具及库文件\",{\"0\":{\"1112\":1}}],[\"安装编译环境gcc\",{\"1\":{\"964\":1}}],[\"安装redis\",{\"1\":{\"1081\":1}}],[\"安装mysql\",{\"1\":{\"1081\":1}}],[\"安装成功可以使用\",{\"1\":{\"1184\":1}}],[\"安装成功可以看到installed\",{\"1\":{\"84\":1}}],[\"安装成功以后访问如下\",{\"1\":{\"1079\":1}}],[\"安装方式二\",{\"0\":{\"1078\":1}}],[\"安装方式一\",{\"0\":{\"1077\":1}}],[\"安装目录下\",{\"1\":{\"965\":1}}],[\"安装注意\",{\"1\":{\"963\":1}}],[\"安装完的文件夹目录\",{\"1\":{\"849\":1}}],[\"安装完毕请重启资源管理器\",{\"1\":{\"13\":1}}],[\"安装后查看docker版本\",{\"1\":{\"774\":1}}],[\"安装docker会有唯一的dockerid\",{\"1\":{\"1220\":1}}],[\"安装docker需要的仓库地址配置\",{\"1\":{\"1184\":1}}],[\"安装docker\",{\"0\":{\"1184\":1,\"1221\":1},\"1\":{\"774\":1,\"1184\":2,\"1221\":1}}],[\"安装需要的软件包\",{\"1\":{\"774\":1}}],[\"安装命令行\",{\"0\":{\"454\":1}}],[\"安装acme\",{\"1\":{\"84\":1}}],[\"安装\",{\"0\":{\"774\":1,\"829\":1,\"909\":1,\"1118\":1,\"1274\":1,\"1300\":1},\"1\":{\"13\":1,\"1182\":1,\"1184\":1,\"1307\":1}}],[\"非kafka组件之一\",{\"1\":{\"1020\":1}}],[\"非关系数据库\",{\"1\":{\"906\":1}}],[\"非关系型数据库\",{\"0\":{\"906\":1}}],[\"非必须\",{\"1\":{\"857\":1}}],[\"非唯一性索引扫描\",{\"1\":{\"814\":1}}],[\"非聚簇\",{\"1\":{\"808\":1}}],[\"非聚簇索引和聚簇索引的区别\",{\"1\":{\"616\":1,\"688\":1}}],[\"非聚簇索引\",{\"1\":{\"585\":1,\"657\":1}}],[\"非叶子节点不存储data\",{\"1\":{\"805\":1}}],[\"非叶子节点只存储索引信息\",{\"1\":{\"649\":1}}],[\"非核心线程在空闲时最大存活时间\",{\"1\":{\"645\":1}}],[\"非线程安全\",{\"1\":{\"641\":1}}],[\"非法的数据链接参数\",{\"1\":{\"395\":2}}],[\"非空接口的类型集是其所有元素的类型集的交集\",{\"1\":{\"340\":1}}],[\"非零整数也不能代表真值\",{\"1\":{\"196\":1}}],[\"非阻塞\",{\"1\":{\"145\":1}}],[\"非图灵完整表达评估\",{\"1\":{\"130\":1}}],[\"非常好理解\",{\"1\":{\"1423\":1}}],[\"非常多\",{\"1\":{\"1309\":1}}],[\"非常适合在复杂系统中实现精细化的权限管理\",{\"1\":{\"1238\":1}}],[\"非常高\",{\"1\":{\"1054\":1,\"1055\":1}}],[\"非常容易部署和使用\",{\"1\":{\"1053\":1}}],[\"非常容易被docker和heroku部署\",{\"1\":{\"142\":1}}],[\"非常突出的特点\",{\"1\":{\"847\":1}}],[\"非常消耗性能\",{\"1\":{\"800\":1}}],[\"非常规文件\",{\"1\":{\"400\":1}}],[\"非常致命的问题\",{\"1\":{\"388\":1}}],[\"非常快的porter\",{\"1\":{\"144\":1}}],[\"非常快的go\",{\"1\":{\"127\":1}}],[\"非常不满\",{\"1\":{\"12\":1}}],[\"非对称对对称加密而对称对信息加密\",{\"1\":{\"85\":1}}],[\"非对称加密+http\",{\"1\":{\"85\":1}}],[\"非对称加密\",{\"1\":{\"83\":1,\"641\":1}}],[\"就最好别用这个\",{\"1\":{\"1448\":1}}],[\"就允许将一种t2类型的数据转换为t1\",{\"1\":{\"1443\":1}}],[\"就允许有交集\",{\"1\":{\"341\":1}}],[\"就必须实现三个方法\",{\"1\":{\"1380\":1}}],[\"就必须初始化所有字段\",{\"1\":{\"268\":1}}],[\"就根据文件路径切片加入书写器\",{\"1\":{\"1304\":1}}],[\"就加入控制台书写器\",{\"1\":{\"1304\":1}}],[\"就好比一个桥梁\",{\"1\":{\"1195\":1}}],[\"就直接报错\",{\"1\":{\"1185\":1}}],[\"就用指定的nginx\",{\"1\":{\"1171\":1}}],[\"就使用nginx\",{\"1\":{\"1132\":1,\"1173\":1}}],[\"就使用默认值\",{\"1\":{\"965\":1}}],[\"就设置几个\",{\"1\":{\"1130\":1}}],[\"就那个worker进程去处理这个客户端请求\",{\"1\":{\"1128\":1}}],[\"就相当于员工辞职了\",{\"1\":{\"1127\":1}}],[\"就成了一个高性能\",{\"1\":{\"1067\":1}}],[\"就扯不上高可用了\",{\"1\":{\"1064\":1}}],[\"就被追加到partition的末\",{\"1\":{\"1025\":1}}],[\"就认为故障转移执行失败\",{\"1\":{\"1000\":1}}],[\"就调用一次\",{\"1\":{\"987\":1}}],[\"就将消息队列按照topic进行分类\",{\"1\":{\"1062\":1}}],[\"就将数据同步到数据文件\",{\"1\":{\"965\":1}}],[\"就将其命名为function\",{\"1\":{\"467\":1}}],[\"就说明安装成功并结束\",{\"1\":{\"851\":1}}],[\"就称为\",{\"1\":{\"817\":1}}],[\"就要检查一下查询和表结构\",{\"1\":{\"816\":1}}],[\"就要等量给多少个读解锁\",{\"1\":{\"557\":1}}],[\"就没有太大在的实际效果\",{\"1\":{\"811\":1}}],[\"就没有必要使用类型声明了\",{\"1\":{\"384\":1}}],[\"就算是全表扫描也不会太慢\",{\"1\":{\"800\":1}}],[\"就打开表继续执行\",{\"1\":{\"780\":1}}],[\"就知道你要做什么了\",{\"1\":{\"779\":1}}],[\"就应该使用嵌套数据类型\",{\"1\":{\"729\":1}}],[\"就应该使用keyword类型\",{\"1\":{\"719\":1}}],[\"就应该使用text类型\",{\"1\":{\"718\":1}}],[\"就请自行探索\",{\"1\":{\"714\":1}}],[\"就换个版本\",{\"1\":{\"701\":1}}],[\"就自动实现了该接口\",{\"1\":{\"651\":1}}],[\"就绪\",{\"1\":{\"634\":1}}],[\"就无法同一个函数定义不同的参数\",{\"1\":{\"513\":1}}],[\"就跳过测试\",{\"1\":{\"477\":1}}],[\"就返回原有的值\",{\"1\":{\"436\":1}}],[\"就如context\",{\"1\":{\"427\":1}}],[\"就像是访问一个类型的成员变量一样\",{\"1\":{\"1417\":1}}],[\"就像是限制了令牌桶中令牌产生的速度\",{\"1\":{\"1156\":1}}],[\"就像是一个阻塞队列一样\",{\"1\":{\"417\":1}}],[\"就像下面这样\",{\"1\":{\"268\":1}}],[\"就能访问到一些类型的内部元素\",{\"1\":{\"1443\":1}}],[\"就能够快速开启一个协程\",{\"1\":{\"412\":1}}],[\"就能正常修改myint的值\",{\"1\":{\"287\":1}}],[\"就跟写普通的代码一样\",{\"1\":{\"1423\":1}}],[\"就跟go代码一样\",{\"1\":{\"1419\":1}}],[\"就跟发http请求一样差不多\",{\"1\":{\"704\":1}}],[\"就跟内存分配后不回收会造成内存泄漏一样\",{\"1\":{\"428\":1}}],[\"就跟c中的void\",{\"1\":{\"310\":1}}],[\"就跟import\",{\"1\":{\"303\":1}}],[\"就需要使用\",{\"1\":{\"1198\":1}}],[\"就需要使用额外加入version来解决问题\",{\"1\":{\"440\":1}}],[\"就需要设置此配置项为true\",{\"1\":{\"1029\":1}}],[\"就需要实现数据库驱动\",{\"1\":{\"890\":1}}],[\"就需要采用联合主键的方式\",{\"1\":{\"793\":1}}],[\"就需要重连\",{\"1\":{\"776\":1}}],[\"就需要用到reflect\",{\"1\":{\"349\":1}}],[\"就需要先将其类型转换为interface\",{\"1\":{\"348\":1}}],[\"就需要先将其转为unsafe\",{\"1\":{\"310\":1}}],[\"就需要我们对其进行性能分析\",{\"1\":{\"315\":1}}],[\"就需要在当前协程申请一片内存空间\",{\"1\":{\"284\":1}}],[\"就不用额外的补充\",{\"1\":{\"1193\":1}}],[\"就不用再进行之前的操作了\",{\"1\":{\"264\":1}}],[\"就不会有副本被创建\",{\"1\":{\"988\":1}}],[\"就不再需要操作符了\",{\"1\":{\"836\":1}}],[\"就不再赘述\",{\"1\":{\"402\":1}}],[\"就不太容易了\",{\"1\":{\"1053\":1}}],[\"就不太可能再去声明变量来创建测试数据\",{\"1\":{\"474\":1}}],[\"就不太适合这么做\",{\"1\":{\"298\":1}}],[\"就不存在上述问题了\",{\"1\":{\"430\":1}}],[\"就掌握了通用接口\",{\"1\":{\"295\":1}}],[\"就只需要拷贝这个指针\",{\"1\":{\"287\":1}}],[\"就只能对每一个map的key进行delete\",{\"1\":{\"264\":1}}],[\"就可本地生成一个镜像了\",{\"1\":{\"1193\":1}}],[\"就可能会发生如下情况\",{\"1\":{\"429\":1}}],[\"就可能会导致内存占用突然暴涨\",{\"1\":{\"284\":1}}],[\"就可以自己写一个构建文件\",{\"1\":{\"1193\":1}}],[\"就可以通过docker客户端用镜像创建一个对应的运行实例\",{\"1\":{\"1183\":1}}],[\"就可以通过c\",{\"1\":{\"301\":1}}],[\"就可以从缓存中读取\",{\"1\":{\"1166\":1}}],[\"就可以实现还原数据的目的\",{\"1\":{\"984\":1}}],[\"就可以处理大量的客户端socket请求\",{\"1\":{\"959\":1}}],[\"就可以打开一个数据库连接\",{\"1\":{\"891\":1}}],[\"就可以看到正常的执行结果了\",{\"1\":{\"473\":1}}],[\"就可以看到堆栈信息了\",{\"1\":{\"393\":1}}],[\"就可以直接在test目录下执行如下命令\",{\"1\":{\"468\":1}}],[\"就可以直接传递一个匿名函数\",{\"1\":{\"281\":1}}],[\"就可以将修改提交并推送到远程仓库\",{\"1\":{\"449\":1}}],[\"就可以用到单向管道来限制另一方的行为\",{\"1\":{\"419\":1}}],[\"就可以做到原本无法通过编译的类型转换操作\",{\"1\":{\"387\":1}}],[\"就可以访问c结构体\",{\"1\":{\"307\":1}}],[\"就可以访问数组中对应的元素\",{\"1\":{\"240\":1}}],[\"就可以很好的解决上述的问题\",{\"1\":{\"299\":1}}],[\"就可以初始化接口了\",{\"1\":{\"293\":1}}],[\"就可以考虑使用数组\",{\"1\":{\"238\":1}}],[\"就可以使用下划线\",{\"1\":{\"207\":1}}],[\"就是一对的虚拟设备接口\",{\"1\":{\"1195\":1}}],[\"就是一组方法的集合\",{\"1\":{\"290\":1}}],[\"就是放了一堆镜像的地方\",{\"1\":{\"1183\":1}}],[\"就是我们自己自己封装部署的东西\",{\"1\":{\"1183\":1}}],[\"就是如果一个服务器挂掉了\",{\"1\":{\"1165\":1}}],[\"就是可以任意目录下执行nginx的启动\",{\"1\":{\"1122\":1}}],[\"就是最合适的了\",{\"1\":{\"1057\":1}}],[\"就是吞吐量高\",{\"1\":{\"1055\":1}}],[\"就是说\",{\"1\":{\"971\":1}}],[\"就是keys\",{\"1\":{\"965\":1}}],[\"就是之后启动\",{\"1\":{\"852\":1}}],[\"就是建立索引\",{\"1\":{\"800\":1}}],[\"就是\",{\"1\":{\"776\":1}}],[\"就是利用捕获变量进行逃逸到堆上\",{\"1\":{\"514\":1}}],[\"就是set结构体\",{\"1\":{\"513\":1}}],[\"就是指定模块的源代码\",{\"1\":{\"457\":1}}],[\"就是只写通道\",{\"1\":{\"419\":1}}],[\"就是只读通道\",{\"1\":{\"419\":1}}],[\"就是当值接收者是可寻址的时候\",{\"1\":{\"287\":1}}],[\"就是append最原始的用法\",{\"1\":{\"245\":1}}],[\"就是将数据放在内存中\",{\"1\":{\"805\":1}}],[\"就是将数据存储到磁盘中\",{\"1\":{\"805\":1}}],[\"就是将远程仓库代码下载到本地仓库\",{\"1\":{\"17\":1}}],[\"就是将远程仓库复制到本地仓库\",{\"1\":{\"17\":1}}],[\"就是将本地仓库代码上传到远程仓库\",{\"1\":{\"17\":1}}],[\"就变成了while\",{\"1\":{\"233\":1}}],[\"就会让人十分头疼\",{\"1\":{\"1312\":1}}],[\"就会给他分配一个ip\",{\"1\":{\"1194\":2}}],[\"就会认为这个服务器是一个挂掉的服务\",{\"1\":{\"1163\":1}}],[\"就会立即被后台worker处理\",{\"1\":{\"1156\":1}}],[\"就会导致单机\",{\"1\":{\"1063\":1}}],[\"就会停止接收数据\",{\"1\":{\"982\":1}}],[\"就会停止遍历\",{\"1\":{\"436\":1}}],[\"就会通过操作系统调用\",{\"1\":{\"980\":1}}],[\"就会回滚\",{\"1\":{\"897\":1}}],[\"就会明显查询速度越来越低\",{\"1\":{\"820\":1}}],[\"就会返回没有权限的错误\",{\"1\":{\"780\":1}}],[\"就会返回nil\",{\"1\":{\"424\":1}}],[\"就会收到一个错误提醒\",{\"1\":{\"776\":1}}],[\"就会触发\",{\"1\":{\"553\":1}}],[\"就会panic\",{\"1\":{\"469\":1}}],[\"就会拒绝构建\",{\"1\":{\"460\":1}}],[\"就会更新go\",{\"1\":{\"460\":1}}],[\"就会加上incompatible注释\",{\"1\":{\"459\":1}}],[\"就会执行else块的内容\",{\"1\":{\"1424\":1}}],[\"就会执行后续的操作\",{\"1\":{\"440\":1}}],[\"就会执行default分支\",{\"1\":{\"230\":1,\"421\":1}}],[\"就会启动一个协程等待父级取消\",{\"1\":{\"427\":1}}],[\"就会将自身添加进父级的children中\",{\"1\":{\"427\":1}}],[\"就会永久阻塞\",{\"1\":{\"421\":1}}],[\"就会阻塞等待\",{\"1\":{\"420\":1}}],[\"就会发生panic\",{\"1\":{\"418\":1}}],[\"就会有反射\",{\"1\":{\"346\":1}}],[\"就会有空集\",{\"1\":{\"340\":1}}],[\"就会出现这样的页面\",{\"1\":{\"324\":1}}],[\"就会出现错误\",{\"1\":{\"287\":1}}],[\"就会像栈一样先进后出的顺序执行\",{\"1\":{\"283\":1}}],[\"就会变为切片类型\",{\"1\":{\"241\":1}}],[\"就会重发几次\",{\"1\":{\"82\":1}}],[\"就建议使用bufio\",{\"1\":{\"225\":1}}],[\"就等同于下面这段代码\",{\"1\":{\"208\":1}}],[\"就解决了认证了不被篡改信息了\",{\"1\":{\"83\":1}}],[\"服务扩展与伸缩\",{\"1\":{\"1203\":1}}],[\"服务正在打交道\",{\"1\":{\"1172\":1}}],[\"服务虚拟主机配置\",{\"1\":{\"1130\":2,\"1131\":2,\"1141\":1,\"1142\":1,\"1143\":1,\"1144\":1,\"1160\":1}}],[\"服务同步新的主机\",{\"1\":{\"1000\":1}}],[\"服务宕机需要人为干预\",{\"1\":{\"995\":1}}],[\"服务初始化\",{\"1\":{\"993\":1}}],[\"服务故障最多丢失1秒的数据\",{\"1\":{\"987\":1}}],[\"服务挂了\",{\"1\":{\"985\":1}}],[\"服务会与mysql建立一个链接\",{\"1\":{\"901\":1}}],[\"服务已启动\",{\"1\":{\"852\":1}}],[\"服务的名字\",{\"1\":{\"852\":1}}],[\"服务的熔断降级\",{\"1\":{\"613\":1,\"685\":1}}],[\"服务之前需要必须创建数据库文件的存放文件夹\",{\"1\":{\"851\":1}}],[\"服务地址\",{\"1\":{\"756\":1,\"771\":1}}],[\"服务\",{\"0\":{\"852\":1},\"1\":{\"645\":1,\"851\":2,\"852\":1,\"1235\":1}}],[\"服务层\",{\"1\":{\"614\":1,\"686\":1}}],[\"服务注册中心\",{\"1\":{\"580\":1,\"652\":1}}],[\"服务内存\",{\"1\":{\"576\":1,\"648\":1}}],[\"服务间通信成本指的是什么\",{\"1\":{\"576\":1,\"648\":1}}],[\"服务端建立新连接时\",{\"1\":{\"1374\":1}}],[\"服务端接收数据\",{\"1\":{\"1374\":1}}],[\"服务端代码\",{\"1\":{\"1374\":1}}],[\"服务端\",{\"0\":{\"1335\":1}}],[\"服务端集群\",{\"1\":{\"1018\":1}}],[\"服务端命令\",{\"0\":{\"968\":1}}],[\"服务端主动关闭连接通常出现在长连接场景中\",{\"1\":{\"641\":1}}],[\"服务端服务\",{\"1\":{\"580\":1,\"652\":1}}],[\"服务端崩溃检测\",{\"1\":{\"579\":1,\"651\":1}}],[\"服务端可以断开吗\",{\"1\":{\"569\":1,\"641\":2}}],[\"服务端没有收到第三次握手\",{\"1\":{\"82\":1}}],[\"服务和\",{\"1\":{\"158\":1}}],[\"服务发现与负载均衡\",{\"1\":{\"1205\":1}}],[\"服务发现一般可以怎么做\",{\"1\":{\"611\":1,\"683\":1}}],[\"服务发现\",{\"1\":{\"111\":1,\"635\":1,\"1071\":1}}],[\"服务器ip\",{\"1\":{\"1165\":1}}],[\"服务器时间\",{\"1\":{\"1133\":1}}],[\"服务器时间的iso\",{\"1\":{\"1133\":1}}],[\"服务器名\",{\"1\":{\"1133\":1}}],[\"服务器调查\",{\"1\":{\"1108\":1}}],[\"服务器调优及配置参数导致\",{\"1\":{\"799\":1}}],[\"服务器每一秒调用一次\",{\"1\":{\"987\":1}}],[\"服务器每写入一个命令\",{\"1\":{\"987\":1}}],[\"服务器不主动调用\",{\"1\":{\"987\":1}}],[\"服务器不会被阻塞\",{\"1\":{\"985\":1}}],[\"服务器不能处理任何的命令请求\",{\"1\":{\"981\":1}}],[\"服务器已经执行过的的命令\",{\"1\":{\"984\":1}}],[\"服务器为实现自动持久化而设置的时间计数和次数计数就会被清零\",{\"1\":{\"981\":1}}],[\"服务器就会自动执行bgsave命令\",{\"1\":{\"981\":1}}],[\"服务器会将错误返回给所有其他请求\",{\"1\":{\"1152\":1}}],[\"服务器会生成一个新的\",{\"1\":{\"985\":1}}],[\"服务器会\",{\"1\":{\"981\":1}}],[\"服务器会清除\",{\"1\":{\"641\":1}}],[\"服务器处理客户端的其他请求\",{\"1\":{\"981\":1}}],[\"服务器进程\",{\"1\":{\"981\":1}}],[\"服务器出现某些意外情况\",{\"1\":{\"979\":1}}],[\"服务器确认关闭连接\",{\"1\":{\"651\":1}}],[\"服务器确认连接请求\",{\"1\":{\"651\":1}}],[\"服务器的http版本\",{\"1\":{\"1133\":1}}],[\"服务器的硬件优化\",{\"1\":{\"799\":1}}],[\"服务器的\",{\"1\":{\"645\":1}}],[\"服务器端口\",{\"1\":{\"1133\":1}}],[\"服务器端地址\",{\"1\":{\"1133\":1}}],[\"服务器端的内存\",{\"1\":{\"641\":1}}],[\"服务器端保存会话信息\",{\"1\":{\"641\":1}}],[\"服务器发送关闭连接请求\",{\"1\":{\"651\":1}}],[\"服务器发送\",{\"1\":{\"641\":1}}],[\"服务器回复\",{\"1\":{\"641\":2}}],[\"服务器\",{\"1\":{\"641\":1,\"1107\":1,\"1109\":1}}],[\"服务器验证令牌的有效性来完成鉴权\",{\"1\":{\"641\":1}}],[\"服务器响应\",{\"1\":{\"638\":1}}],[\"服务器部署情况\",{\"1\":{\"610\":1,\"682\":1}}],[\"服务器库\",{\"1\":{\"145\":1}}],[\"服务器实施\",{\"1\":{\"145\":1}}],[\"服务器角度思考必须是3次\",{\"1\":{\"82\":1}}],[\"服务器一旦宕机无法提交代码\",{\"1\":{\"11\":1}}],[\"没错\",{\"1\":{\"1067\":1}}],[\"没错就是优化表\",{\"1\":{\"800\":1}}],[\"没问题就会将命令追加到\",{\"1\":{\"985\":1}}],[\"没索引\",{\"1\":{\"624\":1,\"696\":1}}],[\"没答好\",{\"1\":{\"615\":1,\"687\":1}}],[\"没说好这一块\",{\"1\":{\"595\":1,\"667\":1}}],[\"没\",{\"1\":{\"595\":1,\"667\":1}}],[\"没啥特别的简单描述一下吧\",{\"1\":{\"510\":1}}],[\"没有特殊需求一般都用这个\",{\"1\":{\"1390\":1}}],[\"没有指数\",{\"1\":{\"1390\":1}}],[\"没有就采用默认的策略\",{\"1\":{\"1332\":1}}],[\"没有堆栈情况\",{\"1\":{\"1303\":1}}],[\"没有调用者的情况\",{\"1\":{\"1303\":1}}],[\"没有时间\",{\"1\":{\"1303\":1}}],[\"没有父镜像\",{\"1\":{\"1192\":1}}],[\"没有镜像自己会去下\",{\"1\":{\"1188\":1}}],[\"没有配置\",{\"1\":{\"1157\":1}}],[\"没有在\",{\"1\":{\"1054\":1}}],[\"没有解决数据分片\",{\"1\":{\"1005\":1}}],[\"没有固定的schema\",{\"1\":{\"906\":1}}],[\"没有orm功能那么丰富但是胜在简洁\",{\"1\":{\"889\":1}}],[\"没有任何出错迹象\",{\"1\":{\"825\":1}}],[\"没有使用索引排序\",{\"1\":{\"819\":1}}],[\"没有使用索引查询的时间如下\",{\"1\":{\"810\":1}}],[\"没有用上建立的索引\",{\"1\":{\"799\":1}}],[\"没有值的字段\",{\"1\":{\"725\":1}}],[\"没有太大区别\",{\"1\":{\"707\":1}}],[\"没有合适的索引导致mysql扫描了大量记录\",{\"1\":{\"653\":1}}],[\"没有合适的锁机制\",{\"1\":{\"644\":1}}],[\"没有保证在更新库存时的排他性\",{\"1\":{\"644\":1}}],[\"没有访问控制\",{\"1\":{\"637\":1}}],[\"没有继承\",{\"1\":{\"637\":1}}],[\"没有目录结构\",{\"1\":{\"634\":1}}],[\"没有索引\",{\"1\":{\"633\":1}}],[\"没有\",{\"1\":{\"625\":1,\"697\":1,\"1155\":1}}],[\"没有技术级别\",{\"1\":{\"615\":1,\"687\":1}}],[\"没有被索引覆盖是什么\",{\"1\":{\"592\":1,\"664\":1}}],[\"没有很理解递减是怎么实现的\",{\"1\":{\"566\":1,\"638\":2}}],[\"没有则返回零值和false\",{\"1\":{\"558\":1}}],[\"没有初始化\",{\"1\":{\"511\":1}}],[\"没有增加任何新功能\",{\"1\":{\"455\":1}}],[\"没有具体实现\",{\"1\":{\"438\":1}}],[\"没有第三种情况可言\",{\"1\":{\"437\":1}}],[\"没有第三次握手有什么问题\",{\"1\":{\"82\":1}}],[\"没有deadline\",{\"1\":{\"425\":1}}],[\"没有遗漏\",{\"1\":{\"412\":1}}],[\"没有实现说明是一个基础的error\",{\"1\":{\"393\":1}}],[\"没有可读性\",{\"1\":{\"323\":1}}],[\"没有闭包了\",{\"1\":{\"285\":1}}],[\"没有返回值的函数类型\",{\"1\":{\"201\":1}}],[\"没有异常处理机制\",{\"1\":{\"165\":1}}],[\"没有类\",{\"1\":{\"165\":1,\"637\":1}}],[\"没有依赖库\",{\"1\":{\"156\":1}}],[\"没办法\",{\"1\":{\"12\":1}}],[\"网卡名\",{\"1\":{\"1228\":1}}],[\"网卡地址\",{\"1\":{\"1194\":1}}],[\"网易云\",{\"1\":{\"1183\":1}}],[\"网易\",{\"1\":{\"1107\":1}}],[\"网易外包\",{\"0\":{\"623\":1,\"695\":1}}],[\"网关地址\",{\"1\":{\"1197\":1}}],[\"网关选择\",{\"0\":{\"1072\":1}}],[\"网关充当集中的\",{\"1\":{\"1071\":1}}],[\"网关的主要功能包括\",{\"1\":{\"1071\":1}}],[\"网关\",{\"1\":{\"1071\":1}}],[\"网上的成熟方案你觉得有没有更好的方案或者现有的方案有没有什么问题\",{\"1\":{\"607\":1,\"679\":1}}],[\"网站搜索\",{\"1\":{\"637\":1}}],[\"网站大访问量用redis缓存\",{\"1\":{\"595\":1,\"667\":1}}],[\"网站根据当前项目的各项指标计算出来的一个值\",{\"1\":{\"53\":1}}],[\"网页中总共有6个可查看的项\",{\"1\":{\"327\":1}}],[\"网页分析可以可视化结果\",{\"1\":{\"327\":1}}],[\"网页\",{\"0\":{\"327\":1}}],[\"网络设置\",{\"0\":{\"1219\":1}}],[\"网络设置桥接模式\",{\"1\":{\"1218\":1}}],[\"网络安全\",{\"1\":{\"1202\":1}}],[\"网络的创建与管理\",{\"1\":{\"1202\":1}}],[\"网络的拥塞控制\",{\"1\":{\"614\":1,\"686\":1}}],[\"网络概述\",{\"1\":{\"1202\":1}}],[\"网络连通\",{\"0\":{\"1198\":1}}],[\"网络配置问题\",{\"1\":{\"1208\":1}}],[\"网络配置\",{\"1\":{\"1197\":1,\"1201\":1,\"1235\":1}}],[\"网络模式\",{\"1\":{\"1197\":1,\"1202\":1}}],[\"网络类型\",{\"1\":{\"911\":1}}],[\"网络不通\",{\"1\":{\"823\":1}}],[\"网络等\",{\"1\":{\"655\":1}}],[\"网络带宽和延迟限制\",{\"1\":{\"645\":1}}],[\"网络带宽不足\",{\"1\":{\"639\":1}}],[\"网络带宽\",{\"1\":{\"639\":1,\"645\":1}}],[\"网络相关的http了解的不多吗\",{\"1\":{\"566\":1,\"638\":2}}],[\"网络编程\",{\"0\":{\"332\":1,\"1374\":1}}],[\"网络编程等领域的主流语言之一\",{\"1\":{\"170\":1}}],[\"网络io的时候建议使用这个包\",{\"1\":{\"220\":1}}],[\"网络服务与\",{\"0\":{\"158\":1}}],[\"网络墨卡托utm\",{\"1\":{\"135\":1}}],[\"网络\",{\"0\":{\"145\":1},\"1\":{\"120\":1,\"603\":1,\"675\":1,\"1202\":4}}],[\"网络基础\",{\"0\":{\"81\":1}}],[\"虽然并没有提供特定语法来访问某一个索引的值\",{\"1\":{\"1417\":1}}],[\"虽然设置burst和nodelay能够降低突发请求的处理时间\",{\"1\":{\"1156\":1}}],[\"虽然有些nosql数据库支持sql\",{\"1\":{\"906\":1}}],[\"虽然使用条件有些苛刻\",{\"1\":{\"820\":1}}],[\"虽然使用cgo的出发点是为了性能\",{\"1\":{\"314\":1}}],[\"虽然看起来查询缓存的效率非常高\",{\"1\":{\"777\":1}}],[\"虽然索引能加速查询\",{\"1\":{\"651\":1}}],[\"虽然是通过并发方式但是任然需要stw来暂停程序的执行保证标记的正确性\",{\"1\":{\"552\":1}}],[\"虽然下列的写法是允许的\",{\"1\":{\"339\":1}}],[\"虽然这放在其他语言中看起来很离谱\",{\"1\":{\"293\":1}}],[\"虽然myint是一个值类型\",{\"1\":{\"287\":1}}],[\"虽然没法修改字符串\",{\"1\":{\"253\":1}}],[\"虽然没有明令禁止\",{\"1\":{\"284\":1}}],[\"虽然没有\",{\"1\":{\"161\":1}}],[\"虽然可以不用指定类型\",{\"1\":{\"206\":1}}],[\"虽然可以通过结构体和接口来模拟\",{\"1\":{\"165\":1}}],[\"虽然也有线程和并发支持\",{\"1\":{\"170\":1}}],[\"虽然灵活\",{\"1\":{\"169\":1}}],[\"虽然开发速度较快\",{\"1\":{\"169\":1}}],[\"虽然在快速增长\",{\"1\":{\"169\":1}}],[\"虽然在\",{\"1\":{\"165\":1}}],[\"虽然ai很方便\",{\"1\":{\"79\":1}}],[\"虽然比cvs\",{\"1\":{\"12\":1}}],[\"对切片进行修改将会直接影响该地址上的数据\",{\"1\":{\"1446\":1}}],[\"对uintptr进行数学运算后再转换为pointer就可以完成指针运算\",{\"1\":{\"1443\":1}}],[\"对外暴露一个channel\",{\"1\":{\"1433\":1}}],[\"对外可提供每秒10k次查询\",{\"1\":{\"1012\":1}}],[\"对匹配器的匹配结果进行逻辑组合判断\",{\"1\":{\"1254\":1}}],[\"对日志切割一\",{\"1\":{\"1174\":1}}],[\"对所有的请求都进行限流处理\",{\"1\":{\"1158\":1}}],[\"对用户来说也没什么价值了\",{\"1\":{\"1156\":1}}],[\"对突发流量不做额外处理\",{\"1\":{\"1149\":1}}],[\"对标云原生的则可以使用apisix\",{\"1\":{\"1072\":1}}],[\"对消息堆积的处理不好\",{\"1\":{\"1053\":1}}],[\"对上对述过程做简单总结\",{\"1\":{\"999\":1}}],[\"对文件进行io读写\",{\"1\":{\"980\":1}}],[\"对文件的访问需要穿越你的应用层和数据库层\",{\"1\":{\"792\":1}}],[\"对设置到哈希表\",{\"1\":{\"972\":1}}],[\"对redis进行配置\",{\"1\":{\"963\":1}}],[\"对表的数据进行重新编排和建立目录映射\",{\"1\":{\"800\":1}}],[\"对mysql配置优化\",{\"1\":{\"799\":1}}],[\"对map求长度\",{\"1\":{\"260\":1}}],[\"对生成的影响也越来越大\",{\"1\":{\"799\":1}}],[\"对单表的多次alter操作必须合并为一次\",{\"1\":{\"796\":1}}],[\"对数据库的读\",{\"1\":{\"792\":1}}],[\"对性能是不利的\",{\"1\":{\"791\":1}}],[\"对性能要求一般\",{\"1\":{\"116\":1}}],[\"对性能要求高\",{\"1\":{\"116\":1}}],[\"对存储在内存中\",{\"1\":{\"777\":1}}],[\"对node1的config目录下的elasticsearch\",{\"1\":{\"768\":1}}],[\"对不存在的数据设置一个较短的缓存时间\",{\"1\":{\"636\":1}}],[\"对哪些语言比较熟悉\",{\"1\":{\"604\":1,\"676\":1}}],[\"对蚂蚁这边的意向怎样\",{\"1\":{\"598\":1,\"670\":1}}],[\"对base地有要求吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"对自己职业的预期\",{\"1\":{\"597\":1,\"669\":1}}],[\"对jvm的调优有了解过吗\",{\"1\":{\"592\":1,\"664\":1}}],[\"对象匹配视觉表示\",{\"0\":{\"1269\":1}}],[\"对象\",{\"1\":{\"1251\":1}}],[\"对象类型\",{\"0\":{\"726\":1}}],[\"对象数组是如何存储的\",{\"0\":{\"728\":1}}],[\"对象数组\",{\"1\":{\"725\":1}}],[\"对象的引用计数为零或从根对象不可达时\",{\"1\":{\"645\":1}}],[\"对象序列化与反序列化\",{\"1\":{\"645\":1}}],[\"对象池的应用\",{\"0\":{\"630\":1}}],[\"对象池\",{\"0\":{\"628\":1,\"629\":1}}],[\"对象死亡的判断方法\",{\"1\":{\"588\":1,\"660\":1}}],[\"对象存储服务\",{\"1\":{\"639\":1}}],[\"对象存储和文件存储的主要区别是什么\",{\"1\":{\"562\":1,\"634\":2}}],[\"对象存储\",{\"1\":{\"335\":1,\"634\":2}}],[\"对集合的了解简单说一下\",{\"1\":{\"588\":1,\"660\":1}}],[\"对已经关闭的的chan进行读写\",{\"1\":{\"587\":1,\"659\":1}}],[\"对面介绍自己的组\",{\"1\":{\"573\":1,\"645\":1}}],[\"对linux操作系统熟悉吗\",{\"1\":{\"572\":1,\"644\":1}}],[\"对\",{\"1\":{\"556\":1,\"841\":1,\"847\":1,\"887\":1,\"970\":3,\"1057\":1}}],[\"对比\",{\"1\":{\"645\":1,\"1108\":1}}],[\"对比其他语言有上面优势\",{\"1\":{\"521\":1}}],[\"对比学习\",{\"1\":{\"79\":1}}],[\"对副本的修改不会影响原值\",{\"1\":{\"515\":1}}],[\"对齐大小通常是以字节为单位的计算机字长与sizeof的最小值\",{\"1\":{\"1442\":1}}],[\"对齐规则\",{\"1\":{\"554\":2}}],[\"对齐方式\",{\"1\":{\"513\":1}}],[\"对齐缺点\",{\"1\":{\"513\":1}}],[\"对应的go模块名就是github\",{\"1\":{\"445\":1}}],[\"对只写的管道读取数据也是同理\",{\"1\":{\"419\":1}}],[\"对一个已关闭的管道写入数据会导致panic\",{\"1\":{\"418\":1}}],[\"对一个变量进行取地址\",{\"1\":{\"275\":1}}],[\"对其写入数据会导致该协程阻塞\",{\"1\":{\"418\":1}}],[\"对其写入数据114514\",{\"1\":{\"415\":1}}],[\"对待其它通用接口也是如此\",{\"1\":{\"340\":1}}],[\"对泛型类型使用类型断言将会无法通过编译\",{\"1\":{\"339\":1}}],[\"对指针类型解引用就能访问到指针所指向的元素\",{\"1\":{\"275\":1}}],[\"对字节切片进行修改不会对原字符串产生任何影响\",{\"1\":{\"254\":1}}],[\"对于嵌套的结构体或map\",{\"1\":{\"1417\":1}}],[\"对于切片和map\",{\"1\":{\"1417\":1}}],[\"对于结构体和map\",{\"1\":{\"1417\":1}}],[\"对于结构体指针而言\",{\"1\":{\"271\":1}}],[\"对于传入的data\",{\"1\":{\"1417\":1}}],[\"对于大指数采用\",{\"1\":{\"1390\":2}}],[\"对于服务端而言就是\",{\"1\":{\"1374\":1}}],[\"对于客户端而言就是\",{\"1\":{\"1374\":1}}],[\"对于本地系统和容器系统来说\",{\"1\":{\"1195\":1}}],[\"对于ipv6地址则为16个字节\",{\"1\":{\"1152\":1}}],[\"对于ipv4地址\",{\"1\":{\"1152\":1}}],[\"对于innodb存储引擎\",{\"1\":{\"798\":1,\"799\":1}}],[\"对于很多应用场景来说\",{\"1\":{\"1147\":1}}],[\"对于复杂的多表联接\",{\"1\":{\"904\":1}}],[\"对于复制文件而言\",{\"1\":{\"403\":1}}],[\"对于mysql而言就是下面这样\",{\"1\":{\"891\":1}}],[\"对于map而言\",{\"1\":{\"259\":1}}],[\"对于专业的dba来说比较容易上手\",{\"1\":{\"874\":1}}],[\"对于数据库连接来说就只连接5次\",{\"1\":{\"821\":1}}],[\"对于数组\",{\"1\":{\"352\":1}}],[\"对于每个\",{\"1\":{\"1025\":1}}],[\"对于每个索引键\",{\"1\":{\"814\":1}}],[\"对于每一个种数据结构\",{\"1\":{\"234\":1}}],[\"对于业务可能会产生极\",{\"1\":{\"796\":1}}],[\"对于超过100w行的大表进行alter\",{\"1\":{\"796\":1}}],[\"对于程序连接数据库账号\",{\"1\":{\"794\":1}}],[\"对于oltp应用来说\",{\"1\":{\"791\":1}}],[\"对于os\",{\"1\":{\"401\":1}}],[\"对于有索引的表\",{\"1\":{\"780\":1}}],[\"对于有缓冲管道而言\",{\"1\":{\"420\":1}}],[\"对于有缓冲管道写入数据时\",{\"1\":{\"417\":1}}],[\"对于有缓冲管道则不必如此\",{\"1\":{\"417\":1}}],[\"对于查询操作\",{\"1\":{\"656\":1}}],[\"对于字段选择性高\",{\"1\":{\"651\":1}}],[\"对于\",{\"1\":{\"645\":1}}],[\"对于需要全局唯一标识符的情况\",{\"1\":{\"637\":1}}],[\"对于高效查询\",{\"1\":{\"636\":1}}],[\"对于缓存或锁\",{\"1\":{\"634\":1}}],[\"对于无缓冲的\",{\"1\":{\"633\":1}}],[\"对于无缓冲管道而言\",{\"1\":{\"416\":1}}],[\"对于具象智能有什么想法吗\",{\"1\":{\"597\":1,\"669\":1}}],[\"对于参数的规范会有一些怎样的考虑\",{\"1\":{\"597\":1,\"669\":1}}],[\"对于接口会有一些规范的要求吗\",{\"1\":{\"597\":1,\"669\":1}}],[\"对于接口的简单原理只需要了解到这里就足够满足后续反射的学习\",{\"1\":{\"347\":1}}],[\"对于http协议有多少了解\",{\"1\":{\"572\":1,\"644\":1}}],[\"对于http验证\",{\"1\":{\"84\":1}}],[\"对于老年代\",{\"1\":{\"553\":1}}],[\"对于年轻代\",{\"1\":{\"553\":1}}],[\"对于只读的占用内存小的结构体直接传值会更好\",{\"1\":{\"549\":1}}],[\"对于32位只有4字节为此对齐系数只是4\",{\"1\":{\"513\":1}}],[\"对于基准测试而言\",{\"1\":{\"475\":1}}],[\"对于单元测试而言\",{\"1\":{\"471\":2}}],[\"对于测试函数而言\",{\"1\":{\"470\":1}}],[\"对于不同的测试类型\",{\"1\":{\"467\":1}}],[\"对于开发者而言\",{\"1\":{\"466\":1}}],[\"对于开发者而言也会减少很多心智负担\",{\"1\":{\"288\":1}}],[\"对于私有项目而言\",{\"1\":{\"461\":1}}],[\"对于命令行程序而言\",{\"1\":{\"446\":1}}],[\"对于工程项目而言十分的不友好\",{\"1\":{\"442\":1}}],[\"对于golang而言\",{\"1\":{\"1273\":1}}],[\"对于go中atomic包下的原子操作\",{\"1\":{\"440\":1}}],[\"对于go而言\",{\"1\":{\"294\":1,\"1335\":1}}],[\"对于cas而言\",{\"1\":{\"440\":1}}],[\"对于c中的类型\",{\"1\":{\"301\":1}}],[\"对于条件变量\",{\"1\":{\"432\":1}}],[\"对于锁而言\",{\"1\":{\"431\":1}}],[\"对于上面的例子\",{\"1\":{\"429\":1}}],[\"对于读取操作而言\",{\"1\":{\"415\":1}}],[\"对于管道而言\",{\"1\":{\"414\":1}}],[\"对于较为传统的锁控制\",{\"1\":{\"412\":1}}],[\"对于并发的程序而言\",{\"1\":{\"412\":1}}],[\"对于文件夹而言\",{\"1\":{\"408\":1}}],[\"对于写入文件的操作标准库同样提供了方便函数\",{\"1\":{\"402\":1}}],[\"对于常规文件而言\",{\"1\":{\"400\":1}}],[\"对于修改结构体私有字段而言\",{\"1\":{\"368\":1}}],[\"对于指针使用elem\",{\"1\":{\"352\":1}}],[\"对于type而言\",{\"1\":{\"351\":1}}],[\"对于这个验证组件有些不是期望的\",{\"1\":{\"1289\":1}}],[\"对于这两个独立的模块\",{\"1\":{\"463\":1}}],[\"对于这两种类型\",{\"1\":{\"347\":1}}],[\"对于这种情况\",{\"1\":{\"285\":1}}],[\"对于含有方法集的接口来说\",{\"1\":{\"347\":1}}],[\"对于一个精简的os\",{\"1\":{\"1192\":1}}],[\"对于一个16位整数\",{\"1\":{\"651\":1}}],[\"对于一个协程而言\",{\"1\":{\"431\":1}}],[\"对于一个管道而言\",{\"1\":{\"415\":1}}],[\"对于一个泛型变量\",{\"1\":{\"343\":1}}],[\"对于一些读多写少的数据\",{\"1\":{\"431\":1}}],[\"对于一些不支持取消的上下文\",{\"1\":{\"424\":1}}],[\"对于一些类型需要避免歧义\",{\"1\":{\"385\":1}}],[\"对于一些类型相同的相邻字段\",{\"1\":{\"267\":1}}],[\"对于一些引用类型\",{\"1\":{\"320\":1}}],[\"对于一些十分复杂的任务\",{\"1\":{\"314\":1}}],[\"对于一些十分简单的任务\",{\"1\":{\"314\":1}}],[\"对于一些性能要求更高的场景\",{\"1\":{\"296\":1}}],[\"对于非接口类型\",{\"1\":{\"341\":1}}],[\"对于火焰图而言\",{\"1\":{\"327\":1}}],[\"对于内存而言四个维度可以分析\",{\"1\":{\"327\":1}}],[\"对于图片和源代码而言\",{\"1\":{\"326\":1}}],[\"对于存活对象的内存分配抽样\",{\"1\":{\"324\":1}}],[\"对于项目而言会使得代码更加优雅可读\",{\"1\":{\"288\":1}}],[\"对于defer直接作用的函数而言\",{\"1\":{\"285\":1}}],[\"对于延迟调用有一些反直觉的细节\",{\"1\":{\"285\":1}}],[\"对于类型相同的参数而言\",{\"1\":{\"279\":1}}],[\"对于函数外的包级变量则没有这个限制\",{\"1\":{\"206\":1}}],[\"对于零内存分配和快速响应的快速重定向到预定义域很有用\",{\"1\":{\"145\":1}}],[\"对于可视化调试很有价值\",{\"1\":{\"124\":1}}],[\"对称密钥还是会被篡改\",{\"1\":{\"85\":1}}],[\"对称+非对称+http\",{\"1\":{\"85\":1}}],[\"对称加密+http\",{\"1\":{\"85\":1}}],[\"对称加密\",{\"1\":{\"83\":1,\"641\":1}}],[\"对号\",{\"1\":{\"22\":1}}],[\"揣测代码含义\",{\"1\":{\"79\":1}}],[\"编号\",{\"1\":{\"1020\":1}}],[\"编码配置\",{\"1\":{\"1302\":1}}],[\"编码\",{\"1\":{\"1302\":2}}],[\"编码的\",{\"1\":{\"743\":1}}],[\"编码器\",{\"1\":{\"139\":1}}],[\"编辑服务资源\",{\"1\":{\"1235\":1}}],[\"编辑修改文件\",{\"1\":{\"1228\":1}}],[\"编辑配置文件\",{\"1\":{\"1219\":1}}],[\"编辑任务\",{\"1\":{\"1175\":1}}],[\"编辑并且添加一行新的任务\",{\"1\":{\"1175\":1}}],[\"编辑kong配置\",{\"1\":{\"1078\":1}}],[\"编辑器编辑redis\",{\"1\":{\"963\":1}}],[\"编辑\",{\"1\":{\"850\":1}}],[\"编辑距离\",{\"1\":{\"606\":1,\"678\":1}}],[\"编辑go\",{\"1\":{\"456\":1,\"464\":1}}],[\"编辑冲突\",{\"1\":{\"36\":1}}],[\"编程颖\",{\"1\":{\"622\":1,\"694\":1}}],[\"编程题\",{\"1\":{\"601\":1,\"673\":1}}],[\"编程题中的string的一般用法\",{\"1\":{\"530\":1}}],[\"编程的开发者来说有一定学习曲线\",{\"1\":{\"165\":1}}],[\"编程语言\",{\"1\":{\"77\":1}}],[\"编译后在命令行启动程序\",{\"1\":{\"1328\":1}}],[\"编译后的程序更为高效\",{\"1\":{\"170\":1}}],[\"编译和安装\",{\"1\":{\"1165\":1}}],[\"编译错误\",{\"1\":{\"515\":1}}],[\"编译会自动将p转为\",{\"1\":{\"513\":1}}],[\"编译的目标\",{\"1\":{\"481\":1}}],[\"编译快是因为编译期做的优化少\",{\"1\":{\"345\":1}}],[\"编译\",{\"1\":{\"313\":1,\"964\":1}}],[\"编译速度变慢\",{\"1\":{\"314\":1}}],[\"编译速度非常快\",{\"1\":{\"154\":1}}],[\"编译速度快\",{\"0\":{\"154\":1}}],[\"编译型语言\",{\"1\":{\"148\":1,\"170\":1,\"595\":1,\"667\":1}}],[\"编译器的一项优化\",{\"1\":{\"635\":1}}],[\"编译器可以决定将某些变量分配到栈上而不是堆上\",{\"1\":{\"633\":1}}],[\"编译器在编译时进行的一项优化技术\",{\"1\":{\"633\":1}}],[\"编译器就难受\",{\"1\":{\"345\":1}}],[\"编译器就会告诉你无法访问\",{\"1\":{\"175\":1}}],[\"编译器很明确的告诉了我们变量mom发生了逃逸\",{\"1\":{\"317\":1}}],[\"编译器会提示头文件不存在\",{\"1\":{\"300\":1}}],[\"编译器会告诉你两者之间类型并不相同\",{\"1\":{\"209\":1}}],[\"编译器将会输出如下错误\",{\"1\":{\"287\":1}}],[\"编译器报错\",{\"1\":{\"211\":1}}],[\"编译器无法推断其类型\",{\"1\":{\"206\":1}}],[\"编译器\",{\"0\":{\"136\":1}}],[\"编译器相关\",{\"1\":{\"120\":1}}],[\"编写dockerfile文件\",{\"1\":{\"1193\":1}}],[\"编写配置文件\",{\"1\":{\"1003\":1}}],[\"编写规范\",{\"0\":{\"467\":1}}],[\"编写完后对源代码格式化并测试\",{\"1\":{\"447\":1}}],[\"编写\",{\"0\":{\"446\":1},\"1\":{\"1200\":1,\"1203\":1}}],[\"编写模块\",{\"0\":{\"443\":1}}],[\"编写一个简单的函数来模拟内存和cpu的消耗\",{\"1\":{\"322\":1}}],[\"编写头文件lib\",{\"1\":{\"312\":1}}],[\"编写具体的函数\",{\"1\":{\"299\":1}}],[\"编写和使用openstreetmap数据和api的库\",{\"1\":{\"135\":1}}],[\"编写的都是静态网页html\",{\"1\":{\"110\":1}}],[\"操作匹配视觉表示\",{\"0\":{\"1268\":1}}],[\"操作的权限\",{\"1\":{\"1256\":1}}],[\"操作的git\",{\"1\":{\"55\":1}}],[\"操作不同缓存\",{\"1\":{\"1198\":1}}],[\"操作不同数据\",{\"1\":{\"1198\":1}}],[\"操作中等\",{\"1\":{\"1057\":2}}],[\"操作简单\",{\"1\":{\"1057\":2}}],[\"操作go\",{\"1\":{\"714\":1}}],[\"操作redis之前先更新mysql\",{\"1\":{\"651\":1}}],[\"操作时可能导致阻塞\",{\"1\":{\"651\":1}}],[\"操作上\",{\"1\":{\"634\":1}}],[\"操作函数签名如下\",{\"1\":{\"440\":1}}],[\"操作完毕后就会解锁\",{\"1\":{\"440\":1}}],[\"操作\",{\"0\":{\"1177\":1},\"1\":{\"122\":6,\"999\":1,\"1256\":1,\"1266\":1}}],[\"操作系统用户包\",{\"1\":{\"1308\":1}}],[\"操作系统命令包\",{\"1\":{\"1308\":1}}],[\"操作系统信号包\",{\"1\":{\"1308\":1}}],[\"操作系统进行交互的包\",{\"1\":{\"1308\":1}}],[\"操作系统提供的系统调用包\",{\"1\":{\"1308\":1}}],[\"操作系统线程\",{\"1\":{\"651\":1}}],[\"操作系统调度的基本单位\",{\"1\":{\"649\":1}}],[\"操作系统资源分配的最小单位\",{\"1\":{\"641\":1}}],[\"操作系统内核使用的内存空间\",{\"1\":{\"636\":1}}],[\"操作系统内存管理的方法\",{\"1\":{\"601\":1,\"673\":1}}],[\"操作系统处理死锁的方法\",{\"1\":{\"601\":1,\"673\":1}}],[\"操作系统中大端编码\",{\"1\":{\"579\":1,\"651\":2}}],[\"操作系统相关的了解吗\",{\"1\":{\"566\":1,\"638\":1}}],[\"操作系统\",{\"1\":{\"77\":1,\"1039\":1}}],[\"📝开源项目\",{\"0\":{\"75\":1}}],[\"💻软件\",{\"0\":{\"67\":1}}],[\"亿图软件\",{\"1\":{\"74\":1}}],[\"画图工具\",{\"0\":{\"74\":1}}],[\"市面大部分的书籍这里都有电子版\",{\"1\":{\"73\":1}}],[\"zaplevelenabler\",{\"1\":{\"1305\":1,\"1306\":1}}],[\"zaplogtest\",{\"1\":{\"1303\":1,\"1306\":1}}],[\"zapwritesyncer\",{\"1\":{\"1304\":1,\"1306\":1}}],[\"zapencoder\",{\"1\":{\"1303\":1,\"1306\":1}}],[\"zapconfig\",{\"1\":{\"1303\":5,\"1304\":1,\"1305\":1,\"1306\":3}}],[\"zapcore\",{\"1\":{\"1302\":1,\"1303\":12,\"1304\":5,\"1305\":1,\"1306\":5,\"1307\":2}}],[\"zap日志配置结构体\",{\"1\":{\"1303\":1}}],[\"zap日志配置\",{\"1\":{\"1303\":1}}],[\"zap的配置也支持通过配置文件反序列化\",{\"1\":{\"1302\":1}}],[\"zap的使用非常简单\",{\"1\":{\"1301\":1}}],[\"zap是一个用go构建的\",{\"1\":{\"1299\":1}}],[\"zap\",{\"0\":{\"1299\":1},\"1\":{\"1299\":3,\"1300\":1,\"1301\":5,\"1302\":3,\"1303\":3,\"1304\":1,\"1305\":6,\"1306\":7,\"1307\":1}}],[\"zadd\",{\"1\":{\"947\":1,\"974\":1}}],[\"zuoyu\",{\"1\":{\"1166\":1,\"1168\":1}}],[\"zunionstore\",{\"1\":{\"974\":1}}],[\"zone示例\",{\"1\":{\"1151\":1}}],[\"zone=serverlimit\",{\"1\":{\"1158\":2}}],[\"zone=iplimit\",{\"1\":{\"1158\":4}}],[\"zone=mylimit\",{\"1\":{\"1154\":2,\"1155\":2,\"1156\":2,\"1157\":2}}],[\"zone=perserver\",{\"1\":{\"1152\":1,\"1158\":1}}],[\"zone=perip\",{\"1\":{\"1152\":1,\"1158\":1}}],[\"zone=public\",{\"1\":{\"1078\":2}}],[\"zone=addr\",{\"1\":{\"1152\":2}}],[\"zone=one\",{\"1\":{\"1151\":8,\"1154\":2}}],[\"zone=name\",{\"1\":{\"1151\":1,\"1152\":1}}],[\"zone\",{\"0\":{\"1151\":1},\"1\":{\"1150\":1,\"1151\":4,\"1152\":6,\"1154\":3,\"1155\":1,\"1156\":1,\"1157\":1,\"1158\":4}}],[\"zookeeper服务的启动\",{\"0\":{\"1031\":1}}],[\"zookeeper为大型分布式计算提供开源的分布式配置服务\",{\"1\":{\"1021\":1}}],[\"zookeeper在kafka中的角色\",{\"0\":{\"1021\":1}}],[\"zookeeper等\",{\"1\":{\"653\":1}}],[\"zookeeper原理\",{\"1\":{\"618\":1,\"690\":1}}],[\"zookeeper\",{\"0\":{\"1066\":1},\"1\":{\"122\":1,\"618\":1,\"633\":1,\"637\":1,\"690\":1,\"1029\":4,\"1031\":4,\"1032\":1,\"1034\":8,\"1066\":1}}],[\"zookeeper客户端\",{\"1\":{\"122\":1}}],[\"zxvf\",{\"1\":{\"1028\":1,\"1113\":1}}],[\"zlexcount\",{\"1\":{\"974\":1}}],[\"zlib\",{\"1\":{\"124\":1,\"1112\":2}}],[\"zcard\",{\"1\":{\"974\":1}}],[\"zcount\",{\"1\":{\"949\":1,\"974\":1}}],[\"zrevrangebyscore\",{\"1\":{\"974\":1}}],[\"zrevrange\",{\"1\":{\"974\":1}}],[\"zrevrank\",{\"1\":{\"948\":1,\"974\":1}}],[\"zremrangebylex\",{\"1\":{\"974\":1}}],[\"zremrangebyscore\",{\"1\":{\"951\":1,\"974\":1}}],[\"zremrangebyrank\",{\"1\":{\"951\":1,\"974\":1}}],[\"zrem\",{\"1\":{\"951\":1,\"974\":1}}],[\"zrangebylex\",{\"1\":{\"974\":1}}],[\"zrangeby\",{\"1\":{\"949\":1}}],[\"zrangebyscore\",{\"1\":{\"949\":1,\"974\":1}}],[\"zrange\",{\"1\":{\"949\":1,\"974\":1}}],[\"zrank\",{\"1\":{\"948\":1,\"974\":1}}],[\"zhihu\",{\"1\":{\"1046\":1}}],[\"zhuanlan\",{\"1\":{\"1046\":1}}],[\"zh\",{\"1\":{\"841\":1,\"1231\":1,\"1423\":4}}],[\"zhangsan\",{\"1\":{\"806\":1,\"861\":3}}],[\"zscan\",{\"1\":{\"974\":1}}],[\"zscore\",{\"1\":{\"949\":1,\"974\":1}}],[\"zs\",{\"1\":{\"814\":1}}],[\"zset\",{\"1\":{\"580\":1,\"622\":1,\"651\":1,\"652\":1,\"694\":1,\"956\":1,\"969\":1}}],[\"zset使用场景\",{\"1\":{\"579\":1,\"651\":2}}],[\"zen\",{\"1\":{\"769\":2,\"770\":2}}],[\"zet\",{\"1\":{\"624\":1,\"696\":1}}],[\"zero实现原理\",{\"0\":{\"1297\":1}}],[\"zero使用\",{\"0\":{\"1295\":1}}],[\"zero中的服务熔断和限流是怎么做的\",{\"1\":{\"620\":1,\"692\":1}}],[\"zeromq\",{\"1\":{\"128\":1}}],[\"zero的情况\",{\"1\":{\"116\":1}}],[\"zero\",{\"0\":{\"115\":1},\"1\":{\"109\":1,\"111\":1,\"117\":1,\"118\":1,\"330\":1,\"1163\":2,\"1411\":2}}],[\"z并不一定真实存在\",{\"1\":{\"459\":1}}],[\"zinterstore\",{\"1\":{\"974\":1}}],[\"zincrby\",{\"1\":{\"974\":1}}],[\"zincr\",{\"1\":{\"950\":1}}],[\"zinx\",{\"1\":{\"332\":1}}],[\"ziv\",{\"1\":{\"124\":1}}],[\"zip压缩归档的包\",{\"1\":{\"1308\":1}}],[\"zipmap\",{\"1\":{\"965\":2}}],[\"zip文件解压三份\",{\"1\":{\"767\":1}}],[\"ziphash\",{\"1\":{\"457\":1,\"460\":3}}],[\"zip\",{\"1\":{\"124\":1,\"132\":1,\"457\":1,\"460\":3,\"740\":1,\"1281\":1,\"1308\":1}}],[\"z\",{\"1\":{\"73\":1,\"176\":1,\"459\":1,\"633\":2,\"947\":2,\"950\":1}}],[\"被删除子串位置后面的字符串\",{\"1\":{\"1400\":1}}],[\"被删除子串位置前面的字符串\",{\"1\":{\"1400\":1}}],[\"被访问资源\",{\"1\":{\"1251\":1}}],[\"被访问实体\",{\"1\":{\"1251\":1}}],[\"被限制了\",{\"1\":{\"1228\":1}}],[\"被用户访问到\",{\"1\":{\"1163\":1}}],[\"被kong代理以后的地址是\",{\"1\":{\"1086\":1,\"1087\":1}}],[\"被多家公司和多个开源项目使用\",{\"1\":{\"1055\":1}}],[\"被叫做\",{\"1\":{\"984\":1}}],[\"被称为追加模式\",{\"1\":{\"984\":1}}],[\"被正确接收\",{\"1\":{\"641\":1}}],[\"被其它线程解锁\",{\"1\":{\"581\":1,\"653\":2}}],[\"被问到所在公司技术团队裁撤后为何会留下自己\",{\"1\":{\"575\":1,\"647\":1}}],[\"被动\",{\"1\":{\"553\":1}}],[\"被修改\",{\"1\":{\"515\":1}}],[\"被监测的可以是网络请求\",{\"1\":{\"421\":1}}],[\"被包裹的错误可能依旧是一个错误链\",{\"1\":{\"393\":1}}],[\"被转换类型必须是可以被目标类型代表的\",{\"1\":{\"385\":1}}],[\"被封了\",{\"1\":{\"72\":1}}],[\"被纳入版本控制\",{\"1\":{\"22\":1}}],[\"之所以不可移植的原因是一些操作的结果取决于操作系统实现\",{\"1\":{\"1437\":1}}],[\"之所以不使用空结构体\",{\"1\":{\"425\":1}}],[\"之所以会大家一起挂\",{\"1\":{\"1165\":1}}],[\"之所以被称作乐观锁\",{\"1\":{\"440\":1}}],[\"之所以能成功调用\",{\"1\":{\"299\":1}}],[\"之后成为apache项目的一部分\",{\"1\":{\"1055\":1}}],[\"之后成为apache的顶级项目\",{\"1\":{\"1017\":1}}],[\"之后成为了apache项目的一部分\",{\"1\":{\"1018\":1}}],[\"之后循环取\",{\"1\":{\"780\":1}}],[\"之后有往上海发展的打算吗\",{\"1\":{\"590\":1,\"662\":1}}],[\"之后\",{\"1\":{\"301\":1}}],[\"之后才是处理冲突\",{\"1\":{\"36\":1}}],[\"之前我们没有利用到索引\",{\"1\":{\"820\":1}}],[\"之前提到过任何自定义类型都可以拥有方法\",{\"1\":{\"293\":1}}],[\"之前的李跳跳做了合体\",{\"1\":{\"72\":1}}],[\"之间增加了一个exchange模块\",{\"1\":{\"1053\":1}}],[\"之间\",{\"1\":{\"639\":1,\"1151\":1}}],[\"之间是什么关系\",{\"1\":{\"622\":1,\"694\":1}}],[\"之间通信的机制\",{\"1\":{\"151\":1}}],[\"之间映射值\",{\"1\":{\"127\":1}}],[\"之间进行二进制值交换\",{\"1\":{\"124\":1}}],[\"枪弹分离模式\",{\"1\":{\"72\":1}}],[\"截图\",{\"0\":{\"71\":1}}],[\"解读\",{\"1\":{\"1087\":1}}],[\"解读锁\",{\"1\":{\"431\":1}}],[\"解\",{\"1\":{\"1012\":1}}],[\"解法通常使用双指针方法\",{\"1\":{\"656\":1}}],[\"解法\",{\"1\":{\"653\":1,\"654\":1}}],[\"解耦合\",{\"1\":{\"651\":1}}],[\"解耦\",{\"1\":{\"644\":1}}],[\"解耦需求等\",{\"1\":{\"637\":1}}],[\"解析时间\",{\"0\":{\"1432\":1}}],[\"解析模板\",{\"1\":{\"1415\":1}}],[\"解析成功后再通过\",{\"1\":{\"1415\":1}}],[\"解析效率\",{\"1\":{\"1309\":1}}],[\"解析token包含的信息\",{\"1\":{\"1092\":1}}],[\"解析\",{\"0\":{\"1326\":1},\"1\":{\"638\":1}}],[\"解析url并实现查询转义\",{\"1\":{\"124\":1}}],[\"解除注册服务等清理工作\",{\"1\":{\"634\":1}}],[\"解压cri\",{\"1\":{\"1223\":1}}],[\"解压nginx\",{\"0\":{\"1113\":1}}],[\"解压\",{\"1\":{\"964\":1}}],[\"解压插件到当前目录中your\",{\"1\":{\"740\":1}}],[\"解压过后的依赖组织形式如下所示\",{\"1\":{\"457\":1}}],[\"解压工具\",{\"0\":{\"70\":1}}],[\"解释\",{\"1\":{\"630\":1,\"654\":3,\"993\":1,\"1191\":1,\"1223\":1}}],[\"解释缓存穿透和缓存雪崩\",{\"1\":{\"593\":1,\"665\":1}}],[\"解释一下什么是可重复读\",{\"1\":{\"562\":1,\"634\":1}}],[\"解释项目哪些地方用到了依赖\",{\"1\":{\"456\":1}}],[\"解释为\",{\"1\":{\"286\":1}}],[\"解写锁\",{\"1\":{\"431\":1}}],[\"解锁模式\",{\"1\":{\"654\":1}}],[\"解锁等\",{\"1\":{\"514\":1}}],[\"解锁也只需要unlock\",{\"1\":{\"429\":1}}],[\"解锁\",{\"1\":{\"417\":2,\"430\":2,\"434\":1,\"514\":1,\"557\":2}}],[\"解锁操作超时的信号量模式实现\",{\"1\":{\"137\":1}}],[\"解包后会返回当前错误链所包裹的错误\",{\"1\":{\"393\":1}}],[\"解引用符则有两个用途\",{\"1\":{\"275\":1}}],[\"解组到\",{\"1\":{\"127\":1}}],[\"解码器\",{\"1\":{\"126\":1,\"135\":1}}],[\"解决上面的问题可以使用\",{\"1\":{\"1165\":1}}],[\"解决问题能力\",{\"1\":{\"657\":1}}],[\"解决方法\",{\"1\":{\"636\":3,\"649\":1,\"653\":1}}],[\"解决方案\",{\"1\":{\"634\":3,\"635\":1,\"639\":1,\"641\":1,\"653\":1,\"825\":1,\"1062\":1,\"1064\":1,\"1171\":1}}],[\"解决了高并发数据处理的问题\",{\"1\":{\"636\":1}}],[\"解决了接口动态类型判定的痛点\",{\"1\":{\"516\":1}}],[\"解决办法\",{\"1\":{\"636\":1}}],[\"解决办法有两种\",{\"1\":{\"287\":1}}],[\"解决对头阻塞问题\",{\"1\":{\"620\":1,\"692\":1}}],[\"解决思路\",{\"1\":{\"607\":1,\"654\":1,\"679\":1}}],[\"解决\",{\"1\":{\"537\":1}}],[\"解决这个问题将这个复制到闭包内的局部变量即可\",{\"1\":{\"514\":1}}],[\"解决明文传输\",{\"1\":{\"83\":1}}],[\"解决此问题可以在git\",{\"1\":{\"58\":1}}],[\"自身的地址\",{\"1\":{\"1411\":1}}],[\"自身的net\",{\"1\":{\"1273\":1}}],[\"自带的日志包\",{\"1\":{\"1308\":1}}],[\"自带的交叉编译也没法用了\",{\"1\":{\"314\":1}}],[\"自行配置\",{\"1\":{\"1197\":1}}],[\"自上一个请求处理完后\",{\"1\":{\"1154\":1}}],[\"自减\",{\"1\":{\"925\":1}}],[\"自增\",{\"1\":{\"925\":1}}],[\"自增id也可以用如下方式\",{\"1\":{\"820\":1}}],[\"自己只需要提供rootfs就可以了\",{\"1\":{\"1192\":1}}],[\"自己才会加入到集群中\",{\"1\":{\"1163\":1}}],[\"自己对未来一两年的规划是怎样的\",{\"1\":{\"607\":1,\"679\":1}}],[\"自己的性格有测过吗mbti\",{\"1\":{\"598\":1,\"670\":1}}],[\"自我介绍\",{\"1\":{\"520\":1,\"566\":1,\"567\":1,\"569\":1,\"570\":1,\"573\":1,\"580\":1,\"584\":1,\"585\":1,\"586\":1,\"588\":1,\"590\":1,\"592\":1,\"593\":1,\"595\":1,\"597\":1,\"598\":1,\"599\":1,\"601\":1,\"606\":1,\"607\":1,\"609\":1,\"611\":1,\"615\":1,\"618\":1,\"622\":1,\"624\":1,\"625\":1,\"638\":2,\"639\":1,\"641\":1,\"642\":1,\"645\":1,\"652\":1,\"656\":2,\"657\":1,\"658\":1,\"660\":1,\"662\":1,\"664\":1,\"665\":1,\"667\":1,\"669\":1,\"670\":1,\"671\":1,\"673\":1,\"678\":1,\"679\":1,\"681\":1,\"683\":1,\"687\":1,\"690\":1,\"694\":1,\"696\":1,\"697\":1}}],[\"自然不会有这种特殊待遇了\",{\"1\":{\"1443\":1}}],[\"自然就是修改程序的router\",{\"1\":{\"1087\":1}}],[\"自然所有的case都不可用\",{\"1\":{\"421\":1}}],[\"自然闭包函数也就无法恢复panic\",{\"1\":{\"397\":1}}],[\"自然也就不再需要free\",{\"1\":{\"303\":1}}],[\"自然而然实现animal接口的就是dog指针\",{\"1\":{\"287\":1}}],[\"自然en和ru语言日期\",{\"1\":{\"144\":1}}],[\"自然语言处理\",{\"0\":{\"144\":1},\"1\":{\"120\":1}}],[\"自适应基数树的\",{\"1\":{\"127\":1}}],[\"自动分配ip地址\",{\"1\":{\"1219\":1}}],[\"自动分配外部\",{\"1\":{\"655\":1}}],[\"自动故障转移\",{\"1\":{\"1006\":1}}],[\"自动路由到正确的节点\",{\"1\":{\"1005\":1}}],[\"自动选择解析方式\",{\"1\":{\"1283\":2}}],[\"自动选择一个最优的从节点切换为主节点\",{\"1\":{\"999\":1}}],[\"自动选择一个从节点升级为主服务\",{\"1\":{\"996\":1}}],[\"自动选举一个节点作为master\",{\"1\":{\"1003\":1}}],[\"自动触\",{\"1\":{\"981\":1}}],[\"自动触发sync命令\",{\"1\":{\"993\":1}}],[\"自动触发重写\",{\"1\":{\"985\":1}}],[\"自动触发\",{\"1\":{\"981\":2}}],[\"自动触发的条件包含在了\",{\"1\":{\"981\":1}}],[\"自动触发策略\",{\"1\":{\"981\":2}}],[\"自动进行故障转移\",{\"1\":{\"651\":1}}],[\"自动嵌套\",{\"1\":{\"635\":1}}],[\"自动延长过期时间\",{\"1\":{\"634\":1}}],[\"自动续期\",{\"1\":{\"634\":1}}],[\"自动解引用\",{\"1\":{\"515\":1}}],[\"自动\",{\"0\":{\"324\":1}}],[\"自动和手动\",{\"1\":{\"322\":1}}],[\"自动测速\",{\"1\":{\"77\":1}}],[\"自动处理\",{\"1\":{\"65\":1}}],[\"自定义函数的返回值一般有两个\",{\"1\":{\"1420\":1}}],[\"自定义排序\",{\"0\":{\"1380\":1}}],[\"自定义时间格式\",{\"1\":{\"1303\":1}}],[\"自定义验证\",{\"0\":{\"1290\":1}}],[\"自定义镜像的创建与管理\",{\"1\":{\"1200\":1}}],[\"自定义一个网络\",{\"1\":{\"1197\":1}}],[\"自定义一致性hash算法\",{\"1\":{\"1165\":1}}],[\"自定义网络\",{\"0\":{\"1197\":1}}],[\"自定义返回值\",{\"0\":{\"1157\":1}}],[\"自定义插件\",{\"1\":{\"1072\":1}}],[\"自定义协议\",{\"1\":{\"1057\":2}}],[\"自定义协议的tcp\",{\"1\":{\"145\":1}}],[\"自定义error\",{\"1\":{\"393\":1}}],[\"自定义错误\",{\"0\":{\"391\":1}}],[\"自定义错误是通过var来声明的\",{\"1\":{\"388\":1}}],[\"自定义标题\",{\"1\":{\"62\":1}}],[\"自定义\",{\"1\":{\"62\":1}}],[\"└──\",{\"1\":{\"65\":2,\"1235\":6}}],[\"│\",{\"1\":{\"65\":2,\"476\":21,\"1235\":16}}],[\"├──\",{\"1\":{\"65\":2,\"1235\":13}}],[\"内外可通信\",{\"1\":{\"1217\":1}}],[\"内有10个更改\",{\"1\":{\"965\":1}}],[\"内有1个更改\",{\"1\":{\"965\":1}}],[\"内\",{\"1\":{\"796\":1}}],[\"内核空间\",{\"1\":{\"636\":1}}],[\"内容为\",{\"1\":{\"1174\":1}}],[\"内容管理\",{\"1\":{\"906\":1}}],[\"内容创作等\",{\"1\":{\"655\":1}}],[\"内容\",{\"1\":{\"562\":1,\"633\":1,\"634\":2,\"746\":1}}],[\"内容如下\",{\"1\":{\"299\":1,\"312\":1,\"463\":1}}],[\"内完成\",{\"1\":{\"498\":1}}],[\"内部字段不对外暴露\",{\"1\":{\"1411\":1}}],[\"内部字段都是零值的结构体\",{\"1\":{\"202\":1}}],[\"内部拆分为多个\",{\"1\":{\"1060\":1}}],[\"内部扩大锁定范围\",{\"1\":{\"796\":1}}],[\"内部存储结构\",{\"1\":{\"728\":1}}],[\"内部对象也可以包含内部对象\",{\"1\":{\"726\":1}}],[\"内部使用跳表\",{\"1\":{\"651\":1}}],[\"内部节点仅作为索引\",{\"1\":{\"641\":1}}],[\"内部节点只存储键\",{\"1\":{\"635\":1}}],[\"内部起个线程池\",{\"1\":{\"592\":1,\"664\":1}}],[\"内部改变而功能一样\",{\"1\":{\"516\":1}}],[\"内部的一个定时器事件\",{\"1\":{\"980\":1}}],[\"内部的其他方法例如work和boot都无法访问\",{\"1\":{\"293\":1}}],[\"内部的字段不同代表内部细节不一样\",{\"1\":{\"293\":1}}],[\"内部实现改变而功能不变\",{\"1\":{\"293\":1}}],[\"内部包\",{\"0\":{\"176\":1}}],[\"内部链接\",{\"0\":{\"65\":1}}],[\"内存储器\",{\"1\":{\"805\":2}}],[\"内存也不能完全的缓存表中的数据\",{\"1\":{\"800\":1}}],[\"内存空间毕竟有限\",{\"1\":{\"791\":1}}],[\"内存泄漏等\",{\"1\":{\"655\":1}}],[\"内存已分配但初始化为零值\",{\"1\":{\"654\":1}}],[\"内存溢出\",{\"1\":{\"644\":1}}],[\"内存等硬件资源达到了极限\",{\"1\":{\"639\":1}}],[\"内存锁\",{\"1\":{\"639\":1}}],[\"内存回收触发条件\",{\"1\":{\"633\":1}}],[\"内存优化\",{\"0\":{\"630\":1}}],[\"内存何时分配在栈上\",{\"1\":{\"621\":1,\"693\":1}}],[\"内存负载\",{\"1\":{\"613\":1,\"685\":1}}],[\"内存里面吗\",{\"1\":{\"567\":1,\"639\":2}}],[\"内存逃逸分析是\",{\"1\":{\"633\":1}}],[\"内存逃逸分析\",{\"1\":{\"561\":1,\"617\":1,\"633\":2,\"689\":1}}],[\"内存逃逸让变量或对象从栈内存变成堆内存\",{\"1\":{\"548\":1}}],[\"内存逃逸场景\",{\"1\":{\"548\":1}}],[\"内存逃逸是指\",{\"1\":{\"548\":1}}],[\"内存逃逸是什么\",{\"0\":{\"548\":1},\"1\":{\"547\":1}}],[\"内存浪费\",{\"1\":{\"513\":1}}],[\"内存值\",{\"1\":{\"440\":1}}],[\"内存火焰图\",{\"1\":{\"327\":1}}],[\"内存分析图\",{\"1\":{\"327\":1}}],[\"内存分配\",{\"1\":{\"527\":1,\"529\":1}}],[\"内存分配抽样\",{\"1\":{\"324\":1}}],[\"内存分配的最终决定权依旧掌握在编译器手里\",{\"1\":{\"320\":1}}],[\"内存分配情况等\",{\"1\":{\"315\":1}}],[\"内存安全问题\",{\"1\":{\"314\":1}}],[\"内存地址就可能发生了变化\",{\"1\":{\"310\":1}}],[\"内存对齐可以提高内存读写性能\",{\"1\":{\"554\":1}}],[\"内存对齐规则是由编译器决定的\",{\"1\":{\"513\":1}}],[\"内存对齐其实是合理排列结构体布局减少内存浪费\",{\"1\":{\"513\":1}}],[\"内存对齐\",{\"0\":{\"273\":1,\"554\":1},\"1\":{\"513\":1,\"547\":1}}],[\"内存管理和性能优化\",{\"1\":{\"638\":1}}],[\"内存管理\",{\"1\":{\"164\":1}}],[\"内存中的数据结构存储系统\",{\"1\":{\"907\":1}}],[\"内存中的lru字符串接口\",{\"1\":{\"127\":1}}],[\"内存中的地理索引\",{\"1\":{\"127\":1}}],[\"内存\",{\"1\":{\"127\":1,\"321\":1,\"497\":1,\"573\":1,\"634\":1,\"639\":1,\"644\":1,\"645\":2,\"655\":2,\"1039\":1}}],[\"内存占用特别大\",{\"1\":{\"776\":1}}],[\"内存占用和内存分配次数\",{\"1\":{\"476\":1}}],[\"内存占用\",{\"1\":{\"111\":1,\"315\":1}}],[\"内置数据结构\",{\"0\":{\"1453\":1}}],[\"内置数据类型是否可比较的情况如下\",{\"1\":{\"294\":1}}],[\"内置的分区\",{\"1\":{\"1019\":1}}],[\"内置类型any就是interface\",{\"1\":{\"384\":1}}],[\"内置函数cap来访问数组容量\",{\"1\":{\"240\":1}}],[\"内置工具\",{\"0\":{\"155\":1}}],[\"内置支持\",{\"1\":{\"111\":3}}],[\"内置\",{\"1\":{\"111\":2}}],[\"内置gorm\",{\"1\":{\"111\":1}}],[\"内置orm\",{\"1\":{\"111\":1}}],[\"内链\",{\"0\":{\"64\":1}}],[\"通配符参数示例\",{\"1\":{\"1280\":1}}],[\"通配符参数\",{\"1\":{\"1280\":1}}],[\"通知其他节点修改配文件\",{\"1\":{\"996\":1}}],[\"通知它已经处理完毕\",{\"1\":{\"981\":1}}],[\"通知\",{\"1\":{\"957\":1}}],[\"通信的安全性\",{\"1\":{\"1071\":1}}],[\"通信\",{\"1\":{\"1071\":1}}],[\"通信中\",{\"1\":{\"636\":1}}],[\"通信方式\",{\"1\":{\"540\":1}}],[\"通用的优化方案\",{\"1\":{\"799\":1}}],[\"通用接口就是为了泛型服务的\",{\"1\":{\"295\":1}}],[\"通用接口\",{\"0\":{\"295\":1},\"1\":{\"289\":1,\"516\":3}}],[\"通用网关接口\",{\"1\":{\"124\":1}}],[\"通道中发送空结构体来传递信号\",{\"1\":{\"651\":1}}],[\"通道channel\",{\"0\":{\"517\":1}}],[\"通道用使用起来都是类似的\",{\"1\":{\"352\":1}}],[\"通道分配内存\",{\"1\":{\"277\":1}}],[\"通道\",{\"1\":{\"151\":1,\"201\":1,\"202\":1,\"209\":1,\"234\":1,\"294\":1,\"352\":1,\"529\":1,\"651\":1}}],[\"通常我们会有一个需求就是\",{\"1\":{\"1432\":1}}],[\"通常为空字符串\",{\"1\":{\"1285\":1}}],[\"通常为\",{\"1\":{\"1133\":2}}],[\"通常需要一个包含多个列的多列索引\",{\"1\":{\"816\":1}}],[\"通常需要等待外部依赖\",{\"1\":{\"634\":1}}],[\"通常比all要快\",{\"1\":{\"814\":1}}],[\"通常存储于文件服务器\",{\"1\":{\"794\":1}}],[\"通常存储在\",{\"1\":{\"641\":1}}],[\"通常文件很大\",{\"1\":{\"794\":1}}],[\"通常与排序结合使用\",{\"1\":{\"656\":1}}],[\"通常通过版本号或时间戳实现\",{\"1\":{\"656\":1}}],[\"通常按需付费\",{\"1\":{\"655\":1}}],[\"通常按照\",{\"1\":{\"554\":1}}],[\"通常由操作系统内核管理\",{\"1\":{\"649\":1}}],[\"通常提供了运行时类型信息和反射\",{\"1\":{\"645\":1}}],[\"通常以毫秒为单位\",{\"1\":{\"644\":1}}],[\"通常服务端可以主动关闭连接\",{\"1\":{\"641\":1}}],[\"通常库存存储在数据库中\",{\"1\":{\"641\":1}}],[\"通常一个项目会包含多个子系统\",{\"1\":{\"639\":1}}],[\"通常可以通过对表结构进行优化\",{\"1\":{\"799\":1}}],[\"通常可以考虑进行表结构的优化\",{\"1\":{\"798\":1}}],[\"通常可以处理数万到数十万的并发请求\",{\"1\":{\"639\":1}}],[\"通常可以创建成千上万的协程\",{\"1\":{\"639\":1}}],[\"通常涉及到技术架构\",{\"1\":{\"639\":1}}],[\"通常在\",{\"1\":{\"1234\":1}}],[\"通常在一个线程内运行多个协程\",{\"1\":{\"645\":1}}],[\"通常在一些危险操作中会出现\",{\"1\":{\"394\":1}}],[\"通常在高并发的场景下\",{\"1\":{\"638\":1}}],[\"通常部署在多个节点上以实现高可用性\",{\"1\":{\"637\":1}}],[\"通常包括以下几个核心模块\",{\"1\":{\"644\":1}}],[\"通常包括目标用户群\",{\"1\":{\"639\":1}}],[\"通常包括\",{\"1\":{\"636\":1}}],[\"通常包含\",{\"1\":{\"634\":1}}],[\"通常用户信息存储在数据库中\",{\"1\":{\"635\":1}}],[\"通常用来做缓存\",{\"1\":{\"635\":1}}],[\"通常用于评估系统的吞吐量\",{\"1\":{\"639\":1}}],[\"通常用于压测\",{\"1\":{\"639\":1}}],[\"通常用于存储配置数据\",{\"1\":{\"635\":1}}],[\"通常用于测试程序的内存占用\",{\"1\":{\"475\":1}}],[\"通常用于表述一些不可再细化分割的操作\",{\"1\":{\"437\":1}}],[\"通常用于表示一个常量声明中的无类型整数序数\",{\"1\":{\"212\":1}}],[\"通常使用自增id或uuid\",{\"1\":{\"653\":1}}],[\"通常使用\",{\"1\":{\"634\":1,\"655\":1}}],[\"通常不会出现需要使用如此巨大数量的字段的情况\",{\"1\":{\"798\":1}}],[\"通常不需要主动删除令牌\",{\"1\":{\"641\":1}}],[\"通常不推荐这么做\",{\"1\":{\"633\":1}}],[\"通常不建议使用这种方式\",{\"1\":{\"268\":1}}],[\"通常被认为⽐其他语⾔更具可读性\",{\"1\":{\"522\":1}}],[\"通常是\",{\"1\":{\"1233\":1,\"1234\":1}}],[\"通常是索引开始的部分字符\",{\"1\":{\"815\":1}}],[\"通常是通过负载均衡器进行流量分发\",{\"1\":{\"655\":1}}],[\"通常是id字段\",{\"1\":{\"653\":1}}],[\"通常是堆栈指针\",{\"1\":{\"649\":1}}],[\"通常是指某些问题的双倍处理时间\",{\"1\":{\"645\":1}}],[\"通常是原容量的\",{\"1\":{\"638\":1}}],[\"通常是官方所编写的标准库代码示例\",{\"1\":{\"470\":1}}],[\"通常是标题文本转换为小写\",{\"1\":{\"64\":1}}],[\"通常该目录为$gomodcache\",{\"1\":{\"460\":1}}],[\"通常格式为vx\",{\"1\":{\"459\":1}}],[\"通常来说\",{\"1\":{\"420\":1}}],[\"通常关闭操作会放在defer语句里\",{\"1\":{\"400\":1}}],[\"通常建议小转大\",{\"1\":{\"385\":1}}],[\"通常会进行大量的随\",{\"1\":{\"794\":1}}],[\"通常会有统一的账号体系\",{\"1\":{\"639\":1}}],[\"通常会根据业务需求进行设计\",{\"1\":{\"638\":1}}],[\"通常会使用\",{\"1\":{\"641\":1}}],[\"通常会使用指针来遍历链表\",{\"1\":{\"636\":1}}],[\"通常会使用char\",{\"1\":{\"303\":1}}],[\"通常会用到该包\",{\"1\":{\"121\":1}}],[\"通常情况下需要配置以下几个环境配置来进行模块私有处理\",{\"1\":{\"461\":1}}],[\"通常情况下是调用os包下的exit函数退出程序\",{\"1\":{\"398\":1}}],[\"通常情况下\",{\"1\":{\"243\":1,\"258\":1,\"419\":1,\"459\":1,\"460\":1,\"637\":1,\"641\":1,\"990\":1}}],[\"通过uintptr转换为unsafe\",{\"1\":{\"1443\":1}}],[\"通过unsafe包下提供的操作\",{\"1\":{\"387\":1}}],[\"通过unsafe\",{\"1\":{\"306\":1,\"308\":1}}],[\"通过block语句\",{\"1\":{\"1427\":1}}],[\"通过burst参数\",{\"1\":{\"1155\":1}}],[\"通过with语句还可以在作用域内改写根对象\",{\"1\":{\"1422\":1}}],[\"通过with语句可以控制变量和根对象的作用域\",{\"1\":{\"1422\":1}}],[\"通过web和api界面进行电子邮件和smtp测试\",{\"1\":{\"129\":1}}],[\"通过$衔接变量名来访问该变量的值\",{\"1\":{\"1419\":1}}],[\"通过$符号来表示这是一个变量\",{\"1\":{\"1419\":1}}],[\"通过直接调用http包下的函数就可以发起简单的请求\",{\"1\":{\"1330\":1}}],[\"通过直观的数据对比性能正是基准测试的目的所在\",{\"1\":{\"475\":1}}],[\"通过调用flag\",{\"1\":{\"1326\":1}}],[\"通过动态加载策略\",{\"1\":{\"1241\":1}}],[\"通过节点的\",{\"1\":{\"1234\":1}}],[\"通过镜像来启动\",{\"1\":{\"1183\":1}}],[\"通过容器\",{\"1\":{\"1181\":1}}],[\"通过配置文件\",{\"1\":{\"1128\":1}}],[\"通过配置文件可以实现集群和负载均衡\",{\"1\":{\"1107\":1}}],[\"通过前置的负载均衡配置把请求均匀地分发到各个server\",{\"1\":{\"1073\":1}}],[\"通过前缀c\",{\"1\":{\"309\":1}}],[\"通过定期于broker通信获取整个集群的状态\",{\"1\":{\"1066\":1}}],[\"通过控制能够保证所有消息被消费且仅被消费一次\",{\"1\":{\"1055\":1}}],[\"通过jps指令\",{\"1\":{\"1033\":1}}],[\"通过自动复制机制确保消息在不间断的时间段内传递到所有副本\",{\"1\":{\"1018\":1}}],[\"通过将\",{\"1\":{\"1234\":1}}],[\"通过将数据持久化到硬盘以及replication防止数据丢失\",{\"1\":{\"1017\":1}}],[\"通过将消息分区\",{\"1\":{\"636\":1}}],[\"通过add\",{\"1\":{\"1010\":1}}],[\"通过回复判断运行状态\",{\"1\":{\"996\":1}}],[\"通过监控的方式获取主机的工作状态是否正常\",{\"1\":{\"996\":1}}],[\"通过子进程遍历整个内存空间来获取存储的数据\",{\"1\":{\"980\":1}}],[\"通过字典区间返回有序集合的成员\",{\"1\":{\"974\":1}}],[\"通过索引\",{\"1\":{\"974\":1}}],[\"通过索引区间返回有序集合成指定区间内的成员\",{\"1\":{\"974\":1}}],[\"通过索引设置列表元素的值\",{\"1\":{\"971\":1}}],[\"通过索引访问的例子如下\",{\"1\":{\"367\":1}}],[\"通过sqlx\",{\"1\":{\"891\":1}}],[\"通过size方法可以获取对应类型所占的字节大小\",{\"1\":{\"353\":1}}],[\"通过管理员账号登录后\",{\"1\":{\"873\":1}}],[\"通过mongodb\",{\"1\":{\"872\":1}}],[\"通过以上几种类型\",{\"1\":{\"831\":1}}],[\"通过程序的设计\",{\"1\":{\"820\":1}}],[\"通过explain发现\",{\"1\":{\"820\":1}}],[\"通过explain可以分析查询语句或表结构的性能瓶颈\",{\"1\":{\"814\":1}}],[\"通过each方法\",{\"1\":{\"756\":1}}],[\"通过优化器知道了该怎么做\",{\"1\":{\"780\":1}}],[\"通过分数返回有序集合指定区间内的成员\",{\"1\":{\"974\":1}}],[\"通过分析器知道了你要做什么\",{\"1\":{\"780\":1}}],[\"通过分代收集和并发标记\",{\"1\":{\"635\":1}}],[\"通过执行这些功能来增强整个\",{\"1\":{\"1071\":1}}],[\"通过执行\",{\"1\":{\"776\":1}}],[\"通过脚本更新内容\",{\"1\":{\"749\":1}}],[\"通过上述的配置以后\",{\"1\":{\"1163\":1}}],[\"通过上述操作后\",{\"1\":{\"985\":1}}],[\"通过上文在\",{\"1\":{\"743\":1}}],[\"通过上面几个例子可以发现\",{\"1\":{\"212\":1}}],[\"通过上面的命令设置的信息会保存在~\",{\"1\":{\"55\":1}}],[\"通过距离对文档进行排序\",{\"1\":{\"730\":1}}],[\"通过地理位置或相对某个中心点的距离聚合文档\",{\"1\":{\"730\":1}}],[\"通过指定\",{\"1\":{\"656\":1}}],[\"通过为每个数据库操作提供一个版本号\",{\"1\":{\"656\":1}}],[\"通过共享相同的对象来节省内存\",{\"1\":{\"654\":1}}],[\"通过复制现有对象来创建新对象\",{\"1\":{\"654\":1}}],[\"通过复用协程\",{\"1\":{\"633\":1}}],[\"通过使用唯一索引\",{\"1\":{\"653\":1}}],[\"通过使用setnx或redlock等分布式锁来控制并发\",{\"1\":{\"653\":1}}],[\"通过使用参数\",{\"1\":{\"486\":1,\"487\":1}}],[\"通过检查更新时间戳\",{\"1\":{\"653\":1}}],[\"通过数据库提供的锁机制\",{\"1\":{\"656\":1}}],[\"通过数据库的行锁\",{\"1\":{\"653\":1}}],[\"通过数据库表记录锁状态\",{\"1\":{\"633\":1}}],[\"通过版本号或时间戳机制来控制并发修改\",{\"1\":{\"653\":1}}],[\"通过创建一个策略alice\",{\"1\":{\"1256\":1}}],[\"通过创建多个同名但参数不同的函数来模拟不同的参数组合\",{\"1\":{\"651\":1}}],[\"通过创建临时有序节点来实现分布式锁\",{\"1\":{\"633\":1}}],[\"通过变长参数\",{\"1\":{\"651\":1}}],[\"通过接口\",{\"1\":{\"651\":2}}],[\"通过实现这三个方法\",{\"1\":{\"649\":1}}],[\"通过实现error\",{\"1\":{\"391\":1}}],[\"通过消息队列\",{\"1\":{\"651\":1,\"656\":1}}],[\"通过消息队列的方式解耦不同模块之间的依赖\",{\"1\":{\"644\":1}}],[\"通过消息队列触发\",{\"1\":{\"641\":1}}],[\"通过设置burst参数\",{\"1\":{\"1156\":1}}],[\"通过设置超时时间\",{\"1\":{\"645\":1}}],[\"通过设置\",{\"1\":{\"641\":1}}],[\"通过栈来实现\",{\"1\":{\"638\":1}}],[\"通过虚拟继承来解决这个问题\",{\"1\":{\"637\":1}}],[\"通过组合和接口避免了多重继承的问题\",{\"1\":{\"637\":1}}],[\"通过压缩消息\",{\"1\":{\"636\":1}}],[\"通过滑动窗口机制控制发送方的发送速率\",{\"1\":{\"636\":1}}],[\"通过序列号保证数据包的顺序\",{\"1\":{\"636\":1}}],[\"通过缓存减少数据库负载\",{\"1\":{\"635\":1}}],[\"通过标记活动对象并清除不再引用的对象来回收内存\",{\"1\":{\"635\":1}}],[\"通过在同一个桶中使用链表来存储多个具有相同哈希值的元素\",{\"1\":{\"634\":1}}],[\"通过文件的哈希值\",{\"1\":{\"634\":1}}],[\"通过逃逸分析\",{\"1\":{\"633\":1}}],[\"通过什么实现\",{\"1\":{\"621\":1,\"693\":1}}],[\"通过线程日志延伸出\",{\"1\":{\"562\":1,\"634\":2}}],[\"通过函数方法前加go关键字启动协程\",{\"1\":{\"539\":1}}],[\"通过函数来进行两数相加\",{\"1\":{\"208\":1}}],[\"通过命令go\",{\"1\":{\"469\":2}}],[\"通过命令行就可以使用\",{\"1\":{\"188\":1}}],[\"通过一行代码就运行起了一个最简单的web服务器\",{\"1\":{\"453\":1}}],[\"通过go\",{\"1\":{\"445\":1,\"450\":2,\"703\":1}}],[\"通过如下命令开启用go\",{\"1\":{\"444\":1}}],[\"通过如下命令来查看是否开启\",{\"1\":{\"444\":1}}],[\"通过rwmutex\",{\"1\":{\"432\":1}}],[\"通过有缓冲管道还可以实现一个简单的互斥锁\",{\"1\":{\"417\":1}}],[\"通过内置函数len可以访问管道缓冲区中数据的个数\",{\"1\":{\"417\":1}}],[\"通过openfile函数可以控制更多细节\",{\"1\":{\"400\":1}}],[\"通过格式化输出\",{\"1\":{\"393\":1}}],[\"通过这种写法可以根据不同的case做出不同的逻辑处理\",{\"1\":{\"387\":1}}],[\"通过显式的将myfloat64\",{\"1\":{\"385\":1}}],[\"通过类型声明的类型都是新类型\",{\"1\":{\"383\":1}}],[\"通过time\",{\"1\":{\"1433\":1,\"1434\":1}}],[\"通过terms查询语法实现\",{\"1\":{\"757\":1}}],[\"通过terms实现sql的in查询\",{\"0\":{\"757\":1}}],[\"通过t\",{\"1\":{\"472\":1,\"473\":1}}],[\"通过type关键字声明了一个基础类型为int64名为myint的类型\",{\"1\":{\"383\":1}}],[\"通过tcp和udp发送数据包\",{\"1\":{\"145\":1}}],[\"通过tcp流化协议缓冲区数据变得容易\",{\"1\":{\"145\":1}}],[\"通过反射实现\",{\"1\":{\"645\":1}}],[\"通过反射可以构造新的值\",{\"1\":{\"372\":1}}],[\"通过反射可以获取函数的一切信息\",{\"1\":{\"363\":1}}],[\"通过反射值来调用函数\",{\"1\":{\"365\":1}}],[\"通过反射类型来获取函数的一切信息\",{\"1\":{\"364\":1}}],[\"通过反向传播进行训练\",{\"1\":{\"142\":1}}],[\"通过id删除一个指定的文档\",{\"1\":{\"712\":1}}],[\"通过info\",{\"1\":{\"702\":1}}],[\"通过interface\",{\"1\":{\"362\":1}}],[\"通过innersourcing让不在权限范围内的人访问不到该资源\",{\"1\":{\"43\":1}}],[\"通过implements方法可以判断一个类型是否实现了某一接口\",{\"1\":{\"355\":1}}],[\"通过kind方法\",{\"1\":{\"351\":1}}],[\"通过kind\",{\"1\":{\"351\":1}}],[\"通过list命令以源代码的形式查看\",{\"1\":{\"326\":1}}],[\"通过图片我们可以更加清晰的看到整个调用栈的内存情况\",{\"1\":{\"326\":1}}],[\"通过各种各样的测试\",{\"1\":{\"315\":1}}],[\"通过cap可以访问管道缓冲区的大小\",{\"1\":{\"417\":1}}],[\"通过comparable方法可以判断一个类型是否可以被比较\",{\"1\":{\"354\":1}}],[\"通过c\",{\"1\":{\"307\":1}}],[\"通过引入c文件\",{\"1\":{\"299\":1}}],[\"通过导入语句import\",{\"1\":{\"297\":1}}],[\"通过输出可以很清晰的看到父子的层级结构\",{\"1\":{\"473\":1}}],[\"通过输出可以看到测试失败了\",{\"1\":{\"491\":1}}],[\"通过输出可以看到\",{\"1\":{\"306\":1}}],[\"通过输出会发现\",{\"1\":{\"294\":1}}],[\"通过输出字符串第一个元素可以看出结果\",{\"1\":{\"255\":1}}],[\"通过对比上面几个例子可以发现这段代码\",{\"1\":{\"285\":1}}],[\"通过结构体和方法组合模拟一个类出来\",{\"1\":{\"513\":1}}],[\"通过结构体和方法也可以模拟出一个类\",{\"1\":{\"266\":1}}],[\"通过结果得知成功导入了模块\",{\"1\":{\"463\":1}}],[\"通过结果可以观察到相同的键值并没有覆盖\",{\"1\":{\"261\":1}}],[\"通过for\",{\"1\":{\"263\":1,\"420\":1}}],[\"通过fallthrough关键字来继续执行相邻的下一个分支\",{\"1\":{\"230\":1}}],[\"通过代码可以观察到\",{\"1\":{\"260\":1}}],[\"通过var\",{\"1\":{\"243\":1}}],[\"通过vies检查增值税号和检查iban银行帐号的模块\",{\"1\":{\"133\":1}}],[\"通过不同的前缀可以表达不同进制的浮点数\",{\"1\":{\"182\":1}}],[\"通过名称访问的例子如下\",{\"1\":{\"367\":1}}],[\"通过名称\",{\"1\":{\"175\":1}}],[\"通过名称和id进行用户账户检查\",{\"1\":{\"124\":1}}],[\"通过\",{\"1\":{\"164\":1,\"505\":1,\"634\":1,\"637\":3,\"638\":1,\"641\":3,\"644\":1,\"645\":1,\"655\":1,\"656\":1,\"999\":1,\"1183\":1,\"1287\":1,\"1417\":2}}],[\"通过其http服务器运行时提供性能测试数据\",{\"1\":{\"124\":1}}],[\"通过构建内存索引实现的高速字符串匹配查找算法\",{\"1\":{\"124\":1}}],[\"通过http包\",{\"1\":{\"121\":1}}],[\"跳过主从复制中遇到的所有错误或指定类型的错误\",{\"1\":{\"822\":2}}],[\"跳过重复的处理\",{\"1\":{\"653\":1}}],[\"跳过regexp匹配的测试用例\",{\"1\":{\"469\":1}}],[\"跳表的时间复杂度\",{\"1\":{\"585\":1,\"657\":1}}],[\"跳表\",{\"1\":{\"580\":1,\"652\":1}}],[\"跳来跳去的很降低代码可读性\",{\"1\":{\"232\":1}}],[\"跳到我的标题\",{\"1\":{\"64\":2}}],[\"跳转某页使用方案一\",{\"1\":{\"820\":1}}],[\"跳转到其他文章\",{\"0\":{\"65\":1}}],[\"跳转\",{\"0\":{\"63\":1}}],[\"危险容器\",{\"1\":{\"62\":1}}],[\"警告信息\",{\"1\":{\"655\":1}}],[\"警告容器\",{\"1\":{\"62\":1}}],[\"警告文字\",{\"1\":{\"61\":1}}],[\"注解的本质是什么\",{\"1\":{\"598\":1,\"670\":1}}],[\"注册动态路由\",{\"1\":{\"1286\":1}}],[\"注册静态路由\",{\"1\":{\"1286\":1}}],[\"注册一个镜像仓库账号\",{\"1\":{\"1193\":1}}],[\"注册账号\",{\"1\":{\"1079\":1}}],[\"注册\",{\"1\":{\"641\":1}}],[\"注册中心如何感知服务的变化\",{\"1\":{\"580\":1,\"652\":1}}],[\"注册时完成\",{\"1\":{\"514\":1}}],[\"注册时候立即求值参数\",{\"1\":{\"514\":1}}],[\"注\",{\"1\":{\"84\":2}}],[\"注释符号\",{\"1\":{\"1418\":1}}],[\"注释并不会在最终的模板中生成\",{\"1\":{\"1418\":1}}],[\"注释来提供精确的函数返回值或输出结果\",{\"1\":{\"505\":1}}],[\"注释与内容之间建议隔一个空格\",{\"1\":{\"177\":1}}],[\"注释\",{\"0\":{\"177\":1,\"1418\":1}}],[\"注释容器\",{\"1\":{\"62\":1}}],[\"注释文字\",{\"1\":{\"61\":1}}],[\"注意若是docker引擎需要加上\",{\"1\":{\"1226\":1}}],[\"注意service\",{\"1\":{\"1225\":1}}],[\"注意修改apiserver的地址为master节点的ip\",{\"1\":{\"1225\":1}}],[\"注意修改配置文件一定要\",{\"1\":{\"1123\":1}}],[\"注意基于链接没有速率的概念\",{\"1\":{\"1158\":1}}],[\"注意正则匹配中不能使用alias别名\",{\"1\":{\"1144\":1}}],[\"注意root的路径是\",{\"1\":{\"1142\":1}}],[\"注意事项\",{\"0\":{\"1121\":1},\"1\":{\"1144\":1}}],[\"注意授权\",{\"1\":{\"981\":1}}],[\"注意自己电脑存放mongodb的文件夹路径\",{\"1\":{\"850\":1}}],[\"注意要唯一\",{\"1\":{\"822\":2}}],[\"注意如果是\",{\"1\":{\"822\":1}}],[\"注意是百分比\",{\"1\":{\"814\":1}}],[\"注意是左闭右开\",{\"1\":{\"511\":1}}],[\"注意utf\",{\"1\":{\"787\":1}}],[\"注意字段的顺序不会保证\",{\"1\":{\"656\":1}}],[\"注意一下闭包和延迟调用即可\",{\"1\":{\"514\":1}}],[\"注意for\",{\"1\":{\"511\":1}}],[\"注意点\",{\"0\":{\"418\":1}}],[\"注意文字\",{\"1\":{\"61\":1}}],[\"注意这里的并不像朋友圈那样容易获得点赞\",{\"1\":{\"53\":1}}],[\"注意这里是文件\",{\"1\":{\"28\":1}}],[\"注意\",{\"0\":{\"266\":1},\"1\":{\"13\":1,\"18\":1,\"54\":3,\"58\":2,\"175\":1,\"400\":1,\"402\":1,\"509\":1,\"510\":1,\"512\":2,\"515\":3,\"526\":1,\"532\":1,\"533\":1,\"723\":1,\"725\":1,\"793\":1,\"813\":1,\"814\":1,\"861\":1,\"872\":1,\"980\":1,\"981\":2,\"987\":1,\"1025\":1,\"1139\":2,\"1161\":1,\"1162\":1,\"1167\":1,\"1252\":1,\"1289\":1}}],[\"思路\",{\"1\":{\"633\":1}}],[\"思维导图\",{\"0\":{\"60\":1}}],[\"思考下面这一段代码\",{\"1\":{\"208\":1}}],[\"思考\",{\"1\":{\"36\":1,\"1199\":1}}],[\"思考此时如果我们把需求1\",{\"1\":{\"36\":1}}],[\"思考如下现象\",{\"1\":{\"30\":1}}],[\"`person\",{\"1\":{\"1426\":1}}],[\"`properties\",{\"1\":{\"272\":1}}],[\"`name\",{\"1\":{\"1426\":1}}],[\"`name`\",{\"1\":{\"892\":1}}],[\"`xml\",{\"1\":{\"1310\":4}}],[\"`form\",{\"1\":{\"1281\":3,\"1283\":2,\"1289\":4}}],[\"`cat\",{\"1\":{\"1174\":1}}],[\"`linsert\",{\"1\":{\"971\":1}}],[\"`layout\",{\"1\":{\"817\":1}}],[\"`db\",{\"1\":{\"893\":4}}],[\"`description`\",{\"1\":{\"817\":1}}],[\"`user`\",{\"1\":{\"892\":4}}],[\"`bson\",{\"1\":{\"833\":3,\"834\":6,\"880\":5}}],[\"`index\",{\"1\":{\"817\":1}}],[\"`id`\",{\"1\":{\"817\":2,\"892\":2}}],[\"`subway\",{\"1\":{\"817\":4}}],[\"`rent\",{\"1\":{\"817\":1}}],[\"`round\",{\"1\":{\"817\":1}}],[\"`house\",{\"1\":{\"817\":3}}],[\"`age\",{\"1\":{\"1426\":1}}],[\"`age`\",{\"1\":{\"892\":1}}],[\"`address`\",{\"1\":{\"817\":1,\"892\":1}}],[\"`a`\",{\"1\":{\"786\":1}}],[\"`abc`\",{\"1\":{\"186\":1}}],[\"`go\",{\"1\":{\"630\":1}}],[\"`this\",{\"1\":{\"1415\":1}}],[\"`test0`\",{\"1\":{\"1047\":1}}],[\"`test`\",{\"1\":{\"491\":1,\"494\":1}}],[\"`traffic`\",{\"1\":{\"817\":1}}],[\"`toml\",{\"1\":{\"272\":1}}],[\"```go\",{\"1\":{\"448\":1}}],[\"````\",{\"1\":{\"448\":1}}],[\"````bash\",{\"1\":{\"448\":1}}],[\"```\",{\"1\":{\"448\":2}}],[\"```bash\",{\"1\":{\"448\":1}}],[\"`yaml\",{\"1\":{\"272\":1,\"1303\":13,\"1313\":5}}],[\"`json\",{\"1\":{\"272\":1,\"366\":3,\"374\":3,\"513\":1,\"746\":11,\"1302\":26,\"1307\":6,\"1318\":4}}],[\"`key1\",{\"1\":{\"272\":1}}],[\"`这是一个原生字符串\",{\"1\":{\"252\":1}}],[\"`\",{\"1\":{\"58\":1,\"186\":3,\"252\":1,\"272\":5,\"366\":3,\"374\":3,\"502\":2,\"513\":1,\"584\":2,\"630\":6,\"656\":4,\"704\":2,\"706\":2,\"709\":2,\"711\":2,\"713\":6,\"742\":2,\"745\":2,\"746\":11,\"833\":3,\"834\":6,\"880\":5,\"893\":4,\"1281\":3,\"1283\":2,\"1289\":4,\"1302\":26,\"1303\":14,\"1307\":6,\"1310\":4,\"1313\":5,\"1318\":4,\"1415\":1,\"1417\":2,\"1419\":2,\"1425\":2,\"1426\":3}}],[\"检索数据\",{\"1\":{\"729\":1}}],[\"检测文件是否已经上传过\",{\"1\":{\"634\":1}}],[\"检查权限\",{\"0\":{\"1245\":1}}],[\"检查桥接流量\",{\"1\":{\"1222\":1}}],[\"检查配置文件是否有误\",{\"1\":{\"1126\":1}}],[\"检查到主服务故障时\",{\"1\":{\"996\":1}}],[\"检查到key过期了\",{\"1\":{\"567\":1,\"639\":2}}],[\"检查给定\",{\"1\":{\"967\":2}}],[\"检查master的\",{\"1\":{\"823\":1}}],[\"检查ip\",{\"1\":{\"823\":1}}],[\"检查表的碎片\",{\"1\":{\"655\":1}}],[\"检查索引的使用情况\",{\"1\":{\"655\":1}}],[\"检查慢查询日志\",{\"1\":{\"655\":2}}],[\"检查数据库\",{\"1\":{\"655\":1}}],[\"检查数据库中的版本号是否匹配\",{\"1\":{\"653\":1}}],[\"检查\",{\"1\":{\"655\":1}}],[\"检查系统日志\",{\"1\":{\"655\":1}}],[\"检查版本号\",{\"1\":{\"653\":1}}],[\"检查是否启动成功\",{\"1\":{\"1010\":1}}],[\"检查是否创建用于同步的用户和用户密码是否正确\",{\"1\":{\"823\":1}}],[\"检查是否过期\",{\"1\":{\"651\":1}}],[\"检查是否存在该数据\",{\"1\":{\"641\":1}}],[\"检查源文件夹的状态\",{\"1\":{\"410\":1}}],[\"检查错误链中是否有\",{\"1\":{\"393\":1}}],[\"检查完毕提交代码\",{\"1\":{\"58\":1}}],[\"检查如下步骤\",{\"1\":{\"58\":1}}],[\"检出\",{\"1\":{\"34\":1}}],[\"命中不到索引\",{\"1\":{\"806\":1}}],[\"命中索引\",{\"1\":{\"595\":1,\"667\":1}}],[\"命名为原文件名\",{\"1\":{\"1307\":1}}],[\"命名参数示例\",{\"1\":{\"1280\":1}}],[\"命名可以为unit\",{\"1\":{\"471\":1}}],[\"命名规则如下\",{\"1\":{\"178\":1}}],[\"命名实体提取等\",{\"1\":{\"144\":1}}],[\"命名格式上标注该需求的id\",{\"1\":{\"58\":1}}],[\"命令进行测试\",{\"1\":{\"1280\":1}}],[\"命令加入集群\",{\"1\":{\"1226\":1}}],[\"命令详解\",{\"1\":{\"1182\":1}}],[\"命令启动\",{\"1\":{\"993\":1}}],[\"命令语法\",{\"1\":{\"993\":1}}],[\"命令方式\",{\"0\":{\"993\":1}}],[\"命令时会阻塞服务器\",{\"1\":{\"988\":1}}],[\"命令是否执行成功\",{\"1\":{\"981\":1}}],[\"命令是什么\",{\"1\":{\"601\":1,\"673\":1}}],[\"命令用于查看\",{\"1\":{\"981\":1}}],[\"命令用来对程序进行测试\",{\"1\":{\"480\":1}}],[\"命令会阻塞\",{\"1\":{\"981\":1}}],[\"命令将\",{\"1\":{\"970\":1}}],[\"命令那样\",{\"1\":{\"970\":1}}],[\"命令相似\",{\"1\":{\"970\":1}}],[\"命令接受的时间参数是\",{\"1\":{\"967\":1}}],[\"命令及描述\",{\"1\":{\"967\":1,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1}}],[\"命令文档\",{\"1\":{\"967\":1}}],[\"命令查看或设置配置项\",{\"1\":{\"965\":1}}],[\"命令手册\",{\"1\":{\"913\":1}}],[\"命令为\",{\"1\":{\"852\":2}}],[\"命令模式\",{\"1\":{\"654\":1}}],[\"命令或者\",{\"1\":{\"633\":1}}],[\"命令来分割大文件\",{\"1\":{\"633\":1}}],[\"命令运行时自动对注释进行测试校验\",{\"1\":{\"505\":1}}],[\"命令运行测试\",{\"1\":{\"491\":1,\"493\":1}}],[\"命令中开启了详细日志和内存分析\",{\"1\":{\"475\":1}}],[\"命令如下\",{\"1\":{\"453\":1}}],[\"命令行参数解析包\",{\"1\":{\"1308\":1}}],[\"命令行+开源工具\",{\"1\":{\"1057\":1}}],[\"命令行启动redis服务\",{\"1\":{\"994\":1}}],[\"命令行工具的下载\",{\"1\":{\"853\":1}}],[\"命令行工具\",{\"0\":{\"335\":1}}],[\"命令行\",{\"0\":{\"326\":1}}],[\"命令行或网页\",{\"1\":{\"325\":1}}],[\"命令行用的是gitbash\",{\"1\":{\"296\":1}}],[\"命令行程序框架\",{\"1\":{\"122\":2}}],[\"命令行模式\",{\"1\":{\"18\":1}}],[\"命令\",{\"0\":{\"464\":1,\"966\":1},\"1\":{\"58\":1,\"456\":1,\"464\":1,\"486\":1,\"634\":1,\"638\":2,\"981\":4,\"985\":1,\"1000\":1,\"1188\":2}}],[\"团队技术能力强\",{\"1\":{\"116\":1}}],[\"团队规模较大\",{\"1\":{\"116\":1}}],[\"团队追求简单灵活\",{\"1\":{\"116\":1}}],[\"团队一般会给你讲讲项目相关的支持\",{\"1\":{\"58\":1}}],[\"团队开发\",{\"1\":{\"9\":1}}],[\"企业权限管理\",{\"1\":{\"1241\":1}}],[\"企业版有可视化\",{\"1\":{\"1057\":1}}],[\"企业版要收钱\",{\"1\":{\"43\":1}}],[\"企业级特性需要集成\",{\"1\":{\"113\":1}}],[\"企业中我们是如何开发的\",{\"1\":{\"58\":1}}],[\"指要转换的浮点数\",{\"1\":{\"1390\":1}}],[\"指的是位数\",{\"1\":{\"1390\":1}}],[\"指的是精度\",{\"1\":{\"1390\":1}}],[\"指的是格式化类型\",{\"1\":{\"1390\":1}}],[\"指的是在该命令执行的过程中\",{\"1\":{\"981\":1}}],[\"指的是在cgo中c调用go\",{\"1\":{\"300\":1}}],[\"指的linux中的用户\",{\"1\":{\"1130\":1}}],[\"指将上层\",{\"1\":{\"614\":1,\"686\":1}}],[\"指令\",{\"0\":{\"465\":1}}],[\"指定了谁可以对哪些资源执行什么操作\",{\"1\":{\"1252\":1}}],[\"指定了使用的cpu核数列表\",{\"1\":{\"475\":1}}],[\"指定一个容器启动时要运行的命令\",{\"1\":{\"1193\":2}}],[\"指定端口映射\",{\"1\":{\"1188\":1}}],[\"指定端口为33306\",{\"1\":{\"775\":1}}],[\"指定负载均衡器按照基于客户端ip的分配方式\",{\"1\":{\"1164\":1}}],[\"指定配置\",{\"1\":{\"1116\":1}}],[\"指定消息主题\",{\"1\":{\"1035\":1}}],[\"指定故障转移允许的毫秒数\",{\"1\":{\"1000\":1}}],[\"指定可以有多少个\",{\"1\":{\"1000\":1}}],[\"指定从节点的端口\",{\"1\":{\"994\":1}}],[\"指定主节点的ip和端口\",{\"1\":{\"994\":1}}],[\"指定主节点\",{\"1\":{\"993\":1}}],[\"指定的字段是否存在\",{\"1\":{\"972\":1}}],[\"指定包含其它的配置文件\",{\"1\":{\"965\":1}}],[\"指定在创建容器后\",{\"1\":{\"1193\":1}}],[\"指定在超过一定的数量或者最大的元素超过某一临界值时\",{\"1\":{\"965\":1}}],[\"指定在多长时间内\",{\"1\":{\"965\":1}}],[\"指定是否激活重置哈希\",{\"1\":{\"965\":1}}],[\"指定是否启用虚拟内存机制\",{\"1\":{\"965\":1}}],[\"指定是否在每次更新操作后进行日志记录\",{\"1\":{\"965\":1}}],[\"指定更新日志条件\",{\"1\":{\"965\":1}}],[\"指定更新日志文件名\",{\"1\":{\"965\":1}}],[\"指定redis最大内存限制\",{\"1\":{\"965\":1}}],[\"指定redis监听端口\",{\"1\":{\"965\":1}}],[\"指定本地数据库存放目录\",{\"1\":{\"965\":1}}],[\"指定本地数据库文件名\",{\"1\":{\"965\":1}}],[\"指定存储至本地数据库时是否压缩数据\",{\"1\":{\"965\":1,\"983\":1}}],[\"指定日志记录级别\",{\"1\":{\"965\":1}}],[\"指定索引名\",{\"1\":{\"754\":1}}],[\"指定前面声明的微博内容\",{\"1\":{\"746\":1}}],[\"指定基准测试运行的次数\",{\"1\":{\"630\":1}}],[\"指定运行某一个文件\",{\"1\":{\"503\":1}}],[\"指定要运行的基准测试\",{\"1\":{\"496\":1}}],[\"指定上述的统计文件的输出目录\",{\"1\":{\"469\":1}}],[\"指定编译后的二进制文件名称\",{\"1\":{\"469\":1}}],[\"指定替换的模块\",{\"1\":{\"465\":1}}],[\"指定使用的模块\",{\"1\":{\"465\":1}}],[\"指定go版本\",{\"1\":{\"465\":1}}],[\"指定哪些模块参与编译\",{\"1\":{\"463\":1}}],[\"指定子协程的数量\",{\"1\":{\"422\":1}}],[\"指向底层数组的起始位置\",{\"1\":{\"649\":1}}],[\"指向底层数组\",{\"1\":{\"635\":1}}],[\"指向同一底层数组的切片\",{\"1\":{\"633\":1}}],[\"指向同一个元素或指向的元素完全相等\",{\"1\":{\"379\":1}}],[\"指向指针的值\",{\"1\":{\"347\":1}}],[\"指向值的指针\",{\"1\":{\"347\":3}}],[\"指向某个tag\",{\"1\":{\"58\":1}}],[\"指针也可以理解为是一个容器\",{\"1\":{\"352\":1}}],[\"指针可能就成了c中常见的悬挂指针\",{\"1\":{\"310\":1}}],[\"指针存储的地址是否相等\",{\"1\":{\"294\":1}}],[\"指针存储的是变量num的地址\",{\"1\":{\"275\":1}}],[\"指针接收者的方法\",{\"1\":{\"515\":1}}],[\"指针接收者\",{\"0\":{\"287\":1},\"1\":{\"515\":1}}],[\"指针\",{\"0\":{\"271\":1,\"310\":1,\"360\":1},\"1\":{\"201\":1,\"202\":1,\"209\":1,\"221\":1,\"243\":1,\"294\":1,\"379\":1,\"513\":1,\"529\":1,\"649\":1,\"1443\":1}}],[\"指针缓存\",{\"1\":{\"127\":1}}],[\"指标缓存等的完整go缓存库\",{\"1\":{\"127\":1}}],[\"指出代码存在的缺陷或者修复\",{\"1\":{\"79\":1}}],[\"指数\",{\"1\":{\"53\":1}}],[\"仓库拉取镜像\",{\"1\":{\"1193\":1}}],[\"仓库命名空间\",{\"1\":{\"1193\":2}}],[\"仓库分为公开仓库\",{\"1\":{\"1183\":1}}],[\"仓库注册服务器上往往存放着多个仓库\",{\"1\":{\"1183\":1}}],[\"仓库是存储\",{\"1\":{\"1183\":1}}],[\"仓库\",{\"1\":{\"1182\":1,\"1183\":3,\"1185\":1,\"1187\":1,\"1231\":1}}],[\"仓库名\",{\"1\":{\"459\":1}}],[\"仓库名虽然没有什么特别限制\",{\"1\":{\"445\":1}}],[\"仓库简称\",{\"1\":{\"58\":1}}],[\"仓库中的文件\",{\"1\":{\"25\":1}}],[\"oeis\",{\"1\":{\"1345\":9}}],[\"owner角色\",{\"1\":{\"1263\":2}}],[\"owner继承\",{\"1\":{\"1263\":1}}],[\"owner\",{\"1\":{\"1261\":3,\"1262\":2,\"1263\":1,\"1265\":7,\"1266\":6}}],[\"obj\",{\"1\":{\"1244\":4,\"1245\":4,\"1251\":1,\"1252\":2,\"1253\":2,\"1256\":6,\"1260\":4,\"1264\":4,\"1283\":5}}],[\"objective\",{\"1\":{\"1238\":1}}],[\"objectidfromhex\",{\"1\":{\"882\":1,\"883\":1,\"884\":1}}],[\"objectids4\",{\"1\":{\"884\":2}}],[\"objectids3\",{\"1\":{\"884\":2}}],[\"objectids2\",{\"1\":{\"884\":2}}],[\"objectids1\",{\"1\":{\"884\":2}}],[\"objectids\",{\"1\":{\"881\":4,\"884\":2}}],[\"objectid\",{\"1\":{\"835\":3,\"858\":1,\"859\":1,\"881\":2,\"884\":2}}],[\"object\",{\"0\":{\"726\":1},\"1\":{\"639\":1,\"863\":2}}],[\"objects\",{\"1\":{\"327\":2,\"445\":4,\"449\":4}}],[\"octet\",{\"1\":{\"1123\":1,\"1130\":1,\"1131\":1,\"1158\":1}}],[\"ocrserver\",{\"1\":{\"142\":1}}],[\"overlay\",{\"1\":{\"1202\":1}}],[\"overflow等联系方式联系开发者\",{\"1\":{\"1072\":1}}],[\"overslept\",{\"1\":{\"470\":1}}],[\"oversight\",{\"1\":{\"137\":1}}],[\"o模型\",{\"1\":{\"959\":1}}],[\"o多路复用机制多路复用机制是一种基于非阻塞i\",{\"1\":{\"959\":1}}],[\"o的读写也不再阻塞\",{\"1\":{\"959\":1}}],[\"o的次数\",{\"1\":{\"805\":1}}],[\"o的消耗\",{\"1\":{\"805\":1}}],[\"o次数评价索引结构的优劣\",{\"1\":{\"805\":1}}],[\"o操作可以得到很多数据\",{\"1\":{\"805\":1}}],[\"o操作\",{\"1\":{\"804\":1}}],[\"omitkey\",{\"1\":{\"1303\":1}}],[\"omitempty\",{\"1\":{\"746\":5,\"880\":5}}],[\"ombdisnwtfiuyjnf9xnpbw\",{\"1\":{\"702\":1}}],[\"oom\",{\"1\":{\"644\":2,\"776\":1}}],[\"oop\",{\"1\":{\"165\":4}}],[\"oddch\",{\"1\":{\"545\":3}}],[\"ok为false\",{\"1\":{\"369\":1}}],[\"ok\",{\"1\":{\"339\":1,\"362\":2,\"367\":2,\"369\":3,\"386\":2,\"393\":2,\"415\":1,\"418\":4,\"420\":2,\"421\":24,\"424\":2,\"425\":1,\"436\":1,\"447\":1,\"463\":3,\"468\":5,\"470\":1,\"471\":1,\"472\":1,\"473\":3,\"475\":1,\"476\":2,\"477\":3,\"486\":4,\"487\":2,\"493\":1,\"494\":1,\"498\":1,\"505\":1,\"516\":1,\"546\":1,\"702\":2,\"704\":1,\"705\":1,\"706\":1,\"707\":1,\"710\":1,\"711\":1,\"712\":1,\"756\":2,\"822\":1,\"963\":1,\"981\":1,\"993\":2,\"1010\":2,\"1133\":1,\"1164\":6,\"1245\":2}}],[\"online\",{\"1\":{\"1223\":2}}],[\"only=no\",{\"1\":{\"1219\":1}}],[\"only\",{\"1\":{\"419\":1,\"459\":1,\"651\":1,\"985\":1,\"993\":1,\"994\":1,\"1133\":1}}],[\"onboot=yes\",{\"1\":{\"1219\":1}}],[\"onbuild\",{\"1\":{\"1193\":1}}],[\"onsale\",{\"1\":{\"1082\":1}}],[\"onconnect\",{\"1\":{\"911\":1}}],[\"once的实现相当简单\",{\"1\":{\"434\":1}}],[\"once保证了在并发条件下指定操作只会执行一次\",{\"1\":{\"434\":1}}],[\"once译为一次\",{\"1\":{\"434\":1}}],[\"once要解决的问题\",{\"1\":{\"434\":1}}],[\"once\",{\"0\":{\"434\":1},\"1\":{\"434\":5,\"1010\":2}}],[\"one\",{\"1\":{\"725\":1,\"766\":1,\"835\":4,\"881\":2,\"882\":4,\"883\":4,\"990\":1,\"993\":2,\"1154\":1,\"1197\":2}}],[\"oneline\",{\"1\":{\"449\":1}}],[\"on\",{\"1\":{\"328\":1,\"453\":1,\"469\":1,\"653\":1,\"717\":5,\"722\":1,\"738\":1,\"766\":1,\"810\":5,\"814\":2,\"815\":1,\"817\":1,\"818\":1,\"982\":1,\"988\":1,\"1003\":1,\"1123\":2,\"1130\":3,\"1131\":3,\"1133\":1,\"1158\":3,\"1197\":2,\"1225\":2}}],[\"onnx\",{\"1\":{\"142\":2}}],[\"out文件\",{\"1\":{\"1033\":1}}],[\"outputpaths\",{\"1\":{\"1302\":3,\"1303\":1}}],[\"outputdir\",{\"1\":{\"469\":1}}],[\"output\",{\"1\":{\"326\":2,\"468\":3,\"470\":7,\"501\":1,\"502\":3,\"505\":2,\"651\":1,\"1303\":5,\"1304\":1}}],[\"outputs\",{\"1\":{\"326\":2}}],[\"out\",{\"1\":{\"236\":2,\"323\":2,\"328\":3,\"364\":1,\"370\":1,\"469\":6,\"497\":3,\"724\":1,\"741\":1,\"768\":1,\"1017\":1,\"1165\":2,\"1302\":1,\"1313\":2,\"1314\":2,\"1341\":1,\"1417\":8,\"1419\":2,\"1425\":2}}],[\"outer\",{\"1\":{\"235\":2}}],[\"outboxer是一个实现库模式的go库\",{\"1\":{\"128\":1}}],[\"outboxer\",{\"1\":{\"128\":1}}],[\"o与低级别的主板设备接口\",{\"1\":{\"140\":1}}],[\"oak\",{\"1\":{\"134\":1}}],[\"official\",{\"1\":{\"828\":2}}],[\"office\",{\"1\":{\"132\":1}}],[\"off\",{\"1\":{\"401\":1,\"402\":1,\"469\":1,\"722\":1,\"1133\":4}}],[\"offsetnewest\",{\"1\":{\"1036\":1,\"1047\":2}}],[\"offsets\",{\"1\":{\"1029\":1,\"1047\":2}}],[\"offsetof\",{\"0\":{\"1441\":1},\"1\":{\"513\":1,\"1441\":3,\"1443\":2}}],[\"offset\",{\"1\":{\"367\":2,\"401\":1,\"402\":4,\"403\":2,\"706\":14,\"949\":1,\"970\":4,\"974\":1,\"1036\":2,\"1047\":7,\"1443\":1}}],[\"of\",{\"1\":{\"253\":1,\"287\":1,\"289\":6,\"317\":1,\"325\":1,\"326\":2,\"412\":2,\"419\":1,\"441\":2,\"704\":4,\"705\":2,\"728\":1,\"729\":3,\"768\":4,\"892\":1,\"965\":1,\"1047\":1,\"1078\":1,\"1163\":1,\"1194\":1,\"1195\":2,\"1196\":1,\"1197\":3,\"1225\":2,\"1328\":1,\"1411\":2}}],[\"ofxgo\",{\"1\":{\"133\":1}}],[\"opt\",{\"1\":{\"822\":5,\"981\":1}}],[\"optionfunc\",{\"1\":{\"1302\":3}}],[\"option的实现\",{\"1\":{\"1302\":1}}],[\"option是关于一些配置的开关及应用\",{\"1\":{\"1302\":1}}],[\"optional\",{\"1\":{\"721\":1}}],[\"option\",{\"1\":{\"269\":2,\"513\":2,\"1302\":2,\"1306\":2,\"1321\":1}}],[\"options\",{\"1\":{\"77\":1,\"269\":2,\"326\":1,\"513\":2,\"830\":2,\"834\":1,\"910\":1,\"911\":2,\"912\":1,\"1197\":2,\"1198\":1,\"1306\":8}}],[\"op表示每一次循环内存分配的次数\",{\"1\":{\"475\":1}}],[\"op表示每一次循环所分配内存的字节大小\",{\"1\":{\"475\":1}}],[\"op代表了每一次循环所消耗的时间\",{\"1\":{\"475\":1}}],[\"op\",{\"1\":{\"314\":4,\"475\":36,\"476\":188,\"498\":1,\"1417\":2}}],[\"opqrst\",{\"1\":{\"252\":1}}],[\"operation\",{\"1\":{\"209\":1,\"276\":1,\"381\":1,\"383\":1,\"419\":1}}],[\"operator\",{\"1\":{\"179\":1,\"885\":1}}],[\"openresty\",{\"1\":{\"1238\":1}}],[\"openssl\",{\"1\":{\"1112\":2,\"1132\":1,\"1173\":1}}],[\"openstreetmap\",{\"1\":{\"135\":1}}],[\"openai\",{\"1\":{\"655\":3}}],[\"opentelemetry\",{\"1\":{\"460\":1,\"1078\":1}}],[\"opencensus\",{\"1\":{\"460\":1}}],[\"opencv\",{\"1\":{\"139\":1}}],[\"openfile\",{\"1\":{\"400\":3,\"401\":2,\"402\":3,\"403\":4,\"410\":1}}],[\"open函数\",{\"1\":{\"891\":1}}],[\"open函数返回值一个文件指针和一个错误\",{\"1\":{\"400\":1}}],[\"open函数有两个返回值\",{\"1\":{\"207\":1}}],[\"opening\",{\"1\":{\"328\":1}}],[\"open\",{\"1\":{\"207\":2,\"331\":1,\"388\":2,\"400\":5,\"408\":1,\"410\":1,\"514\":1,\"633\":1,\"891\":2,\"893\":2,\"1047\":1}}],[\"opc\",{\"1\":{\"132\":2}}],[\"ot\",{\"1\":{\"477\":1}}],[\"other\",{\"1\":{\"429\":1}}],[\"otto\",{\"1\":{\"130\":1}}],[\"ot进行分布式同步\",{\"1\":{\"128\":1}}],[\"oto\",{\"1\":{\"126\":1}}],[\"otokaze\",{\"1\":{\"122\":1}}],[\"o库的绑定\",{\"1\":{\"126\":1}}],[\"o连接的对象可导出的方法的访问\",{\"1\":{\"124\":1}}],[\"o函数\",{\"1\":{\"124\":1}}],[\"o对象文件的访问\",{\"1\":{\"124\":1}}],[\"o原语的基本接口\",{\"1\":{\"124\":1}}],[\"olleh\",{\"1\":{\"477\":1}}],[\"oldnew\",{\"1\":{\"1412\":1}}],[\"old指要被替换的部分\",{\"1\":{\"1407\":1}}],[\"old\",{\"1\":{\"439\":1,\"440\":1,\"476\":5,\"970\":1,\"993\":1,\"1407\":3}}],[\"oldpath\",{\"1\":{\"404\":1}}],[\"oldcap+3\",{\"1\":{\"244\":1}}],[\"oldcap+\",{\"1\":{\"244\":1}}],[\"oldcap\",{\"1\":{\"244\":1}}],[\"olekukonko\",{\"1\":{\"122\":1}}],[\"olivere\",{\"1\":{\"122\":1,\"744\":3,\"746\":1,\"756\":1,\"766\":2,\"771\":1}}],[\"oss\",{\"1\":{\"639\":1}}],[\"os包下提供了以下常量以供使用\",{\"1\":{\"400\":1}}],[\"os库\",{\"1\":{\"399\":1}}],[\"osx库\",{\"1\":{\"138\":1}}],[\"osgb36\",{\"1\":{\"135\":1}}],[\"osm\",{\"1\":{\"135\":1}}],[\"os\",{\"1\":{\"121\":1,\"124\":2,\"138\":1,\"207\":1,\"215\":4,\"217\":2,\"220\":2,\"223\":2,\"225\":1,\"226\":1,\"279\":1,\"280\":1,\"323\":6,\"388\":2,\"398\":1,\"400\":7,\"401\":8,\"402\":7,\"403\":11,\"404\":1,\"405\":2,\"406\":2,\"408\":7,\"409\":1,\"410\":6,\"446\":3,\"504\":1,\"514\":1,\"633\":2,\"756\":3,\"766\":1,\"771\":2,\"1047\":2,\"1304\":1,\"1308\":4,\"1315\":1,\"1415\":2,\"1417\":4,\"1419\":1,\"1425\":1,\"1426\":1,\"1428\":3}}],[\"oschina\",{\"1\":{\"43\":1}}],[\"ori\",{\"1\":{\"1396\":4}}],[\"oriented\",{\"1\":{\"1018\":1}}],[\"original\",{\"1\":{\"393\":3}}],[\"originalerr\",{\"1\":{\"393\":4}}],[\"origin\",{\"1\":{\"58\":2,\"333\":1,\"403\":6,\"449\":2,\"768\":1,\"769\":1,\"770\":1}}],[\"oracle\",{\"1\":{\"890\":1,\"1314\":2}}],[\"oracle和postgresql\",{\"1\":{\"876\":1}}],[\"or与\",{\"1\":{\"861\":1}}],[\"orderlist有read权限\",{\"1\":{\"1244\":1}}],[\"orderlist\",{\"1\":{\"1244\":1,\"1245\":1}}],[\"order有read权限\",{\"1\":{\"1244\":1}}],[\"ordered\",{\"1\":{\"957\":1}}],[\"order等\",{\"1\":{\"794\":2}}],[\"order\",{\"1\":{\"653\":2,\"794\":1,\"796\":1,\"814\":1,\"819\":8,\"1244\":3,\"1245\":2}}],[\"orders\",{\"1\":{\"653\":2}}],[\"orderbook\",{\"1\":{\"133\":1}}],[\"or\",{\"1\":{\"300\":1,\"307\":1,\"344\":2,\"454\":1,\"641\":1,\"717\":2,\"738\":1,\"742\":1,\"765\":1,\"818\":2,\"861\":1,\"1133\":1,\"1163\":1,\"1196\":2,\"1197\":2,\"1198\":1,\"1343\":1,\"1420\":2,\"1443\":1}}],[\"org\",{\"1\":{\"122\":2,\"145\":1,\"451\":1,\"453\":12,\"454\":2,\"459\":16,\"460\":6,\"476\":1,\"502\":1,\"829\":1,\"830\":3,\"878\":1,\"1028\":3,\"1109\":1,\"1111\":1,\"1162\":1,\"1163\":1,\"1164\":1,\"1166\":3,\"1299\":1,\"1300\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1338\":2,\"1345\":9}}],[\"orm支持\",{\"1\":{\"111\":1}}],[\"o\",{\"1\":{\"84\":1,\"221\":4,\"258\":4,\"297\":1,\"299\":1,\"312\":4,\"313\":3,\"326\":1,\"390\":1,\"400\":19,\"401\":4,\"402\":15,\"403\":8,\"410\":3,\"434\":11,\"469\":1,\"503\":1,\"636\":1,\"638\":1,\"639\":2,\"645\":6,\"649\":1,\"651\":1,\"794\":1,\"800\":2,\"1220\":1,\"1231\":1,\"1407\":3}}],[\"默认debug级别\",{\"1\":{\"1305\":1}}],[\"默认console\",{\"1\":{\"1303\":1}}],[\"默认在8080\",{\"1\":{\"1275\":1}}],[\"默认支持内存存储\",{\"1\":{\"1239\":1}}],[\"默认就会分配一对网卡\",{\"1\":{\"1195\":1}}],[\"默认latest\",{\"1\":{\"1187\":1}}],[\"默认方式\",{\"1\":{\"1160\":1}}],[\"默认匹配规则\",{\"0\":{\"1141\":1}}],[\"默认情况是返回\",{\"1\":{\"1158\":1}}],[\"默认情况是\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"默认情况下不会根据年龄删除旧日志文件\",{\"1\":{\"1307\":1}}],[\"默认情况下禁用\",{\"1\":{\"1307\":1}}],[\"默认情况下是\",{\"1\":{\"813\":1,\"1163\":1}}],[\"默认情况下是不会输出堆栈的\",{\"1\":{\"393\":1}}],[\"默认情况下\",{\"1\":{\"495\":1,\"496\":1,\"734\":1,\"982\":1,\"1126\":1,\"1157\":1}}],[\"默认设置8个分区\",{\"1\":{\"1047\":1}}],[\"默认配置\",{\"1\":{\"1116\":1}}],[\"默认配置都是1\",{\"1\":{\"1024\":1}}],[\"默认配置项\",{\"1\":{\"985\":1}}],[\"默认地址是\",{\"1\":{\"1010\":1}}],[\"默认时间为\",{\"1\":{\"1000\":1}}],[\"默认无限制\",{\"1\":{\"965\":1}}],[\"默认关闭\",{\"1\":{\"965\":1}}],[\"默认数据库为0\",{\"1\":{\"965\":1}}],[\"默认端口为6379\",{\"1\":{\"965\":1}}],[\"默认不会关闭过时的连接\",{\"1\":{\"911\":1}}],[\"默认不会加锁\",{\"1\":{\"656\":1}}],[\"默认连接池大小等于\",{\"1\":{\"911\":1}}],[\"默认0\",{\"1\":{\"911\":1}}],[\"默认是不执行压缩\",{\"1\":{\"1307\":1}}],[\"默认是使用\",{\"1\":{\"1307\":1}}],[\"默认是保留所有旧的日志文件\",{\"1\":{\"1307\":1}}],[\"默认是65秒\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"默认是8600\",{\"1\":{\"1078\":1}}],[\"默认是1gb\",{\"1\":{\"1029\":1}}],[\"默认是等待\",{\"1\":{\"911\":1}}],[\"默认是0\",{\"1\":{\"911\":1}}],[\"默认是\",{\"1\":{\"911\":6,\"981\":1,\"1130\":1,\"1131\":1,\"1163\":1}}],[\"默认是sum\",{\"1\":{\"460\":1}}],[\"默认每页显示20条记录\",{\"1\":{\"861\":1}}],[\"默认false表示删除多条\",{\"1\":{\"860\":1}}],[\"默认false只更新找到的第⼀条记录\",{\"1\":{\"859\":1}}],[\"默认一次新手20条\",{\"1\":{\"855\":1}}],[\"默认启用\",{\"1\":{\"852\":1}}],[\"默认的就不用加仓库了\",{\"1\":{\"1193\":1}}],[\"默认的数据库为\",{\"1\":{\"845\":1}}],[\"默认的索引结构\",{\"1\":{\"635\":1}}],[\"默认格式是statement\",{\"1\":{\"822\":3}}],[\"默认使用\",{\"1\":{\"649\":1,\"979\":1}}],[\"默认会根据cpu核心数决定p和m的数量\",{\"1\":{\"542\":1}}],[\"默认为10s\",{\"1\":{\"1161\":1}}],[\"默认为开启\",{\"1\":{\"965\":2}}],[\"默认为appendonly\",{\"1\":{\"965\":1}}],[\"默认为no\",{\"1\":{\"965\":1}}],[\"默认为yes\",{\"1\":{\"965\":1,\"983\":1}}],[\"默认为标准输出\",{\"1\":{\"965\":1}}],[\"默认为verbose\",{\"1\":{\"965\":1}}],[\"默认为\",{\"1\":{\"486\":1,\"488\":1,\"852\":1,\"1000\":3,\"1130\":1,\"1307\":1}}],[\"默认为go\",{\"1\":{\"469\":1}}],[\"默认种子为系统时间\",{\"1\":{\"469\":1}}],[\"默认1次\",{\"1\":{\"469\":1}}],[\"默认值\",{\"1\":{\"965\":1,\"1197\":1}}],[\"默认值是yes\",{\"1\":{\"982\":1}}],[\"默认值是\",{\"1\":{\"776\":1,\"1163\":2}}],[\"默认值为4\",{\"1\":{\"965\":1}}],[\"默认值为0\",{\"1\":{\"965\":1}}],[\"默认值为\",{\"1\":{\"965\":1}}],[\"默认值为no\",{\"1\":{\"965\":1}}],[\"默认值为nil\",{\"1\":{\"243\":1}}],[\"默认值为dump\",{\"1\":{\"965\":1}}],[\"默认值为零值\",{\"1\":{\"654\":1}}],[\"默认值通常是\",{\"1\":{\"639\":1}}],[\"默认值处理\",{\"1\":{\"269\":1}}],[\"默认缓冲区大小是4kb\",{\"1\":{\"220\":1}}],[\"默认标题\",{\"1\":{\"62\":1}}],[\"默认\",{\"1\":{\"58\":1,\"849\":1,\"911\":1,\"987\":1}}],[\"把请求转发给连接数较少的后端服务器\",{\"1\":{\"1167\":2}}],[\"把goods\",{\"1\":{\"1081\":1}}],[\"把从节点8008加入到集群中\",{\"1\":{\"1010\":1}}],[\"把\",{\"1\":{\"986\":1,\"1087\":1}}],[\"把no改为\",{\"1\":{\"986\":1}}],[\"把所有查询出来的数据注入到结构体中\",{\"1\":{\"884\":2}}],[\"把bin目录的内容复制到mongodb的安装目录下的bin目录\",{\"1\":{\"853\":1}}],[\"把autocommit设置成0\",{\"1\":{\"820\":1}}],[\"把结果放在临时表当中\",{\"1\":{\"814\":1}}],[\"把字符串的id转换成objectid\",{\"1\":{\"882\":1,\"883\":1,\"884\":2}}],[\"把字符串\",{\"1\":{\"778\":1}}],[\"把elasticsearch\",{\"1\":{\"767\":1}}],[\"把es学会了\",{\"1\":{\"714\":1}}],[\"把它们一个个封装起来\",{\"1\":{\"654\":1}}],[\"把6个任务扔进去\",{\"1\":{\"593\":1,\"665\":1}}],[\"把数据库从mongodb迁移到mysql的原因\",{\"1\":{\"576\":1,\"648\":1}}],[\"把内存分配控制的这么细\",{\"1\":{\"320\":1}}],[\"把动态库放到exe的同级目录下\",{\"1\":{\"312\":1}}],[\"把某个版本的某个分支合并到当前工作区\",{\"1\":{\"58\":1}}],[\"把本地代码推送到远端\",{\"0\":{\"46\":1}}],[\"使它们的负载大致相同\",{\"1\":{\"1167\":1}}],[\"使它们可以独立变化\",{\"1\":{\"654\":1}}],[\"使每个url定向到同一个后端服务器\",{\"1\":{\"1166\":1}}],[\"使其适用于我们的应用\",{\"1\":{\"1165\":1}}],[\"使其成为一种广泛应用于各种领域的数据库\",{\"1\":{\"843\":1}}],[\"使多个对象有机会处理请求\",{\"1\":{\"654\":1}}],[\"使得路由的查找非常高效\",{\"1\":{\"1284\":1}}],[\"使得两个不兼容的接口能够合作\",{\"1\":{\"654\":1}}],[\"使得go能够在不同机器和线程上高效地运行\",{\"1\":{\"654\":1}}],[\"使得接口支持类型参数化\",{\"1\":{\"635\":1}}],[\"使得并发操作变得更加容易理解和维护\",{\"1\":{\"151\":1}}],[\"使⽤⼀个内部⼀致性hash算法来选择合适的后端节点\",{\"1\":{\"1165\":1}}],[\"使⽤以下类型\",{\"1\":{\"524\":1}}],[\"使⽤什么数据类型\",{\"0\":{\"524\":1}}],[\"使⽤\",{\"0\":{\"522\":1}}],[\"使执行流程可中断的灵活机制\",{\"1\":{\"137\":1}}],[\"使输出信息更加简洁\",{\"1\":{\"55\":1}}],[\"使用flag\",{\"1\":{\"1325\":1}}],[\"使用fmt\",{\"1\":{\"221\":1}}],[\"使用本地时间\",{\"1\":{\"1304\":1}}],[\"使用路径匹配实现基于\",{\"1\":{\"1241\":1}}],[\"使用kubectl\",{\"1\":{\"1235\":1}}],[\"使用kafka代替日志聚合\",{\"1\":{\"1019\":1}}],[\"使用virtualbox创建一个虚拟机然后指定刚刚下载的为驱动\",{\"1\":{\"1218\":1}}],[\"使用virtualbox安装centos\",{\"1\":{\"1217\":1}}],[\"使用虚拟机\",{\"1\":{\"1217\":1}}],[\"使用虚函数\",{\"1\":{\"637\":1}}],[\"使用yaml文件进行安装\",{\"1\":{\"1228\":1}}],[\"使用yaml文件做一些配置化方便一些\",{\"1\":{\"1215\":1}}],[\"使用yes启用守护进程\",{\"1\":{\"965\":1}}],[\"使用官方\",{\"1\":{\"1193\":1}}],[\"使用定时任务\",{\"1\":{\"1175\":1}}],[\"使用定时任务定期从数据库同步数据到\",{\"1\":{\"641\":1}}],[\"使用服务器\",{\"1\":{\"1165\":2}}],[\"使用后迁移其他网关成本怎么样\",{\"1\":{\"1072\":1}}],[\"使用流量网关对公网入口流量进行转发到业务网关\",{\"1\":{\"1072\":1}}],[\"使用pubsub\",{\"1\":{\"996\":1}}],[\"使用ping\",{\"1\":{\"968\":1}}],[\"使用文本格式还原数据\",{\"1\":{\"988\":1}}],[\"使用客户端连接服务\",{\"1\":{\"964\":1}}],[\"使用客户端流模式\",{\"1\":{\"620\":1,\"692\":1}}],[\"使用默认端口\",{\"1\":{\"963\":1}}],[\"使用默认db\",{\"1\":{\"910\":1,\"912\":1}}],[\"使用单线程简单\",{\"1\":{\"959\":1}}],[\"使用结构化查询语言\",{\"1\":{\"904\":1}}],[\"使用结构体和接口来代替类的功能\",{\"1\":{\"637\":1}}],[\"使用docker可以大幅简化部署软件的流程\",{\"1\":{\"1180\":1}}],[\"使用docker\",{\"1\":{\"822\":1}}],[\"使用docker安装准备两台mysql服务器\",{\"1\":{\"822\":1}}],[\"使用department表中数据作为外层循环\",{\"1\":{\"821\":1}}],[\"使用dns的go库\",{\"1\":{\"145\":1}}],[\"使用in\",{\"1\":{\"821\":1}}],[\"使用id限定方案\",{\"1\":{\"820\":2}}],[\"使用存储过程导入数据\",{\"1\":{\"820\":1}}],[\"使用前面所说的伪哈希索引是不行的\",{\"1\":{\"815\":1}}],[\"使用前还是要卸载node\",{\"1\":{\"76\":1}}],[\"使用方法\",{\"1\":{\"814\":1}}],[\"使用employee表中数据作为外层循环\",{\"1\":{\"821\":1}}],[\"使用exits\",{\"1\":{\"821\":1}}],[\"使用explain关键字\",{\"1\":{\"814\":2}}],[\"使用efl呈现\",{\"1\":{\"138\":1}}],[\"使用hash结构存储索引\",{\"1\":{\"807\":1}}],[\"使用索引时\",{\"1\":{\"806\":1}}],[\"使用索引可以帮助用户解决大多数的sql性能问题\",{\"1\":{\"800\":1}}],[\"使用索引下推\",{\"1\":{\"614\":1,\"686\":1}}],[\"使用小写格式\",{\"1\":{\"795\":1}}],[\"使用主题\",{\"1\":{\"1057\":1}}],[\"使用主鍵和外鍵越多越好\",{\"1\":{\"793\":1}}],[\"使用主键id分页\",{\"1\":{\"653\":1}}],[\"使用bigint\",{\"1\":{\"791\":1}}],[\"使用插件的方式安装\",{\"1\":{\"740\":1}}],[\"使用每个字段的数据结构来组装和返回搜索结果的能力是elasticsearch如此快速的原因\",{\"1\":{\"734\":1}}],[\"使用较少\",{\"1\":{\"731\":1}}],[\"使用日期格式示例\",{\"1\":{\"721\":1}}],[\"使用注意事项\",{\"1\":{\"720\":1}}],[\"使用函数elasticsearch\",{\"1\":{\"702\":1}}],[\"使用率过高\",{\"1\":{\"655\":1}}],[\"使用多个简单的对象一步步构建成一个复杂的对象\",{\"1\":{\"654\":1}}],[\"使用多线程统计一个文件中不同的词出现的次数\",{\"1\":{\"597\":1,\"669\":1}}],[\"使用append扩展切片\",{\"1\":{\"654\":1}}],[\"使用acme为我们每天检查证书是否过期\",{\"1\":{\"84\":1}}],[\"使用唯一索引\",{\"1\":{\"653\":1}}],[\"使用乐观锁可能会频繁触发重试机制\",{\"1\":{\"653\":1}}],[\"使用看门狗机制\",{\"1\":{\"653\":1}}],[\"使用滑动窗口进行流量控制\",{\"1\":{\"651\":1}}],[\"使用三次握手建立连接\",{\"1\":{\"651\":1}}],[\"使用通道进行同步\",{\"1\":{\"651\":1}}],[\"使用异或运算的特性\",{\"1\":{\"645\":1}}],[\"使用双端队列\",{\"1\":{\"645\":1}}],[\"使用动态规划来解决\",{\"1\":{\"645\":1}}],[\"使用动态数组实现\",{\"1\":{\"638\":1}}],[\"使用消息队列来确保数据库和缓存的同步更新\",{\"1\":{\"644\":1}}],[\"使用数据库账号只能在一个db下使用\",{\"1\":{\"794\":1}}],[\"使用数据库的\",{\"1\":{\"644\":1}}],[\"使用数组和链表\",{\"1\":{\"641\":1}}],[\"使用数组\",{\"1\":{\"638\":1}}],[\"使用逻辑过期解决缓存击穿问题\",{\"1\":{\"641\":1}}],[\"使用邮箱或手机号注册\",{\"1\":{\"641\":1}}],[\"使用一个索引来选择行\",{\"1\":{\"814\":1}}],[\"使用一个有缓冲区的channel来控制并发量\",{\"1\":{\"654\":1}}],[\"使用一个表即可实现多层级评论\",{\"1\":{\"638\":1}}],[\"使用一行代码获取json值\",{\"1\":{\"141\":1}}],[\"使用懒汉模式\",{\"1\":{\"637\":1}}],[\"使用饿汉模式\",{\"1\":{\"637\":1}}],[\"使用预热策略\",{\"1\":{\"636\":1}}],[\"使用互斥锁\",{\"1\":{\"636\":1}}],[\"使用互斥锁可以非常完美的解决上述问题\",{\"1\":{\"430\":1}}],[\"使用以下几种策略\",{\"1\":{\"636\":1}}],[\"使用哈希函数将键映射到桶中\",{\"1\":{\"634\":1}}],[\"使用合适的消费者提交策略\",{\"1\":{\"634\":1}}],[\"使用命令\",{\"1\":{\"1010\":1}}],[\"使用命令执行基准测试\",{\"1\":{\"630\":1}}],[\"使用命令进行逃逸分析\",{\"1\":{\"549\":1}}],[\"使用null作为条件查询问题\",{\"1\":{\"610\":1,\"682\":1}}],[\"使用nvm命令下载并使用node\",{\"1\":{\"76\":1}}],[\"使用二进制数组来保存视频\",{\"1\":{\"593\":1,\"665\":1}}],[\"使用jwt要实现一个状态只能一个设备登录\",{\"1\":{\"592\":1,\"664\":1}}],[\"使用线程池有什么好处\",{\"1\":{\"590\":1,\"662\":1}}],[\"使用过期时间+自动续期\",{\"1\":{\"562\":1,\"634\":2}}],[\"使用分布式存储方案\",{\"1\":{\"644\":1}}],[\"使用分布式锁\",{\"1\":{\"639\":1}}],[\"使用分布式锁的过程中应用挂了\",{\"1\":{\"562\":1,\"634\":2}}],[\"使用分段锁技术\",{\"1\":{\"641\":1}}],[\"使用分支意味着你可以把你的工作从开发主线上分离开来\",{\"1\":{\"29\":1}}],[\"使用协程\",{\"1\":{\"542\":1}}],[\"使用只要知道是可变长数组\",{\"1\":{\"511\":1}}],[\"使用反引号\",{\"1\":{\"510\":1}}],[\"使用场景之多\",{\"1\":{\"1068\":1}}],[\"使用场景\",{\"1\":{\"503\":1,\"645\":1,\"651\":1}}],[\"使用了类似于\",{\"1\":{\"1284\":1}}],[\"使用了like\",{\"1\":{\"817\":1}}],[\"使用了连接缓存\",{\"1\":{\"814\":1}}],[\"使用了临时表\",{\"1\":{\"814\":1}}],[\"使用了临时表保存中间结果\",{\"1\":{\"814\":1}}],[\"使用了\",{\"1\":{\"502\":1}}],[\"使用order\",{\"1\":{\"819\":1}}],[\"使用or连接索引失效\",{\"1\":{\"818\":1}}],[\"使用output注释来检测输出\",{\"1\":{\"470\":1}}],[\"使用opencv\",{\"1\":{\"139\":1}}],[\"使用xprog运行测试\",{\"1\":{\"469\":1}}],[\"使用uri建立连接\",{\"1\":{\"830\":1}}],[\"使用union\",{\"1\":{\"816\":1}}],[\"使用unsafe包转两者的底层数据类型\",{\"1\":{\"537\":1}}],[\"使用unsafe\",{\"1\":{\"353\":1}}],[\"使用use指令\",{\"1\":{\"463\":1}}],[\"使用slicedata的例子如下\",{\"1\":{\"1445\":1}}],[\"使用start\",{\"1\":{\"822\":1,\"823\":1}}],[\"使用struct结构插入一条es文档数据\",{\"1\":{\"746\":1}}],[\"使用strings\",{\"1\":{\"475\":1}}],[\"使用shell统计文件中top3的ip地址\",{\"1\":{\"601\":1,\"673\":1}}],[\"使用shutdown\",{\"1\":{\"573\":1,\"645\":1}}],[\"使用sync\",{\"1\":{\"436\":1}}],[\"使用smtp保持活动状态和两个超时发送电子邮件的非常简单的程序包\",{\"1\":{\"129\":1}}],[\"使用完毕后释放\",{\"1\":{\"435\":1}}],[\"使用完毕后记得使用free释放内存\",{\"1\":{\"303\":1}}],[\"使用对象\",{\"1\":{\"435\":1}}],[\"使用它可以很轻易的实现等待一组协程的效果\",{\"1\":{\"422\":1}}],[\"使用示例\",{\"1\":{\"717\":1,\"718\":1,\"719\":1,\"720\":1,\"721\":1,\"723\":1}}],[\"使用示例如下\",{\"1\":{\"397\":1,\"403\":2,\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1}}],[\"使用示例命令行客户端\",{\"1\":{\"133\":1}}],[\"使用例子如下\",{\"1\":{\"395\":1,\"401\":2,\"402\":2,\"1447\":1}}],[\"使用时候指定类型\",{\"1\":{\"516\":1}}],[\"使用时\",{\"1\":{\"392\":1}}],[\"使用类型别名后看起来会简洁一些\",{\"1\":{\"384\":1}}],[\"使用类型别名后的例子如下\",{\"1\":{\"384\":1}}],[\"使用threadlocal\",{\"1\":{\"592\":1,\"664\":1}}],[\"使用type\",{\"1\":{\"352\":1}}],[\"使用tesseract\",{\"1\":{\"142\":1}}],[\"使用result\",{\"1\":{\"630\":1}}],[\"使用redis防止超卖的流程是怎样的\",{\"1\":{\"592\":1,\"664\":1}}],[\"使用redis做性能优化具体是怎么做的\",{\"1\":{\"572\":1,\"644\":1}}],[\"使用redis的简化分布式锁定实现\",{\"1\":{\"128\":1}}],[\"使用reflect\",{\"1\":{\"350\":1,\"357\":1}}],[\"使用~符号\",{\"1\":{\"340\":1}}],[\"使用起来十分的简单\",{\"1\":{\"405\":1,\"436\":1}}],[\"使用起来十分简单\",{\"1\":{\"317\":1}}],[\"使用起来如下\",{\"1\":{\"344\":1}}],[\"使用起重机a\",{\"1\":{\"293\":1}}],[\"使用client创建一个新的文档\",{\"1\":{\"746\":1}}],[\"使用close函数对其进行关闭操作会导致panic`\",{\"1\":{\"418\":1}}],[\"使用copy函数解决浅拷贝\",{\"1\":{\"511\":1}}],[\"使用convertibleto方法可以判断一个类型是否可以被转换为另一个指定的类型\",{\"1\":{\"356\":1}}],[\"使用c\",{\"1\":{\"308\":1}}],[\"使用cgo确实可以带来好处\",{\"1\":{\"314\":1}}],[\"使用cgo还有以下缺点\",{\"1\":{\"314\":1}}],[\"使用cgo导入静态链接库时\",{\"1\":{\"313\":1}}],[\"使用cgo\",{\"1\":{\"126\":1}}],[\"使用技术b\",{\"1\":{\"293\":3}}],[\"使用技术a\",{\"1\":{\"293\":3}}],[\"使用具名返回值时\",{\"1\":{\"280\":1}}],[\"使用空格进行分隔\",{\"1\":{\"272\":1}}],[\"使用内置函数delete\",{\"1\":{\"512\":1}}],[\"使用内置函数close来关闭一个管道\",{\"1\":{\"414\":1}}],[\"使用内置函数copy\",{\"1\":{\"256\":1}}],[\"使用内置函数recover\",{\"1\":{\"397\":1}}],[\"使用内置函数panic即可\",{\"1\":{\"395\":1}}],[\"使用内置os\",{\"1\":{\"138\":1}}],[\"使用拓展表达式切割的切片容量为max\",{\"1\":{\"250\":1}}],[\"使用标签\",{\"1\":{\"236\":1}}],[\"使用标签来中断外层循环\",{\"1\":{\"235\":1}}],[\"使用标签加载csv文件\",{\"1\":{\"132\":1}}],[\"使用其它进制时\",{\"1\":{\"221\":1}}],[\"使用mutex\",{\"1\":{\"654\":1}}],[\"使用mysql的话有没有不通过数量控制的方案\",{\"1\":{\"566\":1,\"638\":2}}],[\"使用max函数比较最大值\",{\"1\":{\"209\":1}}],[\"使用mqtt\",{\"1\":{\"128\":1}}],[\"使用gin验证使用的tag是binding\",{\"1\":{\"1289\":1}}],[\"使用group\",{\"1\":{\"819\":1}}],[\"使用get请求\",{\"1\":{\"768\":1}}],[\"使用gnmi和gnoi协议的网络管理工具的集合\",{\"1\":{\"145\":1}}],[\"使用go进行im开发\",{\"1\":{\"331\":1}}],[\"使用go编程语言实现的bgp\",{\"1\":{\"145\":1}}],[\"使用go\",{\"1\":{\"138\":1}}],[\"使用go和html\",{\"1\":{\"138\":1}}],[\"使用golang实现的游戏服务器框架\",{\"1\":{\"134\":1}}],[\"使用常见的插值方法为go\",{\"1\":{\"139\":1}}],[\"使用libvips进行快速有效的图像处理的小包装\",{\"1\":{\"139\":1}}],[\"使用linkedhashmap的围棋设置简单的数据结构实现\",{\"1\":{\"127\":1}}],[\"使用带有简单api的轻量级库管理goroutine池\",{\"1\":{\"137\":1}}],[\"使用操作转换\",{\"1\":{\"128\":1}}],[\"使用树堆的持久快速排序的地图\",{\"1\":{\"127\":1}}],[\"使用近似计数器进行近似计数\",{\"1\":{\"127\":1}}],[\"使用域名访问\",{\"1\":{\"84\":1}}],[\"使用\",{\"0\":{\"240\":1,\"244\":1,\"342\":1,\"439\":1,\"1196\":1,\"1215\":1},\"1\":{\"77\":1,\"155\":1,\"338\":3,\"487\":1,\"491\":1,\"493\":1,\"511\":1,\"558\":1,\"633\":1,\"634\":4,\"635\":3,\"636\":2,\"637\":4,\"638\":3,\"639\":5,\"641\":5,\"644\":1,\"645\":2,\"649\":2,\"655\":1,\"656\":1,\"813\":1,\"1053\":1,\"1200\":1,\"1203\":1,\"1206\":1,\"1235\":1,\"1239\":1,\"1307\":1,\"1426\":1}}],[\"使用相对路径来链接到同一项目内的其他markdown文件\",{\"1\":{\"65\":1}}],[\"使用的逻辑\",{\"1\":{\"1197\":1}}],[\"使用的时候还是多计部署\",{\"1\":{\"1011\":1}}],[\"使用的场景\",{\"1\":{\"573\":1,\"645\":2}}],[\"使用的前提是入参必须是接口类型\",{\"1\":{\"387\":1}}],[\"使用的\",{\"1\":{\"55\":1}}],[\"e的指数\",{\"0\":{\"1357\":1}}],[\"e6e26ff63dfe\",{\"1\":{\"1197\":2}}],[\"e6fbc62\",{\"1\":{\"449\":3}}],[\"e2a0\",{\"1\":{\"1195\":1}}],[\"e2\",{\"1\":{\"1195\":1}}],[\"e0\",{\"1\":{\"1194\":1}}],[\"e0a39a4cb421\",{\"1\":{\"453\":2,\"459\":1}}],[\"epoll\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"epoch\",{\"1\":{\"1003\":3}}],[\"eq\",{\"1\":{\"814\":2,\"1420\":3,\"1421\":1,\"1423\":2,\"1424\":1}}],[\"equalfold\",{\"1\":{\"1401\":4}}],[\"equal\",{\"1\":{\"344\":2,\"471\":5,\"472\":1,\"473\":16,\"474\":2,\"476\":2,\"1429\":1}}],[\"erp\",{\"1\":{\"1108\":1}}],[\"erp技术一面\",{\"0\":{\"592\":1,\"664\":1}}],[\"erlang\",{\"1\":{\"1053\":2,\"1057\":2}}],[\"errdeadlineexceeded\",{\"1\":{\"390\":2}}],[\"errclosed\",{\"1\":{\"390\":2}}],[\"errexist\",{\"1\":{\"390\":2}}],[\"errput\",{\"1\":{\"1303\":3}}],[\"errpermission\",{\"1\":{\"390\":2}}],[\"errprintf\",{\"1\":{\"280\":1}}],[\"errinvalid\",{\"1\":{\"390\":2}}],[\"erros\",{\"1\":{\"390\":1}}],[\"errorlog\",{\"1\":{\"1336\":1}}],[\"errorlevel\",{\"1\":{\"1305\":2}}],[\"errorln\",{\"1\":{\"1047\":2}}],[\"erroroutputpaths\",{\"1\":{\"1302\":3,\"1303\":1}}],[\"error级别\",{\"1\":{\"1131\":1}}],[\"error提示予以排除\",{\"1\":{\"823\":1}}],[\"erroring\",{\"1\":{\"435\":1}}],[\"errorf内部使用的是t\",{\"1\":{\"471\":1}}],[\"errorf等同于t\",{\"1\":{\"471\":1}}],[\"errorf函数来进行创建\",{\"1\":{\"392\":1}}],[\"errorf\",{\"1\":{\"390\":1,\"392\":1,\"393\":2,\"471\":3,\"477\":4,\"491\":4,\"494\":2,\"495\":1,\"766\":1,\"1047\":1}}],[\"error在历史上也有过大改\",{\"1\":{\"389\":1}}],[\"error本身是一个预定义的接口\",{\"1\":{\"389\":1}}],[\"error的严重级别不足以停止整个程序的运行\",{\"1\":{\"389\":1}}],[\"error属于是一种正常的流程错误\",{\"1\":{\"389\":1}}],[\"error\",{\"0\":{\"389\":1},\"1\":{\"207\":1,\"224\":3,\"266\":2,\"279\":3,\"280\":1,\"300\":1,\"320\":1,\"337\":1,\"386\":1,\"388\":3,\"389\":2,\"390\":1,\"391\":2,\"392\":3,\"393\":20,\"400\":3,\"401\":5,\"402\":6,\"403\":2,\"404\":1,\"405\":2,\"408\":2,\"409\":2,\"410\":3,\"420\":1,\"422\":1,\"424\":2,\"425\":1,\"427\":1,\"435\":1,\"436\":1,\"446\":1,\"454\":1,\"463\":2,\"477\":1,\"514\":1,\"546\":1,\"633\":1,\"702\":1,\"717\":1,\"744\":1,\"745\":1,\"746\":2,\"748\":1,\"749\":1,\"751\":1,\"754\":1,\"756\":2,\"771\":1,\"825\":1,\"881\":2,\"882\":2,\"883\":2,\"891\":1,\"897\":3,\"911\":2,\"982\":1,\"993\":1,\"994\":1,\"1077\":2,\"1078\":1,\"1116\":6,\"1123\":1,\"1130\":9,\"1131\":9,\"1132\":2,\"1141\":1,\"1151\":2,\"1152\":2,\"1158\":7,\"1160\":1,\"1164\":4,\"1173\":2,\"1174\":2,\"1281\":6,\"1283\":4,\"1310\":3,\"1313\":2,\"1316\":2,\"1319\":1,\"1367\":1,\"1368\":1,\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1384\":1,\"1386\":1,\"1389\":1,\"1391\":1,\"1415\":2,\"1417\":1,\"1420\":1,\"1425\":2,\"1426\":2,\"1428\":3,\"1443\":1}}],[\"errorx\",{\"1\":{\"131\":1}}],[\"errors=1062\",{\"1\":{\"822\":2}}],[\"errors包提供了几个方便函数用于处理错误\",{\"1\":{\"393\":1}}],[\"errorstring结构体\",{\"1\":{\"391\":1}}],[\"errorstring\",{\"1\":{\"391\":3}}],[\"errors\",{\"1\":{\"124\":1,\"131\":4,\"141\":1,\"280\":1,\"337\":1,\"388\":1,\"390\":2,\"392\":1,\"393\":9,\"401\":1,\"463\":3,\"477\":1,\"745\":2,\"1047\":6,\"1374\":2}}],[\"errnodeadline\",{\"1\":{\"390\":2}}],[\"errnotexist\",{\"1\":{\"390\":2}}],[\"errno\",{\"1\":{\"298\":4}}],[\"err\",{\"1\":{\"224\":3,\"279\":1,\"298\":4,\"323\":9,\"388\":15,\"390\":2,\"392\":4,\"393\":13,\"397\":9,\"400\":11,\"401\":20,\"402\":17,\"403\":26,\"404\":3,\"405\":6,\"406\":8,\"408\":9,\"409\":3,\"410\":21,\"424\":3,\"425\":1,\"427\":6,\"428\":1,\"435\":2,\"446\":3,\"463\":6,\"470\":1,\"477\":4,\"514\":3,\"546\":2,\"633\":4,\"702\":7,\"704\":6,\"705\":6,\"706\":6,\"707\":6,\"709\":6,\"710\":6,\"711\":6,\"712\":6,\"713\":18,\"744\":3,\"745\":6,\"746\":3,\"748\":3,\"749\":3,\"751\":3,\"754\":3,\"756\":6,\"757\":1,\"758\":1,\"763\":1,\"766\":18,\"771\":3,\"830\":3,\"833\":3,\"834\":12,\"835\":6,\"836\":13,\"837\":6,\"838\":6,\"881\":6,\"882\":6,\"883\":6,\"884\":6,\"891\":1,\"893\":10,\"894\":8,\"895\":8,\"896\":8,\"897\":3,\"910\":4,\"1035\":6,\"1036\":9,\"1037\":5,\"1047\":26,\"1092\":4,\"1245\":5,\"1281\":9,\"1282\":2,\"1283\":7,\"1289\":4,\"1303\":3,\"1311\":3,\"1312\":3,\"1313\":2,\"1314\":3,\"1315\":6,\"1317\":3,\"1319\":3,\"1320\":3,\"1321\":6,\"1330\":4,\"1331\":3,\"1367\":4,\"1368\":3,\"1369\":6,\"1370\":6,\"1371\":6,\"1372\":3,\"1373\":6,\"1374\":16,\"1384\":2,\"1386\":6,\"1389\":4,\"1413\":3,\"1415\":4,\"1417\":15,\"1419\":3,\"1425\":6,\"1426\":18,\"1428\":6,\"1432\":6}}],[\"errlog\",{\"1\":{\"131\":1}}],[\"es教程\",{\"1\":{\"755\":1,\"758\":1,\"763\":2,\"765\":2}}],[\"esservice\",{\"1\":{\"745\":4,\"746\":4,\"748\":4,\"749\":3,\"751\":4,\"754\":4}}],[\"es更擅长的是海量数据的搜索\",{\"1\":{\"735\":1}}],[\"es和mysql使用场景的比较\",{\"1\":{\"735\":1}}],[\"es中没有专门的数组类型\",{\"1\":{\"725\":1}}],[\"es8+默认使用https连接了\",{\"1\":{\"702\":1}}],[\"es的分词检索\",{\"1\":{\"594\":1,\"666\":1}}],[\"es的分页功能有什么特性\",{\"1\":{\"594\":1,\"666\":1}}],[\"es\",{\"1\":{\"584\":1,\"594\":1,\"637\":1,\"656\":1,\"666\":1,\"713\":1,\"717\":2,\"740\":2,\"743\":1,\"745\":5,\"746\":4,\"748\":4,\"751\":4,\"754\":4}}],[\"es是干什么的\",{\"1\":{\"565\":1,\"637\":2}}],[\"escape\",{\"1\":{\"317\":2,\"318\":2,\"320\":1}}],[\"escapes\",{\"1\":{\"317\":1,\"318\":2,\"319\":2,\"320\":4}}],[\"eyb\",{\"1\":{\"477\":1}}],[\"eywa本质上是一个连接管理器\",{\"1\":{\"140\":1}}],[\"eywa\",{\"1\":{\"140\":1}}],[\"edu\",{\"1\":{\"802\":1,\"803\":1,\"805\":1,\"822\":1}}],[\"edit命令\",{\"1\":{\"1235\":1}}],[\"edit\",{\"1\":{\"456\":1,\"464\":1,\"1235\":1}}],[\"edge应用和集成的开源框架\",{\"1\":{\"140\":1}}],[\"ebpf\",{\"1\":{\"454\":1}}],[\"ebiten\",{\"1\":{\"134\":1}}],[\"eof\",{\"1\":{\"401\":1,\"774\":2,\"1221\":2,\"1222\":3,\"1223\":2,\"1374\":1}}],[\"eog\",{\"1\":{\"326\":2}}],[\"einval\",{\"1\":{\"298\":1}}],[\"e和n\",{\"1\":{\"282\":1}}],[\"e7\",{\"1\":{\"258\":1}}],[\"e4f6\",{\"1\":{\"1219\":1}}],[\"e4\",{\"1\":{\"258\":1,\"477\":1}}],[\"e相同\",{\"1\":{\"221\":1}}],[\"e+0i\",{\"1\":{\"183\":1}}],[\"e+0\",{\"1\":{\"182\":1}}],[\"e16726178e4ee3b61b0dc47f16d112ba0426bcf040b84949811ebc8607d94555\",{\"1\":{\"1197\":1}}],[\"e1df9acf919b9234611883d093a7ff4b687a9dee\",{\"1\":{\"1010\":4}}],[\"e1\",{\"1\":{\"175\":1}}],[\"eval\",{\"1\":{\"952\":1,\"1078\":1}}],[\"evalsha\",{\"1\":{\"952\":1}}],[\"evench\",{\"1\":{\"545\":3}}],[\"even\",{\"1\":{\"470\":1}}],[\"events\",{\"1\":{\"1123\":1,\"1130\":1,\"1131\":1,\"1158\":1}}],[\"eventual\",{\"1\":{\"906\":1}}],[\"event\",{\"1\":{\"328\":1,\"993\":1,\"1164\":1}}],[\"everysec\",{\"1\":{\"965\":2,\"987\":1,\"988\":1}}],[\"every\",{\"1\":{\"77\":1}}],[\"everywhere\",{\"1\":{\"77\":1}}],[\"evince\",{\"1\":{\"326\":2}}],[\"evoli\",{\"1\":{\"142\":1}}],[\"eth0是本地网卡名称\",{\"1\":{\"1228\":1}}],[\"eth0\",{\"1\":{\"1194\":2,\"1195\":4}}],[\"ethernet\",{\"1\":{\"145\":1}}],[\"ether\",{\"1\":{\"145\":1,\"1194\":3,\"1195\":4}}],[\"etc\",{\"1\":{\"774\":2,\"822\":3,\"986\":2,\"1030\":2,\"1078\":7,\"1081\":1,\"1122\":2,\"1193\":1,\"1196\":1,\"1219\":2,\"1220\":3,\"1221\":2,\"1222\":5,\"1223\":1,\"1225\":3}}],[\"etcd中实现的raft协议\",{\"1\":{\"128\":1}}],[\"etcd\",{\"1\":{\"122\":3,\"334\":1,\"460\":1,\"618\":1,\"635\":1,\"655\":1,\"690\":1,\"1072\":1}}],[\"etag\",{\"1\":{\"743\":2}}],[\"etrs89\",{\"1\":{\"135\":1}}],[\"embed\",{\"1\":{\"1428\":3}}],[\"emerg级别\",{\"1\":{\"1130\":1}}],[\"emerg\",{\"1\":{\"1130\":1,\"1163\":1}}],[\"emqx是基于mqtt协议\",{\"1\":{\"1057\":1}}],[\"emqx\",{\"0\":{\"1014\":1},\"1\":{\"1050\":1,\"1057\":1}}],[\"em>\",{\"1\":{\"766\":2}}],[\"emp\",{\"1\":{\"810\":2,\"820\":2}}],[\"emptyctx通常是用来当作最顶层的上下文\",{\"1\":{\"425\":1}}],[\"emptyctx的底层类型实际上是一个int\",{\"1\":{\"425\":1}}],[\"emptyctx就可以通过context\",{\"1\":{\"425\":1}}],[\"emptyctx就是空的上下文\",{\"1\":{\"425\":1}}],[\"emptyctx\",{\"0\":{\"425\":1},\"1\":{\"423\":1,\"425\":7}}],[\"emptyinterface\",{\"1\":{\"347\":3}}],[\"empty\",{\"1\":{\"274\":2}}],[\"employee\",{\"1\":{\"270\":2,\"726\":2,\"730\":5,\"732\":3,\"733\":4,\"810\":2,\"814\":19,\"818\":13,\"819\":7,\"821\":3,\"1428\":2}}],[\"emperror\",{\"1\":{\"131\":1}}],[\"emitter\",{\"1\":{\"128\":1}}],[\"email失效\",{\"1\":{\"806\":1}}],[\"email=my\",{\"1\":{\"84\":1}}],[\"email\",{\"1\":{\"55\":1,\"129\":1,\"806\":4}}],[\"eft有\",{\"1\":{\"1254\":1}}],[\"eft中\",{\"1\":{\"1253\":1}}],[\"eft\",{\"1\":{\"1244\":1,\"1252\":1,\"1253\":1,\"1254\":3,\"1256\":1,\"1260\":1,\"1264\":1}}],[\"effect定义了策略的效果\",{\"1\":{\"1256\":1}}],[\"effect\",{\"0\":{\"1254\":1},\"1\":{\"1244\":1,\"1256\":1,\"1260\":1,\"1264\":1}}],[\"effector\",{\"1\":{\"1239\":1}}],[\"effective\",{\"1\":{\"249\":1}}],[\"eff\",{\"1\":{\"895\":2,\"896\":2}}],[\"eface\",{\"1\":{\"347\":1,\"351\":3,\"352\":6}}],[\"ef\",{\"1\":{\"127\":1,\"1010\":1,\"1126\":2,\"1130\":1,\"1131\":1}}],[\"each\",{\"1\":{\"756\":1,\"1225\":2}}],[\"ea0xadu+shlu7x5o3gkhrpq1ikimrsihttpf0ybecua=\",{\"1\":{\"460\":1}}],[\"eaopt\",{\"1\":{\"142\":1}}],[\"easymidi是一个简单可靠的库\",{\"1\":{\"126\":1}}],[\"easymidi\",{\"1\":{\"126\":1}}],[\"eapache\",{\"1\":{\"122\":1}}],[\"enforce\",{\"1\":{\"1245\":1}}],[\"enforcer\",{\"1\":{\"1245\":1}}],[\"enp0s3xxx\",{\"1\":{\"1219\":1}}],[\"enp0s3\",{\"1\":{\"1194\":2}}],[\"enpty\",{\"1\":{\"516\":1}}],[\"enableipv6\",{\"1\":{\"1197\":1}}],[\"enablerepo=\",{\"1\":{\"1078\":1}}],[\"enable为false\",{\"1\":{\"1029\":1}}],[\"enable\",{\"1\":{\"1029\":2,\"1197\":2,\"1221\":1,\"1222\":1,\"1223\":1}}],[\"enable=true\",{\"1\":{\"1029\":2}}],[\"enabled\",{\"1\":{\"768\":1,\"769\":1,\"770\":1,\"794\":1,\"871\":1,\"965\":1,\"1010\":1,\"1132\":1,\"1173\":1}}],[\"enabled=1\",{\"1\":{\"297\":1,\"1222\":1}}],[\"enabled是否设置为1\",{\"1\":{\"297\":1}}],[\"en\",{\"1\":{\"876\":1,\"1109\":1,\"1162\":1,\"1163\":1,\"1164\":1,\"1423\":3}}],[\"ensureindex\",{\"1\":{\"862\":2}}],[\"enrollment\",{\"1\":{\"739\":1}}],[\"engine=innodb\",{\"1\":{\"817\":1}}],[\"engine\",{\"1\":{\"453\":1,\"892\":1,\"1087\":1,\"1107\":1,\"1184\":2,\"1223\":1}}],[\"engo是用go语言编写的开源2d游戏引擎\",{\"1\":{\"134\":1}}],[\"engo\",{\"1\":{\"134\":1}}],[\"entered\",{\"1\":{\"1010\":2}}],[\"enter\",{\"1\":{\"1010\":2}}],[\"entering\",{\"1\":{\"326\":1}}],[\"entries\",{\"1\":{\"965\":1}}],[\"entrypoint\",{\"1\":{\"1193\":1}}],[\"entrypoin\",{\"1\":{\"775\":1}}],[\"entry>\",{\"1\":{\"742\":4,\"743\":2}}],[\"entry\",{\"1\":{\"259\":1,\"394\":1,\"408\":4,\"477\":1}}],[\"ent这些库\",{\"1\":{\"889\":1}}],[\"entity\",{\"1\":{\"793\":1}}],[\"ent\",{\"1\":{\"330\":1}}],[\"enumerating\",{\"1\":{\"445\":1,\"449\":1}}],[\"enum\",{\"1\":{\"309\":3,\"1321\":1}}],[\"environment\",{\"1\":{\"453\":1}}],[\"env\",{\"1\":{\"297\":2,\"444\":2,\"451\":1,\"453\":1,\"457\":3,\"1193\":1}}],[\"endpoint=cluster\",{\"1\":{\"1225\":1}}],[\"endpointid\",{\"1\":{\"1197\":3}}],[\"end返回\",{\"1\":{\"970\":1}}],[\"endif\",{\"1\":{\"1164\":2}}],[\"endian\",{\"1\":{\"651\":2}}],[\"endindex\",{\"1\":{\"241\":1}}],[\"end永远也不会输出\",{\"1\":{\"421\":1}}],[\"end\",{\"1\":{\"412\":9,\"421\":1,\"422\":3,\"706\":7,\"820\":4,\"1422\":4,\"1423\":2,\"1424\":7,\"1425\":14,\"1427\":2,\"1428\":3,\"1435\":2}}],[\"endl\",{\"1\":{\"276\":4}}],[\"enhanced\",{\"1\":{\"124\":1}}],[\"enc\",{\"1\":{\"1302\":1}}],[\"encoder\",{\"1\":{\"1302\":2,\"1303\":3,\"1306\":5}}],[\"encoderconfig来进行改造\",{\"1\":{\"1303\":1}}],[\"encoderconfig\",{\"1\":{\"1302\":5,\"1303\":11}}],[\"encodename\",{\"1\":{\"1302\":1,\"1303\":1}}],[\"encodecaller\",{\"1\":{\"1302\":1,\"1303\":1}}],[\"encodeduration\",{\"1\":{\"1302\":1,\"1303\":1}}],[\"encodetime\",{\"1\":{\"1302\":1,\"1303\":1}}],[\"encodelevel\",{\"1\":{\"1302\":1,\"1303\":1}}],[\"encode\",{\"0\":{\"1309\":1},\"1\":{\"388\":1,\"1303\":5}}],[\"encoding=\",{\"1\":{\"742\":1}}],[\"encoding\",{\"1\":{\"121\":1,\"124\":1,\"127\":1,\"584\":1,\"656\":2,\"1133\":1,\"1302\":3,\"1303\":1,\"1308\":1,\"1316\":1}}],[\"encryption\",{\"1\":{\"124\":2}}],[\"elixir\",{\"1\":{\"1238\":1}}],[\"elias\",{\"1\":{\"127\":1}}],[\"el7\",{\"1\":{\"1222\":1}}],[\"elk\",{\"1\":{\"637\":1}}],[\"elapsed\",{\"1\":{\"477\":18}}],[\"elasticsearch连接配置\",{\"0\":{\"771\":1}}],[\"elasticsearch集群配置\",{\"0\":{\"767\":1}}],[\"elasticsearch的term查询\",{\"1\":{\"756\":1}}],[\"elasticsearch是java开发的\",{\"1\":{\"736\":1}}],[\"elasticsearch是一个基于apache\",{\"1\":{\"735\":1}}],[\"elasticsearch是一个分布式文档存储\",{\"1\":{\"734\":1}}],[\"elasticsearch不仅仅是lucene和全文搜索引擎\",{\"1\":{\"735\":1}}],[\"elasticsearch就会检测布尔值\",{\"1\":{\"734\":1}}],[\"elasticsearch会自动检测并向索引添加新的字段\",{\"1\":{\"734\":1}}],[\"elasticsearch还具有无模式的能力\",{\"1\":{\"734\":1}}],[\"elasticsearch对每个字段中的所有数据进行索引\",{\"1\":{\"734\":1}}],[\"elasticsearch使用了一种名为反向索引的数据结构\",{\"1\":{\"734\":1}}],[\"elasticsearch存储的是序列化为json文档的复杂数据结构\",{\"1\":{\"734\":1}}],[\"elasticsearch地理位置总结\",{\"1\":{\"731\":1}}],[\"elasticsearch中每个field都要精确对应一个数据类型\",{\"1\":{\"716\":1}}],[\"elasticsearch提供的go\",{\"1\":{\"702\":1}}],[\"elasticsearch\",{\"0\":{\"700\":1,\"716\":1},\"1\":{\"637\":2,\"656\":2,\"700\":3,\"701\":2,\"702\":2,\"736\":2,\"740\":5,\"742\":1,\"756\":1,\"766\":2,\"768\":2,\"769\":2,\"770\":1,\"771\":2,\"809\":1,\"907\":1}}],[\"elastic\",{\"1\":{\"122\":1,\"700\":2,\"701\":2,\"702\":1,\"736\":2,\"737\":1,\"744\":6,\"746\":2,\"749\":2,\"752\":1,\"756\":11,\"757\":1,\"758\":1,\"759\":2,\"763\":3,\"764\":2,\"765\":3,\"771\":11}}],[\"ele\",{\"1\":{\"360\":10,\"361\":4}}],[\"elem\",{\"0\":{\"352\":1,\"359\":1},\"1\":{\"352\":4,\"355\":3,\"356\":3,\"359\":2,\"360\":2,\"361\":1,\"367\":2,\"368\":3,\"369\":1,\"370\":2,\"371\":1,\"373\":2,\"374\":2,\"377\":1,\"378\":1}}],[\"element\",{\"1\":{\"317\":1,\"320\":1}}],[\"elems\",{\"1\":{\"244\":1}}],[\"elems是待添加的元素\",{\"1\":{\"244\":1}}],[\"else的基础上创建更多的判断分支\",{\"1\":{\"229\":1}}],[\"else\",{\"0\":{\"228\":1,\"229\":1},\"1\":{\"178\":1,\"228\":4,\"229\":16,\"232\":1,\"260\":1,\"281\":1,\"282\":1,\"386\":1,\"400\":5,\"401\":5,\"402\":2,\"403\":2,\"404\":1,\"405\":2,\"408\":2,\"409\":1,\"410\":1,\"434\":2,\"744\":1,\"756\":1,\"766\":1,\"910\":1,\"1037\":1,\"1165\":1,\"1245\":1,\"1374\":1,\"1405\":1,\"1411\":1,\"1422\":2,\"1423\":4,\"1424\":1}}],[\"elf是一种常见的二进制可执行文件和共享库的文件格式\",{\"1\":{\"124\":1}}],[\"elf\",{\"1\":{\"124\":1}}],[\"elliptic\",{\"1\":{\"124\":2}}],[\"ecc\",{\"1\":{\"1039\":1}}],[\"ecin\",{\"1\":{\"477\":1}}],[\"echo命令生成字符串master\",{\"1\":{\"1223\":1}}],[\"echo\",{\"1\":{\"158\":1,\"330\":1,\"1223\":1,\"1225\":1}}],[\"ecdsa\",{\"1\":{\"124\":1}}],[\"eclipse\",{\"1\":{\"28\":1}}],[\"ego\",{\"1\":{\"122\":4}}],[\"exa\",{\"1\":{\"873\":5}}],[\"examined\",{\"1\":{\"780\":1}}],[\"examined==\",{\"1\":{\"780\":1}}],[\"examine\",{\"1\":{\"454\":1}}],[\"examples\",{\"1\":{\"831\":3,\"832\":3,\"835\":3,\"836\":3,\"837\":3,\"838\":3,\"878\":1}}],[\"examplesay\",{\"1\":{\"468\":4,\"470\":3}}],[\"examplewithdeadline\",{\"1\":{\"470\":1}}],[\"examplegoodbye\",{\"1\":{\"468\":3,\"470\":3}}],[\"examplehello\",{\"1\":{\"468\":3,\"470\":3}}],[\"example1\",{\"1\":{\"175\":3}}],[\"example\",{\"1\":{\"84\":1,\"174\":1,\"175\":7,\"317\":1,\"318\":1,\"319\":1,\"320\":2,\"326\":1,\"335\":1,\"448\":2,\"449\":9,\"457\":1,\"459\":8,\"462\":1,\"463\":2,\"468\":2,\"470\":2,\"483\":1,\"501\":1,\"502\":2,\"503\":2,\"633\":1,\"1164\":4}}],[\"exception\",{\"1\":{\"717\":3}}],[\"exceeded\",{\"1\":{\"428\":1,\"470\":1}}],[\"excel文件的方法\",{\"1\":{\"143\":1}}],[\"excel最新版本使用的xml格式的库\",{\"1\":{\"143\":1}}],[\"excel™\",{\"1\":{\"143\":1}}],[\"excelize\",{\"1\":{\"122\":1,\"143\":1}}],[\"excel\",{\"1\":{\"122\":1,\"143\":3}}],[\"exclude关键字表示了不加载指定版本的依赖\",{\"1\":{\"459\":1}}],[\"exclude\",{\"1\":{\"459\":3}}],[\"excl\",{\"1\":{\"400\":2}}],[\"ext\",{\"1\":{\"742\":5,\"743\":2,\"1307\":1}}],[\"external\",{\"1\":{\"1235\":1}}],[\"extern\",{\"1\":{\"300\":1}}],[\"extra\",{\"1\":{\"221\":2,\"814\":1}}],[\"exe\",{\"1\":{\"297\":1,\"299\":2,\"312\":2,\"313\":1,\"1328\":4}}],[\"exercise\",{\"1\":{\"293\":1}}],[\"exectmpl\",{\"1\":{\"1417\":5,\"1419\":1,\"1425\":2}}],[\"execerr\",{\"1\":{\"1415\":2}}],[\"execreload=\",{\"1\":{\"1223\":1}}],[\"execstop=\",{\"1\":{\"1032\":1}}],[\"execstart=\",{\"1\":{\"1032\":1,\"1223\":1}}],[\"execs\",{\"1\":{\"477\":12}}],[\"executetemplate\",{\"1\":{\"1425\":2}}],[\"execute方法将data数据应用于模板中\",{\"1\":{\"1415\":1}}],[\"execute\",{\"1\":{\"233\":3,\"454\":1,\"1415\":2,\"1417\":1,\"1426\":1,\"1428\":2}}],[\"executable\",{\"1\":{\"124\":1}}],[\"exec\",{\"1\":{\"124\":1,\"454\":1,\"469\":1,\"894\":1,\"895\":1,\"896\":1,\"1182\":1,\"1189\":1,\"1194\":1,\"1195\":3,\"1196\":4,\"1197\":3,\"1198\":2,\"1308\":1}}],[\"exwrite\",{\"1\":{\"279\":1}}],[\"exwriter\",{\"1\":{\"279\":1}}],[\"exist的使用\",{\"1\":{\"600\":1,\"672\":1}}],[\"exists子查询只返回true或false\",{\"1\":{\"821\":1}}],[\"exists\",{\"1\":{\"390\":1,\"745\":2,\"821\":1,\"892\":1,\"967\":2,\"1194\":1}}],[\"exist\",{\"1\":{\"260\":2,\"261\":4,\"390\":1,\"910\":1}}],[\"exit\",{\"1\":{\"226\":2,\"398\":1,\"477\":2,\"504\":1,\"1164\":3,\"1339\":1}}],[\"exif\",{\"1\":{\"132\":1}}],[\"exiftool的go绑定\",{\"1\":{\"132\":1}}],[\"exiftool\",{\"1\":{\"132\":1}}],[\"expose\",{\"1\":{\"1193\":3}}],[\"export\",{\"1\":{\"300\":11,\"453\":1,\"1030\":2,\"1122\":2,\"1225\":1}}],[\"expiresat\",{\"1\":{\"1090\":1}}],[\"expireat\",{\"1\":{\"967\":3}}],[\"expire\",{\"1\":{\"634\":1,\"916\":1,\"967\":3}}],[\"expired\",{\"1\":{\"470\":1,\"653\":1}}],[\"explain关注的字段\",{\"1\":{\"595\":1,\"667\":1}}],[\"explain\",{\"1\":{\"579\":1,\"645\":1,\"651\":4,\"814\":21,\"817\":1,\"818\":12,\"819\":7,\"821\":1}}],[\"explicit\",{\"1\":{\"303\":2}}],[\"expected\",{\"1\":{\"446\":4,\"471\":38,\"472\":8,\"473\":8,\"474\":5,\"724\":4,\"766\":10}}],[\"expect+num\",{\"1\":{\"440\":1}}],[\"expect\",{\"1\":{\"440\":2}}],[\"exp函数的返回值是一个函数\",{\"1\":{\"282\":1}}],[\"exp\",{\"1\":{\"140\":1,\"282\":2,\"454\":1,\"474\":3,\"634\":2,\"1357\":1}}],[\"expression3\",{\"1\":{\"229\":1}}],[\"expression2\",{\"1\":{\"229\":1}}],[\"expression1\",{\"1\":{\"229\":1}}],[\"expression必须是一个布尔表达式\",{\"1\":{\"228\":1}}],[\"expression\",{\"1\":{\"228\":2,\"233\":2}}],[\"expr\",{\"1\":{\"130\":1,\"211\":1,\"230\":1}}],[\"expvar\",{\"1\":{\"124\":1}}],[\"e\",{\"1\":{\"84\":1,\"175\":2,\"211\":1,\"221\":5,\"229\":1,\"258\":3,\"273\":1,\"282\":3,\"306\":2,\"343\":4,\"344\":2,\"391\":2,\"392\":4,\"396\":1,\"516\":3,\"775\":3,\"814\":26,\"820\":2,\"821\":6,\"822\":3,\"831\":4,\"927\":2,\"934\":1,\"939\":1,\"1075\":3,\"1076\":6,\"1077\":9,\"1081\":1,\"1163\":1,\"1175\":3,\"1244\":1,\"1245\":7,\"1254\":2,\"1256\":1,\"1260\":1,\"1264\":1,\"1280\":5,\"1345\":1,\"1390\":5,\"1399\":1,\"1402\":4}}],[\"u754c\",{\"1\":{\"1388\":1}}],[\"u4e16\",{\"1\":{\"1388\":1}}],[\"u转义\",{\"1\":{\"1388\":1}}],[\"uwsgi\",{\"1\":{\"1116\":6,\"1132\":2,\"1133\":2,\"1173\":2}}],[\"ubuntu\",{\"1\":{\"1039\":1}}],[\"uber\",{\"1\":{\"460\":1,\"1299\":2,\"1300\":1}}],[\"uk\",{\"1\":{\"795\":1,\"835\":1,\"836\":1,\"838\":3}}],[\"u$user\",{\"1\":{\"776\":1}}],[\"udp大体上的写法也都是类似的\",{\"1\":{\"1374\":1}}],[\"udp4\",{\"1\":{\"1371\":1}}],[\"udp4addr\",{\"1\":{\"1371\":2}}],[\"udpaddr\",{\"1\":{\"1371\":1}}],[\"udp6addr\",{\"1\":{\"1371\":2}}],[\"udp6\",{\"1\":{\"1371\":2}}],[\"udp地址支持udp4\",{\"1\":{\"1371\":1}}],[\"udp地址\",{\"0\":{\"1371\":1}}],[\"udp协议\",{\"1\":{\"1365\":1}}],[\"udp报文头部有哪些字段\",{\"1\":{\"621\":1,\"693\":1}}],[\"udp\",{\"1\":{\"579\":1,\"636\":1,\"651\":3}}],[\"udp域名解析和unix域套接字\",{\"1\":{\"124\":1}}],[\"uoy\",{\"1\":{\"477\":1}}],[\"u=\",{\"1\":{\"460\":1}}],[\"ugorji\",{\"1\":{\"453\":2,\"459\":1}}],[\"uploaded\",{\"1\":{\"1281\":1}}],[\"uploads\",{\"1\":{\"1281\":1}}],[\"upload\",{\"1\":{\"1281\":4}}],[\"upgrade\",{\"1\":{\"1231\":1}}],[\"up>\",{\"1\":{\"1194\":5,\"1195\":5}}],[\"ups\",{\"1\":{\"1164\":1}}],[\"upstream指令存在一些参数\",{\"1\":{\"1163\":1}}],[\"upstream\",{\"0\":{\"1159\":1,\"1163\":1},\"1\":{\"1160\":2,\"1162\":2,\"1163\":7,\"1164\":51,\"1165\":3,\"1166\":1,\"1167\":1,\"1168\":1}}],[\"upsertedid\",{\"1\":{\"836\":1}}],[\"upsertedcount\",{\"1\":{\"836\":1}}],[\"uptrace\",{\"1\":{\"908\":1}}],[\"upres\",{\"1\":{\"836\":6}}],[\"updatexxx\",{\"1\":{\"1278\":1}}],[\"updatetime\",{\"1\":{\"1082\":1}}],[\"updatebyid\",{\"1\":{\"882\":1,\"884\":4}}],[\"updatebyquery\",{\"1\":{\"749\":1}}],[\"updatemany\",{\"1\":{\"836\":1,\"882\":2,\"884\":2}}],[\"updateone\",{\"1\":{\"836\":2,\"882\":1}}],[\"updatequeryatricle\",{\"1\":{\"749\":1}}],[\"updateatriclebyid\",{\"1\":{\"748\":2}}],[\"updated\",{\"1\":{\"653\":2,\"711\":1,\"749\":1}}],[\"update\",{\"1\":{\"449\":3,\"581\":1,\"614\":1,\"633\":1,\"653\":5,\"656\":3,\"686\":1,\"711\":5,\"748\":1,\"774\":1,\"794\":1,\"809\":1,\"811\":1,\"859\":2,\"882\":4,\"895\":5,\"897\":1,\"1220\":1,\"1283\":1}}],[\"up\",{\"1\":{\"344\":2,\"449\":1,\"775\":1,\"1078\":3,\"1194\":6,\"1195\":9}}],[\"ulonglong\",{\"1\":{\"304\":2}}],[\"ulong\",{\"1\":{\"304\":1}}],[\"uchar\",{\"1\":{\"304\":1}}],[\"uvwxyz\",{\"1\":{\"252\":2}}],[\"u\",{\"1\":{\"221\":2,\"308\":6,\"355\":1,\"356\":1,\"393\":2,\"400\":1,\"453\":1,\"863\":2,\"1164\":6,\"1166\":2,\"1225\":1,\"1274\":1,\"1300\":1,\"1304\":1,\"1307\":1,\"1429\":4}}],[\"u00ff\",{\"1\":{\"186\":1}}],[\"u00008a9e\",{\"1\":{\"186\":1}}],[\"u00101234\",{\"1\":{\"184\":1}}],[\"u65e5本\",{\"1\":{\"186\":1}}],[\"u+0022\",{\"1\":{\"185\":1}}],[\"u+0027\",{\"1\":{\"185\":1}}],[\"u+005c\",{\"1\":{\"185\":1}}],[\"u+000b\",{\"1\":{\"185\":1}}],[\"u+0009\",{\"1\":{\"185\":1}}],[\"u+000d\",{\"1\":{\"185\":1}}],[\"u+000a\",{\"1\":{\"185\":1}}],[\"u+000c\",{\"1\":{\"185\":1}}],[\"u+0008\",{\"1\":{\"185\":1}}],[\"u+0007\",{\"1\":{\"185\":1}}],[\"u12e4\",{\"1\":{\"184\":1}}],[\"uid\",{\"1\":{\"858\":1}}],[\"uintptr保存的是地址\",{\"1\":{\"1443\":1}}],[\"uintptr可以转换为unsafe\",{\"1\":{\"1443\":1}}],[\"uintptr\",{\"1\":{\"197\":1,\"215\":3,\"348\":1,\"351\":3,\"353\":1,\"360\":3,\"367\":1,\"438\":1,\"1164\":4,\"1440\":1,\"1441\":1,\"1442\":1,\"1443\":7,\"1444\":4}}],[\"uint\",{\"1\":{\"197\":1,\"304\":2,\"340\":5,\"351\":4,\"478\":1,\"554\":1,\"1164\":3,\"1324\":1}}],[\"uint64\",{\"1\":{\"197\":1,\"209\":3,\"304\":4,\"340\":5,\"351\":3,\"438\":1,\"439\":1,\"478\":1,\"1164\":1,\"1324\":1,\"1443\":6}}],[\"uint32\",{\"1\":{\"197\":1,\"304\":5,\"340\":5,\"347\":1,\"351\":3,\"434\":1,\"438\":1,\"478\":1}}],[\"uint16\",{\"1\":{\"197\":1,\"304\":4,\"340\":5,\"351\":3,\"478\":1}}],[\"uint8\",{\"1\":{\"197\":1,\"200\":1,\"213\":1,\"304\":4,\"308\":1,\"340\":5,\"351\":3,\"478\":1}}],[\"ui的mac\",{\"1\":{\"138\":1}}],[\"ui\",{\"1\":{\"138\":1,\"145\":1,\"1164\":2}}],[\"utc\",{\"1\":{\"1289\":1,\"1307\":1}}],[\"util\",{\"1\":{\"774\":1,\"1165\":2,\"1166\":2}}],[\"utilization\",{\"1\":{\"328\":1}}],[\"utils\",{\"1\":{\"122\":1,\"774\":1,\"1078\":1,\"1166\":1,\"1184\":1,\"1220\":1}}],[\"utp\",{\"1\":{\"145\":1}}],[\"utf\",{\"1\":{\"477\":4,\"742\":1,\"743\":1}}],[\"utf8mb4\",{\"1\":{\"892\":9}}],[\"utf8\",{\"1\":{\"124\":1,\"258\":1,\"477\":6,\"794\":1}}],[\"utf16\",{\"1\":{\"124\":1}}],[\"uri参数绑定\",{\"1\":{\"1283\":1}}],[\"uri\",{\"1\":{\"1133\":2,\"1143\":1,\"1165\":2,\"1166\":1,\"1283\":4}}],[\"uri的值\",{\"1\":{\"1133\":1}}],[\"uroot\",{\"1\":{\"822\":1}}],[\"urn\",{\"1\":{\"453\":2,\"459\":1}}],[\"urlquery\",{\"1\":{\"1420\":2}}],[\"urlencoded\",{\"1\":{\"1281\":1}}],[\"url定位资源\",{\"1\":{\"1278\":1}}],[\"url跳转来源\",{\"1\":{\"1133\":1}}],[\"url是不分大小写的\",{\"1\":{\"459\":1}}],[\"url替换掉文件名即可\",{\"1\":{\"326\":1,\"327\":1}}],[\"url\",{\"0\":{\"1166\":1},\"1\":{\"124\":1,\"586\":1,\"638\":2,\"658\":1,\"743\":1,\"1084\":1,\"1160\":1,\"1166\":3,\"1233\":1,\"1234\":1,\"1241\":1,\"1301\":8,\"1313\":3,\"1314\":2,\"1338\":3,\"1420\":1}}],[\"urfave\",{\"1\":{\"122\":1}}],[\"uuid=0d6019d6\",{\"1\":{\"1219\":1}}],[\"uuid截取\",{\"1\":{\"625\":1,\"697\":1}}],[\"uuid\",{\"1\":{\"122\":1,\"637\":1,\"702\":1,\"705\":1}}],[\"uuidhttps\",{\"1\":{\"122\":1}}],[\"uuid相关\",{\"1\":{\"122\":1}}],[\"uscf\",{\"1\":{\"1164\":5}}],[\"us\",{\"1\":{\"1164\":6,\"1380\":1,\"1381\":1}}],[\"usa\",{\"1\":{\"832\":1,\"833\":3,\"834\":1,\"835\":1,\"1311\":1,\"1312\":1,\"1317\":2,\"1318\":1,\"1319\":2,\"1320\":2,\"1331\":1,\"1422\":2,\"1427\":2,\"1428\":3}}],[\"usage\",{\"1\":{\"454\":1,\"878\":1,\"1197\":1,\"1328\":1}}],[\"usfca\",{\"1\":{\"802\":1,\"803\":1,\"805\":1}}],[\"usb\",{\"1\":{\"516\":1}}],[\"ushort\",{\"1\":{\"304\":2}}],[\"using\",{\"1\":{\"303\":2,\"449\":1,\"453\":3,\"814\":5,\"817\":1,\"892\":1}}],[\"usename\",{\"1\":{\"870\":1}}],[\"use\",{\"1\":{\"287\":1,\"381\":1,\"454\":1,\"459\":1,\"463\":1,\"464\":1,\"465\":2,\"717\":2,\"814\":1,\"832\":1,\"856\":1,\"869\":1,\"873\":2,\"1010\":2,\"1087\":1,\"1130\":1,\"1131\":1,\"1411\":2}}],[\"used\",{\"1\":{\"206\":1}}],[\"user更优先匹配\",{\"1\":{\"1287\":1}}],[\"useruri\",{\"1\":{\"1283\":1}}],[\"usercookie\",{\"1\":{\"1282\":3}}],[\"userform\",{\"1\":{\"1281\":1,\"1283\":1}}],[\"userpage\",{\"1\":{\"1280\":2}}],[\"user有write权限\",{\"1\":{\"1244\":1}}],[\"userlist有read权限\",{\"1\":{\"1244\":1}}],[\"userlist\",{\"1\":{\"1166\":1,\"1244\":1,\"1245\":1}}],[\"userhash\",{\"1\":{\"1165\":2}}],[\"userid\",{\"1\":{\"893\":1,\"1092\":1,\"1280\":6,\"1310\":1,\"1311\":1,\"1312\":2,\"1316\":1,\"1317\":2,\"1318\":1,\"1319\":1,\"1320\":1,\"1331\":1,\"1380\":4,\"1381\":3}}],[\"userinforesponse\",{\"1\":{\"1090\":3}}],[\"userinfo\",{\"1\":{\"861\":41,\"862\":4}}],[\"useradminanydatabase\",{\"1\":{\"870\":1}}],[\"user=tom\",{\"1\":{\"1282\":1}}],[\"user=kong\",{\"1\":{\"1075\":1,\"1076\":1}}],[\"user=root\",{\"1\":{\"1032\":1}}],[\"user=\",{\"1\":{\"822\":2}}],[\"userserver\",{\"1\":{\"1165\":2}}],[\"userservers\",{\"1\":{\"1165\":2}}],[\"users\",{\"1\":{\"653\":2,\"832\":1,\"833\":2,\"834\":10,\"835\":6,\"836\":5,\"837\":2,\"838\":4,\"855\":1,\"862\":3,\"863\":11,\"1281\":1,\"1283\":2,\"1285\":1}}],[\"user模块内容如下\",{\"1\":{\"463\":1}}],[\"username=\",{\"1\":{\"1193\":1}}],[\"username\",{\"1\":{\"463\":2,\"653\":1,\"702\":1,\"813\":1,\"893\":1,\"994\":1,\"1092\":1,\"1280\":6,\"1310\":1,\"1311\":1,\"1312\":2,\"1313\":3,\"1314\":2,\"1316\":1,\"1317\":2,\"1318\":1,\"1319\":1,\"1320\":1,\"1331\":1,\"1380\":4,\"1381\":3}}],[\"user\",{\"1\":{\"55\":3,\"124\":1,\"176\":1,\"328\":3,\"463\":16,\"465\":1,\"653\":3,\"704\":2,\"705\":3,\"706\":1,\"707\":1,\"709\":2,\"710\":2,\"711\":2,\"712\":2,\"713\":1,\"728\":1,\"744\":1,\"756\":1,\"766\":3,\"771\":1,\"832\":1,\"833\":6,\"834\":6,\"835\":5,\"836\":8,\"837\":2,\"838\":2,\"849\":1,\"870\":1,\"873\":1,\"892\":2,\"893\":2,\"894\":1,\"895\":1,\"896\":1,\"994\":1,\"1003\":1,\"1032\":1,\"1078\":3,\"1126\":1,\"1130\":4,\"1131\":4,\"1133\":2,\"1139\":1,\"1151\":2,\"1158\":3,\"1223\":1,\"1244\":3,\"1245\":2,\"1280\":3,\"1281\":3,\"1282\":1,\"1283\":4,\"1285\":2,\"1286\":2,\"1287\":1,\"1308\":1}}],[\"usr1\",{\"1\":{\"1174\":1}}],[\"usr\",{\"1\":{\"84\":1,\"1028\":6,\"1029\":3,\"1030\":1,\"1031\":3,\"1032\":4,\"1033\":1,\"1034\":1,\"1078\":1,\"1116\":11,\"1121\":1,\"1122\":1,\"1123\":1,\"1132\":1,\"1163\":2,\"1171\":1,\"1173\":1,\"1174\":1,\"1175\":1,\"1193\":1,\"1223\":5}}],[\"unused\",{\"1\":{\"1197\":1}}],[\"unable\",{\"1\":{\"1194\":1}}],[\"unavailable\",{\"1\":{\"1163\":1}}],[\"unassigned\",{\"1\":{\"768\":2}}],[\"unhealthy\",{\"1\":{\"1163\":1}}],[\"unque\",{\"1\":{\"810\":1}}],[\"uncommitted\",{\"1\":{\"634\":1,\"641\":1}}],[\"unmarshal\",{\"1\":{\"584\":1,\"656\":3,\"754\":1,\"766\":1,\"1303\":1,\"1310\":1,\"1312\":1,\"1313\":1,\"1315\":1,\"1316\":1,\"1320\":1,\"1321\":1}}],[\"unmodified\",{\"1\":{\"22\":1}}],[\"unordered\",{\"1\":{\"470\":1}}],[\"unlock\",{\"1\":{\"429\":3,\"430\":2,\"431\":2,\"432\":2,\"434\":1,\"440\":1,\"514\":1,\"556\":2,\"557\":1,\"635\":1,\"649\":2,\"654\":2,\"1164\":7}}],[\"unexpected\",{\"1\":{\"393\":1}}],[\"unwrap\",{\"1\":{\"392\":1,\"393\":5}}],[\"unknown\",{\"1\":{\"309\":1,\"454\":1,\"1194\":2,\"1195\":1}}],[\"undefined\",{\"1\":{\"307\":1,\"453\":1}}],[\"until\",{\"1\":{\"820\":1}}],[\"untyped\",{\"1\":{\"302\":1,\"381\":3}}],[\"untracked\",{\"1\":{\"22\":1}}],[\"unsigned类型\",{\"1\":{\"791\":1}}],[\"unsignedint\",{\"1\":{\"340\":4}}],[\"unsigned\",{\"1\":{\"301\":3,\"302\":1,\"304\":9}}],[\"unsafe也还是被大量的项目使用\",{\"1\":{\"1437\":1}}],[\"unsafe标准库是官方提供的一个可以进行低级编程的库\",{\"1\":{\"1437\":1}}],[\"unsafeaddr\",{\"1\":{\"360\":7}}],[\"unsafepointer时\",{\"1\":{\"360\":2}}],[\"unsafepointer\",{\"1\":{\"351\":2,\"360\":8,\"368\":1}}],[\"unsafe了解细节\",{\"1\":{\"276\":1}}],[\"unsafe\",{\"0\":{\"1437\":1},\"1\":{\"254\":4,\"274\":1,\"303\":12,\"306\":9,\"308\":1,\"310\":4,\"347\":5,\"348\":1,\"351\":1,\"360\":6,\"513\":3,\"1308\":1,\"1411\":1,\"1437\":2,\"1440\":7,\"1441\":5,\"1442\":6,\"1443\":21,\"1444\":3,\"1445\":7,\"1446\":2,\"1447\":4,\"1448\":2}}],[\"uni\",{\"1\":{\"795\":1}}],[\"unique索引\",{\"1\":{\"814\":1}}],[\"unique|primary|fulltext\",{\"1\":{\"810\":1}}],[\"unique\",{\"1\":{\"653\":1,\"809\":2,\"817\":1}}],[\"unite\",{\"1\":{\"1192\":1}}],[\"unit\",{\"1\":{\"471\":1,\"1032\":1,\"1223\":2}}],[\"unity等客户端库\",{\"1\":{\"134\":1}}],[\"uniseg\",{\"1\":{\"454\":1}}],[\"universal\",{\"1\":{\"453\":2,\"459\":1}}],[\"unix时间格式的\",{\"1\":{\"1429\":1}}],[\"unixsec\",{\"1\":{\"1429\":1}}],[\"unixaddr\",{\"1\":{\"1372\":3}}],[\"unixpacket\",{\"1\":{\"1372\":1}}],[\"unixgram\",{\"1\":{\"1372\":1}}],[\"unix地址支持unix\",{\"1\":{\"1372\":1}}],[\"unix地址\",{\"0\":{\"1372\":1}}],[\"unixnano\",{\"1\":{\"1047\":1}}],[\"unix\",{\"1\":{\"400\":3,\"911\":1,\"967\":3,\"1090\":2,\"1225\":2,\"1226\":2,\"1227\":1,\"1372\":1}}],[\"union文件系统\",{\"1\":{\"1192\":1}}],[\"unionfs\",{\"1\":{\"1192\":2}}],[\"union\",{\"1\":{\"308\":4,\"814\":5,\"1192\":1}}],[\"unioffice\",{\"1\":{\"143\":1}}],[\"unidecode\",{\"1\":{\"144\":1}}],[\"unicode字符集操作包\",{\"1\":{\"1308\":1}}],[\"unicode字符集的范围位于0x0000\",{\"1\":{\"258\":1}}],[\"unicode文本的ascii音译\",{\"1\":{\"144\":1}}],[\"unicode编码相关的基础函数\",{\"1\":{\"124\":1}}],[\"unicode\",{\"0\":{\"1436\":1},\"1\":{\"124\":3,\"477\":1,\"1308\":1,\"1409\":4}}],[\"unrelated\",{\"1\":{\"58\":3,\"766\":1}}],[\"设为其他字段如user\",{\"1\":{\"794\":1}}],[\"设\",{\"1\":{\"645\":1}}],[\"设置地区\",{\"1\":{\"1429\":1}}],[\"设置前缀\",{\"1\":{\"1340\":1}}],[\"设置不同的主机名\",{\"1\":{\"1222\":1}}],[\"设置docker的yum仓库\",{\"1\":{\"1221\":1}}],[\"设置一下nds\",{\"1\":{\"1219\":1}}],[\"设置一个大小为2的缓冲区域\",{\"1\":{\"1158\":1}}],[\"设置一个定时器\",{\"1\":{\"653\":1}}],[\"设置一个\",{\"1\":{\"639\":1}}],[\"设置所需的日志记录级别\",{\"1\":{\"1152\":1}}],[\"设置拒绝请求的返回值\",{\"1\":{\"1151\":1,\"1152\":1}}],[\"设置使用哪个配置区域来做限制\",{\"1\":{\"1151\":1}}],[\"设置nginx进程\",{\"1\":{\"1130\":1}}],[\"设置worker进程的用户\",{\"1\":{\"1130\":1}}],[\"设置admin请求超时时间\",{\"1\":{\"1037\":1}}],[\"设置客户端版本\",{\"1\":{\"1037\":1}}],[\"设置kafka的监听地址与端口\",{\"1\":{\"1029\":1}}],[\"设置对应的配置文件\",{\"1\":{\"1010\":1}}],[\"设置主从的日志\",{\"1\":{\"993\":1}}],[\"设置主键是为了确定唯一性\",{\"1\":{\"793\":1}}],[\"设置从节点的端口\",{\"1\":{\"993\":1}}],[\"设置哈希表字段的值\",{\"1\":{\"972\":1}}],[\"设置或清除指定偏移量上的位\",{\"1\":{\"970\":1}}],[\"设置指定\",{\"1\":{\"970\":1}}],[\"设置指定下标的元素的值\",{\"1\":{\"934\":1}}],[\"设置在向客户端应答时\",{\"1\":{\"965\":1}}],[\"设置访问swap文件的线程数\",{\"1\":{\"965\":1}}],[\"设置swap文件中的page数量\",{\"1\":{\"965\":1}}],[\"设置server\",{\"1\":{\"822\":2}}],[\"设置同一时间最大客户端连接数\",{\"1\":{\"965\":1}}],[\"设置redis连接密码\",{\"1\":{\"965\":1}}],[\"设置master服务的ip地址及端口\",{\"1\":{\"965\":1}}],[\"设置当本机为slav服务时\",{\"1\":{\"965\":1}}],[\"设置数据库的数量\",{\"1\":{\"965\":1}}],[\"设置密码\",{\"1\":{\"963\":1}}],[\"设置最大内存学习就100mb\",{\"1\":{\"963\":1}}],[\"设置键值对\",{\"1\":{\"910\":1}}],[\"设置开启函数功能\",{\"1\":{\"820\":1}}],[\"设置慢查询的阀值\",{\"1\":{\"813\":1}}],[\"设置字段个数少的前提是各个字段相互独立\",{\"1\":{\"793\":1}}],[\"设置yum源为阿里云\",{\"1\":{\"774\":1}}],[\"设置bool查询的should条件\",{\"1\":{\"765\":1}}],[\"设置bool查询的must\",{\"1\":{\"764\":1}}],[\"设置bool查询的must条件\",{\"1\":{\"763\":1}}],[\"设置分页参数\",{\"1\":{\"756\":2,\"757\":2,\"758\":2,\"763\":2}}],[\"设置排序字段\",{\"1\":{\"756\":1,\"757\":1,\"758\":1,\"763\":1}}],[\"设置info日志输出\",{\"1\":{\"756\":1,\"771\":1}}],[\"设置错误日志输出\",{\"1\":{\"756\":1,\"771\":1}}],[\"设置请求失败最大重试次数\",{\"1\":{\"756\":1,\"771\":1}}],[\"设置监控检查时间间隔\",{\"1\":{\"756\":1,\"771\":1}}],[\"设置索引名\",{\"1\":{\"752\":1,\"756\":1,\"757\":1,\"758\":1,\"763\":1}}],[\"设置索引名称\",{\"1\":{\"746\":1,\"748\":1,\"751\":1}}],[\"设置查询条件为\",{\"1\":{\"752\":1}}],[\"设置查询条件\",{\"1\":{\"749\":1,\"756\":1,\"757\":1,\"758\":1,\"763\":1}}],[\"设置文档id\",{\"1\":{\"746\":1,\"748\":1,\"751\":1,\"754\":1}}],[\"设置基于http\",{\"1\":{\"744\":1}}],[\"设置es服务地址\",{\"1\":{\"744\":1}}],[\"设置\",{\"1\":{\"639\":1,\"967\":2,\"1341\":1}}],[\"设置合理的缓存过期时间\",{\"1\":{\"636\":1}}],[\"设置过期时间\",{\"1\":{\"635\":1,\"916\":1,\"967\":3}}],[\"设置过期时间防止资源无限占用\",{\"1\":{\"634\":1}}],[\"设置测试超时时间为\",{\"1\":{\"630\":1}}],[\"设置猫狗channel\",{\"1\":{\"595\":1,\"667\":1}}],[\"设置context\",{\"1\":{\"546\":1}}],[\"设置cancel时间点\",{\"1\":{\"546\":1}}],[\"设置超时时间\",{\"1\":{\"546\":1}}],[\"设置取消信号\",{\"1\":{\"546\":1}}],[\"设置动态属性\",{\"1\":{\"513\":1}}],[\"设置统计n个协程竞争一个互斥锁的情况\",{\"1\":{\"469\":1}}],[\"设置覆盖率分析的模式\",{\"1\":{\"469\":1}}],[\"设置代理\",{\"0\":{\"451\":1}}],[\"设置1秒的超时时间\",{\"1\":{\"421\":1}}],[\"设置值\",{\"0\":{\"361\":1},\"1\":{\"376\":1}}],[\"设置用户信息\",{\"1\":{\"55\":1}}],[\"设备信息\",{\"1\":{\"843\":1}}],[\"设备文件\",{\"1\":{\"400\":1}}],[\"设备\",{\"1\":{\"134\":1}}],[\"设计轻量\",{\"1\":{\"1239\":1}}],[\"设计上更适合分布式系统\",{\"1\":{\"906\":1}}],[\"设计上有哪些可以用的方案\",{\"1\":{\"611\":1,\"683\":1}}],[\"设计优化\",{\"1\":{\"799\":1}}],[\"设计一张字生表\",{\"1\":{\"603\":1,\"675\":1}}],[\"设计完成以后怎么查这些不同层级的评论\",{\"1\":{\"566\":1,\"638\":2}}],[\"设计\",{\"1\":{\"58\":1}}],[\"设计模式有了解过吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"设计模式\",{\"0\":{\"7\":1},\"1\":{\"595\":1,\"610\":1,\"667\":1,\"682\":1}}],[\"点\",{\"1\":{\"1130\":1}}],[\"点击了哪些内容等信息发送到每个数据中心的kafka集群上\",{\"1\":{\"1019\":1}}],[\"点击\",{\"1\":{\"850\":1}}],[\"点击next\",{\"1\":{\"849\":1}}],[\"点击开启后gitee\",{\"1\":{\"54\":1}}],[\"点点点\",{\"1\":{\"615\":1,\"687\":1}}],[\"点赞功能一般使用\",{\"1\":{\"638\":1}}],[\"点赞的底层逻辑怎么存的\",{\"1\":{\"566\":1,\"638\":2}}],[\"点赞是怎么设计的\",{\"1\":{\"566\":1,\"638\":2}}],[\"点赞\",{\"1\":{\"53\":1,\"641\":1,\"644\":1}}],[\"项目通常会有实际需求\",{\"1\":{\"644\":1}}],[\"项目团队的规模通常取决于项目的复杂度\",{\"1\":{\"639\":1}}],[\"项目功能\",{\"1\":{\"639\":1}}],[\"项目拷打\",{\"1\":{\"622\":1,\"694\":1}}],[\"项目拷打15分钟\",{\"1\":{\"562\":1,\"634\":1}}],[\"项目介绍\",{\"1\":{\"610\":1,\"682\":1}}],[\"项目工程\",{\"1\":{\"610\":1,\"682\":1}}],[\"项目收获比较大的地方\",{\"1\":{\"599\":1,\"671\":1}}],[\"项目的核心需求是实现高并发的订单处理系统\",{\"1\":{\"656\":1}}],[\"项目的目标用户群体可以是特定学校\",{\"1\":{\"639\":1}}],[\"项目的各种细节\",{\"1\":{\"611\":1,\"683\":1}}],[\"项目的收获\",{\"1\":{\"599\":1,\"671\":1}}],[\"项目的拥有者将收到\",{\"1\":{\"53\":1}}],[\"项目里redis防止超卖的方案\",{\"1\":{\"593\":1,\"665\":1}}],[\"项目里的redis是怎么用的\",{\"1\":{\"592\":1,\"664\":1}}],[\"项目里面遇到的最大的难题是什么\",{\"1\":{\"588\":1,\"660\":1}}],[\"项目初期的背景调研是怎么做的\",{\"1\":{\"588\":1,\"660\":1}}],[\"项目做完了吗\",{\"1\":{\"588\":1,\"660\":1}}],[\"项目相关\",{\"0\":{\"576\":1,\"648\":1}}],[\"项目v1中还有任务在线程池中\",{\"1\":{\"573\":1,\"645\":1}}],[\"项目v2要上线了\",{\"1\":{\"573\":1,\"645\":1}}],[\"项目后台不是部署在linux上的吗\",{\"1\":{\"572\":1,\"644\":1}}],[\"项目有实际需求吗\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"项目大概多少人参与\",{\"1\":{\"567\":1,\"639\":2}}],[\"项目背景可以根据具体的业务需求和目标来定\",{\"1\":{\"639\":1}}],[\"项目背景\",{\"1\":{\"567\":1,\"592\":1,\"597\":1,\"598\":1,\"639\":2,\"664\":1,\"669\":1,\"670\":1}}],[\"项目在运行了吗\",{\"1\":{\"566\":1,\"638\":2}}],[\"项目中的任务\",{\"1\":{\"645\":1}}],[\"项目中的架构设计有何问题\",{\"1\":{\"610\":1,\"682\":1}}],[\"项目中比较具有挑战性的部分通常是如何优化高并发的数据处理和网络通信\",{\"1\":{\"637\":1}}],[\"项目中比较有挑战性的事\",{\"1\":{\"565\":1,\"637\":2}}],[\"项目中涉及到哪些监控\",{\"1\":{\"614\":1,\"686\":1}}],[\"项目中算法如何使用\",{\"1\":{\"610\":1,\"682\":1}}],[\"项目中redis哪些地方用到了\",{\"1\":{\"606\":1,\"678\":1}}],[\"项目中redis哪些地方用了\",{\"1\":{\"569\":1,\"641\":2}}],[\"项目中有遇到过一些慢sql的情况吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"项目中有没有遇到jvm相关的问题\",{\"1\":{\"597\":1,\"669\":1}}],[\"项目中遇到的困难较高的场景\",{\"1\":{\"579\":1,\"651\":1}}],[\"项目中etcd用来干什么的\",{\"1\":{\"563\":1,\"635\":2}}],[\"项目\",{\"1\":{\"123\":1,\"645\":2,\"1183\":1}}],[\"项目以api为主\",{\"1\":{\"116\":1}}],[\"项目是做什么的\",{\"1\":{\"79\":1}}],[\"项目操作\",{\"1\":{\"53\":1}}],[\"项目主页配置\",{\"1\":{\"0\":1}}],[\"项目主页\",{\"0\":{\"0\":1}}],[\"时区\",{\"1\":{\"1341\":1}}],[\"时消费同⼀个分区\",{\"1\":{\"1027\":1}}],[\"时候会选择一个备胎\",{\"1\":{\"1020\":1}}],[\"时效性\",{\"1\":{\"1018\":1}}],[\"时间类型可以格式化输出\",{\"1\":{\"1431\":1}}],[\"时间单位\",{\"0\":{\"1430\":1}}],[\"时间操作的包\",{\"1\":{\"1308\":1}}],[\"时间格式为time\",{\"1\":{\"1307\":1}}],[\"时间\",{\"1\":{\"775\":1,\"810\":2,\"820\":8,\"821\":2,\"1307\":1,\"1341\":1}}],[\"时间的毫秒值\",{\"1\":{\"721\":1}}],[\"时间复杂度是o\",{\"1\":{\"1287\":1}}],[\"时间复杂度\",{\"1\":{\"639\":1}}],[\"时间复杂度为\",{\"1\":{\"638\":1,\"639\":1}}],[\"时间到期自动删除\",{\"1\":{\"635\":1}}],[\"时间戳中编码的时间是轮换时间\",{\"1\":{\"1307\":1}}],[\"时间戳机制\",{\"1\":{\"653\":1}}],[\"时间戳等条件\",{\"1\":{\"653\":1}}],[\"时间戳等\",{\"1\":{\"638\":1}}],[\"时间戳\",{\"1\":{\"625\":1,\"638\":1,\"697\":1,\"967\":1}}],[\"时间分析器具有可插拔的规则\",{\"1\":{\"144\":1}}],[\"时至今日\",{\"1\":{\"442\":1}}],[\"时序数据库\",{\"1\":{\"334\":2}}],[\"时\",{\"1\":{\"53\":1,\"121\":1,\"261\":1,\"634\":1,\"638\":1,\"641\":1}}],[\"怎样用\",{\"1\":{\"610\":1,\"682\":1}}],[\"怎样保证多线程来使用他\",{\"1\":{\"606\":1,\"678\":1}}],[\"怎样判断内存是否需要回收\",{\"1\":{\"588\":1,\"660\":1}}],[\"怎样防止多人抢单\",{\"1\":{\"566\":1,\"638\":2}}],[\"怎么动态调整容器数量\",{\"1\":{\"1212\":1}}],[\"怎么启动一个pod运行我们要的容器\",{\"1\":{\"1212\":1}}],[\"怎么样的结构\",{\"1\":{\"1190\":1}}],[\"怎么样才能让mysql不被压块的同时商品服务又能支持每秒10k次查询呢\",{\"1\":{\"1012\":1}}],[\"怎么查找定位是具体哪个sql出现慢查询\",{\"1\":{\"901\":1}}],[\"怎么改\",{\"1\":{\"625\":1,\"697\":1}}],[\"怎么处理\",{\"1\":{\"618\":1,\"690\":1}}],[\"怎么保持高可用\",{\"1\":{\"618\":1,\"690\":1}}],[\"怎么保证是不超卖的呢\",{\"1\":{\"593\":1,\"665\":1}}],[\"怎么实现用户登录\",{\"1\":{\"624\":1,\"696\":1}}],[\"怎么实现分布式锁\",{\"1\":{\"618\":1,\"690\":1}}],[\"怎么实现乐观锁和悲观锁\",{\"1\":{\"584\":1,\"656\":1}}],[\"怎么部署那个安全拦截服务的\",{\"1\":{\"615\":1,\"687\":1}}],[\"怎么去防那个ddos\",{\"1\":{\"615\":1,\"687\":1}}],[\"怎么设计\",{\"1\":{\"625\":2,\"697\":2}}],[\"怎么设计一个api的\",{\"1\":{\"615\":1,\"687\":1}}],[\"怎么设置jwt的校验不通过呢\",{\"1\":{\"592\":1,\"664\":1}}],[\"怎么确保线程安全\",{\"1\":{\"609\":1,\"681\":1}}],[\"怎么找到的方案\",{\"1\":{\"607\":1,\"679\":1}}],[\"怎么考量用乐观锁还是悲观锁的\",{\"1\":{\"597\":1,\"669\":1}}],[\"怎么扩容\",{\"1\":{\"595\":1,\"667\":1}}],[\"怎么判断一个系统是否已经挂掉了\",{\"1\":{\"655\":1}}],[\"怎么判断一个系统是否已经挂调了\",{\"1\":{\"583\":1,\"655\":1}}],[\"怎么判断jwt的合法性\",{\"1\":{\"592\":1,\"664\":1}}],[\"怎么个情况\",{\"1\":{\"590\":1,\"662\":1}}],[\"怎么做\",{\"0\":{\"779\":1}}],[\"怎么做到短连接唯一\",{\"1\":{\"625\":1,\"697\":1}}],[\"怎么做到指定具体的垃圾清除时间的\",{\"1\":{\"588\":1,\"660\":1}}],[\"怎么做有一个有序的排序\",{\"1\":{\"580\":1,\"652\":1}}],[\"怎么管理\",{\"1\":{\"588\":1,\"660\":1}}],[\"怎么理解乐观锁和悲观锁的\",{\"1\":{\"597\":1,\"669\":1}}],[\"怎么理解redis事务\",{\"1\":{\"587\":1,\"659\":1}}],[\"怎么理解io多路复用\",{\"1\":{\"573\":1,\"645\":1}}],[\"怎么把node里的pod暴露给外面使用\",{\"1\":{\"583\":1,\"655\":2}}],[\"怎么感知服务集群的变化\",{\"1\":{\"580\":1,\"652\":1}}],[\"怎么避免回表操作\",{\"1\":{\"569\":1,\"641\":2}}],[\"怎么避免内存逃逸\",{\"1\":{\"547\":1}}],[\"怎么加锁\",{\"1\":{\"567\":1,\"639\":2}}],[\"怎么解决雪崩问题呢\",{\"1\":{\"1165\":1}}],[\"怎么解决这个问题\",{\"1\":{\"800\":1}}],[\"怎么解决他的哈希冲突\",{\"1\":{\"595\":1,\"667\":1}}],[\"怎么解决\",{\"1\":{\"564\":1,\"594\":1,\"619\":1,\"636\":2,\"666\":1,\"691\":1}}],[\"怎么看一个线程在线程日志里是卡在循环还是事件等待\",{\"1\":{\"562\":1,\"634\":2}}],[\"怎么才能避免呢\",{\"1\":{\"549\":1}}],[\"怎么分析内存逃逸\",{\"0\":{\"549\":1}}],[\"怎么学习开源项目\",{\"1\":{\"79\":1}}],[\"怎么共享呢\",{\"1\":{\"39\":1}}],[\"怎们办\",{\"1\":{\"53\":1}}],[\"维度\",{\"1\":{\"1057\":1}}],[\"维持和管理连接\",{\"1\":{\"776\":1}}],[\"维护两个指针从两端向中间移动\",{\"1\":{\"656\":1}}],[\"维护一个g的本地队列用于管理和分配g到m上运行\",{\"1\":{\"541\":1}}],[\"维护成本\",{\"1\":{\"117\":1}}],[\"维护代码\",{\"1\":{\"53\":1}}],[\"维基百科\",{\"0\":{\"10\":1}}],[\"wyh\",{\"1\":{\"1321\":2,\"1380\":1,\"1381\":1}}],[\"wyh246859\",{\"1\":{\"893\":1}}],[\"woof\",{\"1\":{\"651\":2}}],[\"world\",{\"0\":{\"1185\":1},\"1\":{\"186\":1,\"211\":1,\"217\":1,\"218\":2,\"219\":1,\"220\":2,\"221\":4,\"234\":1,\"254\":1,\"258\":1,\"338\":2,\"350\":1,\"354\":1,\"357\":2,\"373\":2,\"401\":3,\"402\":14,\"412\":3,\"436\":5,\"441\":1,\"446\":2,\"477\":4,\"512\":1,\"863\":3,\"910\":1,\"1035\":1,\"1047\":1,\"1184\":1,\"1185\":1,\"1188\":1,\"1275\":1,\"1286\":1,\"1400\":14,\"1411\":2,\"1415\":2,\"1417\":10,\"1423\":2,\"1447\":1,\"1448\":1}}],[\"word\",{\"0\":{\"1275\":1},\"1\":{\"143\":1,\"347\":2,\"741\":1,\"742\":1,\"745\":1,\"1277\":1}}],[\"workdir\",{\"1\":{\"1193\":1}}],[\"works\",{\"1\":{\"1053\":1}}],[\"workspace\",{\"1\":{\"326\":1,\"393\":4,\"462\":1,\"1328\":5}}],[\"work如下所示\",{\"1\":{\"465\":1}}],[\"work中的的replace指令会作用于所有的模块\",{\"1\":{\"465\":1}}],[\"work中添加一个新模块\",{\"1\":{\"464\":1}}],[\"work仅用于演示\",{\"1\":{\"463\":1}}],[\"work也不应该提交到vcs中\",{\"1\":{\"463\":1}}],[\"work文件的内容很简单\",{\"1\":{\"465\":1}}],[\"work文件仅用在开发过程中\",{\"1\":{\"463\":1}}],[\"work文件\",{\"1\":{\"463\":1}}],[\"work\",{\"1\":{\"293\":4,\"462\":2,\"463\":5,\"464\":2,\"470\":1}}],[\"worker节点使用worker\",{\"1\":{\"1235\":1}}],[\"worker进程的数量\",{\"1\":{\"1131\":1}}],[\"worker进程工作数设置\",{\"1\":{\"1130\":1}}],[\"worker进程\",{\"1\":{\"618\":1,\"690\":1,\"1126\":2}}],[\"workers\",{\"1\":{\"477\":1}}],[\"workerpool\",{\"1\":{\"137\":1}}],[\"worker\",{\"1\":{\"137\":1,\"1123\":2,\"1126\":1,\"1130\":2,\"1131\":2,\"1158\":2,\"1225\":1}}],[\"workpool\",{\"1\":{\"122\":2}}],[\"wu\",{\"1\":{\"516\":1}}],[\"w格式动词\",{\"1\":{\"392\":1}}],[\"wr\",{\"1\":{\"1415\":1,\"1425\":1}}],[\"wrong\",{\"1\":{\"514\":1,\"635\":1}}],[\"wronly|os\",{\"1\":{\"403\":2}}],[\"wronly或o\",{\"1\":{\"402\":1}}],[\"wronly\",{\"1\":{\"400\":2}}],[\"writing\",{\"1\":{\"449\":1,\"1078\":1}}],[\"written\",{\"1\":{\"403\":3,\"477\":2}}],[\"writecloser\",{\"1\":{\"1307\":1}}],[\"writeconsole\",{\"1\":{\"1304\":1}}],[\"writeboth\",{\"1\":{\"1304\":2}}],[\"write机制中获益\",{\"1\":{\"988\":1}}],[\"writetimeout\",{\"1\":{\"911\":1,\"1336\":1}}],[\"writeto\",{\"1\":{\"323\":1}}],[\"writefile\",{\"1\":{\"402\":3,\"403\":1,\"1304\":1}}],[\"writefile与io\",{\"1\":{\"402\":1}}],[\"writeat\",{\"1\":{\"402\":1}}],[\"writesyncer\",{\"1\":{\"1302\":2,\"1304\":2,\"1307\":3}}],[\"writes\",{\"1\":{\"266\":1,\"436\":1,\"982\":1}}],[\"writestring\",{\"1\":{\"217\":1,\"220\":1,\"257\":2,\"402\":6,\"446\":2,\"475\":1,\"1411\":2}}],[\"write\",{\"1\":{\"223\":1,\"402\":1,\"406\":1,\"418\":2,\"419\":2,\"421\":1,\"431\":2,\"432\":2,\"435\":1,\"993\":1,\"994\":1,\"1244\":1,\"1245\":2,\"1256\":4,\"1257\":1,\"1261\":4,\"1262\":1,\"1265\":2,\"1266\":2,\"1374\":1}}],[\"writerto\",{\"1\":{\"1413\":1}}],[\"writer等\",{\"1\":{\"1308\":1}}],[\"writeresult\",{\"1\":{\"859\":1,\"860\":1}}],[\"writer\",{\"1\":{\"124\":1,\"127\":2,\"220\":6,\"279\":2,\"320\":2,\"402\":1,\"403\":1,\"435\":1,\"1302\":1,\"1303\":4,\"1304\":4,\"1307\":2,\"1337\":1,\"1338\":2,\"1341\":2,\"1415\":1,\"1417\":3,\"1425\":4}}],[\"wrap2\",{\"1\":{\"393\":4}}],[\"wrappederr\",{\"1\":{\"435\":1}}],[\"wrapperror同样实现了error接口\",{\"1\":{\"392\":1}}],[\"wrapp\",{\"1\":{\"393\":2}}],[\"wrap1\",{\"1\":{\"393\":4}}],[\"wraperrs\",{\"1\":{\"435\":1}}],[\"wraperr\",{\"1\":{\"392\":1}}],[\"wraperror\",{\"1\":{\"392\":3}}],[\"w\",{\"1\":{\"258\":4,\"297\":1,\"320\":2,\"323\":6,\"392\":1,\"393\":2,\"402\":1,\"435\":2,\"444\":1,\"451\":1,\"457\":1,\"1164\":4,\"1341\":1}}],[\"what\",{\"1\":{\"1010\":2}}],[\"whatlanggo\",{\"1\":{\"144\":1}}],[\"which\",{\"1\":{\"1163\":1}}],[\"whitelist\",{\"1\":{\"724\":3}}],[\"while\",{\"1\":{\"477\":1,\"820\":2,\"863\":2,\"1164\":1}}],[\"where和using\",{\"1\":{\"817\":1}}],[\"where条件里用不到的字段不建立索引\",{\"1\":{\"811\":1}}],[\"where\",{\"1\":{\"581\":1,\"653\":3,\"780\":1,\"796\":2,\"806\":4,\"810\":2,\"814\":24,\"817\":2,\"818\":12,\"819\":5,\"820\":3,\"821\":5,\"861\":11,\"882\":2,\"893\":1,\"895\":1,\"896\":1,\"1244\":1,\"1254\":3,\"1256\":1,\"1260\":1,\"1264\":1}}],[\"when\",{\"1\":{\"144\":1,\"825\":1,\"1163\":2}}],[\"why\",{\"1\":{\"456\":1}}],[\"wg\",{\"1\":{\"422\":3,\"545\":5,\"556\":4,\"654\":4,\"1047\":4,\"1374\":4}}],[\"wgs84\",{\"1\":{\"135\":1}}],[\"wget\",{\"1\":{\"84\":1,\"964\":1,\"1028\":1,\"1111\":1,\"1223\":1,\"1228\":1}}],[\"wifi\",{\"1\":{\"1194\":1}}],[\"wire\",{\"1\":{\"702\":1}}],[\"will\",{\"1\":{\"470\":1,\"1163\":1}}],[\"willf\",{\"1\":{\"127\":1}}],[\"with会检查管道操作返回的值\",{\"1\":{\"1422\":1}}],[\"withscores\",{\"1\":{\"974\":4}}],[\"withsalary\",{\"1\":{\"269\":2}}],[\"within\",{\"1\":{\"724\":1}}],[\"withindex\",{\"1\":{\"706\":1}}],[\"withbody\",{\"1\":{\"704\":1,\"706\":1,\"713\":2}}],[\"withhuman\",{\"1\":{\"702\":2,\"705\":1,\"706\":1}}],[\"withpretty\",{\"1\":{\"702\":1,\"705\":1,\"706\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":3}}],[\"withtimeout其实与withdealine非常相似\",{\"1\":{\"428\":1}}],[\"withtimeout\",{\"1\":{\"428\":2,\"546\":2}}],[\"withdeadline\",{\"1\":{\"428\":3,\"470\":1,\"546\":2}}],[\"withcancel\",{\"1\":{\"427\":5,\"546\":2}}],[\"withcancel源代码中所示\",{\"1\":{\"427\":1}}],[\"withvalue\",{\"1\":{\"426\":1,\"546\":2}}],[\"with\",{\"0\":{\"1422\":1},\"1\":{\"289\":1,\"303\":2,\"326\":2,\"347\":1,\"453\":1,\"454\":1,\"470\":1,\"477\":1,\"741\":1,\"993\":1,\"1010\":2,\"1116\":3,\"1132\":4,\"1173\":4,\"1422\":4,\"1425\":6}}],[\"withaddress\",{\"1\":{\"269\":2}}],[\"withage\",{\"1\":{\"269\":3,\"513\":1}}],[\"withname\",{\"1\":{\"269\":3,\"513\":1}}],[\"width=24\",{\"1\":{\"318\":1}}],[\"width\",{\"1\":{\"258\":2,\"267\":1,\"515\":6}}],[\"window下安装redis服务\",{\"0\":{\"963\":1}}],[\"windows系统\",{\"1\":{\"986\":1}}],[\"windows用户建议提前安装好mingw\",{\"1\":{\"296\":1}}],[\"windows正在开发中\",{\"1\":{\"138\":1}}],[\"windows\",{\"0\":{\"852\":1},\"1\":{\"122\":1,\"124\":1,\"138\":3,\"153\":1,\"475\":1,\"476\":3,\"738\":1,\"767\":1,\"963\":1}}],[\"win+r\",{\"1\":{\"852\":1}}],[\"win+r键\",{\"1\":{\"851\":1}}],[\"winter\",{\"1\":{\"213\":3}}],[\"winrm\",{\"1\":{\"145\":1}}],[\"wen02\",{\"1\":{\"1197\":9}}],[\"wen01\",{\"1\":{\"1197\":8,\"1198\":2}}],[\"went\",{\"1\":{\"514\":1,\"635\":1}}],[\"weight=3\",{\"1\":{\"1162\":1}}],[\"weight=2\",{\"1\":{\"1162\":1,\"1163\":6}}],[\"weight=10\",{\"1\":{\"1163\":3}}],[\"weight=1\",{\"1\":{\"1162\":1,\"1163\":2}}],[\"weight默认值是\",{\"1\":{\"1162\":1}}],[\"weight的数值与访问比率成正比\",{\"1\":{\"1162\":1}}],[\"weight的默认值为1\",{\"1\":{\"1162\":1}}],[\"weight参数用于指定轮询几率\",{\"1\":{\"1162\":1}}],[\"weight\",{\"1\":{\"1160\":1,\"1163\":1,\"1164\":3}}],[\"weibo索引不存在\",{\"1\":{\"745\":1}}],[\"welcome\",{\"1\":{\"766\":2}}],[\"welch编码格式的压缩的数据格式\",{\"1\":{\"124\":1}}],[\"we\",{\"1\":{\"453\":1}}],[\"were\",{\"1\":{\"326\":1}}],[\"werr\",{\"1\":{\"131\":1}}],[\"web2\",{\"1\":{\"1195\":1}}],[\"web03\",{\"1\":{\"1196\":5,\"1197\":1}}],[\"web02\",{\"1\":{\"1195\":2,\"1196\":11,\"1197\":1}}],[\"web01\",{\"1\":{\"1194\":2,\"1195\":1,\"1196\":2,\"1197\":2,\"1198\":3}}],[\"web1\",{\"1\":{\"1163\":1,\"1195\":1}}],[\"weblogs\",{\"1\":{\"1108\":1}}],[\"web管理界面kafka\",{\"1\":{\"1055\":1}}],[\"webserver\",{\"1\":{\"1108\":1}}],[\"webscoket\",{\"1\":{\"1108\":1}}],[\"website\",{\"1\":{\"717\":2,\"718\":1,\"719\":1,\"721\":5,\"723\":2}}],[\"websockets和love构建的高性能\",{\"1\":{\"128\":1}}],[\"websocket\",{\"1\":{\"122\":2,\"637\":1}}],[\"web开发是go语言中一个很常见的应用场景\",{\"1\":{\"330\":1}}],[\"web开发\",{\"0\":{\"330\":1}}],[\"webvtt\",{\"1\":{\"146\":1}}],[\"webview\",{\"1\":{\"138\":1}}],[\"webrtc\",{\"1\":{\"145\":2}}],[\"webroot\",{\"1\":{\"84\":2}}],[\"webcolors库的端口\",{\"1\":{\"139\":1}}],[\"webcolors\",{\"1\":{\"139\":1}}],[\"web服务会根据路由来匹配已经定义的路由来进行访问\",{\"1\":{\"110\":1}}],[\"web框架的依赖要远比python\",{\"1\":{\"1273\":1}}],[\"web框架\",{\"0\":{\"108\":1}}],[\"web\",{\"0\":{\"158\":1},\"1\":{\"158\":2,\"641\":1,\"645\":1,\"1087\":2,\"1092\":1,\"1108\":2,\"1166\":2,\"1193\":3,\"1197\":1,\"1198\":1,\"1289\":1},\"2\":{\"86\":1,\"1104\":1,\"1176\":1}}],[\"web版本有两个\",{\"1\":{\"74\":1}}],[\"was\",{\"1\":{\"1163\":1}}],[\"warn\",{\"1\":{\"1130\":1,\"1131\":1,\"1151\":1,\"1152\":1,\"1164\":1}}],[\"warning\",{\"1\":{\"61\":1,\"62\":1,\"453\":3,\"965\":1}}],[\"way`\",{\"1\":{\"817\":1}}],[\"wantedby=sockets\",{\"1\":{\"1223\":1}}],[\"wantedby=multi\",{\"1\":{\"1032\":1,\"1223\":1}}],[\"wants=network\",{\"1\":{\"1223\":1}}],[\"want\",{\"1\":{\"491\":5,\"494\":4,\"502\":1,\"1010\":4}}],[\"walk会递归遍历整个文件夹\",{\"1\":{\"410\":1}}],[\"walk\",{\"1\":{\"138\":1,\"291\":1,\"293\":5,\"410\":1}}],[\"waitforall\",{\"1\":{\"1035\":1,\"1047\":1}}],[\"waiting\",{\"1\":{\"634\":1,\"768\":1}}],[\"wait状态\",{\"1\":{\"614\":1,\"686\":1}}],[\"wait的作用是什么\",{\"1\":{\"569\":1,\"641\":2}}],[\"wait方法等待子协程结束\",{\"1\":{\"422\":1}}],[\"wait\",{\"1\":{\"266\":1,\"396\":1,\"422\":15,\"426\":1,\"427\":2,\"428\":5,\"429\":5,\"430\":5,\"431\":8,\"432\":11,\"434\":5,\"435\":5,\"436\":10,\"545\":2,\"556\":1,\"641\":1,\"654\":1,\"776\":1,\"1047\":1,\"1374\":1}}],[\"waitgroup可用于等待一组协程完成任务\",{\"1\":{\"545\":1}}],[\"waitgroup可以动态的控制一组指定数量的协程\",{\"1\":{\"412\":1}}],[\"waitgroup的值不应该被复制\",{\"1\":{\"422\":1}}],[\"waitgroup通常适用于可动态调整协程数量的时候\",{\"1\":{\"422\":1}}],[\"waitgroup替代了原先的time\",{\"1\":{\"422\":1}}],[\"waitgroup使用起来十分简单\",{\"1\":{\"422\":1}}],[\"waitgroup即等待执行\",{\"1\":{\"422\":1}}],[\"waitgroup是sync包下提供的一个结构体\",{\"1\":{\"422\":1}}],[\"waitgroup类似的队列组可访问性\",{\"1\":{\"137\":1}}],[\"waitgroup与错误处理和并发控制类似\",{\"1\":{\"137\":1}}],[\"waitgroup\",{\"0\":{\"422\":1,\"545\":1},\"1\":{\"137\":1,\"396\":5,\"412\":1,\"422\":8,\"426\":5,\"427\":12,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"434\":1,\"435\":1,\"436\":2,\"537\":1,\"543\":1,\"545\":1,\"556\":1,\"651\":1,\"654\":1,\"1047\":1,\"1374\":1}}],[\"wails\",{\"1\":{\"138\":1}}],[\"water\",{\"1\":{\"145\":1}}],[\"waterfall等等\",{\"1\":{\"137\":1}}],[\"watch\",{\"1\":{\"53\":1}}],[\"waveform\",{\"1\":{\"126\":1}}],[\"www\",{\"1\":{\"43\":3,\"49\":1,\"84\":1,\"511\":1,\"736\":2,\"737\":1,\"771\":1,\"802\":1,\"803\":1,\"805\":1,\"841\":1,\"847\":1,\"849\":1,\"853\":1,\"876\":1,\"878\":1,\"885\":1,\"886\":1,\"955\":1,\"981\":1,\"985\":2,\"1003\":1,\"1004\":3,\"1010\":20,\"1028\":2,\"1110\":2,\"1135\":5,\"1136\":4,\"1139\":4,\"1142\":2,\"1143\":3,\"1144\":3,\"1165\":1,\"1166\":1,\"1175\":1,\"1281\":1}}],[\"圈内人还是很克制的\",{\"1\":{\"53\":1}}],[\"会覆盖默认的内容\",{\"1\":{\"1427\":1}}],[\"会优先匹配更具体的路径\",{\"1\":{\"1287\":1}}],[\"会根据\",{\"1\":{\"1283\":2}}],[\"会代理请求到\",{\"1\":{\"1233\":1}}],[\"会到达同一台服务器\",{\"1\":{\"1166\":1}}],[\"会涉及到nginx操作目录或文件的一些权限\",{\"1\":{\"1130\":1}}],[\"会涉及到hash槽的分配\",{\"1\":{\"1010\":1}}],[\"会从follower选举一个作为leader继续工作\",{\"1\":{\"1064\":1}}],[\"会首先连接\",{\"1\":{\"999\":1}}],[\"会为aof提供了策略配置\",{\"1\":{\"987\":1}}],[\"会暂时将数据存储在一个内存缓冲区中\",{\"1\":{\"985\":1}}],[\"会严重影响性能\",{\"1\":{\"980\":1}}],[\"会把key存放内存\",{\"1\":{\"965\":1}}],[\"会回调这个函数\",{\"1\":{\"911\":1}}],[\"会过滤掉name中的相同数据\",{\"1\":{\"861\":1}}],[\"会消耗大量cpu和内存资源在算法的缓存\",{\"1\":{\"816\":1}}],[\"会显示查询访问的分区\",{\"1\":{\"814\":1}}],[\"会显示在某个\",{\"1\":{\"634\":1}}],[\"会耗费时间\",{\"1\":{\"809\":1}}],[\"会发现这行日志有几个问题\",{\"1\":{\"1303\":1}}],[\"会发现myint的值依旧是1\",{\"1\":{\"286\":1}}],[\"会发起一起磁盘io\",{\"1\":{\"800\":1}}],[\"会造成该组合索引字段的右侧索引全部失效\",{\"1\":{\"818\":1}}],[\"会造成层级过深\",{\"1\":{\"802\":1}}],[\"会造成列上的索引失效\",{\"1\":{\"794\":1}}],[\"会造成读写速度变慢\",{\"1\":{\"792\":1}}],[\"会造成大量的不必要的协程竞争锁\",{\"1\":{\"431\":1}}],[\"会占用更大的磁盘和内存空间\",{\"1\":{\"791\":1}}],[\"会集中存储您的数据\",{\"1\":{\"700\":1}}],[\"会使用根目录\",{\"1\":{\"1029\":1}}],[\"会使用\",{\"1\":{\"649\":1}}],[\"会重新分配一个更大的底层数组\",{\"1\":{\"649\":1}}],[\"会扩容为原来的两倍\",{\"1\":{\"638\":1}}],[\"会话存储\",{\"1\":{\"635\":1}}],[\"会通过\",{\"1\":{\"635\":1,\"1286\":1}}],[\"会在启动kafka的当前目录下生成一个nohup\",{\"1\":{\"1033\":1}}],[\"会在客户端请求该文件时自动返回相应的\",{\"1\":{\"743\":1}}],[\"会在写库失败后将消息放入死信队列\",{\"1\":{\"641\":1}}],[\"会在后台自动进行\",{\"1\":{\"635\":1}}],[\"会在程序的调用栈中逐层向上冒泡\",{\"1\":{\"635\":1}}],[\"会出现\",{\"1\":{\"819\":3}}],[\"会出现哈希冲突\",{\"1\":{\"634\":1}}],[\"会出现什么问题\",{\"1\":{\"566\":1,\"618\":1,\"638\":2,\"690\":1}}],[\"会分配一个端口\",{\"1\":{\"1234\":1}}],[\"会分配新的内存\",{\"1\":{\"633\":1}}],[\"会分布在不同的\",{\"1\":{\"1060\":1}}],[\"会分析一段时间并下载一个文件\",{\"1\":{\"324\":1}}],[\"会启动\",{\"1\":{\"633\":1}}],[\"会怎么样\",{\"1\":{\"587\":1,\"659\":1}}],[\"会加什么锁\",{\"1\":{\"584\":1,\"656\":1}}],[\"会不会有并发的问题\",{\"1\":{\"592\":1,\"664\":1}}],[\"会不会k8s\",{\"1\":{\"580\":1,\"652\":1}}],[\"会不会合并\",{\"1\":{\"579\":1,\"651\":1}}],[\"会不会分配内存\",{\"1\":{\"579\":1,\"651\":3}}],[\"会什么语言\",{\"1\":{\"564\":1,\"636\":2}}],[\"会导致nums的数据也会发生变化\",{\"1\":{\"1446\":1}}],[\"会导致其所在的后端负载较高\",{\"1\":{\"1167\":1}}],[\"会导致rabbitmq的性能急剧下降\",{\"1\":{\"1053\":1}}],[\"会导致索引失效\",{\"1\":{\"641\":1}}],[\"会导致程序崩溃\",{\"1\":{\"635\":1}}],[\"会导致新的切片分配内存\",{\"1\":{\"633\":1}}],[\"会导致gc的压力增加\",{\"1\":{\"548\":1}}],[\"会导致该协程阻塞\",{\"1\":{\"418\":1}}],[\"会被重命名\",{\"1\":{\"1307\":1}}],[\"会被当做missing\",{\"1\":{\"725\":1}}],[\"会被分词\",{\"1\":{\"718\":1}}],[\"会被放到全局队列\",{\"1\":{\"635\":1}}],[\"会被放入某一个p的本地队列中\",{\"1\":{\"542\":1}}],[\"会被保存在本地\",{\"1\":{\"46\":1}}],[\"会引起panic\",{\"1\":{\"535\":1}}],[\"会需要用到在一个测试用例中测试另外测试用例\",{\"1\":{\"473\":1}}],[\"会将前者所指向的地址作为后者的值\",{\"1\":{\"1443\":1}}],[\"会将所有符号连接转换为真实路径\",{\"1\":{\"1133\":1}}],[\"会将最新的主节点地址告诉客户端\",{\"1\":{\"999\":1}}],[\"会将敏感信息暴露在\",{\"1\":{\"638\":1}}],[\"会将消息进行\",{\"1\":{\"637\":1}}],[\"会将当前用例标记为skip\",{\"1\":{\"471\":1}}],[\"会将接收者的值传入方法中\",{\"1\":{\"286\":1}}],[\"会有mysql数据库\",{\"1\":{\"1199\":1}}],[\"会有订单业务购物车业务\",{\"1\":{\"1198\":1}}],[\"会有什么影响\",{\"0\":{\"548\":1},\"1\":{\"594\":1,\"666\":1}}],[\"会有好几个版本命名的文件\",{\"1\":{\"460\":1}}],[\"会有两个返回值\",{\"1\":{\"420\":1}}],[\"会一直阻塞直到全部计数减为0\",{\"1\":{\"422\":1}}],[\"会先查找查询缓存\",{\"1\":{\"777\":1}}],[\"会先从缓冲区中读取数据\",{\"1\":{\"417\":1}}],[\"会先将数据放入缓冲区里\",{\"1\":{\"417\":1}}],[\"会用到os包下的rename函数\",{\"1\":{\"404\":1}}],[\"会立即尝试停止所有正在执行的任务\",{\"1\":{\"645\":1}}],[\"会立即退出所在函数\",{\"1\":{\"396\":1}}],[\"会立即告诉程序员不应该这么做\",{\"1\":{\"381\":1}}],[\"会获得其指向元素的反射类型\",{\"1\":{\"352\":1}}],[\"会返回一个指针与错误\",{\"1\":{\"1330\":1}}],[\"会返回一个err来解释为什么会关闭\",{\"1\":{\"424\":1}}],[\"会返回一个unsafe\",{\"1\":{\"303\":1}}],[\"会返回错误\",{\"1\":{\"402\":1}}],[\"会返回map的键反射类型\",{\"1\":{\"352\":1}}],[\"会返回对应类型的指针\",{\"1\":{\"275\":1}}],[\"会对其底层类型进行比较\",{\"1\":{\"294\":1}}],[\"会继续执行下一个分支\",{\"1\":{\"230\":1}}],[\"会去掉多余的0\",{\"1\":{\"221\":1}}],[\"会计和财务软件包\",{\"1\":{\"120\":1}}],[\"会自动剔除该服务器\",{\"1\":{\"1161\":1}}],[\"会自动进行\",{\"1\":{\"996\":1}}],[\"会自动执行bgsave命令\",{\"1\":{\"981\":1}}],[\"会自动转换成json格式\",{\"1\":{\"746\":1}}],[\"会自动检测类型是否实现了接口的所有方法\",{\"1\":{\"637\":1}}],[\"会自动调用value\",{\"1\":{\"360\":1}}],[\"会自动生成一个域名\",{\"1\":{\"54\":1}}],[\"会自动去\",{\"1\":{\"52\":1}}],[\"会默认用户目录\",{\"1\":{\"50\":1}}],[\"rg\",{\"1\":{\"1265\":10,\"1266\":8}}],[\"rg2\",{\"1\":{\"1263\":1,\"1265\":2,\"1266\":1}}],[\"rg1\",{\"1\":{\"1263\":1,\"1265\":2,\"1266\":1}}],[\"rgf93\",{\"1\":{\"135\":1}}],[\"r=\",{\"1\":{\"1251\":1}}],[\"rbac模型\",{\"0\":{\"1262\":1,\"1266\":1}}],[\"rbac代表基于角色的访问控制\",{\"1\":{\"1259\":1}}],[\"rbac\",{\"1\":{\"1238\":2,\"1239\":1}}],[\"rbms\",{\"1\":{\"1197\":1}}],[\"rf\",{\"1\":{\"1184\":2}}],[\"rfc\",{\"1\":{\"145\":2}}],[\"rtt\",{\"1\":{\"1195\":2,\"1196\":1,\"1197\":3}}],[\"rt越来越高\",{\"1\":{\"1156\":1}}],[\"rtype\",{\"1\":{\"347\":3,\"348\":1,\"352\":5,\"364\":6,\"365\":2,\"367\":7,\"369\":2,\"370\":8,\"374\":2}}],[\"rhel\",{\"1\":{\"1078\":1}}],[\"r图\",{\"1\":{\"793\":1}}],[\"rrp\",{\"1\":{\"1164\":1}}],[\"rr\",{\"1\":{\"1164\":15}}],[\"rr能解决幻读吗\",{\"1\":{\"618\":1,\"690\":1}}],[\"rr如何解决不可重复读\",{\"1\":{\"604\":1,\"676\":1}}],[\"rr是怎么实现的\",{\"1\":{\"603\":1,\"675\":1}}],[\"rresvalue\",{\"1\":{\"365\":2}}],[\"rrestype\",{\"1\":{\"364\":2}}],[\"rlocker方法获得\",{\"1\":{\"432\":1}}],[\"rlocker\",{\"1\":{\"432\":7}}],[\"rlock\",{\"1\":{\"431\":2,\"432\":2,\"557\":1,\"1164\":1}}],[\"rwm\",{\"1\":{\"557\":4}}],[\"rwmutex\",{\"1\":{\"412\":1,\"431\":8,\"432\":5,\"557\":1,\"595\":1,\"635\":1,\"639\":1,\"649\":1,\"667\":1}}],[\"rw\",{\"1\":{\"431\":11,\"432\":8}}],[\"rdb文件\",{\"1\":{\"988\":1}}],[\"rdb持久化\",{\"1\":{\"988\":1}}],[\"rdb的数据压缩\",{\"0\":{\"983\":1}}],[\"rdb的错误处理\",{\"0\":{\"982\":1}}],[\"rdbcompression\",{\"1\":{\"965\":1,\"983\":1}}],[\"rdbms\",{\"1\":{\"846\":1,\"848\":1,\"904\":1}}],[\"rdbms的核心在于对实体和联系的定义\",{\"1\":{\"793\":1}}],[\"rdb\",{\"0\":{\"980\":1},\"1\":{\"562\":1,\"634\":1,\"651\":1,\"965\":2,\"979\":1,\"980\":2,\"981\":6}}],[\"rdwr|o\",{\"1\":{\"402\":1}}],[\"rdwr|os\",{\"1\":{\"400\":1,\"401\":2,\"402\":3,\"410\":1}}],[\"rdwr的模式打开\",{\"1\":{\"402\":1}}],[\"rdwr\",{\"1\":{\"400\":2}}],[\"rdonly\",{\"1\":{\"400\":3,\"403\":2}}],[\"ruby\",{\"1\":{\"1238\":1}}],[\"ru站点\",{\"1\":{\"1107\":1}}],[\"rust\",{\"1\":{\"1238\":1}}],[\"rust同样也是返回错误值\",{\"1\":{\"388\":1}}],[\"russross\",{\"1\":{\"454\":1}}],[\"run=^$\",{\"1\":{\"630\":2}}],[\"run=testputandgetkeyvalue\",{\"1\":{\"503\":1}}],[\"run=\",{\"1\":{\"482\":1}}],[\"run=fuzzreverse\",{\"1\":{\"477\":3}}],[\"run方法会开启一个新的协程用于运行子测试\",{\"1\":{\"473\":1}}],[\"run参数来指定\",{\"1\":{\"468\":1}}],[\"run直接运行\",{\"1\":{\"450\":1}}],[\"runlock\",{\"1\":{\"431\":2,\"432\":2,\"557\":1}}],[\"running恢复为yes\",{\"1\":{\"825\":1}}],[\"running\",{\"1\":{\"328\":1,\"453\":1,\"454\":1,\"634\":1,\"825\":3,\"1225\":2}}],[\"run\",{\"0\":{\"489\":1},\"1\":{\"287\":9,\"447\":2,\"450\":1,\"453\":2,\"463\":1,\"468\":6,\"469\":2,\"470\":3,\"471\":8,\"472\":2,\"473\":23,\"475\":1,\"476\":2,\"477\":15,\"487\":4,\"489\":1,\"494\":1,\"498\":1,\"502\":2,\"515\":5,\"549\":1,\"775\":2,\"822\":3,\"849\":1,\"965\":2,\"1075\":1,\"1076\":1,\"1077\":1,\"1078\":1,\"1079\":1,\"1081\":2,\"1116\":3,\"1132\":1,\"1171\":3,\"1173\":1,\"1182\":1,\"1184\":1,\"1185\":1,\"1188\":1,\"1193\":2,\"1194\":1,\"1196\":1,\"1197\":5,\"1225\":2,\"1226\":2,\"1227\":1,\"1275\":2,\"1277\":1,\"1280\":1,\"1281\":1,\"1282\":1,\"1283\":1,\"1289\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1350\":1,\"1351\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1355\":1,\"1356\":1,\"1357\":1,\"1358\":1,\"1359\":1,\"1360\":1,\"1361\":1,\"1362\":1,\"1363\":1,\"1364\":1,\"1384\":1,\"1385\":1,\"1386\":1,\"1387\":1,\"1388\":1,\"1389\":1,\"1390\":1,\"1391\":1,\"1392\":1,\"1393\":1,\"1396\":1,\"1397\":1,\"1398\":3,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":1,\"1409\":1,\"1410\":1,\"1411\":1,\"1413\":1}}],[\"runereader\",{\"1\":{\"1413\":1}}],[\"rune切片\",{\"1\":{\"537\":1}}],[\"rune切片中rune是int32可以存储中文这个3个字节的大小\",{\"1\":{\"511\":1}}],[\"rune表示范围更大\",{\"1\":{\"537\":1}}],[\"runewidth\",{\"1\":{\"454\":1}}],[\"runescanner\",{\"1\":{\"1413\":1}}],[\"runes\",{\"1\":{\"258\":4}}],[\"rune再遍历也是一样的道理\",{\"1\":{\"258\":1}}],[\"rune本质上是int32的类型别名\",{\"1\":{\"258\":1}}],[\"rune\",{\"1\":{\"200\":1,\"221\":1,\"258\":1,\"477\":4,\"478\":1,\"511\":1,\"537\":3,\"633\":1,\"1398\":1,\"1402\":2,\"1404\":1,\"1405\":8}}],[\"runtime\",{\"0\":{\"1449\":1},\"1\":{\"124\":2,\"323\":3,\"326\":1,\"393\":4,\"469\":2,\"553\":1,\"633\":1,\"655\":1,\"1308\":1,\"1443\":1}}],[\"rpm\",{\"1\":{\"1078\":2,\"1222\":1}}],[\"rpoplpush\",{\"1\":{\"971\":1}}],[\"rpop\",{\"1\":{\"936\":1,\"971\":1}}],[\"rpushx\",{\"1\":{\"971\":1}}],[\"rpush\",{\"1\":{\"934\":1,\"971\":1,\"985\":3}}],[\"rparamtype\",{\"1\":{\"364\":2}}],[\"rpc调用和ftp客户端管理文件\",{\"1\":{\"132\":1}}],[\"rpcx\",{\"1\":{\"128\":1}}],[\"rpc\",{\"1\":{\"124\":3,\"128\":2}}],[\"rvalue\",{\"1\":{\"358\":2,\"359\":2,\"361\":2,\"362\":2,\"368\":6,\"371\":3,\"373\":3,\"375\":3,\"376\":3}}],[\"rs256\",{\"1\":{\"634\":1}}],[\"rsc\",{\"1\":{\"460\":1}}],[\"rsonindex\",{\"1\":{\"344\":4}}],[\"rsa等\",{\"1\":{\"1308\":1}}],[\"rsa文件\",{\"1\":{\"50\":1}}],[\"rsa\",{\"1\":{\"50\":2,\"124\":1,\"634\":1}}],[\"rqlite\",{\"1\":{\"334\":1}}],[\"rquad\",{\"1\":{\"127\":1}}],[\"round\",{\"1\":{\"1164\":4,\"1355\":2,\"1361\":2}}],[\"routergroup\",{\"1\":{\"1087\":3}}],[\"router\",{\"1\":{\"1087\":8,\"1286\":2}}],[\"routes\",{\"1\":{\"1081\":1}}],[\"routing\",{\"1\":{\"705\":1,\"1284\":1}}],[\"routine\",{\"1\":{\"137\":1,\"326\":1}}],[\"rollback\",{\"1\":{\"897\":3}}],[\"roles\",{\"1\":{\"870\":1,\"873\":1,\"1228\":1}}],[\"role\",{\"1\":{\"728\":1,\"729\":2,\"870\":1,\"873\":1,\"1090\":1,\"1092\":1,\"1260\":2,\"1262\":1,\"1264\":2,\"1265\":4,\"1266\":4}}],[\"row\",{\"1\":{\"822\":3,\"848\":1,\"892\":1}}],[\"rowsaffected\",{\"1\":{\"895\":1,\"896\":1}}],[\"rows=10200\",{\"1\":{\"813\":1}}],[\"rows\",{\"1\":{\"645\":1,\"651\":1,\"780\":2,\"814\":1,\"822\":1}}],[\"rootfs会有差别\",{\"1\":{\"1192\":1}}],[\"rootfs\",{\"1\":{\"1192\":1}}],[\"root和alias如果目录没有指定盘符\",{\"1\":{\"1139\":1}}],[\"root和alias都可以定义在location模块中\",{\"1\":{\"1139\":1}}],[\"root真实路径是root指定的值加上location指定的值\",{\"1\":{\"1139\":1}}],[\"root是根\",{\"1\":{\"1123\":1}}],[\"root\",{\"1\":{\"393\":2,\"717\":1,\"740\":2,\"775\":3,\"822\":5,\"870\":1,\"891\":1,\"893\":1,\"1078\":1,\"1081\":1,\"1123\":2,\"1130\":4,\"1131\":4,\"1132\":1,\"1133\":2,\"1135\":1,\"1136\":3,\"1139\":1,\"1141\":2,\"1142\":3,\"1143\":2,\"1144\":2,\"1158\":2,\"1160\":1,\"1163\":1,\"1173\":1,\"1187\":4,\"1188\":2,\"1193\":3,\"1194\":4,\"1195\":4,\"1196\":6,\"1197\":11,\"1198\":2,\"1223\":1,\"1225\":2,\"1228\":1,\"1244\":1,\"1313\":1,\"1314\":2,\"1315\":1}}],[\"robin\",{\"1\":{\"1164\":4}}],[\"robo\",{\"1\":{\"875\":2}}],[\"robotgo\",{\"1\":{\"138\":1}}],[\"rob\",{\"1\":{\"388\":1}}],[\"rosedb\",{\"1\":{\"334\":1}}],[\"roaring\",{\"1\":{\"127\":1}}],[\"rocketmq在阿里集团被广泛应用在订单\",{\"1\":{\"1054\":1}}],[\"rocketmq出自阿里公司的开源产品\",{\"1\":{\"1054\":1}}],[\"rocketmq等\",{\"1\":{\"1051\":1}}],[\"rocketmq\",{\"0\":{\"1054\":1,\"1058\":1},\"1\":{\"122\":1,\"637\":2,\"1050\":1,\"1054\":1,\"1057\":3}}],[\"rocketmq操作\",{\"1\":{\"122\":1}}],[\"rcs\",{\"1\":{\"313\":1}}],[\"rc4\",{\"1\":{\"124\":1}}],[\"rcrowley\",{\"1\":{\"122\":2}}],[\"rate=100r\",{\"1\":{\"1158\":1}}],[\"rate=10r\",{\"1\":{\"1151\":1,\"1154\":1,\"1158\":1}}],[\"rate=1r\",{\"1\":{\"1151\":2,\"1154\":1,\"1158\":1}}],[\"rate=2r\",{\"1\":{\"1151\":1,\"1154\":2,\"1155\":1,\"1156\":2,\"1157\":1}}],[\"ratelimiting\",{\"1\":{\"1078\":1}}],[\"rate\",{\"1\":{\"1078\":1,\"1133\":1}}],[\"range所支持的pipeline必须是数组\",{\"1\":{\"1424\":1}}],[\"range中也会频繁用到\",{\"1\":{\"1421\":1}}],[\"rangequery\",{\"1\":{\"759\":2}}],[\"range类型支持以下几种\",{\"1\":{\"724\":1}}],[\"range底层会判断大小决定遍历次数\",{\"1\":{\"511\":1}}],[\"range来遍历\",{\"1\":{\"511\":1}}],[\"range来遍历如切片\",{\"1\":{\"509\":1}}],[\"range会不断读取管道中的元素\",{\"1\":{\"420\":1}}],[\"range遍历管道时\",{\"1\":{\"420\":1}}],[\"range遍历其他可迭代数据结构时\",{\"1\":{\"420\":1}}],[\"range遍历一个字符串\",{\"1\":{\"234\":1}}],[\"range语句\",{\"1\":{\"420\":1}}],[\"range可以遍历map\",{\"1\":{\"263\":1}}],[\"range可以更加方便的遍历一些可迭代的数据结构\",{\"1\":{\"234\":1}}],[\"range进行遍历时\",{\"1\":{\"258\":1}}],[\"range循环\",{\"1\":{\"248\":1}}],[\"range的实现都有所不同\",{\"1\":{\"234\":1}}],[\"range也可以迭代一个整型值\",{\"1\":{\"234\":1}}],[\"range\",{\"0\":{\"234\":1,\"420\":1,\"724\":1},\"1\":{\"178\":1,\"224\":1,\"234\":5,\"248\":1,\"249\":2,\"258\":1,\"263\":2,\"264\":1,\"269\":1,\"282\":1,\"284\":1,\"306\":1,\"322\":1,\"327\":1,\"365\":1,\"371\":1,\"378\":1,\"408\":2,\"420\":2,\"436\":3,\"474\":1,\"477\":2,\"492\":1,\"494\":1,\"509\":1,\"511\":2,\"512\":1,\"513\":1,\"537\":1,\"545\":2,\"558\":1,\"633\":1,\"651\":1,\"713\":2,\"724\":10,\"756\":1,\"814\":2,\"881\":1,\"1036\":2,\"1047\":3,\"1281\":1,\"1304\":1,\"1374\":1,\"1417\":4,\"1419\":1,\"1424\":4,\"1425\":1,\"1426\":1}}],[\"randomkey\",{\"1\":{\"967\":2}}],[\"randomname\",{\"1\":{\"713\":2}}],[\"rand\",{\"1\":{\"124\":2,\"265\":1,\"322\":1,\"327\":1,\"412\":1,\"429\":2,\"430\":2,\"431\":4,\"432\":4,\"713\":3,\"820\":2,\"1047\":3,\"1308\":1}}],[\"rawjson\",{\"1\":{\"1303\":2}}],[\"rawnum\",{\"1\":{\"275\":2}}],[\"raw\",{\"1\":{\"145\":1,\"1229\":1,\"1231\":1}}],[\"rake\",{\"1\":{\"144\":2}}],[\"raspberry\",{\"1\":{\"138\":1}}],[\"raylib\",{\"1\":{\"134\":1}}],[\"rain\",{\"1\":{\"128\":1}}],[\"raft\",{\"1\":{\"128\":2}}],[\"radix\",{\"1\":{\"127\":1}}],[\"rabbitmq的客户端支持的编程语言大概是所有消息队列中最多的\",{\"1\":{\"1053\":1}}],[\"rabbitmq消费者\",{\"0\":{\"1044\":1}}],[\"rabbitmq通常会采取以下几种措施\",{\"1\":{\"641\":1}}],[\"rabbitmq在写db时如果出现了异常\",{\"1\":{\"597\":1,\"669\":1}}],[\"rabbitmq在项目里是干嘛用的\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"rabbitmq写库失败了会怎么处理\",{\"1\":{\"569\":1,\"641\":2}}],[\"rabbitmq\",{\"0\":{\"1053\":1},\"1\":{\"122\":1,\"634\":3,\"637\":3,\"641\":1,\"644\":2,\"1051\":1,\"1053\":5,\"1057\":1}}],[\"ri\",{\"1\":{\"1222\":1}}],[\"right\",{\"1\":{\"730\":1,\"814\":1}}],[\"rivo\",{\"1\":{\"454\":1}}],[\"riface\",{\"1\":{\"355\":3,\"356\":3}}],[\"ristretto或内存支持\",{\"1\":{\"127\":1}}],[\"ringpop\",{\"1\":{\"128\":1}}],[\"ring\",{\"1\":{\"124\":1,\"127\":1,\"1308\":1}}],[\"riot\",{\"1\":{\"122\":1}}],[\"r\",{\"1\":{\"58\":1,\"185\":1,\"258\":7,\"401\":1,\"403\":1,\"432\":4,\"475\":1,\"476\":3,\"477\":16,\"498\":1,\"514\":3,\"515\":6,\"635\":3,\"813\":3,\"1164\":9,\"1223\":1,\"1244\":5,\"1253\":3,\"1256\":6,\"1260\":4,\"1264\":4,\"1275\":3,\"1277\":5,\"1281\":5,\"1282\":3,\"1283\":3,\"1286\":3,\"1289\":3,\"1398\":1,\"1402\":2,\"1404\":1,\"1405\":7,\"1412\":2}}],[\"rmi\",{\"1\":{\"1187\":2}}],[\"rm\",{\"1\":{\"55\":2,\"57\":1,\"1076\":1,\"1184\":2,\"1188\":2,\"1197\":1}}],[\"req指令应用进行配置限流\",{\"1\":{\"1154\":1}}],[\"req\",{\"0\":{\"1151\":1},\"1\":{\"1150\":2,\"1151\":14,\"1154\":4,\"1155\":2,\"1156\":2,\"1157\":3,\"1158\":5}}],[\"required\",{\"1\":{\"1281\":2,\"1283\":2,\"1289\":3}}],[\"requiredacks\",{\"1\":{\"1035\":1,\"1047\":1}}],[\"requirepass\",{\"1\":{\"965\":1,\"993\":2,\"1010\":1,\"1081\":1}}],[\"requires=cri\",{\"1\":{\"1223\":1}}],[\"requires\",{\"1\":{\"768\":1,\"769\":1,\"770\":1}}],[\"require关键字表示引用了一个外部依赖\",{\"1\":{\"459\":1}}],[\"require\",{\"1\":{\"453\":2,\"459\":6}}],[\"requests\",{\"1\":{\"1133\":1}}],[\"request请求\",{\"1\":{\"53\":1}}],[\"request\",{\"0\":{\"1251\":1},\"1\":{\"53\":2,\"1029\":1,\"1092\":1,\"1116\":2,\"1133\":4,\"1164\":2,\"1166\":18,\"1244\":1,\"1256\":2,\"1260\":1,\"1264\":1,\"1280\":3,\"1333\":2,\"1334\":3,\"1337\":5,\"1338\":8}}],[\"reuseport\",{\"1\":{\"1078\":4}}],[\"reused\",{\"1\":{\"445\":2,\"449\":2}}],[\"rebalance\",{\"1\":{\"1029\":1}}],[\"rebase\",{\"1\":{\"573\":1,\"645\":1}}],[\"rewrite\",{\"1\":{\"985\":2,\"1003\":1,\"1004\":3}}],[\"rewriting\",{\"1\":{\"985\":1}}],[\"reindex\",{\"1\":{\"862\":1}}],[\"reached错误信息\",{\"1\":{\"965\":1}}],[\"reason\",{\"1\":{\"717\":3}}],[\"readheadertimeout\",{\"1\":{\"1336\":1}}],[\"ready\",{\"1\":{\"993\":1,\"1228\":3}}],[\"readonly\",{\"1\":{\"911\":1,\"993\":1,\"994\":1}}],[\"readtimeout\",{\"1\":{\"911\":2,\"1336\":1}}],[\"readwrite\",{\"1\":{\"873\":1}}],[\"readpref\",{\"1\":{\"830\":2}}],[\"reading\",{\"1\":{\"825\":1,\"1078\":1}}],[\"readdir的一层简单封装\",{\"1\":{\"408\":1}}],[\"readdir本质上也只是对\",{\"1\":{\"408\":1}}],[\"readdir函数\",{\"1\":{\"408\":2}}],[\"readdir\",{\"1\":{\"408\":6}}],[\"readfrom\",{\"1\":{\"403\":3}}],[\"readfile而言\",{\"1\":{\"401\":1}}],[\"readfile\",{\"1\":{\"401\":5,\"403\":1,\"1315\":1}}],[\"readall\",{\"1\":{\"401\":3,\"1330\":1}}],[\"readall而言\",{\"1\":{\"401\":1}}],[\"readat\",{\"1\":{\"401\":1}}],[\"readerat\",{\"1\":{\"1413\":1}}],[\"reader实现了io\",{\"1\":{\"1413\":1}}],[\"reader类型的实现\",{\"1\":{\"401\":1}}],[\"reader类似\",{\"1\":{\"226\":1}}],[\"reader\",{\"1\":{\"225\":2,\"401\":1,\"403\":2,\"1261\":2,\"1262\":1,\"1265\":5,\"1266\":4,\"1331\":2,\"1413\":4}}],[\"reader来进行内容读取\",{\"1\":{\"225\":1}}],[\"read\",{\"0\":{\"223\":1},\"1\":{\"223\":1,\"327\":1,\"401\":2,\"421\":1,\"431\":2,\"432\":2,\"634\":3,\"641\":3,\"656\":1,\"993\":1,\"994\":1,\"1244\":3,\"1245\":2,\"1257\":2,\"1261\":4,\"1262\":2,\"1265\":5,\"1266\":4,\"1374\":1,\"1413\":3}}],[\"readmemstats\",{\"1\":{\"553\":1}}],[\"readme\",{\"1\":{\"207\":1,\"388\":1,\"400\":8,\"401\":5,\"402\":3,\"403\":6,\"404\":2,\"405\":1,\"449\":8,\"453\":1,\"457\":1,\"463\":1,\"744\":1}}],[\"reverse包装再进行排序\",{\"1\":{\"1379\":1}}],[\"reverseproxy\",{\"1\":{\"1338\":1}}],[\"reverse\",{\"1\":{\"477\":10,\"537\":1,\"1379\":1}}],[\"relocating\",{\"1\":{\"768\":1}}],[\"reload\",{\"1\":{\"84\":2,\"774\":1,\"1032\":1,\"1119\":1,\"1123\":1,\"1126\":1,\"1127\":1,\"1130\":1,\"1131\":1,\"1137\":1,\"1171\":2,\"1175\":1,\"1221\":1,\"1223\":1}}],[\"reloadcmd\",{\"1\":{\"84\":1}}],[\"relational\",{\"1\":{\"846\":1}}],[\"relationship\",{\"1\":{\"793\":1}}],[\"relation\",{\"1\":{\"724\":1}}],[\"relay\",{\"1\":{\"633\":1,\"822\":6}}],[\"releases\",{\"1\":{\"736\":1,\"737\":1,\"740\":2,\"1223\":1}}],[\"releasemode\",{\"1\":{\"453\":1}}],[\"release\",{\"1\":{\"453\":1}}],[\"release只是符合github规范\",{\"1\":{\"449\":1}}],[\"rel\",{\"1\":{\"410\":3}}],[\"renamenx\",{\"1\":{\"967\":1}}],[\"renamecollection\",{\"1\":{\"857\":1}}],[\"rename\",{\"1\":{\"404\":2,\"919\":1,\"967\":2}}],[\"repairdatabase\",{\"1\":{\"856\":1}}],[\"repalce\",{\"1\":{\"465\":1}}],[\"repeat\",{\"1\":{\"820\":2,\"1406\":3}}],[\"repeatable\",{\"1\":{\"634\":1,\"641\":1}}],[\"replay\",{\"1\":{\"1165\":1}}],[\"replacer\",{\"1\":{\"1412\":1}}],[\"replacer转用于替换字符串\",{\"1\":{\"1412\":1}}],[\"replaceall\",{\"1\":{\"1407\":2}}],[\"replace的方便函数\",{\"1\":{\"1407\":1}}],[\"replaceone\",{\"1\":{\"836\":1}}],[\"replace指令的话会修改go\",{\"1\":{\"462\":1}}],[\"replace将会替换掉指定版本的依赖\",{\"1\":{\"459\":1}}],[\"replace\",{\"1\":{\"459\":3,\"462\":1,\"465\":1,\"1407\":5,\"1412\":1}}],[\"replied\",{\"1\":{\"993\":1}}],[\"replicate\",{\"1\":{\"1010\":2}}],[\"replicationfactor\",{\"1\":{\"1034\":1,\"1037\":1}}],[\"replication\",{\"1\":{\"993\":1,\"1020\":2,\"1029\":2,\"1034\":3}}],[\"replica\",{\"1\":{\"993\":5,\"1006\":2,\"1007\":1,\"1215\":1}}],[\"replicaset\",{\"1\":{\"1215\":2}}],[\"replicaset来做容灾机制\",{\"1\":{\"1215\":1}}],[\"replicas\",{\"1\":{\"704\":2,\"705\":1,\"1010\":2,\"1034\":3,\"1215\":2}}],[\"replcation\",{\"1\":{\"990\":1}}],[\"representabilitsy\",{\"1\":{\"385\":1}}],[\"representability以了解更多细节\",{\"1\":{\"385\":1}}],[\"representability\",{\"1\":{\"385\":1}}],[\"repository\",{\"1\":{\"1182\":1,\"1183\":3,\"1187\":1,\"1225\":1}}],[\"repos\",{\"1\":{\"1078\":1,\"1220\":3,\"1222\":2}}],[\"repo\",{\"1\":{\"451\":1,\"774\":2,\"1078\":1,\"1184\":4,\"1220\":5,\"1221\":2,\"1222\":2,\"1231\":1}}],[\"report\",{\"1\":{\"326\":1}}],[\"repo2\",{\"1\":{\"47\":1}}],[\"re\",{\"1\":{\"371\":2,\"477\":2}}],[\"regex\",{\"1\":{\"1308\":1}}],[\"regexp\",{\"1\":{\"124\":2,\"469\":5}}],[\"register\",{\"1\":{\"890\":1}}],[\"register注册驱动\",{\"1\":{\"890\":1}}],[\"registry\",{\"1\":{\"774\":1,\"1056\":1,\"1183\":1,\"1193\":3,\"1221\":1,\"1225\":1}}],[\"region\",{\"1\":{\"726\":3}}],[\"regions\",{\"1\":{\"328\":2}}],[\"regommend\",{\"1\":{\"142\":1}}],[\"rez\",{\"1\":{\"139\":1}}],[\"retention\",{\"1\":{\"1029\":6,\"1065\":1}}],[\"retweets\",{\"1\":{\"745\":1,\"746\":3,\"748\":1,\"749\":1}}],[\"retries\",{\"1\":{\"769\":1,\"770\":1}}],[\"retransmit\",{\"1\":{\"656\":1}}],[\"retractions\",{\"1\":{\"459\":1}}],[\"retract指令表示\",{\"1\":{\"459\":1}}],[\"retract\",{\"1\":{\"459\":5}}],[\"retry\",{\"1\":{\"137\":1}}],[\"returns\",{\"1\":{\"446\":1,\"820\":1}}],[\"return关键字可以不需要指定返回哪些值\",{\"1\":{\"280\":1}}],[\"return\",{\"1\":{\"4\":1,\"5\":2,\"178\":1,\"208\":1,\"213\":5,\"230\":1,\"268\":1,\"269\":5,\"278\":5,\"279\":1,\"280\":6,\"281\":4,\"282\":6,\"283\":1,\"285\":4,\"293\":6,\"294\":1,\"298\":3,\"299\":1,\"300\":4,\"302\":1,\"309\":3,\"312\":1,\"314\":3,\"317\":3,\"318\":4,\"320\":1,\"322\":1,\"327\":1,\"337\":4,\"338\":1,\"339\":4,\"340\":3,\"341\":3,\"343\":7,\"344\":8,\"355\":2,\"356\":2,\"364\":2,\"366\":1,\"374\":1,\"378\":1,\"388\":5,\"390\":2,\"391\":2,\"392\":2,\"393\":9,\"400\":1,\"401\":1,\"402\":1,\"403\":6,\"406\":1,\"410\":10,\"425\":6,\"426\":3,\"427\":5,\"428\":2,\"432\":1,\"434\":5,\"435\":4,\"436\":2,\"446\":1,\"463\":5,\"471\":2,\"477\":4,\"491\":1,\"492\":1,\"513\":3,\"514\":3,\"516\":3,\"537\":1,\"548\":2,\"620\":2,\"630\":1,\"635\":2,\"649\":2,\"651\":2,\"653\":2,\"654\":2,\"692\":2,\"713\":1,\"745\":4,\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"754\":1,\"766\":1,\"820\":5,\"881\":4,\"882\":4,\"883\":4,\"884\":6,\"893\":3,\"894\":2,\"895\":2,\"896\":2,\"952\":2,\"1035\":3,\"1036\":3,\"1037\":2,\"1047\":10,\"1087\":1,\"1092\":4,\"1164\":9,\"1166\":3,\"1245\":1,\"1281\":3,\"1283\":2,\"1289\":1,\"1302\":1,\"1303\":3,\"1304\":1,\"1305\":6,\"1306\":3,\"1307\":1,\"1311\":1,\"1312\":1,\"1314\":1,\"1315\":2,\"1317\":1,\"1319\":1,\"1320\":1,\"1321\":2,\"1330\":1,\"1380\":2,\"1402\":1,\"1405\":4,\"1415\":1,\"1417\":2,\"1420\":2,\"1425\":2,\"1426\":2,\"1432\":2,\"1443\":2}}],[\"removed\",{\"1\":{\"453\":1}}],[\"removefromparent\",{\"1\":{\"427\":2}}],[\"removeall\",{\"1\":{\"405\":2}}],[\"remove\",{\"1\":{\"405\":2,\"857\":1,\"860\":2,\"1184\":2,\"1197\":2}}],[\"remote\",{\"1\":{\"56\":3,\"57\":2,\"58\":1,\"445\":4,\"449\":1,\"742\":2,\"743\":2,\"1133\":1,\"1151\":3,\"1152\":7,\"1154\":5,\"1155\":1,\"1156\":1,\"1157\":1,\"1158\":3}}],[\"remember\",{\"1\":{\"127\":1}}],[\"rect\",{\"1\":{\"515\":11}}],[\"rectangle\",{\"1\":{\"267\":1,\"515\":6}}],[\"receiving\",{\"1\":{\"445\":1,\"993\":1,\"1010\":2}}],[\"received\",{\"1\":{\"1195\":2,\"1196\":1,\"1197\":3}}],[\"receive\",{\"1\":{\"419\":1,\"1029\":1}}],[\"receiver\",{\"1\":{\"287\":1,\"515\":1}}],[\"record\",{\"1\":{\"1025\":1,\"1174\":3}}],[\"records\",{\"1\":{\"892\":1}}],[\"recommended\",{\"1\":{\"1229\":1}}],[\"recommend\",{\"1\":{\"453\":1}}],[\"recover能捕获到其它协程的panic吗\",{\"1\":{\"620\":1,\"692\":1}}],[\"recovered\",{\"1\":{\"514\":1,\"635\":1}}],[\"recovery\",{\"1\":{\"453\":1,\"656\":1,\"1029\":1}}],[\"recover\",{\"1\":{\"397\":3,\"514\":1,\"635\":4,\"1163\":1}}],[\"recognize\",{\"1\":{\"298\":1}}],[\"rec\",{\"1\":{\"124\":1}}],[\"recipe\",{\"1\":{\"77\":1}}],[\"referer\",{\"1\":{\"1130\":1,\"1131\":1,\"1133\":1,\"1158\":1}}],[\"references\",{\"1\":{\"653\":1}}],[\"reference\",{\"0\":{\"506\":1},\"1\":{\"442\":1,\"885\":1}}],[\"ref\",{\"1\":{\"814\":5}}],[\"refresh\",{\"1\":{\"766\":1}}],[\"reflectedencoder\",{\"1\":{\"1302\":1}}],[\"reflectvalue\",{\"1\":{\"357\":2}}],[\"reflect包同时根据一些特殊的类型提供了不同的更为方便的函数\",{\"1\":{\"372\":1}}],[\"reflect包使用kind枚举出了go中所有的基础类型\",{\"1\":{\"351\":1}}],[\"reflect包提供了两个函数来将go中的类型转换为上述的两种类型以便进行反射操作\",{\"1\":{\"348\":1}}],[\"reflecttype\",{\"1\":{\"350\":2}}],[\"reflect2\",{\"1\":{\"122\":1,\"453\":2,\"459\":1}}],[\"reflect\",{\"1\":{\"122\":1,\"124\":1,\"298\":2,\"302\":2,\"307\":2,\"308\":2,\"337\":4,\"348\":1,\"350\":2,\"351\":1,\"352\":2,\"353\":5,\"354\":4,\"355\":3,\"356\":3,\"357\":2,\"358\":1,\"359\":1,\"360\":2,\"361\":1,\"362\":1,\"364\":1,\"365\":4,\"367\":3,\"368\":5,\"369\":1,\"370\":3,\"371\":6,\"373\":2,\"374\":2,\"375\":2,\"376\":4,\"377\":2,\"378\":6,\"379\":5,\"435\":1,\"756\":2,\"1308\":1}}],[\"refs\",{\"1\":{\"58\":1}}],[\"refusing\",{\"1\":{\"58\":1}}],[\"redefined\",{\"1\":{\"1164\":1}}],[\"redlock\",{\"1\":{\"633\":1,\"653\":1}}],[\"redirection\",{\"1\":{\"454\":1}}],[\"redirect\",{\"1\":{\"454\":1}}],[\"redis集群要将每个节点设置成集群模式\",{\"1\":{\"1006\":1}}],[\"redis集群是一个由多个主从节点组成的分布式服务器群\",{\"1\":{\"1006\":1}}],[\"redis集群\",{\"0\":{\"1005\":1}}],[\"redis哨兵\",{\"0\":{\"995\":1}}],[\"redis主从复制\",{\"0\":{\"990\":1}}],[\"redis主要基于内存操作内存的执行效率本身就很快\",{\"1\":{\"959\":1}}],[\"redis服务器\",{\"1\":{\"984\":1}}],[\"redis客户端\",{\"1\":{\"984\":1}}],[\"redis本身同步数据文件是按上面save条件来同步的\",{\"1\":{\"965\":1}}],[\"redis在后台生成的快照文件时失败\",{\"1\":{\"982\":1}}],[\"redis在默认情况下是异步的把数据写入磁盘\",{\"1\":{\"965\":1}}],[\"redis在启动时会把数据加载到内存中\",{\"1\":{\"965\":1}}],[\"redis新的vm机制\",{\"1\":{\"965\":1}}],[\"redis新连接超时时间\",{\"1\":{\"911\":1}}],[\"redis会先尝试清除已到期或即将到期的key\",{\"1\":{\"965\":1}}],[\"redis会关闭新的连接并向客户端返回max\",{\"1\":{\"965\":1}}],[\"redis可以同时打开的客户端连接数为redis进程可以打开的最大文件描述符数\",{\"1\":{\"965\":1}}],[\"redis采用lzf压缩\",{\"1\":{\"965\":1,\"983\":1}}],[\"redis总共支持四个级别\",{\"1\":{\"965\":1}}],[\"redis默认配置文件中提供了三个条件\",{\"1\":{\"965\":1}}],[\"redis默认会把pid写入\",{\"1\":{\"965\":1}}],[\"redis默认不是以守护进程的方式运行\",{\"1\":{\"965\":1}}],[\"redis配置文件详解\",{\"0\":{\"965\":1}}],[\"redis>\",{\"1\":{\"964\":1}}],[\"redis下载地址为\",{\"1\":{\"964\":1}}],[\"redis分布式集群化扩展性极高\",{\"1\":{\"960\":1}}],[\"redis还支持\",{\"1\":{\"957\":1}}],[\"redis能读的速度是110000次\",{\"1\":{\"957\":1}}],[\"redis不仅仅支持简单的key\",{\"1\":{\"956\":1}}],[\"redis支持5种数据类型\",{\"1\":{\"969\":1}}],[\"redis支持二进制案例的\",{\"1\":{\"957\":1}}],[\"redis支持数据的备份\",{\"1\":{\"956\":1}}],[\"redis支持数据的持久化\",{\"1\":{\"956\":1}}],[\"redis支持的最大并发数\",{\"1\":{\"567\":1,\"639\":2}}],[\"redis命令\",{\"1\":{\"913\":1}}],[\"redis命令和方法名一一对应\",{\"1\":{\"913\":1}}],[\"redis只能查询缓存不能更新\",{\"1\":{\"911\":1}}],[\"redis连接最大的存活时间\",{\"1\":{\"911\":1}}],[\"redis连接池多久会关闭一个空闲连接\",{\"1\":{\"911\":1}}],[\"redis连接池最小空闲连接数\",{\"1\":{\"911\":1}}],[\"redis连接池的最大连接数\",{\"1\":{\"911\":1}}],[\"redis操作失败最大重试次数\",{\"1\":{\"911\":1}}],[\"redis数据库\",{\"1\":{\"911\":1}}],[\"redis数据如何更新\",{\"1\":{\"610\":1,\"682\":1}}],[\"redis密码\",{\"1\":{\"911\":1}}],[\"redis地址\",{\"1\":{\"911\":1}}],[\"redisclient\",{\"1\":{\"910\":3,\"912\":1,\"913\":1,\"915\":2,\"916\":4,\"917\":3,\"918\":2,\"919\":1,\"920\":1,\"921\":1,\"923\":2,\"924\":2,\"925\":5,\"927\":5,\"928\":1,\"929\":1,\"930\":1,\"931\":1,\"932\":1,\"934\":5,\"935\":1,\"936\":4,\"937\":3,\"939\":2,\"940\":4,\"941\":6,\"942\":2,\"943\":1,\"944\":1,\"945\":1,\"947\":1,\"948\":2,\"949\":4,\"950\":1,\"951\":3,\"952\":6,\"953\":3}}],[\"redis即可以当作一个nosql数据库\",{\"1\":{\"908\":1}}],[\"redis缓存等方式来保证消息的幂等性\",{\"1\":{\"653\":1}}],[\"redis缓存击穿解决方案在项目中是否用过\",{\"1\":{\"567\":1,\"639\":2}}],[\"redis与mysql的数据同步通常是通过以下几种方式实现\",{\"1\":{\"651\":1}}],[\"redis与mysql数据如何同步\",{\"1\":{\"579\":1,\"651\":2}}],[\"redis通常作为缓存系统来使用\",{\"1\":{\"651\":1}}],[\"redis中的库存数据通常是基于商品的唯一标识来存储的\",{\"1\":{\"644\":1}}],[\"redis中的库存还没有递减完成\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"redis库存没有及时更新\",{\"1\":{\"644\":1}}],[\"redis布隆过滤器\",{\"1\":{\"625\":1,\"697\":1}}],[\"redis其他数据结构有用过吗\",{\"1\":{\"624\":1,\"696\":1}}],[\"redis穿透\",{\"1\":{\"624\":1,\"696\":1}}],[\"redis击穿\",{\"1\":{\"624\":1,\"696\":1}}],[\"redis限流+nginx层做处理\",{\"1\":{\"615\":1,\"687\":1}}],[\"redis和mysql的一致性问题\",{\"1\":{\"613\":1,\"685\":1}}],[\"redis和kafka的区别\",{\"1\":{\"595\":1,\"667\":1}}],[\"redis哪些使用场景\",{\"1\":{\"613\":1,\"685\":1}}],[\"redis架构\",{\"1\":{\"610\":1,\"682\":1}}],[\"redis失效后怎么保证与数据库中数据的一致性\",{\"1\":{\"607\":1,\"679\":1}}],[\"redis里面的事务原理有了解过吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"redis里缓存了所有悬赏的订单\",{\"1\":{\"566\":1,\"638\":2}}],[\"redis相比memcached有哪些优势\",{\"1\":{\"594\":1,\"666\":1}}],[\"redis就类似一个锁了\",{\"1\":{\"593\":1,\"665\":1}}],[\"redis高可用设计\",{\"1\":{\"579\":1,\"651\":2}}],[\"redis持久化可以解决这种突发的情况吗\",{\"1\":{\"607\":1,\"679\":1}}],[\"redis持久化\",{\"0\":{\"979\":1},\"1\":{\"601\":1,\"673\":1}}],[\"redis持久化方式\",{\"1\":{\"579\":1,\"651\":2}}],[\"redis持久化机制\",{\"1\":{\"562\":1,\"634\":1}}],[\"redis项目中使用\",{\"1\":{\"579\":1,\"651\":2}}],[\"redis是c编写的\",{\"1\":{\"964\":1}}],[\"redis是单线程还是多线程的\",{\"1\":{\"598\":1,\"670\":1}}],[\"redis是单线程的为什么比较快\",{\"1\":{\"573\":1,\"645\":1}}],[\"redis是在哪部署的\",{\"1\":{\"569\":1,\"641\":2}}],[\"redis提供了哪些基础的数据类型\",{\"1\":{\"572\":1,\"644\":1}}],[\"redis用的哪种数据类型\",{\"1\":{\"569\":1,\"641\":2}}],[\"redis用来做什么的\",{\"1\":{\"563\":1,\"635\":2}}],[\"redis的版本\",{\"1\":{\"1010\":1}}],[\"redis的集群将所有的数据存储区域划分为16384个槽\",{\"1\":{\"1006\":1}}],[\"redis的主从特点\",{\"1\":{\"990\":1}}],[\"redis的索引数据\",{\"1\":{\"965\":1}}],[\"redis的下载和安装\",{\"0\":{\"962\":1}}],[\"redis的所有操作都是原子性的\",{\"1\":{\"957\":1}}],[\"redis的哪些操作有原子性\",{\"1\":{\"606\":1,\"678\":1}}],[\"redis的缓存穿透\",{\"1\":{\"598\":1,\"670\":1}}],[\"redis的持久化有了解过吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"redis的数据类型\",{\"1\":{\"613\":1,\"685\":1}}],[\"redis的数据结构\",{\"1\":{\"573\":1,\"645\":1}}],[\"redis的数据与数据库里的数据是怎么保持一致的\",{\"1\":{\"569\":1,\"641\":2}}],[\"redis的过期淘汰策略\",{\"1\":{\"566\":1,\"638\":1}}],[\"redis过期删除策略\",{\"1\":{\"579\":1,\"651\":2}}],[\"redis过期数据的删除策略\",{\"1\":{\"566\":1,\"638\":1}}],[\"redis过期淘汰策略\",{\"1\":{\"563\":1,\"635\":2}}],[\"redis常用数据结构\",{\"1\":{\"579\":1,\"580\":1,\"651\":2,\"652\":1}}],[\"redis常用的数据结构有哪些\",{\"1\":{\"566\":1,\"638\":1}}],[\"redis常见的穿透击穿雪崩问题\",{\"1\":{\"566\":1,\"638\":1}}],[\"redis实现简易的布隆过滤器是怎么实现的\",{\"1\":{\"566\":1,\"638\":1}}],[\"redis+邮箱组件\",{\"1\":{\"562\":1,\"634\":2}}],[\"redis等等\",{\"1\":{\"1239\":1}}],[\"redis等<k\",{\"1\":{\"1165\":1}}],[\"redis等存储系统\",{\"1\":{\"653\":1}}],[\"redis等\",{\"1\":{\"127\":1}}],[\"redis\",{\"0\":{\"908\":1,\"955\":1,\"956\":1,\"957\":1},\"1\":{\"122\":3,\"128\":1,\"588\":2,\"610\":1,\"618\":1,\"619\":2,\"621\":1,\"622\":2,\"633\":2,\"634\":4,\"635\":1,\"638\":9,\"639\":5,\"641\":4,\"644\":4,\"651\":2,\"653\":1,\"656\":2,\"660\":2,\"682\":1,\"690\":1,\"691\":2,\"693\":1,\"694\":2,\"907\":1,\"908\":5,\"909\":6,\"910\":5,\"911\":1,\"912\":2,\"913\":1,\"947\":2,\"949\":1,\"950\":1,\"955\":2,\"956\":2,\"961\":1,\"963\":2,\"964\":7,\"965\":9,\"967\":2,\"970\":1,\"979\":6,\"980\":4,\"981\":12,\"984\":2,\"985\":5,\"986\":7,\"992\":1,\"993\":3,\"994\":3,\"995\":2,\"996\":2,\"999\":1,\"1000\":2,\"1001\":1,\"1002\":4,\"1003\":2,\"1004\":5,\"1006\":6,\"1007\":1,\"1010\":67,\"1072\":1,\"1081\":2,\"1197\":1,\"1198\":1}}],[\"reduce\",{\"1\":{\"128\":1}}],[\"reduce系统\",{\"1\":{\"128\":1}}],[\"red\",{\"1\":{\"13\":1,\"1132\":1,\"1173\":1}}],[\"resourcegroup\",{\"1\":{\"1265\":4,\"1266\":4}}],[\"resources\",{\"1\":{\"1135\":1,\"1136\":3,\"1142\":2,\"1143\":2,\"1144\":3}}],[\"resources目录下\",{\"1\":{\"1135\":1,\"1143\":1}}],[\"resource\",{\"1\":{\"1135\":3,\"1265\":2,\"1266\":2}}],[\"resolveunixaddr\",{\"1\":{\"1372\":2}}],[\"resolveudpaddr\",{\"1\":{\"1371\":3}}],[\"resolvetcpaddr\",{\"1\":{\"1370\":3}}],[\"resolveipaddr\",{\"1\":{\"1369\":3}}],[\"resolver\",{\"1\":{\"1078\":1}}],[\"resolv\",{\"1\":{\"1219\":1}}],[\"resolving\",{\"1\":{\"449\":1}}],[\"reshard\",{\"1\":{\"1010\":5}}],[\"resync\",{\"1\":{\"993\":1}}],[\"resynchronization\",{\"1\":{\"993\":1}}],[\"respository\",{\"1\":{\"884\":2}}],[\"responsitory\",{\"1\":{\"884\":15}}],[\"responsibility\",{\"1\":{\"303\":2}}],[\"responsewriter\",{\"1\":{\"1337\":5,\"1338\":1}}],[\"response\",{\"1\":{\"705\":2,\"706\":2,\"707\":2,\"709\":2,\"710\":2,\"711\":2,\"712\":2,\"713\":6,\"1078\":1}}],[\"respond\",{\"1\":{\"141\":1}}],[\"resp\",{\"1\":{\"704\":2,\"881\":2,\"882\":2,\"883\":2,\"884\":3,\"1330\":3,\"1331\":2,\"1333\":2,\"1334\":2}}],[\"result++\",{\"1\":{\"620\":2,\"692\":2}}],[\"result\",{\"1\":{\"412\":1,\"446\":4,\"448\":2,\"620\":3,\"630\":6,\"651\":2,\"653\":8,\"692\":3,\"709\":1,\"711\":1,\"712\":1,\"741\":1,\"814\":2,\"833\":2,\"837\":4,\"884\":6,\"894\":2,\"910\":3,\"915\":1}}],[\"results\",{\"1\":{\"378\":2}}],[\"reserved0\",{\"1\":{\"400\":1}}],[\"resettimer\",{\"0\":{\"499\":1},\"1\":{\"499\":2}}],[\"reset\",{\"1\":{\"55\":1,\"776\":1,\"1225\":1}}],[\"restcontroller\",{\"1\":{\"1166\":2}}],[\"restaurants\",{\"1\":{\"884\":2}}],[\"restaurantresponsitory\",{\"1\":{\"881\":2,\"882\":2,\"883\":2,\"884\":6}}],[\"restaurantid\",{\"1\":{\"880\":1}}],[\"restaurant\",{\"1\":{\"880\":2,\"881\":7,\"882\":2,\"883\":2,\"884\":8}}],[\"restart=always\",{\"1\":{\"1223\":1}}],[\"restart=on\",{\"1\":{\"1032\":1}}],[\"restartsec=2\",{\"1\":{\"1223\":1}}],[\"restart\",{\"1\":{\"774\":1,\"986\":1,\"1175\":2,\"1188\":1,\"1219\":1,\"1221\":1}}],[\"restful风格的api\",{\"0\":{\"1278\":1}}],[\"restful\",{\"1\":{\"158\":1,\"637\":1,\"700\":1,\"702\":1,\"1241\":1}}],[\"rest\",{\"1\":{\"135\":1,\"637\":1}}],[\"resgate\",{\"1\":{\"128\":1}}],[\"resize\",{\"1\":{\"122\":1,\"139\":1}}],[\"res\",{\"1\":{\"5\":5,\"299\":2,\"302\":3,\"312\":2,\"313\":2,\"343\":6,\"344\":2,\"371\":2,\"475\":4,\"516\":2,\"836\":3,\"895\":2,\"896\":2,\"1136\":2}}],[\"虎符\",{\"1\":{\"49\":2}}],[\"公式\",{\"1\":{\"1087\":1}}],[\"公式为\",{\"1\":{\"645\":1}}],[\"公安部\",{\"1\":{\"741\":1}}],[\"公有云提供了高可用\",{\"1\":{\"655\":1}}],[\"公有云提供了弹性的计算\",{\"1\":{\"655\":1}}],[\"公有\",{\"1\":{\"174\":1}}],[\"公司会给每一个人开通一个用户\",{\"1\":{\"1223\":1}}],[\"公司\",{\"1\":{\"794\":1}}],[\"公司转型\",{\"1\":{\"595\":1,\"667\":1}}],[\"公司a也跑路了\",{\"1\":{\"293\":1}}],[\"公司使用还是去花钱申请ca证书\",{\"1\":{\"84\":1}}],[\"公司的领导非常不满意\",{\"1\":{\"12\":1}}],[\"公钥加密\",{\"1\":{\"83\":1}}],[\"公钥私钥加密可以看作古代\",{\"1\":{\"49\":1}}],[\"数千\",{\"1\":{\"1057\":1}}],[\"数万\",{\"1\":{\"1057\":4}}],[\"数\",{\"1\":{\"813\":1,\"1000\":1}}],[\"数学常量\",{\"0\":{\"1345\":1}}],[\"数学操作包\",{\"1\":{\"1308\":1}}],[\"数学和加密函数等\",{\"1\":{\"775\":1}}],[\"数学基础好的同学可以研究一下\",{\"1\":{\"49\":1}}],[\"数量设置\",{\"1\":{\"1000\":1}}],[\"数量根据sentinel\",{\"1\":{\"1000\":1}}],[\"数量会递减\",{\"1\":{\"638\":1}}],[\"数量固定的\",{\"1\":{\"542\":1}}],[\"数组参数\",{\"1\":{\"730\":1}}],[\"数组地理点参数\",{\"1\":{\"730\":1}}],[\"数组地址\",{\"1\":{\"511\":1}}],[\"数组可以包含null值\",{\"1\":{\"725\":1}}],[\"数组中第一个值的类型决定整个数组的类型\",{\"1\":{\"725\":1}}],[\"数组中所有的值必须是同一种数据类型\",{\"1\":{\"725\":1}}],[\"数组中的最大值\",{\"1\":{\"645\":1}}],[\"数组中的每一个元素都完全相等\",{\"1\":{\"379\":1}}],[\"数组a是一个固定长度的数组\",{\"1\":{\"654\":1}}],[\"数组会\",{\"1\":{\"638\":1}}],[\"数组是固定长度的类型\",{\"1\":{\"635\":1}}],[\"数组是定长的数据结构\",{\"1\":{\"237\":1}}],[\"数组的全部元素是否相等\",{\"1\":{\"294\":1}}],[\"数组的容量等于数组长度\",{\"1\":{\"240\":1}}],[\"数组类型\",{\"0\":{\"725\":1},\"1\":{\"294\":1}}],[\"数组在初始化时\",{\"1\":{\"249\":1}}],[\"数组在切割后\",{\"1\":{\"241\":1}}],[\"数组在声明是长度只能是一个常量\",{\"1\":{\"239\":1}}],[\"数组作为值类型\",{\"1\":{\"238\":1}}],[\"数组和切片两者看起来长得几乎一模一样\",{\"1\":{\"237\":1}}],[\"数组等等底层会调用len函数判断这个类型的长度\",{\"1\":{\"509\":1}}],[\"数组等\",{\"1\":{\"210\":1}}],[\"数组\",{\"0\":{\"238\":1},\"1\":{\"201\":1,\"202\":1,\"352\":1,\"379\":1,\"529\":1,\"635\":1,\"841\":1,\"887\":1}}],[\"数字表示多少个从节点\",{\"1\":{\"1010\":1}}],[\"数字增减\",{\"0\":{\"925\":1}}],[\"数字和下划线\",{\"1\":{\"794\":3}}],[\"数字和地理字段存储在bkd树中\",{\"1\":{\"734\":1}}],[\"数字证书\",{\"1\":{\"641\":1}}],[\"数字零售技术部\",{\"0\":{\"592\":1,\"664\":1}}],[\"数字类型有如下分类\",{\"1\":{\"720\":1}}],[\"数字类型\",{\"0\":{\"720\":1},\"1\":{\"202\":1,\"294\":1}}],[\"数字\",{\"1\":{\"178\":1,\"209\":1,\"221\":6}}],[\"数据交换\",{\"1\":{\"1309\":3,\"1310\":1}}],[\"数据绑定的主要方法是bind\",{\"1\":{\"1279\":1}}],[\"数据一直存储的话磁盘会奔溃\",{\"1\":{\"1065\":1}}],[\"数据一致性强\",{\"1\":{\"904\":1}}],[\"数据直接丢失了\",{\"1\":{\"1065\":1}}],[\"数据文件也会一同删除\",{\"1\":{\"1029\":1}}],[\"数据文件本身就是索引文件\",{\"1\":{\"808\":1}}],[\"数据根据键的哈希值映射到不同的槽中\",{\"1\":{\"1006\":1}}],[\"数据分片\",{\"1\":{\"1006\":1}}],[\"数据分析等\",{\"1\":{\"655\":1}}],[\"数据分析等领域\",{\"1\":{\"162\":1}}],[\"数据分析\",{\"1\":{\"645\":1}}],[\"数据自动分片\",{\"1\":{\"1005\":1}}],[\"数据全量同步若是数据大就会出现卡顿现象\",{\"1\":{\"990\":1}}],[\"数据保存为二进制格式\",{\"1\":{\"988\":1}}],[\"数据至少发生了\",{\"1\":{\"981\":1}}],[\"数据发生了多少次变化时\",{\"1\":{\"981\":1}}],[\"数据的持久化存储是\",{\"1\":{\"979\":1}}],[\"数据的差异率不高\",{\"1\":{\"811\":1}}],[\"数据存取io较高\",{\"1\":{\"961\":1}}],[\"数据存储等等\",{\"1\":{\"1310\":1}}],[\"数据存储\",{\"1\":{\"1072\":1}}],[\"数据存储与分发\",{\"1\":{\"644\":1}}],[\"数据存储顺序与索引顺序无关\",{\"1\":{\"641\":1}}],[\"数据存储顺序与索引顺序一致\",{\"1\":{\"641\":1}}],[\"数据存储在叶子节点和内部节点中\",{\"1\":{\"641\":1}}],[\"数据存储在堆上\",{\"1\":{\"529\":1}}],[\"数据存储在栈或堆上\",{\"1\":{\"529\":1}}],[\"数据之间通过外键关联\",{\"1\":{\"904\":1}}],[\"数据以表格形式存储\",{\"1\":{\"904\":1}}],[\"数据以明文传输\",{\"1\":{\"641\":1}}],[\"数据集成和分析平台\",{\"1\":{\"843\":1}}],[\"数据要依赖操作系统缓存\",{\"1\":{\"817\":1}}],[\"数据读取操作的操作类型\",{\"1\":{\"814\":1}}],[\"数据读取等等操作\",{\"1\":{\"800\":1}}],[\"数据重复的表字段\",{\"1\":{\"811\":1}}],[\"数据重传\",{\"1\":{\"636\":1}}],[\"数据迁移容易出错\",{\"1\":{\"794\":1}}],[\"数据迁移项目\",{\"1\":{\"576\":1,\"648\":1}}],[\"数据冗余的可能性越大\",{\"1\":{\"793\":1}}],[\"数据表中联合主键的字段个数越少越好\",{\"1\":{\"793\":1}}],[\"数据表中的字段个数越少越好\",{\"1\":{\"793\":1}}],[\"数据表越少\",{\"1\":{\"793\":1}}],[\"数据表的个数越少越好\",{\"1\":{\"793\":1}}],[\"数据表的设计原则其它参考\",{\"0\":{\"793\":1}}],[\"数据表的设计\",{\"1\":{\"566\":1,\"638\":2}}],[\"数据返回给应用服务器\",{\"1\":{\"655\":1}}],[\"数据会在多个节点上进行复制\",{\"1\":{\"653\":1}}],[\"数据会直接写入数据库\",{\"1\":{\"641\":1}}],[\"数据处理等\",{\"1\":{\"644\":1}}],[\"数据量也较大\",{\"1\":{\"638\":1}}],[\"数据量很大\",{\"1\":{\"593\":1,\"665\":1}}],[\"数据放在请求体中\",{\"1\":{\"638\":1}}],[\"数据挖掘等场景\",{\"1\":{\"637\":1}}],[\"数据段\",{\"1\":{\"636\":1}}],[\"数据是以日志的形式存储到磁盘上的\",{\"1\":{\"634\":1}}],[\"数据做缓存预热\",{\"1\":{\"625\":1,\"697\":1}}],[\"数据页在内存中是完整的数据吗\",{\"1\":{\"610\":1,\"682\":1}}],[\"数据同步怎么实现\",{\"1\":{\"610\":1,\"682\":1}}],[\"数据同步与异常处理\",{\"1\":{\"576\":1,\"648\":1}}],[\"数据抓取业务项目\",{\"1\":{\"576\":1,\"648\":1}}],[\"数据和索引放一起的优点\",{\"1\":{\"566\":1,\"638\":1}}],[\"数据\",{\"1\":{\"554\":1,\"641\":1}}],[\"数据长度\",{\"1\":{\"554\":1}}],[\"数据复制\",{\"1\":{\"529\":1}}],[\"数据底层数据结构情况\",{\"1\":{\"527\":1}}],[\"数据大小来设定的\",{\"1\":{\"965\":1}}],[\"数据大小\",{\"1\":{\"513\":1}}],[\"数据跟数据总线同宽\",{\"1\":{\"513\":1}}],[\"数据不会被其他协程修改\",{\"1\":{\"429\":1}}],[\"数据采集的方式有两种\",{\"1\":{\"322\":1}}],[\"数据类型操作\",{\"1\":{\"957\":1}}],[\"数据类型底层的话都会使用到指针\",{\"1\":{\"529\":1}}],[\"数据类型及其特点\",{\"1\":{\"520\":1}}],[\"数据类型\",{\"0\":{\"195\":1},\"1\":{\"347\":1,\"969\":1}}],[\"数据查询\",{\"0\":{\"861\":1},\"1\":{\"162\":1}}],[\"数据库一共0~15\",{\"1\":{\"967\":1}}],[\"数据库模块\",{\"1\":{\"903\":1}}],[\"数据库日志存放目录\",{\"1\":{\"852\":1}}],[\"数据库数据存放目录\",{\"1\":{\"852\":1}}],[\"数据库存储在启动指定的data目录中\",{\"1\":{\"845\":1}}],[\"数据库只存储文件地址信息\",{\"1\":{\"794\":1}}],[\"数据库只能扫描整个表\",{\"1\":{\"633\":1}}],[\"数据库进行数据库读取时\",{\"1\":{\"794\":1}}],[\"数据库对象编写建议\",{\"0\":{\"794\":1}}],[\"数据库的记录会重新排序\",{\"1\":{\"809\":1}}],[\"数据库的cpu资源是极其宝贵的\",{\"1\":{\"796\":1}}],[\"数据库的设计实际上就是定义各种表\",{\"1\":{\"793\":1}}],[\"数据库的并发就像城市交通\",{\"1\":{\"790\":1}}],[\"数据库的吞吐量和并发能力\",{\"1\":{\"645\":1}}],[\"数据库表结构的设计也讲究平衡\",{\"1\":{\"789\":1}}],[\"数据库表状态\",{\"1\":{\"655\":1}}],[\"数据库主要是用来存储的\",{\"1\":{\"783\":1}}],[\"数据库会创建不同版本的数据\",{\"1\":{\"656\":1}}],[\"数据库备份的文件\",{\"1\":{\"981\":1}}],[\"数据库备份变的巨大\",{\"1\":{\"792\":1}}],[\"数据库备份\",{\"1\":{\"655\":1}}],[\"数据库巡检\",{\"1\":{\"655\":1}}],[\"数据库返回数据\",{\"1\":{\"655\":1}}],[\"数据库更新\",{\"1\":{\"653\":1}}],[\"数据库库存更新的延迟\",{\"1\":{\"644\":1}}],[\"数据库成为瓶颈\",{\"1\":{\"639\":1}}],[\"数据库性能\",{\"1\":{\"639\":1,\"645\":1}}],[\"数据库优化\",{\"1\":{\"639\":1}}],[\"数据库设计和\",{\"1\":{\"638\":1}}],[\"数据库可能强制执行全表扫描\",{\"1\":{\"633\":1}}],[\"数据库无法利用索引\",{\"1\":{\"633\":1}}],[\"数据库唯一索引兜底\",{\"1\":{\"625\":1,\"697\":1}}],[\"数据库中的外键用于在不同表之间建立关联\",{\"1\":{\"638\":1}}],[\"数据库中的锁\",{\"1\":{\"618\":1,\"690\":1}}],[\"数据库中有库存吗\",{\"1\":{\"569\":1,\"641\":2}}],[\"数据库事务\",{\"1\":{\"618\":1,\"690\":1}}],[\"数据库事务的隔离级别\",{\"1\":{\"569\":1,\"641\":2}}],[\"数据库支持高并发的读写\",{\"1\":{\"611\":1,\"683\":1}}],[\"数据库四大特性\",{\"1\":{\"603\":1,\"675\":1}}],[\"数据库索引有哪些\",{\"1\":{\"603\":1,\"675\":1}}],[\"数据库索引的原理了解吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"数据库\",{\"0\":{\"903\":1},\"1\":{\"603\":1,\"604\":1,\"637\":1,\"641\":1,\"675\":1,\"676\":1,\"848\":2,\"1239\":1}}],[\"数据库这块除了mysql有没有了解过mongo\",{\"1\":{\"598\":1,\"670\":1}}],[\"数据库迁移原因与成本评估\",{\"1\":{\"576\":1,\"648\":1}}],[\"数据库和缓存数据一致性的问题\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"数据库怎么获得已经抢成功的数据\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"数据库外键关联不同表吗\",{\"1\":{\"566\":1,\"638\":2}}],[\"数据库连接这类存入sync\",{\"1\":{\"435\":1}}],[\"数据库开发需要一定的技术功底\",{\"1\":{\"334\":1}}],[\"数据库开发\",{\"0\":{\"334\":1}}],[\"数据库与大数据处理\",{\"0\":{\"162\":1}}],[\"数据库操作\",{\"1\":{\"122\":1,\"645\":1}}],[\"数据驱动的模板引擎\",{\"1\":{\"124\":1}}],[\"数据编码\",{\"1\":{\"124\":1}}],[\"数据结构除外\",{\"1\":{\"1308\":1}}],[\"数据结构大概是什么样子\",{\"1\":{\"592\":1,\"664\":1}}],[\"数据结构怎么样\",{\"1\":{\"566\":1,\"638\":2}}],[\"数据结构是泛型最常见的使用场景\",{\"1\":{\"342\":1}}],[\"数据结构\",{\"0\":{\"127\":1,\"969\":1},\"1\":{\"120\":1,\"127\":1,\"603\":1,\"675\":1,\"1309\":1}}],[\"数据将丢失\",{\"1\":{\"39\":1}}],[\"又比如系统过大\",{\"1\":{\"1068\":1}}],[\"又没有设置key\",{\"1\":{\"1023\":1}}],[\"又有自己的副本\",{\"1\":{\"1060\":1}}],[\"又有\",{\"1\":{\"988\":1}}],[\"又称快照\",{\"1\":{\"979\":1}}],[\"又称非对称加密\",{\"1\":{\"49\":1}}],[\"又可以是当作高速缓存存储\",{\"1\":{\"908\":1}}],[\"又或者在运行过程中需要动态调整\",{\"1\":{\"422\":1}}],[\"又或者说常用到的time包下的after函数\",{\"1\":{\"419\":1}}],[\"又或者只有一部分子协程在主协程退出前成功运行\",{\"1\":{\"412\":1}}],[\"又或者是通用接口\",{\"1\":{\"341\":1}}],[\"又或者是作为通道的类型\",{\"1\":{\"274\":1}}],[\"又限制了指针的使用\",{\"1\":{\"274\":1}}],[\"又想为linux\",{\"1\":{\"53\":1}}],[\"又要不存在\",{\"1\":{\"30\":1}}],[\"填写邮箱发送验证码\",{\"1\":{\"44\":1}}],[\"允许将普通函数用作http的处理器\",{\"1\":{\"1337\":1}}],[\"允许的结果\",{\"1\":{\"1254\":1}}],[\"允许你通过本地代理访问\",{\"1\":{\"1233\":1}}],[\"允许\",{\"1\":{\"1222\":1}}],[\"允许客户端和后端服务使用不同的通信协议\",{\"1\":{\"1071\":1}}],[\"允许客户端和服务器之间进行实时通信\",{\"1\":{\"637\":1}}],[\"允许每个记录包含多个字段\",{\"1\":{\"1018\":1}}],[\"允许数据结构的变化和扩展\",{\"1\":{\"906\":1}}],[\"允许更灵活的数据存储\",{\"1\":{\"906\":1}}],[\"允许事务在其视图下读取数据的旧版本\",{\"1\":{\"656\":1}}],[\"允许子类为一个或多个步骤提供具体实现\",{\"1\":{\"654\":1}}],[\"允许其他线程访问该资源\",{\"1\":{\"654\":1}}],[\"允许其存储的值在运行时动态的变化\",{\"1\":{\"204\":1}}],[\"允许程序在运行时获取类型\",{\"1\":{\"645\":1}}],[\"允许重复元素\",{\"1\":{\"638\":1}}],[\"允许不同系统或不同组件之间异步地传递消息\",{\"1\":{\"637\":1}}],[\"允许多重继承\",{\"1\":{\"637\":1}}],[\"允许脏读\",{\"1\":{\"634\":1}}],[\"允许调用了t\",{\"1\":{\"469\":1}}],[\"允许使用下划线\",{\"1\":{\"181\":1}}],[\"允许指定设置的每秒查询负载\",{\"1\":{\"145\":1}}],[\"允许一个对象在其内部状态改变时改变其行为\",{\"1\":{\"654\":1}}],[\"允许一个结构体作为另一个结构体的字段\",{\"1\":{\"635\":1}}],[\"允许一个人轻松地同时通过文件系统\",{\"1\":{\"132\":1}}],[\"允许一个程序以任意类型操作对象\",{\"1\":{\"124\":1}}],[\"允许用户设置project的获取权限\",{\"1\":{\"43\":1}}],[\"允许用户选择分享一个project的部分代码\",{\"1\":{\"43\":1}}],[\"允许免费设置仓库权限\",{\"1\":{\"43\":1}}],[\"它试图变得智能\",{\"1\":{\"1307\":1}}],[\"它指定了策略规则文档中字段的名称和顺序\",{\"1\":{\"1252\":1}}],[\"它都是成对出现的\",{\"1\":{\"1195\":1}}],[\"它支持泛型\",{\"1\":{\"1375\":1}}],[\"它支持多种访问控制模型\",{\"1\":{\"1238\":1}}],[\"它支持对文件系统的修改作为一次提交来一层层的叠加\",{\"1\":{\"1192\":1}}],[\"它支持非常快速的全文搜索\",{\"1\":{\"734\":1}}],[\"它包含了运行应用所需的所有代码\",{\"1\":{\"1183\":1}}],[\"它包含了操作系统\",{\"1\":{\"1183\":1}}],[\"它包含了有关所有go导出的类型\",{\"1\":{\"300\":1}}],[\"它无法修改\",{\"1\":{\"1133\":1}}],[\"它就是我们常说的消息队列\",{\"1\":{\"1067\":1}}],[\"它就是异或运算符\",{\"1\":{\"179\":1}}],[\"它最初由linkedin公司基于独特的设计实现为一个分布式的提交日志系统\",{\"1\":{\"1055\":1}}],[\"它最初是由linkedin开发\",{\"1\":{\"1018\":1}}],[\"它大概每秒钟可以处理几万到十几万条消息\",{\"1\":{\"1053\":1}}],[\"它存储了broker的元信息\",{\"1\":{\"1029\":1}}],[\"它具有复制\",{\"1\":{\"1006\":1}}],[\"它一般是由\",{\"1\":{\"996\":1}}],[\"它每隔一段固定时间就去检查当前数据发生改变的次数和改变的时间频率\",{\"1\":{\"980\":1}}],[\"它能够存储\",{\"1\":{\"984\":1}}],[\"它能够将内存中的数据保存到本地磁盘中\",{\"1\":{\"979\":1}}],[\"它能够有效减少\",{\"1\":{\"629\":1}}],[\"它接受两个参数\",{\"1\":{\"891\":1}}],[\"它接受一个可变长personoptions类型的参数\",{\"1\":{\"269\":1}}],[\"它接受一个\",{\"1\":{\"269\":1}}],[\"它返回所有匹配某个单独值的行可能会找到多个符合条件的行\",{\"1\":{\"814\":1}}],[\"它用来记录在mysql中响应时间超过阀值的语句\",{\"1\":{\"813\":1}}],[\"它用于分析变量的生命周期\",{\"1\":{\"633\":1}}],[\"它用于存放不知道长度的数据\",{\"1\":{\"242\":1}}],[\"它对数据会进行自我平衡\",{\"1\":{\"803\":1}}],[\"它类似普通的二叉树\",{\"1\":{\"803\":1}}],[\"它也要把字符串\",{\"1\":{\"778\":1}}],[\"它也同样实现了locker接口\",{\"1\":{\"431\":1}}],[\"它从\",{\"1\":{\"775\":1}}],[\"它还提供\",{\"1\":{\"735\":1}}],[\"它几乎是实时的\",{\"1\":{\"734\":1}}],[\"它比二叉树的层级要低\",{\"1\":{\"803\":1}}],[\"它比操作系统线程更轻量\",{\"1\":{\"654\":1}}],[\"它比线程更轻量\",{\"1\":{\"649\":1}}],[\"它通常和slicedata配合起来使用\",{\"1\":{\"1446\":1}}],[\"它通常用于表示某些标记或信号\",{\"1\":{\"651\":1}}],[\"它通过\",{\"1\":{\"641\":1}}],[\"它定义了一个对象的行为\",{\"1\":{\"651\":1}}],[\"它适用于多个\",{\"1\":{\"649\":1}}],[\"它广泛应用于日志分析\",{\"1\":{\"637\":1}}],[\"它看起来是随机的\",{\"1\":{\"637\":1}}],[\"它保证数据的顺序和完整性\",{\"1\":{\"636\":1}}],[\"它使用空白符号缩进和大量依赖外观的特色\",{\"1\":{\"1313\":1}}],[\"它使用图来比较请求对象和策略对象\",{\"1\":{\"1260\":1,\"1264\":1}}],[\"它使用标准输入并输出json\",{\"1\":{\"141\":1}}],[\"它使得\",{\"1\":{\"635\":1}}],[\"它更多的是为了展示某一个功能的使用方法\",{\"1\":{\"470\":1}}],[\"它只是暂时让你略过了提交到发版的这一过程\",{\"1\":{\"463\":1}}],[\"它没有中心节点的概念\",{\"1\":{\"1006\":1}}],[\"它没有任何字段\",{\"1\":{\"651\":1}}],[\"它没有名称\",{\"1\":{\"281\":1}}],[\"它没法被取消\",{\"1\":{\"425\":1}}],[\"它则是一边读一边写\",{\"1\":{\"403\":1}}],[\"它完完全全是一门面向工程的语言\",{\"1\":{\"329\":1}}],[\"它完全实现了mqtt协议v3\",{\"1\":{\"145\":1}}],[\"它与前者的数据文件互不兼容\",{\"1\":{\"328\":1}}],[\"它需要一定的时间进行采样\",{\"1\":{\"323\":1}}],[\"它会返回该段内存的切片表达形式\",{\"1\":{\"1446\":1}}],[\"它会在\",{\"1\":{\"1143\":1}}],[\"它会通过相应的命令\",{\"1\":{\"998\":1}}],[\"它会将数据全部存储在内存中\",{\"1\":{\"979\":1}}],[\"它会自动从master进行数据同步\",{\"1\":{\"965\":1}}],[\"它会根据版本及模块名缓存开发者下载过的模块\",{\"1\":{\"451\":1}}],[\"它会对程序运行时的数据进行部分采样\",{\"1\":{\"321\":1}}],[\"它会与go的目标文件最终链接成一个可执行文件\",{\"1\":{\"313\":1}}],[\"它会先将数据写入到内存中\",{\"1\":{\"220\":1}}],[\"它在生产者\",{\"1\":{\"1053\":1}}],[\"它在后台并发地进行垃圾回收\",{\"1\":{\"635\":1}}],[\"它在运行时会与可执行文件一起加载到内存中\",{\"1\":{\"312\":1}}],[\"它在io的基础上提供了缓存功能\",{\"1\":{\"121\":1}}],[\"它带有gc\",{\"1\":{\"310\":1}}],[\"它有以下特点\",{\"1\":{\"635\":1}}],[\"它有两种检查级别\",{\"1\":{\"300\":1}}],[\"它有不少的特色\",{\"1\":{\"43\":1}}],[\"它描述了一组抽象的规范\",{\"1\":{\"288\":1}}],[\"它不一定能在减少内存占用这方面带来实质性的提升\",{\"1\":{\"273\":1}}],[\"它必须是指针\",{\"1\":{\"269\":1}}],[\"它的内容结构更加简洁\",{\"1\":{\"1313\":1}}],[\"它的用途十分广泛\",{\"1\":{\"1310\":1}}],[\"它的含义是\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"它的性能和高可用用性均优越于主从模式和哨兵模式\",{\"1\":{\"1006\":1}}],[\"它的命令格式做了很大程度的简化\",{\"1\":{\"985\":1}}],[\"它的本质是\",{\"1\":{\"838\":1}}],[\"它的基本数据单位就是文档\",{\"1\":{\"827\":1}}],[\"它的作用是确保在最后的\",{\"1\":{\"641\":1}}],[\"它的作用主要是解决一致性构建问题\",{\"1\":{\"460\":1}}],[\"它的强一致性和高可用性使其成为分布式系统中常用的基础设施组件\",{\"1\":{\"635\":1}}],[\"它的增长趋势总体上而言会持续变缓\",{\"1\":{\"477\":1}}],[\"它的执行结果是\",{\"1\":{\"477\":1}}],[\"它的存在只是为了更加方便的进行本地开发\",{\"1\":{\"463\":1}}],[\"它的功能同样非常简单\",{\"1\":{\"446\":1}}],[\"它的功能非常简单\",{\"1\":{\"446\":1}}],[\"它的使用与其他的原子类型并无太大的差别\",{\"1\":{\"441\":1}}],[\"它的使用非常简单\",{\"1\":{\"434\":1}}],[\"它的实现也只是稍微封装了一下并调用withdeadline\",{\"1\":{\"428\":1}}],[\"它的出现是可以被接受的\",{\"1\":{\"389\":1}}],[\"它的返回值是c语言中的int而非go中的int\",{\"1\":{\"299\":1}}],[\"它的参数是会被预计算的\",{\"1\":{\"285\":1}}],[\"它的参数支持任意类型\",{\"1\":{\"219\":1}}],[\"它的输出\",{\"1\":{\"1422\":1}}],[\"它的输出如下\",{\"1\":{\"1422\":1}}],[\"它的输出还是和之前一样\",{\"1\":{\"287\":1}}],[\"它的输出一定是3而不是7\",{\"1\":{\"285\":1}}],[\"它的输出是\",{\"1\":{\"210\":2}}],[\"它的入参依旧是0和1\",{\"1\":{\"208\":1}}],[\"它的顺序是先计算值再赋值\",{\"1\":{\"208\":1}}],[\"它的创建开销极小\",{\"1\":{\"151\":1}}],[\"它们仅仅只是一个代表而已\",{\"1\":{\"1439\":1}}],[\"它们都是使用的本地文件系统\",{\"1\":{\"1428\":1}}],[\"它们是两个不同的变量\",{\"1\":{\"1422\":1}}],[\"它们是这样一个调用链go\",{\"1\":{\"300\":1}}],[\"它们之间不能有其它字符\",{\"1\":{\"1418\":1}}],[\"它们共享线程的栈内存\",{\"1\":{\"636\":1}}],[\"它们分别代表了\",{\"1\":{\"324\":1}}],[\"它们在go中会以字节数组的形式存在\",{\"1\":{\"308\":1}}],[\"它们诞生在exp函数的作用域内\",{\"1\":{\"282\":1}}],[\"它们的实际类型就是你传入的具体类型\",{\"1\":{\"1439\":1}}],[\"它们的实际类型如下\",{\"1\":{\"831\":1}}],[\"它们的类型是time\",{\"1\":{\"1430\":1}}],[\"它们的差异主要体现在三个方面\",{\"1\":{\"1051\":1}}],[\"它们的返回值就是一个闭包函数\",{\"1\":{\"269\":1}}],[\"它们的参数支持所有的可比较类型\",{\"1\":{\"209\":1}}],[\"它们一般是with开头\",{\"1\":{\"269\":1}}],[\"它们不再具有返回值\",{\"1\":{\"179\":1}}],[\"它们被降级为了语句statement\",{\"1\":{\"179\":1}}],[\"它控制可见性的方式非常简单\",{\"1\":{\"174\":1}}],[\"它摒弃了传统编程语言中的一些冗余和复杂性\",{\"1\":{\"150\":1}}],[\"它将现代编程语言中的许多最佳实践\",{\"1\":{\"148\":1}}],[\"它将不支持它的api添加到cors支持中\",{\"1\":{\"145\":1}}],[\"它可以通过内部重定向\",{\"1\":{\"1133\":1}}],[\"它可以保证一致性和分区容错性\",{\"1\":{\"1021\":1}}],[\"它可以正常处理客户端发送的命令\",{\"1\":{\"985\":1}}],[\"它可以更好的控制子孙协程以及层级更深的协程\",{\"1\":{\"423\":1}}],[\"它可以很灵活的去应对一些问题\",{\"1\":{\"346\":1}}],[\"它可以在o\",{\"1\":{\"344\":1}}],[\"它可以确保数据交换的安全性\",{\"1\":{\"151\":1}}],[\"它可以缓冲消息和热交换连接\",{\"1\":{\"145\":1}}],[\"它可将一个输入的tab分割的列翻译为适当对齐的文本\",{\"1\":{\"124\":1}}],[\"它是用于直接调用通过在execute时期传入的data中的函数\",{\"1\":{\"1420\":1}}],[\"它是默认的\",{\"1\":{\"1197\":1}}],[\"它是在一段时间以后在去启动\",{\"1\":{\"1163\":1}}],[\"它是upstream模块默认的负载均衡默认策略\",{\"1\":{\"1161\":1}}],[\"它是指当前现在的保持的active链接的数量限制\",{\"1\":{\"1158\":1}}],[\"它是配置在server中\",{\"1\":{\"1141\":1}}],[\"它是由操作系统的每一个用户去进行执行的\",{\"1\":{\"1131\":1}}],[\"它是为master进程去服务的\",{\"1\":{\"1126\":1}}],[\"它是和dir一起拼接形成\",{\"1\":{\"1010\":1}}],[\"它是动态的\",{\"1\":{\"649\":1}}],[\"它是数据表的聚簇索引\",{\"1\":{\"641\":1}}],[\"它是乐观锁的一种典型实现\",{\"1\":{\"440\":1}}],[\"它是一种在协程间通信的解决方案\",{\"1\":{\"413\":1}}],[\"它是一个控制写入日志的文件的日志组件\",{\"1\":{\"1307\":1}}],[\"它是一个针对api的一个管理工具\",{\"1\":{\"1073\":1}}],[\"它是一个独立的进程\",{\"1\":{\"996\":1}}],[\"它是一个变量而不是常量\",{\"1\":{\"388\":1}}],[\"它是一个简单的记录包\",{\"1\":{\"124\":1}}],[\"它是通过错误来体现\",{\"1\":{\"388\":1}}],[\"它是绝对不会自己释放掉的\",{\"1\":{\"310\":1}}],[\"它是中文分词算法\",{\"1\":{\"144\":1}}],[\"它限制了任务执行的并发性\",{\"1\":{\"137\":1}}],[\"它遵循实体组件系统范式\",{\"1\":{\"134\":1}}],[\"它自动构建html输出\",{\"1\":{\"124\":1}}],[\"它提供的api与text\",{\"1\":{\"1428\":1}}],[\"它提供14天的免费试用版\",{\"1\":{\"876\":1}}],[\"它提供了处理网络通信\",{\"1\":{\"1365\":1}}],[\"它提供了数据库操作的实时统计信息\",{\"1\":{\"877\":1}}],[\"它提供了fmt\",{\"1\":{\"219\":1}}],[\"它提供了用于构建各种机器学习和神经网络算法的原语\",{\"1\":{\"142\":1}}],[\"它提供了基本的同步原语\",{\"1\":{\"121\":1}}],[\"它提供命令行参数的规则定义和传入参数解析的功能\",{\"1\":{\"121\":1}}],[\"它为什么要这样回答\",{\"1\":{\"79\":1}}],[\"它为开源项目免费提供git存储\",{\"1\":{\"12\":1}}],[\"它甚至使你能够在不了解c语言的情况下编写出新的换源方法\",{\"1\":{\"77\":1}}],[\"相当的强大\",{\"1\":{\"1308\":1}}],[\"相当于老板在外面接了很多的任务\",{\"1\":{\"1127\":1}}],[\"相当于一个工作人\",{\"1\":{\"1126\":1}}],[\"相当于一个领导者\",{\"1\":{\"1126\":1}}],[\"相当于\",{\"1\":{\"861\":16}}],[\"相当于进行了一次i\",{\"1\":{\"804\":1}}],[\"相当于2和4g的云服务器\",{\"1\":{\"79\":1}}],[\"相同的数字异或结果为零\",{\"1\":{\"645\":1}}],[\"相关\",{\"1\":{\"633\":1}}],[\"相关概念\",{\"1\":{\"579\":1,\"651\":1}}],[\"相关配置文档请见\",{\"1\":{\"2\":1}}],[\"相比实例一成功数增加了4个\",{\"1\":{\"1155\":1}}],[\"相比国外的比较流行的同类产品\",{\"1\":{\"1054\":1}}],[\"相比串行处理\",{\"1\":{\"1052\":1}}],[\"相比至下其他都在10k之下\",{\"1\":{\"909\":1}}],[\"相比传统的\",{\"1\":{\"637\":1}}],[\"相比随机写入\",{\"1\":{\"636\":1}}],[\"相比于以上三种更加的轻便\",{\"1\":{\"1321\":1}}],[\"相比于固定的测试数据\",{\"1\":{\"477\":1}}],[\"相比于管道和waitgroup\",{\"1\":{\"423\":1}}],[\"相比之下还增加了25\",{\"1\":{\"476\":1}}],[\"相比之下简单\",{\"1\":{\"119\":1}}],[\"相较于关系数据库更为灵活\",{\"1\":{\"827\":1}}],[\"相较于前者该函数会创建一切必要的父目录\",{\"1\":{\"409\":1}}],[\"相较于第一种可以从指定偏移量读取\",{\"1\":{\"401\":1}}],[\"相互调用\",{\"1\":{\"296\":1}}],[\"相应的占用的内存要多一些\",{\"1\":{\"273\":1}}],[\"相对于什么io多路复用性能更高\",{\"1\":{\"573\":1,\"645\":1}}],[\"相对于github\",{\"1\":{\"43\":1}}],[\"相对路径链接\",{\"1\":{\"65\":1}}],[\"常存储在客户端\",{\"1\":{\"641\":1}}],[\"常存储不确定的类型\",{\"1\":{\"516\":1}}],[\"常规\",{\"1\":{\"509\":1}}],[\"常量在声明时就必须初始化一个值\",{\"1\":{\"211\":1}}],[\"常量的声明需要用到const关键字\",{\"1\":{\"211\":1}}],[\"常量的值无法被修改\",{\"1\":{\"210\":1}}],[\"常量的值无法在运行时改变\",{\"1\":{\"210\":1}}],[\"常量只能是基本数据类型\",{\"1\":{\"210\":1}}],[\"常量表达式即表达式的最终结果是一个常量\",{\"1\":{\"239\":1}}],[\"常量表达式\",{\"1\":{\"210\":1,\"211\":1,\"239\":2}}],[\"常量myname就是公开的\",{\"1\":{\"174\":1}}],[\"常量\",{\"1\":{\"173\":1,\"174\":3,\"175\":1,\"234\":1,\"239\":1,\"1341\":1}}],[\"常用\",{\"1\":{\"1283\":1}}],[\"常用表达式\",{\"1\":{\"1175\":1}}],[\"常用定时任务命令\",{\"1\":{\"1175\":1}}],[\"常用于缓存和实时分析\",{\"1\":{\"907\":1}}],[\"常用于自然语言处理任务\",{\"1\":{\"655\":1}}],[\"常用于保存\",{\"1\":{\"641\":1}}],[\"常用于无状态的身份验证和信息传输\",{\"1\":{\"641\":1}}],[\"常用于分布式锁\",{\"1\":{\"634\":1}}],[\"常用数据类型\",{\"1\":{\"641\":1}}],[\"常用数据结构底层原理\",{\"1\":{\"537\":1}}],[\"常用操作\",{\"1\":{\"619\":1,\"691\":1}}],[\"常用的场景\",{\"0\":{\"1019\":1}}],[\"常用的索引数据结构\",{\"1\":{\"580\":1,\"652\":1}}],[\"常用的三个并发模型是哪些\",{\"1\":{\"543\":1}}],[\"常用的并发控制方法有三种\",{\"1\":{\"412\":1}}],[\"常用规则\",{\"0\":{\"482\":1}}],[\"常用参数\",{\"0\":{\"469\":1,\"485\":1,\"497\":1}}],[\"常用命令\",{\"0\":{\"456\":1},\"1\":{\"1203\":1}}],[\"常用第三方包\",{\"0\":{\"122\":1}}],[\"常用第三方包说明\",{\"1\":{\"120\":1}}],[\"常用包\",{\"0\":{\"121\":1},\"1\":{\"121\":1}}],[\"常用包和第三方包介绍\",{\"0\":{\"120\":1}}],[\"常用机器学习库\",{\"1\":{\"120\":1}}],[\"常用框架\",{\"1\":{\"120\":1}}],[\"常用官方包说明\",{\"1\":{\"120\":1}}],[\"常用远程仓库托管服务\",{\"0\":{\"43\":1}}],[\"常见错误排查\",{\"0\":{\"825\":1}}],[\"常见于排序orderby\",{\"1\":{\"814\":1}}],[\"常见于主键或唯一索引扫描\",{\"1\":{\"814\":1}}],[\"常见方式包括\",{\"1\":{\"653\":1}}],[\"常见实现\",{\"1\":{\"653\":1}}],[\"常见用途\",{\"1\":{\"621\":1,\"693\":1}}],[\"常见查询条件为姓名\",{\"1\":{\"603\":1,\"675\":1}}],[\"常见类型\",{\"1\":{\"529\":1}}],[\"常见的应用场景\",{\"0\":{\"1241\":1}}],[\"常见的问题\",{\"0\":{\"1208\":1}}],[\"常见的问题是订单的状态已更新\",{\"1\":{\"638\":1}}],[\"常见的服务器\",{\"0\":{\"1108\":1}}],[\"常见的网关横向对比\",{\"1\":{\"1072\":1}}],[\"常见的关系型数据库是基于磁盘存储的\",{\"1\":{\"961\":1}}],[\"常见的mysql性能分析工具和配置\",{\"0\":{\"812\":1}}],[\"常见的分页方式\",{\"1\":{\"656\":1}}],[\"常见的云服务商有\",{\"1\":{\"655\":1}}],[\"常见的设计模式包括\",{\"1\":{\"654\":1}}],[\"常见的解决方案包括\",{\"1\":{\"644\":1}}],[\"常见的消息队列系统有\",{\"1\":{\"637\":1}}],[\"常见的伪随机生成算法有\",{\"1\":{\"637\":1}}],[\"常见的标记包括\",{\"1\":{\"634\":1}}],[\"常见的实现方式包括\",{\"1\":{\"633\":1}}],[\"常见的数据结构\",{\"1\":{\"622\":1,\"694\":1}}],[\"常见的两种打开文件的方式是使用os包提供的两个函数\",{\"1\":{\"400\":1}}],[\"常见的免费互联网远程仓库托管服务如下\",{\"1\":{\"43\":1}}],[\"常见格式\",{\"1\":{\"28\":1}}],[\"也正是这四个操作才能写出能够忽略类型系统从而直接读写内存的代码\",{\"1\":{\"1443\":1}}],[\"也要及时关闭\",{\"1\":{\"1434\":1}}],[\"也拷贝了内部切片的指针\",{\"1\":{\"1411\":1}}],[\"也提供了一些三角函数的工具函数\",{\"1\":{\"1308\":1}}],[\"也提供其他开发语言\",{\"1\":{\"1239\":1}}],[\"也有助于团队的编码风格和形成规范\",{\"1\":{\"1273\":1}}],[\"也有部分的是自行搭建仓库\",{\"1\":{\"459\":1}}],[\"也解决很多因为环境导致的问题\",{\"1\":{\"1180\":1}}],[\"也挂了\",{\"1\":{\"1165\":1}}],[\"也承受不住\",{\"1\":{\"1165\":1}}],[\"也将其配置到这个圆环上\",{\"1\":{\"1165\":1}}],[\"也只有一个\",{\"1\":{\"1126\":1}}],[\"也能通过本地磁盘对数据进行恢复\",{\"1\":{\"979\":1}}],[\"也能其集成到其它的web框架中\",{\"1\":{\"324\":1}}],[\"也最为简单\",{\"1\":{\"890\":1}}],[\"也很少用于聚合\",{\"1\":{\"718\":1}}],[\"也更新缓存\",{\"1\":{\"644\":1}}],[\"也同步更新数据库\",{\"1\":{\"644\":1}}],[\"也方便实现原子性操作\",{\"1\":{\"554\":1}}],[\"也会清空从slave节点的数据信息\",{\"1\":{\"990\":1}}],[\"也会导致性能下降\",{\"1\":{\"799\":1}}],[\"也会被忽略掉\",{\"1\":{\"459\":1}}],[\"也会发生逃逸现象\",{\"1\":{\"319\":1}}],[\"也多了一个方法unwrap\",{\"1\":{\"392\":1}}],[\"也无法知晓池中有几个对象\",{\"1\":{\"435\":1}}],[\"也无法并入类型约束中\",{\"1\":{\"341\":1}}],[\"也无法判断其是否存在\",{\"1\":{\"261\":1}}],[\"也不利于查询的性能提升\",{\"1\":{\"800\":1}}],[\"也不是一个硬性的规范\",{\"1\":{\"470\":1}}],[\"也不建议手动修改该文件\",{\"1\":{\"460\":1}}],[\"也不能取值\",{\"1\":{\"425\":1}}],[\"也不好固定内存\",{\"1\":{\"300\":1}}],[\"也不太建议这么做\",{\"1\":{\"296\":1}}],[\"也不在乎什么绝世起重机\",{\"1\":{\"293\":1}}],[\"也对应了官方对于基本接口实现的定义\",{\"1\":{\"293\":1}}],[\"也印证了map是无序存储\",{\"1\":{\"263\":1}}],[\"也就说必须是\",{\"1\":{\"1417\":1}}],[\"也就追加模式\",{\"1\":{\"979\":1}}],[\"也就无法正常取值\",{\"1\":{\"261\":1}}],[\"也就无法作为map的键\",{\"1\":{\"259\":1}}],[\"也就是8个字节\",{\"1\":{\"1442\":1}}],[\"也就是我们的容器\",{\"1\":{\"1183\":1}}],[\"也就是我们通常数据库所说的索引\",{\"1\":{\"804\":1}}],[\"也就是同一个资源请求\",{\"1\":{\"1166\":1}}],[\"也就是拒绝请求\",{\"1\":{\"1146\":1}}],[\"也就是处理请求\",{\"1\":{\"1146\":1}}],[\"也就是replicas\",{\"1\":{\"1064\":1}}],[\"也就是redis安装目录\",{\"1\":{\"981\":1}}],[\"也就是把8008变成8007的从节点\",{\"1\":{\"1010\":1}}],[\"也就是\",{\"1\":{\"815\":1,\"1155\":1}}],[\"也就是用多个字段来定义一个主键\",{\"1\":{\"793\":1}}],[\"也就是e\",{\"1\":{\"793\":1}}],[\"也就是es的match语法\",{\"1\":{\"758\":1}}],[\"也就是不管int\",{\"1\":{\"791\":1}}],[\"也就是不可重入锁\",{\"1\":{\"429\":1}}],[\"也就是默认的\",{\"1\":{\"498\":1}}],[\"也就是基准测试中的循环次数\",{\"1\":{\"475\":1}}],[\"也就是cas\",{\"1\":{\"440\":1}}],[\"也就是接收者类型\",{\"1\":{\"370\":1}}],[\"也就是要修改的字段\",{\"1\":{\"368\":1}}],[\"也就是interface\",{\"1\":{\"348\":1}}],[\"也就是一个字符数组的指针\",{\"1\":{\"303\":1}}],[\"也就是gcc\",{\"1\":{\"297\":1}}],[\"也就是解引用\",{\"1\":{\"275\":1}}],[\"也就是说我申请一块20m内存大小的内存区域命名为\",{\"1\":{\"1158\":1}}],[\"也就是说只要请求能够进入burst队列\",{\"1\":{\"1156\":1}}],[\"也就是说url=protocol+host+port\",{\"1\":{\"1084\":1}}],[\"也就是说\",{\"1\":{\"651\":1,\"965\":1,\"980\":1,\"1027\":1}}],[\"也就是说指针无法偏移\",{\"1\":{\"276\":1}}],[\"也就是说字符串的组成单位是字节而不是字符\",{\"1\":{\"258\":1}}],[\"也就是说所有通过此工具的格式化后的代码都是同一种代码风格\",{\"1\":{\"188\":1}}],[\"也就是未来web框架的路由处理要完成的部分\",{\"1\":{\"110\":1}}],[\"也是必须要熟练掌握和使用的库\",{\"1\":{\"1342\":1}}],[\"也是需要继续配置繁琐的环境\",{\"1\":{\"1180\":1}}],[\"也是可以的\",{\"1\":{\"863\":1}}],[\"也是\",{\"1\":{\"847\":1}}],[\"也是所有类型的接口\",{\"1\":{\"516\":1}}],[\"也是作为数据类型使用很灵活\",{\"1\":{\"514\":1}}],[\"也是同样的道理\",{\"1\":{\"328\":1}}],[\"也是go的核心\",{\"1\":{\"277\":1,\"514\":1}}],[\"也是一种多路平衡查找树\",{\"1\":{\"805\":1}}],[\"也是一种哈希表\",{\"1\":{\"258\":1}}],[\"也是一片连续的内存空间\",{\"1\":{\"251\":1}}],[\"也是静态类型但是解释型语言\",{\"1\":{\"170\":1}}],[\"也是web框架\",{\"1\":{\"123\":1}}],[\"也广泛应用于数据库连接\",{\"1\":{\"162\":1}}],[\"也没有集成很多组件\",{\"1\":{\"1272\":1}}],[\"也没有头文件\",{\"1\":{\"150\":1}}],[\"也没怎么修改啊\",{\"1\":{\"9\":1}}],[\"也叫字面值\",{\"1\":{\"180\":1}}],[\"也叫\",{\"1\":{\"148\":1}}],[\"也称为unidecode\",{\"1\":{\"144\":1}}],[\"也可能有其他编程语言的知识和经验\",{\"1\":{\"636\":1}}],[\"也可能是一个函数\",{\"1\":{\"471\":1}}],[\"也可以通过new方法创建自己的实例\",{\"1\":{\"1341\":1}}],[\"也可以通过命令测试如何生产消息\",{\"1\":{\"1034\":1}}],[\"也可以直接http\",{\"1\":{\"1337\":1}}],[\"也可以自行编写\",{\"1\":{\"1303\":1}}],[\"也可以参考官方在反序列化配置时的步骤\",{\"1\":{\"1302\":1}}],[\"也可以这样定义网络\",{\"1\":{\"1197\":1}}],[\"也可以这么写\",{\"1\":{\"212\":1}}],[\"也可以apisix和gateway搭配使用\",{\"1\":{\"1072\":1}}],[\"也可以同时进行同步数据\",{\"1\":{\"990\":1}}],[\"也可以将这个文件的命令全部执行一遍就可恢复以前的样子\",{\"1\":{\"985\":1}}],[\"也可以将这些接口集成到自己的路由中而不是使用默认路由\",{\"1\":{\"324\":1}}],[\"也可以监视服务器的负载\",{\"1\":{\"877\":1}}],[\"也可以判断是否启动\",{\"1\":{\"852\":1}}],[\"也可以是基本类型的字面量\",{\"1\":{\"1417\":1}}],[\"也可以是基本类型\",{\"1\":{\"1417\":1}}],[\"也可以是域名\",{\"1\":{\"1123\":1}}],[\"也可以是具体的ip\",{\"1\":{\"1123\":1}}],[\"也可以是第三方库\",{\"1\":{\"890\":1}}],[\"也可以是多个学校通用\",{\"1\":{\"639\":1}}],[\"也可以是char数组类型\",{\"1\":{\"303\":1}}],[\"也可以修改$gomodcache来指定存放在另外一个位置\",{\"1\":{\"457\":1}}],[\"也可以使用下面两个函数\",{\"1\":{\"1428\":1}}],[\"也可以使用flag\",{\"1\":{\"1325\":1}}],[\"也可以使用面板来操作\",{\"1\":{\"1229\":1}}],[\"也可以使用options\",{\"1\":{\"834\":1}}],[\"也可以使用ignore\",{\"1\":{\"816\":1}}],[\"也可以使用go\",{\"1\":{\"453\":1}}],[\"也可以使用strings\",{\"1\":{\"256\":1}}],[\"也可以读\",{\"1\":{\"419\":1}}],[\"也可以被float64类型代表\",{\"1\":{\"385\":1}}],[\"也可以反射调用函数\",{\"1\":{\"363\":1}}],[\"也可以声明泛型变量的方式来解决零值问题\",{\"1\":{\"343\":1}}],[\"也可以声明的时候直接赋值\",{\"1\":{\"206\":1}}],[\"也可以如下\",{\"1\":{\"338\":1}}],[\"也可以在c中直接修改go中的字符串\",{\"1\":{\"303\":1}}],[\"也可以传递字节切片\",{\"1\":{\"303\":1}}],[\"也可以根据上述的方法自己定义\",{\"1\":{\"301\":1}}],[\"也可以减少后续维护的负担\",{\"1\":{\"287\":1}}],[\"也可以匿名组合\",{\"1\":{\"270\":1}}],[\"也可以转换为字节切片再进行添加元素\",{\"1\":{\"257\":1}}],[\"也可以把表达式写的更复杂些\",{\"1\":{\"228\":1}}],[\"也可以用来映射数据\",{\"1\":{\"831\":1}}],[\"也可以用于会话存储\",{\"1\":{\"651\":1}}],[\"也可以用于复数\",{\"1\":{\"221\":1}}],[\"也可以用traces命令不过它的输出很冗长\",{\"1\":{\"326\":1}}],[\"也可以用元素初始化\",{\"1\":{\"239\":1}}],[\"也可以用括号括起来\",{\"1\":{\"175\":1}}],[\"也可以前往参考手册\",{\"1\":{\"178\":1,\"179\":1}}],[\"也可以进行团队协作开发\",{\"1\":{\"39\":1}}],[\"也可强制续签证书\",{\"1\":{\"84\":1}}],[\"一目了然\",{\"1\":{\"1313\":1}}],[\"一天被定义为\",{\"1\":{\"1307\":1}}],[\"一起使用\",{\"1\":{\"1307\":1}}],[\"一些详细的配置请自行了解\",{\"1\":{\"1336\":1}}],[\"一些详细的配置这里不会做过多的赘述\",{\"1\":{\"1334\":1}}],[\"一些自定义的编码器\",{\"1\":{\"1302\":1}}],[\"一些\",{\"1\":{\"1254\":1}}],[\"一些镜像中\",{\"1\":{\"1199\":1}}],[\"一些公司根据规范设计具体的数据线\",{\"1\":{\"516\":1}}],[\"一端彼此相连着\",{\"1\":{\"1195\":1}}],[\"一端连着协议栈\",{\"1\":{\"1195\":1}}],[\"一股子一股子\",{\"1\":{\"1155\":1}}],[\"一是控制速率\",{\"1\":{\"1145\":1}}],[\"一是将指针接收者改为值接收者\",{\"1\":{\"287\":1}}],[\"一台或多台服务器组成\",{\"1\":{\"1020\":1}}],[\"一台机器上可以运行多个docker容器\",{\"1\":{\"822\":1}}],[\"一次只允许每个ip地址一个连接\",{\"1\":{\"1152\":1}}],[\"一次只保存一个修改数据库的命令\",{\"1\":{\"988\":1}}],[\"一次保存整个数据库\",{\"1\":{\"988\":1}}],[\"一次url的请求过程\",{\"1\":{\"600\":1,\"672\":1}}],[\"一对键值\",{\"1\":{\"831\":2}}],[\"一共执行了多少时间\",{\"1\":{\"813\":1}}],[\"一共有\",{\"1\":{\"483\":1}}],[\"一律\",{\"1\":{\"795\":1}}],[\"一律为innodb\",{\"1\":{\"794\":1}}],[\"一律小写\",{\"1\":{\"794\":1}}],[\"一份指标数据\",{\"1\":{\"789\":1}}],[\"一年内单表数据量一般含char不超过500w条\",{\"1\":{\"784\":1}}],[\"一致性hash算法的使用场景\",{\"1\":{\"1165\":1}}],[\"一致性hash算法\",{\"1\":{\"1165\":1}}],[\"一致性hash\",{\"0\":{\"1165\":1}}],[\"一致性\",{\"1\":{\"644\":1,\"904\":1,\"1181\":1}}],[\"一致性哈希函数的端口\",{\"1\":{\"128\":1}}],[\"一直性hash算法在很多场景下都有应用\",{\"1\":{\"1165\":1}}],[\"一直在执行某一函数的相同代码行\",{\"1\":{\"634\":1}}],[\"一直回车即可\",{\"1\":{\"50\":1}}],[\"一条select语句的执行流程\",{\"1\":{\"587\":1,\"659\":1}}],[\"一条\",{\"1\":{\"584\":1,\"656\":1}}],[\"一道算法题\",{\"1\":{\"622\":1,\"694\":1}}],[\"一道算法爬楼梯\",{\"1\":{\"582\":1,\"654\":2}}],[\"一道编程题\",{\"1\":{\"582\":1,\"654\":2}}],[\"一\",{\"0\":{\"575\":1,\"647\":1,\"855\":1,\"865\":1}}],[\"一面\",{\"0\":{\"569\":1,\"579\":1,\"580\":1,\"585\":1,\"590\":1,\"595\":1,\"603\":1,\"606\":1,\"610\":1,\"613\":1,\"615\":1,\"617\":1,\"624\":1,\"641\":1,\"651\":1,\"652\":1,\"657\":1,\"662\":1,\"667\":1,\"675\":1,\"678\":1,\"682\":1,\"685\":1,\"687\":1,\"689\":1,\"696\":1}}],[\"一下写了5个\",{\"1\":{\"417\":1}}],[\"一点也没有\",{\"1\":{\"412\":1}}],[\"一类是没有方法集的接口\",{\"1\":{\"347\":1}}],[\"一样会造成上下文泄露\",{\"1\":{\"428\":1}}],[\"一样\",{\"1\":{\"303\":1,\"310\":1}}],[\"一组方法集\",{\"1\":{\"516\":1}}],[\"一组方法的集合\",{\"1\":{\"289\":1}}],[\"一组被版本标记的包集合\",{\"1\":{\"455\":1}}],[\"一组类型的集合\",{\"1\":{\"289\":1}}],[\"一定会有充分的单元测试和合理的测试覆盖率\",{\"1\":{\"480\":1}}],[\"一定会觉得很熟悉\",{\"1\":{\"221\":1}}],[\"一定要配置\",{\"1\":{\"1010\":1}}],[\"一定要让小表驱动大表\",{\"1\":{\"821\":1}}],[\"一定要去做优化\",{\"1\":{\"814\":1}}],[\"一定要释放回池中\",{\"1\":{\"435\":1}}],[\"一定要记得关闭文件\",{\"1\":{\"410\":1}}],[\"一定要搞清楚我们为什么要学习它\",{\"1\":{\"110\":1}}],[\"一切都会被优化\",{\"1\":{\"142\":1}}],[\"一种轻量级\",{\"1\":{\"1191\":1}}],[\"一种是手动触发\",{\"1\":{\"981\":1}}],[\"一种是通过索引来进行访问\",{\"1\":{\"367\":1}}],[\"一种是通过func关键字直接声明\",{\"1\":{\"278\":1}}],[\"一种表示页面空闲或使用的bitmap\",{\"1\":{\"965\":1}}],[\"一种类似json的结构\",{\"1\":{\"827\":1}}],[\"一种复合类型\",{\"1\":{\"513\":1}}],[\"一种解决办法就是再定义一个新的函数\",{\"1\":{\"337\":1}}],[\"一种用于不同\",{\"1\":{\"151\":1}}],[\"一种由\",{\"1\":{\"151\":1}}],[\"一种异步执行功能的安全方法\",{\"1\":{\"137\":1}}],[\"一种软件包\",{\"1\":{\"132\":1}}],[\"一个模板中可以定义有多个模板\",{\"1\":{\"1425\":1}}],[\"一个路径对应树的一个分支\",{\"1\":{\"1285\":1}}],[\"一个角色可以包含任意的操作\",{\"1\":{\"1259\":1}}],[\"一个请求alice\",{\"1\":{\"1256\":1}}],[\"一个落脚点\",{\"1\":{\"1193\":1}}],[\"一个容器运行一种服务\",{\"1\":{\"1183\":1}}],[\"一个兆字节的区域可以保持大约32000个32字节的状态或大约16000个64字节的状态\",{\"1\":{\"1152\":1}}],[\"一个topic继续拆分为partiton让一个b对应一个partition\",{\"1\":{\"1062\":1}}],[\"一个数据多个副本\",{\"1\":{\"1055\":1}}],[\"一个商品服务\",{\"1\":{\"1012\":1}}],[\"一个子进程来进行持久化操作\",{\"1\":{\"981\":1}}],[\"一个或多个\",{\"1\":{\"970\":1}}],[\"一个或者多个\",{\"1\":{\"814\":1}}],[\"一个对象可以保存在多个page上面\",{\"1\":{\"965\":1}}],[\"一个库中可以创建多个集合\",{\"1\":{\"846\":1}}],[\"一个例子如下\",{\"1\":{\"702\":1}}],[\"一个p通常对应一个操作系统线程\",{\"1\":{\"651\":1}}],[\"一个轻量级的线程\",{\"1\":{\"651\":1}}],[\"一个sql语句是按照\",{\"1\":{\"782\":1}}],[\"一个sql语句\",{\"1\":{\"614\":1,\"686\":1}}],[\"一个类在jvm的生命周期\",{\"1\":{\"598\":1,\"670\":1}}],[\"一个工程质量良好的项目\",{\"1\":{\"480\":1}}],[\"一个轮次完成后已经流逝的时间\",{\"1\":{\"477\":1}}],[\"一个完整的go\",{\"1\":{\"465\":1}}],[\"一个goroutine会被分配到一个p\",{\"1\":{\"654\":1}}],[\"一个goroutine是一个函数或者方法\",{\"1\":{\"539\":1}}],[\"一个go\",{\"1\":{\"459\":1}}],[\"一个全球代理\",{\"1\":{\"451\":1}}],[\"一个好的依赖管理工具可以为开发者省去不少时间并且可以提升开发效率\",{\"1\":{\"442\":1}}],[\"一个有缓冲管道用于协程间通信\",{\"1\":{\"417\":1}}],[\"一个布尔类型的值\",{\"1\":{\"415\":1}}],[\"一个关闭管道的例子如下\",{\"1\":{\"414\":1}}],[\"一个只写\",{\"1\":{\"403\":1}}],[\"一个只读\",{\"1\":{\"403\":1}}],[\"一个建筑公司想一种特殊规格的起重机\",{\"1\":{\"293\":1}}],[\"一个是\",{\"1\":{\"743\":2}}],[\"一个是gorm中转为sql语句\",{\"1\":{\"513\":1}}],[\"一个是类型转换过后的值\",{\"1\":{\"386\":1}}],[\"一个是切片\",{\"1\":{\"281\":1}}],[\"一个是取地址符\",{\"1\":{\"275\":1}}],[\"一个空的结构体不会占用内存\",{\"1\":{\"265\":1}}],[\"一个中文字符会占用3个字节\",{\"1\":{\"258\":1}}],[\"一个英文字符只占一个字节\",{\"1\":{\"255\":1}}],[\"一个汉字在大多数情况下占3个字节\",{\"1\":{\"255\":1}}],[\"一个根据成绩打分的例子如下\",{\"1\":{\"229\":1}}],[\"一个变量如果只是声明而不赋值\",{\"1\":{\"205\":1}}],[\"一个没有参数\",{\"1\":{\"201\":1}}],[\"一个整型指针\",{\"1\":{\"201\":1}}],[\"一个包内名为internal\",{\"1\":{\"176\":1}}],[\"一个简单的文档例子如下\",{\"1\":{\"847\":1}}],[\"一个简单的文件夹复制的代码示例如下\",{\"1\":{\"410\":1}}],[\"一个简单的例子如下\",{\"1\":{\"230\":1}}],[\"一个简单的ocr\",{\"1\":{\"142\":1}}],[\"一个简单而轻便的阅读器\",{\"1\":{\"143\":1}}],[\"一个简单但功能强大的错误处理软件包\",{\"1\":{\"131\":1}}],[\"一个小型\",{\"1\":{\"127\":1}}],[\"一个月之内\",{\"1\":{\"12\":1}}],[\"一般应用生产环境中\",{\"1\":{\"1235\":1}}],[\"一般cpu设置\",{\"1\":{\"1131\":1}}],[\"一般吞吐量相对较低\",{\"1\":{\"1019\":1}}],[\"一般而言\",{\"1\":{\"1000\":1}}],[\"一般我们项目中引入redis\",{\"1\":{\"961\":1}}],[\"一般一个东西好不好用\",{\"1\":{\"961\":1}}],[\"一般一个需求对应一个feature\",{\"1\":{\"58\":1}}],[\"一般简称dsn\",{\"1\":{\"891\":1}}],[\"一般端口是27017\",{\"1\":{\"851\":1}}],[\"一般就看这列的重复行\",{\"1\":{\"815\":1}}],[\"一般就是在你的where语句中出现between\",{\"1\":{\"814\":1}}],[\"一般就分配到栈上和堆上这两个地方\",{\"1\":{\"316\":1}}],[\"一般情况使用前者即可\",{\"1\":{\"1414\":1}}],[\"一般情况这个问题不太严重\",{\"1\":{\"809\":1}}],[\"一般情况下\",{\"1\":{\"460\":1,\"549\":1,\"1332\":1}}],[\"一般情况下可以使用\",{\"1\":{\"257\":1}}],[\"一般为3到5之间\",{\"1\":{\"805\":1}}],[\"一般使用磁盘i\",{\"1\":{\"805\":1}}],[\"一般使用场景\",{\"1\":{\"516\":1}}],[\"一般使用场景有\",{\"1\":{\"513\":1}}],[\"一般作为关联列\",{\"1\":{\"794\":1}}],[\"一般小数位数不会是0\",{\"1\":{\"791\":1}}],[\"一般互联网行业中都根据kimball模式实施数据仓库\",{\"1\":{\"789\":1}}],[\"一般单表字段上限控制在20到50个\",{\"1\":{\"785\":1}}],[\"一般中型项目的团队规模在\",{\"1\":{\"639\":1}}],[\"一般去哪里找这些解决方案\",{\"1\":{\"607\":1,\"679\":1}}],[\"一般是结构体或者map\",{\"1\":{\"1417\":1}}],[\"一般是文件目录不存在\",{\"1\":{\"1171\":1}}],[\"一般是sentinel\",{\"1\":{\"1000\":1}}],[\"一般是什么原因会导致慢sql\",{\"1\":{\"598\":1,\"670\":1}}],[\"一般是一些基本数据类型\",{\"1\":{\"528\":1}}],[\"一般是普通函数结合匿名函数\",{\"1\":{\"514\":1}}],[\"一般在实际工作中冗余更受欢迎一些\",{\"1\":{\"789\":1}}],[\"一般在通道使用\",{\"1\":{\"509\":1}}],[\"一般在go中\",{\"1\":{\"213\":1}}],[\"一般不会出现需要使用如此巨大数量的字段的情况\",{\"1\":{\"799\":1}}],[\"一般不建议这么做\",{\"1\":{\"460\":1}}],[\"一般不推荐使用\",{\"1\":{\"218\":1,\"223\":1}}],[\"一般会在函数的形参和返回值中出现\",{\"1\":{\"419\":1}}],[\"一般会比较推荐使用官方的另一个增强包\",{\"1\":{\"393\":1}}],[\"一般都是静态路由\",{\"1\":{\"1285\":1}}],[\"一般都是在括号中使用\",{\"1\":{\"212\":1}}],[\"一般都不会临时创建error\",{\"1\":{\"390\":1}}],[\"一般建议不要在for循环中使用defer\",{\"1\":{\"284\":1}}],[\"一般这种是在接口或函数类型声明时才会用到\",{\"1\":{\"279\":1}}],[\"一般来说日志的配置都是写在配置文件里的\",{\"1\":{\"1302\":1}}],[\"一般来说cpu有几个\",{\"1\":{\"1130\":1}}],[\"一般来说\",{\"1\":{\"258\":1,\"498\":1,\"504\":1,\"645\":1,\"814\":1}}],[\"一般来讲为了避免将测试代码提交\",{\"1\":{\"58\":1}}],[\"一般项目推荐gin\",{\"1\":{\"119\":1}}],[\"一般要经过沟通\",{\"1\":{\"58\":1}}],[\"一般用于在企业内搭建git私服\",{\"1\":{\"43\":1}}],[\"一旦缓存住了资源\",{\"1\":{\"1166\":1}}],[\"一旦定义后长度不可改变\",{\"1\":{\"635\":1}}],[\"一旦样本多了起来人工分析就会十分的费时费力\",{\"1\":{\"476\":1}}],[\"一旦加锁以后就必须保证不变量的不变性\",{\"1\":{\"429\":1}}],[\"一旦管道缓冲区空了或者满了\",{\"1\":{\"417\":1}}],[\"一旦主线程退出\",{\"1\":{\"412\":1}}],[\"一旦赋值过后就无法修改\",{\"1\":{\"210\":1}}],[\"一旦电脑出现故障\",{\"1\":{\"39\":1}}],[\"一旦打上了这个标记则\",{\"1\":{\"37\":1}}],[\"标量等数据形态\",{\"1\":{\"1313\":1}}],[\"标题\",{\"1\":{\"746\":1}}],[\"标记字段等\",{\"1\":{\"653\":1}}],[\"标记失效时间\",{\"1\":{\"639\":1}}],[\"标记\",{\"1\":{\"633\":1,\"635\":1,\"645\":1}}],[\"标记阶段比较长\",{\"1\":{\"588\":1,\"660\":1}}],[\"标记清除算法的优点和缺点\",{\"1\":{\"588\":1,\"660\":1}}],[\"标记工作分成多个小的增量任务避免长时间阻塞\",{\"1\":{\"552\":1}}],[\"标记和应用程序的执行是并行执行的\",{\"1\":{\"552\":1}}],[\"标记已解决\",{\"1\":{\"36\":1}}],[\"标识表里每一行主体的字段不要设为主键\",{\"1\":{\"794\":1}}],[\"标识性差的字段为什么不能用来做索引列\",{\"1\":{\"604\":1,\"676\":1}}],[\"标识性差的字段一定不能做索引列吗\",{\"1\":{\"604\":1,\"676\":1}}],[\"标识\",{\"1\":{\"486\":1}}],[\"标识符查看更多细节\",{\"1\":{\"178\":1}}],[\"标识符就是一个名称\",{\"1\":{\"178\":1}}],[\"标识符\",{\"0\":{\"178\":1}}],[\"标识符去访问即可\",{\"1\":{\"175\":1}}],[\"标准错误\",{\"1\":{\"215\":1}}],[\"标准输出\",{\"1\":{\"215\":1}}],[\"标准输入\",{\"1\":{\"215\":1}}],[\"标准库的log包提供的功能并不够完善\",{\"1\":{\"1341\":1}}],[\"标准库fmt包下就有一个对象池的使用案例\",{\"1\":{\"435\":1}}],[\"标准库unsafe提供了许多用于低级编程的操作\",{\"1\":{\"276\":1}}],[\"标准库缺乏\",{\"1\":{\"165\":1}}],[\"标准库\",{\"1\":{\"158\":1}}],[\"标签是一种键值对的形式\",{\"1\":{\"272\":1}}],[\"标签\",{\"0\":{\"272\":1},\"1\":{\"746\":1,\"1187\":1}}],[\"标签语句\",{\"1\":{\"231\":1}}],[\"标签的使用需要结合反射才能完整发挥出其功能\",{\"1\":{\"272\":1}}],[\"标签的切换与删除\",{\"0\":{\"39\":1}}],[\"标签的创建和分支的创建操作几乎一样\",{\"1\":{\"38\":1}}],[\"标签的创建\",{\"0\":{\"38\":1}}],[\"标签的概念\",{\"0\":{\"37\":1}}],[\"标签可以理解为项目里程碑的一个标记\",{\"1\":{\"37\":1}}],[\"工厂方法模式\",{\"1\":{\"654\":1}}],[\"工程上使用\",{\"1\":{\"610\":1,\"682\":1}}],[\"工具和程序库就可以了\",{\"1\":{\"1192\":1}}],[\"工具和库\",{\"1\":{\"166\":1}}],[\"工具开发三面\",{\"0\":{\"599\":1,\"671\":1}}],[\"工具开发二面\",{\"0\":{\"598\":1,\"670\":1}}],[\"工具开发一面\",{\"0\":{\"597\":1,\"669\":1}}],[\"工具扫描以\",{\"1\":{\"481\":1}}],[\"工具类\",{\"1\":{\"36\":1}}],[\"工业物联网消息和设备管理服务器\",{\"1\":{\"140\":1}}],[\"工作进程每隔500ms\",{\"1\":{\"1156\":1}}],[\"工作进程的pid\",{\"1\":{\"1133\":1}}],[\"工作进程\",{\"1\":{\"1126\":1}}],[\"工作原理\",{\"0\":{\"542\":1,\"1249\":1},\"1\":{\"1233\":1,\"1234\":1,\"1235\":1}}],[\"工作更加复杂\",{\"1\":{\"345\":1}}],[\"工作区便应运而生\",{\"1\":{\"462\":1}}],[\"工作区不发生变化\",{\"1\":{\"58\":1}}],[\"工作区发生变化\",{\"1\":{\"58\":1}}],[\"工作区\",{\"0\":{\"462\":1},\"1\":{\"17\":1,\"462\":1}}],[\"工作流程如下\",{\"1\":{\"11\":1,\"12\":1}}],[\"工作流程\",{\"0\":{\"1022\":1},\"1\":{\"11\":1,\"12\":1}}],[\"主体alice能否对对象\",{\"1\":{\"1256\":1}}],[\"主机\",{\"1\":{\"1195\":2}}],[\"主机的位置\",{\"1\":{\"1189\":1}}],[\"主机名\",{\"1\":{\"1133\":1,\"1223\":2}}],[\"主机通过kafka发送与系统和应用程序健康相关的指标\",{\"1\":{\"1019\":1}}],[\"主进程\",{\"1\":{\"1126\":1}}],[\"主进程继续对外提供服务不受影响\",{\"1\":{\"980\":1}}],[\"主被动健康检查等基本功能\",{\"1\":{\"1072\":1}}],[\"主函数\",{\"1\":{\"1047\":1}}],[\"主题匹配视觉表示\",{\"0\":{\"1267\":1}}],[\"主题获取失败\",{\"1\":{\"1036\":1}}],[\"主题\",{\"1\":{\"1025\":1}}],[\"主观下线\",{\"0\":{\"997\":1},\"1\":{\"997\":3}}],[\"主若是设置密码\",{\"1\":{\"993\":1}}],[\"主挂了要认为干预\",{\"1\":{\"990\":1}}],[\"主\",{\"1\":{\"822\":1,\"990\":1}}],[\"主节点初始化\",{\"1\":{\"1225\":1}}],[\"主节点不能少于总节点的一半\",{\"1\":{\"1009\":1}}],[\"主节点至少要有3个\",{\"1\":{\"1009\":1}}],[\"主节点\",{\"1\":{\"1006\":2,\"1007\":1}}],[\"主节点宕机以后选举的间隔时间10s\",{\"1\":{\"1003\":1,\"1004\":3}}],[\"主节点的id\",{\"1\":{\"1010\":1}}],[\"主节点的数据的清空\",{\"1\":{\"990\":1}}],[\"主节点的信息\",{\"1\":{\"769\":1,\"770\":1}}],[\"主节点负责写入数据\",{\"1\":{\"990\":1}}],[\"主节点负责读写\",{\"1\":{\"651\":1}}],[\"主查询\",{\"1\":{\"651\":1}}],[\"主键和唯一列\",{\"1\":{\"815\":1}}],[\"主键自动建立唯一索引\",{\"1\":{\"811\":1}}],[\"主键的名称以\",{\"1\":{\"795\":1}}],[\"主键字段\",{\"1\":{\"653\":1}}],[\"主键字段使用\",{\"1\":{\"637\":1}}],[\"主键索引是\",{\"1\":{\"641\":1}}],[\"主键索引\",{\"1\":{\"641\":1,\"809\":1}}],[\"主服务器将修改写入到二进制日志\",{\"1\":{\"633\":1}}],[\"主从关联复制\",{\"1\":{\"990\":1}}],[\"主从模式实现\",{\"0\":{\"992\":1}}],[\"主从模式\",{\"1\":{\"990\":1}}],[\"主从模式是搭建redis集群最简单的方式\",{\"1\":{\"990\":1}}],[\"主从复制关联\",{\"1\":{\"990\":1}}],[\"主从复制排错\",{\"0\":{\"823\":1}}],[\"主从复制的格式\",{\"1\":{\"822\":3}}],[\"主从复制\",{\"1\":{\"641\":1,\"651\":1,\"799\":1}}],[\"主从复制方式\",{\"1\":{\"579\":1,\"651\":1}}],[\"主从同步原理\",{\"1\":{\"633\":1}}],[\"主从同步的原理\",{\"1\":{\"633\":1}}],[\"主数据库还是缓存\",{\"1\":{\"579\":1,\"651\":2}}],[\"主丛同步的原理\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"主动拉取消息\",{\"1\":{\"1021\":1}}],[\"主动去同步\",{\"1\":{\"644\":1}}],[\"主动\",{\"1\":{\"553\":1}}],[\"主模块引用了模块a的1\",{\"1\":{\"458\":1}}],[\"主协程会等待子协程执行完毕后再退出\",{\"1\":{\"422\":1}}],[\"主协程会一直阻塞\",{\"1\":{\"421\":1}}],[\"主协程调用wait\",{\"1\":{\"422\":1}}],[\"主协程就已经结束了\",{\"1\":{\"412\":1}}],[\"主协程早已运行结束\",{\"1\":{\"412\":1}}],[\"主要方法\",{\"1\":{\"1313\":1}}],[\"主要用于实现程序的优雅关闭\",{\"1\":{\"1308\":1}}],[\"主要用于区别普通查询\",{\"1\":{\"814\":1}}],[\"主要影响堆栈跟踪\",{\"1\":{\"1302\":1}}],[\"主要基于go的net\",{\"1\":{\"1272\":1}}],[\"主要\",{\"1\":{\"1219\":1}}],[\"主要功能反向代理\",{\"1\":{\"1107\":1}}],[\"主要支持简单的mq功能\",{\"1\":{\"1055\":1}}],[\"主要使用的有如下函数\",{\"1\":{\"1316\":1}}],[\"主要使用\",{\"1\":{\"656\":1}}],[\"主要负责保存持久化的数据\",{\"1\":{\"641\":1}}],[\"主要负责直播相关功能\",{\"1\":{\"575\":1,\"647\":1}}],[\"主要依赖于\",{\"1\":{\"633\":1}}],[\"主要目的\",{\"1\":{\"502\":1}}],[\"主要原因在于\",{\"1\":{\"491\":1}}],[\"主要是写测试的时候用\",{\"1\":{\"1308\":1}}],[\"主要是对zapcore\",{\"1\":{\"1303\":1}}],[\"主要是对于interface\",{\"1\":{\"1302\":1}}],[\"主要是输出到文件和控制台\",{\"1\":{\"1302\":1}}],[\"主要是一些输出格式化的配置\",{\"1\":{\"1302\":1}}],[\"主要是开发和部署后端微服务\",{\"1\":{\"636\":1}}],[\"主要是两个结构体hamp和bmap\",{\"1\":{\"536\":1}}],[\"主要是拿来给工具分析用的\",{\"1\":{\"324\":1}}],[\"主要是为了及时止损\",{\"1\":{\"394\":1}}],[\"主要是为了减轻gc压力\",{\"1\":{\"320\":1}}],[\"主要是为了解决切片共享底层数组的读写问题\",{\"1\":{\"250\":1}}],[\"主要格式为如下\",{\"1\":{\"250\":1}}],[\"主要分为单精度浮点数与双精度浮点数\",{\"1\":{\"198\":1}}],[\"主要分为无符号整型与有符号整型\",{\"1\":{\"197\":1}}],[\"主要针对微服务\",{\"1\":{\"115\":1}}],[\"主流的web框架\",{\"0\":{\"111\":1}}],[\"主页如下\",{\"1\":{\"44\":1}}],[\"主分支的\",{\"1\":{\"36\":1}}],[\"主版本号要体现在模块名中\",{\"1\":{\"459\":1}}],[\"主版本号是1\",{\"1\":{\"455\":1}}],[\"主版本\",{\"1\":{\"35\":1}}],[\"现\",{\"1\":{\"799\":1}}],[\"现如今的泛型就是这两者之间妥协后的产物\",{\"1\":{\"345\":1}}],[\"现有类型\",{\"1\":{\"1443\":1}}],[\"现有的日志都会存在\",{\"1\":{\"1174\":1}}],[\"现有的优化方法包括\",{\"1\":{\"645\":1}}],[\"现有一个函数参数是map\",{\"1\":{\"384\":1}}],[\"现有如下切片\",{\"1\":{\"246\":1}}],[\"现有切片如下\",{\"1\":{\"245\":1}}],[\"现代化的标准库\",{\"1\":{\"164\":1}}],[\"现金流量\",{\"1\":{\"133\":1}}],[\"现在解析的都是简单的xml结构\",{\"1\":{\"1312\":1}}],[\"现在让我们在casbin编辑器上测试这个模型\",{\"0\":{\"1265\":1}}],[\"现在让我们在casbin编辑器上测试模型\",{\"0\":{\"1257\":1,\"1261\":1}}],[\"现在对该模式的工作过程进行讲解\",{\"1\":{\"996\":1}}],[\"现在最常用的存储引擎是\",{\"1\":{\"775\":1}}],[\"现在这个系统做到哪一步了\",{\"1\":{\"588\":1,\"660\":1}}],[\"现在有待测试文件\",{\"1\":{\"468\":1}}],[\"现在的输出已经是正常的顺序了\",{\"1\":{\"412\":1}}],[\"现在的接收者就是一个指针接收者\",{\"1\":{\"287\":1}}],[\"现在c中使用的sum函数实际上是go提供的\",{\"1\":{\"300\":1}}],[\"现在进行编译的话\",{\"1\":{\"299\":1}}],[\"现在得到的结果就是正常的\",{\"1\":{\"250\":1}}],[\"现在可以使用min函数比较最小值\",{\"1\":{\"209\":1}}],[\"现在仅支持中文细分\",{\"1\":{\"144\":1}}],[\"现在支持25种以上的语言\",{\"1\":{\"128\":1}}],[\"现在比较流行的版本管理工具是git\",{\"1\":{\"9\":1}}],[\"现象演示\",{\"1\":{\"36\":1}}],[\"​\",{\"1\":{\"36\":2,\"55\":1}}],[\"写了就是针对某个consumer进行生效\",{\"1\":{\"1096\":1}}],[\"写了什么东西\",{\"1\":{\"180\":1}}],[\"写到随机分区中\",{\"1\":{\"1047\":1}}],[\"写和存储能力受限\",{\"1\":{\"990\":1}}],[\"写时复制\",{\"1\":{\"988\":1}}],[\"写满了才会将内容写入到磁盘\",{\"1\":{\"985\":1}}],[\"写出高质量的sql\",{\"1\":{\"799\":1}}],[\"写的速度是81000次\",{\"1\":{\"957\":1}}],[\"写的速度永远都赶不上文件系统处理的速度\",{\"1\":{\"792\":1}}],[\"写的代码合并至主分支\",{\"1\":{\"35\":1}}],[\"写redis时\",{\"1\":{\"641\":1}}],[\"写库时\",{\"1\":{\"641\":1}}],[\"写线程独占\",{\"1\":{\"639\":1}}],[\"写代码实现两个协程交替打印100以内数字\",{\"1\":{\"621\":1,\"693\":1}}],[\"写多读少的情况下\",{\"1\":{\"653\":1}}],[\"写多读少的情况\",{\"1\":{\"581\":1,\"653\":2}}],[\"写缓存成功数据库失败时缓存是否为脏数据\",{\"1\":{\"576\":1,\"648\":1}}],[\"写脚本迁移mongo数据到mysql\",{\"1\":{\"576\":1,\"648\":1}}],[\"写解锁\",{\"1\":{\"557\":1}}],[\"写两道代码题\",{\"1\":{\"520\":1}}],[\"写完后关闭管道\",{\"1\":{\"420\":1}}],[\"写\",{\"1\":{\"418\":1}}],[\"写协程执行结束\",{\"1\":{\"417\":1}}],[\"写协程执行完毕\",{\"1\":{\"417\":1}}],[\"写协程就写入一个数据\",{\"1\":{\"417\":1}}],[\"写一个\",{\"1\":{\"417\":1}}],[\"写入日志的文件\",{\"1\":{\"1307\":1}}],[\"写入cri\",{\"1\":{\"1223\":1}}],[\"写入启动cri\",{\"1\":{\"1223\":1}}],[\"写入的流程又是什么样的呢\",{\"1\":{\"1022\":1}}],[\"写入到leader中\",{\"1\":{\"1022\":1}}],[\"写入失败\",{\"1\":{\"994\":1}}],[\"写入机制\",{\"1\":{\"985\":1}}],[\"写入和重写\",{\"0\":{\"985\":1}}],[\"写入时更新\",{\"1\":{\"641\":1}}],[\"写入完成解锁\",{\"1\":{\"556\":1}}],[\"写入完毕\",{\"1\":{\"417\":2}}],[\"写入前加锁\",{\"1\":{\"556\":1}}],[\"写入如下代码\",{\"1\":{\"470\":2,\"471\":1,\"477\":2}}],[\"写入已关闭的管道\",{\"1\":{\"418\":1}}],[\"写入满缓冲区的管道\",{\"1\":{\"418\":1}}],[\"写入数据\",{\"1\":{\"415\":1,\"416\":2,\"417\":1}}],[\"写入目标文件\",{\"1\":{\"403\":1}}],[\"写入字符串\",{\"1\":{\"402\":1}}],[\"写入字节切片\",{\"1\":{\"402\":1}}],[\"写入\",{\"0\":{\"402\":1},\"1\":{\"417\":12}}],[\"写入文本格式的数据\",{\"1\":{\"323\":1}}],[\"写入压缩后的protobuf数据\",{\"1\":{\"323\":1}}],[\"写入器接口的网络链接速度模拟\",{\"1\":{\"145\":1}}],[\"写入器和验证器\",{\"1\":{\"139\":1}}],[\"写操作\",{\"1\":{\"266\":1,\"557\":1,\"649\":1}}],[\"写好了\",{\"1\":{\"9\":1}}],[\"切记\",{\"1\":{\"1123\":1}}],[\"切记记得每个节点都要安装\",{\"1\":{\"770\":1}}],[\"切数据量非常大\",{\"1\":{\"814\":1}}],[\"切割规则可以以\",{\"1\":{\"1174\":1}}],[\"切割遵循左闭右开\",{\"1\":{\"511\":1}}],[\"切割使用\",{\"1\":{\"511\":1}}],[\"切割字符串\",{\"1\":{\"253\":1}}],[\"切割的区间为左闭右开\",{\"1\":{\"241\":1}}],[\"切割数组的格式为arr\",{\"1\":{\"241\":1}}],[\"切割\",{\"0\":{\"241\":1},\"1\":{\"511\":1}}],[\"切割问题\",{\"1\":{\"4\":1}}],[\"切片操作包\",{\"1\":{\"1308\":1}}],[\"切片中元素的数量\",{\"1\":{\"649\":1}}],[\"切片中的每一个切片长度都可能是不相同的\",{\"1\":{\"249\":1}}],[\"切片包含了三个主要部分\",{\"1\":{\"649\":1}}],[\"切片是对数组的一种抽象\",{\"1\":{\"649\":1}}],[\"切片是引用类型\",{\"1\":{\"511\":1}}],[\"切片指向的是数组的一部分\",{\"1\":{\"635\":1}}],[\"切片扩大时\",{\"1\":{\"633\":1}}],[\"切片扩容时\",{\"1\":{\"633\":1}}],[\"切片扩容\",{\"1\":{\"633\":1}}],[\"切片底层数组是共享的\",{\"1\":{\"633\":1}}],[\"切片底层很简单的数据结构\",{\"1\":{\"511\":1}}],[\"切片有容量和长度的区别\",{\"1\":{\"633\":1}}],[\"切片使用时需要注意什么\",{\"1\":{\"633\":1}}],[\"切片使用的时候需要注意什么\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"切片如何实现\",{\"1\":{\"577\":1,\"649\":2}}],[\"切片或map作为函数参数\",{\"1\":{\"548\":1}}],[\"切片slice\",{\"0\":{\"511\":1}}],[\"切片类型\",{\"1\":{\"294\":1}}],[\"切片与数组都可以使用简单表达式来进行切割\",{\"1\":{\"250\":1}}],[\"切片与数组最大的区别在于切片的容量会自动扩张\",{\"1\":{\"243\":1}}],[\"切片初始化部分修改为如下代码即可\",{\"1\":{\"249\":1}}],[\"切片元素的删除需要结合append函数来使用\",{\"1\":{\"246\":1}}],[\"切片元素的插入也是需要结合append函数来使用\",{\"1\":{\"245\":1}}],[\"切片可以通过append函数实现许多操作\",{\"1\":{\"244\":1}}],[\"切片的长度和容量是可以动态变化的\",{\"1\":{\"635\":1}}],[\"切片的长度代表着切片中元素的个数\",{\"1\":{\"243\":1}}],[\"切片的共享内存\",{\"1\":{\"633\":1}}],[\"切片的情况的实际上跟上面讲到的字符串差不多\",{\"1\":{\"306\":1}}],[\"切片的遍历与数组完全一致\",{\"1\":{\"248\":1}}],[\"切片的基本使用与数组完全一致\",{\"1\":{\"244\":1}}],[\"切片的底层实现依旧是数组\",{\"1\":{\"243\":1}}],[\"切片的容量代表着切片总共能装多少个元素\",{\"1\":{\"243\":1}}],[\"切片的初始化方式有以下几种\",{\"1\":{\"243\":1}}],[\"切片在拷贝时需要确保目标切片有足够的长度\",{\"1\":{\"247\":1}}],[\"切片在go中的应用范围要比数组广泛的多\",{\"1\":{\"242\":1}}],[\"切片在容量不够时会自行扩容\",{\"1\":{\"237\":1}}],[\"切片不可比较\",{\"1\":{\"209\":1}}],[\"切片\",{\"0\":{\"237\":1,\"242\":1,\"306\":1,\"375\":1},\"1\":{\"201\":1,\"202\":1,\"210\":1,\"234\":1,\"352\":2,\"379\":2,\"529\":1,\"635\":2,\"1420\":1,\"1424\":1}}],[\"切换数据库和创建数据库\",{\"1\":{\"856\":1}}],[\"切换时只需要保存最少的状态\",{\"1\":{\"649\":1}}],[\"切换的开销较小\",{\"1\":{\"649\":1}}],[\"切换代价较大\",{\"1\":{\"639\":1}}],[\"切换分支\",{\"1\":{\"58\":1}}],[\"切换到此目录下\",{\"1\":{\"1034\":1}}],[\"切换到自己对应的业务数据库\",{\"1\":{\"873\":1}}],[\"切换到admin数据库\",{\"0\":{\"869\":1},\"1\":{\"872\":1}}],[\"切换到mysql写时可能重复写入\",{\"1\":{\"576\":1,\"648\":1}}],[\"切换到\",{\"1\":{\"35\":1}}],[\"到底算是哪一个\",{\"1\":{\"1156\":1}}],[\"到底引用到了哪几个索引\",{\"1\":{\"814\":1}}],[\"到\",{\"1\":{\"1151\":1}}],[\"到这里\",{\"1\":{\"1067\":1}}],[\"到此\",{\"1\":{\"313\":1}}],[\"到此动态链接库调用成功\",{\"1\":{\"312\":1}}],[\"到了1\",{\"1\":{\"209\":1}}],[\"到了2002年\",{\"1\":{\"12\":1}}],[\"到你自己的仓库\",{\"1\":{\"53\":1}}],[\"到现在为止\",{\"1\":{\"31\":1}}],[\"创建logger\",{\"1\":{\"1306\":1}}],[\"创建路由\",{\"1\":{\"1275\":1}}],[\"创建和管理\",{\"1\":{\"1205\":1}}],[\"创建和销毁的开销更小\",{\"1\":{\"645\":1}}],[\"创建镜像\",{\"1\":{\"1200\":1}}],[\"创建虚拟节点\",{\"1\":{\"1165\":1}}],[\"创建nginx的临时目录\",{\"0\":{\"1114\":1}}],[\"创建nginx服务器目录\",{\"0\":{\"1110\":1}}],[\"创建consumer时候的key必须和issuser一致\",{\"1\":{\"1093\":1}}],[\"创建client\",{\"1\":{\"756\":1}}],[\"创建链接如下\",{\"1\":{\"1079\":1}}],[\"创建主题代码示例\",{\"0\":{\"1037\":1}}],[\"创建redis连接客户端\",{\"1\":{\"910\":1,\"912\":1}}],[\"创建普通账号\",{\"0\":{\"873\":1},\"1\":{\"873\":1}}],[\"创建超级管理员账户\",{\"0\":{\"870\":1}}],[\"创建管理员账号\",{\"0\":{\"865\":1}}],[\"创建管道反射值\",{\"1\":{\"377\":1}}],[\"创建集合\",{\"1\":{\"857\":1}}],[\"创建两个桥接网卡\",{\"1\":{\"1198\":1}}],[\"创建两个主从的配置文件\",{\"1\":{\"822\":1}}],[\"创建两个无缓冲管道\",{\"1\":{\"417\":1}}],[\"创建存储过程用于插入数据\",{\"1\":{\"820\":1}}],[\"创建函数用于生成随机字符串\",{\"1\":{\"820\":1}}],[\"创建组合索引\",{\"1\":{\"818\":1}}],[\"创建的备份将使用文件名\",{\"1\":{\"1307\":1}}],[\"创建的索引是唯一索引\",{\"1\":{\"810\":1}}],[\"创建的有缓冲管道\",{\"1\":{\"418\":2}}],[\"创建表时\",{\"1\":{\"794\":1}}],[\"创建表时必须\",{\"1\":{\"794\":2}}],[\"创建数据库文件的存放位置\",{\"1\":{\"851\":1}}],[\"创建数据库sql举例\",{\"1\":{\"794\":1}}],[\"创建数据库时必须\",{\"1\":{\"794\":1}}],[\"创建容器的时候可以指定为自己定义的网络\",{\"1\":{\"1197\":1}}],[\"创建容器都在docker0中\",{\"1\":{\"1194\":1}}],[\"创建容器\",{\"1\":{\"775\":1}}],[\"创建bool查询\",{\"1\":{\"763\":1,\"764\":1,\"765\":1}}],[\"创建查询表达式例子\",{\"1\":{\"759\":1}}],[\"创建match查询条件\",{\"1\":{\"758\":1}}],[\"创建term查询\",{\"1\":{\"763\":1,\"764\":1,\"765\":1}}],[\"创建term查询条件\",{\"1\":{\"756\":1}}],[\"创建terms查询条件\",{\"1\":{\"757\":1}}],[\"创建创建一条微博\",{\"1\":{\"746\":1}}],[\"创建文档\",{\"0\":{\"746\":1,\"835\":1}}],[\"创建文件\",{\"1\":{\"410\":1}}],[\"创建文件夹\",{\"1\":{\"410\":1}}],[\"创建文件夹操作会用到os包下的两个函数\",{\"1\":{\"409\":1}}],[\"创建索引后查询的时间如下\",{\"1\":{\"810\":1}}],[\"创建索引文件\",{\"1\":{\"745\":1}}],[\"创建索引\",{\"1\":{\"745\":1,\"810\":1,\"862\":1}}],[\"创建索引映射mapping\",{\"0\":{\"745\":1}}],[\"创建索引更有效\",{\"1\":{\"651\":1}}],[\"创建es\",{\"1\":{\"744\":1}}],[\"创建映射\",{\"1\":{\"729\":1}}],[\"创建并初始化一个map\",{\"1\":{\"654\":1}}],[\"创建对象\",{\"1\":{\"645\":1}}],[\"创建还是调度上面开销都是很大的\",{\"1\":{\"540\":1}}],[\"创建模糊测试文件\",{\"1\":{\"477\":1}}],[\"创建完成后\",{\"1\":{\"445\":1}}],[\"创建完毕仓库\",{\"1\":{\"18\":1}}],[\"创建时间字段\",{\"1\":{\"794\":1}}],[\"创建时间\",{\"1\":{\"653\":1,\"746\":1,\"1187\":1,\"1189\":1}}],[\"创建时\",{\"1\":{\"427\":1}}],[\"创建三个管道\",{\"1\":{\"421\":1}}],[\"创建了一个无缓冲管道\",{\"1\":{\"418\":1}}],[\"创建有缓冲管道\",{\"1\":{\"417\":2}}],[\"创建无缓冲管道\",{\"1\":{\"416\":2}}],[\"创建一个http服务器只需要一行代码\",{\"1\":{\"1335\":1}}],[\"创建一个普通pod的yaml\",{\"1\":{\"1215\":1}}],[\"创建一个shell可执行文件\",{\"1\":{\"1174\":1}}],[\"创建一个消费者\",{\"1\":{\"1036\":1}}],[\"创建一个topic\",{\"1\":{\"1034\":1}}],[\"创建一个redis8007的主节点\",{\"1\":{\"1010\":1}}],[\"创建一个新的网络连接且比network和addr有着更高的优先级\",{\"1\":{\"911\":1}}],[\"创建一个项目工程\",{\"1\":{\"878\":1}}],[\"创建一个如下的文档\",{\"1\":{\"709\":1}}],[\"创建一个索引\",{\"1\":{\"704\":1}}],[\"创建一个容量为10的缓冲channel\",{\"1\":{\"654\":1}}],[\"创建一个无缓冲管道\",{\"1\":{\"417\":1}}],[\"创建一个协程十分的简单\",{\"1\":{\"412\":1}}],[\"创建一个error有以下几种方法\",{\"1\":{\"390\":1}}],[\"创建成功后返回返回一组objectid\",{\"1\":{\"835\":1}}],[\"创建成功后会返回文档的objectid\",{\"1\":{\"835\":1}}],[\"创建成功\",{\"1\":{\"409\":1}}],[\"创建切片反射值\",{\"1\":{\"375\":1}}],[\"创建切片的事情是由makeslice函数在负责\",{\"1\":{\"326\":1}}],[\"创建结构体反射值\",{\"1\":{\"374\":1}}],[\"创建\",{\"0\":{\"275\":1,\"372\":1,\"390\":1,\"395\":1,\"409\":1,\"414\":1,\"445\":1,\"704\":1,\"709\":1},\"1\":{\"491\":2,\"1034\":1}}],[\"创建feature分支\",{\"1\":{\"58\":1}}],[\"创建远程仓库\",{\"0\":{\"45\":1}}],[\"创建分支\",{\"0\":{\"31\":1},\"1\":{\"58\":1}}],[\"将unsafe\",{\"1\":{\"1443\":2}}],[\"将两个模板关联以后\",{\"1\":{\"1427\":1}}],[\"将两个文件分别拷贝到各自的容器下即可\",{\"1\":{\"822\":1}}],[\"将两个文件复制到两个mysql容器内部\",{\"1\":{\"822\":1}}],[\"将英文字符串转换成大写字符串\",{\"1\":{\"1409\":1}}],[\"将英文字符串英文小写字符串\",{\"1\":{\"1409\":1}}],[\"将a与b按照字典顺序进行字符串比较\",{\"1\":{\"1397\":1}}],[\"将json字符串反序列化为go对象\",{\"1\":{\"1316\":1}}],[\"将json转成struct结果\",{\"1\":{\"754\":1}}],[\"将json转换为go结构\",{\"1\":{\"141\":1}}],[\"将go对象序列化为json字符串\",{\"1\":{\"1316\":1}}],[\"将go源代码解析成抽象语法树的包\",{\"1\":{\"1308\":1}}],[\"将打开并附加到该文件\",{\"1\":{\"1307\":1}}],[\"将所有合并\",{\"1\":{\"1306\":1}}],[\"将所有大于vm\",{\"1\":{\"965\":1}}],[\"将有两种类型的角色和操作\",{\"1\":{\"1263\":1}}],[\"将外部请求路由到\",{\"1\":{\"1235\":1}}],[\"将服务类型从\",{\"1\":{\"1234\":1}}],[\"将selinux设置为permissive模式\",{\"1\":{\"1222\":1}}],[\"将dhcp模式\",{\"1\":{\"1219\":1}}],[\"将dynamodb用作原子计数器的库\",{\"1\":{\"128\":1}}],[\"将宿主机目录下的文件拷贝进镜像且add命令会自动处理url和解压tar压缩包\",{\"1\":{\"1193\":1}}],[\"将前端静态资源打包生成一个前端镜像\",{\"1\":{\"1193\":1}}],[\"将容器内文件拷贝出来\",{\"1\":{\"1189\":1}}],[\"将下载的压缩包上传到nginx服务器\",{\"1\":{\"1165\":1}}],[\"将下载下来的安装包直接解压到一个路径下即可完成kafka的安装\",{\"1\":{\"1028\":1}}],[\"将来自用户的请求转发给不同的服务器\",{\"1\":{\"1159\":1}}],[\"将拒绝处理该请求\",{\"1\":{\"1154\":1}}],[\"将静态资源目录上传到服务器\",{\"1\":{\"1135\":1}}],[\"将静态资源上传至仓库\",{\"1\":{\"54\":1}}],[\"将客户端请求主体保存在临时文件中\",{\"1\":{\"1133\":1}}],[\"将请求主体通过proxy\",{\"1\":{\"1133\":1}}],[\"将请求封装为一个对象\",{\"1\":{\"654\":1}}],[\"将传入的\",{\"1\":{\"1071\":1}}],[\"将队列按topic拆分\",{\"1\":{\"1062\":1}}],[\"将消息分为多个\",{\"1\":{\"1060\":1}}],[\"将用户查看了哪个页面\",{\"1\":{\"1019\":1}}],[\"将磁盘中数据载入内存\",{\"1\":{\"993\":1}}],[\"将当前独立的redis服务变成一个从节点\",{\"1\":{\"993\":1}}],[\"将当前数据库的\",{\"1\":{\"967\":2}}],[\"将缓冲区里面的命令写入到硬盘\",{\"1\":{\"987\":1}}],[\"将缓存设置为一定的逻辑过期时间\",{\"1\":{\"641\":1}}],[\"将修改命令写入到存储文件\",{\"1\":{\"979\":1}}],[\"将内存数据写入到二进制文件\",{\"1\":{\"979\":1}}],[\"将内存中的数据定期保存到磁盘\",{\"1\":{\"651\":1}}],[\"将哈希表\",{\"1\":{\"972\":1}}],[\"将弹出的元素插入到另外一个列表中并返回它\",{\"1\":{\"971\":1}}],[\"将给定\",{\"1\":{\"970\":1}}],[\"将给定集合的并集保存在结果集里\",{\"1\":{\"941\":1}}],[\"将给定集合的交集保存在结果集里\",{\"1\":{\"941\":1}}],[\"将给定集合的差集保存在结果集里\",{\"1\":{\"941\":1}}],[\"将持久保持\",{\"1\":{\"967\":1}}],[\"将无法再进行写入操作\",{\"1\":{\"965\":1}}],[\"将无法支持交叉编译\",{\"1\":{\"297\":1}}],[\"将find游标转换成数组\",{\"1\":{\"863\":1}}],[\"将find游标当数组处理\",{\"1\":{\"863\":1}}],[\"将fortran\",{\"1\":{\"136\":1}}],[\"将年龄为10的人地址更新为cn\",{\"1\":{\"836\":1}}],[\"将名为lili人更名为mark\",{\"1\":{\"836\":1}}],[\"将上一页的id传递过来\",{\"1\":{\"820\":1}}],[\"将上面的读写互斥锁的例子稍微修改下即可\",{\"1\":{\"432\":1}}],[\"将上面的代码稍微修改下\",{\"1\":{\"370\":1}}],[\"将全表进行扫描\",{\"1\":{\"814\":1}}],[\"将一个字符串时间按照一定格式转换为go中的时间结构体\",{\"1\":{\"1432\":1}}],[\"将一个对象转换成json\",{\"1\":{\"863\":1}}],[\"将一个类的接口转换成客户端期望的接口\",{\"1\":{\"654\":1}}],[\"将一些重复或冗余的字段合并\",{\"1\":{\"798\":1}}],[\"将使得数据库体积变大\",{\"1\":{\"792\":1}}],[\"将es结果的json结构转换成struct对象\",{\"1\":{\"756\":1}}],[\"将retweets字段改为101\",{\"1\":{\"749\":1}}],[\"将距离整合到文档的相关性评分中\",{\"1\":{\"730\":1}}],[\"将抽象部分与实现部分分离\",{\"1\":{\"654\":1}}],[\"将回收工作分成多个小步骤\",{\"1\":{\"645\":1}}],[\"将对象分为年轻代和老年代\",{\"1\":{\"645\":1}}],[\"将某些耗时操作\",{\"1\":{\"644\":1}}],[\"将某些操作\",{\"1\":{\"514\":1}}],[\"将未能正确更新的数据进行补偿\",{\"1\":{\"644\":1}}],[\"将未跟踪的文件加入暂存区\",{\"1\":{\"55\":1}}],[\"将键映射到数组的索引位置\",{\"1\":{\"641\":1}}],[\"将耗时操作异步化\",{\"1\":{\"639\":1}}],[\"将堆内存分为\",{\"1\":{\"638\":1}}],[\"将验证码存储到\",{\"1\":{\"634\":1}}],[\"将任务按需分配到协程池中的协程中执行\",{\"1\":{\"633\":1}}],[\"将接收者类型自动转换为指或指针\",{\"1\":{\"515\":1}}],[\"将函数调用注册为延迟执行\",{\"1\":{\"514\":1}}],[\"将值设置空结构体\",{\"1\":{\"513\":1}}],[\"将如下代码追加到\",{\"1\":{\"498\":1}}],[\"将如下代码写入\",{\"1\":{\"491\":2,\"492\":1,\"494\":1}}],[\"将可变参数转换为一个切片\",{\"1\":{\"494\":1}}],[\"将字符串转换为\",{\"1\":{\"477\":1}}],[\"将字符串转换成字节切片以后\",{\"1\":{\"254\":1}}],[\"将不会生成随机的测试数据\",{\"1\":{\"477\":1}}],[\"将测试用例标记为可并行运行\",{\"1\":{\"473\":1}}],[\"将预期结果修改为错误的结果\",{\"1\":{\"471\":1}}],[\"将执行追踪情况写入文件\",{\"1\":{\"469\":1}}],[\"将依赖按照vendor格式进行复制\",{\"1\":{\"464\":1}}],[\"将暂时用不到的对象放入池中\",{\"1\":{\"435\":1}}],[\"将暂存区的文件修改提交到本地仓库\",{\"1\":{\"55\":1}}],[\"将暂存区的文件取消暂存\",{\"1\":{\"55\":1}}],[\"将双向管道传给某个协程或函数并且不希望它读取\",{\"1\":{\"419\":1}}],[\"将创建失败并会返回错误\",{\"1\":{\"402\":1}}],[\"将已写入的数据归入切片\",{\"1\":{\"401\":1}}],[\"将文件读进传入的字节切片\",{\"1\":{\"401\":1}}],[\"将文本转换为句子列表\",{\"1\":{\"144\":1}}],[\"将数据应用到模板中\",{\"1\":{\"1415\":1}}],[\"将数据迁移到c节点上\",{\"1\":{\"1165\":1}}],[\"将数据分布到找到的第一个服务器节点上\",{\"1\":{\"1165\":1}}],[\"将数据缓存到内存中去来抵挡大部分的查询请求\",{\"1\":{\"1012\":1}}],[\"将数据保存到硬盘\",{\"1\":{\"981\":3}}],[\"将数据写到磁盘\",{\"1\":{\"965\":1}}],[\"将数据的低位字节存储在低地址中\",{\"1\":{\"651\":1}}],[\"将数据的高位字节存储在低地址中\",{\"1\":{\"651\":1}}],[\"将数据添加到文件末尾\",{\"1\":{\"400\":1}}],[\"将数组中的所有元素异或\",{\"1\":{\"645\":1}}],[\"将数组作为参数传递给函数时\",{\"1\":{\"238\":1}}],[\"将x转换为类型\",{\"1\":{\"385\":2}}],[\"将p转换为类型\",{\"1\":{\"385\":1}}],[\"将泛型引入项目后\",{\"1\":{\"337\":1}}],[\"将web\",{\"1\":{\"327\":1}}],[\"将此前收集到的数据文件作为参数\",{\"1\":{\"326\":1}}],[\"将cutset匹配的子串删除\",{\"1\":{\"1410\":2}}],[\"将cutset任意匹配的子串删除\",{\"1\":{\"1410\":3}}],[\"将clusterip改为nodepod\",{\"1\":{\"1235\":1}}],[\"将c转换为类型\",{\"1\":{\"385\":1}}],[\"将c的数组作为go切片的底层数组的例子如下\",{\"1\":{\"306\":1}}],[\"将c代码转换为go代码\",{\"1\":{\"136\":1}}],[\"将导致指针越界\",{\"1\":{\"300\":1}}],[\"将性能敏感的任务交给c去完成\",{\"1\":{\"296\":1}}],[\"将长度修改为10\",{\"1\":{\"247\":1}}],[\"将会分配一个新的内存给复制的副本\",{\"1\":{\"1396\":1}}],[\"将会自动忽略\",{\"1\":{\"481\":1}}],[\"将会引发panic\",{\"1\":{\"422\":1}}],[\"将会阻塞等待\",{\"1\":{\"421\":1}}],[\"将会永远阻塞下去\",{\"1\":{\"417\":1}}],[\"将会是false\",{\"1\":{\"393\":1}}],[\"将会到处都充斥着if\",{\"1\":{\"388\":1}}],[\"将会留到并发那一节再做介绍\",{\"1\":{\"227\":1}}],[\"将会无法通过编译\",{\"1\":{\"211\":1,\"419\":1}}],[\"将图像转换为ascii\",{\"1\":{\"139\":1}}],[\"将矢量图形转换为pdf\",{\"1\":{\"139\":1}}],[\"将加密的电子邮件发送到用go编写的区块链地址\",{\"1\":{\"129\":1}}],[\"将其导入您的代码中\",{\"1\":{\"1274\":1}}],[\"将其配置到一个\",{\"1\":{\"1165\":1}}],[\"将其放入缓存区域\",{\"1\":{\"1158\":1}}],[\"将其更清晰地抽象成一个个日志或事件的消息流\",{\"1\":{\"1019\":1}}],[\"将其返回给客户端\",{\"1\":{\"641\":1}}],[\"将其取名为hello\",{\"1\":{\"445\":1}}],[\"将其编组进\",{\"1\":{\"127\":1}}],[\"将其他分支合并至当前工作区\",{\"1\":{\"58\":1}}],[\"将正则表达式解析为语法树\",{\"1\":{\"124\":1}}],[\"将\",{\"1\":{\"122\":1,\"135\":1,\"494\":1,\"558\":1,\"656\":2,\"967\":1,\"970\":4,\"1307\":1,\"1443\":1}}],[\"将证书和密钥配置到nginx中去\",{\"1\":{\"84\":1}}],[\"将node版本下载到nvm的目录下面\",{\"1\":{\"76\":1}}],[\"将本地仓库推送至远程仓库的某个分支\",{\"1\":{\"58\":1}}],[\"将别人的代码克隆到你自己的仓库\",{\"1\":{\"53\":1}}],[\"将很好解决\",{\"1\":{\"30\":1}}],[\"将代码push到远程仓库\",{\"1\":{\"12\":1}}],[\"即首字母大写\",{\"1\":{\"1309\":1}}],[\"即对应的请求处理器\",{\"1\":{\"1285\":1}}],[\"即对每⼀个服务节点计算多个哈希\",{\"1\":{\"1165\":1}}],[\"即representational\",{\"1\":{\"1278\":1}}],[\"即将容器的数据挂载到宿主机上\",{\"1\":{\"1199\":1}}],[\"即反向代理\",{\"1\":{\"1159\":1}}],[\"即并发限制\",{\"1\":{\"1150\":1}}],[\"即速率限制\",{\"1\":{\"1150\":1}}],[\"即浏览器中你输入的地址\",{\"1\":{\"1133\":1}}],[\"即设置proxy\",{\"1\":{\"1133\":1}}],[\"即删除topic后\",{\"1\":{\"1029\":1}}],[\"即写入到硬盘上\",{\"1\":{\"1025\":1}}],[\"即偏移\",{\"1\":{\"1025\":1}}],[\"即偏移量是系数的整数倍\",{\"1\":{\"513\":1}}],[\"即每次取一小段时间的数据写入某partition\",{\"1\":{\"1023\":1}}],[\"即消息的消费方\",{\"1\":{\"1020\":1}}],[\"即故障转移\",{\"1\":{\"996\":1}}],[\"即大一倍\",{\"1\":{\"985\":1}}],[\"即一个线程完成客户端的并发读写\",{\"1\":{\"980\":1}}],[\"即master可以处理客户端写操作\",{\"1\":{\"990\":1}}],[\"即master\",{\"1\":{\"956\":1}}],[\"即\",{\"1\":{\"847\":1}}],[\"即在需要时可以添加更多的节点来扩展数据存储和处理能力\",{\"1\":{\"842\":1}}],[\"即在传递参数时会拷贝实参的值\",{\"1\":{\"279\":1}}],[\"即同一线程在已经加锁的情况下不能再次加锁\",{\"1\":{\"654\":1}}],[\"即0\",{\"1\":{\"654\":1}}],[\"即最后声明的\",{\"1\":{\"651\":1}}],[\"即线程在空闲时保持的最大时间\",{\"1\":{\"645\":1}}],[\"即当函数执行结束时\",{\"1\":{\"633\":1}}],[\"即传递的是变量的副本\",{\"1\":{\"633\":1}}],[\"即触发垃圾回收\",{\"1\":{\"633\":1}}],[\"即只运行文件名匹配的基准测试\",{\"1\":{\"630\":1}}],[\"即只能在管道的一边进行操作\",{\"1\":{\"419\":1}}],[\"即发消息队列的失败了会怎么样\",{\"1\":{\"566\":1,\"638\":2}}],[\"即浅拷贝\",{\"1\":{\"529\":1}}],[\"即函数的参数会立即求值\",{\"1\":{\"514\":1}}],[\"即索引取值为1\",{\"1\":{\"511\":1}}],[\"即直接执行的测试用例\",{\"1\":{\"472\":1}}],[\"即不需要提前定义文档的结构\",{\"1\":{\"841\":1,\"887\":1}}],[\"即不会出现重复消息\",{\"1\":{\"653\":1}}],[\"即不改变顺序\",{\"1\":{\"554\":1}}],[\"即不按照顺序多行输出匹配\",{\"1\":{\"470\":1}}],[\"即不同的人在不同的环境中使用同一个的项目构建时所引用的依赖包必须是完全相同的\",{\"1\":{\"460\":1}}],[\"即按顺序检测输出是否匹配\",{\"1\":{\"470\":1}}],[\"即真正要用到它的时候才会初始化该数据结构\",{\"1\":{\"434\":1}}],[\"即读写互斥锁\",{\"1\":{\"431\":1}}],[\"即上下文应该取消的时间\",{\"1\":{\"424\":1}}],[\"即先进先出\",{\"1\":{\"415\":1}}],[\"即通过消息来进行内存共享\",{\"1\":{\"413\":1}}],[\"即便如此\",{\"1\":{\"1437\":1}}],[\"即便是高级配置官方给出的例子也是十分简洁\",{\"1\":{\"1302\":1}}],[\"即便开启了1000个协程\",{\"1\":{\"435\":1}}],[\"即便缓冲区为空\",{\"1\":{\"420\":1}}],[\"即便管道已经关闭\",{\"1\":{\"420\":1}}],[\"即便go的函数参数是值传递\",{\"1\":{\"419\":1}}],[\"即便两个类型可以相互代表\",{\"1\":{\"385\":1}}],[\"即便基础类型是相同的\",{\"1\":{\"383\":1}}],[\"即便其底层类型属于int类型集的范围内\",{\"1\":{\"340\":1}}],[\"即便其底层类型包含在类型集内\",{\"1\":{\"340\":1}}],[\"即便cgo在大多数情况可以避免内存移动\",{\"1\":{\"310\":1}}],[\"即便c中的数组只是一个头指针\",{\"1\":{\"306\":1}}],[\"即包含所有类型\",{\"1\":{\"340\":1}}],[\"即包内唯一的存在\",{\"1\":{\"178\":1}}],[\"即comparable\",{\"1\":{\"294\":1}}],[\"即使用docker进行容器化部署\",{\"1\":{\"1212\":1}}],[\"即使用测试命令只运行指定名字的基准测试\",{\"1\":{\"630\":1}}],[\"即使过了很久请求被处理了\",{\"1\":{\"1156\":1}}],[\"即使b服务挂了也不影响\",{\"1\":{\"1061\":1}}],[\"即使中间结点有这个元素也要查到叶子结点\",{\"1\":{\"805\":1}}],[\"即使在节点重启后也可以恢复\",{\"1\":{\"653\":1}}],[\"即使只有少数的m依旧可以处理大量的并发任务\",{\"1\":{\"542\":1}}],[\"即使exp函数的生命周期已经结束了\",{\"1\":{\"282\":1}}],[\"即使map中不存在\",{\"1\":{\"260\":1}}],[\"即go中的函数不支持重载\",{\"1\":{\"278\":1}}],[\"即结果要么为真要么为假\",{\"1\":{\"228\":1}}],[\"即数字无法代替布尔值进行逻辑判断\",{\"1\":{\"196\":1}}],[\"即为私有类型\",{\"1\":{\"174\":1}}],[\"即为公有类型\",{\"1\":{\"174\":1}}],[\"即可进行命令操作\",{\"1\":{\"1034\":1}}],[\"即可启动\",{\"1\":{\"770\":1}}],[\"即可启动第一个节点\",{\"1\":{\"768\":1}}],[\"即可以构造查询sql\",{\"1\":{\"831\":1}}],[\"即可以去查找node1\",{\"1\":{\"770\":1}}],[\"即可以在管道两边进行操作\",{\"1\":{\"419\":1}}],[\"即可\",{\"1\":{\"743\":1,\"794\":1}}],[\"即可开启\",{\"1\":{\"297\":1}}],[\"即可实现一个爬虫或者一个web服务器\",{\"1\":{\"121\":1}}],[\"即可部署\",{\"1\":{\"54\":1}}],[\"即码云\",{\"1\":{\"43\":1}}],[\"即要存在\",{\"1\":{\"30\":1}}],[\"即容错性较差\",{\"1\":{\"11\":1}}],[\"上执行\",{\"1\":{\"1256\":1}}],[\"上\",{\"1\":{\"1060\":1}}],[\"上位\",{\"1\":{\"1020\":1}}],[\"上线mysql会直接崩溃\",{\"1\":{\"1012\":1}}],[\"上线之前\",{\"1\":{\"645\":1}}],[\"上图所示\",{\"1\":{\"981\":1,\"996\":1}}],[\"上图最下方的白色叶子节点代表着不同大小的对象占用\",{\"1\":{\"327\":1}}],[\"上海市\",{\"1\":{\"892\":1}}],[\"上的索引\",{\"1\":{\"795\":1}}],[\"上的仓库\",{\"1\":{\"17\":1}}],[\"上限为42亿\",{\"1\":{\"791\":1}}],[\"上限多少是由哪些因素决定的\",{\"1\":{\"645\":1}}],[\"上限多少是右哪些因素决定的\",{\"1\":{\"573\":1,\"645\":1}}],[\"上去执行\",{\"1\":{\"635\":1}}],[\"上没有可执行的\",{\"1\":{\"635\":1}}],[\"上个问题相对更优雅的解决方案\",{\"1\":{\"566\":1,\"638\":2}}],[\"上数的例子中在最后一行输出了test\",{\"1\":{\"471\":1}}],[\"上传镜像到仓库\",{\"1\":{\"1193\":1}}],[\"上传静态资源到服务器\",{\"0\":{\"1135\":1}}],[\"上传每个分片时\",{\"1\":{\"634\":1}}],[\"上传完毕后服务器将这些片段合并为一个完整的文件\",{\"1\":{\"634\":1}}],[\"上传\",{\"0\":{\"449\":1}}],[\"上方的代码是一个简单的判断分支\",{\"1\":{\"437\":1}}],[\"上一个例子用到了time\",{\"1\":{\"421\":1}}],[\"上例中使用的普通map\",{\"1\":{\"436\":1}}],[\"上例中通过for循环配合select来一直监测三个管道是否可以用\",{\"1\":{\"421\":1}}],[\"上例开启了一个新的协程来向管道a写入数据\",{\"1\":{\"421\":1}}],[\"上例的接收者就是一个值接收者\",{\"1\":{\"286\":1}}],[\"上下文包\",{\"1\":{\"1308\":1}}],[\"上下文对象携带并发安全的数据\",{\"1\":{\"546\":1}}],[\"上下文也是一种资源\",{\"1\":{\"428\":1}}],[\"上下文取消\",{\"1\":{\"428\":2}}],[\"上下文\",{\"1\":{\"412\":1}}],[\"上游函数同样的也进行善后工作\",{\"1\":{\"396\":1}}],[\"上面这两个类型不需要太在意\",{\"1\":{\"1439\":1}}],[\"上面这段程序就会在输出完start后阻塞两秒\",{\"1\":{\"1435\":1}}],[\"上面这个还存在问题\",{\"1\":{\"1064\":1}}],[\"上面这个还有一个问题\",{\"1\":{\"1061\":1}}],[\"上面会造成雪崩效应的原因分析\",{\"1\":{\"1165\":1}}],[\"上面配置的path=\",{\"1\":{\"1086\":1,\"1087\":1}}],[\"上面涉及到各种概念\",{\"1\":{\"1067\":1}}],[\"上面介绍了写机制过程中\",{\"1\":{\"987\":1}}],[\"上面我们说过redis采用了高效的数据结构\",{\"1\":{\"969\":1}}],[\"上面两段代码就等价于db\",{\"1\":{\"835\":1}}],[\"上面两个可应用在大部分场景下\",{\"1\":{\"546\":1}}],[\"上面那段查询代码等价于\",{\"1\":{\"833\":1}}],[\"上面情况会触发全表扫描\",{\"1\":{\"818\":1}}],[\"上面struct定义的时候\",{\"1\":{\"746\":1}}],[\"上面三种情况虽然都完成了测试\",{\"1\":{\"468\":1}}],[\"上面队列的例子\",{\"1\":{\"344\":1}}],[\"上面只是列出了比较常见的领域\",{\"1\":{\"335\":1}}],[\"上面的副本升级需要关闭现有的\",{\"1\":{\"1215\":1}}],[\"上面的hash负载均衡存在一个问题\",{\"1\":{\"1165\":1}}],[\"上面的含义是\",{\"1\":{\"1141\":1}}],[\"上面的key和这里一致\",{\"1\":{\"1090\":1}}],[\"上面的操作正常都是可以的\",{\"1\":{\"1010\":1}}],[\"上面的虽然提供高可用\",{\"1\":{\"1005\":1}}],[\"上面的例子就是轮询的方式\",{\"1\":{\"1161\":1}}],[\"上面的例子执行结果如下\",{\"1\":{\"429\":1}}],[\"上面的例子中创建了一个缓冲区大小为1的int型管道\",{\"1\":{\"415\":1}}],[\"上面的例子中结果输出很完美\",{\"1\":{\"412\":1}}],[\"上面的例子输出都是一样的\",{\"1\":{\"303\":1}}],[\"上面的代码省略了很多细节\",{\"1\":{\"348\":1}}],[\"上面的测试例子就不能使用gotest\",{\"1\":{\"314\":1}}],[\"上面的写法默认是不允许通过编译的\",{\"1\":{\"300\":1}}],[\"上面例子中\",{\"1\":{\"293\":1}}],[\"上述规则限制了每个ip访问的速度为2r\",{\"1\":{\"1154\":1}}],[\"上述命令bgsave从后台执行数据保存操作\",{\"1\":{\"981\":1}}],[\"上述情况的解决方案\",{\"1\":{\"593\":1,\"665\":1}}],[\"上述算法时间复杂度多少\",{\"1\":{\"567\":1,\"639\":2}}],[\"上述问题有没有什么解决办法\",{\"1\":{\"566\":1,\"638\":2}}],[\"上述性能测试的样本数只有两组\",{\"1\":{\"476\":1}}],[\"上述操作都只能在主测试中进行\",{\"1\":{\"472\":1}}],[\"上述定义中\",{\"1\":{\"455\":1}}],[\"上述所有的内容都只是在讲述go\",{\"1\":{\"455\":1}}],[\"上述已经介绍过了sync\",{\"1\":{\"433\":1}}],[\"上述代码的输出为\",{\"1\":{\"1415\":1}}],[\"上述代码会将所有请求转发到https\",{\"1\":{\"1338\":1}}],[\"上述代码便不再会发生死锁\",{\"1\":{\"420\":1}}],[\"上述代码运行过后\",{\"1\":{\"286\":1}}],[\"上述提到了动态具体类型这一词\",{\"1\":{\"347\":1}}],[\"上述这几种字符串传递方法涉及到了一次内存拷贝\",{\"1\":{\"303\":1}}],[\"上述例子中将字符串转换成\",{\"1\":{\"258\":1}}],[\"上述我们的操作\",{\"1\":{\"55\":1}}],[\"上述连个功能的开发工作\",{\"1\":{\"30\":1}}],[\"上部署了一个静态的网站\",{\"1\":{\"54\":1}}],[\"上查看别人的项目的时候我们可能会看到上图中的按钮\",{\"1\":{\"53\":1}}],[\"号\",{\"1\":{\"603\":1,\"675\":1,\"863\":1}}],[\"号要求删除\",{\"1\":{\"30\":1}}],[\"号完成\",{\"1\":{\"30\":1}}],[\"号上线活动2\",{\"1\":{\"30\":1}}],[\"号上线活动1\",{\"1\":{\"30\":1}}],[\"要转换的整型数字\",{\"1\":{\"1385\":1}}],[\"要转换的字符串\",{\"1\":{\"1384\":1,\"1386\":1,\"1389\":1,\"1391\":1}}],[\"要多读源代码注释\",{\"1\":{\"1301\":1}}],[\"要安装gin软件包\",{\"1\":{\"1274\":1}}],[\"要确保所有节点的主机名都能被正确解析\",{\"1\":{\"1226\":1}}],[\"要配合缓存命中来使用\",{\"1\":{\"1166\":1}}],[\"要敲回车\",{\"1\":{\"1085\":1}}],[\"要处理海量的消息\",{\"1\":{\"1057\":1}}],[\"要地址\",{\"1\":{\"999\":1}}],[\"要是事务成功提交了\",{\"1\":{\"897\":1}}],[\"要不然安装时间会很长很长\",{\"1\":{\"849\":1}}],[\"要查询的字段全部是索引字段\",{\"1\":{\"818\":1}}],[\"要断开连接后\",{\"1\":{\"813\":1}}],[\"要减少\",{\"1\":{\"790\":1}}],[\"要尽可能减少指标的计算耗时\",{\"1\":{\"789\":1}}],[\"要先判断一下你对这个表\",{\"1\":{\"780\":1}}],[\"要上线了\",{\"1\":{\"645\":1}}],[\"要唯一的\",{\"1\":{\"625\":1,\"697\":1}}],[\"要怎么做呢\",{\"1\":{\"573\":1,\"645\":1}}],[\"要通过通信来共享内存\",{\"1\":{\"535\":1}}],[\"要想一直监测管道\",{\"1\":{\"421\":1}}],[\"要花费1ms\",{\"1\":{\"396\":1}}],[\"要修改反射对象\",{\"1\":{\"349\":1}}],[\"要使用对应的数据库\",{\"1\":{\"890\":1}}],[\"要使用errno\",{\"1\":{\"298\":1}}],[\"要使用此布局\",{\"1\":{\"2\":1}}],[\"要么域名隔离\",{\"1\":{\"1130\":1}}],[\"要么端口隔离\",{\"1\":{\"1130\":1}}],[\"要么用ca指纹\",{\"1\":{\"702\":1}}],[\"要么成功要么失败\",{\"1\":{\"580\":1,\"652\":1}}],[\"要么全部值类型要么全部指针类型\",{\"1\":{\"515\":1}}],[\"要么使用ca证书\",{\"1\":{\"702\":1}}],[\"要么使用选项模型\",{\"1\":{\"513\":1}}],[\"要么使用取地址符将其他变量的地址赋值给该指针\",{\"1\":{\"275\":1}}],[\"要么定义多个上面的构造方法\",{\"1\":{\"513\":1}}],[\"要么读要么写\",{\"1\":{\"421\":1}}],[\"要么就是泛滥建设索引\",{\"1\":{\"800\":1}}],[\"要么就是除了主键以外的都不建设索引\",{\"1\":{\"800\":1}}],[\"要么就都用指针接收者\",{\"1\":{\"287\":1}}],[\"要么就都不用\",{\"1\":{\"287\":1}}],[\"要么就使用内置函数new手动分配\",{\"1\":{\"275\":1}}],[\"要么都用\",{\"1\":{\"287\":1}}],[\"要么建议使用options模式\",{\"1\":{\"268\":1}}],[\"要么创建多个构造函数\",{\"1\":{\"268\":1}}],[\"要自己搭环境\",{\"1\":{\"43\":1}}],[\"要用\",{\"1\":{\"30\":1}}],[\"要求是正数\",{\"1\":{\"1029\":1}}],[\"要求5分钟以内的自我介绍\",{\"1\":{\"575\":1,\"647\":1}}],[\"要求时间复杂度尽可能低\",{\"1\":{\"567\":1,\"639\":2}}],[\"要求必须绑定手机号\",{\"1\":{\"54\":1}}],[\"要求\",{\"1\":{\"30\":1,\"814\":1}}],[\"要求撤销\",{\"1\":{\"30\":1}}],[\"日下午\",{\"1\":{\"1307\":1}}],[\"日式输出\",{\"0\":{\"1304\":1}}],[\"日志库\",{\"1\":{\"1307\":1}}],[\"日志切割组件\",{\"0\":{\"1307\":1}}],[\"日志初始化完成\",{\"1\":{\"1306\":1}}],[\"日志文件\",{\"1\":{\"1307\":1}}],[\"日志文件的最大大小\",{\"1\":{\"1307\":1}}],[\"日志文件就会越来越大\",{\"1\":{\"1307\":1}}],[\"日志文件配置结构体\",{\"1\":{\"1303\":1}}],[\"日志文件输出路径\",{\"1\":{\"1302\":1}}],[\"日志书写\",{\"1\":{\"1302\":1}}],[\"日志编码主要涉及到对于日志的一些细节的格式化\",{\"1\":{\"1303\":1}}],[\"日志编码\",{\"0\":{\"1303\":1},\"1\":{\"1302\":1}}],[\"日志器名称编码器\",{\"1\":{\"1302\":1}}],[\"日志输出分为控制台输出和文件输出\",{\"1\":{\"1304\":1}}],[\"日志输出到哪里\",{\"1\":{\"1303\":1}}],[\"日志输出\",{\"1\":{\"1193\":1}}],[\"日志的级别是\",{\"1\":{\"1131\":1}}],[\"日志级别大写\",{\"1\":{\"1303\":1}}],[\"日志级别\",{\"0\":{\"1305\":1},\"1\":{\"1130\":1,\"1302\":1}}],[\"日志记录和监控\",{\"1\":{\"1071\":1}}],[\"日志记录方式\",{\"1\":{\"965\":1}}],[\"日志流式处理\",{\"1\":{\"1054\":1}}],[\"日志聚合一般来说是从服务器上收集日志文件\",{\"1\":{\"1019\":1}}],[\"日志聚合\",{\"1\":{\"1019\":1}}],[\"日志模式\",{\"0\":{\"984\":1}}],[\"日志\",{\"1\":{\"979\":1,\"1183\":1,\"1339\":1,\"1340\":1,\"1341\":1}}],[\"日志分析\",{\"1\":{\"901\":1,\"907\":1}}],[\"日志信息\",{\"1\":{\"55\":1}}],[\"日期\",{\"1\":{\"1341\":1}}],[\"日期和字符串\",{\"1\":{\"734\":1}}],[\"日期将被转换为utc格式\",{\"1\":{\"721\":1}}],[\"日期可以是\",{\"1\":{\"721\":1}}],[\"日期类型\",{\"0\":{\"721\":1},\"1\":{\"721\":1}}],[\"日后下载依赖就会非常的迅速\",{\"1\":{\"451\":1}}],[\"日本語\",{\"1\":{\"186\":1}}],[\"日语等\",{\"1\":{\"144\":1}}],[\"日\",{\"1\":{\"30\":1}}],[\"为每种\",{\"1\":{\"1286\":1}}],[\"为每个分区开一个go协程去取值\",{\"1\":{\"1047\":1}}],[\"为每个session\",{\"1\":{\"822\":3}}],[\"为项目切换或升级授权机制就像修改配置一样简单\",{\"1\":{\"1249\":1}}],[\"为分布式服务提供统一的权限校验\",{\"1\":{\"1241\":1}}],[\"为分布式锁设置过期时间\",{\"1\":{\"634\":1}}],[\"为单位\",{\"1\":{\"1174\":1,\"1307\":1}}],[\"为保证稳定性\",{\"1\":{\"1020\":1}}],[\"为领头节点去做\",{\"1\":{\"999\":1}}],[\"为避免\",{\"1\":{\"996\":1}}],[\"为避免击穿\",{\"1\":{\"639\":1}}],[\"为自动触发\",{\"1\":{\"985\":1}}],[\"为哈希表\",{\"1\":{\"972\":2}}],[\"为已存在的列表添加值\",{\"1\":{\"971\":1}}],[\"为给定\",{\"1\":{\"967\":2}}],[\"为它建立索引\",{\"1\":{\"811\":1}}],[\"为num创建一个索引\",{\"1\":{\"810\":1}}],[\"为冗余索引\",{\"1\":{\"795\":1}}],[\"为前缀\",{\"1\":{\"794\":2}}],[\"为其提供了专属的哨兵命令\",{\"1\":{\"996\":1}}],[\"为其他对象提供一种代理以控制对这个对象的访问\",{\"1\":{\"654\":1}}],[\"为其分配内存空间\",{\"1\":{\"303\":1}}],[\"为复杂的子系统提供一个简单的接口\",{\"1\":{\"654\":1}}],[\"为复数提供了基本的常量和数学函数\",{\"1\":{\"124\":1}}],[\"为以第\",{\"1\":{\"645\":1}}],[\"为何使用服务内存而不使用redis或其他外部缓存方案\",{\"1\":{\"576\":1,\"648\":1}}],[\"为何还需要kafka\",{\"1\":{\"576\":1,\"648\":1}}],[\"为何要使用分支\",{\"0\":{\"30\":1}}],[\"为测试执行gomaxprocs\",{\"1\":{\"469\":1}}],[\"为\",{\"1\":{\"451\":1,\"1174\":1,\"1307\":1}}],[\"为完全相等\",{\"1\":{\"379\":1}}],[\"为此\",{\"1\":{\"1319\":1}}],[\"为此前后端的参数是需要校验的\",{\"1\":{\"1288\":1}}],[\"为此容器数据就是干了这个事==做数据持久化\",{\"1\":{\"1199\":1}}],[\"为此还有给一个保存的策略\",{\"1\":{\"1065\":1}}],[\"为此还是要额外将数据存储到磁盘中去做持久化\",{\"1\":{\"1065\":1}}],[\"为此没有队列数说法\",{\"1\":{\"1057\":1}}],[\"为此常用的还是1秒执行一次\",{\"1\":{\"987\":1}}],[\"为此解决办法是利用多进程\",{\"1\":{\"980\":1}}],[\"为此获得多少读锁\",{\"1\":{\"557\":1}}],[\"为此我们只要了解规则进行合理安排类型的顺序即可\",{\"1\":{\"554\":1}}],[\"为此结构体类型需要注意内存对齐\",{\"1\":{\"554\":1}}],[\"为此go开发就无需关系操作系统实现\",{\"1\":{\"540\":1}}],[\"为此可以修改回来\",{\"1\":{\"1223\":1}}],[\"为此可以使用c中的errno\",{\"1\":{\"298\":1}}],[\"为此可移植性差\",{\"1\":{\"540\":1}}],[\"为此两者方法调用都是可行的\",{\"1\":{\"515\":1}}],[\"为此要合理设计\",{\"1\":{\"514\":1}}],[\"为此开发需要了解内存对齐来手动布局来优化\",{\"1\":{\"513\":1}}],[\"为此需要自己定义扩展\",{\"1\":{\"1289\":1}}],[\"为此需要一个\",{\"1\":{\"1212\":1}}],[\"为此需要使用4字节来处理中文字符串问题\",{\"1\":{\"511\":1}}],[\"为此需要加密来处理\",{\"1\":{\"85\":1}}],[\"为此就需要用到锁\",{\"1\":{\"429\":1}}],[\"为此就需要使用工具来进行逃逸分析\",{\"1\":{\"317\":1}}],[\"为了避免单独一个服务器压力过大\",{\"1\":{\"1159\":1}}],[\"为了避免访问linux系统内核\",{\"1\":{\"1133\":1}}],[\"为了更好地理解用户行为\",{\"1\":{\"1019\":1}}],[\"为了更好的维护性\",{\"1\":{\"390\":1}}],[\"为了方便演示\",{\"1\":{\"992\":1}}],[\"为了方便起见\",{\"1\":{\"294\":1}}],[\"为了数据的安全考虑\",{\"1\":{\"987\":1}}],[\"为了让\",{\"1\":{\"985\":1}}],[\"为了让对象池中的缓冲区大小大致相同以便更好的弹性控制缓冲区大小\",{\"1\":{\"435\":1}}],[\"为了保险都会加一句defer\",{\"1\":{\"897\":1}}],[\"为了保证\",{\"1\":{\"1006\":1}}],[\"为了保证系统的高可用性\",{\"1\":{\"656\":1}}],[\"为了保证能顺利完成\",{\"1\":{\"30\":1}}],[\"为了提高读写效率\",{\"1\":{\"985\":1}}],[\"为了提高性能和减少死锁的发生\",{\"1\":{\"656\":1}}],[\"为了提升度的长度\",{\"1\":{\"803\":1}}],[\"为了加快数据的查找\",{\"1\":{\"802\":1}}],[\"为了确保多个节点\",{\"1\":{\"653\":1}}],[\"为了确保高吞吐量和容错性\",{\"1\":{\"637\":1}}],[\"为了简化演示代码的复杂性\",{\"1\":{\"484\":1}}],[\"为了解决这种数据倾斜问题\",{\"1\":{\"1165\":1}}],[\"为了解决这类问题\",{\"1\":{\"462\":1}}],[\"为了解决这个问题\",{\"1\":{\"442\":1,\"776\":1}}],[\"为了并发安全肯定需要做出一定的牺牲\",{\"1\":{\"436\":1}}],[\"为了能够匹配上接收者的类型\",{\"1\":{\"286\":1}}],[\"为了便于阅读\",{\"1\":{\"181\":1}}],[\"为go设计的跨平台本机gui\",{\"1\":{\"138\":1}}],[\"为go加载open\",{\"1\":{\"132\":1}}],[\"为您提供sync\",{\"1\":{\"137\":1}}],[\"为taglib绑定\",{\"1\":{\"126\":1}}],[\"为template构建解析树\",{\"1\":{\"124\":1}}],[\"为音乐应用程序基于序列转到本地音频混合器\",{\"1\":{\"126\":1}}],[\"为utf8或utf8mb4\",{\"1\":{\"794\":1}}],[\"为utf\",{\"1\":{\"124\":1}}],[\"为rpc包实现了一个json\",{\"1\":{\"124\":1}}],[\"为操作系统功能实现了一个平台无关的接口\",{\"1\":{\"124\":1}}],[\"为公共变量提供了一个标准的接口\",{\"1\":{\"124\":1}}],[\"为你希望作为跳转目标的标题添加一个自定义的id\",{\"1\":{\"64\":1}}],[\"为标题添加锚点\",{\"1\":{\"64\":1}}],[\"为例\",{\"1\":{\"53\":1}}],[\"为什么docker这里才200m\",{\"1\":{\"1192\":1}}],[\"为什么只有1个成功呢\",{\"1\":{\"1154\":1}}],[\"为什么只提升了3倍\",{\"1\":{\"566\":1,\"638\":2}}],[\"为什么用redis\",{\"0\":{\"958\":1}}],[\"为什么用微服务\",{\"1\":{\"609\":1,\"681\":1}}],[\"为什么在数据库表字段设计的时候尽量都加上not\",{\"1\":{\"786\":1}}],[\"为什么mysql使用b+树\",{\"1\":{\"649\":1}}],[\"为什么mysql里不使用b树\",{\"1\":{\"577\":1,\"649\":2}}],[\"为什么线程消耗比协程大\",{\"1\":{\"618\":1,\"690\":1}}],[\"为什么需要拆表\",{\"1\":{\"613\":1,\"685\":1}}],[\"为什么多协程优化\",{\"1\":{\"609\":1,\"681\":1}}],[\"为什么很多大厂都用go\",{\"1\":{\"604\":1,\"676\":1}}],[\"为什么没有参加实习\",{\"1\":{\"599\":1,\"671\":1}}],[\"为什么查询效率高\",{\"1\":{\"595\":1,\"667\":1}}],[\"为什么要用这个casbin\",{\"0\":{\"1240\":1}}],[\"为什么要用docker\",{\"0\":{\"1180\":1}}],[\"为什么要自己实现大顶堆\",{\"1\":{\"620\":1,\"692\":1}}],[\"为什么要这么做\",{\"1\":{\"618\":1,\"690\":1}}],[\"为什么要这么设计呢\",{\"1\":{\"592\":1,\"664\":1}}],[\"为什么要等待\",{\"1\":{\"606\":1,\"678\":1}}],[\"为什么要学web框架\",{\"0\":{\"110\":1}}],[\"为什么会出现超卖问题\",{\"1\":{\"592\":1,\"664\":1}}],[\"为什么废除了\",{\"1\":{\"588\":1,\"660\":1}}],[\"为什么使用乐观锁\",{\"1\":{\"588\":1,\"660\":1}}],[\"为什么左右模糊不能命中索引\",{\"1\":{\"585\":1,\"657\":1}}],[\"为什么挥手是四次\",{\"1\":{\"579\":1,\"651\":1}}],[\"为什么微服务能提升系统可拓展性\",{\"1\":{\"576\":1,\"648\":1}}],[\"为什么是\",{\"1\":{\"645\":1}}],[\"为什么是无序的\",{\"1\":{\"619\":1,\"691\":1}}],[\"为什么是java和go呢\",{\"1\":{\"607\":1,\"679\":1}}],[\"为什么是n+1和2n和\",{\"1\":{\"573\":1,\"645\":1}}],[\"为什么是0\",{\"1\":{\"566\":1,\"638\":2}}],[\"为什么不用b树\",{\"1\":{\"616\":1,\"688\":1}}],[\"为什么不用二叉树\",{\"1\":{\"573\":1,\"645\":1}}],[\"为什么不继续科研方向\",{\"1\":{\"599\":1,\"671\":1}}],[\"为什么不要使用select\",{\"1\":{\"592\":1,\"664\":1}}],[\"为什么不安全\",{\"1\":{\"580\":1,\"652\":1}}],[\"为什么不能再多了\",{\"1\":{\"567\":1,\"639\":2}}],[\"为什么不在语言层面支持枚举是笔者非常不能理解的一件事\",{\"1\":{\"213\":1}}],[\"为什么有订单数量的概念\",{\"1\":{\"566\":1,\"638\":2}}],[\"为什么go不是传统意义上的面向对象语言\",{\"1\":{\"565\":1,\"637\":2}}],[\"为什么持久化的时候是fork子进程处理\",{\"1\":{\"562\":1,\"634\":1}}],[\"为什么对齐\",{\"1\":{\"513\":1}}],[\"为什么\",{\"1\":{\"511\":1,\"584\":1,\"587\":1,\"588\":1,\"606\":1,\"611\":1,\"618\":1,\"621\":2,\"656\":1,\"659\":1,\"660\":1,\"678\":1,\"683\":1,\"690\":1,\"693\":2}}],[\"为什么a+b的结果还是1\",{\"1\":{\"208\":1}}],[\"为什么linus不把linux代码放到版本控制系统里呢\",{\"1\":{\"12\":1}}],[\"为什么上面的问题暴力for循环无法解决\",{\"1\":{\"4\":1}}],[\"多用于rpc领域通信相关\",{\"1\":{\"1321\":1}}],[\"多用于数据结构的输出\",{\"1\":{\"221\":1}}],[\"多\",{\"1\":{\"1309\":1}}],[\"多少有点失去日志的意义\",{\"1\":{\"1307\":1}}],[\"多语言翻译错误信息\",{\"0\":{\"1291\":1}}],[\"多语言支持\",{\"1\":{\"1239\":1}}],[\"多叉树的特殊形式\",{\"1\":{\"1285\":1}}],[\"多阶段构建\",{\"1\":{\"1200\":1,\"1206\":1}}],[\"多了一个\",{\"1\":{\"1195\":1}}],[\"多余的请求可以先放到队列里\",{\"1\":{\"1156\":1}}],[\"多租户场景\",{\"1\":{\"1241\":1}}],[\"多租户\",{\"1\":{\"1056\":1}}],[\"多应用对消息队列中同一消息进行处理\",{\"1\":{\"1052\":1}}],[\"多应用间通过消息队列对同一消息进行处理\",{\"1\":{\"1052\":1}}],[\"多出来的都不会被分配到分区\",{\"1\":{\"1027\":1}}],[\"多机集群\",{\"0\":{\"1011\":1},\"1\":{\"1011\":1}}],[\"多哨兵模式\",{\"1\":{\"996\":1}}],[\"多数是为了减轻关系型数据库压力的\",{\"1\":{\"961\":1}}],[\"多数比较出来的\",{\"1\":{\"961\":1}}],[\"多长时间检测一下\",{\"1\":{\"911\":1}}],[\"多种消费模式和持久性模式等\",{\"1\":{\"1056\":1}}],[\"多种协议的支持\",{\"1\":{\"1053\":1}}],[\"多种查询语言\",{\"1\":{\"906\":1}}],[\"多种日期格式\",{\"1\":{\"721\":1}}],[\"多样化的查询\",{\"1\":{\"842\":1}}],[\"多表查询中\",{\"1\":{\"821\":1}}],[\"多表\",{\"1\":{\"796\":1}}],[\"多考虑建立\",{\"1\":{\"795\":1}}],[\"多单词组成的columnname\",{\"1\":{\"795\":1}}],[\"多属性关键词搜索\",{\"0\":{\"761\":1}}],[\"多值查询效果\",{\"1\":{\"757\":1}}],[\"多版本并发控制\",{\"1\":{\"656\":1}}],[\"多态\",{\"1\":{\"651\":1}}],[\"多进程适合\",{\"1\":{\"645\":1}}],[\"多层级角色模型\",{\"1\":{\"1239\":1}}],[\"多层级\",{\"1\":{\"638\":1}}],[\"多台服务器拿不到session\",{\"1\":{\"625\":1,\"697\":1}}],[\"多读操作是不互斥的\",{\"1\":{\"557\":1}}],[\"多次运行\",{\"1\":{\"486\":1}}],[\"多次使用也只会有一个能恢复panic\",{\"1\":{\"397\":1}}],[\"多维切片\",{\"0\":{\"249\":1}}],[\"多播dns\",{\"1\":{\"145\":1}}],[\"多线程切换\",{\"1\":{\"573\":1,\"645\":1}}],[\"多线程的决策树集合\",{\"1\":{\"142\":1}}],[\"多线程开发\",{\"1\":{\"29\":1}}],[\"多个文件\",{\"1\":{\"1281\":1}}],[\"多个文件夹之间共享代码\",{\"0\":{\"41\":1}}],[\"多个消费者可以组成一个消费者组\",{\"1\":{\"1060\":1}}],[\"多个消费者实例可以组成⼀个消费者组\",{\"1\":{\"1027\":1}}],[\"多个分区共同存储一个topic的消息\",{\"1\":{\"1020\":1}}],[\"多个主节点可同时处理读写\",{\"1\":{\"1005\":1}}],[\"多个哨兵之间也存在互相监控\",{\"1\":{\"996\":1}}],[\"多个是select\",{\"1\":{\"893\":1}}],[\"多个or\",{\"1\":{\"816\":1}}],[\"多个and\",{\"1\":{\"816\":1}}],[\"多个alter需整\",{\"1\":{\"796\":1}}],[\"多个服务地址使用逗号分隔\",{\"1\":{\"756\":1,\"771\":1}}],[\"多个格式使用双竖线||分隔\",{\"1\":{\"721\":1}}],[\"多个节点可能会互相等待对方释放锁\",{\"1\":{\"653\":1}}],[\"多个从节点同步主节点的数据\",{\"1\":{\"651\":1}}],[\"多个用户几乎同时读取缓存\",{\"1\":{\"644\":1}}],[\"多个请求并发地修改库存数据\",{\"1\":{\"644\":1}}],[\"多个请求几乎同时抢购库存\",{\"1\":{\"644\":1}}],[\"多个请求会同时访问数据库\",{\"1\":{\"639\":1}}],[\"多个包被一起发送到接收端\",{\"1\":{\"636\":1}}],[\"多个同样的消息被发送到kafka如何控制他们只消费一个\",{\"1\":{\"594\":1,\"666\":1}}],[\"多个p是为了更好利用多核cpu的性能\",{\"1\":{\"542\":1}}],[\"多个协程读取和访问一个共享数据时\",{\"1\":{\"429\":1}}],[\"多个任务之间互不影响\",{\"1\":{\"29\":1}}],[\"避免垃圾镜像\",{\"1\":{\"1187\":1}}],[\"避免单个配置文件过大\",{\"1\":{\"1131\":1}}],[\"避免流量过大导致应用系统挂掉的情况\",{\"1\":{\"1052\":1}}],[\"避免调用接口失败导致整个过程失败\",{\"1\":{\"1052\":1}}],[\"避免数据丢失\",{\"1\":{\"1006\":1}}],[\"避免redis的单点故障\",{\"1\":{\"991\":1}}],[\"避免slave端复制中断\",{\"1\":{\"822\":2}}],[\"避免myisam表进行系统调用\",{\"1\":{\"817\":1}}],[\"避免innodb索引的二次查询\",{\"1\":{\"817\":1}}],[\"避免访问了表的数据行\",{\"1\":{\"814\":1}}],[\"避免索引失效\",{\"1\":{\"799\":1}}],[\"避免大偏移量\",{\"1\":{\"653\":1}}],[\"避免大量重复请求\",{\"1\":{\"625\":1,\"697\":1}}],[\"避免消息重复消费\",{\"1\":{\"653\":1}}],[\"避免消息堆积\",{\"1\":{\"634\":1}}],[\"避免修改过时的数据\",{\"1\":{\"653\":1}}],[\"避免因业务执行时间较长而被误释放\",{\"1\":{\"653\":1}}],[\"避免并发冲突\",{\"1\":{\"653\":1}}],[\"避免一次性回收导致的长时间停顿\",{\"1\":{\"645\":1}}],[\"避免过多索引\",{\"1\":{\"651\":1}}],[\"避免过多线程造成\",{\"1\":{\"645\":1}}],[\"避免过多的线程创建开销\",{\"1\":{\"635\":1}}],[\"避免阻塞主流程\",{\"1\":{\"644\":1}}],[\"避免在多线程环境下频繁传递用户id\",{\"1\":{\"641\":1}}],[\"避免在操作过程中锁被释放\",{\"1\":{\"634\":1}}],[\"避免无效查询\",{\"1\":{\"641\":1}}],[\"避免引用共享\",{\"1\":{\"641\":1}}],[\"避免回表\",{\"1\":{\"641\":1}}],[\"避免回表二次查询\",{\"1\":{\"595\":1,\"667\":1}}],[\"避免重复抢单\",{\"1\":{\"638\":1}}],[\"避免重复清理代码\",{\"1\":{\"514\":1}}],[\"避免了多线程的竞争\",{\"1\":{\"959\":1}}],[\"避免了较高的性能开销\",{\"1\":{\"656\":1}}],[\"避免了请求的发送者与接收者之间的耦合\",{\"1\":{\"654\":1}}],[\"避免了\",{\"1\":{\"645\":1,\"656\":1}}],[\"避免了继承链上的复杂性和问题\",{\"1\":{\"637\":1}}],[\"避免了程序员的复杂操作和管理\",{\"1\":{\"150\":1}}],[\"避免中断\",{\"1\":{\"634\":1}}],[\"避免系统过载\",{\"1\":{\"634\":1}}],[\"避免频繁的类型断言\",{\"1\":{\"633\":1}}],[\"避免内存泄漏\",{\"1\":{\"633\":1}}],[\"避免创建过多协程消耗系统资源\",{\"1\":{\"633\":1}}],[\"避免线程切换的开销\",{\"1\":{\"542\":1}}],[\"避免的冗杂的其他信息\",{\"1\":{\"472\":1}}],[\"避免后续因维护不及时产生bug而造成的心智负担\",{\"1\":{\"466\":1}}],[\"避免影响开发主线\",{\"1\":{\"29\":1}}],[\"避免出现重复组合\",{\"1\":{\"5\":1}}],[\"几个方法实现\",{\"1\":{\"344\":1}}],[\"几乎所有的go语言中的web框架\",{\"1\":{\"1329\":1}}],[\"几乎所有的版本控制系统都以某种形式支持分支\",{\"1\":{\"29\":1}}],[\"几乎没有原生的c程序调用go这种需求\",{\"1\":{\"300\":1}}],[\"几乎每个程序员都能说出属于自己的理由\",{\"1\":{\"189\":1}}],[\"几乎能在几秒钟内完成整个项目的编译\",{\"1\":{\"154\":1}}],[\"几周或者几个月\",{\"1\":{\"12\":1}}],[\"分隔字符串\",{\"0\":{\"1408\":1}}],[\"分隔符\",{\"1\":{\"636\":1}}],[\"分发\",{\"1\":{\"1018\":1}}],[\"分发和运行容器化应用\",{\"1\":{\"166\":1}}],[\"分数从高到低排序\",{\"1\":{\"974\":1}}],[\"分数从高到底\",{\"1\":{\"974\":1}}],[\"分组必定触发排序\",{\"1\":{\"819\":1}}],[\"分组\",{\"1\":{\"809\":1}}],[\"分表技术\",{\"1\":{\"799\":1}}],[\"分表是怎么分的\",{\"1\":{\"615\":1,\"687\":1}}],[\"分割字符串\",{\"0\":{\"1402\":1}}],[\"分割文件的大小\",{\"1\":{\"1304\":1}}],[\"分割\",{\"1\":{\"794\":1}}],[\"分类名称\",{\"1\":{\"746\":1}}],[\"分类id\",{\"1\":{\"746\":1}}],[\"分页是我们经常使用的功能\",{\"1\":{\"820\":1}}],[\"分页实现方式\",{\"1\":{\"656\":1}}],[\"分页有哪几种方式\",{\"1\":{\"584\":1,\"656\":1}}],[\"分代回收\",{\"1\":{\"645\":1}}],[\"分代收集\",{\"0\":{\"553\":1},\"1\":{\"638\":1}}],[\"分享\",{\"1\":{\"641\":1}}],[\"分区id\",{\"1\":{\"1047\":1}}],[\"分区数据获取失败\",{\"1\":{\"1036\":1}}],[\"分区数等\",{\"1\":{\"1034\":1}}],[\"分区的作用是做负载\",{\"1\":{\"1020\":1}}],[\"分区化\",{\"1\":{\"1017\":1}}],[\"分区\",{\"1\":{\"637\":1}}],[\"分区和副本机制\",{\"1\":{\"636\":1}}],[\"分片上传\",{\"1\":{\"634\":1}}],[\"分片上传是怎么实现的\",{\"1\":{\"562\":1,\"634\":2}}],[\"分库分表\",{\"1\":{\"610\":1,\"619\":1,\"682\":1,\"691\":1}}],[\"分钟将被强制终止\",{\"1\":{\"630\":1}}],[\"分钟\",{\"1\":{\"488\":1,\"630\":1,\"634\":1,\"911\":2,\"1000\":1}}],[\"分两次执行基准测试\",{\"1\":{\"476\":1}}],[\"分别启动这6个节点\",{\"1\":{\"1010\":1}}],[\"分别部署在不同的服务器上\",{\"1\":{\"990\":1}}],[\"分别命名为\",{\"1\":{\"767\":1}}],[\"分别代表什么\",{\"1\":{\"621\":1,\"693\":1}}],[\"分别解决了什么问题\",{\"1\":{\"613\":1,\"685\":1}}],[\"分别介绍一下mysol\",{\"1\":{\"594\":1,\"666\":1}}],[\"分别如下\",{\"1\":{\"349\":1}}],[\"分别有reflect\",{\"1\":{\"348\":1}}],[\"分别用c和go编写了一个两数求和的函数\",{\"1\":{\"314\":1}}],[\"分别是矩阵的行和列\",{\"1\":{\"638\":1}}],[\"分别是耗时\",{\"1\":{\"476\":1}}],[\"分别是auth\",{\"1\":{\"463\":1}}],[\"分别是withdeadline和withtimeout\",{\"1\":{\"428\":1}}],[\"分别是os\",{\"1\":{\"402\":1}}],[\"分别是os包下的readfile函数\",{\"1\":{\"401\":1}}],[\"分别是reflect\",{\"1\":{\"348\":1}}],[\"分别是类型与初始容量\",{\"1\":{\"259\":1}}],[\"分别是\",{\"1\":{\"215\":1,\"423\":1,\"1443\":1}}],[\"分配给worker进程去进行处理\",{\"1\":{\"1127\":1}}],[\"分配的内存\",{\"1\":{\"822\":3}}],[\"分配内存\",{\"1\":{\"310\":1}}],[\"分配新的底层数组\",{\"1\":{\"250\":1}}],[\"分为json和console两种模式\",{\"1\":{\"1302\":1}}],[\"分为5或6个域\",{\"1\":{\"1175\":1}}],[\"分为单元素查找和范围查找\",{\"1\":{\"805\":1}}],[\"分为三部分\",{\"1\":{\"641\":1}}],[\"分为两部分的存储结构\",{\"1\":{\"558\":1}}],[\"分为两种类型的仓库\",{\"1\":{\"12\":1}}],[\"分为普通字符串和原生字符串\",{\"1\":{\"252\":1}}],[\"分布式架构\",{\"1\":{\"1054\":1}}],[\"分布式死锁\",{\"1\":{\"653\":1}}],[\"分布式死锁如何解决\",{\"1\":{\"581\":1,\"653\":2}}],[\"分布式环境下\",{\"1\":{\"637\":1}}],[\"分布式事务\",{\"1\":{\"600\":1,\"614\":1,\"672\":1,\"686\":1}}],[\"分布式场景下的乐观锁一般会依赖外部系统来实现版本控制\",{\"1\":{\"653\":1}}],[\"分布式场景下\",{\"1\":{\"581\":1,\"653\":2}}],[\"分布式锁等\",{\"1\":{\"635\":1}}],[\"分布式锁可能未释放\",{\"1\":{\"634\":1}}],[\"分布式锁用于在多个分布式系统中确保同一时刻只有一个系统或服务能够访问某资源\",{\"1\":{\"633\":1}}],[\"分布式锁\",{\"1\":{\"581\":1,\"618\":1,\"625\":1,\"639\":1,\"653\":3,\"690\":1,\"697\":1}}],[\"分布式锁的原理\",{\"1\":{\"561\":1,\"617\":1,\"633\":2,\"689\":1}}],[\"分布式缓存实现\",{\"1\":{\"576\":1,\"648\":1}}],[\"分布式sql数据库\",{\"1\":{\"334\":1}}],[\"分布式键值数据库\",{\"1\":{\"334\":1}}],[\"分布式可插拔rpc服务框架\",{\"1\":{\"128\":1}}],[\"分布式\",{\"1\":{\"128\":1,\"619\":1,\"691\":1,\"908\":1,\"1018\":1}}],[\"分布式系统\",{\"0\":{\"128\":1},\"1\":{\"120\":1}}],[\"分词使用方法\",{\"0\":{\"743\":1}}],[\"分词用的什么数据结构\",{\"1\":{\"585\":1,\"657\":1}}],[\"分词\",{\"1\":{\"122\":1,\"743\":1}}],[\"分析器先进行词法分析\",{\"1\":{\"778\":1}}],[\"分析器\",{\"0\":{\"778\":1},\"1\":{\"775\":1}}],[\"分析和计算\",{\"1\":{\"735\":1}}],[\"分析导致创建新os线程原因\",{\"1\":{\"324\":1}}],[\"分析结果\",{\"1\":{\"321\":1}}],[\"分析\",{\"0\":{\"325\":1,\"706\":1},\"1\":{\"58\":1,\"645\":1,\"782\":1,\"800\":1,\"1190\":1}}],[\"分析一下冲突的原因\",{\"1\":{\"36\":1}}],[\"分支名称为\",{\"1\":{\"58\":1}}],[\"分支的合并与删除\",{\"1\":{\"34\":1}}],[\"分支的查看切换\",{\"0\":{\"32\":1}}],[\"分支的概念\",{\"0\":{\"29\":1}}],[\"只输入12小时制的时间\",{\"1\":{\"1431\":1}}],[\"只输出日期\",{\"1\":{\"1431\":1}}],[\"只绑定路径参数\",{\"1\":{\"1283\":1}}],[\"只绑定查询参数\",{\"1\":{\"1283\":1}}],[\"只匹配单个路径段\",{\"1\":{\"1280\":1}}],[\"只在master执行\",{\"1\":{\"1225\":1}}],[\"只在发生\",{\"1\":{\"635\":1}}],[\"只详细说明nginx自带的负载均衡策略\",{\"1\":{\"1160\":1}}],[\"只管同步leader的消息\",{\"1\":{\"1064\":1}}],[\"只确保leader发送成功\",{\"1\":{\"1024\":1}}],[\"只适用于主服务器\",{\"1\":{\"998\":1}}],[\"只显示age\",{\"1\":{\"863\":1}}],[\"只好从新的日志开始\",{\"1\":{\"825\":1}}],[\"只使用了3个\",{\"1\":{\"814\":1}}],[\"只检索给定范围的行\",{\"1\":{\"814\":1}}],[\"只支持等值查找\",{\"1\":{\"807\":1}}],[\"只存储key\",{\"1\":{\"805\":1}}],[\"只存在显式的类型转换\",{\"1\":{\"385\":1}}],[\"只用于切片\",{\"1\":{\"654\":1}}],[\"只出现一次的数字\",{\"1\":{\"645\":1}}],[\"只拷贝对象的引用\",{\"1\":{\"641\":1}}],[\"只运行基准测试\",{\"1\":{\"630\":1}}],[\"只运行regexp匹配的测试用例\",{\"1\":{\"469\":1}}],[\"只提供两个方法\",{\"1\":{\"556\":1}}],[\"只定义规范\",{\"1\":{\"516\":1}}],[\"只分配内存\",{\"1\":{\"511\":1}}],[\"只测试函数名称中包含\",{\"1\":{\"489\":1}}],[\"只会命中name的索引不会命中email的索引了\",{\"1\":{\"806\":1}}],[\"只会给测试函数传入语料库中的数据\",{\"1\":{\"477\":1}}],[\"只会用到os包下的两个函数\",{\"1\":{\"405\":1}}],[\"只编译测试文件\",{\"1\":{\"469\":1}}],[\"只对当前数据库生效\",{\"1\":{\"813\":1}}],[\"只对外暴露了一个do方法\",{\"1\":{\"434\":1}}],[\"只对一个数字使用时\",{\"1\":{\"179\":1}}],[\"只写了\",{\"1\":{\"494\":1}}],[\"只写\",{\"1\":{\"400\":1}}],[\"只读设置\",{\"1\":{\"911\":1}}],[\"只读的存储区域\",{\"1\":{\"558\":1}}],[\"只读管道也是一样的道理\",{\"1\":{\"419\":1}}],[\"只读\",{\"1\":{\"400\":1}}],[\"只有一种情况例外\",{\"1\":{\"1418\":1}}],[\"只有一个主\",{\"1\":{\"990\":1}}],[\"只有一个层级\",{\"1\":{\"566\":1,\"638\":2}}],[\"只有一个函数\",{\"1\":{\"446\":1}}],[\"只有一个协程能够对其写入数据\",{\"1\":{\"415\":1}}],[\"只有1个成功\",{\"1\":{\"1154\":1}}],[\"只有在其他的服务器都宕机以后\",{\"1\":{\"1163\":1}}],[\"只有在服务器处理了请求并且已经读取了整个请求头时\",{\"1\":{\"1152\":1}}],[\"只有在字段\",{\"1\":{\"972\":1}}],[\"只有在\",{\"1\":{\"970\":1}}],[\"只有在真正引用了外部依赖后\",{\"1\":{\"460\":1}}],[\"只有索引的大小远远小于数据本身才能发挥索引的作用\",{\"1\":{\"817\":1}}],[\"只有主节点确认\",{\"1\":{\"653\":1}}],[\"只有版本号匹配才允许修改\",{\"1\":{\"653\":1}}],[\"只有少部分存活对象晋升到老年代\",{\"1\":{\"638\":1}}],[\"只有写入操作才会进行加锁\",{\"1\":{\"558\":1}}],[\"只有三个指令\",{\"1\":{\"465\":1}}],[\"只有当缓冲区容量满了才会阻塞的等待协程来读取管道中的数据\",{\"1\":{\"417\":1}}],[\"只有两者都为nil时才是完全相等\",{\"1\":{\"379\":1}}],[\"只有切片才能使用拓展表达式\",{\"1\":{\"250\":1}}],[\"只需开启一个新的协程就可以去处理\",{\"1\":{\"1374\":1}}],[\"只需在应用程序启动时将它传递到\",{\"1\":{\"1307\":1}}],[\"只需执行如下命令\",{\"1\":{\"327\":1}}],[\"只需要换一个函数\",{\"1\":{\"1319\":1}}],[\"只需要包含最基本的命令\",{\"1\":{\"1192\":1}}],[\"只需要依赖接口而不关心具体的实现\",{\"1\":{\"651\":1}}],[\"只需要追加一个结构体即可\",{\"1\":{\"494\":1}}],[\"只需要做到以下三点\",{\"1\":{\"443\":1}}],[\"只需要将初始化操作传入do方法即可\",{\"1\":{\"434\":1}}],[\"只需要提供文件路径即可\",{\"1\":{\"401\":1}}],[\"只需要完成对应的操作就足够\",{\"1\":{\"337\":1}}],[\"只需要执行如下命令\",{\"1\":{\"317\":1}}],[\"只需要传入不同的options函数即可\",{\"1\":{\"269\":1}}],[\"只需要一个clear就可以清空\",{\"1\":{\"264\":1}}],[\"只需要一个字节就能表示\",{\"1\":{\"258\":1}}],[\"只需要稍微修改一下就能解决该问题\",{\"1\":{\"250\":1}}],[\"只需要数行代码\",{\"1\":{\"121\":1}}],[\"只根据crane类型来存放起重机\",{\"1\":{\"293\":1}}],[\"只根据接口的规范来使用功能\",{\"1\":{\"293\":1}}],[\"只包含方法集的接口就是基本接口\",{\"1\":{\"289\":1}}],[\"只不过因为字符串转字节切片需求比较频繁\",{\"1\":{\"1447\":1}}],[\"只不过子评论要记录其对应的主评论的id\",{\"1\":{\"566\":1,\"638\":2}}],[\"只不过go\",{\"1\":{\"465\":1}}],[\"只不过在go中需要显示的指明\",{\"1\":{\"285\":1}}],[\"只不过相对不太常用\",{\"1\":{\"124\":1}}],[\"只能访问到8081和8082\",{\"1\":{\"1163\":1}}],[\"只能提取数据行的值并加载内存中\",{\"1\":{\"817\":1}}],[\"只能使用是商业版本nginx中\",{\"1\":{\"1163\":1}}],[\"只能使用不同的端口隔离\",{\"1\":{\"1011\":1}}],[\"只能使用b\",{\"1\":{\"817\":1}}],[\"只能使用英文字母\",{\"1\":{\"794\":1}}],[\"只能包内访问\",{\"1\":{\"526\":1}}],[\"只能对管道发送数据\",{\"1\":{\"418\":1,\"419\":1}}],[\"只能阻塞等待\",{\"1\":{\"417\":1}}],[\"只能添加\",{\"1\":{\"400\":1}}],[\"只能说是几乎没有\",{\"1\":{\"388\":1}}],[\"只能自己手写\",{\"1\":{\"314\":1}}],[\"只能以字母和下划线开头\",{\"1\":{\"178\":1}}],[\"只能由字母\",{\"1\":{\"178\":1}}],[\"只能搭建静态网站\",{\"1\":{\"54\":1}}],[\"只是以不同的方式\",{\"1\":{\"1280\":1}}],[\"只是他的速度快很多\",{\"1\":{\"1195\":1}}],[\"只是看运行情况\",{\"1\":{\"1188\":1}}],[\"只是队列中的元素出队的时间间隔一致\",{\"1\":{\"1149\":1}}],[\"只是当索引用\",{\"1\":{\"805\":1}}],[\"只是业务复杂度的难\",{\"1\":{\"625\":1,\"697\":1}}],[\"只是定义规范没有具体实现且只是自定义类型才有方法\",{\"1\":{\"515\":1}}],[\"只是先前版本的基础只是增加了新的功能\",{\"1\":{\"455\":1}}],[\"只是函数签名略有区别\",{\"1\":{\"370\":1}}],[\"只是调用了其它函数\",{\"1\":{\"326\":1}}],[\"只是为了方便开发者使用\",{\"1\":{\"303\":1}}],[\"只是给出了一个规范\",{\"1\":{\"293\":1}}],[\"只是多了一小段\",{\"1\":{\"285\":1}}],[\"只是大多数时候都是anscii字符\",{\"1\":{\"255\":1}}],[\"只是对于切片而言\",{\"1\":{\"243\":1}}],[\"只是一个实现某种性能的小项目\",{\"1\":{\"145\":1}}],[\"只是从本地移除远程仓库的关联关系\",{\"1\":{\"57\":1}}],[\"只要指针是有效的\",{\"1\":{\"1443\":1}}],[\"只要访问主体是root一律放行\",{\"1\":{\"1244\":1}}],[\"只要启动一个容器\",{\"1\":{\"1195\":1}}],[\"只要这些货物在集装箱里封装的好好的\",{\"1\":{\"1183\":1}}],[\"只要请求踩到红线都会生效\",{\"1\":{\"1158\":1}}],[\"只要服务器重新执行一次\",{\"1\":{\"984\":1}}],[\"只要上述三个条件任意满足一个\",{\"1\":{\"981\":1}}],[\"只要硬件支持\",{\"1\":{\"960\":1}}],[\"只要匹配其中一个条件即可\",{\"1\":{\"765\":1}}],[\"只要开始创建索引文档\",{\"1\":{\"734\":1}}],[\"只要类型实现了接口的所有方法\",{\"1\":{\"651\":1}}],[\"只要它们实现了相同的接口方法\",{\"1\":{\"651\":1}}],[\"只要它们实现了接口规定的方法\",{\"1\":{\"651\":1}}],[\"只要令牌过期即可\",{\"1\":{\"641\":1}}],[\"只要结构体中的所有字段都可以比较\",{\"1\":{\"635\":1}}],[\"只要操作是同步的\",{\"1\":{\"635\":1}}],[\"只要莫一个类型实现接口内所有的方法就被认为实现该接口\",{\"1\":{\"516\":1}}],[\"只要没有报错就说明下载成功\",{\"1\":{\"453\":1}}],[\"只要实现了该接口都可以称之为上下文例如著名web框架gin中的gin\",{\"1\":{\"423\":1}}],[\"只要任一协程发生panic\",{\"1\":{\"394\":1}}],[\"只要有对一个表的更新\",{\"1\":{\"777\":1}}],[\"只要有一个发生变化\",{\"1\":{\"743\":1}}],[\"只要有interface\",{\"1\":{\"346\":1}}],[\"只要有数组名和下标\",{\"1\":{\"240\":1}}],[\"只要是带有类型集的接口\",{\"1\":{\"341\":1}}],[\"只要是带有方法集的接口\",{\"1\":{\"341\":1}}],[\"只要是实现了一个接口的全部方法\",{\"1\":{\"293\":1}}],[\"只要掌握了泛型\",{\"1\":{\"295\":1}}],[\"只要能够起重和吊货就行\",{\"1\":{\"293\":1}}],[\"只要包含类型集的接口就是通用接口\",{\"1\":{\"289\":1}}],[\"只要\",{\"1\":{\"49\":1}}],[\"只忽略\",{\"1\":{\"28\":1}}],[\"只删除服务器上的文件\",{\"1\":{\"27\":1}}],[\"忽略大小写相等\",{\"0\":{\"1401\":1}}],[\"忽略不安全连接并且这个需要使用token登入\",{\"1\":{\"1235\":1}}],[\"忽略\",{\"1\":{\"28\":3}}],[\"忽略文件如何阅读\",{\"1\":{\"28\":1}}],[\"忽略提交\",{\"0\":{\"28\":1}}],[\"如需深究\",{\"1\":{\"1364\":1}}],[\"如需要设置响应头content\",{\"1\":{\"1133\":1}}],[\"如策略中所示\",{\"1\":{\"1266\":1}}],[\"如在策略中所示\",{\"1\":{\"1262\":1}}],[\"如在配置文件中需要获取http请求头\",{\"1\":{\"1133\":1}}],[\"如管理员\",{\"1\":{\"1241\":1}}],[\"如多租户\",{\"1\":{\"1239\":1}}],[\"如calico\",{\"1\":{\"1235\":1}}],[\"如chan<\",{\"1\":{\"419\":1}}],[\"如主机名\",{\"1\":{\"1222\":1}}],[\"如activemr或rabbitmq\",{\"1\":{\"1019\":1}}],[\"如高性能\",{\"1\":{\"961\":1}}],[\"如sql审核\",{\"1\":{\"901\":1}}],[\"如mysql\",{\"1\":{\"876\":1}}],[\"如member表上表示是否为enabled的会员的字段命\",{\"1\":{\"794\":1}}],[\"如图中的broker\",{\"1\":{\"1020\":1}}],[\"如图\",{\"1\":{\"805\":2}}],[\"如update\",{\"1\":{\"796\":1}}],[\"如uuid\",{\"1\":{\"653\":1}}],[\"如无特殊需求\",{\"1\":{\"794\":1}}],[\"如type\",{\"1\":{\"794\":2}}],[\"如存储转发\",{\"1\":{\"775\":1}}],[\"如日期\",{\"1\":{\"775\":1}}],[\"如文本生成\",{\"1\":{\"655\":1}}],[\"如文件关闭\",{\"1\":{\"514\":1}}],[\"如请求量\",{\"1\":{\"655\":1}}],[\"如docker\",{\"1\":{\"655\":1}}],[\"如唯一键\",{\"1\":{\"653\":1}}],[\"如消息id\",{\"1\":{\"653\":1}}],[\"如消息队列\",{\"1\":{\"639\":1}}],[\"如go的time\",{\"1\":{\"653\":1}}],[\"如gin会自己实现一个功能更强大的contex\",{\"1\":{\"546\":1}}],[\"如更新时间\",{\"1\":{\"653\":1}}],[\"如kafka\",{\"1\":{\"651\":1}}],[\"如寄存器\",{\"1\":{\"649\":1}}],[\"如加密\",{\"1\":{\"645\":1}}],[\"如抛出异常\",{\"1\":{\"645\":1}}],[\"如对象存储\",{\"1\":{\"644\":1}}],[\"如发送通知\",{\"1\":{\"644\":1}}],[\"如分布式缓存\",{\"1\":{\"644\":1}}],[\"如排行榜\",{\"1\":{\"641\":1}}],[\"如用户表\",{\"1\":{\"794\":1}}],[\"如用户信息\",{\"1\":{\"641\":2}}],[\"如用户系统\",{\"1\":{\"639\":1}}],[\"如增加索引\",{\"1\":{\"639\":1}}],[\"如商品的下单支付等业务操作\",{\"1\":{\"735\":1}}],[\"如商品详情页缓存中\",{\"1\":{\"639\":1}}],[\"如商品id或帖子id\",{\"1\":{\"638\":1}}],[\"如密码\",{\"1\":{\"638\":1}}],[\"如使用\",{\"1\":{\"636\":1}}],[\"如视频流\",{\"1\":{\"636\":1}}],[\"如设置\",{\"1\":{\"634\":1}}],[\"如内存\",{\"1\":{\"633\":1}}],[\"如内存管理\",{\"1\":{\"148\":1}}],[\"如根据订单状态\",{\"1\":{\"566\":1,\"638\":2}}],[\"如并发操作非并发安全的map就要用mutex加锁\",{\"1\":{\"556\":1}}],[\"如64位的cpu一次都是读取8字节\",{\"1\":{\"554\":1}}],[\"如是大量的gc会导致cpu毛刺\",{\"1\":{\"548\":1}}],[\"如数据库\",{\"1\":{\"634\":1}}],[\"如数据库或rpc服务等等\",{\"1\":{\"546\":1}}],[\"如数组\",{\"1\":{\"234\":1}}],[\"如切片\",{\"1\":{\"529\":1}}],[\"如资源清理\",{\"1\":{\"514\":1}}],[\"如for循环的i时\",{\"1\":{\"514\":1}}],[\"如x86架构有32位和64位\",{\"1\":{\"513\":1}}],[\"如<\",{\"1\":{\"419\":1}}],[\"如此一来输出的顺序将会无法确定\",{\"1\":{\"473\":1}}],[\"如此一来实现了读协程与写协程互斥\",{\"1\":{\"431\":1}}],[\"如此一来\",{\"1\":{\"324\":1,\"417\":1,\"418\":1,\"430\":1,\"449\":1}}],[\"如此一来就占用的内存就变为了16字节\",{\"1\":{\"273\":1}}],[\"如结构体\",{\"1\":{\"210\":1}}],[\"如下方式可以通过uintptr获得一个指针\",{\"1\":{\"1443\":1}}],[\"如下方的例子\",{\"1\":{\"471\":1}}],[\"如下是关于编码配置的细节\",{\"1\":{\"1302\":1}}],[\"如下是正确示例\",{\"1\":{\"239\":1}}],[\"如下这个图就很好的说明了b+的特点\",{\"1\":{\"805\":1}}],[\"如下面\",{\"1\":{\"515\":1}}],[\"如下面的例子\",{\"1\":{\"434\":1}}],[\"如下例\",{\"1\":{\"341\":1,\"416\":1,\"420\":1,\"457\":1}}],[\"如下的代码将会无法通过编译\",{\"1\":{\"339\":1}}],[\"如下的代码将无法通过编译\",{\"1\":{\"339\":1}}],[\"如下所图\",{\"1\":{\"324\":1}}],[\"如下所示\",{\"1\":{\"278\":1,\"281\":1,\"284\":1,\"300\":1,\"323\":1,\"324\":2,\"340\":1,\"351\":2,\"398\":1,\"462\":1,\"704\":1,\"981\":2,\"985\":3,\"986\":1,\"1175\":1,\"1415\":1,\"1417\":2,\"1420\":1}}],[\"如下\",{\"1\":{\"179\":1,\"223\":1,\"258\":2,\"267\":1,\"294\":1,\"299\":1,\"301\":1,\"337\":4,\"343\":1,\"344\":1,\"347\":1,\"368\":1,\"384\":1,\"421\":1,\"428\":1,\"429\":1,\"431\":1,\"434\":1,\"435\":1,\"471\":1,\"472\":1,\"473\":1,\"477\":1,\"740\":1,\"746\":1,\"767\":1,\"836\":1,\"1087\":1,\"1131\":2,\"1141\":1,\"1422\":1,\"1445\":1}}],[\"如下图所示\",{\"1\":{\"450\":1}}],[\"如下图\",{\"1\":{\"110\":1,\"1006\":1,\"1165\":2}}],[\"如https\",{\"1\":{\"145\":1}}],[\"如rfc\",{\"1\":{\"145\":2}}],[\"如\",{\"1\":{\"137\":1,\"158\":1,\"160\":1,\"166\":1,\"170\":1,\"498\":1,\"634\":6,\"635\":2,\"637\":2,\"638\":5,\"639\":4,\"641\":1,\"645\":3,\"651\":2,\"653\":2,\"655\":2,\"656\":3,\"794\":1,\"795\":1,\"822\":2,\"963\":1,\"1133\":1,\"1183\":1,\"1223\":1,\"1225\":1,\"1239\":1,\"1280\":2,\"1285\":1,\"1286\":1,\"1287\":1,\"1288\":1}}],[\"如互斥锁\",{\"1\":{\"124\":1}}],[\"如控制goroutine的函数\",{\"1\":{\"124\":1}}],[\"如服务器中的运算计数器\",{\"1\":{\"124\":1}}],[\"如上图\",{\"1\":{\"1165\":2}}],[\"如上图所示⼀个两个节点的kafka集群上拥有⼀个四个partition\",{\"1\":{\"1027\":1}}],[\"如上\",{\"1\":{\"58\":1}}],[\"如何让\",{\"1\":{\"1198\":1}}],[\"如何让别人合并你修改好的代码呢\",{\"1\":{\"53\":1}}],[\"如何选择合适的消息队列\",{\"0\":{\"1057\":1}}],[\"如何选择索引列的顺序\",{\"1\":{\"816\":1}}],[\"如何证明ik集成成功\",{\"0\":{\"741\":1}}],[\"如何证明安装成功es呢\",{\"1\":{\"736\":1}}],[\"如何去配置java\",{\"1\":{\"736\":1}}],[\"如何分割文件\",{\"1\":{\"633\":1}}],[\"如何判断一台服务器还是活的\",{\"1\":{\"621\":1,\"693\":1}}],[\"如何保证缓存一致性\",{\"1\":{\"621\":1,\"693\":1}}],[\"如何保证redis缓存和数据库的数据一致性\",{\"1\":{\"576\":1,\"648\":1}}],[\"如何理解\",{\"1\":{\"620\":1,\"692\":1}}],[\"如何理解微服务\",{\"1\":{\"576\":1,\"648\":1}}],[\"如何利用堆\",{\"1\":{\"620\":1,\"692\":1}}],[\"如何控制并发\",{\"1\":{\"618\":1,\"690\":1}}],[\"如何减少回表次数\",{\"1\":{\"614\":1,\"686\":1}}],[\"如何排查\",{\"1\":{\"614\":1,\"686\":1}}],[\"如何处理\",{\"1\":{\"614\":2,\"686\":2}}],[\"如何处理冲突\",{\"1\":{\"36\":1}}],[\"如何做到有状态\",{\"1\":{\"611\":1,\"683\":1}}],[\"如何确保数据一致性\",{\"1\":{\"610\":1,\"682\":1}}],[\"如何重新设计mysql\",{\"1\":{\"610\":1,\"682\":1}}],[\"如何进行数据持久化\",{\"1\":{\"610\":1,\"682\":1}}],[\"如何进行快速的模糊检索\",{\"1\":{\"585\":1,\"657\":1}}],[\"如何自己实现最终一致性\",{\"1\":{\"600\":1,\"672\":1}}],[\"如何优化这个sql\",{\"1\":{\"585\":1,\"657\":1}}],[\"如何避免锁被解锁\",{\"1\":{\"653\":1}}],[\"如何避免回表\",{\"1\":{\"604\":1,\"676\":1}}],[\"如何避免消息被重复消费\",{\"1\":{\"581\":1,\"653\":2}}],[\"如何避免当前线程加的锁\",{\"1\":{\"581\":1,\"653\":2}}],[\"如何解决死锁\",{\"1\":{\"585\":1,\"657\":1}}],[\"如何解决\",{\"1\":{\"577\":1,\"610\":1,\"649\":2,\"682\":1}}],[\"如何知道何时将数据库数据同步到缓存及同步的做法\",{\"1\":{\"576\":1,\"648\":1}}],[\"如何实现互相的权限验证和授权\",{\"1\":{\"620\":1,\"692\":1}}],[\"如何实现乐观锁\",{\"1\":{\"581\":1,\"653\":2}}],[\"如何实现\",{\"1\":{\"579\":1,\"620\":1,\"651\":2,\"692\":1}}],[\"如何实现的\",{\"1\":{\"576\":1,\"648\":1}}],[\"如何实现一个hashmap\",{\"1\":{\"569\":1,\"641\":2}}],[\"如何发现数据异常\",{\"1\":{\"576\":1,\"648\":1}}],[\"如何评估迁移异构数据库\",{\"1\":{\"576\":1,\"648\":1}}],[\"如何入手mysql的优化\",{\"1\":{\"573\":1,\"645\":2}}],[\"如何来优化它或者现有的机制是如何做的\",{\"1\":{\"573\":1,\"645\":2}}],[\"如何配置不提交呢\",{\"1\":{\"28\":1}}],[\"如果管道操作返回的值为空\",{\"1\":{\"1422\":1}}],[\"如果管道已关闭且缓冲区中的数据被消费完\",{\"1\":{\"633\":1}}],[\"如果管道已关闭且所有数据已被读取\",{\"1\":{\"633\":1}}],[\"如果管道已经关闭了\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"如果值为空的话\",{\"1\":{\"1422\":1}}],[\"如果值为nan\",{\"1\":{\"262\":1}}],[\"如果映射返回负值\",{\"1\":{\"1405\":1}}],[\"如果f是具有适当签名的函数\",{\"1\":{\"1337\":1}}],[\"如果结构体有json标签的话\",{\"1\":{\"1320\":1}}],[\"如果您的\",{\"1\":{\"1307\":1}}],[\"如果key为空\",{\"1\":{\"1302\":1}}],[\"如果key不存在\",{\"1\":{\"424\":1}}],[\"如果至少有一个策略匹配\",{\"1\":{\"1269\":1}}],[\"如果匹配策略结果p\",{\"1\":{\"1254\":1}}],[\"如果未定义eft\",{\"1\":{\"1252\":1}}],[\"如果未开启\",{\"1\":{\"444\":1}}],[\"如果init失败\",{\"1\":{\"1225\":1}}],[\"如果存在\",{\"1\":{\"1185\":1}}],[\"如果存储很大大对象\",{\"1\":{\"965\":1}}],[\"如果每天有几百g或者几个t的日志的话\",{\"1\":{\"1174\":1}}],[\"如果重启过程中报错如下异常\",{\"1\":{\"1171\":1}}],[\"如果重启后\",{\"1\":{\"813\":1}}],[\"如果a>b\",{\"1\":{\"1397\":1}}],[\"如果a节点挂了\",{\"1\":{\"1165\":1}}],[\"如果auth模块想要使用user模块中的代码只有两种办法\",{\"1\":{\"463\":1}}],[\"如果b上存储的是热点数据\",{\"1\":{\"1165\":1}}],[\"如果只是缓存\",{\"1\":{\"1165\":1}}],[\"如果只有一个协程使用肯定是没有任何问题的\",{\"1\":{\"434\":1}}],[\"如果我们要查找扩展之前的数据\",{\"1\":{\"1165\":1}}],[\"如果此缓存系统扩展\",{\"1\":{\"1165\":1}}],[\"如果此时令牌桶中没有令牌\",{\"1\":{\"1147\":1}}],[\"如果还是失败\",{\"1\":{\"1163\":1}}],[\"如果服务器访问的次数超过这个次数就会剔除服务\",{\"1\":{\"1163\":1}}],[\"如果服务器down掉了\",{\"1\":{\"1161\":1}}],[\"如果服务器运行正常的话\",{\"1\":{\"968\":1}}],[\"如果缓存区满了以后直接返回503异常\",{\"1\":{\"1158\":1}}],[\"如果上面两者规则都进行了配置\",{\"1\":{\"1158\":1}}],[\"如果上传过则跳过上传过程\",{\"1\":{\"634\":1}}],[\"如果区域存储耗尽\",{\"1\":{\"1152\":1}}],[\"如果请求的参数\",{\"1\":{\"1253\":1}}],[\"如果请求未完成或者请求不是一个范围请求的最后一部分\",{\"1\":{\"1133\":1}}],[\"如果请求成功\",{\"1\":{\"1133\":1}}],[\"如果请求来自管道通信\",{\"1\":{\"1133\":1}}],[\"如果请求中的主机头不可用\",{\"1\":{\"1133\":1}}],[\"如果请求中有参数\",{\"1\":{\"1133\":1}}],[\"如果请求一个topic时发现还没有创建\",{\"1\":{\"1029\":1}}],[\"如果都要占用端口都是80\",{\"1\":{\"1130\":1}}],[\"如果输入是\",{\"1\":{\"1084\":1}}],[\"如果出错\",{\"1\":{\"1078\":1}}],[\"如果出现了\",{\"1\":{\"1171\":1}}],[\"如果出现了all\",{\"1\":{\"814\":1}}],[\"如果出现了其他情况\",{\"1\":{\"437\":1}}],[\"如果出现需要java\",{\"1\":{\"736\":1}}],[\"如果出现\",{\"1\":{\"644\":1}}],[\"如果出现大量time\",{\"1\":{\"614\":1,\"686\":1}}],[\"如果出现类型不匹配的情况时\",{\"1\":{\"381\":1}}],[\"如果系统使用消息队列主要场景是处理在线业务\",{\"1\":{\"1057\":1}}],[\"如果系统出现服务宕机\",{\"1\":{\"655\":1}}],[\"如果后期进行二次开发\",{\"1\":{\"1053\":1}}],[\"如果允许两个消费者实例同\",{\"1\":{\"1027\":1}}],[\"如果往不存在的topic写数据\",{\"1\":{\"1024\":1}}],[\"如果既没指定partition\",{\"1\":{\"1023\":1}}],[\"如果链接master节点有密码\",{\"1\":{\"1010\":1}}],[\"如果自身作为从节点以后\",{\"1\":{\"1010\":1}}],[\"如果自己实现一个协程池\",{\"1\":{\"620\":1,\"692\":1}}],[\"如果某个topic有多个partition\",{\"1\":{\"1023\":1}}],[\"如果某个主节点失败\",{\"1\":{\"1006\":1}}],[\"如果某个数据列包含了许多重复的内容\",{\"1\":{\"811\":1}}],[\"如果超过半数以上的\",{\"1\":{\"998\":1}}],[\"如果超过了容量\",{\"1\":{\"633\":1}}],[\"如果进行数据恢复时\",{\"1\":{\"988\":1}}],[\"如果机器宕机重启\",{\"1\":{\"985\":1}}],[\"如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止\",{\"1\":{\"971\":3}}],[\"如果配置fail\",{\"1\":{\"1163\":1}}],[\"如果配置了连接密码\",{\"1\":{\"965\":1}}],[\"如果配置redis为守护进程方式运行\",{\"1\":{\"965\":1}}],[\"如果为负数会导致panic\",{\"1\":{\"1406\":1}}],[\"如果为空的话则使用默认的处理器\",{\"1\":{\"1335\":1}}],[\"如果为空\",{\"1\":{\"1165\":1,\"1307\":1}}],[\"如果为了节省cpu时间\",{\"1\":{\"965\":1,\"983\":1}}],[\"如果为null\",{\"1\":{\"814\":1}}],[\"如果指定为0\",{\"1\":{\"965\":1}}],[\"如果设置为0\",{\"1\":{\"965\":1}}],[\"如果设置为true\",{\"1\":{\"911\":1}}],[\"如果设置\",{\"1\":{\"965\":1,\"1151\":1}}],[\"如果设置的不合理\",{\"1\":{\"799\":1}}],[\"如果如果过程出错了\",{\"1\":{\"897\":1}}],[\"如果已经分配过了\",{\"1\":{\"870\":1}}],[\"如果用户请求还正在与nginx\",{\"1\":{\"1172\":1}}],[\"如果用down进行服务器标记就告诉当前服务器不可用的状态\",{\"1\":{\"1163\":1}}],[\"如果用false就是排除name\",{\"1\":{\"861\":1}}],[\"如果用了不释放那么对象池的使用将毫无意义\",{\"1\":{\"435\":1}}],[\"如果server已经过载\",{\"1\":{\"1156\":1}}],[\"如果select语句未使用到索引\",{\"1\":{\"819\":1}}],[\"如果slaveiorunning一直是connecting\",{\"1\":{\"823\":1}}],[\"如果1000在外\",{\"1\":{\"821\":1}}],[\"如果同时出现using\",{\"1\":{\"814\":1}}],[\"如果同时有require引用了相同版本的依赖\",{\"1\":{\"459\":1}}],[\"如果查询是基于分区表的话\",{\"1\":{\"814\":1}}],[\"如果查询中有某个列的范围查询\",{\"1\":{\"806\":1}}],[\"如果查询时关联列类型\",{\"1\":{\"794\":1}}],[\"如果条件不满足就会不停的寻道和发起io\",{\"1\":{\"800\":1}}],[\"如果表的字段数量超过几十个\",{\"1\":{\"798\":1}}],[\"如果表里已经存在key\",{\"1\":{\"795\":1}}],[\"如果小的循环在外层\",{\"1\":{\"821\":1}}],[\"如果小数位数设置为0\",{\"1\":{\"791\":1}}],[\"如果小于3就会一直阻塞等待\",{\"1\":{\"432\":1}}],[\"如果业务需要必须用\",{\"1\":{\"787\":1}}],[\"如果业务场景中没有分布式系统\",{\"1\":{\"637\":1}}],[\"如果语句不在查询缓存中\",{\"1\":{\"777\":1}}],[\"如果之前执行过\",{\"1\":{\"777\":1}}],[\"如果客户端持续有请求\",{\"1\":{\"776\":1}}],[\"如果客户端需要向服务端发送大文件\",{\"1\":{\"620\":1,\"692\":1}}],[\"如果对于消息队列的功能和性能要求不是很高\",{\"1\":{\"1057\":1}}],[\"如果对需求对性能要求非常高\",{\"1\":{\"1053\":1}}],[\"如果对表进行insert\",{\"1\":{\"811\":1}}],[\"如果对es的查询语法和概念不了解\",{\"1\":{\"755\":1}}],[\"如果对其添加元素的话\",{\"1\":{\"287\":1}}],[\"如果文件存在并且其大小\",{\"1\":{\"1307\":1}}],[\"如果文件存在并且小于\",{\"1\":{\"1307\":1}}],[\"如果文件不存在则创建文件\",{\"1\":{\"400\":1}}],[\"如果文档版本冲突继续执行\",{\"1\":{\"749\":1}}],[\"如果时区未指定\",{\"1\":{\"721\":1}}],[\"如果两个线程同时向mysql插入相同的数据\",{\"1\":{\"653\":1}}],[\"如果相同的消息再次消费\",{\"1\":{\"653\":1}}],[\"如果过期则删除\",{\"1\":{\"651\":1}}],[\"如果p不足\",{\"1\":{\"651\":1}}],[\"如果p的数量很少\",{\"1\":{\"651\":1}}],[\"如果切片的长度超出其容量\",{\"1\":{\"649\":1}}],[\"如果线程池已达到最大线程数\",{\"1\":{\"645\":1}}],[\"如果操作数据库的事务回滚\",{\"1\":{\"641\":1}}],[\"如果涉及到多个学校\",{\"1\":{\"639\":1}}],[\"如果商品信息过期\",{\"1\":{\"639\":1}}],[\"如果它们在堆上分配\",{\"1\":{\"635\":1}}],[\"如果当前\",{\"1\":{\"635\":1}}],[\"如果当前本地仓库不是从远程仓库克隆\",{\"1\":{\"58\":1}}],[\"如果多个同时设置\",{\"1\":{\"1029\":1}}],[\"如果多个\",{\"1\":{\"635\":1}}],[\"如果\",{\"1\":{\"635\":1,\"638\":1,\"644\":1,\"970\":1,\"981\":1,\"1063\":1,\"1307\":3}}],[\"如果测试运行时间超过\",{\"1\":{\"630\":1}}],[\"如果测试用例有几十上百个\",{\"1\":{\"494\":1}}],[\"如果十万个线程同时put\",{\"1\":{\"618\":1,\"690\":1}}],[\"如果满足\",{\"1\":{\"614\":1,\"686\":1}}],[\"如果满了\",{\"1\":{\"600\":1,\"672\":1}}],[\"如果主线程中有信息\",{\"1\":{\"606\":1,\"678\":1}}],[\"如果内存不够大了会选择使用什么方案来解决呢\",{\"1\":{\"597\":1,\"669\":1}}],[\"如果内存值与期望值相同\",{\"1\":{\"440\":1}}],[\"如果产生了过多的浮动垃圾\",{\"1\":{\"588\":1,\"660\":1}}],[\"如果让你对系统进行一个巡检\",{\"1\":{\"583\":1,\"655\":2}}],[\"如果采用最终一致性方案\",{\"1\":{\"576\":1,\"648\":1}}],[\"如果数据量很大\",{\"1\":{\"1057\":1}}],[\"如果数据量差不多\",{\"1\":{\"821\":1}}],[\"如果数据表与其他表相关联\",{\"1\":{\"653\":1}}],[\"如果数据库更新成功但缓存删除失败\",{\"1\":{\"644\":1}}],[\"如果数据库更新完成了\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"如果数据是由web采集的话\",{\"1\":{\"326\":1,\"327\":1}}],[\"如果实现分布式锁呢\",{\"1\":{\"566\":1,\"638\":1}}],[\"如果实例化过程比较复杂\",{\"1\":{\"268\":1}}],[\"如果redis抢单成功但是后面的逻辑失败怎么办\",{\"1\":{\"566\":1,\"638\":2}}],[\"如果示例函数内含有类似上面例子中的\",{\"1\":{\"502\":1}}],[\"如果在一个网络下\",{\"1\":{\"1198\":1}}],[\"如果在这个时间内\",{\"1\":{\"1161\":1}}],[\"如果在虚拟机安装\",{\"1\":{\"1121\":1}}],[\"如果在云服务器安装\",{\"1\":{\"1121\":1}}],[\"如果在消费者组中动态\",{\"1\":{\"1027\":1}}],[\"如果在规定的时间内\",{\"1\":{\"997\":1}}],[\"如果在数据量较少的情况下\",{\"1\":{\"981\":1}}],[\"如果在explain中看到索引合并\",{\"1\":{\"816\":1}}],[\"如果在连接被断开之后\",{\"1\":{\"776\":1}}],[\"如果在协程外层没有\",{\"1\":{\"635\":1}}],[\"如果在\",{\"1\":{\"499\":1,\"635\":1,\"1163\":1}}],[\"如果该用例能够在\",{\"1\":{\"498\":1}}],[\"如果该key已存在\",{\"1\":{\"436\":1}}],[\"如果希望测试失败时终止测试\",{\"1\":{\"495\":1}}],[\"如果其中一个用例测试失败\",{\"1\":{\"495\":1}}],[\"如果其父目录不存在\",{\"1\":{\"402\":1}}],[\"如果以后需要对测试用例增加\",{\"1\":{\"494\":1}}],[\"如果传入一个空字符串\",{\"1\":{\"1396\":1}}],[\"如果传入的是非utf8字符串\",{\"1\":{\"477\":1}}],[\"如果传递的是指针\",{\"1\":{\"633\":1}}],[\"如果传递的是一个整型\",{\"1\":{\"287\":1}}],[\"如果将次文件传\",{\"1\":{\"1133\":1}}],[\"如果将图片全部存在数据库\",{\"1\":{\"792\":1}}],[\"如果将其以字节为单位反转后肯定是乱码\",{\"1\":{\"477\":1}}],[\"如果将set的参数换成c\",{\"1\":{\"302\":1}}],[\"如果单个ip在10ms内发送6个请求\",{\"1\":{\"1155\":1}}],[\"如果单个ip在非常短的时间内并发发送多个请求\",{\"1\":{\"1154\":1}}],[\"如果单次测试执行时间超过了时间间隔d\",{\"1\":{\"469\":1}}],[\"如果单纯的在结构体中混用值接收者和指针接收者的话无伤大雅\",{\"1\":{\"287\":1}}],[\"如果加上了\",{\"1\":{\"468\":1}}],[\"如果想去掉一级\",{\"1\":{\"1087\":1}}],[\"如果想永久生效\",{\"1\":{\"813\":1}}],[\"如果想根据测试类型再划分的更细一些也可以将测试类型为作为文件前缀\",{\"1\":{\"467\":1}}],[\"如果想要处理空的情况\",{\"1\":{\"1422\":1}}],[\"如果想要自定义结构体排序的话\",{\"1\":{\"1380\":1}}],[\"如果想要对结构体进行序列化与反序列化\",{\"1\":{\"1309\":1}}],[\"如果想要对一个文件写入数据\",{\"1\":{\"402\":1}}],[\"如果想要禁用缓存\",{\"1\":{\"468\":1}}],[\"如果想要在错误链中找到对应的值或类型\",{\"1\":{\"393\":1}}],[\"如果想要获取方法的参数和返回值细节\",{\"1\":{\"370\":1}}],[\"如果想要进行反射操作\",{\"1\":{\"348\":1}}],[\"如果想要了解更多关于泛型的一些设计理念和细节\",{\"1\":{\"345\":1}}],[\"如果想要了解更多关于泛型的实际案例\",{\"1\":{\"345\":1}}],[\"如果想要关闭这个检查\",{\"1\":{\"300\":1}}],[\"如果想要更详细的介绍\",{\"1\":{\"296\":1}}],[\"如果想要清空切片\",{\"1\":{\"251\":1}}],[\"如果想要交换两个变量的值\",{\"1\":{\"208\":1}}],[\"如果想要搭建一个可以控制权限的服务器需要借助第三方软件\",{\"1\":{\"42\":1}}],[\"如果符合在下载模块校验时不会走checksum的公共数据库\",{\"1\":{\"461\":1}}],[\"如果符合规则在下载模块时不会走goproxy\",{\"1\":{\"461\":1}}],[\"如果模块名符合规则表示该模块为私有模块\",{\"1\":{\"461\":1}}],[\"如果哈希值不一致\",{\"1\":{\"460\":1}}],[\"如果一致的话\",{\"1\":{\"460\":1}}],[\"如果一个索引包含\",{\"1\":{\"817\":1}}],[\"如果一个p没有工作要做\",{\"1\":{\"654\":1}}],[\"如果一个线程试图对同一个mutex加锁\",{\"1\":{\"654\":1}}],[\"如果一个变量的地址会在函数外部使用\",{\"1\":{\"635\":1}}],[\"如果一个变量仅在函数内部使用并且不逃逸到函数外部\",{\"1\":{\"635\":1}}],[\"如果一个类型的底层类型属于该类型集\",{\"1\":{\"340\":1}}],[\"如果一个接口包含多个非空类型集\",{\"1\":{\"340\":1}}],[\"如果一个问题需要根据不同类型做出不同的逻辑\",{\"1\":{\"339\":1}}],[\"如果一个本该分配到栈上的变量被分配到了堆上\",{\"1\":{\"316\":1}}],[\"如果本地计算出的哈希值与查询得到的结果不一致\",{\"1\":{\"460\":1}}],[\"如果本工作区库误删\",{\"1\":{\"55\":1}}],[\"如果替换模块具有\",{\"1\":{\"459\":1}}],[\"如果原有项目引用了老版本\",{\"1\":{\"459\":1}}],[\"如果版本升级到了v2\",{\"1\":{\"459\":1}}],[\"如果这个表中记录的唯一性越高说明越适合做索引\",{\"1\":{\"815\":1}}],[\"如果这个例子中的表\",{\"1\":{\"780\":1}}],[\"如果这是一个课题\",{\"1\":{\"644\":1}}],[\"如果这些数据结构太过庞大\",{\"1\":{\"434\":1}}],[\"如果这样做的话\",{\"1\":{\"306\":1}}],[\"如果直接传入读写互斥锁会导致写协程重复解锁的问题\",{\"1\":{\"432\":1}}],[\"如果直到子协程退出都没有恢复panic\",{\"1\":{\"396\":1}}],[\"如果获得了写锁\",{\"1\":{\"431\":1}}],[\"如果获得了读锁\",{\"1\":{\"431\":1}}],[\"如果创建了但从来不取消\",{\"1\":{\"428\":1}}],[\"如果创建了一个cancelctx\",{\"1\":{\"427\":1}}],[\"如果所有的消费者实例都在不同的消费者组\",{\"1\":{\"1027\":1}}],[\"如果所有的消费者实例都在同⼀个消费者组中\",{\"1\":{\"1027\":1}}],[\"如果所有的父级都没有实现canceler\",{\"1\":{\"427\":1}}],[\"如果所有case都不可用\",{\"1\":{\"421\":1}}],[\"如果父级实现了canceler\",{\"1\":{\"427\":1}}],[\"如果关闭过后\",{\"1\":{\"424\":1}}],[\"如果错误为nil的话那么就是打开成功\",{\"1\":{\"388\":1}}],[\"如果打开失败函数将会返回一个错误\",{\"1\":{\"388\":1}}],[\"如果返回reflect\",{\"1\":{\"368\":1}}],[\"如果返回的内存被引用了\",{\"1\":{\"300\":1}}],[\"如果开启了日志文件存储\",{\"1\":{\"1304\":1}}],[\"如果开启了日志控制台输出\",{\"1\":{\"1304\":1}}],[\"如果开启了ssl安全模式\",{\"1\":{\"1133\":1}}],[\"如果开启了cgo\",{\"1\":{\"307\":1}}],[\"如果开发一个数学工具包\",{\"1\":{\"337\":1}}],[\"如果别人用了你的库\",{\"1\":{\"314\":1}}],[\"如果c结构体的某些成员包含bit\",{\"1\":{\"307\":1}}],[\"如果c代码非常多\",{\"1\":{\"298\":1}}],[\"如果不使用slicedata\",{\"1\":{\"1445\":1}}],[\"如果不懂什么是内存对齐\",{\"1\":{\"1442\":1}}],[\"如果不加nodelay参数\",{\"1\":{\"1155\":1}}],[\"如果不填写就是全局的\",{\"1\":{\"1096\":1}}],[\"如果不设置\",{\"1\":{\"1029\":1}}],[\"如果不\",{\"1\":{\"965\":1}}],[\"如果不开启\",{\"1\":{\"965\":1}}],[\"如果不指定\",{\"1\":{\"858\":1}}],[\"如果不是则跳过\",{\"1\":{\"780\":1}}],[\"如果不匹配\",{\"1\":{\"653\":1}}],[\"如果不满足\",{\"1\":{\"614\":1,\"686\":1}}],[\"如果不遵循此规则的模块被称为不规范模块\",{\"1\":{\"459\":1}}],[\"如果不成功的话就不断循环\",{\"1\":{\"440\":1}}],[\"如果不采用对象池的话1000个协程将会创建1000个对象\",{\"1\":{\"435\":1}}],[\"如果不采用对象池\",{\"1\":{\"435\":1}}],[\"如果不将其捕获的话\",{\"1\":{\"394\":1}}],[\"如果不存在热点数据的时候\",{\"1\":{\"1165\":1}}],[\"如果不存在\",{\"1\":{\"369\":2}}],[\"如果不去手动释放\",{\"1\":{\"310\":1}}],[\"如果不导入的话就无法使用go导出的函数\",{\"1\":{\"300\":1}}],[\"如果不嫌麻烦\",{\"1\":{\"28\":1}}],[\"如果尝试对不可比较的类型进行比较\",{\"1\":{\"294\":1}}],[\"如果底层的类型是不可比较的\",{\"1\":{\"294\":1}}],[\"如果类型不匹配的话则为false\",{\"1\":{\"294\":1}}],[\"如果类型实现了string接口也会调用string方法来获取其字符串表现形式\",{\"1\":{\"219\":1}}],[\"如果t实现了一个接口\",{\"1\":{\"289\":1}}],[\"如果是用于展示在前端的html文件\",{\"1\":{\"1428\":1}}],[\"如果是多维切片\",{\"1\":{\"1417\":1}}],[\"如果是多机设置\",{\"1\":{\"1010\":1}}],[\"如果是将redis作为存储系统\",{\"1\":{\"1165\":1}}],[\"如果是在并发非常大的情况下\",{\"1\":{\"1165\":1}}],[\"如果是在同一局域网内\",{\"1\":{\"1164\":1}}],[\"如果是直接访问\",{\"1\":{\"1133\":1}}],[\"如果是云服务器\",{\"1\":{\"1078\":1}}],[\"如果是云服务器记得开放\",{\"1\":{\"1075\":1}}],[\"如果是小公司\",{\"1\":{\"1072\":1}}],[\"如果是explain\",{\"1\":{\"817\":1}}],[\"如果是子查询\",{\"1\":{\"814\":1}}],[\"如果是子测试中使用将会panic\",{\"1\":{\"472\":1}}],[\"如果是则将这行存在结果集中\",{\"1\":{\"780\":1}}],[\"如果是mysql\",{\"1\":{\"776\":1}}],[\"如果是复杂搜索\",{\"1\":{\"735\":1}}],[\"如果是有事务要求\",{\"1\":{\"735\":1}}],[\"如果是两个应用都要写数据库\",{\"1\":{\"606\":1,\"678\":1}}],[\"如果是要开一个线程来同步数据库从而解决逻辑过期的话\",{\"1\":{\"597\":1,\"669\":1}}],[\"如果是reflect\",{\"1\":{\"360\":1}}],[\"如果是自动采集\",{\"1\":{\"328\":1}}],[\"如果是手动采集的数据\",{\"1\":{\"328\":1}}],[\"如果是一个切片\",{\"1\":{\"287\":1}}],[\"如果是从about\",{\"1\":{\"65\":1}}],[\"如果使用常量\",{\"1\":{\"1274\":1}}],[\"如果使用的是myisam存储引擎\",{\"1\":{\"798\":1,\"799\":1}}],[\"如果使用\",{\"1\":{\"638\":1}}],[\"如果使用互斥锁\",{\"1\":{\"431\":1}}],[\"如果使用if\",{\"1\":{\"393\":1}}],[\"如果使用闭包而不是延迟调用\",{\"1\":{\"285\":1}}],[\"如果使用分支\",{\"1\":{\"30\":1}}],[\"如果签名不一样那就是两个完全不同的函数\",{\"1\":{\"278\":1}}],[\"如果没有扩展名\",{\"1\":{\"1307\":1}}],[\"如果没有默认jsonencoder\",{\"1\":{\"1302\":1}}],[\"如果没有策略匹配请求\",{\"1\":{\"1269\":1}}],[\"如果没有设置\",{\"1\":{\"1151\":1}}],[\"如果没有设置则一直为false\",{\"1\":{\"424\":1}}],[\"如果没有增加前缀\",{\"1\":{\"1093\":1}}],[\"如果没有指定partition\",{\"1\":{\"1023\":1}}],[\"如果没有同时出现using\",{\"1\":{\"814\":1}}],[\"如果没有修改\",{\"1\":{\"656\":1}}],[\"如果没有且当前线程池中的线程数小于最大线程数\",{\"1\":{\"645\":1}}],[\"如果没有\",{\"1\":{\"477\":1,\"780\":1,\"1307\":1}}],[\"如果没有缓冲区则会导致死锁\",{\"1\":{\"415\":1}}],[\"如果没有waitgroup来阻塞父协程的话\",{\"1\":{\"396\":1}}],[\"如果没有请看本章节\",{\"1\":{\"14\":1}}],[\"如果没能按照正确的格式书写结构体\",{\"1\":{\"272\":1}}],[\"如果参数只有简单几个\",{\"1\":{\"269\":1}}],[\"如果冲突会触发fatal\",{\"1\":{\"266\":1}}],[\"如果要从外部访问\",{\"1\":{\"1232\":1}}],[\"如果要从物理上删除\",{\"1\":{\"1029\":1}}],[\"如果要跨网络操作别人\",{\"1\":{\"1198\":1}}],[\"如果要加大预留量\",{\"1\":{\"791\":1}}],[\"如果要依赖一些参数做做一些权限的控制的话\",{\"1\":{\"597\":1,\"669\":1}}],[\"如果要取消的话应该怎么设计呢\",{\"1\":{\"592\":1,\"664\":1}}],[\"如果要实现一个排行榜\",{\"1\":{\"566\":1,\"638\":1}}],[\"如果要在c和go之间传递指针\",{\"1\":{\"310\":1}}],[\"如果要导出go函数\",{\"1\":{\"300\":1}}],[\"如果要转换的字符串或字节切片很大\",{\"1\":{\"254\":1}}],[\"如果要对转换后的切片进行修改\",{\"1\":{\"241\":1}}],[\"如果事先就知道了要存放数据的长度\",{\"1\":{\"238\":1}}],[\"如果仅仅只是声明而不指定值\",{\"1\":{\"211\":1}}],[\"如果需要之一开启此功能\",{\"1\":{\"1133\":1}}],[\"如果需要严格的控制topic的创建\",{\"1\":{\"1029\":1}}],[\"如果需要同步函数或者存储过程\",{\"1\":{\"822\":2}}],[\"如果需要对以最对象进行索引\",{\"1\":{\"729\":1}}],[\"如果需要数据库操作\",{\"1\":{\"655\":1}}],[\"如果需要设计数据库表\",{\"1\":{\"638\":1}}],[\"如果需要\",{\"1\":{\"145\":1}}],[\"如果分支已经修改过\",{\"1\":{\"58\":1}}],[\"如果担心某个优秀的项目别人突然有一天不开源了\",{\"1\":{\"53\":1}}],[\"如果你打算修改数据\",{\"1\":{\"1448\":1}}],[\"如果你是1\",{\"1\":{\"1375\":1}}],[\"如果你是es8\",{\"1\":{\"701\":1}}],[\"如果你要指派给conumer就填写\",{\"1\":{\"1096\":1}}],[\"如果你使用的redis版本号为7\",{\"1\":{\"909\":1}}],[\"如果你使用的redis版本号为6\",{\"1\":{\"909\":1}}],[\"如果你不会请先自行学习\",{\"1\":{\"889\":1}}],[\"如果你没有创建请创建\",{\"1\":{\"1135\":1}}],[\"如果你没有mongo基础\",{\"1\":{\"827\":1}}],[\"如果你没有后续的动作\",{\"1\":{\"776\":1}}],[\"如果你没有手动指定id\",{\"1\":{\"64\":1}}],[\"如果你对elasticsearch并不了解\",{\"1\":{\"700\":1}}],[\"如果你对逃逸分析的细节感兴趣\",{\"1\":{\"317\":1}}],[\"如果你考虑针对评论进行回复的话\",{\"1\":{\"566\":1,\"638\":2}}],[\"如果你能接受go的错误处理\",{\"1\":{\"388\":1}}],[\"如果你想获取所有的redis服务配置的信息使用\",{\"1\":{\"968\":1}}],[\"如果你想使用orm\",{\"1\":{\"889\":1}}],[\"如果你想捕获子协程的\",{\"1\":{\"635\":1}}],[\"如果你想要进行微服务开发\",{\"1\":{\"330\":1}}],[\"如果你想要在网页中下载数据文件\",{\"1\":{\"324\":1}}],[\"如果你想以多种方式实例化结构体\",{\"1\":{\"268\":1}}],[\"如果你觉得在传递切片或map时会复制大量的内存\",{\"1\":{\"279\":1}}],[\"如果你真的将语法篇和进阶篇都仔细阅读完了\",{\"1\":{\"329\":1}}],[\"如果你真的想通过此种方法来节省内存\",{\"1\":{\"273\":1}}],[\"如果你真的这么做了\",{\"1\":{\"189\":1}}],[\"如果你学过c系语言\",{\"1\":{\"221\":1}}],[\"如果你的项目设置了base路径\",{\"1\":{\"65\":1}}],[\"如果你的项目达到一个重要的阶段\",{\"1\":{\"37\":1}}],[\"如果你掌握并熟练使用了命令行模式操作git\",{\"1\":{\"55\":1}}],[\"如果你watch\",{\"1\":{\"53\":1}}],[\"如果有任何拒绝\",{\"1\":{\"1254\":1}}],[\"如果有一个策略匹配到允许的结果\",{\"1\":{\"1254\":1}}],[\"如果有一个软件能记录我们对文档的所有修改\",{\"1\":{\"9\":1}}],[\"如果有⼀个4个分区的主题\",{\"1\":{\"1027\":1}}],[\"如果有指定\",{\"1\":{\"1023\":1}}],[\"如果有权限\",{\"1\":{\"780\":1}}],[\"如果有大佬知道\",{\"1\":{\"603\":1,\"675\":1}}],[\"如果有多个调用者同时要求相同资源\",{\"1\":{\"988\":1}}],[\"如果有多个需要逐一处理\",{\"1\":{\"36\":1}}],[\"如果有多组数据狠起来就不是很直观\",{\"1\":{\"474\":1}}],[\"如果有几十万个协程或者说创建该对象的成本十分的高昂\",{\"1\":{\"435\":1}}],[\"如果有的话也建议通过网络通信来代替\",{\"1\":{\"300\":1}}],[\"如果有包名重复了\",{\"1\":{\"175\":1}}],[\"如果有100篇文章就要编写一百篇与之对应的静态网页\",{\"1\":{\"110\":1}}],[\"有很多实现\",{\"1\":{\"1302\":1}}],[\"有三种方式\",{\"1\":{\"1232\":1}}],[\"有三个参数\",{\"1\":{\"440\":1}}],[\"有的程序猿的恶意代码就不能防止了\",{\"1\":{\"1198\":1}}],[\"有如下参数\",{\"1\":{\"1161\":1}}],[\"有4个请求被放到burst队列当中\",{\"1\":{\"1156\":1}}],[\"有点类似于app一样\",{\"1\":{\"1181\":1}}],[\"有点像队列的先进先出\",{\"1\":{\"1149\":1}}],[\"有点减少停顿时间\",{\"1\":{\"552\":1}}],[\"有优秀的第三方kafka\",{\"1\":{\"1055\":1}}],[\"有可能在程序crash时丢掉未提交的offset\",{\"1\":{\"1047\":1}}],[\"有可能会出现回收赶不上分配的情况\",{\"1\":{\"588\":1,\"660\":1}}],[\"有可能会影响的s1的数据\",{\"1\":{\"250\":1}}],[\"有利于理解kafka的生产机制\",{\"1\":{\"1020\":1}}],[\"有利于数据的查询速度\",{\"1\":{\"817\":1}}],[\"有不同的ip了\",{\"1\":{\"1011\":1}}],[\"有哨兵为啥还有集群\",{\"1\":{\"1005\":1}}],[\"有多种类型的资源\",{\"1\":{\"1263\":1}}],[\"有多少次更新操作\",{\"1\":{\"965\":1}}],[\"有多个引用时可以使用括号括起来\",{\"1\":{\"459\":1}}],[\"有独立ip\",{\"1\":{\"822\":1}}],[\"有关protobuf的讲解可以前往protobuf\",{\"1\":{\"1321\":1}}],[\"有关es\",{\"1\":{\"702\":1}}],[\"有关\",{\"1\":{\"639\":1}}],[\"有效括号\",{\"1\":{\"638\":1}}],[\"有固定大小的缓冲区\",{\"1\":{\"635\":1}}],[\"有时为了避免不合理的索引使用\",{\"1\":{\"633\":1}}],[\"有时候要进行反三范式操作\",{\"1\":{\"799\":1}}],[\"有时候我们需要牺牲数据的冗余度来换取数据处理的效率\",{\"1\":{\"793\":1}}],[\"有时候我们需要分析程序整体的cpu占用\",{\"1\":{\"315\":1}}],[\"有时候我们一些文件是不需要提交的比如说idea\",{\"1\":{\"28\":1}}],[\"有时候你并不想让别人访问某一个类型\",{\"1\":{\"174\":1}}],[\"有哪些数据结构\",{\"1\":{\"621\":1,\"693\":1}}],[\"有哪些区\",{\"1\":{\"606\":1,\"678\":1}}],[\"有自己写一个类加载器吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"有自动垃圾回收机制\",{\"1\":{\"152\":1}}],[\"有没有执行查询的权限\",{\"1\":{\"780\":1}}],[\"有没有难一点的功能\",{\"1\":{\"625\":1,\"697\":1}}],[\"有没有主动去了解过一些新的技术\",{\"1\":{\"606\":1,\"678\":1}}],[\"有没有了解过redis的集群\",{\"1\":{\"598\":1,\"670\":1}}],[\"有没有看过源码\",{\"1\":{\"595\":1,\"667\":1}}],[\"有没有不过期一直生效的情况\",{\"1\":{\"576\":1,\"648\":1}}],[\"有遇到过非双亲委派模型的场景吗\",{\"1\":{\"592\":1,\"664\":1}}],[\"有个场景你了解吗\",{\"1\":{\"588\":1,\"660\":1}}],[\"有100个并发线程\",{\"1\":{\"582\":1,\"654\":3}}],[\"有序\",{\"1\":{\"1025\":1}}],[\"有序集成员按分数值递减\",{\"1\":{\"974\":1}}],[\"有序集合中对指定成员的分数加上增量\",{\"1\":{\"974\":1}}],[\"有序集合zset\",{\"0\":{\"974\":1}}],[\"有序集合\",{\"0\":{\"946\":1},\"1\":{\"638\":1,\"641\":1,\"651\":1,\"961\":1}}],[\"有序双向链表可以通过从头或尾部查找来提高查询效率\",{\"1\":{\"636\":1}}],[\"有序双向链表如何高效查询\",{\"1\":{\"564\":1,\"636\":2}}],[\"有序列表的底层结构\",{\"1\":{\"580\":1,\"652\":1}}],[\"有何问题\",{\"1\":{\"579\":1,\"651\":1}}],[\"有无使用到链路观测\",{\"1\":{\"579\":1,\"651\":1}}],[\"有过期的话多久过期\",{\"1\":{\"576\":1,\"648\":1}}],[\"有则返回值和true\",{\"1\":{\"558\":1}}],[\"有值则正常返回\",{\"1\":{\"535\":1}}],[\"有什么解决办法呢\",{\"1\":{\"1156\":1}}],[\"有什么补偿的机制吗\",{\"1\":{\"597\":1,\"669\":1}}],[\"有什么区别\",{\"1\":{\"592\":1,\"637\":1,\"664\":1}}],[\"有什么优化思路\",{\"1\":{\"581\":1,\"653\":1}}],[\"有什么原因不使用最终一致性方案\",{\"1\":{\"576\":1,\"648\":1}}],[\"有什么编程语言的特性决定了他可以用反射吗\",{\"1\":{\"573\":1,\"645\":1}}],[\"有什么特性\",{\"1\":{\"535\":1}}],[\"有什么好处\",{\"0\":{\"522\":1},\"1\":{\"584\":1,\"618\":1,\"656\":1,\"690\":1}}],[\"有趣的输入指的是该输入能够将代码覆盖率扩大到现有语料库所能覆盖的范围之外\",{\"1\":{\"477\":1}}],[\"有趣\",{\"1\":{\"477\":1}}],[\"有助于后续生成随机的测试数据\",{\"1\":{\"477\":1}}],[\"有着非常多关于它的详细信息\",{\"1\":{\"453\":1}}],[\"有且仅有一个返回值\",{\"1\":{\"420\":1}}],[\"有且只有一种方法\",{\"1\":{\"414\":1}}],[\"有缓冲io读写包\",{\"1\":{\"1308\":1}}],[\"有缓冲channel实现\",{\"1\":{\"582\":1,\"654\":2}}],[\"有缓冲的\",{\"1\":{\"561\":1,\"617\":1,\"633\":2,\"689\":1}}],[\"有缓冲\",{\"0\":{\"417\":1},\"1\":{\"535\":1,\"633\":1,\"635\":1}}],[\"有些请求占用的时间很长\",{\"1\":{\"1167\":1}}],[\"有些系统要迁移需要修改大量代码\",{\"1\":{\"1054\":1}}],[\"有些没有对齐会报错\",{\"1\":{\"513\":1}}],[\"有些比较古老的依赖包可能没有go\",{\"1\":{\"460\":1}}],[\"有些时候使用defer来关闭管道可能会更好\",{\"1\":{\"414\":1}}],[\"有些情况下需要将error类型的错误转换为具体的错误实现类型\",{\"1\":{\"393\":1}}],[\"有这么一句玩笑话\",{\"1\":{\"388\":1}}],[\"有错误就处理\",{\"1\":{\"388\":1}}],[\"有泛型的加持\",{\"1\":{\"344\":1}}],[\"有许多著名项目都是基于cobra\",{\"1\":{\"335\":1}}],[\"有越来越多的企业转到go这个方向\",{\"1\":{\"333\":1}}],[\"有几个点要注意\",{\"1\":{\"327\":1}}],[\"有两种方案\",{\"1\":{\"776\":1}}],[\"有两种方式进行分析\",{\"1\":{\"325\":1}}],[\"有两种解决办法\",{\"1\":{\"340\":1}}],[\"有两个\",{\"1\":{\"1027\":1}}],[\"有两个对外暴露的方法walk和say\",{\"1\":{\"291\":1}}],[\"有两个int类型的参数a\",{\"1\":{\"278\":1}}],[\"有了解过注解的原理吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"有了解过其他消息队列吗\",{\"1\":{\"565\":1,\"637\":2}}],[\"有了自己的地址\",{\"1\":{\"306\":1}}],[\"有了实现之后\",{\"1\":{\"293\":1}}],[\"有了这些服务端语言的加持这样就可以完成一个静态网页到动态网页的转化\",{\"1\":{\"110\":1}}],[\"有仅有一种循环语句\",{\"1\":{\"232\":1}}],[\"有符号int最大可以支持到约22亿\",{\"1\":{\"791\":1}}],[\"有符号的32位整数\",{\"1\":{\"720\":2}}],[\"有符号的16位整数\",{\"1\":{\"720\":1}}],[\"有符号的8位整数\",{\"1\":{\"720\":1}}],[\"有符号整数类型的并集就是signedint\",{\"1\":{\"340\":1}}],[\"有符号\",{\"1\":{\"197\":4}}],[\"有一个需要注意的点是\",{\"1\":{\"459\":1}}],[\"有一个tag就足矣\",{\"1\":{\"449\":1}}],[\"有一个规则\",{\"1\":{\"206\":1}}],[\"有一点需要稍微注意下\",{\"1\":{\"179\":1}}],[\"有一些商用的版本控制系统\",{\"1\":{\"12\":1}}],[\"有丰富的第三方库\",{\"1\":{\"169\":1}}],[\"有垃圾回收机制\",{\"1\":{\"164\":1}}],[\"有限的消费者goroutine池或无限制的goroutine池\",{\"1\":{\"137\":1}}],[\"有用\",{\"1\":{\"127\":1}}],[\"历史版本还在\",{\"1\":{\"26\":1}}],[\"其类型为\",{\"1\":{\"1443\":1}}],[\"其类型都是\",{\"1\":{\"215\":1}}],[\"其含有非常多的时间操作的方法\",{\"1\":{\"1429\":1}}],[\"其返回的数据类型是time结构体\",{\"1\":{\"1429\":1}}],[\"其返回值是一个空结构体类型的只读管道\",{\"1\":{\"424\":1}}],[\"其返回值是一个只读的管道\",{\"1\":{\"421\":1}}],[\"其目的是为了复用某一个模板而用的\",{\"1\":{\"1427\":1}}],[\"其作用域仅限于with语句内\",{\"1\":{\"1422\":1}}],[\"其结果为\",{\"1\":{\"1420\":1,\"1421\":1}}],[\"其结构图如下所示\",{\"1\":{\"996\":1}}],[\"其语法如下\",{\"1\":{\"1418\":1}}],[\"其分隔次数由n决定\",{\"1\":{\"1408\":2}}],[\"其分布如图\",{\"1\":{\"1165\":1}}],[\"其支持的类型有\",{\"1\":{\"1324\":1}}],[\"其相较于xml更轻便的大小\",{\"1\":{\"1316\":1}}],[\"其下有很多子包\",{\"1\":{\"1308\":2}}],[\"其环分布如下\",{\"1\":{\"1165\":1}}],[\"其步骤为\",{\"1\":{\"1165\":1}}],[\"其原理是\",{\"1\":{\"1128\":1}}],[\"其原理就是锁+原子操作\",{\"1\":{\"434\":1}}],[\"其特点是占有内存少\",{\"1\":{\"1107\":1}}],[\"其将源代码以类bsd许可证的形式发布\",{\"1\":{\"1107\":1}}],[\"其所有的构件borker\",{\"1\":{\"1018\":1}}],[\"其具有以下几个特点\",{\"1\":{\"1018\":1}}],[\"其还原速度快\",{\"1\":{\"988\":1}}],[\"其默认存储文件为appendonly\",{\"1\":{\"984\":1}}],[\"其默认的值就是该类型的零值\",{\"1\":{\"343\":1}}],[\"其默认的遍历单位类型就是一个rune\",{\"1\":{\"258\":1}}],[\"其可用性要优于执行\",{\"1\":{\"981\":1}}],[\"其高度可扩展性和灵活的数据模型\",{\"1\":{\"843\":1}}],[\"其高性能查询和聚合操作可以实时分析和处理数据\",{\"1\":{\"843\":1}}],[\"其多样化的查询和索引机制可以满足各种复杂的查询需求\",{\"1\":{\"843\":1}}],[\"其灵活的数据模型和高性能优势\",{\"1\":{\"843\":1}}],[\"其附近的数据也通常会马上被使用\",{\"1\":{\"805\":1}}],[\"其次\",{\"1\":{\"789\":1}}],[\"其次才是值的比较\",{\"1\":{\"294\":1}}],[\"其架构是插件式的\",{\"1\":{\"775\":1}}],[\"其主要模式包括\",{\"1\":{\"654\":1}}],[\"其余部分无需改动\",{\"1\":{\"494\":1}}],[\"其后跟想要生成的参数\",{\"1\":{\"477\":1}}],[\"其后的参数也可以跟多个目录\",{\"1\":{\"468\":1}}],[\"其内容非常容易理解\",{\"1\":{\"463\":1}}],[\"其内部有如下一段代码\",{\"1\":{\"1411\":1}}],[\"其内部并不会进行排序操作\",{\"1\":{\"1381\":1}}],[\"其内部是使用了适配器类型handlerfunc\",{\"1\":{\"1337\":1}}],[\"其内部的字段基本上就代表了我们配置的步骤\",{\"1\":{\"1302\":1}}],[\"其内部的实现是计数器+信号量\",{\"1\":{\"422\":1}}],[\"其内部只包含一对键值对\",{\"1\":{\"426\":1}}],[\"其内部实现也很简单\",{\"1\":{\"393\":1}}],[\"其内部结构是不一样的\",{\"1\":{\"249\":1}}],[\"其它两个复用其内容并嵌入自定义的新内容\",{\"1\":{\"1428\":1}}],[\"其它两个基本上等同于go\",{\"1\":{\"465\":1}}],[\"其它的都是如此\",{\"1\":{\"1086\":1}}],[\"其它开发者便可以通过模块名来引入代码或安装命令行工具\",{\"1\":{\"449\":1}}],[\"其它人就可以通过模块名来下载你所编写的库\",{\"1\":{\"443\":1}}],[\"其提供了以下几种类型以供进行原子操作\",{\"1\":{\"438\":1}}],[\"其本身只实现了value方法\",{\"1\":{\"426\":1}}],[\"其本质上是无符号整型uint\",{\"1\":{\"351\":1}}],[\"其上手难度相对较小\",{\"1\":{\"411\":1}}],[\"其优点是可控\",{\"1\":{\"323\":1}}],[\"其功能等同于go中的类型别名\",{\"1\":{\"301\":1}}],[\"其底层类型为\",{\"1\":{\"285\":1}}],[\"其指向的元素为数组第二个元素\",{\"1\":{\"276\":1}}],[\"其一维和二维的长度早已固定\",{\"1\":{\"249\":1}}],[\"其值为nil\",{\"1\":{\"413\":1}}],[\"其值必须是可设置的\",{\"1\":{\"349\":1}}],[\"其值默认就是前一个的值\",{\"1\":{\"211\":1}}],[\"其值只能来源于\",{\"1\":{\"210\":1}}],[\"其定义见itu\",{\"1\":{\"124\":1}}],[\"其定义见bruce\",{\"1\":{\"124\":1}}],[\"其中也包括官方提供的标准库\",{\"1\":{\"1437\":1}}],[\"其中除了轮询和轮询权重外\",{\"1\":{\"1169\":1}}],[\"其中值可以是字符串\",{\"1\":{\"841\":1,\"887\":1}}],[\"其中文档是指一组键值\",{\"1\":{\"841\":1,\"887\":1}}],[\"其中\",{\"1\":{\"638\":1,\"639\":2,\"743\":1,\"1026\":1,\"1054\":1,\"1234\":1,\"1307\":1}}],[\"其中栈的大小通常是1mb\",{\"1\":{\"540\":1}}],[\"其中单引号中为正则表达式\",{\"1\":{\"482\":1}}],[\"其中一些概念的解释如下\",{\"1\":{\"477\":1}}],[\"其中geomoean为平均值\",{\"1\":{\"476\":1}}],[\"其中淡蓝色的表示go\",{\"1\":{\"458\":1}}],[\"其中的多路复用为了解决什么问题\",{\"1\":{\"620\":1,\"692\":1}}],[\"其中的direct表示代理下载失败后绕过代理缓存直接访问源代码仓库\",{\"1\":{\"451\":1}}],[\"其中的fmt\",{\"1\":{\"121\":1}}],[\"其中pointer原子类型支持泛型\",{\"1\":{\"438\":1}}],[\"其中newpointer函数和free方法的实现如下\",{\"1\":{\"435\":1}}],[\"其中tryrlock与trylock两个尝试加锁的操作是非阻塞式的\",{\"1\":{\"431\":1}}],[\"其中就包括指针运算\",{\"1\":{\"276\":1}}],[\"其中有5个字节是无用的\",{\"1\":{\"273\":1}}],[\"其中所有客户端都可以无缝同步\",{\"1\":{\"128\":1}}],[\"其中包含golang的到期时间\",{\"1\":{\"127\":1}}],[\"其中安装的过程中需要填写一个邮箱和用户名\",{\"1\":{\"13\":1}}],[\"其他情况都表示的是保留小数到后几位\",{\"1\":{\"1390\":1}}],[\"其他\",{\"0\":{\"1327\":1},\"1\":{\"1272\":1}}],[\"其他master节点使用master\",{\"1\":{\"1235\":1}}],[\"其他节点加入\",{\"1\":{\"1235\":1}}],[\"其他节点通过查询锁表来竞争资源\",{\"1\":{\"633\":1}}],[\"其他业务在其他网络\",{\"1\":{\"1198\":1}}],[\"其他命令\",{\"0\":{\"1189\":1},\"1\":{\"1188\":1}}],[\"其他参数\",{\"1\":{\"1151\":1}}],[\"其他关系数据库操作起来都是大差不大差的\",{\"1\":{\"890\":1}}],[\"其他代码结构参考本节即可\",{\"1\":{\"756\":1}}],[\"其他技术相关问题回答\",{\"1\":{\"656\":1}}],[\"其他组件\",{\"1\":{\"655\":1}}],[\"其他线程怎么获取主线程中的信息\",{\"1\":{\"606\":1,\"678\":1}}],[\"其他同学在之后也合入了三四个版本\",{\"1\":{\"573\":1,\"645\":1}}],[\"其他框架中的context\",{\"1\":{\"546\":1}}],[\"其他用例会继续运行测试\",{\"1\":{\"495\":1}}],[\"其他部分都是一样的的\",{\"1\":{\"494\":1}}],[\"其他常用的还有t\",{\"1\":{\"471\":1}}],[\"其他常量标识符\",{\"1\":{\"210\":1}}],[\"其他版本的同一个依赖照样可以正常访问\",{\"1\":{\"459\":1}}],[\"其他的使用起来都大差不差\",{\"1\":{\"707\":1}}],[\"其他的offer\",{\"1\":{\"590\":1,\"662\":1}}],[\"其他的类型的使用也是十分类似的\",{\"1\":{\"439\":1}}],[\"其他的逻辑\",{\"1\":{\"395\":1}}],[\"其他协程进行读操作时会阻塞\",{\"1\":{\"431\":1}}],[\"其他协程进行读操作时不会阻塞\",{\"1\":{\"431\":1}}],[\"其他协程进行写操作时会阻塞\",{\"1\":{\"431\":2}}],[\"其他协程想要访问就必须要先获得锁\",{\"1\":{\"430\":1}}],[\"其他子协程也就自然退出了\",{\"1\":{\"412\":1}}],[\"其他优秀的开源工具分类\",{\"0\":{\"125\":1}}],[\"其他人都会有公钥\",{\"1\":{\"83\":1}}],[\"其他可自行找资料学习非常类似\",{\"1\":{\"43\":1}}],[\"其实真正的校验都应该在服务端来完成才是最合理和最安全的\",{\"1\":{\"1288\":1}}],[\"其实也就是限流的含义\",{\"1\":{\"1163\":1}}],[\"其实就是\",{\"1\":{\"1086\":1,\"1087\":1}}],[\"其实就是优化数据的存储的结构\",{\"1\":{\"800\":1}}],[\"其实这也很好理解\",{\"1\":{\"1027\":1}}],[\"其实这些树最开始都是为了解决某种系统中\",{\"1\":{\"804\":1}}],[\"其实是所有value都存在于磁盘\",{\"1\":{\"965\":1}}],[\"其实1和11其实只是显示长度的却别而已\",{\"1\":{\"791\":1}}],[\"其实可以使用t\",{\"1\":{\"471\":1}}],[\"其实sync\",{\"1\":{\"434\":1}}],[\"其实现了sync\",{\"1\":{\"430\":1}}],[\"其实现是由底层的汇编指令ucomisd完成\",{\"1\":{\"261\":1}}],[\"其实go在其他领域也有不少的应用\",{\"1\":{\"335\":1}}],[\"其实接口内部可以看成是一个由\",{\"1\":{\"294\":1}}],[\"其实等价于\",{\"1\":{\"285\":1}}],[\"其实还是需要解引用\",{\"1\":{\"271\":1}}],[\"其实并不是字面量的长度\",{\"1\":{\"255\":1}}],[\"其实我们可以使用一些免费的远程仓库\",{\"1\":{\"43\":1}}],[\"其实只是删除了本地工作区的文件\",{\"1\":{\"25\":1}}],[\"直观\",{\"1\":{\"842\":1}}],[\"直播歌房后台研发工程师\",{\"1\":{\"575\":1,\"647\":1}}],[\"直线图\",{\"1\":{\"327\":1}}],[\"直接翻译的意思是\",{\"1\":{\"1278\":1}}],[\"直接进入命令终端\",{\"1\":{\"1189\":1}}],[\"直接进入下一次迭代\",{\"1\":{\"236\":1}}],[\"直接在docker中运行这个容器就行\",{\"1\":{\"1180\":1}}],[\"直接在安全组中\",{\"1\":{\"1078\":1}}],[\"直接在代码中使用pprof需要引入runtime\",{\"1\":{\"323\":1}}],[\"直接为每一个服务创建一个xxx\",{\"1\":{\"994\":1}}],[\"直接启动一个redis服务这是一个独立的redis服务\",{\"1\":{\"993\":1}}],[\"直接执行脚本\",{\"1\":{\"952\":1}}],[\"直接查询主键或者唯一索引\",{\"1\":{\"814\":1}}],[\"直接使用即可\",{\"1\":{\"1305\":1}}],[\"直接使用容器名来连接服务\",{\"1\":{\"1197\":1}}],[\"直接使用\",{\"1\":{\"725\":1}}],[\"直接回源到数据库\",{\"1\":{\"644\":1}}],[\"直接返回\",{\"1\":{\"634\":1}}],[\"直接返回错误\",{\"1\":{\"477\":1}}],[\"直接过滤掉\",{\"1\":{\"614\":1,\"686\":1}}],[\"直接用mysql实现多人抢单可以吗\",{\"1\":{\"566\":1,\"638\":2}}],[\"直接对外提供对应的操作\",{\"1\":{\"558\":1}}],[\"直接赋值底层是同一个数组\",{\"1\":{\"511\":1}}],[\"直接提供对应的文件名即可\",{\"1\":{\"400\":1}}],[\"直接忽略掉不处理程序也不会崩溃\",{\"1\":{\"388\":1}}],[\"直接的并入了自身\",{\"1\":{\"341\":1}}],[\"直接修改底层数组\",{\"1\":{\"250\":1}}],[\"直接访问即可\",{\"1\":{\"54\":1}}],[\"直接选中文件删除的话\",{\"1\":{\"25\":1}}],[\"直到用户的连接响应完毕才关闭\",{\"1\":{\"1172\":1}}],[\"直到用新的const重置\",{\"1\":{\"212\":1}}],[\"直到恢复运行状态\",{\"1\":{\"1435\":1}}],[\"直到恢复\",{\"1\":{\"1163\":1}}],[\"直到把最后一个字符发送给客户端后进行日志写入为止\",{\"1\":{\"1133\":1}}],[\"直到某个调用者试图修改资源的内容时\",{\"1\":{\"988\":1}}],[\"直到取到这个表的最后一行\",{\"1\":{\"780\":1}}],[\"直到找到匹配的\",{\"1\":{\"721\":1}}],[\"直到事务结束\",{\"1\":{\"656\":1}}],[\"直到执行mutex\",{\"1\":{\"654\":1}}],[\"直到队列中的任务执行完毕\",{\"1\":{\"645\":1}}],[\"直到接收方准备好接收数据\",{\"1\":{\"635\":1}}],[\"直到有\",{\"1\":{\"635\":1}}],[\"直到有其他协程向管道中写入数据才会继续读取数据\",{\"1\":{\"420\":1}}],[\"直到灰色集合为空\",{\"1\":{\"551\":1}}],[\"直到能检测到稳定的调用耗时\",{\"1\":{\"498\":1}}],[\"直到go1\",{\"1\":{\"442\":1}}],[\"直到成功\",{\"1\":{\"440\":1}}],[\"直到数据大于3\",{\"1\":{\"432\":1}}],[\"直到被唤醒\",{\"1\":{\"432\":1}}],[\"直到释放写锁\",{\"1\":{\"431\":1}}],[\"直到减为0\",{\"1\":{\"422\":1}}],[\"直到至少有一个case可用\",{\"1\":{\"421\":1}}],[\"直到缓冲区空出位置来\",{\"1\":{\"417\":1}}],[\"直到缓冲区没数据了\",{\"1\":{\"417\":1}}],[\"直到所有数据发送完毕\",{\"1\":{\"417\":1}}],[\"直到程序停止运行\",{\"1\":{\"396\":1}}],[\"直到\",{\"1\":{\"12\":1,\"165\":1,\"981\":1}}],[\"9406564584124654417656879286822137236505980e\",{\"1\":{\"1344\":1}}],[\"9版本\",{\"1\":{\"1218\":1}}],[\"9ab43d4cd786b8c79d78fd3bf3f05c6dfbd6f1665ca5bc9e74646f1d6f758508\",{\"1\":{\"1197\":1}}],[\"9a\",{\"1\":{\"1195\":1}}],[\"9d\",{\"1\":{\"1194\":1,\"1195\":1}}],[\"93\",{\"1\":{\"1195\":1}}],[\"9303\",{\"1\":{\"770\":1}}],[\"9302\",{\"1\":{\"769\":1,\"770\":1}}],[\"9301\",{\"1\":{\"768\":1,\"769\":1,\"770\":1}}],[\"937mi\",{\"1\":{\"476\":6}}],[\"9375\",{\"1\":{\"182\":1}}],[\"9201\",{\"1\":{\"744\":1,\"756\":1}}],[\"9200\",{\"1\":{\"702\":1,\"736\":1,\"741\":1,\"744\":1,\"756\":1,\"771\":2,\"1082\":1,\"1084\":1,\"1086\":2,\"1087\":2}}],[\"9s\",{\"1\":{\"477\":1}}],[\"9129452507276277\",{\"1\":{\"1362\":1}}],[\"91076\",{\"1\":{\"1306\":1}}],[\"91\",{\"1\":{\"477\":1}}],[\"9µ\",{\"1\":{\"476\":1}}],[\"9527671\",{\"1\":{\"477\":1}}],[\"952\",{\"1\":{\"476\":1}}],[\"953028750\",{\"1\":{\"476\":1}}],[\"953802700\",{\"1\":{\"476\":1}}],[\"95\",{\"1\":{\"258\":1,\"476\":3}}],[\"959中所述的ftp客户端\",{\"1\":{\"145\":1}}],[\"983c\",{\"1\":{\"1195\":1}}],[\"98\",{\"1\":{\"254\":1,\"476\":1,\"884\":1}}],[\"978213\",{\"1\":{\"476\":1}}],[\"974\",{\"1\":{\"476\":1}}],[\"97\",{\"1\":{\"254\":1}}],[\"96\",{\"1\":{\"254\":1,\"258\":1,\"1225\":1,\"1235\":1}}],[\"993\",{\"1\":{\"476\":1}}],[\"993764\",{\"1\":{\"476\":1}}],[\"99\",{\"1\":{\"245\":2,\"254\":1,\"302\":1,\"1003\":2,\"1376\":1,\"1377\":1,\"1379\":1}}],[\"999k\",{\"1\":{\"476\":2}}],[\"99999\",{\"1\":{\"1377\":1,\"1379\":1}}],[\"9999\",{\"1\":{\"475\":1,\"476\":8,\"1377\":1,\"1379\":1}}],[\"999\",{\"1\":{\"245\":4}}],[\"9092\",{\"1\":{\"1029\":1,\"1034\":12,\"1035\":1,\"1036\":1,\"1047\":4}}],[\"9090\",{\"1\":{\"327\":3}}],[\"900秒\",{\"1\":{\"965\":1}}],[\"900\",{\"1\":{\"965\":1,\"981\":2}}],[\"90\",{\"1\":{\"229\":5}}],[\"9k+\",{\"1\":{\"111\":1}}],[\"9\",{\"0\":{\"25\":1,\"26\":1,\"27\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"51\":2,\"52\":1,\"53\":1,\"54\":1},\"1\":{\"25\":1,\"58\":1,\"191\":1,\"221\":1,\"224\":2,\"233\":14,\"235\":3,\"236\":6,\"245\":4,\"246\":3,\"247\":7,\"248\":2,\"250\":10,\"276\":1,\"306\":1,\"318\":1,\"344\":3,\"375\":1,\"393\":1,\"412\":2,\"417\":2,\"420\":1,\"422\":1,\"430\":1,\"436\":2,\"453\":7,\"459\":8,\"471\":2,\"476\":2,\"498\":1,\"499\":1,\"500\":1,\"600\":1,\"601\":1,\"630\":1,\"633\":1,\"634\":1,\"635\":2,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"641\":1,\"644\":1,\"645\":1,\"649\":1,\"651\":1,\"653\":1,\"672\":1,\"673\":1,\"702\":1,\"706\":1,\"794\":1,\"861\":1,\"863\":1,\"965\":1,\"967\":2,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"1003\":1,\"1218\":1,\"1321\":1,\"1443\":1,\"1444\":1}}],[\"进去很多东西都没有比如网络\",{\"1\":{\"1218\":1}}],[\"进去具体做啥\",{\"1\":{\"520\":1}}],[\"进阶版的cluster优势\",{\"1\":{\"1005\":1}}],[\"进阶面试\",{\"0\":{\"519\":1}}],[\"进而导致超卖\",{\"1\":{\"644\":1}}],[\"进程的数量\",{\"1\":{\"1128\":1}}],[\"进程的进程空间是怎么样的\",{\"1\":{\"564\":1,\"636\":2}}],[\"进程与线程的区别在于资源的独立性\",{\"1\":{\"645\":1}}],[\"进程与redis\",{\"1\":{\"618\":1,\"690\":1}}],[\"进程中的执行单元\",{\"1\":{\"641\":1}}],[\"进程是操作系统分配资源的最小单位\",{\"1\":{\"636\":1}}],[\"进程空间是每个进程独立的内存区域\",{\"1\":{\"636\":1}}],[\"进程间通信有哪些方式\",{\"1\":{\"613\":1,\"685\":1}}],[\"进程和线程是怎么理解的\",{\"1\":{\"573\":1,\"645\":2}}],[\"进程线程协程这三个的区别\",{\"1\":{\"569\":1,\"641\":2}}],[\"进程\",{\"1\":{\"564\":1,\"595\":1,\"618\":3,\"619\":1,\"636\":2,\"641\":1,\"645\":2,\"667\":1,\"690\":3,\"691\":1}}],[\"进程管理\",{\"1\":{\"121\":1}}],[\"进行值拷贝的同时\",{\"1\":{\"1411\":1}}],[\"进行切割之前\",{\"1\":{\"1307\":1}}],[\"进行拆分\",{\"1\":{\"1287\":1}}],[\"进行拆分后再进行匹配\",{\"1\":{\"1287\":1}}],[\"进行分布式应用管理\",{\"1\":{\"1206\":1}}],[\"进行分配内存并完成初始化操作\",{\"1\":{\"533\":1}}],[\"进行存储对应的数据\",{\"1\":{\"1165\":1}}],[\"进行数据迁移\",{\"1\":{\"1165\":1}}],[\"进行数据操作和查询\",{\"1\":{\"904\":1}}],[\"进行层层的匹配和查找\",{\"1\":{\"1143\":1}}],[\"进行模块化的划分\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"进行路由组的定义\",{\"1\":{\"1087\":1}}],[\"进行处理\",{\"1\":{\"1019\":1}}],[\"进行master数据库和slave数据库的复制功能\",{\"1\":{\"822\":1}}],[\"进行5000次操作\",{\"1\":{\"821\":1}}],[\"进行跟踪\",{\"1\":{\"813\":1}}],[\"进行必要的sleep\",{\"1\":{\"796\":1}}],[\"进行启动\",{\"1\":{\"769\":1}}],[\"进行强大的分析\",{\"1\":{\"700\":1}}],[\"进行解耦\",{\"1\":{\"656\":1}}],[\"进行对话生成\",{\"1\":{\"655\":1}}],[\"进行业务逻辑处理\",{\"1\":{\"655\":1}}],[\"进行加锁\",{\"1\":{\"654\":1}}],[\"进行身份验证\",{\"1\":{\"641\":1}}],[\"进行高效的序列化\",{\"1\":{\"637\":1}}],[\"进行日志分析\",{\"1\":{\"637\":1}}],[\"进行系统监控\",{\"1\":{\"637\":1}}],[\"进行接收\",{\"1\":{\"633\":1}}],[\"进行读解锁的索引是\",{\"1\":{\"557\":1}}],[\"进行并发写入\",{\"1\":{\"556\":1}}],[\"进行合理的排序\",{\"1\":{\"554\":1}}],[\"进行合并\",{\"1\":{\"494\":1}}],[\"进行回收\",{\"1\":{\"551\":1}}],[\"进行关闭操作会直接panic\",{\"1\":{\"535\":1}}],[\"进行包裹\",{\"1\":{\"205\":1}}],[\"进行了整合\",{\"1\":{\"148\":1}}],[\"进行有效的文本分割\",{\"1\":{\"144\":1}}],[\"进行如下操作\",{\"1\":{\"24\":1}}],[\"进化优化库\",{\"1\":{\"142\":1}}],[\"进入编辑找到type字段\",{\"1\":{\"1235\":1}}],[\"进入webui\",{\"0\":{\"1232\":1}}],[\"进入winrm客户端以在windows计算机上远程执行命令\",{\"1\":{\"145\":1}}],[\"进入正在运行的容器\",{\"1\":{\"1189\":1}}],[\"进入sbin目录启动nginx\",{\"0\":{\"1119\":1}}],[\"进入slave的mysql数据库\",{\"1\":{\"822\":1}}],[\"进入任意一个节点可查看信息\",{\"1\":{\"1010\":1}}],[\"进入命令编辑模式\",{\"1\":{\"851\":1}}],[\"进入安装包目录\",{\"0\":{\"1115\":1}}],[\"进入安装\",{\"1\":{\"849\":1}}],[\"进入到slave服务器就行binlog文件复制和启动slave复制功能\",{\"1\":{\"822\":1}}],[\"进入全局队列\",{\"1\":{\"600\":1,\"672\":1}}],[\"进入对应的页面后\",{\"1\":{\"453\":1}}],[\"进入了善后工作\",{\"1\":{\"396\":1}}],[\"进入然后进行如下操作\",{\"1\":{\"47\":1}}],[\"进入文件夹内部操作\",{\"1\":{\"18\":1}}],[\"进入文件夹\",{\"1\":{\"14\":1}}],[\"进一步提升安全性\",{\"1\":{\"43\":1}}],[\"8编码的字符串\",{\"1\":{\"1394\":1}}],[\"8编码的文本的函数和常数\",{\"1\":{\"124\":1}}],[\"88999\",{\"1\":{\"1392\":1}}],[\"8a2e\",{\"1\":{\"1369\":1}}],[\"8a592709b443\",{\"1\":{\"1197\":2}}],[\"8已经停止维护了\",{\"1\":{\"1218\":1}}],[\"8610格式\",{\"1\":{\"1133\":1}}],[\"8600\",{\"1\":{\"1078\":1}}],[\"85a3\",{\"1\":{\"1369\":1}}],[\"857\",{\"1\":{\"993\":1}}],[\"8512000\",{\"1\":{\"705\":2}}],[\"8ms\",{\"1\":{\"911\":1}}],[\"8gvek4u\",{\"1\":{\"813\":2}}],[\"8b\",{\"1\":{\"791\":2}}],[\"8种\",{\"0\":{\"720\":1}}],[\"8是4字节\",{\"1\":{\"511\":1}}],[\"8300h\",{\"1\":{\"498\":1}}],[\"83i\",{\"1\":{\"183\":1}}],[\"89\",{\"1\":{\"822\":1,\"1164\":1,\"1392\":1}}],[\"895571\",{\"1\":{\"477\":1}}],[\"894\",{\"1\":{\"476\":2}}],[\"894723200\",{\"1\":{\"476\":1}}],[\"84\",{\"1\":{\"1194\":1,\"1195\":2,\"1196\":1,\"1197\":3}}],[\"8443\",{\"1\":{\"1077\":2,\"1078\":1}}],[\"8444\",{\"1\":{\"1077\":3,\"1078\":1}}],[\"8439803\",{\"1\":{\"477\":1}}],[\"84m\",{\"1\":{\"476\":1}}],[\"841\",{\"1\":{\"476\":1}}],[\"8µ\",{\"1\":{\"476\":1}}],[\"879\",{\"1\":{\"993\":1}}],[\"874\",{\"1\":{\"993\":2}}],[\"87\",{\"1\":{\"265\":1}}],[\"8c\",{\"1\":{\"258\":1}}],[\"817909650\",{\"1\":{\"476\":1}}],[\"81\",{\"1\":{\"233\":1,\"265\":1}}],[\"8p\",{\"1\":{\"182\":1}}],[\"8283\",{\"1\":{\"881\":1}}],[\"8281\",{\"1\":{\"881\":1}}],[\"8282\",{\"1\":{\"881\":2}}],[\"825794\",{\"1\":{\"476\":1}}],[\"826中所述\",{\"1\":{\"145\":1}}],[\"8243424\",{\"1\":{\"49\":1}}],[\"8和原始文本\",{\"1\":{\"144\":1}}],[\"8文本提供了一个扫描器和分词器\",{\"1\":{\"124\":1}}],[\"8082\",{\"1\":{\"1160\":2,\"1162\":1,\"1163\":5,\"1166\":1,\"1167\":1,\"1168\":1}}],[\"8081\",{\"1\":{\"1160\":2,\"1162\":1,\"1163\":5,\"1166\":2,\"1167\":1,\"1168\":1}}],[\"8083\",{\"1\":{\"1144\":2,\"1166\":1}}],[\"8085\",{\"1\":{\"1143\":2}}],[\"8088\",{\"1\":{\"1135\":3,\"1136\":2,\"1138\":1}}],[\"8087\",{\"1\":{\"1130\":1,\"1131\":1,\"1142\":1}}],[\"8080服务器作为备机\",{\"1\":{\"1163\":1}}],[\"8080的服务器就被停止使用了\",{\"1\":{\"1163\":1}}],[\"8080\",{\"1\":{\"324\":3,\"326\":1,\"327\":4,\"328\":1,\"453\":2,\"1158\":1,\"1160\":2,\"1162\":1,\"1163\":5,\"1166\":2,\"1167\":1,\"1168\":1,\"1280\":4,\"1281\":5,\"1282\":2,\"1283\":2,\"1335\":1,\"1336\":1,\"1337\":2,\"1338\":1,\"1370\":1,\"1371\":1}}],[\"8000\",{\"1\":{\"1073\":1,\"1077\":2,\"1078\":1,\"1086\":2,\"1087\":3,\"1275\":1,\"1277\":1}}],[\"8008\",{\"1\":{\"1010\":6}}],[\"8007\",{\"1\":{\"1010\":11}}],[\"8006\",{\"1\":{\"1010\":7}}],[\"8005\",{\"1\":{\"1010\":7}}],[\"8004\",{\"1\":{\"1010\":8}}],[\"8003\",{\"1\":{\"1010\":7}}],[\"8002\",{\"1\":{\"1010\":8}}],[\"8001即可\",{\"1\":{\"1078\":1}}],[\"8001\",{\"1\":{\"1010\":16,\"1073\":2,\"1077\":3,\"1078\":2,\"1081\":1,\"1233\":1}}],[\"802\",{\"1\":{\"145\":2}}],[\"80\",{\"1\":{\"84\":2,\"229\":3,\"1121\":1,\"1123\":2,\"1130\":2,\"1131\":1,\"1136\":2,\"1141\":1,\"1158\":1,\"1160\":2,\"1193\":1}}],[\"8\",{\"0\":{\"37\":1,\"38\":1,\"39\":1,\"50\":1},\"1\":{\"24\":1,\"55\":1,\"58\":1,\"197\":2,\"200\":1,\"212\":1,\"221\":1,\"224\":2,\"233\":12,\"235\":1,\"236\":6,\"244\":1,\"245\":4,\"246\":3,\"247\":6,\"248\":2,\"250\":5,\"259\":1,\"276\":1,\"282\":1,\"303\":1,\"306\":1,\"353\":2,\"375\":1,\"412\":2,\"417\":2,\"420\":1,\"422\":1,\"430\":1,\"436\":2,\"453\":2,\"459\":2,\"460\":13,\"475\":5,\"476\":28,\"477\":4,\"498\":4,\"499\":1,\"500\":1,\"513\":1,\"554\":1,\"600\":1,\"630\":1,\"633\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"641\":1,\"644\":1,\"645\":1,\"651\":1,\"653\":1,\"672\":1,\"702\":1,\"705\":1,\"706\":1,\"736\":1,\"742\":1,\"743\":1,\"776\":1,\"777\":1,\"787\":1,\"794\":1,\"798\":1,\"799\":1,\"851\":1,\"861\":1,\"863\":1,\"964\":3,\"965\":1,\"967\":2,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"981\":1,\"985\":2,\"1003\":1,\"1004\":3,\"1010\":21,\"1029\":2,\"1034\":7,\"1109\":1,\"1132\":2,\"1164\":2,\"1166\":1,\"1173\":2,\"1184\":1,\"1194\":2,\"1195\":1,\"1219\":6,\"1331\":1,\"1358\":1,\"1360\":1,\"1361\":1,\"1377\":1,\"1379\":1,\"1392\":1,\"1440\":1,\"1441\":1,\"1442\":2,\"1443\":2,\"1444\":2}}],[\"显示用户权限的\",{\"1\":{\"1223\":1}}],[\"显示整个路径最后一个文件夹名\",{\"1\":{\"1223\":1}}],[\"显示docker\",{\"1\":{\"1223\":1}}],[\"显示topic列表\",{\"1\":{\"1034\":1}}],[\"显示多条数据而无法一页显示的情况下\",{\"1\":{\"863\":1}}],[\"显示name以外的列信息\",{\"1\":{\"861\":1}}],[\"显示集合操作命令\",{\"1\":{\"855\":1}}],[\"显示数据库操作命令\",{\"1\":{\"855\":1}}],[\"显示数据库列表\",{\"1\":{\"855\":1}}],[\"显示帮助信息\",{\"1\":{\"855\":1}}],[\"显示当前用户\",{\"1\":{\"855\":1}}],[\"显示库中的集合\",{\"1\":{\"855\":1}}],[\"显示如下便表示安装成功\",{\"0\":{\"1120\":1}}],[\"显示如下\",{\"1\":{\"852\":1}}],[\"显示结果如下\",{\"1\":{\"851\":1}}],[\"显示可能应用在这张表中的索引\",{\"1\":{\"814\":1}}],[\"显示这一行的数据是关于哪张表的\",{\"1\":{\"814\":1}}],[\"显示每一时刻在os线程上运行的协程时间线\",{\"1\":{\"328\":1}}],[\"显示每一时刻在该处理器上运行的协程时间线\",{\"1\":{\"328\":1}}],[\"显示日志\",{\"1\":{\"24\":2}}],[\"显式指定表存储引擎\",{\"1\":{\"794\":1}}],[\"显式指定字符集\",{\"1\":{\"794\":2}}],[\"显式声明\",{\"1\":{\"511\":1}}],[\"显式的创建panic十分简单\",{\"1\":{\"395\":1}}],[\"显式的指明使用哪种类型\",{\"1\":{\"337\":1}}],[\"显式组合的方式\",{\"1\":{\"270\":1}}],[\"显式类型转换为字符串\",{\"1\":{\"254\":1}}],[\"显式类型转换为字节切片\",{\"1\":{\"254\":1}}],[\"显然这是由于作用域不同\",{\"1\":{\"1422\":1}}],[\"显然这很可能会触发fatal\",{\"1\":{\"436\":1}}],[\"显然项目的主目录并没有测试文件可供执行\",{\"1\":{\"468\":1}}],[\"显然是不太可能的\",{\"1\":{\"337\":1}}],[\"显然是不可以的\",{\"1\":{\"337\":1}}],[\"显然传递一个指针比起传递一个切片所消耗的资源更小\",{\"1\":{\"287\":1}}],[\"显然不能\",{\"1\":{\"36\":1}}],[\"显然比较棘手\",{\"1\":{\"30\":1}}],[\"显然与linux\",{\"1\":{\"12\":1}}],[\"查询记录值\",{\"1\":{\"1373\":1}}],[\"查询这个pod运行在哪个节点\",{\"1\":{\"1235\":1}}],[\"查询加入集群命令或者创建命令\",{\"1\":{\"1227\":1}}],[\"查询过期时间\",{\"0\":{\"918\":1}}],[\"查询一个是get\",{\"1\":{\"893\":1}}],[\"查询一个不存在的数据\",{\"1\":{\"636\":1}}],[\"查询出错了\",{\"1\":{\"884\":3}}],[\"查询出对应的全部数据\",{\"1\":{\"820\":1}}],[\"查询当前聚集集合所有索引\",{\"1\":{\"862\":1}}],[\"查询某个结果集的记录条数\",{\"1\":{\"861\":1}}],[\"查询第一条数据\",{\"1\":{\"861\":1}}],[\"查询在5\",{\"1\":{\"861\":1}}],[\"查询10条以后的数据\",{\"1\":{\"861\":1}}],[\"查询前5条数据\",{\"1\":{\"861\":1}}],[\"查询name\",{\"1\":{\"861\":1}}],[\"查询name中以mongo开头的\",{\"1\":{\"861\":1}}],[\"查询name中包含\",{\"1\":{\"861\":1}}],[\"查询指定列name\",{\"1\":{\"861\":2}}],[\"查询age\",{\"1\":{\"861\":6}}],[\"查询去掉后的当前聚集集合中的某列的重复数据\",{\"1\":{\"861\":1}}],[\"查询所有记录\",{\"1\":{\"861\":1}}],[\"查询所有文档\",{\"1\":{\"713\":1}}],[\"查询集合中的数据\",{\"1\":{\"857\":1}}],[\"查询总的记录数\",{\"1\":{\"855\":1}}],[\"查询多个\",{\"0\":{\"834\":1},\"1\":{\"884\":1}}],[\"查询单个\",{\"0\":{\"833\":1}}],[\"查询如下\",{\"1\":{\"817\":1}}],[\"查询涉及到的字段上若存在索引\",{\"1\":{\"814\":1}}],[\"查询中使用太多的列\",{\"1\":{\"817\":1}}],[\"查询中若使用了覆盖索引\",{\"1\":{\"814\":1}}],[\"查询中若包含任何复杂的子查询\",{\"1\":{\"814\":1}}],[\"查询中不包含子查询或者union\",{\"1\":{\"814\":1}}],[\"查询中统计或分组的字段\",{\"1\":{\"811\":1}}],[\"查询中排序的字段\",{\"1\":{\"811\":1}}],[\"查询中与其它表关联的字段\",{\"1\":{\"811\":1}}],[\"查询快\",{\"1\":{\"805\":1}}],[\"查询效率低的问题\",{\"1\":{\"804\":1}}],[\"查询效率高\",{\"1\":{\"595\":1,\"667\":1}}],[\"查询也越来越频繁\",{\"1\":{\"800\":1}}],[\"查询语句写的不好\",{\"1\":{\"799\":1}}],[\"查询缓存\",{\"0\":{\"777\":1},\"1\":{\"775\":1}}],[\"查询消耗时间\",{\"1\":{\"756\":1}}],[\"查询文档\",{\"0\":{\"753\":1,\"832\":1}}],[\"查询示例\",{\"1\":{\"730\":1}}],[\"查询结果不为空\",{\"1\":{\"756\":1}}],[\"查询结果返回可读性较好的json格式\",{\"1\":{\"756\":1}}],[\"查询结果\",{\"1\":{\"724\":1}}],[\"查询结构体的某个数据的偏移量\",{\"1\":{\"513\":1}}],[\"查询结构体的某个数据类型大小\",{\"1\":{\"513\":1}}],[\"查询结构体占多大内存\",{\"1\":{\"513\":1}}],[\"查询数据\",{\"1\":{\"724\":1,\"732\":1,\"733\":1}}],[\"查询性能\",{\"1\":{\"655\":1}}],[\"查询获取目标服务器\",{\"1\":{\"655\":1}}],[\"查询可能使用的索引\",{\"1\":{\"651\":1}}],[\"查询类型\",{\"0\":{\"920\":1},\"1\":{\"651\":1,\"814\":1}}],[\"查询优化器的执行计划\",{\"1\":{\"651\":1}}],[\"查询时可使用的索引\",{\"1\":{\"645\":1}}],[\"查询的时候\",{\"1\":{\"863\":1}}],[\"查询的字段和建立的字段刚好吻合\",{\"1\":{\"814\":1}}],[\"查询的顺序\",{\"1\":{\"651\":1}}],[\"查询的访问类型\",{\"1\":{\"645\":1}}],[\"查询的执行计划\",{\"1\":{\"645\":1}}],[\"查询的速度差不多\",{\"1\":{\"616\":1,\"688\":1}}],[\"查询字段全部包含在索引中\",{\"1\":{\"641\":1}}],[\"查询评论时\",{\"1\":{\"638\":1}}],[\"查询\",{\"0\":{\"884\":1,\"893\":1},\"1\":{\"633\":1,\"639\":1,\"861\":1,\"884\":3,\"893\":1}}],[\"查询条件\",{\"1\":{\"859\":1}}],[\"查询条件虽然有索引\",{\"1\":{\"633\":1}}],[\"查询条件没有对应的索引\",{\"1\":{\"633\":1}}],[\"查询速度\",{\"1\":{\"595\":1,\"667\":1}}],[\"查询该依赖包的哈希值\",{\"1\":{\"460\":1}}],[\"查询ofx服务器和\",{\"1\":{\"133\":1}}],[\"查找想要的镜像\",{\"1\":{\"1187\":1}}],[\"查找所有符合给定模式\",{\"1\":{\"967\":1}}],[\"查找集合中a=1的数据\",{\"1\":{\"855\":1}}],[\"查找foo集合中所有数据\",{\"1\":{\"855\":1}}],[\"查找数据\",{\"1\":{\"855\":1}}],[\"查找单行数据很快\",{\"1\":{\"807\":1}}],[\"查找性能更稳定\",{\"1\":{\"805\":1}}],[\"查找一个节点的时候可以有多个元素\",{\"1\":{\"805\":1}}],[\"查找一定范围内的地理点\",{\"1\":{\"730\":1}}],[\"查找效率低的问题\",{\"1\":{\"805\":1}}],[\"查找适合任何图像和尺寸的优质作物\",{\"1\":{\"139\":1}}],[\"查找问题是非常困难的\",{\"1\":{\"9\":1}}],[\"查看源码我们可以知道\",{\"1\":{\"1307\":1}}],[\"查看源代码\",{\"1\":{\"327\":1}}],[\"查看dashboard服务是否正常启动\",{\"1\":{\"1231\":1}}],[\"查看镜像信息\",{\"1\":{\"1228\":1}}],[\"查看现有的令牌\",{\"1\":{\"1226\":1}}],[\"查看版本信息\",{\"1\":{\"1222\":1}}],[\"查看版本分支图\",{\"1\":{\"33\":1}}],[\"查看ip\",{\"1\":{\"1219\":1}}],[\"查看所有的网络\",{\"1\":{\"1197\":1}}],[\"查看所有的key\",{\"1\":{\"967\":1}}],[\"查看容器的元数据\",{\"1\":{\"1189\":1}}],[\"查看任务列表\",{\"1\":{\"1175\":1}}],[\"查看nginx安装目录和日志的目录\",{\"1\":{\"1132\":1,\"1173\":1}}],[\"查看nginx的配置\",{\"0\":{\"1132\":1,\"1173\":1}}],[\"查看某个topic的状态\",{\"1\":{\"1034\":1}}],[\"查看节点的状态是否为read\",{\"1\":{\"1228\":1}}],[\"查看节点信息\",{\"1\":{\"1010\":1}}],[\"查看节点\",{\"1\":{\"1010\":1}}],[\"查看master\",{\"1\":{\"990\":1}}],[\"查看哈希表\",{\"1\":{\"972\":1}}],[\"查看redis安装的位置\",{\"1\":{\"968\":1}}],[\"查看redis服务器的配置信息\",{\"1\":{\"968\":1}}],[\"查看订阅状态\",{\"1\":{\"953\":1}}],[\"查看多个\",{\"1\":{\"884\":1}}],[\"查看单个\",{\"1\":{\"884\":1}}],[\"查看数据库\",{\"0\":{\"868\":1}}],[\"查看数据库状态\",{\"1\":{\"856\":1}}],[\"查看总索引记录大小\",{\"1\":{\"862\":1}}],[\"查看当前库下的所有集合\",{\"1\":{\"857\":1}}],[\"查看当前数据库中key的条目\",{\"1\":{\"968\":1}}],[\"查看当前数据库版本\",{\"1\":{\"856\":1}}],[\"查看当前数据库\",{\"1\":{\"856\":1}}],[\"查看集群节点信息即可\",{\"1\":{\"1010\":1}}],[\"查看集群节点的信息\",{\"1\":{\"1010\":1}}],[\"查看集群节点\",{\"1\":{\"1010\":1}}],[\"查看集群状态\",{\"1\":{\"1010\":1}}],[\"查看集群信息\",{\"1\":{\"770\":1}}],[\"查看集合存储信息\",{\"1\":{\"855\":1}}],[\"查看第1条记录\",{\"1\":{\"855\":1}}],[\"查看启动的网页没有显示英文了就表示已经关闭了\",{\"1\":{\"852\":1}}],[\"查看主库状态\",{\"1\":{\"825\":1}}],[\"查看主从同步状态\",{\"1\":{\"822\":1}}],[\"查看同步状态\",{\"1\":{\"822\":1}}],[\"查看每张表有多少行被优化器执行\",{\"1\":{\"814\":1}}],[\"查看表之间的引用\",{\"1\":{\"814\":1}}],[\"查看表的读取顺序\",{\"1\":{\"814\":1}}],[\"查看哪些索引被实际使用\",{\"1\":{\"814\":1}}],[\"查看哪些索引可以使用\",{\"1\":{\"814\":1}}],[\"查看是否生效\",{\"1\":{\"1228\":1}}],[\"查看是否分配成功\",{\"1\":{\"1010\":1}}],[\"查看是否同步成功了\",{\"1\":{\"825\":1}}],[\"查看是否开启函数功能\",{\"1\":{\"820\":1}}],[\"查看是否开启慢查询日志\",{\"1\":{\"813\":1}}],[\"查看是否有异常\",{\"1\":{\"655\":1}}],[\"查看索引\",{\"1\":{\"810\":1}}],[\"查看日志\",{\"1\":{\"775\":1,\"1189\":1}}],[\"查看错误日志\",{\"1\":{\"655\":1}}],[\"查看\",{\"1\":{\"634\":1}}],[\"查看可用源\",{\"1\":{\"77\":1}}],[\"查看tag详细信息\",{\"1\":{\"58\":1}}],[\"查看远程仓库详细地址\",{\"1\":{\"56\":1}}],[\"查看远程\",{\"0\":{\"56\":1},\"1\":{\"56\":2}}],[\"查看状态\",{\"1\":{\"55\":3}}],[\"查看配置信息\",{\"1\":{\"55\":1}}],[\"查看历史\",{\"0\":{\"48\":1}}],[\"查看提交历史记录\",{\"0\":{\"24\":1}}],[\"7347742\",{\"1\":{\"1435\":1}}],[\"7334\",{\"1\":{\"1369\":1}}],[\"73\",{\"1\":{\"1194\":1}}],[\"7366827\",{\"1\":{\"477\":1}}],[\"736\",{\"1\":{\"476\":1}}],[\"736455\",{\"1\":{\"476\":1}}],[\"736177\",{\"1\":{\"475\":1}}],[\"79769313486231570814527423731704356798070e+308\",{\"1\":{\"1344\":1}}],[\"79\",{\"1\":{\"1165\":1}}],[\"790421300\",{\"1\":{\"476\":1}}],[\"7毫秒\",{\"0\":{\"1043\":1}}],[\"7的镜像\",{\"1\":{\"822\":1}}],[\"7及之前的版本中\",{\"1\":{\"798\":1,\"799\":1}}],[\"7以前有线程不安全\",{\"1\":{\"590\":1,\"662\":1}}],[\"76m\",{\"1\":{\"1228\":1}}],[\"763gi\",{\"1\":{\"476\":6}}],[\"76e8c1e\",{\"1\":{\"449\":2}}],[\"7µ\",{\"1\":{\"476\":1}}],[\"7ms\",{\"1\":{\"476\":1}}],[\"7m\",{\"1\":{\"476\":3}}],[\"789s\",{\"1\":{\"477\":1}}],[\"780614\",{\"1\":{\"476\":1}}],[\"783599\",{\"1\":{\"476\":1}}],[\"785830400\",{\"1\":{\"476\":1}}],[\"742ms\",{\"1\":{\"820\":1}}],[\"742s\",{\"1\":{\"476\":1}}],[\"74\",{\"1\":{\"476\":1}}],[\"744885\",{\"1\":{\"476\":1}}],[\"743634000\",{\"1\":{\"476\":1}}],[\"75\",{\"1\":{\"566\":1,\"638\":3}}],[\"750\",{\"1\":{\"476\":1}}],[\"750513\",{\"1\":{\"476\":1}}],[\"759537\",{\"1\":{\"476\":1}}],[\"754浮点类型\",{\"1\":{\"720\":1}}],[\"754浮点数\",{\"1\":{\"198\":1}}],[\"754c\",{\"1\":{\"258\":1}}],[\"754\",{\"1\":{\"198\":2}}],[\"7个读协程\",{\"1\":{\"431\":1}}],[\"77245385090551602729816748334114518279754945612238712821380779\",{\"1\":{\"1345\":1}}],[\"777\",{\"1\":{\"981\":1}}],[\"771ms\",{\"1\":{\"821\":1}}],[\"77\",{\"1\":{\"258\":1}}],[\"77代码转换为go代码\",{\"1\":{\"136\":1}}],[\"700\",{\"1\":{\"1231\":1}}],[\"700824\",{\"1\":{\"476\":1}}],[\"70ec\",{\"1\":{\"1194\":1}}],[\"706\",{\"1\":{\"476\":1}}],[\"706605350\",{\"1\":{\"476\":1}}],[\"704798\",{\"1\":{\"476\":1}}],[\"70\",{\"1\":{\"229\":3,\"477\":1,\"1195\":1}}],[\"7229057\",{\"1\":{\"1435\":1}}],[\"720w\",{\"1\":{\"1157\":1}}],[\"727字节\",{\"1\":{\"815\":1}}],[\"729821\",{\"1\":{\"476\":1}}],[\"72\",{\"1\":{\"182\":2,\"233\":1,\"258\":1}}],[\"7252\",{\"1\":{\"145\":1}}],[\"7k+\",{\"1\":{\"111\":1}}],[\"71ff\",{\"1\":{\"1195\":2}}],[\"7110382\",{\"1\":{\"1175\":1}}],[\"712991800\",{\"1\":{\"476\":1}}],[\"717285\",{\"1\":{\"476\":1}}],[\"71828182845904523536028747135266249775724709369995957496696763\",{\"1\":{\"1345\":1}}],[\"71828i\",{\"1\":{\"183\":1}}],[\"71828\",{\"1\":{\"182\":1}}],[\"71\",{\"1\":{\"111\":1,\"1195\":2}}],[\"7\",{\"0\":{\"24\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"49\":1,\"156\":1,\"762\":1},\"1\":{\"34\":1,\"55\":1,\"58\":1,\"221\":1,\"224\":2,\"233\":11,\"235\":1,\"236\":6,\"244\":2,\"245\":4,\"246\":4,\"247\":6,\"248\":2,\"250\":5,\"253\":1,\"276\":1,\"306\":5,\"320\":13,\"375\":1,\"412\":3,\"417\":2,\"420\":1,\"422\":1,\"430\":1,\"431\":1,\"432\":1,\"436\":2,\"453\":4,\"459\":3,\"476\":1,\"498\":1,\"499\":1,\"500\":1,\"600\":1,\"630\":1,\"633\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"641\":1,\"644\":1,\"645\":1,\"651\":1,\"653\":1,\"654\":1,\"672\":1,\"702\":2,\"706\":1,\"736\":2,\"767\":2,\"776\":1,\"794\":1,\"811\":1,\"822\":5,\"851\":1,\"861\":1,\"863\":1,\"964\":3,\"965\":1,\"967\":2,\"968\":1,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"981\":1,\"1003\":1,\"1004\":3,\"1010\":24,\"1028\":6,\"1029\":1,\"1034\":7,\"1055\":1,\"1078\":1,\"1109\":1,\"1162\":1,\"1184\":1,\"1193\":1,\"1195\":2,\"1218\":1,\"1220\":1,\"1223\":1,\"1229\":1,\"1343\":1,\"1357\":1,\"1392\":1,\"1443\":1,\"1444\":1}}],[\"比起以日志为中心的\",{\"1\":{\"1019\":1}}],[\"比起大多数的消息系统来说\",{\"1\":{\"1019\":1}}],[\"比值越高索引的效率越好\",{\"1\":{\"815\":1}}],[\"比例不恰当\",{\"1\":{\"799\":1}}],[\"比线程更加轻量级的执行单元\",{\"1\":{\"641\":1}}],[\"比\",{\"1\":{\"168\":1,\"638\":1,\"1287\":1}}],[\"比传统线程更加轻量\",{\"1\":{\"151\":1}}],[\"比net\",{\"1\":{\"145\":1}}],[\"比基于通道的信号量实现更快\",{\"1\":{\"137\":1}}],[\"比较巧妙\",{\"1\":{\"1403\":1}}],[\"比较字符串\",{\"0\":{\"1397\":1}}],[\"比较方法\",{\"1\":{\"1375\":1,\"1380\":1}}],[\"比较简单易懂\",{\"1\":{\"1279\":1}}],[\"比较好用\",{\"1\":{\"876\":1}}],[\"比较集合中的第\",{\"1\":{\"649\":1}}],[\"比较器由调用者提供\",{\"1\":{\"344\":1}}],[\"比较\",{\"0\":{\"168\":1,\"169\":1,\"170\":1,\"209\":1}}],[\"比较全能\",{\"1\":{\"123\":1}}],[\"比较差异\",{\"1\":{\"23\":1}}],[\"比如数组和结构体\",{\"1\":{\"1443\":1}}],[\"比如数字字符串\",{\"1\":{\"1417\":1}}],[\"比如template\",{\"1\":{\"1428\":1}}],[\"比如tomcat\",{\"1\":{\"1162\":1}}],[\"比如topic1\",{\"1\":{\"1062\":1}}],[\"比如json\",{\"1\":{\"1308\":1}}],[\"比如你可以不用任何外部依赖\",{\"1\":{\"1308\":1}}],[\"比如root用户\",{\"1\":{\"1223\":1}}],[\"比如软件源\",{\"1\":{\"1218\":1}}],[\"比如订单业务\",{\"1\":{\"1198\":1}}],[\"比如最基础的linux环境镜像上\",{\"1\":{\"1192\":1}}],[\"比如网络\",{\"1\":{\"1189\":1}}],[\"比如ip\",{\"1\":{\"1165\":1}}],[\"比如innodb的\",{\"1\":{\"566\":1,\"638\":1}}],[\"比如临时增加一台服务器\",{\"1\":{\"1163\":1}}],[\"比如搜索引擎\",{\"1\":{\"1151\":1}}],[\"比如前10ms已经通过了最大的请求数\",{\"1\":{\"1148\":1}}],[\"比如我们限制的是1s能够通过的请求数\",{\"1\":{\"1148\":1}}],[\"比如我们进行如下操作\",{\"1\":{\"25\":1}}],[\"比如超过大小或者超过一定的时限就会清除掉\",{\"1\":{\"1065\":1}}],[\"比如在直接挂到后端的静态html页面就需要用到模板引擎\",{\"1\":{\"1414\":1}}],[\"比如在交易系统中用消息队列传递订单\",{\"1\":{\"1057\":1}}],[\"比如在内存泄漏怀疑时排查\",{\"1\":{\"633\":1}}],[\"比如保留期限设置为两天\",{\"1\":{\"1025\":1}}],[\"比如回复正常数据或者删除重复数据\",{\"1\":{\"1019\":1}}],[\"比如消息的存储\",{\"1\":{\"1018\":1}}],[\"比如秒杀活动啥的\",{\"1\":{\"1012\":1}}],[\"比如创建新的\",{\"1\":{\"981\":1}}],[\"比如宕机或者断电等\",{\"1\":{\"979\":1}}],[\"比如exa\",{\"1\":{\"873\":1}}],[\"比如表中的某一个字段为国籍\",{\"1\":{\"811\":1}}],[\"比如员工表的部门外键\",{\"1\":{\"811\":1}}],[\"比如银行系统银行帐号\",{\"1\":{\"811\":1}}],[\"比如要查元素3到元素8的\",{\"1\":{\"805\":1}}],[\"比如要查元素3\",{\"1\":{\"805\":1}}],[\"比如要查第10000页\",{\"1\":{\"593\":1,\"665\":1}}],[\"比如上游流量忽高忽低\",{\"1\":{\"1068\":1}}],[\"比如上面这种\",{\"1\":{\"786\":1}}],[\"比如上述的例子输出可能如下\",{\"1\":{\"435\":1}}],[\"比如写定时任务\",{\"1\":{\"783\":1}}],[\"比如pongo2\",{\"1\":{\"1414\":1}}],[\"比如price字段只需精确到分\",{\"1\":{\"720\":1}}],[\"比如pdf\",{\"1\":{\"326\":1}}],[\"比如产品名称\",{\"1\":{\"718\":1}}],[\"比如通过ping\",{\"1\":{\"702\":1}}],[\"比如增删改查之类的\",{\"1\":{\"700\":1}}],[\"比如用户信息表可能包含user\",{\"1\":{\"653\":1}}],[\"比如用户的交易数据\",{\"1\":{\"641\":1}}],[\"比如抢单\",{\"1\":{\"644\":1}}],[\"比如缓存热点数据\",{\"1\":{\"641\":1}}],[\"比如范围查询\",{\"1\":{\"633\":1}}],[\"比如mybatis\",{\"1\":{\"598\":1,\"670\":1}}],[\"比如内存溢出等问题\",{\"1\":{\"597\":1,\"669\":1}}],[\"比如方法签名中的参数会不会有一些规范\",{\"1\":{\"597\":1,\"669\":1}}],[\"比如应该用多进程的方式还是单进程多线程的方式\",{\"1\":{\"573\":1,\"645\":2}}],[\"比如传递参数会使用锁+map实现存储并传递参数到子协程中去使用\",{\"1\":{\"546\":1}}],[\"比如结构体转json\",{\"1\":{\"513\":1}}],[\"比如可以增加一个负数测试用例\",{\"1\":{\"494\":1}}],[\"比如将上述t\",{\"1\":{\"472\":1}}],[\"比如将person修改为下面这种\",{\"1\":{\"307\":1}}],[\"比如想要执行test包下所有的测试用例\",{\"1\":{\"468\":1}}],[\"比如hello库就有一个专属的文档页面\",{\"1\":{\"450\":1}}],[\"比如因cas引起aba问题\",{\"1\":{\"440\":1}}],[\"比如整型类型都会提供add方法来实现原子加减操作\",{\"1\":{\"439\":1}}],[\"比如协程a和b同时调用了add方法\",{\"1\":{\"434\":1}}],[\"比如再开几个子协程破坏了不变量\",{\"1\":{\"429\":1}}],[\"比如5分钟后\",{\"1\":{\"428\":1}}],[\"比如指定一个具体时间2023\",{\"1\":{\"428\":1}}],[\"比如webrtc\",{\"1\":{\"335\":1}}],[\"比如docker\",{\"1\":{\"335\":1}}],[\"比如dos攻击就是用大量的伪ip发起syn报文但不给确认\",{\"1\":{\"82\":1}}],[\"比如gzip\",{\"1\":{\"1308\":1}}],[\"比如github\",{\"1\":{\"459\":1}}],[\"比如git\",{\"1\":{\"443\":1}}],[\"比如gin\",{\"1\":{\"324\":1}}],[\"比如gotest\",{\"1\":{\"314\":1}}],[\"比如之前提到过的\",{\"1\":{\"274\":1}}],[\"比如sha1\",{\"1\":{\"1308\":1}}],[\"比如session\",{\"1\":{\"1164\":1}}],[\"比如string\",{\"1\":{\"259\":1}}],[\"比如svn\",{\"1\":{\"9\":1}}],[\"比如os\",{\"1\":{\"207\":1}}],[\"比如下面这个两个tag一个结合反射转为json结构体\",{\"1\":{\"513\":1}}],[\"比如下面这个代码\",{\"1\":{\"287\":1}}],[\"比如下面这个例子\",{\"1\":{\"175\":1,\"285\":1}}],[\"比如下面的例子\",{\"1\":{\"254\":1,\"388\":1,\"1425\":1}}],[\"比如下面的代码只是声明了变量\",{\"1\":{\"206\":1}}],[\"比如下面的一个例子\",{\"1\":{\"174\":1}}],[\"比如从一个对象序列化为json字符串\",{\"1\":{\"121\":1}}],[\"比如读写文件\",{\"1\":{\"121\":1}}],[\"比如提供了对os中系统相关的io功能的封装\",{\"1\":{\"121\":1}}],[\"比如发布到github\",{\"1\":{\"65\":1}}],[\"比如测试文件\",{\"1\":{\"58\":1}}],[\"比如说有你在线上发现一条慢sql\",{\"1\":{\"622\":1,\"694\":1}}],[\"比如说\",{\"1\":{\"37\":1}}],[\"比如新建的文件\",{\"1\":{\"22\":1}}],[\"比如组合问题\",{\"1\":{\"4\":1}}],[\"比如\",{\"1\":{\"4\":1,\"110\":1,\"206\":2,\"211\":1,\"221\":1,\"301\":2,\"489\":1,\"497\":1,\"516\":1,\"644\":1,\"656\":1,\"725\":1,\"743\":1,\"794\":1,\"795\":1,\"815\":1,\"890\":1,\"997\":1,\"1010\":1,\"1067\":1,\"1108\":1,\"1139\":1,\"1165\":4,\"1223\":1,\"1419\":1,\"1424\":1,\"1425\":1}}],[\"m=+3\",{\"1\":{\"1434\":1}}],[\"m=+2\",{\"1\":{\"1434\":1,\"1435\":1}}],[\"m=+1\",{\"1\":{\"1433\":1,\"1434\":1}}],[\"m=+0\",{\"1\":{\"1429\":1,\"1435\":1}}],[\"mxs\",{\"1\":{\"1373\":2}}],[\"mcastprefix\",{\"1\":{\"1196\":1}}],[\"mcache\",{\"1\":{\"127\":1}}],[\"mtu\",{\"1\":{\"1194\":5,\"1195\":5,\"1197\":1}}],[\"m的\",{\"1\":{\"1151\":1}}],[\"m的数量是动态调整的\",{\"1\":{\"542\":1}}],[\"mb为单位\",{\"1\":{\"1307\":1}}],[\"mb\",{\"1\":{\"1018\":2,\"1307\":2}}],[\"mget\",{\"1\":{\"924\":1,\"970\":1}}],[\"mgutz\",{\"1\":{\"122\":1}}],[\"mkxiaoer\",{\"1\":{\"870\":1,\"993\":3,\"1003\":1,\"1004\":3,\"1010\":13,\"1081\":1}}],[\"mkdirall\",{\"1\":{\"409\":1,\"410\":1}}],[\"mkdir\",{\"1\":{\"409\":2,\"740\":1,\"774\":1,\"1010\":2,\"1028\":2,\"1110\":1,\"1114\":1,\"1135\":1,\"1171\":1,\"1221\":1,\"1225\":1,\"1243\":1}}],[\"mmap\",{\"1\":{\"842\":1}}],[\"mm\",{\"1\":{\"721\":3,\"724\":3,\"1431\":1}}],[\"mmsego\",{\"1\":{\"144\":1}}],[\"m与p的解耦\",{\"1\":{\"654\":1}}],[\"m可以在多个p上调度执行\",{\"1\":{\"654\":1}}],[\"m表示操作系统线程\",{\"1\":{\"654\":1}}],[\"m和p如何调度新的g\",{\"1\":{\"651\":1}}],[\"m就能运行多个goroutine\",{\"1\":{\"651\":1}}],[\"m+n\",{\"1\":{\"638\":1}}],[\"m执行完g后\",{\"1\":{\"542\":1}}],[\"m会从p的本地队列获取g来执行\",{\"1\":{\"542\":1}}],[\"m3u8播放列表的解析器和生成器库\",{\"1\":{\"146\":1}}],[\"m3u8\",{\"1\":{\"146\":2}}],[\"myhandler\",{\"1\":{\"1337\":3}}],[\"mynet\",{\"1\":{\"1197\":12}}],[\"myname\",{\"1\":{\"174\":1,\"175\":1,\"993\":1}}],[\"myweb\",{\"1\":{\"1193\":1}}],[\"myredis\",{\"1\":{\"1003\":5,\"1004\":9,\"1081\":1}}],[\"mydb\",{\"1\":{\"856\":1}}],[\"mydict\",{\"1\":{\"742\":1}}],[\"myapp\",{\"1\":{\"851\":1,\"852\":5}}],[\"myprofi\",{\"1\":{\"813\":1}}],[\"mymysql\",{\"1\":{\"775\":2,\"822\":6}}],[\"mymap\",{\"1\":{\"383\":1,\"384\":4,\"436\":2}}],[\"myid\",{\"1\":{\"1003\":1}}],[\"myisam索引\",{\"1\":{\"808\":1}}],[\"myisam\",{\"1\":{\"649\":1,\"775\":1,\"808\":1,\"815\":1}}],[\"myisam和innodb的不同\",{\"1\":{\"587\":1,\"659\":1}}],[\"myisam的\",{\"1\":{\"566\":1,\"638\":1}}],[\"myinterface\",{\"1\":{\"355\":2,\"356\":2}}],[\"myint\",{\"1\":{\"286\":12,\"287\":8,\"383\":2}}],[\"myerr\",{\"1\":{\"393\":3}}],[\"myemain\",{\"1\":{\"84\":1}}],[\"myfloat64\",{\"1\":{\"383\":4,\"385\":2}}],[\"my\",{\"1\":{\"355\":3,\"356\":3,\"459\":2,\"516\":2,\"768\":2,\"769\":1,\"770\":1,\"1337\":1,\"1409\":4}}],[\"mysocket\",{\"1\":{\"1372\":1}}],[\"myself\",{\"1\":{\"1010\":2}}],[\"myset\",{\"1\":{\"985\":5}}],[\"mysignal\",{\"1\":{\"651\":3}}],[\"myslice\",{\"1\":{\"434\":8}}],[\"mystruct\",{\"1\":{\"355\":3,\"356\":3}}],[\"mystem的绑定\",{\"1\":{\"144\":1}}],[\"mystem\",{\"1\":{\"144\":1}}],[\"mysqlnet\",{\"1\":{\"1197\":2}}],[\"mysql单机一般只能支撑到2000qps\",{\"1\":{\"960\":1}}],[\"mysql是当下最流行的开源关系型数据库\",{\"1\":{\"889\":1}}],[\"mysql是一种广泛使用的开源关系型数据库管理系统\",{\"1\":{\"797\":1}}],[\"mysql版本\",{\"1\":{\"876\":1}}],[\"mysql>show\",{\"1\":{\"825\":1}}],[\"mysql数据主从同步失败解决方案\",{\"1\":{\"825\":1}}],[\"mysql镜像服务器因错误停止的恢复\",{\"1\":{\"825\":1}}],[\"mysql库一般不同步\",{\"1\":{\"822\":3}}],[\"mysqld\",{\"1\":{\"822\":3}}],[\"mysqldumpslow\",{\"1\":{\"813\":4}}],[\"mysqldumpslow工具实现对慢查询日志信息的分析\",{\"1\":{\"813\":1}}],[\"mysqlmaster\",{\"1\":{\"822\":3}}],[\"mysql在使用不等于\",{\"1\":{\"818\":1}}],[\"mysql在对查询结果排序时\",{\"1\":{\"814\":1}}],[\"mysql前缀索引和索引列的选择性\",{\"0\":{\"815\":1}}],[\"mysqlslave02\",{\"1\":{\"822\":2}}],[\"mysqlslave01\",{\"1\":{\"822\":2}}],[\"mysqlslave\",{\"1\":{\"822\":1}}],[\"mysqlsla\",{\"1\":{\"813\":1}}],[\"mysql默认安装了\",{\"1\":{\"813\":1}}],[\"mysql默认隔离级别\",{\"1\":{\"604\":1,\"676\":1}}],[\"mysql不仅要保存数据\",{\"1\":{\"811\":1}}],[\"mysql内部缓存\",{\"1\":{\"796\":1}}],[\"mysql内存磁盘同步机制\",{\"1\":{\"610\":1,\"682\":1}}],[\"mysql从你输入的\",{\"1\":{\"778\":1}}],[\"mysql需要识别出里面的字符串分别是什么\",{\"1\":{\"778\":1}}],[\"mysql拿到一个查询请求\",{\"1\":{\"777\":1}}],[\"mysql高级\",{\"0\":{\"773\":1}}],[\"mysql更擅长的是事务类型的操作\",{\"1\":{\"735\":1}}],[\"mysql与elasticsearch对比\",{\"0\":{\"735\":1}}],[\"mysql中无法利用索引完成排序操作称为\",{\"1\":{\"814\":1}}],[\"mysql中每张表的字段数量是有限制的\",{\"1\":{\"799\":1}}],[\"mysql中的索引实现\",{\"1\":{\"649\":1}}],[\"mysql中索引如何实现\",{\"1\":{\"577\":1,\"649\":2}}],[\"mysql插入慢什么原因\",{\"1\":{\"624\":1,\"696\":1}}],[\"mysql查询慢是什么原因\",{\"1\":{\"624\":1,\"696\":1}}],[\"mysql如何优化慢查询\",{\"1\":{\"621\":1,\"693\":1}}],[\"mysql如何解决的幻读\",{\"1\":{\"614\":1,\"686\":1}}],[\"mysql隔离级别\",{\"1\":{\"613\":1,\"685\":1}}],[\"mysql存储引擎\",{\"1\":{\"613\":1,\"685\":1}}],[\"mysql配合使用\",{\"1\":{\"610\":1,\"682\":1}}],[\"mysql什么时候会死锁\",{\"1\":{\"610\":1,\"682\":1}}],[\"mysql的慢查询日志是mysql提供的一种日志记录\",{\"1\":{\"813\":1}}],[\"mysql的索引实现\",{\"0\":{\"808\":1}}],[\"mysql的索引通常是怎么划分的\",{\"1\":{\"566\":1,\"638\":1}}],[\"mysql的占用内存涨的很快\",{\"1\":{\"776\":1}}],[\"mysql的版本控制\",{\"1\":{\"595\":1,\"667\":1}}],[\"mysql优化实战之小表驱动大表\",{\"0\":{\"821\":1}}],[\"mysql优化实战之大数据量分页优化\",{\"0\":{\"820\":1}}],[\"mysql优化实战之排序与分组优化\",{\"0\":{\"819\":1}}],[\"mysql优化实战之避免索引失效\",{\"0\":{\"818\":1}}],[\"mysql优化\",{\"1\":{\"595\":1,\"667\":1}}],[\"mysql有个表\",{\"1\":{\"593\":1,\"665\":1}}],[\"mysql有哪些储存引擎了解吗\",{\"1\":{\"592\":1,\"664\":1}}],[\"mysql主要分为server层和存储引擎层\",{\"1\":{\"775\":1}}],[\"mysql主从架构\",{\"1\":{\"610\":1,\"682\":1}}],[\"mysql主从同步机制\",{\"1\":{\"580\":1,\"652\":1}}],[\"mysql主键索引和普通索引的区别\",{\"1\":{\"569\":1,\"641\":2}}],[\"mysql索引列什么样子的列适合选择成为索引\",{\"0\":{\"811\":1}}],[\"mysql索引的操作\",{\"0\":{\"810\":1}}],[\"mysql索引的优劣势\",{\"0\":{\"809\":1}}],[\"mysql索引的底层实现\",{\"0\":{\"801\":1}}],[\"mysql索引原理及概念\",{\"0\":{\"800\":1}}],[\"mysql索引相关\",{\"1\":{\"616\":1,\"688\":1}}],[\"mysql索引建立原则\",{\"1\":{\"579\":1,\"651\":2}}],[\"mysql索引b＋t\",{\"1\":{\"563\":1,\"635\":2}}],[\"mysql支持事务而mongodb不支持事务\",{\"1\":{\"576\":1,\"648\":1}}],[\"mysql支持的最大并发数\",{\"1\":{\"567\":1,\"639\":2}}],[\"mysql里开启了两个事务\",{\"1\":{\"573\":1,\"645\":1}}],[\"mysql事务的隔离级别\",{\"1\":{\"566\":1,\"638\":1}}],[\"mysql还有什么相关的log文件\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"mysql\",{\"0\":{\"889\":1,\"899\":1},\"1\":{\"175\":1,\"584\":1,\"610\":2,\"611\":1,\"618\":1,\"619\":1,\"622\":1,\"633\":2,\"634\":1,\"635\":1,\"638\":3,\"639\":2,\"651\":1,\"653\":1,\"656\":4,\"682\":2,\"683\":1,\"690\":1,\"691\":1,\"694\":1,\"775\":11,\"776\":5,\"777\":1,\"778\":1,\"779\":1,\"780\":1,\"798\":1,\"799\":1,\"813\":3,\"814\":1,\"821\":1,\"822\":20,\"825\":3,\"890\":1,\"891\":1,\"893\":2,\"905\":1,\"1081\":3,\"1197\":5,\"1313\":1,\"1315\":1}}],[\"mysalary\",{\"1\":{\"174\":1}}],[\"mpl协议\",{\"1\":{\"1072\":1}}],[\"mp\",{\"1\":{\"141\":1,\"259\":7,\"260\":9,\"261\":16,\"262\":11,\"263\":7,\"266\":3,\"1440\":2}}],[\"mpo\",{\"1\":{\"139\":1}}],[\"mp3解码器\",{\"1\":{\"126\":1}}],[\"mp3\",{\"1\":{\"126\":1}}],[\"ms配置项\",{\"1\":{\"1029\":1}}],[\"ms=0\",{\"1\":{\"1029\":1}}],[\"ms=18000\",{\"1\":{\"1029\":1}}],[\"ms=300000\",{\"1\":{\"1029\":1}}],[\"msetnx\",{\"1\":{\"970\":1}}],[\"mset\",{\"1\":{\"924\":1,\"970\":1}}],[\"msc\",{\"1\":{\"852\":1}}],[\"msi\",{\"1\":{\"849\":1}}],[\"ms\",{\"1\":{\"756\":1,\"1029\":1,\"1078\":1,\"1194\":1,\"1195\":7,\"1196\":4,\"1197\":12}}],[\"msg1\",{\"1\":{\"746\":2}}],[\"msg\",{\"1\":{\"211\":1,\"338\":2,\"366\":2,\"374\":2,\"392\":2,\"393\":5,\"446\":2,\"985\":1,\"1035\":2,\"1047\":17,\"1082\":1,\"1092\":2}}],[\"msgfmt\",{\"1\":{\"122\":2}}],[\"mspm\",{\"1\":{\"127\":1}}],[\"mustnot\",{\"1\":{\"764\":1}}],[\"must条件\",{\"0\":{\"763\":1}}],[\"must\",{\"0\":{\"764\":1},\"1\":{\"729\":1,\"763\":2,\"764\":1,\"765\":1,\"1164\":1,\"1303\":1}}],[\"music\",{\"1\":{\"126\":1,\"1281\":1}}],[\"mu\",{\"1\":{\"514\":2,\"556\":3,\"635\":3,\"649\":5}}],[\"mutator\",{\"1\":{\"328\":1}}],[\"mutex锁\",{\"1\":{\"1128\":1}}],[\"mutex锁有几种模式\",{\"1\":{\"582\":1,\"654\":2}}],[\"mutex本身没有提供直接的trylock\",{\"1\":{\"654\":1}}],[\"mutex本身不支持重入锁\",{\"1\":{\"654\":1}}],[\"mutex是常用的互斥锁类型\",{\"1\":{\"654\":1}}],[\"mutex是go提供的互斥锁实现\",{\"1\":{\"430\":1}}],[\"mutexprofilefraction\",{\"1\":{\"469\":1}}],[\"mutexprofile\",{\"1\":{\"323\":1,\"469\":1}}],[\"mutex\",{\"1\":{\"323\":1,\"324\":1,\"400\":1,\"412\":1,\"430\":1,\"434\":1,\"440\":1,\"469\":1,\"556\":1,\"595\":1,\"635\":2,\"639\":2,\"649\":3,\"651\":1,\"667\":1}}],[\"multicast\",{\"1\":{\"1194\":3,\"1195\":4}}],[\"multi\",{\"1\":{\"859\":1}}],[\"multithreading\",{\"1\":{\"137\":1}}],[\"multierror\",{\"1\":{\"131\":1}}],[\"multipartform\",{\"1\":{\"1281\":1}}],[\"multipart\",{\"1\":{\"124\":1,\"1281\":2}}],[\"mux\",{\"1\":{\"122\":1,\"324\":3}}],[\"messaging\",{\"1\":{\"1053\":1}}],[\"messagekey\",{\"1\":{\"1302\":3,\"1303\":2}}],[\"messages\",{\"1\":{\"1036\":1,\"1047\":2}}],[\"message\",{\"1\":{\"124\":1,\"129\":1,\"446\":1,\"745\":1,\"766\":8,\"953\":1,\"985\":2,\"1018\":1,\"1035\":2,\"1036\":5,\"1047\":1,\"1281\":1,\"1303\":3,\"1321\":1,\"1415\":3}}],[\"mediumint\",{\"1\":{\"791\":1}}],[\"mediainfo\",{\"1\":{\"126\":1}}],[\"medcl\",{\"1\":{\"740\":3}}],[\"meet\",{\"1\":{\"477\":4,\"1409\":4}}],[\"metadata\",{\"1\":{\"1215\":6}}],[\"method=none\",{\"1\":{\"1219\":1}}],[\"methodbyname\",{\"1\":{\"371\":1}}],[\"method结构体如下\",{\"1\":{\"370\":1}}],[\"methods\",{\"1\":{\"347\":1,\"1081\":2}}],[\"method\",{\"1\":{\"287\":1,\"289\":2,\"307\":1,\"370\":17,\"515\":1,\"524\":1,\"1133\":1,\"1164\":1,\"1228\":1}}],[\"metrics\",{\"1\":{\"122\":3,\"328\":1}}],[\"member2\",{\"1\":{\"974\":1}}],[\"member2移除集合中一个或多个成员\",{\"1\":{\"973\":1}}],[\"member2向集合添加一个或多个成员\",{\"1\":{\"973\":1}}],[\"member将\",{\"1\":{\"973\":1}}],[\"member判断\",{\"1\":{\"973\":1}}],[\"member1\",{\"1\":{\"973\":2,\"974\":1}}],[\"member\",{\"1\":{\"795\":1,\"947\":2,\"950\":1,\"973\":2,\"974\":6}}],[\"mem1文件\",{\"1\":{\"630\":1}}],[\"mem1`\",{\"1\":{\"630\":1}}],[\"mem1\",{\"1\":{\"630\":1}}],[\"memprofile=data\",{\"1\":{\"630\":2}}],[\"memprofile=mem\",{\"1\":{\"497\":1}}],[\"memprofile=$file\",{\"1\":{\"497\":1}}],[\"memprofilerate查看更多细节\",{\"1\":{\"469\":1}}],[\"memprofilerate\",{\"1\":{\"469\":1}}],[\"memprofile\",{\"1\":{\"469\":1}}],[\"memory设置为0的时候\",{\"1\":{\"965\":1}}],[\"memory设置多小\",{\"1\":{\"965\":1}}],[\"memory的数据存入虚拟内存\",{\"1\":{\"965\":1}}],[\"memory\",{\"1\":{\"413\":2,\"775\":1,\"817\":1,\"965\":1,\"993\":1,\"1443\":1}}],[\"mem\",{\"1\":{\"132\":1,\"469\":1}}],[\"memcache知道吗\",{\"1\":{\"601\":1,\"673\":1}}],[\"memcached\",{\"1\":{\"127\":1}}],[\"memcache\",{\"1\":{\"127\":1}}],[\"merz的名字\",{\"1\":{\"965\":1}}],[\"mercurial\",{\"1\":{\"443\":1}}],[\"mergi\",{\"1\":{\"139\":1}}],[\"merge\",{\"1\":{\"58\":3,\"573\":1,\"645\":1,\"1164\":2}}],[\"merkle树的实现\",{\"1\":{\"127\":1}}],[\"merkletree\",{\"1\":{\"127\":1}}],[\"mv\",{\"1\":{\"1028\":1,\"1174\":2,\"1220\":1}}],[\"mvcc\",{\"1\":{\"584\":1,\"618\":1,\"656\":3,\"690\":1}}],[\"mvc架构清晰\",{\"1\":{\"114\":1}}],[\"mvdan\",{\"1\":{\"122\":1}}],[\"move\",{\"1\":{\"967\":2,\"1010\":2}}],[\"moved\",{\"1\":{\"317\":1}}],[\"more\",{\"1\":{\"454\":1,\"1197\":3}}],[\"mort\",{\"1\":{\"139\":1}}],[\"mom\",{\"1\":{\"317\":8}}],[\"monday\",{\"1\":{\"1431\":1}}],[\"monitor\",{\"1\":{\"1000\":1,\"1003\":1,\"1004\":3}}],[\"mongosh\",{\"1\":{\"867\":1}}],[\"mongo的数据\",{\"1\":{\"861\":1}}],[\"mongogb\",{\"0\":{\"852\":1},\"1\":{\"852\":1}}],[\"mongodsh\",{\"1\":{\"853\":1}}],[\"mongod\",{\"0\":{\"871\":1},\"1\":{\"851\":1,\"852\":1}}],[\"mongodb数据库默认的管理工具是\",{\"1\":{\"874\":1}}],[\"mongodb会为⽂档分配⼀个唯⼀的objectid类型的\",{\"1\":{\"858\":1}}],[\"mongodb命令使用方法\",{\"0\":{\"854\":1}}],[\"mongodb启动是\",{\"1\":{\"852\":1}}],[\"mongodb所绑定的ip地址\",{\"1\":{\"852\":1}}],[\"mongodb中可以建立多个数据库\",{\"1\":{\"845\":1}}],[\"mongodb中的库就类似于传统关系型数据库中库的概念\",{\"1\":{\"845\":1}}],[\"mongodb中的文档可以是动态的\",{\"1\":{\"841\":1,\"887\":1}}],[\"mongodb可以作为数据集成和分析平台的数据存储引擎\",{\"1\":{\"843\":1}}],[\"mongodb可以存储和管理游戏数据\",{\"1\":{\"843\":1}}],[\"mongodb可以存储和管理用户订单\",{\"1\":{\"843\":1}}],[\"mongodb可以存储和管理用户信息\",{\"1\":{\"843\":1}}],[\"mongodb可以存储和管理传感器数据\",{\"1\":{\"843\":1}}],[\"mongodb的命令行工具和客户端工具\",{\"0\":{\"853\":1}}],[\"mongodb的核心概念\",{\"0\":{\"844\":1}}],[\"mongodb的高度可扩展性\",{\"1\":{\"843\":1}}],[\"mongodb的语法简单\",{\"1\":{\"842\":1}}],[\"mongodb的文档是基于bson\",{\"1\":{\"842\":1}}],[\"mongodb支持各种类型的查询\",{\"1\":{\"842\":1}}],[\"mongodb使用内存映射文件\",{\"1\":{\"842\":1}}],[\"mongodb还支持索引和聚合操作\",{\"1\":{\"842\":1}}],[\"mongodb还支持嵌套文档和数组\",{\"1\":{\"842\":1}}],[\"mongodb还支持水平扩展\",{\"1\":{\"842\":1}}],[\"mongodb将文档组织为集合\",{\"1\":{\"841\":1,\"887\":1}}],[\"mongodb是一种分布式数据库\",{\"1\":{\"842\":1}}],[\"mongodb是一个基于文档的数据库\",{\"1\":{\"841\":1,\"887\":1}}],[\"mongodb是一个基于分布式文件存储\",{\"1\":{\"841\":1,\"887\":1}}],[\"mongodb是一个文档数据库\",{\"1\":{\"827\":1}}],[\"mongodb是什么\",{\"0\":{\"841\":1}}],[\"mongodb在go里面使用了以下几种类型来映射数据库中的文档\",{\"1\":{\"831\":1}}],[\"mongodb在go这方面的库比较少\",{\"1\":{\"828\":1}}],[\"mongodb文档\",{\"1\":{\"827\":1}}],[\"mongodb到mysql\",{\"1\":{\"576\":1,\"648\":1}}],[\"mongodb\",{\"0\":{\"827\":1,\"840\":1,\"871\":1,\"879\":1,\"882\":1,\"883\":1,\"884\":1},\"1\":{\"460\":1,\"827\":2,\"828\":4,\"829\":1,\"830\":4,\"831\":1,\"832\":1,\"835\":1,\"836\":1,\"837\":1,\"838\":1,\"841\":1,\"846\":1,\"847\":2,\"848\":1,\"849\":2,\"851\":3,\"852\":15,\"853\":1,\"858\":1,\"876\":2,\"877\":1,\"878\":2,\"881\":2,\"882\":2,\"883\":2,\"884\":3,\"885\":1,\"886\":1,\"907\":1}}],[\"mongo还提供了replace\",{\"1\":{\"836\":1}}],[\"mongo\",{\"1\":{\"828\":2,\"829\":2,\"830\":7,\"831\":2,\"832\":2,\"835\":2,\"836\":2,\"837\":2,\"838\":3,\"852\":3,\"861\":3,\"878\":2}}],[\"mongo数据库各自的特点以及适合的使用场景是什么\",{\"1\":{\"594\":1,\"666\":1}}],[\"mongo已有数据\",{\"1\":{\"576\":1,\"648\":1}}],[\"money\",{\"1\":{\"133\":1,\"366\":1,\"367\":3,\"368\":7,\"374\":1}}],[\"monkey\",{\"1\":{\"122\":1}}],[\"mock\",{\"1\":{\"122\":2}}],[\"mohae\",{\"1\":{\"122\":1}}],[\"modify\",{\"1\":{\"515\":4}}],[\"modifiedcount\",{\"1\":{\"836\":1}}],[\"modified\",{\"1\":{\"22\":1,\"743\":2,\"1133\":1}}],[\"mod中的指令\",{\"1\":{\"465\":1}}],[\"mod中指定的本地依赖计算哈希值\",{\"1\":{\"460\":1}}],[\"mod大多数工具都是针对开源项目而言的\",{\"1\":{\"461\":1}}],[\"mod两个文件的哈希值\",{\"1\":{\"460\":1}}],[\"mod会表现出不同的行为\",{\"1\":{\"459\":1}}],[\"mod目录下\",{\"1\":{\"457\":1}}],[\"mod进行项目管理时\",{\"1\":{\"457\":1}}],[\"modcache\",{\"1\":{\"456\":1,\"457\":1}}],[\"mod仅仅只有这些是完全不够的\",{\"1\":{\"455\":1}}],[\"mod的基本使用\",{\"1\":{\"455\":1}}],[\"mod文件引用最新版本\",{\"1\":{\"463\":1}}],[\"mod文件将依赖重定向到本地文件\",{\"1\":{\"463\":1}}],[\"mod文件为指定版本\",{\"1\":{\"463\":1}}],[\"mod文件的情况下导入其它模块\",{\"1\":{\"463\":1}}],[\"mod文件的内容\",{\"1\":{\"462\":1}}],[\"mod文件的哈希值\",{\"1\":{\"460\":1}}],[\"mod文件支持replace指令\",{\"1\":{\"462\":1}}],[\"mod文件是无法保证的\",{\"1\":{\"460\":1}}],[\"mod文件是非常有必要的\",{\"1\":{\"459\":1}}],[\"mod文件中\",{\"1\":{\"459\":1}}],[\"mod文件中只能出现一个module关键字\",{\"1\":{\"459\":1}}],[\"mod文件可以发现它的module名\",{\"1\":{\"459\":1}}],[\"mod文件加载的\",{\"1\":{\"458\":1}}],[\"mod文件会发现没有了gin依赖\",{\"1\":{\"453\":1}}],[\"mod文件\",{\"1\":{\"453\":1,\"456\":1,\"459\":2,\"460\":3,\"463\":1}}],[\"mod文件所在的路径\",{\"1\":{\"400\":1}}],[\"mod=mod\",{\"1\":{\"450\":1}}],[\"mod项目都会生成一个go\",{\"1\":{\"459\":1}}],[\"mod项目\",{\"1\":{\"443\":1}}],[\"module=\",{\"1\":{\"1165\":1}}],[\"module关键字声明了当前项目的模块名\",{\"1\":{\"459\":1}}],[\"module项目共享该目录下的缓存\",{\"1\":{\"457\":1}}],[\"module\",{\"0\":{\"1152\":1},\"1\":{\"444\":2,\"445\":1,\"453\":1,\"459\":5,\"1116\":3,\"1132\":3,\"1162\":1,\"1163\":1,\"1164\":15,\"1173\":3}}],[\"module本质上是基于vcs\",{\"1\":{\"443\":1}}],[\"modules下查看已经安装的模块\",{\"1\":{\"1165\":1}}],[\"modules\",{\"1\":{\"166\":1,\"442\":1,\"451\":1,\"1116\":4,\"1222\":1}}],[\"mod这款官方的依赖管理工具\",{\"1\":{\"442\":1}}],[\"mode=stable\",{\"1\":{\"1219\":1}}],[\"mode=release\",{\"1\":{\"453\":1}}],[\"models\",{\"1\":{\"1238\":1}}],[\"model\",{\"1\":{\"746\":2,\"754\":1,\"881\":5,\"884\":4,\"1244\":1,\"1245\":1}}],[\"modeperm\",{\"1\":{\"400\":2}}],[\"modetype\",{\"1\":{\"400\":2}}],[\"modetemporary\",{\"1\":{\"400\":2}}],[\"modeirregular\",{\"1\":{\"400\":2}}],[\"modechardevice\",{\"1\":{\"400\":2}}],[\"modesticky\",{\"1\":{\"400\":2}}],[\"modesetgid\",{\"1\":{\"400\":2}}],[\"modesetuid\",{\"1\":{\"400\":2}}],[\"modesocket\",{\"1\":{\"400\":2}}],[\"modesymlink\",{\"1\":{\"400\":2}}],[\"modenamedpipe\",{\"1\":{\"400\":2}}],[\"modedevice\",{\"1\":{\"400\":3}}],[\"modedir\",{\"1\":{\"400\":2}}],[\"modeexclusive\",{\"1\":{\"400\":2}}],[\"modeappend\",{\"1\":{\"400\":2}}],[\"mode\",{\"1\":{\"326\":1,\"410\":7,\"449\":5,\"453\":2,\"1003\":1,\"1004\":3,\"1010\":1}}],[\"modernc\",{\"1\":{\"460\":1}}],[\"modern\",{\"1\":{\"122\":3,\"453\":4,\"459\":2}}],[\"mod\",{\"0\":{\"459\":1},\"1\":{\"312\":1,\"442\":2,\"444\":1,\"445\":3,\"449\":9,\"453\":3,\"456\":9,\"457\":2,\"459\":3,\"460\":5,\"1243\":1,\"1349\":2}}],[\"mirantis\",{\"1\":{\"1223\":2}}],[\"mirrors\",{\"1\":{\"774\":2,\"1184\":1,\"1220\":1,\"1221\":3,\"1222\":3}}],[\"mirror\",{\"1\":{\"77\":1,\"774\":1}}],[\"migrations\",{\"1\":{\"1076\":1,\"1078\":6}}],[\"middleawares\",{\"1\":{\"1087\":1}}],[\"middlewares\",{\"1\":{\"1087\":2,\"1092\":1}}],[\"middleware\",{\"0\":{\"1462\":1},\"1\":{\"453\":1}}],[\"mid\",{\"1\":{\"795\":1}}],[\"millis\",{\"1\":{\"721\":2,\"724\":1,\"768\":1}}],[\"milliseconds\",{\"1\":{\"967\":2,\"970\":1,\"997\":1,\"1000\":1,\"1003\":1,\"1004\":3}}],[\"millisecond\",{\"1\":{\"396\":2,\"412\":6,\"417\":1,\"421\":2,\"426\":1,\"427\":4,\"428\":1,\"429\":2,\"430\":2,\"431\":4,\"432\":4,\"1430\":2}}],[\"mib\",{\"1\":{\"449\":1}}],[\"miki\",{\"1\":{\"344\":1}}],[\"mike\",{\"1\":{\"269\":1,\"338\":1,\"344\":1,\"379\":5,\"832\":1,\"834\":2,\"1380\":1,\"1381\":1,\"1422\":1}}],[\"missing\",{\"1\":{\"211\":1,\"221\":1}}],[\"mismatched\",{\"1\":{\"209\":1,\"381\":1,\"383\":1}}],[\"mixed\",{\"1\":{\"822\":3}}],[\"mix\",{\"1\":{\"126\":1}}],[\"minute\",{\"1\":{\"1430\":2}}],[\"minutes和\",{\"1\":{\"1029\":1}}],[\"minduration\",{\"1\":{\"1430\":1}}],[\"min=6\",{\"1\":{\"1289\":1}}],[\"minint64\",{\"1\":{\"1343\":1}}],[\"minint32\",{\"1\":{\"1343\":1}}],[\"minint16\",{\"1\":{\"1343\":1}}],[\"minint8\",{\"1\":{\"1343\":1}}],[\"minint\",{\"1\":{\"1343\":1}}],[\"minidleconns\",{\"1\":{\"911\":1}}],[\"minimizing\",{\"1\":{\"477\":2}}],[\"minimum\",{\"1\":{\"328\":1,\"702\":2}}],[\"minimp3\",{\"1\":{\"126\":1}}],[\"minretrybackoff\",{\"1\":{\"911\":1}}],[\"minor\",{\"1\":{\"455\":2,\"638\":1}}],[\"minval\",{\"1\":{\"209\":1}}],[\"min草图\",{\"1\":{\"127\":1}}],[\"min\",{\"1\":{\"127\":2,\"209\":1,\"639\":1,\"949\":1,\"974\":7,\"985\":1,\"1029\":1,\"1195\":2,\"1196\":1,\"1197\":3,\"1347\":1}}],[\"mine\",{\"1\":{\"124\":1}}],[\"mime\",{\"1\":{\"124\":1,\"1123\":1,\"1130\":1,\"1131\":1,\"1158\":1}}],[\"microsecond\",{\"1\":{\"1430\":2}}],[\"microsoft\",{\"1\":{\"124\":1,\"143\":1}}],[\"micro\",{\"1\":{\"128\":1}}],[\"microcosm\",{\"1\":{\"122\":1}}],[\"mit\",{\"1\":{\"111\":2,\"1427\":2,\"1428\":2}}],[\"mq功能较为完善\",{\"1\":{\"1054\":1}}],[\"mqttpaho\",{\"1\":{\"145\":1}}],[\"mqttcli\",{\"1\":{\"122\":1}}],[\"mqtt\",{\"1\":{\"122\":1,\"1057\":2}}],[\"mq\",{\"1\":{\"1051\":1,\"1054\":1,\"1061\":2,\"1062\":2,\"1197\":1,\"1198\":1},\"2\":{\"88\":1,\"1015\":1,\"1059\":1,\"1069\":1}}],[\"mdev\",{\"1\":{\"1195\":2,\"1196\":1,\"1197\":3}}],[\"md2man\",{\"1\":{\"454\":1}}],[\"mdns\",{\"1\":{\"145\":1}}],[\"md5+拼接指定的key或者之类的\",{\"1\":{\"625\":1,\"697\":1}}],[\"md5\",{\"1\":{\"124\":1}}],[\"md文件\",{\"1\":{\"65\":1}}],[\"md链接\",{\"1\":{\"65\":1}}],[\"md后缀转换为\",{\"1\":{\"65\":1}}],[\"md跳转到guide\",{\"1\":{\"65\":1}}],[\"md中链接到advanced\",{\"1\":{\"65\":1}}],[\"md\",{\"1\":{\"65\":8,\"449\":2,\"457\":1,\"463\":1}}],[\"m\",{\"1\":{\"55\":1,\"84\":1,\"262\":1,\"264\":7,\"317\":5,\"318\":2,\"319\":2,\"320\":4,\"323\":1,\"355\":1,\"356\":1,\"393\":2,\"434\":22,\"435\":1,\"436\":6,\"449\":6,\"456\":1,\"459\":1,\"541\":2,\"542\":1,\"549\":1,\"556\":3,\"579\":1,\"635\":3,\"638\":1,\"649\":3,\"651\":5,\"654\":3,\"791\":1,\"820\":1,\"831\":3,\"834\":1,\"981\":2,\"1158\":1,\"1164\":5,\"1174\":2,\"1244\":1,\"1253\":1,\"1256\":1,\"1260\":1,\"1264\":1,\"1289\":1}}],[\"masquerade\",{\"1\":{\"1197\":1}}],[\"master节点查询加入的命令\",{\"1\":{\"1226\":1}}],[\"master节点和slave节点若是断开连接\",{\"1\":{\"990\":1}}],[\"master1\",{\"1\":{\"1225\":4,\"1226\":1,\"1227\":1,\"1228\":2}}],[\"master是root用户执行的\",{\"1\":{\"1131\":1}}],[\"master通过主进程fork了三个工作worker进程\",{\"1\":{\"1128\":1}}],[\"master和worker是一个进程模型\",{\"1\":{\"1127\":1}}],[\"master会监控worker\",{\"1\":{\"1127\":1}}],[\"master会把所有的请求信号\",{\"1\":{\"1127\":1}}],[\"master进程有且只有一个\",{\"1\":{\"1126\":1}}],[\"master进程\",{\"1\":{\"1126\":1}}],[\"master端同步数据是非阻塞的\",{\"1\":{\"990\":1}}],[\"master负责写\",{\"1\":{\"990\":1}}],[\"masterauth\",{\"1\":{\"965\":1,\"993\":2,\"1010\":1}}],[\"master数据库服务的端口\",{\"1\":{\"822\":1}}],[\"master的ip地址\",{\"1\":{\"822\":1}}],[\"master服务器通过show\",{\"1\":{\"822\":1}}],[\"master对外映射的端口是3306\",{\"1\":{\"822\":1}}],[\"master组件\",{\"1\":{\"655\":1}}],[\"master\",{\"1\":{\"31\":1,\"58\":1,\"618\":1,\"690\":1,\"768\":1,\"769\":1,\"770\":1,\"822\":18,\"824\":1,\"825\":12,\"831\":1,\"832\":1,\"835\":1,\"836\":1,\"837\":1,\"838\":1,\"990\":2,\"993\":10,\"996\":1,\"999\":1,\"1000\":2,\"1006\":1,\"1007\":1,\"1010\":9,\"1047\":4,\"1164\":2,\"1165\":1,\"1195\":2,\"1223\":2,\"1225\":1}}],[\"ma\",{\"1\":{\"726\":2}}],[\"may\",{\"1\":{\"470\":1}}],[\"major\",{\"1\":{\"455\":2,\"638\":1}}],[\"mall\",{\"1\":{\"1087\":2,\"1092\":1}}],[\"malloc\",{\"1\":{\"303\":2}}],[\"malgo\",{\"1\":{\"126\":1}}],[\"manifests\",{\"1\":{\"1228\":1}}],[\"many2\",{\"1\":{\"884\":2}}],[\"many\",{\"1\":{\"881\":2,\"884\":2,\"1010\":2}}],[\"manage\",{\"1\":{\"1197\":1}}],[\"management\",{\"1\":{\"846\":1}}],[\"manager功能\",{\"1\":{\"774\":1}}],[\"manager\",{\"1\":{\"655\":1,\"774\":1,\"1055\":1,\"1184\":2,\"1221\":1}}],[\"manual\",{\"1\":{\"827\":1,\"885\":1}}],[\"man接口方法集是person的超集\",{\"1\":{\"293\":1}}],[\"man\",{\"1\":{\"293\":1,\"1440\":2}}],[\"maxduration\",{\"1\":{\"1430\":1}}],[\"maxfloat64\",{\"1\":{\"1344\":1}}],[\"maxfloat32\",{\"1\":{\"1344\":1}}],[\"maxuint64\",{\"1\":{\"1343\":1}}],[\"maxuint32\",{\"1\":{\"1343\":1}}],[\"maxuint16\",{\"1\":{\"1343\":1}}],[\"maxuint8\",{\"1\":{\"1343\":1}}],[\"maxuint\",{\"1\":{\"1343\":1}}],[\"maxint64\",{\"1\":{\"1343\":1}}],[\"maxint32\",{\"1\":{\"1343\":1}}],[\"maxint16\",{\"1\":{\"1343\":1}}],[\"maxint\",{\"1\":{\"1343\":1}}],[\"maxint8\",{\"1\":{\"302\":2,\"1343\":1}}],[\"maxheaderbytes\",{\"1\":{\"1336\":1}}],[\"maxbackup\",{\"1\":{\"1307\":2}}],[\"maxbackups\",{\"1\":{\"1304\":1,\"1307\":10}}],[\"maxage\",{\"1\":{\"1307\":11}}],[\"maxsize\",{\"1\":{\"1303\":4,\"1304\":2,\"1307\":11}}],[\"max=12\",{\"1\":{\"1289\":1}}],[\"maxmemory\",{\"1\":{\"965\":1}}],[\"maxclients\",{\"1\":{\"965\":2}}],[\"maxconnage\",{\"1\":{\"911\":1}}],[\"maxretrybackoff\",{\"1\":{\"911\":1}}],[\"maxretries\",{\"1\":{\"911\":1}}],[\"max函数优化\",{\"1\":{\"821\":1}}],[\"max函数只支持浮点数\",{\"1\":{\"209\":1}}],[\"max\",{\"1\":{\"209\":1,\"250\":2,\"364\":2,\"365\":1,\"639\":1,\"645\":1,\"724\":1,\"741\":2,\"745\":1,\"768\":1,\"820\":1,\"821\":1,\"949\":1,\"965\":7,\"974\":7,\"1029\":1,\"1161\":1,\"1163\":10,\"1164\":2,\"1195\":2,\"1196\":1,\"1197\":3,\"1346\":1}}],[\"maxval\",{\"1\":{\"209\":1}}],[\"mac地址\",{\"0\":{\"1367\":1}}],[\"macaddress\",{\"1\":{\"1197\":3}}],[\"mac或windows\",{\"1\":{\"877\":1}}],[\"machine\",{\"1\":{\"651\":3,\"654\":1}}],[\"macho\",{\"1\":{\"124\":1}}],[\"mac\",{\"1\":{\"138\":2}}],[\"macos和linux系统\",{\"1\":{\"875\":1}}],[\"macos\",{\"1\":{\"138\":4,\"153\":1}}],[\"maintainer\",{\"1\":{\"1193\":1}}],[\"mainwait\",{\"1\":{\"422\":8}}],[\"mainflux\",{\"1\":{\"140\":1}}],[\"main\",{\"1\":{\"137\":1,\"172\":2,\"175\":7,\"176\":1,\"177\":2,\"187\":1,\"189\":2,\"206\":2,\"209\":3,\"210\":2,\"214\":2,\"217\":2,\"218\":2,\"219\":2,\"220\":2,\"221\":2,\"223\":1,\"224\":2,\"225\":1,\"226\":1,\"228\":3,\"229\":2,\"230\":4,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":2,\"236\":2,\"241\":3,\"247\":1,\"248\":2,\"250\":1,\"251\":3,\"253\":5,\"254\":3,\"255\":2,\"256\":2,\"257\":3,\"258\":5,\"259\":1,\"260\":3,\"261\":3,\"262\":2,\"263\":2,\"264\":2,\"265\":1,\"266\":1,\"269\":2,\"274\":1,\"275\":6,\"276\":3,\"281\":2,\"282\":2,\"283\":3,\"284\":1,\"285\":6,\"286\":2,\"287\":6,\"292\":1,\"293\":2,\"294\":3,\"297\":4,\"298\":4,\"299\":2,\"300\":4,\"301\":2,\"302\":3,\"303\":8,\"304\":2,\"305\":2,\"306\":4,\"307\":3,\"308\":3,\"309\":2,\"310\":4,\"312\":6,\"313\":3,\"314\":2,\"317\":14,\"318\":16,\"319\":7,\"320\":22,\"323\":6,\"324\":4,\"326\":7,\"338\":1,\"340\":3,\"341\":1,\"344\":1,\"350\":1,\"351\":1,\"352\":2,\"353\":1,\"354\":1,\"355\":1,\"356\":1,\"357\":1,\"358\":1,\"359\":1,\"360\":2,\"361\":1,\"362\":1,\"364\":1,\"365\":1,\"367\":2,\"368\":2,\"369\":1,\"370\":5,\"371\":1,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":2,\"381\":2,\"388\":3,\"393\":9,\"394\":1,\"395\":1,\"396\":5,\"397\":3,\"398\":1,\"400\":4,\"401\":3,\"402\":3,\"403\":3,\"404\":1,\"405\":2,\"406\":1,\"408\":2,\"409\":1,\"412\":5,\"414\":1,\"415\":1,\"416\":2,\"417\":4,\"418\":8,\"419\":2,\"420\":3,\"421\":7,\"422\":3,\"426\":1,\"427\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"434\":1,\"435\":1,\"436\":3,\"437\":1,\"439\":2,\"441\":2,\"446\":3,\"448\":2,\"449\":12,\"453\":3,\"454\":1,\"463\":3,\"477\":1,\"481\":1,\"484\":1,\"486\":2,\"491\":7,\"492\":3,\"494\":2,\"498\":1,\"504\":1,\"515\":3,\"516\":1,\"548\":1,\"556\":1,\"557\":1,\"584\":2,\"630\":2,\"633\":2,\"634\":1,\"635\":1,\"649\":1,\"651\":1,\"654\":2,\"656\":4,\"704\":1,\"705\":1,\"706\":1,\"707\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":3,\"744\":2,\"745\":2,\"746\":2,\"748\":2,\"751\":2,\"754\":2,\"756\":2,\"830\":2,\"884\":2,\"893\":1,\"897\":1,\"1035\":2,\"1036\":2,\"1037\":1,\"1047\":2,\"1130\":3,\"1131\":1,\"1141\":1,\"1158\":2,\"1160\":1,\"1164\":2,\"1165\":2,\"1231\":1,\"1275\":2,\"1277\":2,\"1280\":1,\"1281\":1,\"1282\":1,\"1283\":1,\"1289\":1,\"1311\":1,\"1312\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1319\":1,\"1320\":1,\"1321\":2,\"1328\":4,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1336\":1,\"1337\":2,\"1338\":1,\"1339\":1,\"1340\":2,\"1341\":1,\"1367\":2,\"1368\":2,\"1369\":2,\"1370\":2,\"1371\":2,\"1372\":2,\"1373\":4,\"1374\":4,\"1376\":1,\"1377\":1,\"1378\":1,\"1379\":1,\"1380\":1,\"1381\":1,\"1415\":2,\"1417\":4,\"1419\":1,\"1425\":1,\"1426\":1,\"1428\":1,\"1432\":1,\"1433\":1,\"1434\":1,\"1435\":1,\"1440\":1,\"1441\":1,\"1442\":1,\"1443\":4,\"1444\":1,\"1445\":2,\"1446\":1,\"1447\":1,\"1448\":1}}],[\"mailservice\",{\"1\":{\"427\":2}}],[\"mailhog\",{\"1\":{\"129\":1}}],[\"mailgun\",{\"1\":{\"129\":1}}],[\"mailchain\",{\"1\":{\"129\":1}}],[\"mail\",{\"1\":{\"124\":3,\"129\":1,\"427\":8,\"1321\":4}}],[\"map操作包\",{\"1\":{\"1308\":1}}],[\"maps\",{\"1\":{\"1308\":1}}],[\"mapstructure\",{\"1\":{\"1303\":13}}],[\"map格式表单\",{\"1\":{\"1281\":1}}],[\"map<string\",{\"1\":{\"1166\":6}}],[\"mapping表有一个图映射角色到操作\",{\"1\":{\"1262\":1}}],[\"mapping\",{\"1\":{\"717\":1,\"741\":2,\"745\":2,\"1265\":4,\"1266\":4,\"1405\":1}}],[\"mappings\",{\"1\":{\"704\":2,\"705\":1,\"717\":1,\"718\":1,\"719\":1,\"720\":1,\"721\":2,\"723\":1,\"724\":1,\"726\":1,\"729\":1,\"730\":1,\"732\":1,\"733\":1,\"745\":1}}],[\"mapper\",{\"1\":{\"717\":3,\"774\":1,\"1220\":1}}],[\"map安全\",{\"1\":{\"595\":1,\"667\":1}}],[\"map怎么做并发安全\",{\"1\":{\"635\":1}}],[\"map怎么用\",{\"1\":{\"595\":1,\"667\":1}}],[\"map怎么去做并发安全\",{\"1\":{\"563\":1,\"635\":1}}],[\"map并发访问会怎么样\",{\"1\":{\"563\":1,\"635\":2}}],[\"map并不会\",{\"1\":{\"320\":1}}],[\"map并不是一个并发安全的数据结构\",{\"1\":{\"266\":1}}],[\"map中hash冲突怎么解决\",{\"1\":{\"562\":1,\"634\":2}}],[\"map内部不直接使用map结构\",{\"1\":{\"558\":1}}],[\"map内部有读写检测机制\",{\"1\":{\"266\":1}}],[\"map底层是一个散列表\",{\"1\":{\"536\":1}}],[\"map结构体来替代使用\",{\"1\":{\"512\":1}}],[\"mapint\",{\"1\":{\"512\":6}}],[\"map就可以避免这个问题\",{\"1\":{\"436\":1}}],[\"map是否安全\",{\"1\":{\"580\":1,\"652\":1}}],[\"map是开箱即用的\",{\"1\":{\"558\":1}}],[\"map是非并发安全\",{\"1\":{\"512\":1}}],[\"map是官方提供的一种并发安全map的实现\",{\"1\":{\"436\":1}}],[\"map是引用类型\",{\"1\":{\"259\":1}}],[\"map类型\",{\"1\":{\"294\":1}}],[\"map来替代\",{\"1\":{\"266\":1}}],[\"map存值的方式也类似数组存值一样\",{\"1\":{\"261\":1}}],[\"map对于不存的键其返回值是对应类型的零值\",{\"1\":{\"260\":1}}],[\"map的key是有顺序的\",{\"1\":{\"621\":1,\"693\":1}}],[\"map的安全锁\",{\"0\":{\"558\":1},\"1\":{\"555\":1}}],[\"map的实现\",{\"0\":{\"536\":1}}],[\"map的实现是基于哈希桶\",{\"1\":{\"258\":1}}],[\"map的底层实现\",{\"1\":{\"530\":1}}],[\"map的键值对的键是唯一的\",{\"1\":{\"513\":1}}],[\"map的键类型必须是可比较的\",{\"1\":{\"259\":1}}],[\"map的性能要比map低10\",{\"1\":{\"436\":1}}],[\"map的基本使用\",{\"1\":{\"436\":1}}],[\"map\",{\"0\":{\"376\":1,\"436\":1},\"1\":{\"128\":1,\"178\":1,\"201\":1,\"259\":7,\"260\":3,\"261\":4,\"262\":7,\"263\":2,\"264\":3,\"265\":2,\"266\":3,\"277\":1,\"294\":3,\"323\":1,\"338\":1,\"351\":3,\"352\":1,\"360\":4,\"376\":2,\"383\":1,\"384\":6,\"394\":2,\"436\":10,\"509\":1,\"512\":3,\"524\":1,\"529\":1,\"537\":1,\"554\":1,\"556\":3,\"558\":1,\"576\":1,\"584\":1,\"611\":1,\"619\":1,\"621\":1,\"633\":1,\"634\":1,\"635\":8,\"638\":1,\"648\":1,\"649\":7,\"651\":2,\"654\":2,\"656\":7,\"683\":1,\"691\":1,\"693\":1,\"748\":1,\"831\":1,\"927\":7,\"928\":1,\"929\":1,\"930\":1,\"931\":1,\"932\":1,\"1092\":2,\"1166\":25,\"1281\":1,\"1289\":1,\"1302\":1,\"1405\":5,\"1415\":1,\"1417\":5,\"1419\":1,\"1420\":2,\"1422\":2,\"1423\":2,\"1424\":1,\"1425\":6,\"1426\":1,\"1427\":1,\"1428\":1,\"1440\":2}}],[\"mafsa\",{\"1\":{\"127\":1}}],[\"mariadb\",{\"1\":{\"876\":1,\"890\":1}}],[\"markup\",{\"1\":{\"1310\":1}}],[\"markoffset\",{\"1\":{\"1047\":2}}],[\"mark\",{\"1\":{\"836\":2}}],[\"markdown\",{\"1\":{\"64\":4,\"65\":3}}],[\"married\",{\"1\":{\"584\":1,\"656\":5}}],[\"marshalindent\",{\"1\":{\"1310\":1,\"1311\":1,\"1319\":2}}],[\"marshaling\",{\"1\":{\"467\":2}}],[\"marshaljson\",{\"1\":{\"754\":1}}],[\"marshal\",{\"1\":{\"584\":1,\"656\":3,\"1310\":1,\"1313\":1,\"1314\":1,\"1316\":1,\"1317\":1,\"1321\":1,\"1331\":1}}],[\"marscode插件\",{\"1\":{\"79\":1}}],[\"matedata\",{\"1\":{\"1215\":1}}],[\"matcher\",{\"0\":{\"1253\":1}}],[\"matchers\",{\"1\":{\"1244\":1,\"1256\":1,\"1260\":1,\"1264\":1}}],[\"matchedcount\",{\"1\":{\"836\":1,\"882\":2}}],[\"matchlabels\",{\"1\":{\"1215\":2}}],[\"matchquery\",{\"1\":{\"758\":2,\"763\":2,\"765\":2}}],[\"match\",{\"1\":{\"713\":1,\"729\":2,\"741\":1,\"766\":1,\"972\":1,\"973\":1,\"974\":1}}],[\"mattn\",{\"1\":{\"453\":2,\"454\":1,\"459\":1}}],[\"matter\",{\"1\":{\"0\":1}}],[\"math包下远不止以上函数\",{\"1\":{\"1364\":1}}],[\"math是go中的基本数学操作库\",{\"1\":{\"1342\":1}}],[\"math\",{\"0\":{\"1342\":1},\"1\":{\"124\":2,\"261\":4,\"262\":4,\"263\":3,\"280\":1,\"302\":2,\"471\":1,\"1047\":1,\"1165\":3,\"1308\":5,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":2,\"1350\":2,\"1351\":3,\"1352\":2,\"1353\":1,\"1354\":1,\"1355\":2,\"1356\":4,\"1357\":1,\"1358\":2,\"1359\":1,\"1360\":2,\"1361\":4,\"1362\":2,\"1363\":2,\"1364\":2}}],[\"mathutil\",{\"1\":{\"36\":3}}],[\"make编译\",{\"0\":{\"1117\":1}}],[\"makecache\",{\"1\":{\"1078\":1,\"1184\":1,\"1220\":1,\"1221\":1}}],[\"makechan\",{\"1\":{\"377\":4}}],[\"make分配内存并为对象初始化值\",{\"1\":{\"654\":1}}],[\"make初始化这些类型并返回引用\",{\"1\":{\"654\":1}}],[\"make和new的区别\",{\"1\":{\"582\":1,\"654\":2}}],[\"make和new的区别是什么\",{\"1\":{\"530\":1}}],[\"make函数\",{\"0\":{\"533\":1},\"1\":{\"512\":1}}],[\"make函数接收两个参数\",{\"1\":{\"414\":1}}],[\"make函数接收三个参数\",{\"1\":{\"243\":1}}],[\"makefunc\",{\"1\":{\"378\":2}}],[\"makemapwithsize\",{\"1\":{\"376\":2}}],[\"makeslice\",{\"1\":{\"322\":2,\"326\":3,\"327\":3,\"375\":2}}],[\"make\",{\"1\":{\"5\":3,\"224\":1,\"243\":1,\"244\":1,\"247\":1,\"249\":3,\"256\":1,\"259\":2,\"261\":3,\"262\":1,\"263\":1,\"265\":1,\"266\":1,\"277\":4,\"287\":3,\"318\":6,\"319\":5,\"320\":5,\"338\":1,\"379\":2,\"401\":1,\"412\":2,\"414\":3,\"415\":1,\"416\":2,\"417\":7,\"418\":5,\"419\":1,\"420\":3,\"421\":14,\"434\":2,\"436\":1,\"511\":4,\"512\":1,\"545\":2,\"556\":1,\"630\":1,\"633\":1,\"635\":1,\"649\":1,\"651\":2,\"654\":5,\"964\":1,\"1112\":1,\"1117\":1,\"1118\":1,\"1165\":2,\"1289\":1,\"1304\":1,\"1374\":1,\"1413\":1,\"1440\":2}}],[\"已支付\",{\"1\":{\"653\":1}}],[\"已完成\",{\"1\":{\"638\":1}}],[\"已抢\",{\"1\":{\"638\":2}}],[\"已读乱回\",{\"1\":{\"615\":1,\"687\":1}}],[\"已经变成了\",{\"1\":{\"1422\":1}}],[\"已经\",{\"1\":{\"1280\":2}}],[\"已经很简化部署了\",{\"1\":{\"1212\":1}}],[\"已经存在并且是一个字符串\",{\"1\":{\"970\":1}}],[\"已经存活一段时间的对象\",{\"1\":{\"553\":1}}],[\"已经建立了索引\",{\"1\":{\"614\":1,\"686\":1}}],[\"已经拿到的offer\",{\"1\":{\"599\":1,\"671\":1}}],[\"已经释放\",{\"1\":{\"557\":1}}],[\"已经添加语料库中的\",{\"1\":{\"477\":1}}],[\"已经初始化完毕了\",{\"1\":{\"434\":1}}],[\"已经取好了别名\",{\"1\":{\"301\":1}}],[\"已经成为了最流行的版本控制工具\",{\"1\":{\"12\":1}}],[\"已经成为最大的服务器系统软件了\",{\"1\":{\"12\":1}}],[\"已知这些类型的占用字节数\",{\"1\":{\"273\":1}}],[\"已修改状态\",{\"1\":{\"22\":1}}],[\"已提交\",{\"1\":{\"22\":1}}],[\"已暂存状态\",{\"1\":{\"22\":1}}],[\"已跟踪\",{\"1\":{\"22\":1}}],[\"未创建管理员权限的\",{\"1\":{\"1235\":1}}],[\"未登陆\",{\"1\":{\"1092\":1}}],[\"未知\",{\"1\":{\"1072\":1}}],[\"未来在项目中\",{\"1\":{\"1197\":1}}],[\"未来可以通过网络来隔离项目\",{\"1\":{\"1197\":1}}],[\"未来开发\",{\"1\":{\"1194\":1}}],[\"未来的职业规划是向架构师方向发展\",{\"1\":{\"655\":1}}],[\"未来职业规划\",{\"1\":{\"583\":1,\"655\":2}}],[\"未执行的任务会被丢弃\",{\"1\":{\"645\":1}}],[\"未抢\",{\"1\":{\"638\":1}}],[\"未提交读有什么问题\",{\"1\":{\"566\":1,\"638\":1}}],[\"未初始化时为nil\",{\"1\":{\"529\":1}}],[\"未初始化时总有零值\",{\"1\":{\"528\":1}}],[\"未修改\",{\"1\":{\"515\":1}}],[\"未修改状态\",{\"1\":{\"22\":1}}],[\"未使用的变量是无法通过编译的\",{\"1\":{\"207\":1}}],[\"未被纳入版本控制\",{\"1\":{\"22\":1}}],[\"未跟踪\",{\"1\":{\"22\":1}}],[\"当指定时间到了以后\",{\"1\":{\"1433\":1}}],[\"当长度为0时\",{\"1\":{\"1424\":1}}],[\"当允许和拒绝同时存在时\",{\"1\":{\"1254\":1}}],[\"当匹配策略都是允许时\",{\"1\":{\"1254\":1}}],[\"当构建一个被继承的dockerfile时运行命令\",{\"1\":{\"1193\":1}}],[\"当客户端被路由到虚拟节点的时候其实是被路由到该虚拟节点所对应的真实节点\",{\"1\":{\"1165\":1}}],[\"当客户端连接数到达限制时\",{\"1\":{\"965\":1}}],[\"当b节点宕机后\",{\"1\":{\"1165\":1}}],[\"当b表数据多于a表中的数据时\",{\"1\":{\"821\":1}}],[\"当大量的请求到来的时候\",{\"1\":{\"1158\":1}}],[\"当大量消息积压的时候\",{\"1\":{\"1053\":1}}],[\"当服务器限制连接数时\",{\"1\":{\"1152\":1}}],[\"当服务器由于limit被限速或缓存时\",{\"1\":{\"1151\":1}}],[\"当服务器对多个索引做相交操作\",{\"1\":{\"816\":1}}],[\"当想要处理一个请求的时候\",{\"1\":{\"1147\":1}}],[\"当令牌桶满了的时候\",{\"1\":{\"1147\":1}}],[\"当水加的过快\",{\"1\":{\"1146\":1}}],[\"当worker进程在执行的时候\",{\"1\":{\"1131\":1}}],[\"当请求的数据包累积了到一定的大小的时候\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"当初那个简陋的消息队列\",{\"1\":{\"1067\":1}}],[\"当初始化数据库连接失败时\",{\"1\":{\"395\":1}}],[\"当该服务器的ip地址发生改变时\",{\"1\":{\"1029\":1}}],[\"当超过两天\",{\"1\":{\"1025\":1}}],[\"当新的数据写入时\",{\"1\":{\"1025\":1}}],[\"当失败时能自动平衡\",{\"1\":{\"1018\":1}}],[\"当主服务器停止时\",{\"1\":{\"1161\":1}}],[\"当主分区\",{\"1\":{\"1020\":1}}],[\"当主节点不可用时\",{\"1\":{\"1007\":1}}],[\"当主节点发生故障时\",{\"1\":{\"999\":1,\"1006\":2}}],[\"当主节点挂掉时\",{\"1\":{\"999\":1}}],[\"当主节点服务器写入数据时\",{\"1\":{\"990\":1}}],[\"当主机发生故障时\",{\"1\":{\"996\":1}}],[\"当主版本大于1时\",{\"1\":{\"459\":1}}],[\"当子进程处理完后会向父进程发送一个信号\",{\"1\":{\"981\":1}}],[\"当子协程发生panic时\",{\"1\":{\"396\":2}}],[\"当满足条件时\",{\"1\":{\"980\":1}}],[\"当且仅当所有给定\",{\"1\":{\"970\":1}}],[\"当中\",{\"1\":{\"967\":2}}],[\"当vm\",{\"1\":{\"965\":1}}],[\"当此方法处理\",{\"1\":{\"965\":1}}],[\"当redis以守护进程方式运行时\",{\"1\":{\"965\":1}}],[\"当开启一个事务后\",{\"1\":{\"897\":1}}],[\"当用ture的情况下河name\",{\"1\":{\"861\":1}}],[\"当用户请求抢单时\",{\"1\":{\"644\":1}}],[\"当显示不下的情况下\",{\"1\":{\"861\":1}}],[\"当a表数据多于b表中的数据时\",{\"1\":{\"821\":1}}],[\"当索引出现范围查找时\",{\"1\":{\"819\":1}}],[\"当对builder\",{\"1\":{\"1411\":1}}],[\"当对表的数据进行insert\",{\"1\":{\"809\":1}}],[\"当对一个无缓冲管道直接进行同步读写操作都会导致该协程阻塞\",{\"1\":{\"418\":1}}],[\"当数据量越大的时候\",{\"1\":{\"804\":1}}],[\"当数据量小的时候无伤大雅\",{\"1\":{\"474\":1}}],[\"当表中得数据还比较小得时候\",{\"1\":{\"800\":1}}],[\"当采用decimal数据类型的时候\",{\"1\":{\"791\":1}}],[\"当执行一条sql语句时\",{\"1\":{\"775\":1}}],[\"当执行的参数有多个包时\",{\"1\":{\"468\":1}}],[\"当\",{\"1\":{\"743\":1,\"965\":1}}],[\"当动态映射被启用时\",{\"1\":{\"734\":1}}],[\"当存储文档时\",{\"1\":{\"734\":1}}],[\"当集群中有多个elasticsearch节点时\",{\"1\":{\"734\":1}}],[\"当多个事务修改同一数据时\",{\"1\":{\"656\":1}}],[\"当不再需要访问共享资源时\",{\"1\":{\"654\":1}}],[\"当不再需要某一个依赖时\",{\"1\":{\"453\":1}}],[\"当访问某个键时\",{\"1\":{\"651\":1}}],[\"当切片扩展时\",{\"1\":{\"649\":1}}],[\"当切片的长度是一个变量的时候\",{\"1\":{\"320\":1}}],[\"当任务提交到线程池时\",{\"1\":{\"645\":1}}],[\"当线程池已满且队列也满时的处理方式\",{\"1\":{\"645\":1}}],[\"当缓存失效时\",{\"1\":{\"644\":1}}],[\"当填充因子超过\",{\"1\":{\"638\":1}}],[\"当实例化较为昂贵或初始化过程依赖外部条件时\",{\"1\":{\"637\":1}}],[\"当检测到网络拥塞时\",{\"1\":{\"636\":1}}],[\"当堆内存达到一定的阈值时\",{\"1\":{\"633\":1}}],[\"当时忘记自己是什么级别了\",{\"1\":{\"615\":1,\"687\":1}}],[\"当有节点宕机时会有什么问题\",{\"1\":{\"1165\":1}}],[\"当有服务器需要剔除\",{\"1\":{\"1164\":1}}],[\"当有一定数量实例和用户量时这种方案是否有缺陷\",{\"1\":{\"576\":1,\"648\":1}}],[\"当有多个case可用时\",{\"1\":{\"421\":1}}],[\"当有多个defer描述的函数时\",{\"1\":{\"283\":1}}],[\"当有多个同类型的具名返回值时\",{\"1\":{\"280\":1}}],[\"当作下游处理失败重新触发即可\",{\"1\":{\"576\":1,\"648\":1}}],[\"当栈内存增长到触发的阈值\",{\"1\":{\"553\":1}}],[\"当栈空间不足时会进行增长\",{\"1\":{\"310\":1}}],[\"当创建一个g\",{\"1\":{\"542\":1}}],[\"当做一个通知类型的通道\",{\"1\":{\"513\":1}}],[\"当反转函数返回error时\",{\"1\":{\"477\":1}}],[\"当参数不带\",{\"1\":{\"477\":1}}],[\"当单位为x时\",{\"1\":{\"469\":1}}],[\"当测试的标志参数位于以下集合中时\",{\"1\":{\"468\":1}}],[\"当包名为testdata时\",{\"1\":{\"467\":1}}],[\"当user模块测试完毕后\",{\"1\":{\"463\":1}}],[\"当这个项目在另一个人的环境中构建时\",{\"1\":{\"460\":1}}],[\"当patch版本发生变化时\",{\"1\":{\"455\":1}}],[\"当master服务设置了密码保护时\",{\"1\":{\"965\":1}}],[\"当major版本变化时\",{\"1\":{\"455\":1}}],[\"当minor版本变化时\",{\"1\":{\"455\":1}}],[\"当一些情况下\",{\"1\":{\"1443\":1}}],[\"当一切代码都编写并测试完毕过后\",{\"1\":{\"449\":1}}],[\"当一个请求提交给casbin时\",{\"1\":{\"1269\":1}}],[\"当一个数据被用到时\",{\"1\":{\"805\":1}}],[\"当一个字段无法确定唯一性的时候\",{\"1\":{\"793\":1}}],[\"当一个字段需要按照精确值进行过滤\",{\"1\":{\"719\":1}}],[\"当一个字段需要用于全文搜索\",{\"1\":{\"718\":1}}],[\"当一个对象改变状态时\",{\"1\":{\"654\":1}}],[\"当一个桶中的元素过多时\",{\"1\":{\"634\":1}}],[\"当一个变量的引用被返回到函数外部\",{\"1\":{\"633\":1}}],[\"当一个库被引用过后\",{\"1\":{\"450\":1}}],[\"当一个程序编写完毕后\",{\"1\":{\"315\":1}}],[\"当一个类型位于一个接口的类型集内\",{\"1\":{\"289\":1}}],[\"当一个类型的方法集是一个接口的方法集的超集时\",{\"1\":{\"289\":1}}],[\"当f\",{\"1\":{\"436\":1}}],[\"当使用go\",{\"1\":{\"457\":1}}],[\"当使用完对象后\",{\"1\":{\"435\":1}}],[\"当使用type关键字声明了一个新的类型时\",{\"1\":{\"340\":1}}],[\"当真正用到切片的时候\",{\"1\":{\"434\":2}}],[\"当在使用一些数据结构时\",{\"1\":{\"434\":1}}],[\"当第三个写协程更新完数据后\",{\"1\":{\"432\":1}}],[\"当调用cancelfunc时\",{\"1\":{\"427\":1}}],[\"当done管道没有关闭时\",{\"1\":{\"424\":1}}],[\"当上下文所做的工作应该取消时\",{\"1\":{\"424\":1}}],[\"当上层调用者想要判断错误的类型来做出不同的处理时\",{\"1\":{\"392\":1}}],[\"当计数变为负数\",{\"1\":{\"422\":1}}],[\"当select语句中什么都没有时\",{\"1\":{\"421\":1}}],[\"当无法成功读取数据时\",{\"1\":{\"420\":1}}],[\"当尝试对只读的管道写入数据时\",{\"1\":{\"419\":1}}],[\"当管道a可用时\",{\"1\":{\"421\":1}}],[\"当管道缓冲区为空或无缓冲时\",{\"1\":{\"420\":1}}],[\"当管道为nil时\",{\"1\":{\"418\":2}}],[\"当管道的缓冲区已满\",{\"1\":{\"418\":1}}],[\"当管道有了缓冲区\",{\"1\":{\"417\":1}}],[\"当读取一个缓冲区为空的管道时\",{\"1\":{\"418\":1}}],[\"当目录不为空时会返回错误\",{\"1\":{\"405\":1}}],[\"当以os\",{\"1\":{\"402\":1}}],[\"当容量不足时\",{\"1\":{\"401\":1,\"638\":1}}],[\"当成功读取到值时\",{\"1\":{\"436\":1}}],[\"当成功的打开文件后\",{\"1\":{\"401\":1}}],[\"当成while来使用\",{\"1\":{\"233\":1}}],[\"当打开的时候截断可写的文件\",{\"1\":{\"400\":1}}],[\"当写入文件时\",{\"1\":{\"400\":1}}],[\"当发生fatal时\",{\"1\":{\"398\":1}}],[\"当发生panic时\",{\"1\":{\"396\":1,\"397\":1}}],[\"当输出错误堆栈信息时\",{\"1\":{\"395\":1}}],[\"当程序中存在多个协程时\",{\"1\":{\"394\":1}}],[\"当类型变得越来越复杂时\",{\"1\":{\"382\":1}}],[\"当需要升级最新版本时\",{\"1\":{\"453\":1}}],[\"当需要修改反射值时\",{\"1\":{\"349\":1}}],[\"当需要访问类型相关信息时\",{\"1\":{\"349\":1}}],[\"当队列为空时\",{\"1\":{\"343\":1}}],[\"当传入时也依旧会无法通过编译\",{\"1\":{\"340\":1}}],[\"当确认以后不会再用到它时\",{\"1\":{\"320\":1}}],[\"当如下情况时\",{\"1\":{\"289\":1}}],[\"当外部请求数突然激增时\",{\"1\":{\"284\":1}}],[\"当它的参数是一个函数类型时\",{\"1\":{\"281\":1}}],[\"当函数没有返回值时\",{\"1\":{\"280\":1}}],[\"当省略字段名称时\",{\"1\":{\"268\":1}}],[\"当原slice容量\",{\"1\":{\"244\":1}}],[\"当原\",{\"1\":{\"244\":1}}],[\"当只保留循环条件时\",{\"1\":{\"233\":1}}],[\"当所有case都不匹配后\",{\"1\":{\"230\":1}}],[\"当涉及到函数调用时\",{\"1\":{\"208\":1}}],[\"当你新增或修改了某个单位文件\",{\"1\":{\"1223\":1}}],[\"当你设置这个值以后\",{\"1\":{\"1163\":1}}],[\"当你从redis连接池获取一个连接之后\",{\"1\":{\"911\":1}}],[\"当你用db\",{\"1\":{\"863\":1}}],[\"当你能确定类的实例化不依赖外部条件\",{\"1\":{\"637\":1}}],[\"当你在下载依赖时\",{\"1\":{\"443\":1}}],[\"当你不需要某一个变量时\",{\"1\":{\"207\":1}}],[\"当你导入后\",{\"1\":{\"175\":1}}],[\"当要声明多个不同类型的变量时\",{\"1\":{\"205\":1}}],[\"当要声明多个相同类型的变量时\",{\"1\":{\"205\":1}}],[\"当两个数字使用^时\",{\"1\":{\"179\":1}}],[\"当导入多个包时\",{\"1\":{\"175\":1}}],[\"当前文件将被关闭\",{\"1\":{\"1307\":1}}],[\"当前文件名\",{\"1\":{\"1223\":2}}],[\"当前登入用户\",{\"1\":{\"1223\":1}}],[\"当前容器对外保留出的端口\",{\"1\":{\"1193\":1}}],[\"当前新镜像是基于哪个镜像的\",{\"1\":{\"1193\":1}}],[\"当前连接请求的文件路径\",{\"1\":{\"1133\":1}}],[\"当前的unix时间戳\",{\"1\":{\"1133\":1}}],[\"当前请求的文档根目录或别名的真实路径\",{\"1\":{\"1133\":1}}],[\"当前请求的文档根目录或别名\",{\"1\":{\"1133\":1}}],[\"当前消费的分区是\",{\"1\":{\"1036\":1}}],[\"当前服务节点的密码\",{\"1\":{\"1010\":1}}],[\"当前redis服务以守护进程\",{\"1\":{\"993\":1}}],[\"当前节点名称\",{\"1\":{\"768\":1,\"769\":1,\"770\":1}}],[\"当前行业的语言都了解过哪些\",{\"1\":{\"607\":1,\"679\":1}}],[\"当前是第\",{\"1\":{\"557\":1}}],[\"当前上下文找不到就去父上下文找\",{\"1\":{\"426\":1}}],[\"当前协程就必须阻塞等待\",{\"1\":{\"417\":1}}],[\"当前计数为\",{\"1\":{\"417\":2}}],[\"当前目录\",{\"1\":{\"408\":2}}],[\"当前函数及其后续调用链所消耗的资源总和\",{\"1\":{\"326\":1}}],[\"当前程序执行情况的跟踪\",{\"1\":{\"324\":1}}],[\"当前程序的命令行调用\",{\"1\":{\"324\":1}}],[\"当前\",{\"1\":{\"141\":1,\"1307\":1}}],[\"当安装git后首先要做的事情是设置用户名称和email地址\",{\"1\":{\"55\":1}}],[\"当我们需要的时候\",{\"1\":{\"1183\":1}}],[\"当我们发现苹果的type\",{\"1\":{\"516\":1}}],[\"当我们发起一个\",{\"1\":{\"53\":1}}],[\"当我们从\",{\"1\":{\"53\":1}}],[\"当我们把需求1\",{\"1\":{\"35\":1}}],[\"当我们修改文件以后\",{\"1\":{\"21\":1}}],[\"当然一般情况都是使用f直接转换小数的格式最多\",{\"1\":{\"1390\":1}}],[\"当然还算是漏桶算法\",{\"1\":{\"1156\":1}}],[\"当然不是\",{\"1\":{\"1154\":1}}],[\"当然不是这样\",{\"1\":{\"273\":1}}],[\"当然你也可以修改成\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"当然你也可以写绝对路径\",{\"1\":{\"1123\":1}}],[\"当然你也可以使用卷\",{\"1\":{\"822\":1}}],[\"当然也不能丢消息\",{\"1\":{\"1052\":1}}],[\"当然也可以通过reflect\",{\"1\":{\"1445\":1}}],[\"当然也可以使用log\",{\"1\":{\"1341\":1}}],[\"当然也可以自定义配置一个服务端\",{\"1\":{\"1336\":1}}],[\"当然也可以单独指定某一个测试文件来执行\",{\"1\":{\"468\":1}}],[\"当然也可以忽略不管\",{\"1\":{\"389\":1}}],[\"当然您可以根据实际情况自己调整触发策略\",{\"1\":{\"981\":1}}],[\"当然name也可以用true或false\",{\"1\":{\"861\":1}}],[\"当然字段个数少是相对的\",{\"1\":{\"793\":1}}],[\"当然可以\",{\"1\":{\"637\":1}}],[\"当然如果想加上参数名和返回值名也是允许的\",{\"1\":{\"291\":1}}],[\"当然\",{\"1\":{\"33\":1,\"1068\":1}}],[\"当然理解了上述规则\",{\"1\":{\"28\":1}}],[\"当下git\",{\"1\":{\"12\":1}}],[\"添加日志输出器\",{\"1\":{\"1304\":1}}],[\"添加内容创建新的镜像层\",{\"1\":{\"1192\":1}}],[\"添加可执行的权限\",{\"1\":{\"1174\":1}}],[\"添加限流插件\",{\"0\":{\"1101\":1}}],[\"添加插件\",{\"0\":{\"1095\":1,\"1098\":1}}],[\"添加全局的jwt的时候头部的token必须是\",{\"1\":{\"1093\":1}}],[\"添加头部信息\",{\"1\":{\"1091\":1}}],[\"添加路由\",{\"0\":{\"1085\":1}}],[\"添加防⽕墙规则\",{\"1\":{\"1078\":1}}],[\"添加环境变量\",{\"0\":{\"1030\":1}}],[\"添加redis目录到环境变量方便系统自动识别\",{\"1\":{\"963\":1}}],[\"添加更多节点来处理更多数据\",{\"1\":{\"906\":1}}],[\"添加管理员账号\",{\"0\":{\"864\":1}}],[\"添加mongodb的bin地址\",{\"1\":{\"850\":1}}],[\"添加一个主键\",{\"1\":{\"810\":1}}],[\"添加适当索引\",{\"1\":{\"799\":1}}],[\"添加示例\",{\"1\":{\"726\":1}}],[\"添加数据\",{\"1\":{\"721\":1,\"723\":1,\"724\":1,\"728\":1,\"729\":1,\"732\":1,\"733\":1,\"746\":1,\"881\":1}}],[\"添加映射\",{\"1\":{\"721\":2,\"723\":1,\"724\":1,\"730\":1,\"732\":1,\"733\":1}}],[\"添加了一条记录\",{\"1\":{\"1196\":1}}],[\"添加了\",{\"1\":{\"656\":1}}],[\"添加append函数\",{\"1\":{\"511\":1}}],[\"添加新元素\",{\"1\":{\"250\":1}}],[\"添加远程仓库\",{\"1\":{\"57\":1}}],[\"添加\",{\"0\":{\"57\":1},\"1\":{\"19\":1,\"22\":1,\"84\":3,\"1231\":1,\"1278\":1}}],[\"添加文件\",{\"0\":{\"19\":1}}],[\"选型依据\",{\"1\":{\"1072\":1}}],[\"选型建议\",{\"0\":{\"116\":1}}],[\"选举\",{\"1\":{\"999\":1}}],[\"选项模型\",{\"1\":{\"513\":1}}],[\"选项模式是go语言中一种很常见的设计模式\",{\"1\":{\"269\":1}}],[\"选项模式\",{\"0\":{\"269\":1}}],[\"选中集合\",{\"1\":{\"833\":1,\"834\":2}}],[\"选中数据库\",{\"1\":{\"833\":1,\"834\":2}}],[\"选中或不选中\",{\"1\":{\"653\":1}}],[\"选中regexp匹配的模糊测试\",{\"1\":{\"469\":1}}],[\"选中regexp匹配的基准测试\",{\"1\":{\"469\":1}}],[\"选中冲突的文件\",{\"1\":{\"36\":1}}],[\"选中某个版本\",{\"1\":{\"24\":1}}],[\"选中文件\",{\"1\":{\"20\":1,\"23\":1,\"24\":1}}],[\"选中新建的文件\",{\"1\":{\"19\":1}}],[\"选择最小安装即可\",{\"1\":{\"1218\":1}}],[\"选择partition的原则\",{\"0\":{\"1023\":1}}],[\"选择一种执行方案\",{\"1\":{\"779\":1}}],[\"选择一个项目或需求详细介绍一下\",{\"1\":{\"656\":1}}],[\"选择一个项目或者需求详细介绍一下\",{\"1\":{\"584\":1,\"656\":1}}],[\"选择性高的列优先\",{\"1\":{\"816\":1}}],[\"选择性高\",{\"1\":{\"651\":1}}],[\"选择传指针\",{\"1\":{\"549\":1}}],[\"选择图像处理工具\",{\"1\":{\"139\":1}}],[\"选择go\",{\"1\":{\"116\":1}}],[\"选择gin的情况\",{\"1\":{\"116\":1}}],[\"选择beego的情况\",{\"1\":{\"116\":1}}],[\"选择服务\",{\"1\":{\"54\":1}}],[\"选择列表\",{\"1\":{\"4\":1}}],[\"选择\",{\"1\":{\"4\":1}}],[\"绿色图标\",{\"1\":{\"18\":1}}],[\"并根据映射函数修改字符串\",{\"1\":{\"1405\":1}}],[\"并根据任务的数量动态调整\",{\"1\":{\"633\":1}}],[\"并关联资源权限\",{\"1\":{\"1241\":1}}],[\"并让他们彼此联通\",{\"1\":{\"1195\":1}}],[\"并解压\",{\"1\":{\"1165\":1}}],[\"并解释思路\",{\"1\":{\"582\":1,\"654\":2}}],[\"并解释为什么\",{\"1\":{\"582\":1,\"654\":2}}],[\"并非所有的连接都被计数\",{\"1\":{\"1152\":1}}],[\"并非从左到右计算\",{\"1\":{\"208\":1}}],[\"并做出了自己的一些改进\",{\"1\":{\"1054\":1}}],[\"并指定topic属性\",{\"1\":{\"1034\":1}}],[\"并指明了起重机应该有起重和吊货的功能\",{\"1\":{\"293\":1}}],[\"并为故障节点数据回复提供一种重新同步的机制\",{\"1\":{\"1019\":1}}],[\"并为你的特定版本打上符合标准的tag\",{\"1\":{\"443\":1}}],[\"并尝尝依赖于kafka提供的强大的持久性保障\",{\"1\":{\"1019\":1}}],[\"并正确地发送请求\",{\"1\":{\"1006\":1}}],[\"并对其进行配置\",{\"1\":{\"1004\":1}}],[\"并对其修改的例子\",{\"1\":{\"310\":1}}],[\"并添加配置信息\",{\"1\":{\"994\":1}}],[\"并重新开始计数\",{\"1\":{\"981\":1}}],[\"并存储在新的\",{\"1\":{\"974\":1}}],[\"并输入代码为\",{\"1\":{\"852\":1}}],[\"并进行适当的优化\",{\"1\":{\"799\":1}}],[\"并把区分度最高的字段放在最前面\",{\"1\":{\"795\":1}}],[\"并建立unique\",{\"1\":{\"794\":1}}],[\"并以日期为后缀\",{\"1\":{\"794\":2}}],[\"并更新这个\",{\"1\":{\"743\":1}}],[\"并标识每个单词出现的所有文档\",{\"1\":{\"734\":1}}],[\"并轻松缩放规模\",{\"1\":{\"700\":1}}],[\"并使用define定义嵌入的内容\",{\"1\":{\"1427\":1}}],[\"并使用原始名称创建新的日志文件\",{\"1\":{\"1307\":1}}],[\"并使用\",{\"1\":{\"656\":1}}],[\"并使用cgo进行调用\",{\"1\":{\"312\":1}}],[\"并使它们可以互相替换\",{\"1\":{\"654\":1}}],[\"并初始化为合适的结构\",{\"1\":{\"654\":1}}],[\"并删除它们\",{\"1\":{\"651\":1}}],[\"并通过\",{\"1\":{\"1419\":1}}],[\"并通过hadoop进行分析\",{\"1\":{\"1019\":1}}],[\"并通过cdn加速分发\",{\"1\":{\"644\":1}}],[\"并通过基类指针或引用进行动态绑定\",{\"1\":{\"637\":1}}],[\"并定期重新尝试\",{\"1\":{\"641\":1}}],[\"并防止并发问题\",{\"1\":{\"638\":1}}],[\"并提供多种语言的\",{\"1\":{\"908\":1}}],[\"并提供一个全局访问点\",{\"1\":{\"654\":1}}],[\"并提供全局访问点\",{\"1\":{\"637\":1}}],[\"并提示如下错误\",{\"1\":{\"302\":1}}],[\"并利用副本保证高可用\",{\"1\":{\"636\":1}}],[\"并由程序调度器管理\",{\"1\":{\"636\":1}}],[\"并结合\",{\"1\":{\"635\":1,\"637\":1}}],[\"并与用户输入的验证码进行对比\",{\"1\":{\"634\":1}}],[\"并设置过期时间\",{\"1\":{\"634\":1}}],[\"并执行相应的操作以保持数据一致性\",{\"1\":{\"633\":1}}],[\"并可能屏蔽后端错误以防止直接传递给客户端\",{\"1\":{\"1071\":1}}],[\"并可能导致指向旧切片的引用失效\",{\"1\":{\"633\":1}}],[\"并可防止代码注入\",{\"1\":{\"124\":1}}],[\"并生成初始密码或通过其他方式激活账户\",{\"1\":{\"641\":1}}],[\"并生成性能分析文件\",{\"1\":{\"630\":1}}],[\"并生成一个临时的\",{\"1\":{\"481\":1}}],[\"并打印\",{\"1\":{\"622\":1,\"694\":1}}],[\"并调用方法\",{\"1\":{\"515\":1}}],[\"并在请求编辑器中粘贴以下内容\",{\"1\":{\"1265\":1}}],[\"并在业务低峰期执行\",{\"1\":{\"796\":1}}],[\"并在释放锁时检查标识是否匹配\",{\"1\":{\"653\":1}}],[\"并在缓存数据过期前提前加载\",{\"1\":{\"639\":1}}],[\"并在每次请求时检查订单状态\",{\"1\":{\"638\":1}}],[\"并在不同节点之间\",{\"1\":{\"637\":1}}],[\"并在数据传输中进行重传\",{\"1\":{\"636\":1}}],[\"并在\",{\"1\":{\"505\":1}}],[\"并在后续的更新中不断完善\",{\"1\":{\"442\":1}}],[\"并向go\",{\"1\":{\"460\":1}}],[\"并返回删除后的结果\",{\"1\":{\"1400\":1}}],[\"并返回\",{\"1\":{\"970\":1}}],[\"并返回被序列化的值\",{\"1\":{\"967\":1}}],[\"并返回结果\",{\"1\":{\"706\":1}}],[\"并返回指向类型的指针\",{\"1\":{\"654\":1}}],[\"并返回该子数组\",{\"1\":{\"622\":1,\"694\":1}}],[\"并返回其原有的值\",{\"1\":{\"436\":1}}],[\"并返回一个对应类型的指针\",{\"1\":{\"275\":1}}],[\"并赋值给count\",{\"1\":{\"429\":1}}],[\"并获取返回值\",{\"1\":{\"371\":1}}],[\"并集\",{\"1\":{\"340\":2}}],[\"并注册到了默认路由中\",{\"1\":{\"324\":1}}],[\"并将该规则作用于根目录\",{\"1\":{\"1154\":1}}],[\"并将该元素添加到另一个列表并返回\",{\"1\":{\"971\":1}}],[\"并将这些分为leader和follower\",{\"1\":{\"1064\":1}}],[\"并将其监控的从机提升主服务器\",{\"1\":{\"996\":1}}],[\"并将其存在于磁盘\",{\"1\":{\"993\":1}}],[\"并将其转换为了c指针后传递给c函数\",{\"1\":{\"303\":1}}],[\"并将\",{\"1\":{\"970\":1}}],[\"并将结果映射到结构体中\",{\"1\":{\"893\":1}}],[\"并将它们映射到合适的elasticsearch数据类型\",{\"1\":{\"734\":1}}],[\"并将切片的内容复制到新的数组中\",{\"1\":{\"649\":1}}],[\"并将值赋值给传入的err\",{\"1\":{\"393\":1}}],[\"并将代码\",{\"1\":{\"17\":1}}],[\"并作为参数传递了fmt\",{\"1\":{\"285\":1}}],[\"并不足以投入使用\",{\"1\":{\"1302\":1}}],[\"并不能保证消息\",{\"1\":{\"1025\":1}}],[\"并不影响\",{\"1\":{\"981\":1}}],[\"并不影响建筑进度\",{\"1\":{\"293\":1}}],[\"并不十分准确\",{\"1\":{\"814\":1}}],[\"并不完全符合传统面向对象语言\",{\"1\":{\"637\":1}}],[\"并不知道该在什么时候关闭管道\",{\"1\":{\"420\":1}}],[\"并不想读取该文件\",{\"1\":{\"400\":1}}],[\"并不是实时写入kafka\",{\"1\":{\"1047\":1}}],[\"并不是mongodb教程\",{\"1\":{\"827\":1}}],[\"并不是完全相同的\",{\"1\":{\"780\":1}}],[\"并不是逐字节访问\",{\"1\":{\"554\":1}}],[\"并不是说分读锁和写锁就有两个锁\",{\"1\":{\"431\":1}}],[\"并不是创建了一个新的类型\",{\"1\":{\"384\":1}}],[\"并不是animal的实现\",{\"1\":{\"287\":1}}],[\"并不是指向头部元素的指针\",{\"1\":{\"238\":1}}],[\"并不会导致阻塞\",{\"1\":{\"421\":1}}],[\"并不会像例子中那样直观\",{\"1\":{\"418\":1}}],[\"并不会对方法外的值造成任何影响\",{\"1\":{\"286\":1}}],[\"并不会真正影响到远程仓库\",{\"1\":{\"57\":1}}],[\"并且也要在作用域内才能使用\",{\"1\":{\"1419\":1}}],[\"并且可以简单表达清单\",{\"1\":{\"1313\":1}}],[\"并且可以持续的添加\",{\"1\":{\"1018\":1}}],[\"并且如果想要进行日志文件切割的话还需要使用另一个第三方的依赖\",{\"1\":{\"1304\":1}}],[\"并且资源类型之间存在继承关系\",{\"1\":{\"1263\":1}}],[\"并且存储一部分数据\",{\"1\":{\"1006\":1}}],[\"并且只记录对内存有过修改的命令\",{\"1\":{\"984\":1}}],[\"并且redis还采用了高效的数据结构\",{\"1\":{\"959\":1}}],[\"并且相同的字段不需要相同的数据类型\",{\"1\":{\"847\":1}}],[\"并且使用js作为脚本语言\",{\"1\":{\"827\":1}}],[\"并且使用了time\",{\"1\":{\"429\":1}}],[\"并且安装mysql步骤繁琐\",{\"1\":{\"822\":1}}],[\"并且id保证自增\",{\"1\":{\"820\":1}}],[\"并且union子句个数限制在5个以\",{\"1\":{\"796\":1}}],[\"并且字符集只能是utf8或者utf8mb4\",{\"1\":{\"794\":1}}],[\"并且master节点为node1\",{\"1\":{\"769\":1}}],[\"并且修改相关端口\",{\"1\":{\"769\":1}}],[\"并且配置环境变量\",{\"1\":{\"736\":1}}],[\"并且备份可恢复\",{\"1\":{\"655\":1}}],[\"并且操作系统内核需要进行调度\",{\"1\":{\"649\":1}}],[\"并且通过链表相连\",{\"1\":{\"649\":1}}],[\"并且通过定期同步和一致性控制来确保数据一致\",{\"1\":{\"641\":1}}],[\"并且\",{\"1\":{\"641\":1,\"861\":1}}],[\"并且保证后续逻辑中不会对该订单进行二次抢占\",{\"1\":{\"638\":1}}],[\"并且没有策略匹配到拒绝的结果\",{\"1\":{\"1254\":1}}],[\"并且没有任何约束\",{\"1\":{\"653\":1}}],[\"并且没有\",{\"1\":{\"635\":1}}],[\"并且分别输出到old\",{\"1\":{\"476\":1}}],[\"并且auth模块最后仍然要修改go\",{\"1\":{\"463\":1}}],[\"并且该修改可能会被误提交到远程仓库中\",{\"1\":{\"462\":1}}],[\"并且模块c的1\",{\"1\":{\"458\":1}}],[\"并且启用了go\",{\"1\":{\"444\":1}}],[\"并且需要注意的是\",{\"1\":{\"441\":1}}],[\"并且前后存储的值类型应当一致\",{\"1\":{\"441\":1}}],[\"并且返回旧值\",{\"1\":{\"439\":1}}],[\"并且这1000个实例化后的对象在使用完毕后都需要由gc来释放内存\",{\"1\":{\"435\":1}}],[\"并且sendfile打开了才生效\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"并且sync\",{\"1\":{\"435\":1}}],[\"并且son被作为了函数返回值返回出去\",{\"1\":{\"317\":1}}],[\"并且将数据成功添加\",{\"1\":{\"434\":1}}],[\"并且第四个case是一个超时管道\",{\"1\":{\"421\":1}}],[\"并且第二个返回值仍然为true\",{\"1\":{\"420\":1}}],[\"并且加上一些其他的逻辑\",{\"1\":{\"421\":1}}],[\"并且ok为false\",{\"1\":{\"420\":1}}],[\"并且协程的执行顺序也是不确定的\",{\"1\":{\"412\":1}}],[\"并且执行当前函数的善后工作\",{\"1\":{\"396\":1}}],[\"并且上游函数的defer语句同样会执行\",{\"1\":{\"396\":1}}],[\"并且在规模上运⾏良好\",{\"1\":{\"522\":1}}],[\"并且在整个程序的生命周期都不会再改变\",{\"1\":{\"380\":1}}],[\"并且在访问map的时候其实有两个返回值\",{\"1\":{\"260\":1}}],[\"并且比较器也必须使用泛型\",{\"1\":{\"344\":1}}],[\"并且go的泛型约束不允许存在带方法的接口\",{\"1\":{\"344\":1}}],[\"并且goroutine的栈空间是会动态调整的\",{\"1\":{\"310\":1}}],[\"并且动手敲了代码\",{\"1\":{\"329\":1}}],[\"并且还得通过宏告诉cgo去哪里寻找库文件\",{\"1\":{\"312\":1}}],[\"并且还给出了如下的额外定义\",{\"1\":{\"289\":1}}],[\"并且其参数和返回值都得是cgo支持的类型\",{\"1\":{\"300\":1}}],[\"并且t的类型集是接口i类型集的一个子集\",{\"1\":{\"289\":1}}],[\"并且是接口i类型集中的一个元素\",{\"1\":{\"289\":1}}],[\"并且对指针加一运算后\",{\"1\":{\"276\":1}}],[\"并且指针指向对应类型的零值\",{\"1\":{\"275\":1}}],[\"并且不会阻塞\",{\"1\":{\"633\":2}}],[\"并且不需要改变构造函数的函数签名\",{\"1\":{\"269\":1}}],[\"并且不属于任何类型\",{\"1\":{\"203\":1}}],[\"并且常量的类型可以省略\",{\"1\":{\"211\":1}}],[\"并且nil\",{\"1\":{\"203\":1}}],[\"并且规定了只能位于操作数的后方\",{\"1\":{\"179\":1}}],[\"并且要尽量简短\",{\"1\":{\"173\":1}}],[\"并且由于其编译后的二进制文件小且独立\",{\"1\":{\"159\":1}}],[\"并且有丰富的标准库使得编写跨平台的应用变得简单\",{\"1\":{\"153\":1}}],[\"并且仓库中存在文件\",{\"1\":{\"58\":1}}],[\"并且仓库文件夹上多了一个\",{\"1\":{\"18\":1}}],[\"并记录延迟直方图和其他有用的统计数据并对其进行图形化\",{\"1\":{\"145\":1}}],[\"并支持utf\",{\"1\":{\"144\":1}}],[\"并用⼀个标签来标识这个消费者组\",{\"1\":{\"1027\":1}}],[\"并用nlp填充您的结构\",{\"1\":{\"144\":1}}],[\"并用连字符代替空格\",{\"1\":{\"64\":1}}],[\"并行go框架\",{\"1\":{\"142\":1}}],[\"并行运行功能\",{\"1\":{\"137\":1}}],[\"并发操作包\",{\"1\":{\"1308\":1}}],[\"并发能力强\",{\"1\":{\"1107\":1}}],[\"并发现它的消费性能比其它消息队列还要好\",{\"1\":{\"1038\":1}}],[\"并发用户数\",{\"1\":{\"644\":1}}],[\"并发控制\",{\"1\":{\"639\":1}}],[\"并发控制机制的软件交易锁\",{\"1\":{\"137\":1}}],[\"并发标记\",{\"1\":{\"635\":1}}],[\"并发标记与增量式标记\",{\"0\":{\"552\":1}}],[\"并发会导致什么问题\",{\"1\":{\"621\":1,\"693\":1}}],[\"并发模型\",{\"1\":{\"537\":1}}],[\"并发安全\",{\"1\":{\"435\":1,\"537\":1}}],[\"并发友好的特性\",{\"1\":{\"170\":1}}],[\"并发\",{\"0\":{\"411\":1,\"1451\":1},\"1\":{\"165\":1,\"618\":1,\"690\":1}}],[\"并发性支持\",{\"1\":{\"148\":1}}],[\"并发读取算法\",{\"1\":{\"132\":1}}],[\"并发fifo队列\",{\"1\":{\"127\":1}}],[\"并没有高可用可性能高扩展的特性\",{\"1\":{\"1061\":1}}],[\"并没有具体的实现\",{\"1\":{\"292\":1}}],[\"并没有被修改成2\",{\"1\":{\"286\":1}}],[\"并没有必要的理由去这样做\",{\"1\":{\"273\":1}}],[\"并没有窗口化工具\",{\"1\":{\"55\":1}}],[\"并没有删除\",{\"1\":{\"25\":1}}],[\"并希望永远记住那个特别的提交快照\",{\"1\":{\"37\":1}}],[\">容器\",{\"1\":{\"1185\":1}}],[\">镜像\",{\"1\":{\"1185\":1}}],[\">flags\",{\"1\":{\"1164\":1}}],[\">fail\",{\"1\":{\"1164\":2}}],[\">fails\",{\"1\":{\"1164\":1}}],[\">max\",{\"1\":{\"1164\":4}}],[\">down\",{\"1\":{\"1164\":1}}],[\">name\",{\"1\":{\"1164\":2}}],[\">next\",{\"1\":{\"1164\":1}}],[\">nginx\",{\"1\":{\"1123\":1}}],[\">weight\",{\"1\":{\"1164\":2}}],[\">total\",{\"1\":{\"1164\":1}}],[\">tries\",{\"1\":{\"1164\":4}}],[\">log\",{\"1\":{\"1164\":2}}],[\">location<\",{\"1\":{\"742\":1,\"743\":2}}],[\">hash\",{\"1\":{\"1164\":3}}],[\">http\",{\"1\":{\"742\":1}}],[\">addrlen\",{\"1\":{\"1164\":4}}],[\">addr\",{\"1\":{\"1164\":4}}],[\">socklen\",{\"1\":{\"1164\":2}}],[\">sockaddr\",{\"1\":{\"1164\":5}}],[\">single\",{\"1\":{\"1164\":1}}],[\">sin6\",{\"1\":{\"1164\":1}}],[\">sin\",{\"1\":{\"1164\":1}}],[\">sa\",{\"1\":{\"1164\":1}}],[\">rrp\",{\"1\":{\"1164\":18}}],[\">redis\",{\"1\":{\"1010\":1}}],[\">upstream\",{\"1\":{\"1164\":2}}],[\">pool\",{\"1\":{\"1164\":1}}],[\">peer\",{\"1\":{\"1164\":6}}],[\">映射路由\",{\"1\":{\"1123\":1}}],[\">找到对应server\",{\"1\":{\"1123\":1}}],[\">var\",{\"1\":{\"863\":1}}],[\">3306\",{\"1\":{\"775\":1}}],[\">conns++\",{\"1\":{\"1164\":1}}],[\">conns\",{\"1\":{\"1164\":1}}],[\">connection\",{\"1\":{\"1164\":4}}],[\">checked\",{\"1\":{\"1164\":3}}],[\">cached\",{\"1\":{\"1164\":1}}],[\">custom\",{\"1\":{\"742\":2}}],[\">cgo\",{\"1\":{\"300\":1}}],[\">get\",{\"1\":{\"1164\":3}}],[\">go\",{\"1\":{\"300\":1}}],[\">git\",{\"1\":{\"18\":1}}],[\">=\",{\"1\":{\"179\":1,\"229\":6,\"230\":3,\"282\":1,\"344\":4,\"444\":1,\"476\":3,\"633\":1,\"759\":1,\"861\":4,\"1164\":3,\"1307\":1}}],[\">>\",{\"1\":{\"179\":1,\"1225\":1,\"1343\":1}}],[\">显示日志\",{\"1\":{\"48\":1}}],[\">处理完毕后\",{\"1\":{\"36\":1}}],[\">25\",{\"1\":{\"861\":1}}],[\">22\",{\"1\":{\"861\":1}}],[\">2\",{\"1\":{\"35\":1}}],[\">1\",{\"1\":{\"35\":1}}],[\">右键\",{\"1\":{\"19\":1,\"23\":1}}],[\">\",{\"1\":{\"18\":1,\"19\":2,\"23\":2,\"24\":5,\"25\":2,\"34\":1,\"36\":3,\"61\":12,\"179\":1,\"193\":1,\"221\":1,\"228\":4,\"230\":3,\"236\":2,\"241\":4,\"281\":1,\"328\":1,\"343\":3,\"344\":2,\"364\":1,\"435\":1,\"449\":3,\"516\":1,\"581\":1,\"638\":4,\"653\":3,\"742\":6,\"743\":2,\"756\":1,\"759\":2,\"774\":5,\"775\":2,\"806\":1,\"814\":8,\"820\":1,\"822\":3,\"825\":7,\"832\":2,\"853\":1,\"858\":2,\"859\":2,\"860\":1,\"861\":2,\"863\":5,\"984\":3,\"993\":5,\"1000\":3,\"1010\":32,\"1123\":1,\"1164\":3,\"1222\":1,\"1223\":2,\"1412\":1,\"1417\":15,\"1443\":8}}],[\"方案还得根据实际情况来定\",{\"1\":{\"1068\":1}}],[\"方便数据库和数据表结构\",{\"1\":{\"794\":1}}],[\"方便后期查看分析\",{\"1\":{\"630\":1}}],[\"方便后期使用go\",{\"1\":{\"630\":2}}],[\"方便它们在运行时调用\",{\"1\":{\"301\":1}}],[\"方便代码合并\",{\"1\":{\"9\":1}}],[\"方式三\",{\"1\":{\"730\":1}}],[\"方式二\",{\"1\":{\"730\":1,\"1004\":1}}],[\"方式一\",{\"1\":{\"730\":1,\"1004\":1}}],[\"方式克隆\",{\"0\":{\"52\":1}}],[\"方式的底层原理\",{\"1\":{\"49\":1}}],[\"方式配置\",{\"1\":{\"49\":1}}],[\"方法等信息\",{\"1\":{\"645\":1}}],[\"方法来设置\",{\"1\":{\"645\":1}}],[\"方法可以优雅地结束\",{\"1\":{\"645\":1}}],[\"方法可以获取反射值原有的值\",{\"1\":{\"362\":1}}],[\"方法后\",{\"1\":{\"645\":1}}],[\"方法只会在没有任何读锁的情况下唤醒一个想要写操作而被阻塞的协程\",{\"1\":{\"557\":1}}],[\"方法会唤醒所有要进行读而被锁定的协程\",{\"1\":{\"557\":1}}],[\"方法会接收类型的一个副本\",{\"1\":{\"515\":1}}],[\"方法接收的是类型的指针\",{\"1\":{\"515\":1}}],[\"方法忽略掉这部分工作\",{\"1\":{\"499\":1}}],[\"方法返回值\",{\"1\":{\"370\":2}}],[\"方法参数\",{\"1\":{\"370\":2}}],[\"方法对应的函数\",{\"1\":{\"370\":1}}],[\"方法类型\",{\"1\":{\"370\":1}}],[\"方法名\",{\"1\":{\"370\":1}}],[\"方法是不能拥有泛型形参的\",{\"1\":{\"339\":1}}],[\"方法集\",{\"1\":{\"347\":1,\"516\":1}}],[\"方法集等\",{\"1\":{\"347\":1}}],[\"方法集是接口方法集的超集\",{\"1\":{\"293\":1}}],[\"方法集就是一组方法的集合\",{\"1\":{\"289\":1}}],[\"方法在被调用时\",{\"1\":{\"286\":1}}],[\"方法的返回值来自于一个其内部的map\",{\"1\":{\"351\":1}}],[\"方法的接收者是\",{\"1\":{\"287\":1}}],[\"方法的使用就类似于调用一个类的成员方法\",{\"1\":{\"285\":1}}],[\"方法的长相与函数并无太大的区别\",{\"1\":{\"285\":1}}],[\"方法拥有接收者\",{\"1\":{\"285\":1}}],[\"方法与函数的区别在于\",{\"1\":{\"285\":1}}],[\"方法\",{\"0\":{\"515\":1},\"1\":{\"170\":1,\"351\":1,\"352\":1,\"391\":1,\"473\":1,\"515\":1,\"572\":1,\"644\":1,\"654\":1,\"1307\":1,\"1337\":1,\"1341\":1}}],[\"方法三\",{\"1\":{\"18\":1}}],[\"方法二\",{\"1\":{\"18\":1}}],[\"方法一\",{\"1\":{\"18\":1}}],[\"6d555d82e36280900e8de704896e4b3846465655\",{\"1\":{\"1010\":4}}],[\"6个节点构建三主三从的集群\",{\"1\":{\"1009\":1}}],[\"6eb220706f73107990c2b886dbc2c12a8d0d9d05\",{\"1\":{\"993\":1}}],[\"6s\",{\"1\":{\"477\":1}}],[\"6983438\",{\"1\":{\"1429\":1}}],[\"693147180559945309417232121458176568075500134360255254120680009\",{\"1\":{\"1345\":1}}],[\"6916\",{\"1\":{\"993\":1}}],[\"697s\",{\"1\":{\"477\":1}}],[\"690\",{\"1\":{\"124\":1}}],[\"6m\",{\"1\":{\"476\":1}}],[\"6f67f9f7407e\",{\"1\":{\"1196\":1}}],[\"6f67f9f7407edb8c48ce2d3ca413aef414a2a8628080fd69605e4ce2c3bea6ab\",{\"1\":{\"1196\":1,\"1197\":1}}],[\"6f\",{\"1\":{\"258\":4}}],[\"6c\",{\"1\":{\"258\":7}}],[\"684\",{\"1\":{\"476\":1}}],[\"684023150\",{\"1\":{\"476\":1}}],[\"685030600\",{\"1\":{\"476\":1}}],[\"68\",{\"1\":{\"258\":3}}],[\"601\",{\"1\":{\"1092\":2}}],[\"60e3755761c9cbdacb183f59e3d6205da5335e86\",{\"1\":{\"1010\":1}}],[\"60秒内有10000个更改\",{\"1\":{\"965\":1}}],[\"60min\",{\"0\":{\"603\":1,\"675\":1}}],[\"600078100\",{\"1\":{\"476\":1}}],[\"6000\",{\"1\":{\"281\":1}}],[\"60\",{\"1\":{\"229\":3,\"965\":1,\"981\":2,\"1090\":2,\"1430\":2}}],[\"67m\",{\"1\":{\"1228\":1}}],[\"67毫秒\",{\"0\":{\"1042\":1}}],[\"671535\",{\"1\":{\"476\":1}}],[\"679774450\",{\"1\":{\"475\":1}}],[\"67\",{\"1\":{\"221\":1}}],[\"67428e\",{\"1\":{\"182\":1,\"183\":1}}],[\"66m\",{\"1\":{\"1228\":1}}],[\"665\",{\"1\":{\"1010\":2}}],[\"665460800\",{\"1\":{\"475\":1}}],[\"666\",{\"1\":{\"1010\":2}}],[\"66666666666666\",{\"1\":{\"768\":1}}],[\"662993\",{\"1\":{\"475\":1}}],[\"66\",{\"1\":{\"221\":1,\"502\":2,\"768\":1,\"1076\":2,\"1077\":2,\"1078\":2,\"1079\":2,\"1081\":2,\"1082\":2,\"1086\":8,\"1087\":10,\"1376\":1,\"1377\":2,\"1379\":2}}],[\"651e2d1b9dcd72fc7339c687904cf763aaa524bd79cc5945888dfec8829a62b6\",{\"1\":{\"1197\":1}}],[\"651160141\",{\"1\":{\"1046\":1}}],[\"6505bfc20adf16425ff4d764\",{\"1\":{\"884\":1}}],[\"6505bfc20adf16425ff4d763\",{\"1\":{\"884\":1}}],[\"6505bfc20adf16425ff4d762\",{\"1\":{\"884\":1}}],[\"6505bb90bc443128143945c5\",{\"1\":{\"884\":4}}],[\"65534\",{\"1\":{\"1197\":1}}],[\"65536\",{\"1\":{\"1194\":2,\"1195\":1}}],[\"65535\",{\"1\":{\"787\":1}}],[\"65533\",{\"1\":{\"477\":1}}],[\"65m\",{\"1\":{\"476\":1}}],[\"656195700\",{\"1\":{\"476\":1}}],[\"659047300\",{\"1\":{\"476\":1}}],[\"65\",{\"1\":{\"221\":1,\"258\":3,\"1123\":1,\"1130\":1,\"1131\":1,\"1158\":1}}],[\"6305039478318694p\",{\"1\":{\"1392\":1}}],[\"6302\",{\"1\":{\"994\":4}}],[\"6300>\",{\"1\":{\"993\":2,\"994\":1}}],[\"63001>\",{\"1\":{\"993\":2}}],[\"63001\",{\"1\":{\"993\":1}}],[\"6300\",{\"1\":{\"993\":1,\"1002\":2}}],[\"6379>\",{\"1\":{\"963\":2,\"981\":3,\"985\":1}}],[\"6379\",{\"1\":{\"910\":1,\"912\":1,\"965\":1,\"993\":3,\"994\":1,\"1002\":3,\"1003\":1,\"1004\":3,\"1417\":2}}],[\"631\",{\"1\":{\"498\":1}}],[\"631s\",{\"1\":{\"498\":1}}],[\"634380250\",{\"1\":{\"476\":1}}],[\"63\",{\"1\":{\"221\":1,\"233\":1,\"720\":2,\"724\":2,\"1343\":2,\"1430\":1}}],[\"6271\",{\"1\":{\"1164\":1}}],[\"6248486\",{\"1\":{\"477\":1}}],[\"62\",{\"1\":{\"221\":1,\"611\":1,\"683\":1,\"1010\":1}}],[\"61803398874989484820458683436563811772030917980576286213544862\",{\"1\":{\"1345\":1}}],[\"6148\",{\"1\":{\"1039\":1}}],[\"6128\",{\"1\":{\"1010\":2}}],[\"6129\",{\"1\":{\"1010\":2}}],[\"6192b1d7512ec3fd4bd880cc455a47da54f4feca\",{\"1\":{\"1010\":6}}],[\"61d50d6107ef\",{\"1\":{\"813\":2}}],[\"61\",{\"1\":{\"221\":1}}],[\"61626364656667\",{\"1\":{\"221\":1}}],[\"64872127070012814684865078781416357165377610071014801157507931\",{\"1\":{\"1345\":1}}],[\"6443\",{\"1\":{\"1225\":2,\"1226\":1,\"1227\":1}}],[\"64安装包下载\",{\"1\":{\"1218\":1}}],[\"64ab4eb42ae02de188270c114d41d83006122a91\",{\"1\":{\"1010\":1}}],[\"64mb\",{\"1\":{\"985\":1}}],[\"64c610d5aec2618d6ca0b516\",{\"1\":{\"835\":1}}],[\"64c610d5aec2618d6ca0b515\",{\"1\":{\"835\":1}}],[\"64c60fa01e2548d9e4de6cf4\",{\"1\":{\"835\":1}}],[\"64<<10\",{\"1\":{\"435\":1}}],[\"64位整数\",{\"1\":{\"724\":1}}],[\"64位双精度浮点型\",{\"1\":{\"724\":1}}],[\"64位双精度浮点数\",{\"1\":{\"720\":1}}],[\"64位是8字节\",{\"1\":{\"554\":1}}],[\"64位设备上最大支持8字节\",{\"1\":{\"513\":1}}],[\"64位实数和虚数\",{\"1\":{\"199\":1}}],[\"64位浮点数切片\",{\"1\":{\"201\":1}}],[\"64位浮点数\",{\"1\":{\"198\":1}}],[\"64\",{\"1\":{\"197\":2,\"221\":1,\"233\":1,\"258\":1,\"381\":3,\"388\":1,\"439\":2,\"767\":1,\"965\":1,\"1194\":2,\"1195\":8,\"1196\":3,\"1197\":9,\"1222\":1,\"1343\":1,\"1389\":2,\"1390\":6,\"1393\":1}}],[\"64校验和\",{\"1\":{\"124\":1}}],[\"6\",{\"0\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":2,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"48\":1,\"155\":1,\"724\":1,\"761\":1,\"781\":1,\"1027\":1,\"1034\":1,\"1043\":1,\"1153\":1},\"1\":{\"24\":1,\"25\":1,\"55\":1,\"58\":4,\"84\":1,\"182\":1,\"183\":1,\"212\":2,\"213\":1,\"221\":1,\"224\":2,\"233\":12,\"235\":1,\"236\":2,\"244\":1,\"245\":4,\"246\":4,\"247\":6,\"250\":7,\"276\":1,\"306\":6,\"317\":1,\"318\":1,\"375\":1,\"412\":3,\"417\":2,\"420\":2,\"422\":1,\"430\":1,\"436\":2,\"453\":2,\"454\":1,\"459\":2,\"476\":4,\"491\":3,\"494\":2,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"502\":1,\"511\":1,\"516\":1,\"600\":1,\"630\":1,\"633\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"641\":1,\"644\":1,\"645\":1,\"651\":1,\"653\":1,\"654\":2,\"672\":1,\"716\":2,\"717\":3,\"740\":1,\"768\":2,\"775\":1,\"794\":1,\"811\":1,\"820\":2,\"849\":1,\"851\":1,\"852\":1,\"858\":1,\"861\":1,\"862\":1,\"863\":1,\"965\":1,\"967\":2,\"968\":1,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"985\":2,\"1010\":3,\"1019\":1,\"1022\":1,\"1034\":1,\"1053\":1,\"1054\":1,\"1055\":1,\"1056\":1,\"1085\":1,\"1184\":1,\"1193\":1,\"1195\":2,\"1307\":1,\"1390\":6,\"1392\":1,\"1404\":1,\"1417\":2,\"1443\":1,\"1444\":1}}],[\"克隆到本地工作区\",{\"1\":{\"17\":1}}],[\"克隆\",{\"1\":{\"17\":1,\"55\":1}}],[\"叫做暂存区\",{\"1\":{\"17\":1}}],[\"文\",{\"1\":{\"1026\":1}}],[\"文本\",{\"1\":{\"1309\":3}}],[\"文本搜索\",{\"1\":{\"842\":1}}],[\"文本字段存储在倒排索引中\",{\"1\":{\"734\":1}}],[\"文本类型\",{\"0\":{\"718\":1}}],[\"文本如下\",{\"1\":{\"706\":1}}],[\"文本diff实现\",{\"1\":{\"122\":1}}],[\"文章内容\",{\"1\":{\"756\":1}}],[\"文章内跳转\",{\"0\":{\"64\":1}}],[\"文章标题\",{\"1\":{\"756\":1}}],[\"文章\",{\"1\":{\"625\":1,\"697\":1,\"1019\":1}}],[\"文中代码演示的环境是win10\",{\"1\":{\"296\":1}}],[\"文件位置\",{\"1\":{\"1307\":1}}],[\"文件路径\",{\"1\":{\"1304\":1}}],[\"文件路径在跨平台方面也会是一个大问题\",{\"1\":{\"462\":1}}],[\"文件上传\",{\"1\":{\"1281\":1}}],[\"文件上多了一个红色感叹号\",{\"1\":{\"21\":1}}],[\"文件系统是\",{\"1\":{\"1192\":1}}],[\"文件系统的抽象层\",{\"1\":{\"399\":1}}],[\"文件生成的容器实例\",{\"1\":{\"1183\":1}}],[\"文件切割为多份不同的小文件作为日志\",{\"1\":{\"1174\":1}}],[\"文件处理结束后\",{\"1\":{\"1133\":1}}],[\"文件为索引文件\",{\"1\":{\"1026\":1}}],[\"文件三个文件\",{\"1\":{\"1026\":1}}],[\"文件服务器或hdfs\",{\"1\":{\"1019\":1}}],[\"文件目录\",{\"1\":{\"1000\":1}}],[\"文件增量大于100\",{\"1\":{\"985\":1}}],[\"文件做了对比\",{\"1\":{\"985\":1}}],[\"文件做一下\",{\"1\":{\"985\":1}}],[\"文件和新生成的\",{\"1\":{\"985\":1}}],[\"文件记录的数据库数据完全一致\",{\"1\":{\"985\":1}}],[\"文件记录的数据库数据和原\",{\"1\":{\"985\":1}}],[\"文件会使用尽可能少的命令来记录数据库数据\",{\"1\":{\"985\":1}}],[\"文件会非常耗时\",{\"1\":{\"985\":1}}],[\"文件会越变越长\",{\"1\":{\"985\":1}}],[\"文件之后\",{\"1\":{\"981\":1}}],[\"文件覆盖掉原来的旧文件\",{\"1\":{\"981\":1}}],[\"文件创建完毕为止\",{\"1\":{\"981\":1}}],[\"文件名为\",{\"1\":{\"965\":1}}],[\"文件地址为\",{\"1\":{\"852\":1}}],[\"文件下创建新文件夹log\",{\"1\":{\"852\":1}}],[\"文件排序\",{\"1\":{\"814\":1}}],[\"文件很大时\",{\"1\":{\"794\":1}}],[\"文件等大的二进制数据\",{\"1\":{\"794\":1}}],[\"文件修改时\",{\"1\":{\"743\":1}}],[\"文件里\",{\"1\":{\"743\":1}}],[\"文件里面有20亿个整数\",{\"1\":{\"567\":1,\"639\":2}}],[\"文件传输等\",{\"1\":{\"645\":1}}],[\"文件传输系统\",{\"1\":{\"132\":1}}],[\"文件秒传\",{\"1\":{\"634\":1}}],[\"文件合并\",{\"1\":{\"634\":1}}],[\"文件合并hash一致性校验\",{\"1\":{\"562\":1,\"634\":1}}],[\"文件存储以目录树的结构组织\",{\"1\":{\"634\":1}}],[\"文件存储\",{\"1\":{\"634\":1}}],[\"文件中\",{\"1\":{\"498\":1,\"985\":1,\"1174\":1}}],[\"文件io等\",{\"1\":{\"421\":1}}],[\"文件特别大的时候不建议这么做\",{\"1\":{\"403\":1}}],[\"文件复制成功\",{\"1\":{\"403\":1}}],[\"文件读取异常\",{\"1\":{\"401\":1}}],[\"文件读取成功\",{\"1\":{\"400\":1}}],[\"文件打开成功\",{\"1\":{\"400\":2,\"401\":4,\"402\":2}}],[\"文件必须不存在\",{\"1\":{\"400\":1}}],[\"文件访问异常\",{\"1\":{\"400\":2,\"401\":2,\"402\":2}}],[\"文件不存在\",{\"1\":{\"400\":3}}],[\"文件描述符\",{\"0\":{\"215\":1}}],[\"文件的细节\",{\"1\":{\"1019\":1}}],[\"文件的体积会小很多\",{\"1\":{\"985\":1}}],[\"文件的大小控制在合理的范围内\",{\"1\":{\"985\":1}}],[\"文件的内容如下\",{\"1\":{\"477\":1}}],[\"文件的查找路径默认为项目go\",{\"1\":{\"400\":1}}],[\"文件的模块\",{\"1\":{\"132\":1}}],[\"文件的访问\",{\"1\":{\"124\":1}}],[\"文件操作库\",{\"1\":{\"132\":1}}],[\"文件\",{\"0\":{\"132\":1,\"399\":1,\"503\":1},\"1\":{\"28\":2,\"54\":1,\"124\":1,\"132\":1,\"143\":2,\"459\":1,\"484\":1,\"491\":2,\"492\":1,\"494\":1,\"633\":2,\"743\":1,\"981\":1,\"984\":1,\"985\":2,\"988\":1,\"1004\":1,\"1026\":3,\"1203\":1,\"1239\":1}}],[\"文件删除\",{\"0\":{\"25\":1},\"1\":{\"25\":1}}],[\"文件状态讲解\",{\"0\":{\"22\":1}}],[\"文件已经生成了\",{\"1\":{\"18\":1}}],[\"文件夹的许多操作都与文件操作类似\",{\"1\":{\"407\":1}}],[\"文件夹\",{\"0\":{\"407\":1},\"1\":{\"851\":1}}],[\"文件夹内部生成了一个\",{\"1\":{\"14\":1}}],[\"文件夹上多了一个绿色图标\",{\"1\":{\"14\":1}}],[\"文档齐全\",{\"1\":{\"1053\":1}}],[\"文档型nosql数据库\",{\"1\":{\"907\":1}}],[\"文档集合中一条条记录\",{\"1\":{\"847\":1}}],[\"文档组\",{\"1\":{\"846\":1}}],[\"文档地址\",{\"1\":{\"828\":1}}],[\"文档冲突也继续删除\",{\"1\":{\"752\":1}}],[\"文档id=\",{\"1\":{\"754\":1}}],[\"文档id\",{\"1\":{\"746\":1,\"748\":1,\"751\":1}}],[\"文档的映射结构类似为\",{\"1\":{\"726\":1}}],[\"文档可以包含内部对象\",{\"1\":{\"726\":1}}],[\"文档生成\",{\"1\":{\"155\":1}}],[\"文档质量\",{\"1\":{\"111\":1}}],[\"文档\",{\"0\":{\"448\":1,\"708\":1,\"847\":1},\"1\":{\"17\":1,\"143\":1,\"502\":1,\"848\":1,\"906\":1,\"1071\":1,\"1164\":1}}],[\"我建议使用slices标准库来进行排序\",{\"1\":{\"1375\":1}}],[\"我\",{\"1\":{\"1022\":1}}],[\"我曾经参与过一个基于微服务的电商平台项目\",{\"1\":{\"656\":1}}],[\"我主要接触了高并发\",{\"1\":{\"655\":1}}],[\"我会继续回答\",{\"1\":{\"639\":1}}],[\"我有丰富的\",{\"1\":{\"638\":1}}],[\"我也有一定的前端开发\",{\"1\":{\"638\":1}}],[\"我是一个专注于后端开发的工程师\",{\"1\":{\"656\":1}}],[\"我是一个专注于\",{\"1\":{\"638\":1}}],[\"我说是\",{\"1\":{\"615\":1,\"687\":1}}],[\"我说没有\",{\"1\":{\"615\":1,\"687\":1}}],[\"我要查询ab\",{\"1\":{\"593\":1,\"665\":1}}],[\"我要面临两个文件\",{\"1\":{\"30\":1}}],[\"我对监控的理解\",{\"1\":{\"583\":1,\"655\":2}}],[\"我合入了一个版本\",{\"1\":{\"573\":1,\"645\":1}}],[\"我比较推荐github\",{\"1\":{\"445\":1}}],[\"我推荐下面几个开源库\",{\"1\":{\"330\":1}}],[\"我推荐下面几个开源框架\",{\"1\":{\"330\":1}}],[\"我可以给出下面几个学习路线和示例项目以供参考\",{\"1\":{\"329\":1}}],[\"我可以告诉你大可不必担心\",{\"1\":{\"279\":1}}],[\"我认为这绝对是利大于弊的\",{\"1\":{\"213\":1}}],[\"我的电脑\",{\"1\":{\"850\":1}}],[\"我的项目大多数是\",{\"1\":{\"645\":1}}],[\"我的请求得到回复的\",{\"1\":{\"82\":1}}],[\"我的标题\",{\"1\":{\"64\":2}}],[\"我这边也要连接\",{\"1\":{\"82\":1}}],[\"我们都不会直接使用上述的方法\",{\"1\":{\"1332\":1}}],[\"我们都了解github上有很多优秀开源的项目\",{\"1\":{\"79\":1}}],[\"我们将添加一个无操作同步\",{\"1\":{\"1307\":1}}],[\"我们将使用现有的\",{\"1\":{\"1307\":1}}],[\"我们将代码切换到分支1\",{\"1\":{\"35\":1}}],[\"我们经常会使用结构体来承载数据\",{\"1\":{\"1279\":1}}],[\"我们会有订单业务\",{\"1\":{\"1198\":1}}],[\"我们会部署一个\",{\"1\":{\"637\":1}}],[\"我们要自定义网络\",{\"1\":{\"1194\":1}}],[\"我们要注意避免使用大sql\",{\"1\":{\"785\":1}}],[\"我们不指定网络的情况下\",{\"1\":{\"1194\":1}}],[\"我们开发好软件后\",{\"1\":{\"1180\":1}}],[\"我们开发写的代码可以直接让它review一遍\",{\"1\":{\"79\":1}}],[\"我们有一个学习网站\",{\"1\":{\"1166\":1}}],[\"我们有一个函数sum可以计算两个数字的返回值\",{\"1\":{\"208\":1}}],[\"我们已经编译安装过nginx\",{\"1\":{\"1165\":1}}],[\"我们上边\",{\"1\":{\"1165\":1}}],[\"我们业务量增大了\",{\"1\":{\"1165\":1}}],[\"我们首先来看一下采用取模方式进行缓存的问题\",{\"1\":{\"1165\":1}}],[\"我们首先可用想到的是在b服务中单独加一个队列\",{\"1\":{\"1061\":1}}],[\"我们加入nodelay选项\",{\"1\":{\"1156\":1}}],[\"我们加入了burst=4\",{\"1\":{\"1155\":1}}],[\"我们使得nginx限流具备了缓存处理突发流量的能力\",{\"1\":{\"1155\":1}}],[\"我们使用自定义网络的好处就是网络隔离\",{\"1\":{\"1198\":1}}],[\"我们使用单个ip在10ms内发并发送了6个请求\",{\"1\":{\"1154\":1}}],[\"我们使用不多\",{\"1\":{\"807\":1}}],[\"我们使用了\",{\"1\":{\"656\":1}}],[\"我们使用\",{\"1\":{\"637\":2}}],[\"我们短时间内发送了大量请求\",{\"1\":{\"1155\":1}}],[\"我们设置的速度是2r\",{\"1\":{\"1154\":2}}],[\"我们设计了分布式锁来确保数据一致性\",{\"1\":{\"656\":1}}],[\"我们这里jwt鉴权取头部信息\",{\"1\":{\"1092\":1}}],[\"我们可用为partition做一些副本\",{\"1\":{\"1064\":1}}],[\"我们可用扩展多个消费者和生产者\",{\"1\":{\"1062\":1}}],[\"我们可以采用官方提供的其他时间编码器\",{\"1\":{\"1303\":1}}],[\"我们可以针对每个实际的节点\",{\"1\":{\"1165\":1}}],[\"我们可以看到\",{\"1\":{\"1165\":1}}],[\"我们可以允许nginx缓存处理一定程度的突发\",{\"1\":{\"1156\":1}}],[\"我们可以自己阅读源码\",{\"1\":{\"1054\":1}}],[\"我们可以自己写函数递归遍历整个文件夹\",{\"1\":{\"410\":1}}],[\"我们可以根据配置文件来进行动态配置\",{\"1\":{\"1304\":1}}],[\"我们可以根据\",{\"1\":{\"823\":1}}],[\"我们可以通过结构体标签来达到重命名的效果\",{\"1\":{\"1318\":1}}],[\"我们可以通过慢查询日志工具进行分析\",{\"1\":{\"813\":1}}],[\"我们可以通过unsafe\",{\"1\":{\"274\":1}}],[\"我们可以创建多个表来组织数据\",{\"1\":{\"797\":1}}],[\"我们可以创建多个分支\",{\"1\":{\"33\":1}}],[\"我们可以用\",{\"1\":{\"639\":1}}],[\"我们可以这样编写go\",{\"1\":{\"463\":1}}],[\"我们可以将多个消费组组成一个消费者组\",{\"1\":{\"1020\":1}}],[\"我们可以将转换可视化的格式\",{\"1\":{\"326\":1}}],[\"我们可以将其置为nil\",{\"1\":{\"320\":1}}],[\"我们可以很明显的看到整个调用栈的内存占用是117\",{\"1\":{\"326\":1}}],[\"我们可以保证程序大部分的稳定性\",{\"1\":{\"315\":1}}],[\"我们可以把镜像发布到仓库中\",{\"1\":{\"1183\":1}}],[\"我们可以把go指针通过c函数参数传递给c\",{\"1\":{\"300\":1}}],[\"我们可以把代码放到服务器上\",{\"1\":{\"39\":1}}],[\"我们可以使用fmt包提供的几个函数\",{\"1\":{\"224\":1}}],[\"我们可以邀请其他人成为项目的开发人员或者管理人员\",{\"1\":{\"53\":1}}],[\"我们可以删除修改我们自己仓库的基本信息\",{\"1\":{\"53\":2}}],[\"我们可以如下操作\",{\"1\":{\"27\":1}}],[\"我们看上面的架构图中\",{\"1\":{\"1022\":1}}],[\"我们看到using\",{\"1\":{\"817\":1}}],[\"我们看到\",{\"1\":{\"14\":1,\"1155\":1,\"1156\":1}}],[\"我们姑且认为每个broker对应一台服务器\",{\"1\":{\"1020\":1}}],[\"我们只需要写处理函数即可\",{\"1\":{\"1337\":1}}],[\"我们只从一台机器上搭建主从模式\",{\"1\":{\"992\":1}}],[\"我们只想要第一个\",{\"1\":{\"207\":1}}],[\"我们知道\",{\"1\":{\"980\":1}}],[\"我们知道它的执行过程\",{\"1\":{\"775\":1}}],[\"我们大致了解了b树和什么是外存储器\",{\"1\":{\"805\":1}}],[\"我们通常会使用更加完善的第三方日志包\",{\"1\":{\"1341\":1}}],[\"我们通常会按照日志文件大小或者日期进行日志切割\",{\"1\":{\"1307\":1}}],[\"我们通常会在数据冗余和检索效率中进行平衡\",{\"1\":{\"793\":1}}],[\"我们通常很少自己写\",{\"1\":{\"794\":1}}],[\"我们通常使用\",{\"1\":{\"637\":1}}],[\"我们应该尽量简单的使用数据库\",{\"1\":{\"783\":1}}],[\"我们应避免让数据库做运算\",{\"1\":{\"783\":1}}],[\"我们需要使用第三方包\",{\"1\":{\"1313\":1}}],[\"我们需要用text或keyword类型来代替string\",{\"1\":{\"717\":1}}],[\"我们需要知道规则然后优化结构体体排序\",{\"1\":{\"513\":1}}],[\"我们还使用过\",{\"1\":{\"637\":1}}],[\"我们排查的手段和步骤是怎么样的\",{\"1\":{\"597\":1,\"669\":1}}],[\"我们就要进行数据的重现散列\",{\"1\":{\"1165\":1}}],[\"我们就来介绍13个好用的mongodb可视化工具\",{\"1\":{\"874\":1}}],[\"我们就需要可跟踪的协程的方案\",{\"1\":{\"546\":1}}],[\"我们就可以在go程序中导入别人写好的库\",{\"1\":{\"311\":1}}],[\"我们就可以直接传递匿名函数\",{\"1\":{\"281\":1}}],[\"我们在定义结构体需要映射的时候必须首字母大写\",{\"1\":{\"526\":1}}],[\"我们在进行流式读写\",{\"1\":{\"121\":1}}],[\"我们之所以要进行逃逸分析\",{\"1\":{\"320\":1}}],[\"我们对它的要求不仅仅只是能运行\",{\"1\":{\"315\":1}}],[\"我们依然可以直接传递指针给c函数\",{\"1\":{\"303\":1}}],[\"我们直接使用直接签发\",{\"1\":{\"84\":1}}],[\"我们注意项目的上方有一个\",{\"1\":{\"53\":1}}],[\"我们本地电脑有一份\",{\"1\":{\"49\":1}}],[\"我们同样可以从库下载代码\",{\"1\":{\"47\":1}}],[\"我们填写的用户信息\",{\"1\":{\"46\":1}}],[\"我们的代码不能总是放在本地\",{\"1\":{\"39\":1}}],[\"我们给最新一次提交打上\",{\"1\":{\"37\":1}}],[\"我们想为我们的项目发布一个\",{\"1\":{\"37\":1}}],[\"我们能直接把某个开发人员开发的代码删除吗\",{\"1\":{\"36\":1}}],[\"我们叫做冲突\",{\"1\":{\"36\":1}}],[\"我们一直使用的时主分支\",{\"1\":{\"31\":1}}],[\"我们怎么做\",{\"1\":{\"30\":1}}],[\"我们也可以手动编辑该文件\",{\"1\":{\"28\":1}}],[\"我们如果真的想要将某个文件从服务器删除\",{\"1\":{\"26\":1}}],[\"我们发现\",{\"1\":{\"18\":1}}],[\"我们自己写代码\",{\"1\":{\"17\":1}}],[\"我们先初始化一个本地仓\",{\"1\":{\"14\":1}}],[\"我在大学毕业写论文的时候的时候碰到过如下的现象\",{\"1\":{\"9\":1}}],[\"$index\",{\"1\":{\"1424\":3}}],[\"$is\",{\"1\":{\"1133\":1}}],[\"$float\",{\"1\":{\"1419\":1}}],[\"$val\",{\"1\":{\"1419\":2,\"1424\":2}}],[\"$numer\",{\"1\":{\"1419\":1}}],[\"$name\",{\"1\":{\"1419\":4,\"1421\":3,\"1422\":4}}],[\"$nginx\",{\"1\":{\"1133\":1}}],[\"$是普通用户的命令\",{\"1\":{\"1223\":1}}],[\"$docker\",{\"1\":{\"1193\":2}}],[\"$document\",{\"1\":{\"1133\":2}}],[\"$anti\",{\"1\":{\"1151\":2}}],[\"$arg\",{\"1\":{\"1133\":1}}],[\"$args\",{\"1\":{\"1133\":2,\"1165\":1}}],[\"$proxy\",{\"1\":{\"1133\":1}}],[\"$pipe\",{\"1\":{\"1133\":1}}],[\"$pid`\",{\"1\":{\"1174\":1}}],[\"$pid\",{\"1\":{\"1133\":1}}],[\"$path\",{\"1\":{\"1122\":1}}],[\"$mainpid\",{\"1\":{\"1223\":1}}],[\"$match\",{\"1\":{\"838\":1}}],[\"$msec\",{\"1\":{\"1133\":1}}],[\"$limit\",{\"1\":{\"1133\":1}}],[\"$lte\",{\"1\":{\"861\":2,\"863\":3}}],[\"$lt\",{\"1\":{\"861\":1}}],[\"$cookie\",{\"1\":{\"1133\":3}}],[\"$content\",{\"1\":{\"1133\":2}}],[\"$connection\",{\"1\":{\"1133\":2}}],[\"$bytes\",{\"1\":{\"1133\":1}}],[\"$binary\",{\"1\":{\"1133\":1,\"1151\":3,\"1152\":3,\"1154\":3,\"1155\":1,\"1156\":1,\"1157\":1,\"1158\":3}}],[\"$body\",{\"1\":{\"1130\":1,\"1131\":1,\"1133\":1,\"1158\":1}}],[\"$home\",{\"1\":{\"1225\":3}}],[\"$hostname\",{\"1\":{\"1133\":1}}],[\"$host\",{\"1\":{\"1133\":1}}],[\"$https\",{\"1\":{\"1133\":1}}],[\"$http\",{\"1\":{\"1130\":3,\"1131\":3,\"1133\":7,\"1151\":2,\"1158\":3}}],[\"$uri不包含主机名\",{\"1\":{\"1133\":1}}],[\"$uri\",{\"1\":{\"1133\":2}}],[\"$query\",{\"1\":{\"1133\":1}}],[\"$realpath\",{\"1\":{\"1133\":1}}],[\"$request\",{\"1\":{\"1130\":1,\"1131\":1,\"1133\":9,\"1158\":1,\"1165\":2,\"1166\":1}}],[\"$remote\",{\"1\":{\"1130\":2,\"1131\":2,\"1133\":3,\"1158\":2,\"1165\":1}}],[\"$time\",{\"1\":{\"1130\":1,\"1131\":1,\"1133\":2,\"1158\":1}}],[\"$kafka\",{\"1\":{\"1030\":1}}],[\"$exists\",{\"1\":{\"861\":1}}],[\"$or\",{\"1\":{\"861\":1}}],[\"$gte\",{\"1\":{\"861\":3}}],[\"$gt\",{\"1\":{\"861\":2}}],[\"$gomodcache\",{\"1\":{\"460\":1}}],[\"$sent\",{\"1\":{\"1133\":9}}],[\"$server\",{\"1\":{\"1133\":4,\"1152\":1,\"1158\":2}}],[\"$set\",{\"1\":{\"836\":3,\"859\":1,\"882\":2}}],[\"$scheme\",{\"1\":{\"1133\":1}}],[\"$status\",{\"1\":{\"1130\":1,\"1131\":1,\"1133\":1,\"1158\":1}}],[\"$sort\",{\"1\":{\"838\":1}}],[\"$$\",{\"1\":{\"820\":4}}],[\"$2^\",{\"1\":{\"720\":2,\"724\":2}}],[\"$\",{\"1\":{\"13\":2,\"58\":4,\"297\":4,\"299\":1,\"312\":6,\"313\":3,\"317\":2,\"318\":1,\"319\":1,\"320\":2,\"326\":2,\"327\":4,\"328\":2,\"444\":2,\"445\":2,\"447\":3,\"449\":11,\"450\":3,\"451\":1,\"453\":8,\"454\":2,\"457\":6,\"460\":2,\"463\":2,\"468\":7,\"470\":1,\"471\":3,\"472\":1,\"473\":3,\"475\":1,\"476\":4,\"477\":5,\"486\":4,\"487\":2,\"491\":1,\"493\":1,\"494\":1,\"498\":1,\"502\":1,\"701\":2,\"720\":6,\"724\":4,\"829\":1,\"890\":2,\"964\":7,\"994\":2,\"1030\":2,\"1032\":1,\"1033\":4,\"1034\":7,\"1152\":2,\"1166\":1,\"1174\":6,\"1187\":5,\"1188\":2,\"1193\":1,\"1225\":2}}],[\"hw\",{\"1\":{\"1367\":3}}],[\"hduijy\",{\"1\":{\"1225\":2,\"1226\":1,\"1227\":1}}],[\"hdel\",{\"1\":{\"928\":1,\"972\":1}}],[\"hvals\",{\"1\":{\"972\":1}}],[\"hkeys\",{\"1\":{\"930\":1,\"972\":1}}],[\"hmget\",{\"1\":{\"927\":1,\"972\":1}}],[\"hmset\",{\"1\":{\"927\":1,\"972\":1}}],[\"hmap\",{\"1\":{\"624\":1,\"696\":1}}],[\"hmac\",{\"1\":{\"124\":2,\"634\":1}}],[\"hscan\",{\"1\":{\"932\":1,\"972\":1}}],[\"hsetnx\",{\"1\":{\"972\":1}}],[\"hset\",{\"1\":{\"927\":1,\"972\":1,\"994\":1}}],[\"hs256\",{\"1\":{\"634\":1}}],[\"h$ip\",{\"1\":{\"776\":1}}],[\"hlen\",{\"1\":{\"931\":1,\"972\":1}}],[\"hl\",{\"1\":{\"766\":11}}],[\"hls的m3u8播放列表的解析器和生成器库\",{\"1\":{\"146\":1}}],[\"hh\",{\"1\":{\"721\":1,\"724\":1}}],[\"h1\",{\"1\":{\"460\":2}}],[\"hgetall\",{\"1\":{\"927\":1,\"972\":1}}],[\"hget\",{\"1\":{\"927\":1,\"972\":1}}],[\"hg\",{\"1\":{\"443\":1}}],[\"h头文件\",{\"1\":{\"312\":1}}],[\"h不能在go文件导入\",{\"1\":{\"300\":1}}],[\"h中还定义了其它很多错误代码\",{\"1\":{\"298\":1}}],[\"h>中的整数类型\",{\"1\":{\"304\":1}}],[\"h>的整数类型提供了支持\",{\"1\":{\"304\":1}}],[\"h>\",{\"1\":{\"297\":1,\"298\":4,\"300\":6,\"301\":1,\"302\":2,\"303\":8,\"304\":1,\"305\":1,\"306\":4,\"307\":2,\"308\":2,\"309\":2,\"310\":4,\"312\":2,\"314\":1,\"1164\":3}}],[\"hour\",{\"1\":{\"1430\":1}}],[\"hours\",{\"1\":{\"1029\":1}}],[\"hours=168\",{\"1\":{\"1029\":1}}],[\"house\",{\"1\":{\"817\":7}}],[\"honnef\",{\"1\":{\"460\":1}}],[\"host模式\",{\"1\":{\"1197\":1}}],[\"hostnamectl\",{\"1\":{\"1222\":1}}],[\"hostname\",{\"1\":{\"1029\":2,\"1222\":1,\"1223\":1}}],[\"host=121\",{\"1\":{\"1076\":1,\"1077\":1}}],[\"host=\",{\"1\":{\"814\":1,\"822\":2}}],[\"hosts中\",{\"1\":{\"770\":1}}],[\"hosts\",{\"1\":{\"769\":1,\"770\":1,\"1081\":1,\"1196\":2,\"1225\":1}}],[\"host\",{\"1\":{\"395\":2,\"768\":1,\"769\":1,\"770\":1,\"814\":1,\"867\":1,\"911\":1,\"964\":1,\"1078\":1,\"1084\":1,\"1130\":1,\"1131\":1,\"1133\":2,\"1141\":1,\"1160\":1,\"1194\":3,\"1195\":1,\"1197\":5,\"1202\":1,\"1338\":1}}],[\"how\",{\"1\":{\"327\":1,\"1010\":2}}],[\"hoist\",{\"1\":{\"293\":8}}],[\"home=\",{\"1\":{\"1030\":1,\"1122\":1}}],[\"home百度即可\",{\"1\":{\"736\":1}}],[\"home话\",{\"1\":{\"736\":1}}],[\"home\",{\"1\":{\"0\":1,\"2\":1,\"176\":1,\"465\":1,\"1030\":1,\"1122\":1}}],[\"h\",{\"1\":{\"258\":3,\"298\":1,\"299\":3,\"300\":8,\"303\":2,\"312\":2,\"313\":1,\"355\":1,\"356\":1,\"964\":1,\"1010\":2,\"1174\":1,\"1281\":6,\"1282\":1,\"1283\":3,\"1328\":1,\"1337\":1}}],[\"hup\",{\"1\":{\"1223\":1}}],[\"hub\",{\"1\":{\"1183\":3}}],[\"huang\",{\"1\":{\"1047\":1}}],[\"hugo\",{\"1\":{\"335\":1}}],[\"husk提取算法的golang实现\",{\"1\":{\"144\":1}}],[\"huego\",{\"1\":{\"140\":1}}],[\"hunch\",{\"1\":{\"137\":1}}],[\"hprose\",{\"1\":{\"128\":1}}],[\"hyperloglog技术统计\",{\"0\":{\"977\":1}}],[\"hyperloglog实施\",{\"1\":{\"127\":1}}],[\"hyperloglog\",{\"1\":{\"127\":1}}],[\"hincrbyfloat\",{\"1\":{\"972\":1}}],[\"hincrby\",{\"1\":{\"972\":1}}],[\"hit\",{\"1\":{\"766\":6}}],[\"hits\",{\"1\":{\"724\":2,\"729\":1,\"741\":2,\"766\":10}}],[\"his\",{\"1\":{\"355\":1,\"356\":1}}],[\"hisstruct\",{\"1\":{\"355\":3,\"356\":3}}],[\"histories\",{\"1\":{\"58\":3}}],[\"highlighter\",{\"1\":{\"766\":1}}],[\"highlighting\",{\"1\":{\"741\":1}}],[\"highlight\",{\"1\":{\"729\":1,\"741\":3,\"766\":8}}],[\"highdatetime\",{\"1\":{\"400\":3}}],[\"high\",{\"1\":{\"250\":2}}],[\"hilbert\",{\"1\":{\"127\":1}}],[\"hide\",{\"1\":{\"127\":1}}],[\"hbase\",{\"1\":{\"122\":1}}],[\"hardwareaddr\",{\"1\":{\"1367\":1}}],[\"hat\",{\"1\":{\"1132\":1,\"1173\":1}}],[\"haochi\",{\"1\":{\"884\":1}}],[\"have\",{\"1\":{\"766\":4,\"1164\":2}}],[\"havec\",{\"1\":{\"511\":2}}],[\"half\",{\"1\":{\"720\":1}}],[\"happened\",{\"1\":{\"393\":1}}],[\"hassuffix\",{\"1\":{\"1403\":2}}],[\"hasprefix\",{\"1\":{\"1403\":2}}],[\"hasnext\",{\"1\":{\"863\":2}}],[\"hasmoney\",{\"1\":{\"554\":2}}],[\"has\",{\"1\":{\"287\":1,\"307\":1,\"515\":1,\"1078\":1}}],[\"hash策略\",{\"1\":{\"1165\":1}}],[\"hash模块到我们的nginx中\",{\"1\":{\"1165\":1}}],[\"hashcode\",{\"1\":{\"1165\":3}}],[\"hash值\",{\"1\":{\"1165\":1}}],[\"hash算法还会造成数据的服务的倾斜\",{\"1\":{\"1165\":1}}],[\"hash的计算就需要全部重新计算\",{\"1\":{\"1165\":1}}],[\"hash存在的问题如下\",{\"1\":{\"1165\":1}}],[\"hash不能与backup同时使用\",{\"1\":{\"1164\":1}}],[\"hash中使用权重\",{\"1\":{\"1164\":1}}],[\"hash和random的负载均衡策略中\",{\"1\":{\"1163\":1}}],[\"hash结合使用\",{\"1\":{\"1162\":1}}],[\"hash等\",{\"1\":{\"961\":1}}],[\"hash等数据结构的存储\",{\"1\":{\"956\":1}}],[\"hashes\",{\"1\":{\"957\":1}}],[\"hash索引只适用于某些特定场景\",{\"1\":{\"807\":1}}],[\"hashset\",{\"1\":{\"638\":1}}],[\"hashset等\",{\"1\":{\"127\":1}}],[\"hash一致性校验\",{\"1\":{\"634\":1}}],[\"hashmap<>\",{\"1\":{\"1166\":3}}],[\"hashmap\",{\"1\":{\"638\":3,\"641\":2,\"1166\":1}}],[\"hashmap和hashtable的区别\",{\"1\":{\"598\":1,\"670\":1}}],[\"hashmap和concurrenthashmap的区别\",{\"1\":{\"569\":1,\"641\":2}}],[\"hashmap底层是什么数据结构组成的\",{\"1\":{\"593\":1,\"665\":1}}],[\"hashmap在jdk1\",{\"1\":{\"590\":1,\"662\":1}}],[\"hashmap的底层结构以及一些扩容操作\",{\"1\":{\"569\":1,\"641\":2}}],[\"hashmap的底层实现呢\",{\"1\":{\"566\":1,\"638\":2}}],[\"hash冲突怎么处理的\",{\"1\":{\"566\":1,\"638\":2}}],[\"hash\",{\"0\":{\"1164\":1,\"1166\":1},\"1\":{\"124\":3,\"258\":1,\"347\":1,\"388\":3,\"580\":1,\"644\":1,\"651\":1,\"652\":1,\"702\":1,\"817\":1,\"965\":2,\"969\":1,\"1006\":1,\"1010\":2,\"1160\":2,\"1164\":35,\"1165\":11,\"1166\":2,\"1225\":2,\"1226\":1,\"1227\":1}}],[\"hashicorp的raft共识协议的golang实现\",{\"1\":{\"128\":1}}],[\"hashicorp\",{\"1\":{\"122\":1,\"454\":1}}],[\"hangzhou\",{\"1\":{\"1225\":1}}],[\"handldform\",{\"1\":{\"1281\":2}}],[\"handling\",{\"1\":{\"388\":1}}],[\"handleuserupdate\",{\"1\":{\"1283\":2}}],[\"handleheaders\",{\"1\":{\"1282\":2}}],[\"handlefileupload\",{\"1\":{\"1281\":2}}],[\"handlefunc\",{\"1\":{\"324\":6,\"1337\":1,\"1338\":1}}],[\"handlejson\",{\"1\":{\"1281\":2}}],[\"handle\",{\"1\":{\"744\":1,\"746\":1,\"754\":1,\"756\":2,\"771\":1,\"1337\":2}}],[\"handlerfunc类型是一个适配器\",{\"1\":{\"1337\":1}}],[\"handlerfunc函数\",{\"1\":{\"1337\":1}}],[\"handlerfunc\",{\"1\":{\"1092\":1,\"1337\":1}}],[\"handlers\",{\"1\":{\"122\":1}}],[\"handler\",{\"1\":{\"122\":1,\"324\":1,\"717\":3,\"1336\":1}}],[\"hanzi至hanyu拼音转换器\",{\"1\":{\"144\":1}}],[\"htm文件\",{\"1\":{\"1141\":1}}],[\"htm\",{\"1\":{\"1123\":1,\"1130\":1,\"1131\":1,\"1141\":1,\"1158\":1}}],[\"html转义\",{\"1\":{\"1420\":1}}],[\"html转markdown\",{\"1\":{\"122\":1}}],[\"html模板操作包\",{\"1\":{\"1308\":1}}],[\"html或者index\",{\"1\":{\"1141\":1}}],[\"html是一个相对路径\",{\"1\":{\"1123\":1}}],[\"html中的index\",{\"1\":{\"1123\":1}}],[\"html渲染器的html\",{\"1\":{\"138\":1}}],[\"html和css创建应用的程序\",{\"1\":{\"138\":1}}],[\"html2text\",{\"1\":{\"122\":1}}],[\"html文件\",{\"1\":{\"65\":1}}],[\"html\",{\"1\":{\"49\":1,\"54\":1,\"65\":1,\"122\":1,\"124\":2,\"138\":1,\"771\":1,\"802\":1,\"803\":1,\"805\":1,\"1109\":1,\"1123\":6,\"1130\":7,\"1131\":7,\"1133\":1,\"1135\":2,\"1136\":1,\"1139\":1,\"1141\":5,\"1142\":4,\"1158\":5,\"1160\":3,\"1162\":1,\"1163\":1,\"1164\":1,\"1175\":1,\"1193\":1,\"1308\":2,\"1412\":1,\"1420\":2}}],[\"http协议等常见任务的功能\",{\"1\":{\"1365\":1}}],[\"httprouter\",{\"1\":{\"1277\":1}}],[\"http足够简单\",{\"1\":{\"1273\":1}}],[\"http包提供了开箱即用的反向代理功能\",{\"1\":{\"1338\":1}}],[\"http包十分的优秀\",{\"1\":{\"1329\":1}}],[\"http包\",{\"1\":{\"1272\":1}}],[\"http包中的东西的补充\",{\"1\":{\"124\":1}}],[\"http和location中\",{\"1\":{\"1139\":1}}],[\"http和https的区别\",{\"0\":{\"83\":1},\"1\":{\"569\":1,\"590\":1,\"641\":2,\"662\":1}}],[\"http响应代码\",{\"1\":{\"1133\":1}}],[\"http请求方法\",{\"1\":{\"1133\":1}}],[\"http请求头和请求主体\",{\"1\":{\"1133\":1}}],[\"http请求行的主机名>\",{\"1\":{\"1133\":1}}],[\"http的安全版\",{\"1\":{\"641\":1}}],[\"http3\",{\"1\":{\"618\":1,\"690\":1}}],[\"http1\",{\"1\":{\"618\":1,\"690\":1}}],[\"http里面登录的状态保持是怎么做的\",{\"1\":{\"592\":1,\"664\":1}}],[\"httphandler\",{\"1\":{\"427\":2}}],[\"http接口返回的就是这一种数据\",{\"1\":{\"323\":1}}],[\"httplabs可让您检查http请求并伪造响应\",{\"1\":{\"145\":1}}],[\"httplab\",{\"1\":{\"145\":1}}],[\"http快10倍\",{\"1\":{\"145\":1}}],[\"http客户端实现\",{\"1\":{\"128\":1}}],[\"httputil\",{\"1\":{\"124\":1,\"1338\":1}}],[\"httptest\",{\"1\":{\"124\":1}}],[\"http\",{\"0\":{\"1152\":1,\"1329\":1},\"1\":{\"111\":1,\"121\":1,\"124\":6,\"145\":1,\"158\":1,\"324\":13,\"326\":2,\"327\":7,\"328\":2,\"330\":1,\"453\":1,\"461\":1,\"502\":1,\"611\":1,\"637\":3,\"638\":1,\"641\":2,\"683\":1,\"736\":1,\"739\":1,\"741\":1,\"742\":1,\"743\":5,\"744\":2,\"756\":2,\"768\":3,\"769\":3,\"770\":3,\"771\":2,\"774\":1,\"851\":1,\"852\":1,\"1073\":1,\"1078\":2,\"1079\":1,\"1081\":1,\"1082\":1,\"1084\":1,\"1086\":4,\"1087\":6,\"1092\":4,\"1108\":1,\"1109\":1,\"1111\":1,\"1116\":21,\"1120\":1,\"1123\":3,\"1130\":3,\"1131\":1,\"1132\":9,\"1133\":12,\"1135\":3,\"1136\":2,\"1138\":1,\"1143\":5,\"1144\":1,\"1151\":4,\"1152\":4,\"1158\":2,\"1160\":2,\"1162\":1,\"1163\":1,\"1164\":58,\"1165\":5,\"1166\":4,\"1173\":9,\"1184\":1,\"1220\":1,\"1221\":1,\"1233\":1,\"1274\":2,\"1275\":2,\"1277\":2,\"1280\":3,\"1281\":9,\"1282\":2,\"1283\":4,\"1286\":1,\"1308\":1,\"1330\":1,\"1331\":1,\"1333\":2,\"1334\":2,\"1335\":1,\"1336\":1,\"1337\":8,\"1338\":5}}],[\"http是明文在网络中传输\",{\"1\":{\"85\":1}}],[\"http是明文传输\",{\"1\":{\"83\":1}}],[\"http过程\",{\"1\":{\"85\":1}}],[\"http2\",{\"1\":{\"84\":1,\"620\":2,\"692\":2,\"1078\":2}}],[\"httpservletrequest\",{\"1\":{\"1166\":4}}],[\"https加密\",{\"1\":{\"641\":1}}],[\"https加密过程\",{\"1\":{\"603\":1,\"675\":1}}],[\"https是怎么加密的了解吗\",{\"1\":{\"569\":1,\"641\":2}}],[\"https原理\",{\"0\":{\"85\":1}}],[\"https=http+ssl协议加密\",{\"1\":{\"83\":1}}],[\"https\",{\"1\":{\"13\":1,\"49\":1,\"55\":1,\"84\":2,\"122\":57,\"453\":1,\"523\":1,\"611\":1,\"637\":1,\"641\":1,\"683\":1,\"702\":1,\"736\":2,\"737\":1,\"740\":3,\"744\":1,\"771\":2,\"774\":1,\"802\":1,\"803\":1,\"805\":1,\"841\":1,\"849\":1,\"853\":1,\"876\":1,\"878\":1,\"885\":1,\"886\":1,\"955\":2,\"964\":2,\"967\":1,\"1028\":2,\"1046\":1,\"1073\":2,\"1078\":3,\"1133\":1,\"1142\":1,\"1164\":1,\"1165\":1,\"1166\":1,\"1175\":1,\"1183\":1,\"1184\":2,\"1221\":3,\"1222\":1,\"1223\":2,\"1228\":1,\"1229\":1,\"1231\":3,\"1233\":1,\"1234\":1,\"1235\":1,\"1277\":1,\"1281\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1338\":1,\"1345\":9}}],[\"hed903ksra084frid5jlgy==\",{\"1\":{\"723\":1}}],[\"helm官网\",{\"1\":{\"1231\":1}}],[\"helm\",{\"1\":{\"1230\":1,\"1231\":10}}],[\"helen\",{\"1\":{\"985\":2}}],[\"hellc++\",{\"1\":{\"1407\":1}}],[\"hellc\",{\"1\":{\"1407\":2}}],[\"hell\",{\"1\":{\"511\":1}}],[\"helloworld\",{\"1\":{\"266\":2,\"486\":4,\"487\":2,\"491\":1,\"493\":1,\"494\":1,\"498\":2,\"502\":1,\"1378\":1}}],[\"hello\",{\"0\":{\"1185\":1,\"1275\":1},\"1\":{\"172\":2,\"177\":1,\"186\":1,\"187\":1,\"189\":2,\"211\":1,\"214\":1,\"217\":1,\"218\":2,\"219\":1,\"220\":2,\"221\":4,\"234\":1,\"254\":1,\"258\":5,\"297\":2,\"338\":2,\"350\":1,\"354\":1,\"357\":2,\"362\":2,\"371\":2,\"373\":2,\"401\":3,\"402\":14,\"406\":1,\"412\":7,\"422\":4,\"436\":3,\"441\":1,\"443\":2,\"445\":7,\"446\":18,\"447\":3,\"448\":8,\"449\":30,\"450\":10,\"457\":4,\"462\":2,\"465\":2,\"468\":7,\"470\":9,\"477\":4,\"512\":1,\"516\":2,\"635\":2,\"651\":1,\"863\":2,\"910\":2,\"985\":1,\"1035\":1,\"1047\":1,\"1184\":1,\"1185\":1,\"1188\":1,\"1275\":1,\"1277\":1,\"1286\":2,\"1388\":4,\"1396\":3,\"1400\":14,\"1401\":4,\"1407\":5,\"1411\":2,\"1415\":2,\"1417\":10,\"1423\":2,\"1447\":1,\"1448\":1}}],[\"helper\",{\"0\":{\"472\":1},\"1\":{\"472\":3,\"473\":1}}],[\"help\",{\"1\":{\"326\":1,\"454\":7,\"466\":1,\"469\":1,\"855\":2,\"1186\":1,\"1197\":2}}],[\"height\",{\"1\":{\"267\":1,\"515\":6}}],[\"hertz\",{\"1\":{\"330\":1}}],[\"hermes\",{\"1\":{\"129\":1}}],[\"here\",{\"1\":{\"18\":1,\"448\":1}}],[\"hectane\",{\"1\":{\"129\":1}}],[\"hexists\",{\"1\":{\"929\":1,\"972\":1}}],[\"hexsum\",{\"1\":{\"388\":3}}],[\"hex\",{\"1\":{\"124\":1,\"388\":1,\"881\":2,\"884\":1}}],[\"healthy\",{\"1\":{\"1163\":1}}],[\"health\",{\"1\":{\"128\":2,\"768\":1,\"770\":1}}],[\"heapprofile\",{\"1\":{\"323\":3}}],[\"heap\",{\"1\":{\"124\":1,\"303\":2,\"317\":2,\"318\":2,\"319\":3,\"320\":6,\"323\":3,\"324\":1,\"326\":2,\"327\":2,\"344\":52,\"639\":1,\"1308\":1}}],[\"headless\",{\"1\":{\"454\":2}}],[\"header和cookie处理\",{\"1\":{\"1282\":1}}],[\"headers\",{\"1\":{\"1282\":2}}],[\"header\",{\"1\":{\"347\":2,\"634\":1,\"743\":1,\"1092\":1,\"1334\":1}}],[\"head\",{\"1\":{\"37\":1,\"55\":1,\"449\":2,\"934\":1}}],[\"下图直观反映了kafka的各种概念的关系\",{\"1\":{\"1020\":1}}],[\"下图很形象的描述了其过程\",{\"1\":{\"348\":1}}],[\"下表对原有\",{\"1\":{\"985\":1}}],[\"下表给出了与\",{\"1\":{\"967\":1}}],[\"下一小段的时间写入下一个partition\",{\"1\":{\"1023\":1}}],[\"下一页使用方案2\",{\"1\":{\"820\":1}}],[\"下一行\",{\"1\":{\"780\":1}}],[\"下划线\",{\"1\":{\"794\":1}}],[\"下划线组成\",{\"1\":{\"178\":1}}],[\"下次查询再重新建立一个\",{\"1\":{\"776\":1}}],[\"下次提交无需填写用户名和密码\",{\"1\":{\"46\":1}}],[\"下\",{\"1\":{\"743\":1}}],[\"下单等高并发操作\",{\"1\":{\"639\":1}}],[\"下es和redis的区别\",{\"1\":{\"601\":1,\"673\":1}}],[\"下游两个db使用redis\",{\"1\":{\"600\":1,\"672\":1}}],[\"下rune类型\",{\"1\":{\"587\":1,\"659\":1}}],[\"下载后直接输入\",{\"1\":{\"1229\":1}}],[\"下载yaml文件\",{\"1\":{\"1228\":1}}],[\"下载三大组件\",{\"1\":{\"1222\":1}}],[\"下载阿里的源\",{\"1\":{\"1220\":1}}],[\"下载需要的环境add\",{\"1\":{\"1193\":1}}],[\"下载镜像\",{\"1\":{\"1185\":1,\"1187\":1}}],[\"下载安装\",{\"0\":{\"1111\":1}}],[\"下载与安装kafka\",{\"0\":{\"1028\":1}}],[\"下载与之对应的版本\",{\"1\":{\"740\":1}}],[\"下载mysql驱动库\",{\"1\":{\"890\":1}}],[\"下载mongodb的组件\",{\"1\":{\"878\":1}}],[\"下载sqlx库\",{\"1\":{\"890\":1}}],[\"下载以后\",{\"1\":{\"853\":1}}],[\"下载组件\",{\"1\":{\"744\":1}}],[\"下载可视化工具kibana\",{\"0\":{\"737\":1}}],[\"下载\",{\"0\":{\"1218\":1},\"1\":{\"736\":1,\"964\":1,\"1223\":1}}],[\"下载和安装\",{\"0\":{\"736\":1,\"849\":1}}],[\"下载官方的依赖库\",{\"1\":{\"701\":1}}],[\"下载当前项目的依赖包\",{\"1\":{\"456\":1}}],[\"下载依赖的话使用下面的地址就行了\",{\"1\":{\"829\":1}}],[\"下载依赖\",{\"0\":{\"452\":1}}],[\"下载地址\",{\"1\":{\"13\":1,\"737\":1,\"740\":1,\"849\":1,\"876\":1}}],[\"下文中为了方便\",{\"1\":{\"348\":1}}],[\"下方是一个简单示例\",{\"1\":{\"459\":1}}],[\"下方是一个向nil的map写入值的例子\",{\"1\":{\"394\":1}}],[\"下方是一个使用示例\",{\"1\":{\"272\":1}}],[\"下方例子中不管传什么类型都无法通过编译\",{\"1\":{\"340\":1}}],[\"下方列出所有的内置关键字\",{\"1\":{\"178\":1}}],[\"下列是一些普通字符串\",{\"1\":{\"252\":1}}],[\"下列代码就属于这种情况\",{\"1\":{\"250\":1}}],[\"下面来看一个关于模板引擎的简单使用示例\",{\"1\":{\"1415\":1}}],[\"下面来看一个读写互斥锁的使用案例\",{\"1\":{\"431\":1}}],[\"下面将以示例的形式讲解常用的函数\",{\"1\":{\"1395\":1}}],[\"下面将会以例子的形式演示如何使用\",{\"1\":{\"1383\":1}}],[\"下面将通过一个示例进行讲解\",{\"1\":{\"462\":1}}],[\"下面将通过示例来演示进行模块开发的几个步骤\",{\"1\":{\"443\":1}}],[\"下面一个例子是解析域名的ip地址\",{\"1\":{\"1373\":1}}],[\"下面逐一讲解\",{\"1\":{\"1366\":1}}],[\"下面逐一讲解并结合代码示例\",{\"1\":{\"1279\":1}}],[\"下面使用修改type类型为例\",{\"1\":{\"1235\":1}}],[\"下面配置可以限制特定ua\",{\"1\":{\"1151\":1}}],[\"下面开始优化\",{\"1\":{\"1061\":1}}],[\"下面列举kafka的一些常用命令的使用方法\",{\"1\":{\"1034\":1}}],[\"下面列出go语言中全部的内置类型\",{\"1\":{\"195\":1}}],[\"下面对\",{\"1\":{\"1000\":1}}],[\"下面进行逐一介绍\",{\"1\":{\"992\":1}}],[\"下面会用到\",{\"1\":{\"825\":1}}],[\"下面会简单演示用法\",{\"1\":{\"713\":1}}],[\"下面会简单列举一些规则\",{\"1\":{\"188\":1}}],[\"下面讲一下数据库的长连接和短连接\",{\"1\":{\"776\":1}}],[\"下面介绍一下server层的各个功能\",{\"1\":{\"775\":1}}],[\"下面介绍常见的输入方法\",{\"1\":{\"222\":1}}],[\"下面给出完整的代码\",{\"1\":{\"756\":1}}],[\"下面给出一些参考的开源项目\",{\"1\":{\"332\":1}}],[\"下面分别介绍golang\",{\"1\":{\"755\":1}}],[\"下面引用类型初始化一般直接使用make函数\",{\"1\":{\"510\":1}}],[\"下面加上\",{\"1\":{\"477\":1}}],[\"下面拿官方教程的例子来讲解\",{\"1\":{\"477\":1}}],[\"下面拿实际的代码举例\",{\"1\":{\"468\":1}}],[\"下面的模板操作都属于管道操作\",{\"1\":{\"1421\":1}}],[\"下面的每一个测试用例的结果由每一个基准测试的名称分隔\",{\"1\":{\"475\":1}}],[\"下面的例子以embed\",{\"1\":{\"1428\":1}}],[\"下面的例子是一个普通管道的模样\",{\"1\":{\"413\":1}}],[\"下面的例子演示了在c中修改go中的字符串\",{\"1\":{\"303\":1}}],[\"下面解释一下基准测试的输出结果\",{\"1\":{\"475\":1}}],[\"下面举一些常用的标准库的作用\",{\"1\":{\"1308\":1}}],[\"下面举个例子\",{\"1\":{\"474\":1}}],[\"下面举几个比较特殊的例子\",{\"1\":{\"293\":1}}],[\"下面依旧通过例子来演示\",{\"1\":{\"471\":1}}],[\"下面只会介绍常用的参数\",{\"1\":{\"469\":1}}],[\"下面只是一些参考项目\",{\"1\":{\"335\":1}}],[\"下面两个例子都无法通过编译\",{\"1\":{\"441\":1}}],[\"下面以一个字符串拼接的例子的性能比较来当作基准测试的例子\",{\"1\":{\"475\":1}}],[\"下面以一个int64类型演示为例\",{\"1\":{\"439\":1}}],[\"下面以一个例子演示\",{\"1\":{\"435\":1}}],[\"下面用一个简单的示例来演示下sync\",{\"1\":{\"436\":1}}],[\"下面用泛型实现一个简单的队列\",{\"1\":{\"343\":1}}],[\"下面稍微修改一下代码\",{\"1\":{\"396\":1}}],[\"下面借由两个数据结构来展示下泛型如何使用\",{\"1\":{\"342\":1}}],[\"下面例子中的integer就是一个类型空集\",{\"1\":{\"340\":1}}],[\"下面推荐几个命令行开发框架或库\",{\"1\":{\"335\":1}}],[\"下面创建的切片申请了1<<15的容量\",{\"1\":{\"319\":1}}],[\"下面就来逐一讲解\",{\"1\":{\"315\":1}}],[\"下面就来略微细致地去了解里面的概念\",{\"1\":{\"172\":1}}],[\"下面演示制作一个简单的动态链接库\",{\"1\":{\"312\":1}}],[\"下面再改一下\",{\"1\":{\"285\":1}}],[\"下面复习下\",{\"1\":{\"277\":1}}],[\"下面看几个简单的例子\",{\"1\":{\"1423\":1}}],[\"下面看几个例子\",{\"1\":{\"244\":1}}],[\"下面看一个迭代的例子\",{\"1\":{\"1424\":1}}],[\"下面看一个valuectx的简单使用案例\",{\"1\":{\"426\":1}}],[\"下面看一个例子\",{\"1\":{\"176\":1}}],[\"下面看看一个select语句长什么样\",{\"1\":{\"421\":1}}],[\"下面几个比较常见的\",{\"1\":{\"216\":1}}],[\"下面是内置的所有函数\",{\"1\":{\"1420\":1}}],[\"下面是\",{\"1\":{\"1284\":1}}],[\"下面是测试结果\",{\"1\":{\"1038\":1}}],[\"下面是更新多个文档的示例\",{\"1\":{\"836\":1}}],[\"下面是更新单个文档的示例\",{\"1\":{\"836\":1}}],[\"下面是创建多个文档的例子\",{\"1\":{\"835\":1}}],[\"下面是创建一个文档的例子\",{\"1\":{\"835\":1}}],[\"下面是mysql的简单架构示意图\",{\"1\":{\"775\":1}}],[\"下面是详细些的解释\",{\"1\":{\"455\":1}}],[\"下面是该结构体对外暴露的方法\",{\"1\":{\"436\":1}}],[\"下面是可能的情况之一\",{\"1\":{\"412\":1}}],[\"下面是删除多个文档的例子\",{\"1\":{\"837\":1}}],[\"下面是删除一个文档的例子\",{\"1\":{\"837\":1}}],[\"下面是删除单个文件的例子\",{\"1\":{\"405\":1}}],[\"下面是删除目录的例子\",{\"1\":{\"405\":1}}],[\"下面是代码示例\",{\"1\":{\"352\":1}}],[\"下面是一些工作区的命令\",{\"1\":{\"464\":1}}],[\"下面是一些总结\",{\"1\":{\"418\":1}}],[\"下面是一些类型判断方式\",{\"1\":{\"379\":1}}],[\"下面是一些例子\",{\"1\":{\"277\":1,\"379\":1}}],[\"下面是一个字节切片转字符串的例子\",{\"1\":{\"1448\":1}}],[\"下面是一个例子\",{\"1\":{\"473\":1}}],[\"下面是一个官网给的例子\",{\"1\":{\"458\":1}}],[\"下面是一个以os\",{\"1\":{\"402\":1}}],[\"下面是一个以读写模式打开一个文件的代码例子\",{\"1\":{\"400\":1}}],[\"下面是一个比较复杂的例子\",{\"1\":{\"396\":1}}],[\"下面是一个修改字段的例子\",{\"1\":{\"368\":1}}],[\"下面是一个简单二项堆的实现\",{\"1\":{\"344\":1}}],[\"下面是一个简单的mongo客户端与服务端建立连接的例子\",{\"1\":{\"830\":1}}],[\"下面是一个简单的timerctx的使用示例\",{\"1\":{\"428\":1}}],[\"下面是一个简单的示例\",{\"1\":{\"427\":1}}],[\"下面是一个简单的c结构体的例子\",{\"1\":{\"307\":1}}],[\"下面是一个简单的函数返回值的例子\",{\"1\":{\"280\":1}}],[\"下面是一个简单的结构体的例子\",{\"1\":{\"266\":1}}],[\"下面是一个简单的例子\",{\"1\":{\"213\":1,\"221\":1,\"308\":1,\"309\":1,\"1374\":1}}],[\"下面是一个完整的例子\",{\"1\":{\"278\":1,\"390\":1}}],[\"下面是go目前所有的格式化动词\",{\"1\":{\"221\":1}}],[\"下面是go语言中支持的运算符号的优先级排列\",{\"1\":{\"179\":1}}],[\"下面这个例子的情况就更加明显了\",{\"1\":{\"285\":1}}],[\"下面这个代码就可以通过编译\",{\"1\":{\"206\":1}}],[\"下面这种代码无法通过编译\",{\"1\":{\"206\":1}}],[\"下拉更换为标准库的错误包和github\",{\"1\":{\"131\":1}}],[\"下不了用这个命令\",{\"1\":{\"84\":1}}],[\"下个版本\",{\"1\":{\"12\":1}}],[\"迎来了飞速发展\",{\"1\":{\"12\":1}}],[\"无状态且短平快的服务使用\",{\"1\":{\"1161\":1}}],[\"无状态的\",{\"1\":{\"641\":1}}],[\"无中心化管理\",{\"1\":{\"1006\":1}}],[\"无线程开销\",{\"1\":{\"959\":1}}],[\"无效\",{\"1\":{\"825\":1}}],[\"无效的占用会导致更多的数据换入换出\",{\"1\":{\"791\":1}}],[\"无疑可以使用elasticsearch\",{\"1\":{\"735\":1}}],[\"无疑使用mysql\",{\"1\":{\"735\":1}}],[\"无连接\",{\"1\":{\"651\":1}}],[\"无序集合\",{\"1\":{\"638\":1,\"651\":1}}],[\"无序且无重复的对象\",{\"1\":{\"513\":1}}],[\"无指向任何实际地址\",{\"1\":{\"534\":1}}],[\"无需通过外部的网络设备交换\",{\"1\":{\"1195\":1}}],[\"无需停机即可扩展机器\",{\"1\":{\"1017\":1}}],[\"无需依赖运行时反射\",{\"1\":{\"516\":1}}],[\"无需输入用户名密码\",{\"1\":{\"49\":1}}],[\"无论其内部元素是否对外暴露\",{\"1\":{\"1443\":1}}],[\"无论\",{\"1\":{\"1307\":1}}],[\"无论vm\",{\"1\":{\"965\":1}}],[\"无论在开源还是专有领域\",{\"1\":{\"735\":1}}],[\"无论有无缓冲\",{\"1\":{\"635\":1}}],[\"无论是使用本地路径还是模块路径指定替换\",{\"1\":{\"459\":1}}],[\"无论怎样读写都会导致当前协程阻塞\",{\"1\":{\"418\":1}}],[\"无缓冲的\",{\"1\":{\"633\":1}}],[\"无缓冲的channel\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"无缓冲通道也称为同步通道\",{\"1\":{\"544\":1}}],[\"无缓冲管道中会造成死锁例子在这里可以顺利运行\",{\"1\":{\"417\":1}}],[\"无缓冲管道在发送数据时\",{\"1\":{\"417\":1}}],[\"无缓冲管道不应该同步的使用\",{\"1\":{\"416\":1}}],[\"无缓冲\",{\"0\":{\"416\":1},\"1\":{\"535\":1,\"633\":1,\"635\":1}}],[\"无法做到参数命名\",{\"1\":{\"1414\":1}}],[\"无法创建集群\",{\"1\":{\"1010\":1}}],[\"无法对外提供服务\",{\"1\":{\"985\":1}}],[\"无法用于排序\",{\"1\":{\"807\":1}}],[\"无法满足订单需求\",{\"1\":{\"639\":1}}],[\"无法承载更多的请求\",{\"1\":{\"639\":1}}],[\"无法转为我们需要的类型\",{\"1\":{\"526\":1}}],[\"无法预知这个对象是新创建的还是复用的\",{\"1\":{\"435\":1}}],[\"无法预判的\",{\"1\":{\"412\":1}}],[\"无法获得锁时并不会阻塞而是返回false\",{\"1\":{\"431\":1}}],[\"无法被取消\",{\"1\":{\"426\":1}}],[\"无法被修改\",{\"1\":{\"400\":1}}],[\"无法作为参数传递\",{\"1\":{\"385\":1}}],[\"无法作为该函数的参数\",{\"1\":{\"384\":1}}],[\"无法进行运算\",{\"1\":{\"381\":1}}],[\"无法通过dog结构体找到dog指针\",{\"1\":{\"287\":1}}],[\"无法通过编译\",{\"1\":{\"206\":1,\"253\":1,\"340\":2,\"341\":4}}],[\"无法使用dog\",{\"1\":{\"287\":1}}],[\"无法正常使用\",{\"1\":{\"275\":1}}],[\"无法修改\",{\"1\":{\"254\":1}}],[\"无法访问\",{\"1\":{\"210\":1}}],[\"无法及时记录我们的提交行为\",{\"1\":{\"11\":1}}],[\"无符号整型\",{\"1\":{\"197\":1}}],[\"无符号\",{\"1\":{\"197\":4}}],[\"无阻塞的tcp网络库\",{\"1\":{\"145\":1}}],[\"无反射json编码器\",{\"1\":{\"141\":1}}],[\"无内置\",{\"1\":{\"111\":5}}],[\"无障碍\",{\"1\":{\"72\":1}}],[\"无数开源项目开始迁移至github\",{\"1\":{\"12\":1}}],[\"还请自行了解\",{\"1\":{\"1334\":1}}],[\"还请注意\",{\"1\":{\"716\":1}}],[\"还包含软件运行时所需要的代码\",{\"1\":{\"1191\":1}}],[\"还不考虑热点数据访问的压力\",{\"1\":{\"1165\":1}}],[\"还不如没有索引\",{\"1\":{\"816\":1}}],[\"还得用它\",{\"1\":{\"1068\":1}}],[\"还得初始化\",{\"1\":{\"275\":1}}],[\"还增加了系统可用性和可扩展性\",{\"1\":{\"1060\":1}}],[\"还支持break\",{\"1\":{\"1424\":1}}],[\"还支持log\",{\"1\":{\"1029\":1}}],[\"还支持简单的消息队列\",{\"1\":{\"908\":1}}],[\"还给用户\",{\"1\":{\"1019\":1}}],[\"还可能有查询的并发性\",{\"1\":{\"816\":1}}],[\"还可以有比如30r\",{\"1\":{\"1151\":1}}],[\"还可以怎么优化\",{\"1\":{\"625\":1,\"697\":1}}],[\"还可以使用两个方便函数来进行文件读取\",{\"1\":{\"401\":1}}],[\"还可以使用uft8包下的工具\",{\"1\":{\"258\":1}}],[\"还可以用web和weblist命令在浏览器中查看图片和源代码\",{\"1\":{\"326\":1}}],[\"还可以通过内置函数len来访问数组元素的数量\",{\"1\":{\"240\":1}}],[\"还可以通过new函数获得一个指针\",{\"1\":{\"239\":1}}],[\"还可以通过导入标准库cmp来判断\",{\"1\":{\"209\":1}}],[\"还可以在表达式之前编写一些简单语句\",{\"1\":{\"230\":1}}],[\"还可以自动补零\",{\"1\":{\"221\":1}}],[\"还可以\",{\"1\":{\"212\":1}}],[\"还要求允许某种程度的突发传输\",{\"1\":{\"1147\":1}}],[\"还要重新分配槽\",{\"1\":{\"1010\":1}}],[\"还要保存一下索引文件\",{\"1\":{\"811\":1}}],[\"还要更新索引\",{\"1\":{\"811\":1}}],[\"还要考虑其他方面的因素\",{\"1\":{\"799\":1}}],[\"还要先经过优化器的处理\",{\"1\":{\"779\":1}}],[\"还能直接帮我们将数据库的结构定义转化成\",{\"1\":{\"794\":1}}],[\"还能提升相互之间的关联使用率\",{\"1\":{\"793\":1}}],[\"还会增加运行时间和索引空间\",{\"1\":{\"793\":1}}],[\"还会在内存分配的增量超过一个特定比例时触发\",{\"1\":{\"633\":1}}],[\"还提供了许多函数来方便操作\",{\"1\":{\"438\":1}}],[\"还希望它是一个稳定高效的应用\",{\"1\":{\"315\":1}}],[\"还需要对这种数据结构进行优化\",{\"1\":{\"803\":1}}],[\"还需要考虑其他方面的因素\",{\"1\":{\"798\":1}}],[\"还需要确保本地拥有c\",{\"1\":{\"297\":1}}],[\"还需要注意的是\",{\"1\":{\"206\":1}}],[\"还有base64这种\",{\"1\":{\"1308\":1}}],[\"还有gin的翻译器对于自定义的可能不生效\",{\"1\":{\"1289\":1}}],[\"还有写操作都在主节点上\",{\"1\":{\"1005\":1}}],[\"还有使用的索引名称\",{\"1\":{\"817\":1}}],[\"还有什么相关的\",{\"1\":{\"633\":1}}],[\"还有没有对齐可能会触发总线错误\",{\"1\":{\"554\":1}}],[\"还有断言\",{\"1\":{\"516\":1}}],[\"还有几个常用的测试参数\",{\"1\":{\"505\":1}}],[\"还有第二个返回值\",{\"1\":{\"415\":1}}],[\"还有个办法就是静态链接库和动态链接库\",{\"1\":{\"311\":1}}],[\"还有一些基础的io操作函数\",{\"1\":{\"1308\":1}}],[\"还有一种场景是\",{\"1\":{\"500\":1}}],[\"还有一种很极端的情况\",{\"1\":{\"397\":1}}],[\"还有一种特殊情况便是函数参数为\",{\"1\":{\"320\":1}}],[\"还有一种情况\",{\"1\":{\"287\":1}}],[\"还有一个比较特殊的内置函数call\",{\"1\":{\"1420\":1}}],[\"还有一个用法是捕获panic\",{\"1\":{\"283\":1}}],[\"还有一个用途就是声明一个指针\",{\"1\":{\"275\":1}}],[\"还有一个非常重要的点\",{\"1\":{\"278\":1}}],[\"还有一点就是\",{\"1\":{\"179\":1}}],[\"还有另一种特殊的使用方法就是匿名导入包\",{\"1\":{\"175\":1}}],[\"还有遇到比较好的思路要勤做笔记多复习一下\",{\"1\":{\"79\":1}}],[\"还是需要多个节点配合\",{\"1\":{\"1072\":1}}],[\"还是需要结合实际需求选择\",{\"1\":{\"1005\":1}}],[\"还是用它\",{\"1\":{\"1068\":1}}],[\"还是分布式的\",{\"1\":{\"1054\":1}}],[\"还是找的课题\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"还是各个学校通用的项目\",{\"1\":{\"567\":1,\"639\":2}}],[\"还是老老实实用go吧\",{\"1\":{\"314\":1}}],[\"还是拿sum\",{\"1\":{\"313\":1}}],[\"还是可以恢复\",{\"1\":{\"26\":1}}],[\"还是很多人抱怨\",{\"1\":{\"12\":1}}],[\"还原\",{\"1\":{\"25\":1}}],[\"还在用一些老的软件\",{\"1\":{\"9\":1}}],[\"开n方\",{\"0\":{\"1361\":1}}],[\"开放8000\",{\"1\":{\"1078\":1}}],[\"开头\",{\"1\":{\"794\":2,\"795\":3}}],[\"开头含\",{\"1\":{\"641\":1}}],[\"开场\",{\"0\":{\"575\":1,\"647\":1}}],[\"开销较小\",{\"1\":{\"645\":1}}],[\"开销大\",{\"1\":{\"645\":1}}],[\"开销\",{\"1\":{\"540\":1}}],[\"开了10个协程不断的存入数据\",{\"1\":{\"436\":1}}],[\"开启gzip\",{\"1\":{\"1130\":1}}],[\"开启链路追踪服务jaeger\",{\"1\":{\"1081\":1}}],[\"开启集群模式\",{\"1\":{\"1010\":1}}],[\"开启aof的数据持久化\",{\"1\":{\"1010\":1}}],[\"开启aof\",{\"0\":{\"986\":1}}],[\"开启用户认证\",{\"1\":{\"852\":1}}],[\"开启主从同步\",{\"1\":{\"822\":1}}],[\"开启二进制日志功能\",{\"1\":{\"822\":3}}],[\"开启\",{\"1\":{\"813\":1}}],[\"开启生产者的重试机制\",{\"1\":{\"634\":1}}],[\"开启测试覆盖率分析\",{\"1\":{\"469\":1}}],[\"开启了十个协程来对count进行+1操作\",{\"1\":{\"429\":1}}],[\"开启了cgo以后编译时间是要比纯go要更久的\",{\"1\":{\"297\":1}}],[\"开启一个新的协程去异步处理该连接\",{\"1\":{\"1374\":1}}],[\"开启一个新的协程\",{\"1\":{\"421\":1}}],[\"开启cgo以后\",{\"1\":{\"297\":1}}],[\"开箱即用的消息队列\",{\"1\":{\"1053\":1}}],[\"开箱即用\",{\"1\":{\"114\":1,\"436\":1,\"1057\":1}}],[\"开源镜像站\",{\"1\":{\"1218\":1}}],[\"开源版本和商业版本价格是否差异很大\",{\"1\":{\"1072\":1}}],[\"开源许可证是否友好\",{\"1\":{\"1072\":1}}],[\"开源还是闭源\",{\"1\":{\"1072\":1}}],[\"开源\",{\"1\":{\"905\":2,\"1052\":1}}],[\"开源仓库\",{\"1\":{\"828\":1}}],[\"开源框架二次开发\",{\"1\":{\"625\":1,\"697\":1}}],[\"开源的监控和报警工具\",{\"1\":{\"166\":1}}],[\"开源的容器编排平台\",{\"1\":{\"166\":1}}],[\"开源的代码\",{\"1\":{\"53\":1}}],[\"开源协议\",{\"1\":{\"111\":1}}],[\"开始测试\",{\"0\":{\"1093\":1,\"1099\":1,\"1103\":1},\"1\":{\"1093\":1,\"1096\":1}}],[\"开始测试保存\",{\"1\":{\"884\":1}}],[\"开始整合ginweb框架\",{\"1\":{\"1087\":1}}],[\"开始配置kong服务和路由\",{\"0\":{\"1080\":1}}],[\"开始异步获取消息\",{\"1\":{\"1036\":1}}],[\"开始进行消费\",{\"1\":{\"1036\":1}}],[\"开始进行安装\",{\"1\":{\"963\":1}}],[\"开始遍历分区中的消息\",{\"1\":{\"1036\":1}}],[\"开始绑定8008和8007关系\",{\"1\":{\"1010\":1}}],[\"开始重写\",{\"1\":{\"985\":1}}],[\"开始一个事务\",{\"1\":{\"897\":1}}],[\"开始执行的时候\",{\"1\":{\"780\":1}}],[\"开始执行语句\",{\"1\":{\"780\":1}}],[\"开始做\",{\"0\":{\"780\":1}}],[\"开始\",{\"1\":{\"498\":1,\"970\":1}}],[\"开始安装证书到nginx中去\",{\"1\":{\"84\":1}}],[\"开始并不好用\",{\"1\":{\"12\":1}}],[\"开代码可直接选择ai解释\",{\"1\":{\"79\":1}}],[\"开发难度\",{\"1\":{\"1309\":1}}],[\"开发模式\",{\"1\":{\"1302\":1}}],[\"开发测试使用本地代理或者修改nodepod类型\",{\"1\":{\"1235\":1}}],[\"开发环境\",{\"1\":{\"1233\":1,\"1234\":1,\"1235\":1}}],[\"开发后打包成app\",{\"1\":{\"1181\":1}}],[\"开发语言\",{\"1\":{\"1057\":1}}],[\"开发语言为go和c++\",{\"1\":{\"575\":1,\"647\":1}}],[\"开发高性能\",{\"1\":{\"656\":1}}],[\"开发经验\",{\"1\":{\"638\":1}}],[\"开发过程中用过线程池吗\",{\"1\":{\"573\":1,\"645\":2}}],[\"开发者就难受了\",{\"1\":{\"345\":1}}],[\"开发者用的顺手\",{\"1\":{\"345\":1}}],[\"开发者在feature分支上继续修改\",{\"1\":{\"58\":1}}],[\"开发上确实会比较方便\",{\"1\":{\"337\":1}}],[\"开发\",{\"0\":{\"158\":1},\"1\":{\"636\":1,\"1053\":1,\"1056\":1,\"1181\":1}}],[\"开发的\",{\"1\":{\"1107\":1}}],[\"开发的开源编程语言\",{\"1\":{\"148\":1}}],[\"开发的代码自动生成的配置文件\",{\"1\":{\"28\":1}}],[\"开发成本\",{\"1\":{\"117\":1}}],[\"开发工具支持好\",{\"1\":{\"114\":1}}],[\"开发效率\",{\"1\":{\"111\":1}}],[\"开发体验\",{\"1\":{\"111\":1}}],[\"开发做贡献\",{\"1\":{\"53\":1}}],[\"开发人员编写的sql语句或者数据库整体解决方案都更重视在功能上的实\",{\"1\":{\"799\":1}}],[\"开发人员不太需要关注底层实现就能做出一个相当不错的并发应用\",{\"1\":{\"411\":1}}],[\"开发人员下载代码即文档\",{\"1\":{\"58\":1}}],[\"开发人员只能使用命令行模式\",{\"1\":{\"55\":1}}],[\"开发人员之间彼此没有沟通导致的同一个时间节点修改了同一个地方的代码\",{\"1\":{\"36\":1}}],[\"开发人员a\",{\"1\":{\"36\":1}}],[\"开发需求\",{\"1\":{\"58\":1}}],[\"开发需求2\",{\"1\":{\"36\":1}}],[\"开发需求1\",{\"1\":{\"36\":1}}],[\"开发了一个工具类\",{\"1\":{\"36\":2}}],[\"开发了个爬虫\",{\"1\":{\"12\":1}}],[\"开发完毕如何把需求1\",{\"1\":{\"35\":1}}],[\"开发服务的创造者\",{\"1\":{\"12\":1}}],[\"吃人嘴短\",{\"1\":{\"12\":1}}],[\"估计谈判的过程感觉到了憋屈\",{\"1\":{\"12\":1}}],[\"提高可读性\",{\"1\":{\"1131\":1}}],[\"提高kafka的吞\",{\"1\":{\"1020\":1}}],[\"提高索引效率\",{\"1\":{\"815\":1}}],[\"提高区间访问能力\",{\"1\":{\"805\":1}}],[\"提高并发\",{\"1\":{\"788\":1}}],[\"提高查询效率\",{\"1\":{\"635\":1}}],[\"提高了网络吞吐\",{\"1\":{\"636\":1}}],[\"提高了灵活性和可复用性\",{\"1\":{\"635\":1}}],[\"提高了开发人员的下限\",{\"1\":{\"411\":1}}],[\"提高性能并减轻后端服务器的负载\",{\"1\":{\"1071\":1}}],[\"提高性能\",{\"1\":{\"633\":1,\"641\":1}}],[\"提升安全性\",{\"1\":{\"1235\":1}}],[\"提升符\",{\"1\":{\"1223\":1}}],[\"提升\",{\"1\":{\"1068\":1}}],[\"提升写性能\",{\"1\":{\"1005\":1}}],[\"提升自己的技术深度\",{\"1\":{\"655\":1}}],[\"提升了我的系统设计和架构能力\",{\"1\":{\"655\":1}}],[\"提升系统的可维护性和扩展性\",{\"1\":{\"644\":1}}],[\"提升比较小\",{\"1\":{\"566\":1,\"638\":2}}],[\"提升性能的同时\",{\"1\":{\"1060\":1}}],[\"提升性能\",{\"1\":{\"513\":1,\"1062\":1}}],[\"提问\",{\"1\":{\"520\":1}}],[\"提取文档内容\",{\"1\":{\"754\":1}}],[\"提取器\",{\"1\":{\"144\":1}}],[\"提取尽可能多的元数据\",{\"1\":{\"132\":1}}],[\"提供没有类型限制的指针操作\",{\"1\":{\"1308\":1}}],[\"提供丰富的中间件的支持\",{\"1\":{\"1272\":1}}],[\"提供极低的延迟\",{\"1\":{\"1272\":1}}],[\"提供两种限流方式\",{\"1\":{\"1145\":1}}],[\"提供标准化的错误响应\",{\"1\":{\"1071\":1}}],[\"提供监控和分析功能\",{\"1\":{\"1071\":1}}],[\"提供多种编程接口\",{\"1\":{\"1018\":1}}],[\"提供零丢失保证\",{\"1\":{\"1018\":1}}],[\"提供高可用\",{\"1\":{\"1005\":1}}],[\"提供高吞吐量和低延迟的能力\",{\"1\":{\"637\":1}}],[\"提供yum\",{\"1\":{\"774\":1}}],[\"提供更好的持久化和恢复能力\",{\"1\":{\"651\":1}}],[\"提供更高的可扩展性和容错能力\",{\"1\":{\"637\":1}}],[\"提供可手动分配和释放内存的功能\",{\"1\":{\"1308\":1}}],[\"提供可靠的数据传输\",{\"1\":{\"636\":1}}],[\"提供可以解析多个json文档并创建适合所有json的结构的包\",{\"1\":{\"141\":1}}],[\"提供的是一系列具体的函数\",{\"1\":{\"1308\":1}}],[\"提供的另一种持久化策略\",{\"1\":{\"984\":1}}],[\"提供的并发安全的\",{\"1\":{\"635\":1}}],[\"提供的文档服务\",{\"1\":{\"502\":1}}],[\"提供的功能包括文件操作\",{\"1\":{\"121\":1}}],[\"提供手动实验代码\",{\"1\":{\"502\":1}}],[\"提供文档\",{\"1\":{\"166\":1}}],[\"提供单词词干提取功能snowball本机\",{\"1\":{\"144\":1}}],[\"提供简单错误处理原语的软件包\",{\"1\":{\"131\":1}}],[\"提供各种错误处理原语\",{\"1\":{\"131\":1}}],[\"提供http\",{\"1\":{\"129\":1}}],[\"提供一系列网络操作的包\",{\"1\":{\"1308\":1}}],[\"提供一系列测试目的的类型\",{\"1\":{\"124\":1}}],[\"提供一个创建一系列相关或互相依赖对象的接口\",{\"1\":{\"654\":1}}],[\"提供一些做图函数\",{\"1\":{\"124\":1}}],[\"提供测量和显示时间的功能\",{\"1\":{\"124\":1}}],[\"提供对zip压缩文档的读和写支持\",{\"1\":{\"124\":1}}],[\"提供对自动测试go包的支持\",{\"1\":{\"124\":1}}],[\"提供对集合排序的基础函数集\",{\"1\":{\"124\":1}}],[\"提供最基本的日志功能\",{\"1\":{\"124\":1}}],[\"提供了非常完善的http客户端与服务端的实现\",{\"1\":{\"1329\":1}}],[\"提供了非常简洁且高效的并发支持\",{\"1\":{\"164\":1}}],[\"提供了两种实现主从模式的方法\",{\"1\":{\"992\":1}}],[\"提供了两种持久化机制\",{\"1\":{\"979\":1}}],[\"提供了相应的配置策略\",{\"1\":{\"985\":1}}],[\"提供了多种分页方式\",{\"1\":{\"656\":1}}],[\"提供了强大的语言模型\",{\"1\":{\"655\":1}}],[\"提供了\",{\"1\":{\"649\":1,\"985\":1}}],[\"提供了动态扩展的能力\",{\"1\":{\"635\":1}}],[\"提供了超时控制\",{\"1\":{\"546\":1}}],[\"提供了许多可用的方法\",{\"1\":{\"471\":1}}],[\"提供了内建的单元测试支持\",{\"1\":{\"155\":1}}],[\"提供了简洁且高效的方式来进行并发编程\",{\"1\":{\"151\":1}}],[\"提供了原生支持的轻量级线程\",{\"1\":{\"151\":1}}],[\"提供了低级的用于实现同步算法的原子级的内存机制\",{\"1\":{\"124\":1}}],[\"提供了http客户端和服务器的实现\",{\"1\":{\"124\":1}}],[\"提供了构建go包的工具\",{\"1\":{\"124\":1}}],[\"提供了实现heap\",{\"1\":{\"124\":1}}],[\"提供了基本的同步机制\",{\"1\":{\"124\":1}}],[\"提供了一个滚动记录器\",{\"1\":{\"1307\":1}}],[\"提供了一个对unix网络套接字的可移植接口\",{\"1\":{\"124\":1}}],[\"提供了一套完整的内置工具链\",{\"1\":{\"155\":1}}],[\"提供了一些http应用函数\",{\"1\":{\"124\":1}}],[\"提供了一些http测试应用\",{\"1\":{\"124\":1}}],[\"提供了一些基本的常量和数学函数\",{\"1\":{\"124\":1}}],[\"提供了对导入器的访问\",{\"1\":{\"1308\":1}}],[\"提供了对一个来自网络或其他i\",{\"1\":{\"124\":1}}],[\"提供了对系统日志服务的简单接口\",{\"1\":{\"124\":1}}],[\"提供了对从可执行文件加载的dwarf调试信息的访问\",{\"1\":{\"124\":1}}],[\"提供了对i\",{\"1\":{\"124\":1}}],[\"提供了对字节切片操作的函数\",{\"1\":{\"124\":1}}],[\"提供了哈希函数接口\",{\"1\":{\"124\":1}}],[\"提供字符串与基本数据类型互转的能力\",{\"1\":{\"121\":1}}],[\"提供免费的服务\",{\"1\":{\"12\":1}}],[\"提示符\",{\"1\":{\"1223\":1}}],[\"提示你这个变量声明了但没有使用\",{\"1\":{\"206\":1}}],[\"提示\",{\"1\":{\"72\":1,\"179\":1,\"196\":1,\"226\":1,\"238\":1,\"243\":1,\"250\":1,\"258\":2,\"259\":1,\"265\":1,\"267\":1,\"273\":1,\"276\":1,\"287\":1,\"289\":1,\"294\":1,\"296\":1,\"316\":1,\"327\":1,\"338\":1,\"345\":1,\"348\":1,\"353\":1,\"360\":1,\"384\":1,\"385\":1,\"387\":1,\"388\":1,\"394\":1,\"412\":1,\"417\":1,\"419\":1,\"420\":1,\"421\":1,\"422\":1,\"428\":1,\"431\":1,\"432\":1,\"435\":1,\"438\":1,\"440\":1,\"454\":1,\"459\":1,\"460\":1,\"466\":1,\"467\":1,\"468\":2,\"472\":1,\"477\":2,\"553\":1,\"701\":1,\"702\":1,\"756\":1,\"831\":1,\"903\":1,\"986\":1,\"990\":1,\"993\":1,\"995\":1,\"1005\":1,\"1009\":1,\"1012\":1,\"1052\":1,\"1057\":1,\"1181\":1,\"1262\":1,\"1269\":1,\"1288\":1,\"1301\":1,\"1303\":1,\"1309\":1,\"1364\":1,\"1375\":1,\"1394\":1,\"1411\":1,\"1437\":1,\"1443\":1}}],[\"提示容器\",{\"0\":{\"62\":1},\"1\":{\"62\":1}}],[\"提示文字\",{\"1\":{\"61\":1}}],[\"提交一个事务\",{\"1\":{\"897\":1}}],[\"提交时检查数据是否被其他事务修改\",{\"1\":{\"656\":1}}],[\"提交了怎么样的事务有可能导致死锁\",{\"1\":{\"610\":1,\"682\":1}}],[\"提交user模块的修改并推送到远程仓库\",{\"1\":{\"463\":1}}],[\"提交完毕后为最新提交创建一个tag\",{\"1\":{\"449\":1}}],[\"提交完毕应该推送到远端服务器\",{\"1\":{\"48\":1}}],[\"提交指定tag\",{\"1\":{\"58\":1}}],[\"提交分支至远程仓库\",{\"1\":{\"58\":1}}],[\"提交代码到当前需求对应的feature分支\",{\"1\":{\"58\":1}}],[\"提交代码\",{\"0\":{\"52\":1}}],[\"提交\",{\"1\":{\"26\":1,\"58\":1}}],[\"提交后文件图标又变成绿色\",{\"1\":{\"21\":1}}],[\"提交文件至本地仓库\",{\"0\":{\"20\":1}}],[\"提交到本地仓库\",{\"1\":{\"12\":1}}],[\"的副本\",{\"1\":{\"1405\":1}}],[\"的数量\",{\"1\":{\"1307\":1}}],[\"的数据结构来组织和查找路由\",{\"1\":{\"1284\":1}}],[\"的数据持久化机制\",{\"1\":{\"979\":1}}],[\"的数据库\",{\"1\":{\"841\":1,\"887\":1}}],[\"的数据类型及其数据结构\",{\"1\":{\"619\":1,\"691\":1}}],[\"的日志文件名\",{\"1\":{\"1307\":1}}],[\"的日志是跟踪mysql性能瓶颈的最快和最直接的方式了\",{\"1\":{\"813\":1}}],[\"的具体类型实现了\",{\"1\":{\"1307\":1}}],[\"的作用就是进行日志切割\",{\"1\":{\"1307\":1}}],[\"的作用和\",{\"1\":{\"967\":1}}],[\"的路由树实际上是一棵前缀树\",{\"1\":{\"1285\":1}}],[\"的conf文件\",{\"1\":{\"1249\":1}}],[\"的权限控制\",{\"1\":{\"1241\":1}}],[\"的决策机制\",{\"1\":{\"1239\":1}}],[\"的服务类型更改为\",{\"1\":{\"1234\":1}}],[\"的服务类型是\",{\"1\":{\"1232\":1}}],[\"的部署和运维工作\",{\"1\":{\"1230\":1}}],[\"的常见操作流程\",{\"1\":{\"1182\":1}}],[\"的常量\",{\"1\":{\"124\":1}}],[\"的虚拟节点处理\",{\"1\":{\"1165\":1}}],[\"的哈希值\",{\"1\":{\"1165\":1}}],[\"的圆环上\",{\"1\":{\"1165\":1}}],[\"的范围在int范围\",{\"1\":{\"1165\":1}}],[\"的范围查询条件\",{\"1\":{\"759\":1}}],[\"的情况\",{\"1\":{\"1155\":1}}],[\"的概念\",{\"1\":{\"1155\":1}}],[\"的目的是压缩内存占用量\",{\"1\":{\"1154\":1}}],[\"的目的是缩写内存占用量\",{\"1\":{\"1151\":1}}],[\"的访问\",{\"1\":{\"1151\":1}}],[\"的使用情况和性能\",{\"1\":{\"1071\":1}}],[\"的使用有许多隐含的陷阱\",{\"1\":{\"397\":1}}],[\"的入口点\",{\"1\":{\"1071\":1}}],[\"的高级特性\",{\"1\":{\"1203\":1}}],[\"的高延迟\",{\"1\":{\"1057\":1}}],[\"的高性能网络功能的框架\",{\"1\":{\"145\":1}}],[\"的低延迟和金融级的稳定性就可以满足\",{\"1\":{\"1057\":1}}],[\"的单个实例原生支持多个集群\",{\"1\":{\"1056\":2}}],[\"的所有字符\",{\"1\":{\"1405\":1}}],[\"的所有字段和值\",{\"1\":{\"972\":1}}],[\"的所有消息都是持久化的\",{\"1\":{\"1054\":1}}],[\"的学习成本还是很高的\",{\"1\":{\"1053\":1}}],[\"的上线或下线消费者\",{\"1\":{\"1027\":1}}],[\"的上下文切换涉及保存和恢复整个线程的状态\",{\"1\":{\"649\":1}}],[\"的上下文\",{\"1\":{\"635\":1}}],[\"的集合\",{\"1\":{\"1025\":1}}],[\"的含义是在时间\",{\"1\":{\"981\":1}}],[\"的配置文件中\",{\"1\":{\"981\":1}}],[\"的配置文件位于\",{\"1\":{\"965\":1}}],[\"的重要特性之一\",{\"1\":{\"979\":1}}],[\"的旧值\",{\"1\":{\"970\":1}}],[\"的名称\",{\"1\":{\"967\":2}}],[\"的剩余生存时间\",{\"1\":{\"967\":2}}],[\"的剩余的过期时间\",{\"1\":{\"967\":2}}],[\"的优势比较多\",{\"1\":{\"961\":1}}],[\"的功能\",{\"1\":{\"876\":1}}],[\"的支持\",{\"1\":{\"875\":1}}],[\"的2的n次方\",{\"1\":{\"805\":1}}],[\"的记录\",{\"1\":{\"802\":1}}],[\"的性能无法体现\",{\"1\":{\"986\":1}}],[\"的性能优化\",{\"1\":{\"799\":1}}],[\"的性能瓶颈\",{\"1\":{\"656\":1}}],[\"的sql里\",{\"1\":{\"795\":1}}],[\"的导出和导入\",{\"1\":{\"794\":1}}],[\"的整块功能删掉了\",{\"1\":{\"777\":1}}],[\"的文档不需要设置相同的字段\",{\"1\":{\"847\":1}}],[\"的文档\",{\"1\":{\"763\":1,\"765\":1,\"1071\":1}}],[\"的文件名始终是\",{\"1\":{\"1307\":1}}],[\"的文件\",{\"1\":{\"633\":1}}],[\"的各种查询用法\",{\"1\":{\"755\":1}}],[\"的开源搜索引擎\",{\"1\":{\"735\":1}}],[\"的开源精神不相符\",{\"1\":{\"12\":1}}],[\"的字段\",{\"1\":{\"780\":1}}],[\"的字段包括\",{\"1\":{\"651\":1}}],[\"的字符串参数\",{\"1\":{\"730\":1}}],[\"的内存\",{\"1\":{\"654\":1}}],[\"的内存回收触发条件及手动触发\",{\"1\":{\"633\":1}}],[\"的列\",{\"1\":{\"651\":1}}],[\"的顺序执行\",{\"1\":{\"651\":1}}],[\"的区别\",{\"1\":{\"645\":1,\"791\":1}}],[\"的区别和应用\",{\"1\":{\"619\":1,\"691\":1}}],[\"的问题\",{\"1\":{\"645\":1}}],[\"的最大并发数与其配置的硬件资源\",{\"1\":{\"639\":1}}],[\"的最大并发数与\",{\"1\":{\"639\":1}}],[\"的策略\",{\"1\":{\"639\":1}}],[\"的计数器\",{\"1\":{\"638\":1}}],[\"的明确访问修饰符\",{\"1\":{\"637\":1}}],[\"的成员\",{\"1\":{\"973\":1}}],[\"的成员字段首字母大小写决定了其访问权限\",{\"1\":{\"637\":1}}],[\"的成本\",{\"1\":{\"576\":1,\"648\":1}}],[\"的定义\",{\"1\":{\"637\":1}}],[\"的定义可以前往参考手册\",{\"1\":{\"385\":1}}],[\"的运行时调度模型\",{\"1\":{\"635\":1}}],[\"的核心概念\",{\"1\":{\"1182\":1}}],[\"的核心\",{\"1\":{\"700\":1,\"1287\":1}}],[\"的核心特性之一\",{\"1\":{\"635\":1}}],[\"的核心功能\",{\"1\":{\"514\":1}}],[\"的结构体不能比较\",{\"1\":{\"635\":1}}],[\"的事务隔离级别\",{\"1\":{\"634\":1}}],[\"的状态\",{\"1\":{\"634\":1}}],[\"的过期时间设为\",{\"1\":{\"970\":1}}],[\"的过期时间亿以毫秒计\",{\"1\":{\"967\":1}}],[\"的过期时间\",{\"1\":{\"634\":1,\"967\":1}}],[\"的锁\",{\"1\":{\"633\":2}}],[\"的执行顺序\",{\"1\":{\"633\":1}}],[\"的执行速度可能会快于子协程的执行速度\",{\"1\":{\"396\":1}}],[\"的底层实现\",{\"1\":{\"633\":1}}],[\"的垃圾回收\",{\"1\":{\"633\":1}}],[\"的负担\",{\"1\":{\"633\":1}}],[\"的topic\",{\"1\":{\"1027\":1}}],[\"的topic中\",{\"1\":{\"1019\":1}}],[\"的tool\",{\"1\":{\"139\":1}}],[\"的tsl三次握手过程\",{\"1\":{\"620\":1,\"692\":1}}],[\"的雪崩效应\",{\"1\":{\"619\":1,\"691\":1}}],[\"的实现\",{\"1\":{\"619\":1,\"691\":1}}],[\"的原因\",{\"1\":{\"592\":1,\"664\":1}}],[\"的原理你知道吗\",{\"1\":{\"588\":1,\"660\":1}}],[\"的比对了解吗\",{\"1\":{\"588\":1,\"660\":1}}],[\"的指令还用到过其他哪些呢\",{\"1\":{\"588\":1,\"660\":1}}],[\"的递减特性你了解哪些\",{\"1\":{\"588\":1,\"660\":1}}],[\"的到浏览器显示网页的过程\",{\"1\":{\"586\":1,\"658\":1}}],[\"的关系\",{\"1\":{\"586\":1,\"658\":1}}],[\"的处理\",{\"1\":{\"576\":1,\"648\":1,\"1149\":1}}],[\"的地址被返回\",{\"1\":{\"548\":1}}],[\"的地方\",{\"1\":{\"17\":1}}],[\"的一些接口也就是我们一般在子协程会根据上下文调用的方法\",{\"1\":{\"546\":1}}],[\"的生存时间\",{\"1\":{\"970\":1}}],[\"的生产者在消息成功发送前失败\",{\"1\":{\"634\":1}}],[\"的生命周期超出了它所在的作用域\",{\"1\":{\"548\":1}}],[\"的生命周期\",{\"1\":{\"546\":1}}],[\"的生态相对较新\",{\"1\":{\"169\":1}}],[\"的生态系统非常活跃\",{\"1\":{\"166\":1}}],[\"的生态和社区\",{\"0\":{\"166\":1}}],[\"的工程化设计\",{\"1\":{\"505\":1}}],[\"的函数参数默认是值传递\",{\"1\":{\"633\":1}}],[\"的函数\",{\"1\":{\"489\":1}}],[\"的效果是一样的\",{\"1\":{\"863\":1}}],[\"的效果\",{\"1\":{\"486\":1}}],[\"的耗时\",{\"1\":{\"476\":1}}],[\"的格式\",{\"1\":{\"455\":1,\"1390\":4}}],[\"的基础之上增加了超时机制\",{\"1\":{\"428\":1}}],[\"的参数是nil\",{\"1\":{\"397\":1}}],[\"的类型别名\",{\"1\":{\"384\":1}}],[\"的别名\",{\"1\":{\"348\":1}}],[\"的时间内判断最大或最小值\",{\"1\":{\"344\":1}}],[\"的时候需要特别注意\",{\"1\":{\"635\":1}}],[\"的时候\",{\"1\":{\"244\":1,\"779\":1,\"809\":1,\"816\":1}}],[\"的超集\",{\"1\":{\"293\":1}}],[\"的值设为\",{\"1\":{\"970\":1,\"972\":1}}],[\"的值便会增加继续执行\",{\"1\":{\"498\":1}}],[\"的值从\",{\"1\":{\"498\":1}}],[\"的值从一个小的数字慢慢增长到足够大的数字\",{\"1\":{\"498\":1}}],[\"的值为\",{\"1\":{\"498\":1,\"1024\":1}}],[\"的值\",{\"1\":{\"180\":1,\"970\":4}}],[\"的静态类型系统提供了更强的类型安全\",{\"1\":{\"169\":1}}],[\"的并发模型非常简洁而高效\",{\"1\":{\"170\":1}}],[\"的并发模型是其最强大的特性之一\",{\"1\":{\"151\":1}}],[\"的并发支持比\",{\"1\":{\"168\":1}}],[\"的标准库主要专注于网络编程\",{\"1\":{\"165\":1}}],[\"的标签\",{\"1\":{\"37\":1}}],[\"的编译速度极快\",{\"1\":{\"164\":1}}],[\"的特点\",{\"0\":{\"149\":1},\"1\":{\"1053\":1}}],[\"的库\",{\"1\":{\"145\":1}}],[\"的go端口\",{\"1\":{\"144\":1}}],[\"的go的一组可插拔\",{\"1\":{\"132\":1}}],[\"的自动注入\",{\"1\":{\"645\":1}}],[\"的自然语言处理库\",{\"1\":{\"144\":1}}],[\"的自定义屏幕点击\",{\"1\":{\"72\":1}}],[\"的接口实现是隐式的\",{\"1\":{\"637\":1}}],[\"的接口\",{\"1\":{\"142\":1}}],[\"的即插即用\",{\"1\":{\"142\":1}}],[\"的打印\",{\"1\":{\"124\":1}}],[\"的话\",{\"1\":{\"55\":1}}],[\"的\",{\"1\":{\"49\":1,\"611\":2,\"633\":3,\"634\":2,\"635\":3,\"637\":2,\"638\":2,\"639\":1,\"641\":1,\"683\":2,\"967\":1,\"1155\":1,\"1231\":1,\"1235\":1,\"1309\":1}}],[\"的第一行应该使用谁的代码\",{\"1\":{\"36\":1}}],[\"的代码合并到主分支呢\",{\"1\":{\"35\":1}}],[\"的代码并提交\",{\"1\":{\"35\":1}}],[\"的代码\",{\"1\":{\"30\":1}}],[\"的下载\",{\"0\":{\"13\":1}}],[\"的源代码\",{\"1\":{\"12\":1}}],[\"的协议\",{\"1\":{\"12\":1}}],[\"偷偷违反了和\",{\"1\":{\"12\":1}}],[\"a=b返回0\",{\"1\":{\"1397\":1}}],[\"a<b返回\",{\"1\":{\"1397\":1}}],[\"a<<1\",{\"1\":{\"228\":2}}],[\"a019774\",{\"1\":{\"1345\":1}}],[\"a002392\",{\"1\":{\"1345\":1}}],[\"a002162\",{\"1\":{\"1345\":1}}],[\"a002161\",{\"1\":{\"1345\":1}}],[\"a002193\",{\"1\":{\"1345\":1}}],[\"a001622\",{\"1\":{\"1345\":1}}],[\"a001113\",{\"1\":{\"1345\":1}}],[\"a000796\",{\"1\":{\"1345\":1}}],[\"a0\",{\"1\":{\"1195\":1}}],[\"a842\",{\"1\":{\"1195\":1}}],[\"a8\",{\"1\":{\"1194\":1,\"1195\":1}}],[\"aq\",{\"1\":{\"1187\":1}}],[\"a显示所有\",{\"1\":{\"1187\":1}}],[\"a节点的数据迁移情况是\",{\"1\":{\"1165\":1}}],[\"a节点对应a1\",{\"1\":{\"1165\":1}}],[\"a和b\",{\"1\":{\"1060\":1}}],[\"avg\",{\"1\":{\"1195\":2,\"1196\":1,\"1197\":3}}],[\"avhhuqv2shgkrp9z7xbdda\",{\"1\":{\"705\":1}}],[\"avoidance\",{\"1\":{\"656\":1}}],[\"available\",{\"1\":{\"454\":1,\"906\":1,\"1005\":1,\"1078\":1,\"1163\":1}}],[\"azure\",{\"1\":{\"655\":1}}],[\"azul3d\",{\"1\":{\"134\":1}}],[\"aws\",{\"1\":{\"634\":1,\"655\":1}}],[\"a>1and\",{\"1\":{\"622\":1,\"694\":1}}],[\"aop的实际的应用有哪些\",{\"1\":{\"598\":1,\"670\":1}}],[\"aof放文件所放的位置\",{\"1\":{\"1010\":1}}],[\"aof的重写也利用了写时复制\",{\"1\":{\"988\":1}}],[\"aof持久化的文件名\",{\"1\":{\"1010\":1}}],[\"aof持久化无论何时都不会阻塞服务器\",{\"1\":{\"988\":1}}],[\"aof持久化\",{\"1\":{\"988\":1}}],[\"aof和rdb对比\",{\"0\":{\"988\":1}}],[\"aof配置策略\",{\"0\":{\"987\":1}}],[\"aof文件中\",{\"1\":{\"985\":1}}],[\"aof文件\",{\"1\":{\"984\":1}}],[\"aof\",{\"0\":{\"984\":1},\"1\":{\"562\":1,\"634\":1,\"651\":1,\"965\":2,\"979\":1,\"984\":3,\"985\":18,\"986\":5,\"987\":1,\"988\":2,\"1010\":4}}],[\"aio\",{\"1\":{\"1229\":1}}],[\"ai\",{\"1\":{\"817\":1,\"1078\":1}}],[\"ai吗\",{\"1\":{\"583\":1,\"655\":1}}],[\"aim\",{\"1\":{\"516\":1}}],[\"aimstr\",{\"1\":{\"511\":1}}],[\"aint64\",{\"1\":{\"439\":10}}],[\"a62a605\",{\"1\":{\"449\":2}}],[\"a执行的稍微快一些\",{\"1\":{\"434\":1}}],[\"a协程最初访问到的值已经过时了\",{\"1\":{\"429\":1}}],[\"a协程在计算完毕后\",{\"1\":{\"429\":1}}],[\"a协程访问数据耗费500毫秒\",{\"1\":{\"429\":1}}],[\"am\",{\"1\":{\"1431\":1}}],[\"amd64\",{\"1\":{\"393\":1,\"475\":1,\"476\":3,\"498\":1,\"1223\":2}}],[\"amqp\",{\"1\":{\"122\":1,\"634\":1,\"637\":1,\"1053\":1,\"1057\":1}}],[\"against\",{\"1\":{\"993\":1,\"994\":1}}],[\"aggregation\",{\"1\":{\"886\":1,\"1019\":1}}],[\"aggregate\",{\"1\":{\"838\":3}}],[\"ago\",{\"1\":{\"775\":1}}],[\"agones\",{\"1\":{\"333\":1}}],[\"age>\",{\"1\":{\"1311\":1,\"1312\":1}}],[\"age>10\",{\"1\":{\"818\":2}}],[\"agent\",{\"1\":{\"1130\":1,\"1131\":1,\"1133\":1,\"1151\":2,\"1158\":1}}],[\"age数据\",{\"1\":{\"861\":2}}],[\"age=25\",{\"1\":{\"1281\":1}}],[\"age=123\",{\"1\":{\"1280\":1}}],[\"age=18\",{\"1\":{\"1280\":1}}],[\"age=10\",{\"1\":{\"814\":1,\"818\":6}}],[\"age=null是不会统计的\",{\"1\":{\"786\":1}}],[\"age\",{\"1\":{\"205\":1,\"206\":3,\"221\":1,\"266\":1,\"267\":1,\"268\":5,\"269\":6,\"270\":4,\"271\":3,\"272\":2,\"278\":4,\"281\":4,\"307\":6,\"308\":1,\"344\":7,\"366\":2,\"367\":1,\"368\":2,\"374\":2,\"379\":3,\"463\":1,\"513\":10,\"554\":2,\"584\":1,\"635\":3,\"656\":4,\"704\":2,\"705\":1,\"709\":2,\"710\":1,\"711\":2,\"713\":2,\"725\":2,\"786\":1,\"806\":2,\"818\":4,\"819\":7,\"820\":1,\"821\":1,\"832\":3,\"833\":3,\"834\":10,\"835\":3,\"836\":3,\"837\":1,\"838\":1,\"847\":1,\"858\":3,\"859\":1,\"861\":29,\"863\":8,\"893\":2,\"925\":5,\"967\":1,\"1228\":1,\"1235\":1,\"1280\":2,\"1281\":6,\"1283\":4,\"1289\":2,\"1310\":2,\"1311\":1,\"1312\":2,\"1316\":1,\"1317\":2,\"1318\":3,\"1319\":2,\"1320\":2,\"1321\":3,\"1325\":5,\"1328\":6,\"1331\":1,\"1380\":6,\"1381\":3,\"1422\":4,\"1426\":3,\"1427\":4,\"1428\":5,\"1440\":1,\"1441\":4,\"1442\":4,\"1443\":2}}],[\"atoi\",{\"1\":{\"1384\":2}}],[\"atomiclevel\",{\"1\":{\"1302\":1}}],[\"atomicity\",{\"1\":{\"904\":1}}],[\"atomic包下已经提供了原子操作相关的api\",{\"1\":{\"438\":1}}],[\"atomic\",{\"1\":{\"124\":1,\"434\":2,\"435\":1,\"438\":8,\"439\":5,\"440\":2,\"441\":5,\"469\":1,\"635\":3}}],[\"attempt\",{\"1\":{\"1301\":2}}],[\"attachable\",{\"1\":{\"1197\":1}}],[\"attach\",{\"1\":{\"454\":2,\"1189\":1}}],[\"attached\",{\"1\":{\"453\":1}}],[\"atmoic包还提供了compareandswap操作\",{\"1\":{\"440\":1}}],[\"atmoic包下原子操作只有函数签名\",{\"1\":{\"438\":1}}],[\"at\",{\"1\":{\"317\":4,\"318\":3,\"319\":1,\"320\":5,\"326\":1,\"476\":3,\"653\":4,\"742\":1,\"813\":1,\"831\":1,\"832\":1,\"835\":1,\"836\":1,\"837\":1,\"838\":1}}],[\"a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177\",{\"1\":{\"1194\":1}}],[\"a2数据迁移到d1\",{\"1\":{\"1165\":1}}],[\"a2\",{\"1\":{\"279\":1,\"1165\":1}}],[\"a139339\",{\"1\":{\"1345\":1}}],[\"a1d0c7532777\",{\"1\":{\"1194\":1}}],[\"a1数据会迁移到c2\",{\"1\":{\"1165\":1}}],[\"a1\",{\"1\":{\"279\":1}}],[\"aa\",{\"1\":{\"934\":1,\"1194\":1,\"1441\":1,\"1442\":1}}],[\"aaa\",{\"1\":{\"746\":1,\"1378\":1}}],[\"aaaaaaaaaa\",{\"1\":{\"1406\":1}}],[\"aaaa\",{\"1\":{\"230\":1}}],[\"aac比特流解析器\",{\"1\":{\"126\":1}}],[\"autodetection\",{\"1\":{\"1228\":1}}],[\"autoconf=yes\",{\"1\":{\"1219\":1}}],[\"autocommit=\",{\"1\":{\"820\":1}}],[\"autocompletion\",{\"1\":{\"454\":1}}],[\"auto\",{\"1\":{\"653\":2,\"791\":1,\"794\":1,\"795\":1,\"817\":2,\"985\":2,\"1029\":2}}],[\"automatic有用过\",{\"1\":{\"580\":1,\"652\":1}}],[\"auth=false\",{\"1\":{\"852\":1}}],[\"auth验证机制的账号和密码\",{\"1\":{\"756\":1,\"771\":1}}],[\"auth验证的账号和密码\",{\"1\":{\"744\":1}}],[\"authoritiesand\",{\"1\":{\"1225\":1}}],[\"authorityid\",{\"1\":{\"1090\":1,\"1092\":1}}],[\"authorization\",{\"1\":{\"871\":1,\"1238\":1,\"1282\":2,\"1283\":2,\"1334\":1}}],[\"author\",{\"1\":{\"752\":2,\"756\":2,\"757\":1,\"763\":1,\"764\":1,\"765\":1,\"1036\":1,\"1166\":1}}],[\"auth模块依赖于user模块的结构体user\",{\"1\":{\"463\":1}}],[\"auth\",{\"1\":{\"427\":8,\"463\":7,\"465\":1,\"873\":1,\"963\":2,\"1000\":1,\"1003\":1,\"1004\":3,\"1010\":3}}],[\"authservice\",{\"1\":{\"427\":2}}],[\"authentication\",{\"1\":{\"124\":1,\"463\":1}}],[\"autumn\",{\"1\":{\"213\":3}}],[\"a+b\",{\"1\":{\"208\":2,\"224\":1,\"225\":1,\"298\":1,\"516\":1,\"654\":1}}],[\"a++\",{\"1\":{\"179\":1,\"228\":2}}],[\"abb\",{\"1\":{\"1403\":1}}],[\"abbc\",{\"1\":{\"1403\":1}}],[\"abijk\",{\"1\":{\"1397\":1}}],[\"abe\",{\"1\":{\"1397\":5}}],[\"abac\",{\"1\":{\"1238\":2,\"1239\":1}}],[\"abandon\",{\"1\":{\"470\":1}}],[\"abs\",{\"1\":{\"1165\":3,\"1348\":1}}],[\"ab\",{\"1\":{\"1130\":1}}],[\"abort\",{\"1\":{\"1092\":3}}],[\"about\",{\"1\":{\"65\":1,\"454\":5}}],[\"abcabcabcabcabcabcabcabcabcabc\",{\"1\":{\"1406\":1}}],[\"abcedf\",{\"1\":{\"1398\":2}}],[\"abcedfg\",{\"1\":{\"1398\":2}}],[\"abcefg\",{\"1\":{\"924\":1}}],[\"abcefghijklmn\",{\"1\":{\"923\":1}}],[\"abcd\",{\"1\":{\"1397\":1}}],[\"abcdefghijk\",{\"1\":{\"1405\":5,\"1413\":2}}],[\"abcdefghijlmn\",{\"1\":{\"252\":2}}],[\"abcdefghisa\",{\"1\":{\"1404\":1}}],[\"abcdefga\",{\"1\":{\"1404\":1}}],[\"abcdefg\",{\"1\":{\"221\":1,\"1398\":3,\"1404\":3}}],[\"abc\",{\"1\":{\"186\":1,\"340\":1,\"725\":1,\"857\":2,\"858\":2,\"859\":2,\"860\":1,\"1139\":5,\"1143\":10,\"1397\":1,\"1398\":1,\"1406\":1}}],[\"ajson\",{\"1\":{\"141\":1}}],[\"ajstarks\",{\"1\":{\"122\":1}}],[\"af\",{\"1\":{\"1164\":2}}],[\"affected\",{\"1\":{\"822\":1}}],[\"after=network\",{\"1\":{\"1032\":1,\"1223\":1}}],[\"after函数\",{\"1\":{\"421\":1}}],[\"after函数的返回值是一个只读通道\",{\"1\":{\"419\":1}}],[\"after\",{\"1\":{\"419\":2,\"421\":3,\"470\":1,\"477\":3,\"514\":1,\"515\":2,\"656\":1,\"997\":1,\"1000\":1,\"1003\":1,\"1004\":3,\"1163\":1,\"1400\":4,\"1429\":1}}],[\"afs\",{\"1\":{\"132\":1}}],[\"afero\",{\"1\":{\"132\":1}}],[\"asia\",{\"1\":{\"1432\":1}}],[\"asp\",{\"1\":{\"1108\":1}}],[\"asleep\",{\"1\":{\"420\":1,\"422\":1}}],[\"asm\",{\"1\":{\"393\":1,\"453\":2,\"459\":1}}],[\"as\",{\"1\":{\"287\":1,\"303\":2,\"381\":1,\"393\":3,\"448\":1,\"470\":2,\"768\":1,\"849\":1,\"1010\":2,\"1225\":2,\"1301\":1}}],[\"associate\",{\"1\":{\"1426\":2}}],[\"asserts\",{\"1\":{\"1135\":6,\"1136\":3,\"1142\":3,\"1143\":3,\"1144\":3}}],[\"assembly\",{\"1\":{\"326\":1}}],[\"assigned\",{\"1\":{\"1010\":1}}],[\"assign=false\",{\"1\":{\"318\":1}}],[\"assignment\",{\"1\":{\"259\":1,\"287\":1,\"381\":1,\"394\":1}}],[\"assign\",{\"1\":{\"253\":1,\"317\":1,\"318\":1}}],[\"ass\",{\"1\":{\"146\":2}}],[\"asyncproducer\",{\"1\":{\"1047\":3}}],[\"asyncclose\",{\"1\":{\"1036\":1,\"1047\":1}}],[\"async\",{\"1\":{\"137\":1,\"1047\":1}}],[\"astits\",{\"1\":{\"146\":1}}],[\"astisub\",{\"1\":{\"146\":1}}],[\"astilectron\",{\"1\":{\"138\":1}}],[\"astar\",{\"1\":{\"134\":1}}],[\"ast\",{\"1\":{\"124\":2,\"1308\":1}}],[\"asn1\",{\"1\":{\"124\":1}}],[\"ascii85\",{\"1\":{\"124\":1}}],[\"alpine\",{\"1\":{\"1193\":1}}],[\"alert\",{\"1\":{\"1130\":1}}],[\"always\",{\"1\":{\"965\":1,\"987\":1}}],[\"al\",{\"1\":{\"813\":1}}],[\"alternatives\",{\"1\":{\"1081\":1}}],[\"alter\",{\"1\":{\"788\":1,\"810\":4}}],[\"alg\",{\"1\":{\"634\":1}}],[\"algorithms\",{\"1\":{\"127\":1}}],[\"algorithm\",{\"1\":{\"124\":2}}],[\"already\",{\"1\":{\"390\":2,\"453\":1,\"1194\":1}}],[\"alias只能存在与location中\",{\"1\":{\"1139\":1}}],[\"alias可以存在多个\",{\"1\":{\"1139\":1}}],[\"alias真实路径是alias指定的值\",{\"1\":{\"1139\":1}}],[\"alias与root指定的url意义不同\",{\"1\":{\"1139\":1}}],[\"alias与root的区别\",{\"0\":{\"1139\":1}}],[\"alias\",{\"1\":{\"1135\":1,\"1136\":2,\"1139\":1,\"1144\":1}}],[\"aliases\",{\"1\":{\"705\":1}}],[\"aliyuncs\",{\"1\":{\"774\":1,\"1193\":3,\"1223\":1,\"1225\":1}}],[\"aliyun\",{\"1\":{\"774\":1,\"1184\":1,\"1220\":1,\"1221\":2,\"1222\":3}}],[\"alignof\",{\"0\":{\"1442\":1},\"1\":{\"513\":1,\"1442\":4}}],[\"alive\",{\"1\":{\"309\":6,\"470\":1,\"1133\":1}}],[\"alice\",{\"1\":{\"281\":1,\"635\":4,\"1257\":2,\"1261\":3,\"1265\":2}}],[\"allrouters\",{\"1\":{\"1196\":1}}],[\"allnodes\",{\"1\":{\"1196\":1}}],[\"all代表producer往集群发送数据需要所有的follower都完成从leader的同步才会发送下一条\",{\"1\":{\"1024\":1}}],[\"all是从硬盘当中读取\",{\"1\":{\"814\":1}}],[\"allocation\",{\"1\":{\"705\":1}}],[\"allocated\",{\"1\":{\"303\":2}}],[\"alloc\",{\"1\":{\"327\":2}}],[\"allocsprofile\",{\"1\":{\"323\":1}}],[\"allocs\",{\"1\":{\"323\":1,\"324\":1,\"475\":13,\"476\":62}}],[\"allow\",{\"1\":{\"58\":2,\"768\":1,\"769\":1,\"770\":1,\"1244\":1,\"1254\":2,\"1256\":1,\"1260\":1,\"1264\":1}}],[\"all\",{\"1\":{\"137\":1,\"326\":1,\"420\":1,\"422\":1,\"453\":2,\"476\":2,\"645\":1,\"651\":1,\"713\":1,\"766\":3,\"796\":1,\"814\":2,\"834\":2,\"838\":1,\"884\":1,\"1003\":1,\"1010\":11,\"1024\":1,\"1197\":1,\"1220\":1}}],[\"aes\",{\"1\":{\"124\":1}}],[\"article\",{\"1\":{\"523\":1,\"745\":2,\"746\":3,\"748\":1,\"749\":1,\"751\":1,\"754\":7,\"756\":3}}],[\"artifex\",{\"1\":{\"137\":1}}],[\"arbitrarytyp\",{\"1\":{\"1445\":1}}],[\"arbitrarytype\",{\"0\":{\"1438\":1},\"1\":{\"1438\":1,\"1440\":1,\"1441\":1,\"1442\":1,\"1443\":2,\"1445\":1,\"1446\":2}}],[\"arbitrary可以翻译为任意的\",{\"1\":{\"1438\":1}}],[\"arbitrary\",{\"1\":{\"470\":1}}],[\"arch\",{\"1\":{\"453\":2,\"454\":1,\"459\":1}}],[\"archive\",{\"1\":{\"124\":1,\"964\":1,\"1028\":2,\"1228\":1,\"1308\":2}}],[\"are\",{\"1\":{\"388\":1,\"420\":1,\"422\":1,\"476\":2}}],[\"areana\",{\"1\":{\"1308\":1}}],[\"area\",{\"1\":{\"267\":1}}],[\"arg3\",{\"1\":{\"1420\":1}}],[\"arg2\",{\"1\":{\"1420\":1}}],[\"arg1\",{\"1\":{\"1420\":1}}],[\"arg=freemouse\",{\"1\":{\"1133\":1}}],[\"argv\",{\"1\":{\"454\":1}}],[\"arg\",{\"1\":{\"378\":2,\"435\":1}}],[\"arguments\",{\"1\":{\"468\":1,\"471\":3,\"472\":1,\"1132\":1,\"1173\":1}}],[\"argument\",{\"1\":{\"320\":6,\"390\":1}}],[\"args\",{\"1\":{\"36\":1,\"378\":3,\"477\":1,\"1133\":1,\"1165\":1,\"1327\":1}}],[\"ar\",{\"1\":{\"313\":1,\"813\":1}}],[\"arrd\",{\"1\":{\"511\":2}}],[\"arrc\",{\"1\":{\"511\":4}}],[\"arrange\",{\"1\":{\"303\":2}}],[\"arraylist\",{\"1\":{\"638\":2}}],[\"arraylist和linkedlist说一说吧\",{\"1\":{\"606\":1,\"678\":1}}],[\"arraylist的底层怎么实现\",{\"1\":{\"566\":1,\"638\":2}}],[\"array\",{\"0\":{\"725\":1},\"1\":{\"241\":4,\"303\":2,\"351\":3,\"524\":1}}],[\"arr\",{\"1\":{\"241\":9,\"276\":7,\"306\":5,\"511\":11,\"654\":5,\"863\":2}}],[\"arp\",{\"1\":{\"145\":1}}],[\"apendslice会安全吗\",{\"1\":{\"580\":1,\"652\":1}}],[\"apr\",{\"1\":{\"326\":1}}],[\"api设计更加合理\",{\"1\":{\"1375\":1}}],[\"api对开发人员而言十分友好\",{\"1\":{\"1308\":1}}],[\"apiversion\",{\"1\":{\"1215\":5}}],[\"api地址即可\",{\"1\":{\"1087\":1}}],[\"api这级别去掉就行\",{\"1\":{\"1087\":1}}],[\"api==http\",{\"1\":{\"1087\":1}}],[\"api来操作和配置api管理系统\",{\"1\":{\"1073\":1}}],[\"api或yaml配置文件方式控制网关配置\",{\"1\":{\"1072\":1}}],[\"apigee\",{\"1\":{\"1072\":1}}],[\"api友好\",{\"1\":{\"1018\":1,\"1273\":1}}],[\"api完全没问题\",{\"1\":{\"714\":1}}],[\"api完全一样\",{\"1\":{\"714\":1}}],[\"api用起来完全一样\",{\"1\":{\"713\":1}}],[\"api最常用的就是搜索api\",{\"1\":{\"713\":1}}],[\"api了解更多信息\",{\"1\":{\"711\":1}}],[\"api还可以支持script实现upsert等之类的操作\",{\"1\":{\"711\":1}}],[\"apiserver\",{\"1\":{\"1225\":1}}],[\"apisix\",{\"1\":{\"1072\":2}}],[\"apis\",{\"1\":{\"703\":1,\"1087\":2,\"1092\":1}}],[\"api操作索引\",{\"1\":{\"703\":1}}],[\"api操纵geoserver实例\",{\"1\":{\"135\":1}}],[\"api查看服务状态\",{\"1\":{\"702\":1}}],[\"api测试服务是否可以用\",{\"1\":{\"702\":1}}],[\"api基本上都是选项式函数\",{\"1\":{\"702\":1}}],[\"api网关\",{\"1\":{\"655\":1,\"1072\":1}}],[\"api绑定\",{\"1\":{\"145\":1}}],[\"api错误参考进行绑定\",{\"1\":{\"141\":1}}],[\"api\",{\"1\":{\"132\":1,\"139\":1,\"141\":1,\"142\":1,\"158\":1,\"637\":1,\"639\":1,\"645\":1,\"655\":1,\"702\":1,\"908\":1,\"1056\":1,\"1071\":13,\"1081\":1,\"1082\":1,\"1086\":2,\"1087\":8,\"1223\":1,\"1233\":2,\"1241\":1,\"1280\":6,\"1281\":7,\"1282\":2,\"1283\":2,\"1285\":2}}],[\"api发送邮件\",{\"1\":{\"129\":1}}],[\"api的任何问题\",{\"1\":{\"702\":1}}],[\"api的纯go实现\",{\"1\":{\"145\":1}}],[\"api的绑定\",{\"1\":{\"130\":1}}],[\"api的幼稚go绑定\",{\"1\":{\"130\":1}}],[\"api的轻型smtp客户端\",{\"1\":{\"129\":1}}],[\"api的实时api网关\",{\"1\":{\"128\":1}}],[\"api服务器\",{\"1\":{\"142\":1}}],[\"api服务\",{\"1\":{\"111\":1}}],[\"apache2\",{\"1\":{\"1072\":2}}],[\"apache\",{\"1\":{\"111\":1,\"122\":1,\"1018\":1,\"1028\":3,\"1055\":1,\"1056\":1,\"1108\":1}}],[\"apps\",{\"1\":{\"1215\":3}}],[\"apply\",{\"1\":{\"1228\":1,\"1229\":1,\"1302\":2}}],[\"applyuri\",{\"1\":{\"830\":1}}],[\"application\",{\"1\":{\"1123\":1,\"1130\":1,\"1131\":1,\"1158\":1,\"1223\":1,\"1281\":2,\"1283\":1,\"1331\":1}}],[\"applied\",{\"1\":{\"124\":1}}],[\"appleboy\",{\"1\":{\"1281\":1}}],[\"apple\",{\"1\":{\"146\":2}}],[\"appindicator\",{\"1\":{\"138\":1}}],[\"app\",{\"1\":{\"72\":1,\"138\":1,\"446\":1,\"1215\":5}}],[\"appendbool\",{\"1\":{\"1393\":1}}],[\"appendint\",{\"1\":{\"1393\":1}}],[\"appendstring\",{\"1\":{\"1303\":1}}],[\"appenddirname\",{\"1\":{\"1010\":1}}],[\"appendfloat\",{\"1\":{\"1393\":1}}],[\"appendfsync\",{\"1\":{\"965\":1}}],[\"appendfilename\",{\"1\":{\"965\":1,\"986\":2,\"1010\":1}}],[\"appendonly8001\",{\"1\":{\"1010\":2}}],[\"appendonly\",{\"1\":{\"965\":2,\"986\":4,\"988\":2,\"1010\":1}}],[\"append模式打开的文件\",{\"1\":{\"402\":1}}],[\"append模式打开时\",{\"1\":{\"402\":1}}],[\"append|os\",{\"1\":{\"402\":3}}],[\"appendnametopath\",{\"1\":{\"400\":1}}],[\"append函数是有返回值的\",{\"1\":{\"287\":1}}],[\"append\",{\"1\":{\"5\":2,\"244\":2,\"245\":4,\"246\":1,\"250\":2,\"254\":1,\"257\":1,\"287\":6,\"306\":1,\"322\":1,\"327\":1,\"343\":1,\"344\":1,\"400\":2,\"401\":1,\"434\":2,\"511\":1,\"516\":1,\"630\":1,\"651\":1,\"653\":5,\"654\":3,\"713\":1,\"881\":1,\"970\":2,\"985\":1,\"1304\":2,\"1306\":2}}],[\"acl模型\",{\"0\":{\"1258\":1}}],[\"acl代表访问控制列表\",{\"1\":{\"1255\":1}}],[\"acl\",{\"1\":{\"1238\":2,\"1239\":1}}],[\"ac\",{\"1\":{\"1194\":1,\"1195\":1,\"1197\":3}}],[\"aced14e6f490ca573bed0042f185ce22298d6a9d这里的id是别的masterid\",{\"1\":{\"1010\":1}}],[\"aced14e6f490ca573bed0042f185ce22298d6a9d\",{\"1\":{\"1010\":4}}],[\"acid属性\",{\"1\":{\"904\":1}}],[\"access\",{\"1\":{\"1077\":2,\"1116\":5,\"1130\":5,\"1131\":5,\"1132\":1,\"1141\":2,\"1158\":2,\"1160\":2,\"1173\":1,\"1174\":3,\"1238\":1}}],[\"accept\",{\"1\":{\"993\":1,\"1133\":2,\"1374\":1}}],[\"account\",{\"1\":{\"581\":1,\"653\":2,\"1225\":1}}],[\"accounting\",{\"1\":{\"133\":1,\"326\":1}}],[\"accidentally\",{\"1\":{\"459\":1}}],[\"act与策略进行匹配\",{\"1\":{\"1256\":1}}],[\"act\",{\"1\":{\"1244\":4,\"1245\":4,\"1251\":1,\"1252\":2,\"1253\":2,\"1256\":5,\"1260\":4,\"1264\":4}}],[\"actual\",{\"1\":{\"436\":1,\"471\":38,\"472\":8,\"473\":8,\"474\":8}}],[\"activerehashing\",{\"1\":{\"965\":1}}],[\"active\",{\"1\":{\"768\":3}}],[\"activemq\",{\"1\":{\"637\":1}}],[\"activity\",{\"1\":{\"138\":1}}],[\"actions\",{\"1\":{\"637\":1}}],[\"action\",{\"1\":{\"122\":1,\"768\":1,\"769\":1,\"770\":1,\"1262\":1,\"1265\":2,\"1266\":2,\"1280\":1,\"1283\":3}}],[\"acme目前是每60天自动更新证书\",{\"1\":{\"84\":1}}],[\"acme的安装路径\",{\"1\":{\"84\":1}}],[\"acme\",{\"1\":{\"84\":8,\"1078\":1}}],[\"ack应答机制\",{\"0\":{\"1024\":1}}],[\"ack1\",{\"1\":{\"745\":2,\"746\":2,\"748\":2,\"751\":2}}],[\"acknowledged\",{\"1\":{\"704\":2,\"707\":1,\"717\":2,\"745\":1}}],[\"acks=1\",{\"1\":{\"653\":1}}],[\"acks=all\",{\"1\":{\"634\":1,\"653\":1}}],[\"ack机制\",{\"1\":{\"653\":1}}],[\"ack+1\",{\"1\":{\"82\":1}}],[\"ack\",{\"1\":{\"82\":1,\"636\":2,\"641\":6,\"651\":4}}],[\"advertise\",{\"1\":{\"1225\":1}}],[\"advanced\",{\"1\":{\"65\":5}}],[\"adaptor\",{\"1\":{\"454\":1}}],[\"adaptive\",{\"1\":{\"127\":1}}],[\"admin\",{\"1\":{\"330\":2,\"830\":1,\"869\":1,\"870\":1,\"1037\":4,\"1077\":3,\"1078\":1,\"1197\":1,\"1225\":2,\"1235\":5}}],[\"adler32\",{\"1\":{\"124\":1}}],[\"add将返回使用偏移量len更新后的pointer\",{\"1\":{\"1444\":1}}],[\"addparsetree方法进行关联\",{\"1\":{\"1426\":1}}],[\"addparsetree\",{\"1\":{\"1426\":2}}],[\"addsec\",{\"1\":{\"1429\":1}}],[\"addstacktrace\",{\"1\":{\"1306\":1}}],[\"addsync\",{\"1\":{\"1304\":2,\"1307\":2}}],[\"addcaller\",{\"1\":{\"1306\":1}}],[\"addxxx\",{\"1\":{\"1278\":1}}],[\"addblock\",{\"1\":{\"703\":1}}],[\"adder\",{\"1\":{\"635\":1}}],[\"added\",{\"1\":{\"450\":1,\"453\":24}}],[\"additional\",{\"1\":{\"454\":1}}],[\"addint64\",{\"1\":{\"439\":1}}],[\"add方法用于指明要等待的协程的数量\",{\"1\":{\"422\":1}}],[\"add和sub函数在每次操作前都会尝试向管道中发送数据\",{\"1\":{\"417\":1}}],[\"addrlen\",{\"1\":{\"1164\":1}}],[\"addr是一种key\",{\"1\":{\"1154\":1}}],[\"addr变量的大小始终为4个字节\",{\"1\":{\"1152\":1}}],[\"addr变量的大小可以从7到15个字节不等\",{\"1\":{\"1152\":1}}],[\"addr变量\",{\"1\":{\"1152\":1}}],[\"addr这个标识来做限制\",{\"1\":{\"1151\":1}}],[\"addrs\",{\"1\":{\"1037\":2,\"1373\":2}}],[\"addr\",{\"1\":{\"324\":1,\"360\":10,\"368\":1,\"440\":1,\"732\":3,\"910\":1,\"911\":2,\"912\":1,\"1130\":1,\"1131\":1,\"1133\":4,\"1151\":3,\"1152\":5,\"1154\":4,\"1155\":1,\"1156\":1,\"1157\":1,\"1158\":4,\"1164\":7,\"1165\":1,\"1194\":2,\"1195\":2,\"1219\":2,\"1336\":1,\"1411\":4}}],[\"addr=false\",{\"1\":{\"318\":1}}],[\"address指向的地址已经无效了\",{\"1\":{\"1443\":1}}],[\"address>\",{\"1\":{\"1311\":1,\"1312\":1}}],[\"address=192\",{\"1\":{\"1225\":1}}],[\"addresses\",{\"1\":{\"702\":1}}],[\"address\",{\"1\":{\"205\":1,\"221\":1,\"268\":4,\"269\":4,\"278\":4,\"317\":1,\"366\":2,\"367\":1,\"368\":2,\"374\":2,\"635\":2,\"726\":5,\"832\":1,\"833\":5,\"834\":8,\"835\":3,\"836\":5,\"838\":1,\"880\":2,\"884\":2,\"893\":2,\"1310\":2,\"1311\":1,\"1312\":2,\"1316\":1,\"1317\":2,\"1318\":3,\"1319\":2,\"1320\":2,\"1331\":1,\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1380\":4,\"1381\":3,\"1422\":4,\"1427\":4,\"1428\":5,\"1443\":3}}],[\"add\",{\"0\":{\"1444\":1},\"1\":{\"36\":2,\"55\":3,\"57\":1,\"266\":1,\"396\":1,\"417\":1,\"422\":5,\"426\":1,\"427\":2,\"428\":3,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"434\":4,\"435\":2,\"436\":2,\"439\":1,\"440\":2,\"449\":4,\"470\":1,\"477\":4,\"545\":2,\"556\":1,\"635\":1,\"654\":1,\"766\":1,\"774\":1,\"810\":4,\"1010\":2,\"1047\":1,\"1078\":2,\"1165\":1,\"1184\":2,\"1193\":1,\"1221\":1,\"1231\":1,\"1334\":1,\"1374\":1,\"1420\":2,\"1429\":1,\"1444\":3,\"1445\":2,\"1447\":1}}],[\"annotation\",{\"1\":{\"1166\":3}}],[\"annotated\",{\"1\":{\"326\":1}}],[\"another\",{\"1\":{\"766\":1}}],[\"anonymous\",{\"1\":{\"367\":1}}],[\"analyzed\",{\"1\":{\"717\":1}}],[\"analyzer\",{\"1\":{\"706\":2,\"733\":1,\"741\":2,\"742\":1,\"745\":1}}],[\"analyze\",{\"1\":{\"326\":1,\"703\":1,\"706\":7}}],[\"analysis\",{\"1\":{\"325\":1,\"328\":1,\"740\":4,\"742\":2}}],[\"an\",{\"1\":{\"287\":8,\"289\":2,\"340\":1,\"347\":2,\"393\":1,\"453\":1,\"470\":1,\"1238\":1}}],[\"animal\",{\"1\":{\"287\":5,\"515\":3,\"651\":2}}],[\"ans\",{\"1\":{\"229\":18,\"280\":2,\"429\":2,\"430\":2}}],[\"ansi\",{\"1\":{\"122\":1,\"908\":1}}],[\"any类型\",{\"1\":{\"441\":1,\"516\":1}}],[\"any类型时也可能会发生逃逸\",{\"1\":{\"320\":1}}],[\"any的参数v\",{\"1\":{\"395\":1}}],[\"anything\",{\"1\":{\"294\":21}}],[\"any接口内部没有方法集合\",{\"1\":{\"294\":1}}],[\"any\",{\"1\":{\"224\":3,\"279\":2,\"280\":1,\"289\":3,\"294\":3,\"337\":2,\"340\":1,\"343\":2,\"344\":3,\"348\":2,\"351\":1,\"352\":2,\"362\":1,\"379\":1,\"393\":1,\"395\":1,\"424\":4,\"425\":2,\"426\":3,\"435\":5,\"436\":11,\"441\":1,\"454\":1,\"470\":1,\"477\":2,\"516\":1,\"546\":1,\"635\":1,\"835\":1,\"1092\":2,\"1225\":2,\"1310\":3,\"1316\":2,\"1319\":1,\"1415\":2,\"1417\":11,\"1419\":2,\"1420\":4,\"1422\":2,\"1423\":2,\"1424\":1,\"1425\":9,\"1426\":1,\"1427\":1,\"1428\":1}}],[\"and\",{\"1\":{\"206\":1,\"209\":1,\"258\":1,\"325\":1,\"328\":1,\"381\":1,\"383\":1,\"388\":1,\"453\":2,\"454\":5,\"470\":1,\"653\":2,\"759\":3,\"766\":2,\"806\":5,\"814\":7,\"818\":10,\"819\":1,\"861\":1,\"911\":1,\"1078\":1,\"1225\":1,\"1238\":1,\"1420\":2}}],[\"android\",{\"1\":{\"134\":1,\"138\":1}}],[\"andreasbriese\",{\"1\":{\"122\":1}}],[\"andrew\",{\"1\":{\"12\":1,\"388\":1}}],[\"ants\",{\"1\":{\"137\":1}}],[\"anko\",{\"1\":{\"130\":1}}],[\"anchor\",{\"1\":{\"64\":2}}],[\"a\",{\"0\":{\"967\":1,\"1084\":1,\"1154\":1},\"1\":{\"28\":4,\"36\":1,\"58\":1,\"134\":1,\"179\":4,\"184\":1,\"185\":1,\"193\":2,\"206\":11,\"208\":13,\"209\":5,\"210\":11,\"211\":1,\"224\":6,\"225\":3,\"228\":3,\"229\":2,\"230\":3,\"231\":2,\"232\":5,\"239\":1,\"253\":7,\"254\":2,\"255\":2,\"256\":2,\"257\":8,\"259\":7,\"260\":4,\"261\":4,\"262\":6,\"263\":4,\"264\":2,\"273\":3,\"278\":6,\"279\":2,\"280\":17,\"281\":3,\"282\":4,\"283\":2,\"285\":19,\"287\":4,\"289\":9,\"294\":5,\"298\":5,\"299\":3,\"300\":11,\"301\":3,\"303\":7,\"312\":3,\"313\":1,\"314\":4,\"318\":7,\"325\":1,\"326\":2,\"337\":8,\"339\":11,\"340\":1,\"344\":4,\"364\":3,\"376\":2,\"379\":2,\"381\":3,\"384\":2,\"386\":2,\"387\":2,\"394\":2,\"396\":8,\"400\":1,\"421\":5,\"435\":2,\"436\":9,\"437\":4,\"448\":1,\"450\":2,\"453\":1,\"454\":7,\"470\":2,\"471\":28,\"472\":6,\"473\":6,\"474\":6,\"476\":2,\"513\":1,\"515\":3,\"516\":1,\"621\":2,\"633\":2,\"635\":1,\"651\":3,\"654\":7,\"693\":2,\"706\":3,\"713\":1,\"741\":2,\"766\":2,\"786\":1,\"795\":2,\"831\":3,\"855\":1,\"857\":1,\"863\":1,\"927\":4,\"928\":1,\"929\":1,\"934\":4,\"937\":1,\"939\":1,\"940\":1,\"943\":1,\"944\":1,\"947\":1,\"949\":1,\"951\":1,\"964\":1,\"993\":1,\"994\":1,\"1010\":9,\"1055\":1,\"1163\":2,\"1165\":1,\"1192\":1,\"1197\":6,\"1222\":1,\"1280\":1,\"1374\":1,\"1397\":1,\"1398\":2,\"1399\":2,\"1402\":4,\"1404\":1,\"1406\":1,\"1410\":10,\"1418\":2}}],[\"所代表的根对象就是其自身\",{\"1\":{\"1417\":1}}],[\"所谓非阻塞式\",{\"1\":{\"981\":1}}],[\"所储存的值减去给定的减量值\",{\"1\":{\"970\":1}}],[\"所储存的值加上给定的浮点增量值\",{\"1\":{\"970\":1}}],[\"所储存的值加上给定的增量值\",{\"1\":{\"970\":1}}],[\"所储存的值的类型\",{\"1\":{\"967\":2}}],[\"所储存的字符串值的长度\",{\"1\":{\"970\":1}}],[\"所储存的字符串值\",{\"1\":{\"970\":3}}],[\"所以单独拿出来\",{\"1\":{\"1447\":1}}],[\"所以单向通道的语法如下\",{\"1\":{\"419\":1}}],[\"所以x必须是一个结构体字段\",{\"1\":{\"1441\":1}}],[\"所以实际输出为\",{\"1\":{\"1417\":1}}],[\"所以实际业务开发中\",{\"1\":{\"1307\":1}}],[\"所以实际上是占用24个字节\",{\"1\":{\"273\":1}}],[\"所以要详细讲一下细节的配置\",{\"1\":{\"1302\":1}}],[\"所以当token不够用时\",{\"1\":{\"1156\":1}}],[\"所以当查找数据的时候就会有磁盘i\",{\"1\":{\"805\":1}}],[\"所以还需要有个组件去统一维护这些组件的状态信息\",{\"1\":{\"1066\":1}}],[\"所以保留的数据⼤小可以设置为⼀个比较⼤的值\",{\"1\":{\"1025\":1}}],[\"所以数据还原速度一般\",{\"1\":{\"988\":1}}],[\"所以执行速度要略快于bgsave命令\",{\"1\":{\"981\":1}}],[\"所以执行结果要么成功要么失败\",{\"1\":{\"437\":1}}],[\"所以有的数据会在一段时间内只存在于内存中\",{\"1\":{\"965\":1}}],[\"所以有些人可能会误称为条件锁\",{\"1\":{\"432\":1}}],[\"所以本文采用mysql来讲解\",{\"1\":{\"890\":1}}],[\"所以访问数据的时候\",{\"1\":{\"817\":1}}],[\"所以很快\",{\"1\":{\"814\":1}}],[\"所以很多开源库包括官方库都会选择自定义error\",{\"1\":{\"391\":1}}],[\"所以通常是以索引文件的形式放在磁盘上\",{\"1\":{\"805\":1}}],[\"所以通过模糊测试就发现了这个问题所在\",{\"1\":{\"477\":1}}],[\"所以如果你在这里尝试修改字符串底层的数据\",{\"1\":{\"1447\":1}}],[\"所以如果你想要分享你编写的库\",{\"1\":{\"443\":1}}],[\"所以如果这些节点存储在外存储器中的话\",{\"1\":{\"804\":1}}],[\"所以每次查询的和维护的时候就会维护索引值又维护了数据\",{\"1\":{\"803\":1}}],[\"所以查询的性能要比二叉树高很多\",{\"1\":{\"803\":1}}],[\"所以引出b\",{\"1\":{\"802\":1}}],[\"所以对于读取数据\",{\"1\":{\"800\":1}}],[\"所以对于当前项目而言就是间接引用\",{\"1\":{\"459\":1}}],[\"所以先来说说什么是范式\",{\"1\":{\"789\":1}}],[\"所以长连接累计下来\",{\"1\":{\"776\":1}}],[\"所以其实实现不同层级的评论只需要一个表就行了\",{\"1\":{\"566\":1,\"638\":2}}],[\"所以其flat指标是100\",{\"1\":{\"326\":1}}],[\"所以其flat的指标是0\",{\"1\":{\"326\":1}}],[\"所以这三个类型可以不用我们自己实现直接使用即可\",{\"1\":{\"1375\":1}}],[\"所以这个失败b是必挂的\",{\"1\":{\"1165\":1}}],[\"所以这个时候大量的数据失效了\",{\"1\":{\"1165\":1}}],[\"所以这个很慢\",{\"1\":{\"987\":1}}],[\"所以这里的5个请求可以说是同时开始被处理的\",{\"1\":{\"1156\":1}}],[\"所以这里推荐的版本是\",{\"1\":{\"1028\":1}}],[\"所以这里直接读取了测试的缓存结果\",{\"1\":{\"486\":1}}],[\"所以这些枚举值也只能用字符串和数字来进行表示\",{\"1\":{\"213\":1}}],[\"所以再次修改待测源代码\",{\"1\":{\"477\":1}}],[\"所以将待测试的源代码修改为如下\",{\"1\":{\"477\":1}}],[\"所以将其修改为表格风格\",{\"1\":{\"474\":1}}],[\"所以将读锁作为互斥锁传入\",{\"1\":{\"432\":1}}],[\"所以称为table\",{\"1\":{\"474\":1}}],[\"所以称为伪版本\",{\"1\":{\"459\":1}}],[\"所以一般情况下都是尽量采用结构体切片的形式\",{\"1\":{\"474\":1}}],[\"所以需要用到strconv下的append函数\",{\"1\":{\"1393\":1}}],[\"所以需要优化\",{\"1\":{\"819\":1}}],[\"所以需要使用\",{\"1\":{\"468\":1}}],[\"所以需要手动的去判断文件是否存在\",{\"1\":{\"400\":1}}],[\"所以写好测试非常有必要\",{\"1\":{\"466\":1}}],[\"所以go\",{\"1\":{\"459\":1}}],[\"所以go强制所有程序员花函数后的括号不换行\",{\"1\":{\"189\":1}}],[\"所以我们大多数会用一个第三方开源库etree来解析xml\",{\"1\":{\"1312\":1}}],[\"所以我们就在部署的时候网络隔离\",{\"1\":{\"1198\":1}}],[\"所以我们可以通过把\",{\"1\":{\"1174\":1}}],[\"所以我们通过上面可以看到\",{\"1\":{\"1165\":1}}],[\"所以我们将0~2^32作为一个环\",{\"1\":{\"1165\":1}}],[\"所以我们需要安装ngx\",{\"1\":{\"1165\":1}}],[\"所以我们需要添加一个\",{\"1\":{\"1155\":1}}],[\"所以我们需要修改默认的模块代理地址\",{\"1\":{\"451\":1}}],[\"所以我们只能在它的函数体后紧跟括号来进行调用\",{\"1\":{\"281\":1}}],[\"所以hello命令行程序的文件存放在cmd\",{\"1\":{\"446\":1}}],[\"所以完全可以考虑无锁化实现\",{\"1\":{\"440\":1}}],[\"所以完全不支持自定义\",{\"1\":{\"188\":1}}],[\"所以new函数的并发安全性要由使用者自己来维护\",{\"1\":{\"435\":1}}],[\"所以并不建议保存pointer转换为uintptr后的值\",{\"1\":{\"1443\":1}}],[\"所以并不建议将网络链接\",{\"1\":{\"435\":1}}],[\"所以并不推荐\",{\"1\":{\"339\":1}}],[\"所以重复加锁或重复解锁都会导致fatal\",{\"1\":{\"429\":1}}],[\"所以最后的输出如下\",{\"1\":{\"432\":1}}],[\"所以最好避免此种情况的发生\",{\"1\":{\"428\":1}}],[\"所以最终输出为default分支的执行结果\",{\"1\":{\"421\":1}}],[\"所以可以写成localhost\",{\"1\":{\"1029\":1}}],[\"所以可以将其单独放到新协程中\",{\"1\":{\"421\":1}}],[\"所以可以直接使用\",{\"1\":{\"410\":1}}],[\"所以会把接下来的请求缓存下来\",{\"1\":{\"1156\":1}}],[\"所以会倾向于更相信go\",{\"1\":{\"460\":1}}],[\"所以会一直阻塞等待直到有case可用\",{\"1\":{\"421\":1}}],[\"所以会将整个数组拷贝\",{\"1\":{\"238\":1}}],[\"所以该示例输出如下\",{\"1\":{\"417\":1}}],[\"所以自然会返回一个错误\",{\"1\":{\"400\":1}}],[\"所以输出如下\",{\"1\":{\"397\":2,\"420\":1,\"430\":1}}],[\"所以程序就直接退出运行\",{\"1\":{\"396\":1}}],[\"所以此处应该抛出panic\",{\"1\":{\"395\":1}}],[\"所以error实际上\",{\"1\":{\"393\":1}}],[\"所以只能使用fmt\",{\"1\":{\"392\":1}}],[\"所以大多数情况会将其作为函数的返回值来返回\",{\"1\":{\"388\":1}}],[\"所以无法使用类型转换\",{\"1\":{\"386\":1}}],[\"所以下面的应用都基于\",{\"1\":{\"1001\":1}}],[\"所以下面的代码无法通过编译\",{\"1\":{\"381\":1}}],[\"所以下面的代码完全无法通过编译\",{\"1\":{\"381\":1}}],[\"所以下例自然也就可以通过编译\",{\"1\":{\"384\":1}}],[\"所以类型约束为any\",{\"1\":{\"343\":1,\"344\":1}}],[\"所以基本上都是单独使用\",{\"1\":{\"341\":1}}],[\"所以又间接的并入了自身\",{\"1\":{\"341\":1}}],[\"所以交集就是个空集\",{\"1\":{\"340\":1}}],[\"所以使用者并不能区分主版本变化所带来的不兼容变动\",{\"1\":{\"459\":1}}],[\"所以使用comparable接口\",{\"1\":{\"338\":1}}],[\"所以使用int32来存储是理所当然\",{\"1\":{\"258\":1}}],[\"所以泛型的写法如下\",{\"1\":{\"337\":1}}],[\"所以为什么需要泛型\",{\"1\":{\"337\":1}}],[\"所以pprof的使用步骤就只有两步\",{\"1\":{\"321\":1}}],[\"所以逃逸分析也是由编译器来完成\",{\"1\":{\"317\":1}}],[\"所以理解起来不需要花费太多力气\",{\"1\":{\"317\":1}}],[\"所以编译器就将其分配到了堆上\",{\"1\":{\"317\":1}}],[\"所以编译器就会认为dog\",{\"1\":{\"287\":1}}],[\"所以是静态分析的一种\",{\"1\":{\"316\":1}}],[\"所以c的内存管理是非常稳定的\",{\"1\":{\"310\":1}}],[\"所以应该使用指针来进行传递\",{\"1\":{\"422\":1}}],[\"所以应该管道在写入完毕后将其关闭\",{\"1\":{\"420\":1}}],[\"所以应该在正确的地方使用泛型\",{\"1\":{\"337\":1}}],[\"所以应该对数组头部元素取址\",{\"1\":{\"306\":1}}],[\"所以应当尽量避免使用nan作为map的键\",{\"1\":{\"261\":1}}],[\"所以any接口可以保存任何类型的值\",{\"1\":{\"294\":1}}],[\"所以man也实现了接口person\",{\"1\":{\"293\":1}}],[\"所以能够访问到的方法只有jackup\",{\"1\":{\"293\":1}}],[\"所以第二种解决办法就是赋值dog指针给变量an\",{\"1\":{\"287\":1}}],[\"所以方法的接收者为指针时\",{\"1\":{\"287\":1}}],[\"所以它前后的空白符都会被消除\",{\"1\":{\"1417\":1}}],[\"所以它可以水平扩展多个kong服务器\",{\"1\":{\"1073\":1}}],[\"所以它应该属于查找和扫描的混合体\",{\"1\":{\"814\":1}}],[\"所以它的升华版b+tree诞生了\",{\"1\":{\"803\":1}}],[\"所以它们之间可以进行显式的类型转换\",{\"1\":{\"385\":1}}],[\"所以它们无法被回收\",{\"1\":{\"282\":1}}],[\"所以它对元素有一个要求\",{\"1\":{\"344\":1}}],[\"所以它输出的内容可读性比较高\",{\"1\":{\"219\":1}}],[\"所以仅做了解即可\",{\"1\":{\"273\":1}}],[\"所以你可能会看到如下的目录结构\",{\"1\":{\"460\":1}}],[\"所以你可以直接将字符串写入到标准输出中\",{\"1\":{\"217\":1}}],[\"所以你可以直接使用\",{\"1\":{\"65\":1}}],[\"所以你只需要正常使用vcs开发\",{\"1\":{\"443\":1}}],[\"所以你无法为同一个函数或方法定义不同的参数\",{\"1\":{\"268\":1}}],[\"所以也不存在什么序列化格式化的问题了\",{\"1\":{\"1314\":1}}],[\"所以也就可以进行运算\",{\"1\":{\"384\":1}}],[\"所以也算实现\",{\"1\":{\"293\":1}}],[\"所以也可以使用map来替代set\",{\"1\":{\"265\":1}}],[\"所以也是无序的\",{\"1\":{\"258\":1}}],[\"所以就不会有第二条哈希记录\",{\"1\":{\"460\":1}}],[\"所以就有了第二种解决办法\",{\"1\":{\"340\":1}}],[\"所以就可能会看到以下结果\",{\"1\":{\"258\":1}}],[\"所以就需要控制可见性\",{\"1\":{\"174\":1}}],[\"所以结果恰巧每一个字节对应一个字符\",{\"1\":{\"258\":1}}],[\"所以恰好与字面量长度相等\",{\"1\":{\"255\":1}}],[\"所以字符串的访问形式跟数组切片完全一致\",{\"1\":{\"253\":1}}],[\"所以没有扩容\",{\"1\":{\"250\":1}}],[\"所以必须要为其分配内存\",{\"1\":{\"259\":1}}],[\"所以必须要单独初始化\",{\"1\":{\"249\":1}}],[\"所以必须使用强制类型转换\",{\"1\":{\"209\":1}}],[\"所以不同容器使用相同的端口并不会冲突\",{\"1\":{\"822\":1}}],[\"所以不会有那么大的开销\",{\"1\":{\"649\":1}}],[\"所以不会临时存放任何数据\",{\"1\":{\"416\":1}}],[\"所以不会为其分配内存\",{\"1\":{\"243\":1}}],[\"所以不需要额外下载\",{\"1\":{\"325\":1}}],[\"所以不用再去纠结i++和++i这样的问题\",{\"1\":{\"179\":1}}],[\"所以\",{\"1\":{\"243\":1,\"498\":1,\"789\":1}}],[\"所以代码要更简洁些\",{\"1\":{\"229\":1}}],[\"所以代码应该这样分开写\",{\"1\":{\"208\":1}}],[\"所以像下面的代码是无法通过编译的\",{\"1\":{\"193\":1}}],[\"所以在es中\",{\"1\":{\"721\":1}}],[\"所以在本文也只会介绍go\",{\"1\":{\"442\":1}}],[\"所以在一些实现中失败达到了一定次数可能会放弃操作\",{\"1\":{\"440\":1}}],[\"所以在操作时会加锁\",{\"1\":{\"440\":1}}],[\"所以在编写代码时应该避免上述情况\",{\"1\":{\"429\":1}}],[\"所以在写入文件时会将数据添加到文件尾部\",{\"1\":{\"402\":1}}],[\"所以在判断错误时\",{\"1\":{\"393\":1}}],[\"所以在堆的初始化时\",{\"1\":{\"344\":1}}],[\"所以在go中\",{\"1\":{\"293\":1}}],[\"所以在这一块追求个性显然是一个不太明智的选择\",{\"1\":{\"188\":1}}],[\"所以在处理冲突时\",{\"1\":{\"36\":1}}],[\"所以linux\",{\"1\":{\"12\":1}}],[\"所有结果是根据年龄的大小来排序\",{\"1\":{\"1380\":1}}],[\"所有机器添加master节点的域名映射\",{\"1\":{\"1225\":1}}],[\"所有节点的共同准备工作\",{\"1\":{\"1235\":1}}],[\"所有节点\",{\"1\":{\"1222\":1}}],[\"所有推荐使用7\",{\"1\":{\"1218\":1}}],[\"所有网络模式\",{\"1\":{\"1197\":1}}],[\"所有针对该服务器的请求都失败了\",{\"1\":{\"1161\":1}}],[\"所有都挂了呢\",{\"1\":{\"1065\":1}}],[\"所有\",{\"1\":{\"999\":1}}],[\"所有索引数据都是内存存储的\",{\"1\":{\"965\":1}}],[\"所有数据都保存在叶子结点中\",{\"1\":{\"805\":1}}],[\"所有数据存储在叶子节点中\",{\"1\":{\"641\":1}}],[\"所有存储相同数据的\",{\"1\":{\"794\":1}}],[\"所有跨存储引擎的功能都在这一层\",{\"1\":{\"775\":1}}],[\"所有关于索引操作的api都位于esapi\",{\"1\":{\"703\":1}}],[\"所有依赖于它的对象都会得到通知并自动更新\",{\"1\":{\"654\":1}}],[\"所有副本节点确认\",{\"1\":{\"653\":1}}],[\"所有实际数据都保存在叶子节点中\",{\"1\":{\"649\":1}}],[\"所有用户都通过相同的\",{\"1\":{\"644\":1}}],[\"所有值都在叶子节点\",{\"1\":{\"635\":1}}],[\"所有服务搭载在个人机上\",{\"1\":{\"566\":1,\"638\":2}}],[\"所有测试用例都是独立的\",{\"1\":{\"495\":1}}],[\"所有管道都不可用\",{\"1\":{\"421\":1}}],[\"所有的字符串操作都是建立在utf8的基础之上\",{\"1\":{\"1394\":1}}],[\"所有的策略都会进行这种匹配\",{\"1\":{\"1269\":1}}],[\"所有的镜像都是在最基础的镜像层上\",{\"1\":{\"1192\":1}}],[\"所有的这些数据都可以被消费\",{\"1\":{\"1025\":1}}],[\"所有的中间节点在子节点中要么是最大的元素要么是最小的元素\",{\"1\":{\"805\":1}}],[\"所有的\",{\"1\":{\"633\":1}}],[\"所有的原子类型都不应该复制值\",{\"1\":{\"441\":1}}],[\"所有的数据等正常添加进切片\",{\"1\":{\"434\":1}}],[\"所有的数据都读完了\",{\"1\":{\"417\":1}}],[\"所有的数据都发送完毕\",{\"1\":{\"417\":1}}],[\"所有的错误都需要通过返回值显式地处理\",{\"1\":{\"165\":1}}],[\"所有变量的类型都会在编译期确定好\",{\"1\":{\"380\":1}}],[\"所有字段都完全相等\",{\"1\":{\"379\":1}}],[\"所有类型都是any接口的的实现\",{\"1\":{\"294\":1}}],[\"所有你在工作中会发现高深的技术人员可能会喜欢命令行模式提交git\",{\"1\":{\"55\":1}}],[\"所有以\",{\"1\":{\"28\":1}}],[\"所有代码必须放在中央服务器\",{\"1\":{\"11\":1}}],[\"所有版本\",{\"1\":{\"9\":1}}],[\"而后者仅仅作为一个值\",{\"1\":{\"1443\":1}}],[\"而后端校验是最后一道防线\",{\"1\":{\"1288\":1}}],[\"而创建一个新的文件\",{\"1\":{\"1307\":1}}],[\"而创建条件变量的函数签名如下\",{\"1\":{\"432\":1}}],[\"而单独使用validator是validator\",{\"1\":{\"1289\":1}}],[\"而每个叶子节点则代表最终的路由处理函数\",{\"1\":{\"1285\":1}}],[\"而权限意味着是否可以访问对应的api接口\",{\"1\":{\"1240\":1}}],[\"而我们熟悉的是docker容器引擎\",{\"1\":{\"1223\":1}}],[\"而我们只要根据规范使用type\",{\"1\":{\"516\":1}}],[\"而使用url\",{\"1\":{\"1166\":1}}],[\"而使用strings\",{\"1\":{\"475\":1}}],[\"而令牌桶算法能够在限制数据的平均传输速率的同时允许某种程度的突发传输\",{\"1\":{\"1149\":1}}],[\"而最终能在某一时间处理的请求数不是恒定的\",{\"1\":{\"1149\":1}}],[\"而数据库只能提供每秒5k次查询\",{\"1\":{\"1012\":1}}],[\"而数组不会\",{\"1\":{\"243\":1}}],[\"而越大\",{\"1\":{\"1000\":1}}],[\"而从节点负责读取数据\",{\"1\":{\"990\":1}}],[\"而其他调用者所见到的最初的资源仍然保持不变\",{\"1\":{\"988\":1}}],[\"而父进程则继续处理客户端请求\",{\"1\":{\"981\":1}}],[\"而同时各个实例又拥有自己的特定配置文件\",{\"1\":{\"965\":1}}],[\"而merz取自意大利歌女alessia\",{\"1\":{\"965\":1}}],[\"而mysql\",{\"1\":{\"799\":1}}],[\"而redis由于是k\",{\"1\":{\"960\":1}}],[\"而runlock\",{\"1\":{\"557\":1}}],[\"而系统调用的性能通常不好\",{\"1\":{\"817\":1}}],[\"而结束语另一点\",{\"1\":{\"814\":1}}],[\"而结构体是最大对齐系数的整数倍\",{\"1\":{\"513\":1}}],[\"而b+树正可以解决这种问题\",{\"1\":{\"805\":1}}],[\"而b是新声明的\",{\"1\":{\"206\":1}}],[\"而磁盘io\",{\"1\":{\"800\":1}}],[\"而随着表中的数据越来越多\",{\"1\":{\"800\":1}}],[\"而用corp\",{\"1\":{\"794\":1}}],[\"而无需指定具体类\",{\"1\":{\"654\":1}}],[\"而new只是分配内存\",{\"1\":{\"654\":1}}],[\"而协程是由go运行时管理\",{\"1\":{\"540\":1}}],[\"而标准的utf\",{\"1\":{\"511\":1}}],[\"而模糊测试可以通过语料库来生成随机的测试数据\",{\"1\":{\"477\":1}}],[\"而测试用例的函数必须为benchmarkxxxx格式\",{\"1\":{\"475\":1}}],[\"而ticker是定时触发\",{\"1\":{\"1434\":1}}],[\"而testequal则没有\",{\"1\":{\"471\":1}}],[\"而trace更适合跟踪程序的运行细节\",{\"1\":{\"328\":1}}],[\"而工作区的存在就是为了能够在不修改go\",{\"1\":{\"463\":1}}],[\"而版本则是要遵循语义化版本号\",{\"1\":{\"455\":1}}],[\"而前面了解到的互斥量就是悲观锁\",{\"1\":{\"440\":1}}],[\"而写协程在更新数据后都会尝试唤醒所有因条件变量而阻塞的协程\",{\"1\":{\"432\":1}}],[\"而主协程还在阻塞等待其他协程来向管道中写入数据\",{\"1\":{\"420\":1}}],[\"而在go语言中这样的操作是不被允许的\",{\"1\":{\"1393\":1}}],[\"而在此期间\",{\"1\":{\"422\":1}}],[\"而在此之前\",{\"1\":{\"412\":1}}],[\"而在使用make进行初始化时\",{\"1\":{\"243\":1}}],[\"而对于mysql\",{\"1\":{\"798\":1}}],[\"而对于有缓冲的\",{\"1\":{\"633\":1}}],[\"而对于每一个版本而言\",{\"1\":{\"460\":1}}],[\"而对于io\",{\"1\":{\"401\":1}}],[\"而对于没有方法集接口来说\",{\"1\":{\"347\":1}}],[\"而对一个错误链使用类型断言是无效的\",{\"1\":{\"393\":1}}],[\"而链式错误正是为了解决这种情况而出现的\",{\"1\":{\"392\":1}}],[\"而类型断言就可以判断其底层类型是否为想要的类型\",{\"1\":{\"386\":1}}],[\"而动态表示是接口底层存储的具体实现的类型是可以变化的\",{\"1\":{\"347\":1}}],[\"而eface对应的是emptyinterface\",{\"1\":{\"347\":1}}],[\"而这就是模板引擎所需要解决的问题\",{\"1\":{\"1414\":1}}],[\"而这就是sync\",{\"1\":{\"434\":1}}],[\"而这里又配置为日志记录方式为标准输出\",{\"1\":{\"965\":1}}],[\"而这里用指针来接收\",{\"1\":{\"515\":1}}],[\"而这只是众多可能结果中的一种\",{\"1\":{\"429\":1}}],[\"而这两个结构体在reflect包下都有与其对应的结构体类型\",{\"1\":{\"347\":1}}],[\"而这类软件我们一般叫做版本控制工具\",{\"1\":{\"9\":1}}],[\"而double又并入了floats\",{\"1\":{\"341\":1}}],[\"而客户端则较少\",{\"1\":{\"335\":1}}],[\"而程序是否高效\",{\"1\":{\"315\":1}}],[\"而go就不一样了\",{\"1\":{\"310\":1}}],[\"而非延迟执行时\",{\"1\":{\"514\":1}}],[\"而非原生的c程序调用go\",{\"1\":{\"300\":1}}],[\"而非引用\",{\"1\":{\"238\":1}}],[\"而cgo可以将两者联系起来\",{\"1\":{\"296\":1}}],[\"而修改一个形参的值\",{\"1\":{\"286\":1}}],[\"而函数没有\",{\"1\":{\"285\":1}}],[\"而匿名组合可以不用显式的指定字段\",{\"1\":{\"270\":1}}],[\"而字节切片或字节数组也可以转换为字符串\",{\"1\":{\"254\":1}}],[\"而多出来的max则指的是最大容量\",{\"1\":{\"250\":1}}],[\"而切片b是动态大小的\",{\"1\":{\"654\":1}}],[\"而切片的长度是不固定的\",{\"1\":{\"249\":1}}],[\"而切片是不定长的\",{\"1\":{\"237\":1}}],[\"而桶中水的高度就是代表着长度\",{\"1\":{\"243\":1}}],[\"而+符号附近的间隔则较大\",{\"1\":{\"191\":1}}],[\"而且需要使用格式化动词来指定类型\",{\"1\":{\"1414\":1}}],[\"而且会自己配置一个客户端来达到更加细致化的需求\",{\"1\":{\"1332\":1}}],[\"而且在解包封包的时候更加的快速\",{\"1\":{\"1321\":1}}],[\"而且大日志文件也不方便查询\",{\"1\":{\"1307\":1}}],[\"而且这个是用一个map存储的\",{\"1\":{\"1289\":1}}],[\"而且那这样数据持久化就失去意义了\",{\"1\":{\"1199\":1}}],[\"而且虚拟节点我们可以自定义设置\",{\"1\":{\"1165\":1}}],[\"而且还便于定制化扩展\",{\"1\":{\"1072\":1}}],[\"而且还对变量做了修改\",{\"1\":{\"310\":1}}],[\"而且每个组件都有自己的数据和状态\",{\"1\":{\"1066\":1}}],[\"而且集群配置非常简单\",{\"1\":{\"1006\":1}}],[\"而且若是数据没有同步到从也会导致数据不一致\",{\"1\":{\"990\":1}}],[\"而且稳定\",{\"1\":{\"960\":1}}],[\"而且不能启动成功\",{\"1\":{\"851\":1}}],[\"而且叶子结点的元素形成了自小向大这样子的链表\",{\"1\":{\"805\":1}}],[\"而且创建和切换成本很低\",{\"1\":{\"539\":1}}],[\"而且可以是一个匿名函数\",{\"1\":{\"514\":1}}],[\"而且可以带名字\",{\"1\":{\"187\":1}}],[\"而且并不需要手动传入接收者\",{\"1\":{\"371\":1}}],[\"而且性能低下\",{\"1\":{\"337\":1}}],[\"而且其命名风格也与go非常相似\",{\"1\":{\"304\":1}}],[\"而且必须联网才能使用\",{\"1\":{\"12\":1}}],[\"而是以go诞生时间为模板\",{\"1\":{\"1431\":1}}],[\"而是以机器字长为单位访问\",{\"1\":{\"554\":1}}],[\"而是临时顶替请求\",{\"1\":{\"1163\":1}}],[\"而是按照rate设置的速度\",{\"1\":{\"1155\":1}}],[\"而是使用$\",{\"1\":{\"1152\":1}}],[\"而是根据分配的\",{\"1\":{\"1029\":1}}],[\"而是会\",{\"1\":{\"1163\":1}}],[\"而是会使用orm框架\",{\"1\":{\"889\":1}}],[\"而是会将其转义为\",{\"1\":{\"459\":1}}],[\"而是会将常用的error当作全局变量使用\",{\"1\":{\"390\":1}}],[\"而是内部创建新文件进行文件排序\",{\"1\":{\"819\":1}}],[\"而是等到缓存过期时再删除\",{\"1\":{\"644\":1}}],[\"而是由后台异步更新缓存\",{\"1\":{\"641\":1}}],[\"而是通过循环调用less\",{\"1\":{\"1381\":1}}],[\"而是通过每个节点之间相互通信来管理集群的状态\",{\"1\":{\"1006\":1}}],[\"而是通过异步更新来保证一致性\",{\"1\":{\"641\":1}}],[\"而是通过组合和接口来实现代码重用\",{\"1\":{\"637\":1}}],[\"而是通过接口来实现多态\",{\"1\":{\"637\":1}}],[\"而是进行读写分离优化后的解决方案\",{\"1\":{\"558\":1}}],[\"而是要在一次运行中尝试报告多个错误\",{\"1\":{\"504\":1}}],[\"而是一串不知所云的字符串\",{\"1\":{\"459\":1}}],[\"而是一个非常巨大复杂的任务\",{\"1\":{\"412\":1}}],[\"而是一个比较耗时的任务\",{\"1\":{\"314\":1}}],[\"而是一个较为复杂的数据处理流程\",{\"1\":{\"284\":1}}],[\"而是一个类型的空值或者说默认值更为准确\",{\"1\":{\"202\":1}}],[\"而是应该使用它们的指针\",{\"1\":{\"441\":1}}],[\"而是应该使用errors\",{\"1\":{\"393\":1}}],[\"而是为了表示泛型零值\",{\"1\":{\"343\":1}}],[\"而是逃逸到了堆上\",{\"1\":{\"282\":1}}],[\"而是字节数组的长度\",{\"1\":{\"255\":1}}],[\"而是复用了^符号\",{\"1\":{\"179\":1}}],[\"而是本地创建的仓库\",{\"1\":{\"58\":1}}],[\"而常量mysalary就是私有的\",{\"1\":{\"174\":1}}],[\"而\",{\"1\":{\"168\":1,\"169\":3,\"170\":2,\"259\":1,\"637\":2,\"639\":1,\"645\":1,\"649\":1}}],[\"而不必显式地指定如何处理文档中可能出现的每个不同字段\",{\"1\":{\"734\":1}}],[\"而不会干扰其他事务\",{\"1\":{\"656\":1}}],[\"而不要在接收方关闭管道\",{\"1\":{\"420\":1}}],[\"而不建议大转小\",{\"1\":{\"385\":1}}],[\"而不需要显式声明\",{\"1\":{\"635\":1}}],[\"而不需要源代码\",{\"1\":{\"311\":1}}],[\"而不需要去找它到底是哪一个重载\",{\"1\":{\"278\":1}}],[\"而不提供具体的实现\",{\"1\":{\"288\":1}}],[\"而不同的const分组则相互不会影响\",{\"1\":{\"212\":1}}],[\"而不同类型不可比较\",{\"1\":{\"209\":1}}],[\"而不是直接拒绝\",{\"1\":{\"1155\":1}}],[\"而不是直接尝试修改元素的值\",{\"1\":{\"361\":1}}],[\"而不是队列来组织消息\",{\"1\":{\"1057\":1}}],[\"而不是由server端维护\",{\"1\":{\"1018\":1}}],[\"而不是像\",{\"1\":{\"970\":1}}],[\"而不是像动态语言一样去尝试推断可能的结果\",{\"1\":{\"381\":1}}],[\"而不是多个独立的单独索引\",{\"1\":{\"816\":1}}],[\"而不是按照表内的索引顺序进行\",{\"1\":{\"814\":1}}],[\"而不是某个字段的取值可以由其他字段计算出来\",{\"1\":{\"793\":1}}],[\"而不是以列行数据的形式存储信息\",{\"1\":{\"734\":1}}],[\"而不是通过构造\",{\"1\":{\"654\":1}}],[\"而不是指针\",{\"1\":{\"654\":1}}],[\"而不是传统的\",{\"1\":{\"649\":1}}],[\"而不是等待超时\",{\"1\":{\"636\":1}}],[\"而不是在声明时计算\",{\"1\":{\"634\":1}}],[\"而不是被推送控制\",{\"1\":{\"634\":1}}],[\"而不是证明其不存在\",{\"1\":{\"480\":1}}],[\"而不是字符\",{\"1\":{\"477\":1}}],[\"而不是进行依赖管理\",{\"1\":{\"463\":1}}],[\"而不是管道是否已经关闭\",{\"1\":{\"420\":1}}],[\"而不是为了泛型而泛型\",{\"1\":{\"337\":1}}],[\"而不是dog结构体\",{\"1\":{\"287\":1}}],[\"而不是\",{\"1\":{\"173\":1}}],[\"而不是排队的任务数\",{\"1\":{\"137\":1}}],[\"而不用通过窗口化操作\",{\"1\":{\"28\":1}}],[\"而两次的话就是服务器端不能确认自己的消息是否被对方收到\",{\"1\":{\"82\":1}}],[\"而授权的前提是\",{\"1\":{\"12\":1}}],[\"那关键的问题来了\",{\"1\":{\"1198\":1}}],[\"那个worker进程抢到\",{\"1\":{\"1128\":1}}],[\"那个年代不是有cvs\",{\"1\":{\"12\":1}}],[\"那还会有问题\",{\"1\":{\"1065\":1}}],[\"那极端点\",{\"1\":{\"1065\":1}}],[\"那里面的消息不直接丢失了嘛\",{\"1\":{\"1064\":1}}],[\"那怎么解决呢\",{\"1\":{\"1061\":1}}],[\"那如何可用做的a可用正常产生这么多消息\",{\"1\":{\"1060\":1}}],[\"那如果有特别多的函数调用\",{\"1\":{\"388\":1}}],[\"那如果把延迟调用和闭包结合起来呢\",{\"1\":{\"285\":1}}],[\"那\",{\"1\":{\"1057\":1}}],[\"那在kafka中\",{\"1\":{\"1023\":1}}],[\"那leader怎么找呢\",{\"1\":{\"1022\":1}}],[\"那linux的代码是如何管理的呢\",{\"1\":{\"12\":1}}],[\"那样我们也可以用循环显示数据\",{\"1\":{\"863\":1}}],[\"那建议使用int类型\",{\"1\":{\"791\":1}}],[\"那究竟单表多少字段合适呢\",{\"1\":{\"788\":1}}],[\"那多少合适呢\",{\"1\":{\"785\":1}}],[\"那我就可以用一艘大船把他们都运走\",{\"1\":{\"1183\":1}}],[\"那我设置会有什么样的原则吗\",{\"1\":{\"597\":1,\"669\":1}}],[\"那我可以购买其他任意品牌的type\",{\"1\":{\"516\":1}}],[\"那用的是什么数据类型\",{\"1\":{\"569\":1,\"641\":2}}],[\"那这种方法显然太不灵活了\",{\"1\":{\"494\":1}}],[\"那时所有的代码都存放在gopath目录下\",{\"1\":{\"442\":1}}],[\"那就跟关系型数据库来比较\",{\"1\":{\"961\":1}}],[\"那就拷贝这个切片\",{\"1\":{\"287\":1}}],[\"那就拷贝这个整型\",{\"1\":{\"287\":1}}],[\"那就是消除空白符的时候\",{\"1\":{\"1418\":1}}],[\"那就是使用内置函数make\",{\"1\":{\"414\":1}}],[\"那就是panic\",{\"1\":{\"397\":1}}],[\"那就是必须是可以排序的类型\",{\"1\":{\"344\":1}}],[\"那就是实现了该接口\",{\"1\":{\"293\":1}}],[\"那就是键为math\",{\"1\":{\"261\":1}}],[\"那就是它们之间的类型必须相同\",{\"1\":{\"209\":1}}],[\"那就是所有在函数中的变量都必须要被使用\",{\"1\":{\"206\":1}}],[\"那就是在赋值旧变量的同时声明一个新的变量\",{\"1\":{\"206\":1}}],[\"那么只能通过取其第一个元素的指针来获取底层数组的地址\",{\"1\":{\"1445\":1}}],[\"那么便不会出现例二的无效地址情况\",{\"1\":{\"1443\":1}}],[\"那么对于的属性将不会输出\",{\"1\":{\"1302\":1}}],[\"那么结果为假\",{\"1\":{\"1269\":1}}],[\"那么请求的结果为真\",{\"1\":{\"1269\":1}}],[\"那么我自动也获得了rg1和rg2上的rg\",{\"1\":{\"1263\":1}}],[\"那么我就不需要专门运送水果的船和专门运送化学品的船了\",{\"1\":{\"1183\":1}}],[\"那么最终结果为真\",{\"1\":{\"1254\":1}}],[\"那么返回策略结果\",{\"1\":{\"1253\":1}}],[\"那么缓存就都失效了\",{\"1\":{\"1165\":1}}],[\"那么后来的数据<k\",{\"1\":{\"1165\":1}}],[\"那么后面的990ms的请求只能拒绝\",{\"1\":{\"1148\":1}}],[\"那么认为该服务器会被认为是停机了\",{\"1\":{\"1161\":1}}],[\"那么则拒绝该请求\",{\"1\":{\"1147\":1}}],[\"那么多余的令牌会被丢弃\",{\"1\":{\"1147\":1}}],[\"那么下面的protocol\",{\"1\":{\"1084\":1}}],[\"那么\",{\"1\":{\"1057\":1}}],[\"那么rabbitmq就够了\",{\"1\":{\"1057\":1}}],[\"那么可以设置auto\",{\"1\":{\"1029\":1}}],[\"那么可以不使用\",{\"1\":{\"637\":1}}],[\"那么会选择最小的那个\",{\"1\":{\"1029\":1}}],[\"那么会panic\",{\"1\":{\"294\":1}}],[\"那么kafka集群会自动调整分区与消费者实例间的对应关系\",{\"1\":{\"1027\":1}}],[\"那么消费者组中最多只能有4\",{\"1\":{\"1027\":1}}],[\"那么消息记录会被很好的均衡的发送到每个消费者实\",{\"1\":{\"1027\":1}}],[\"那么每⼀条消息记录会被⼴播到每⼀个消费者实例\",{\"1\":{\"1027\":1}}],[\"那么数据被发布到\",{\"1\":{\"1025\":1}}],[\"那么作为一个可扩展\",{\"1\":{\"1017\":1}}],[\"那么内存中的数据就会全部丢失\",{\"1\":{\"979\":1}}],[\"那么内存分布如下图所示\",{\"1\":{\"273\":1}}],[\"那么所有对swap文件的操作都是串行的\",{\"1\":{\"965\":1}}],[\"那么它的压力全部被分配到一台机器上\",{\"1\":{\"1165\":1}}],[\"那么它们的执行性能差不多\",{\"1\":{\"821\":1}}],[\"那么它就是不是原子操作\",{\"1\":{\"437\":1}}],[\"那么它就是取反运算符\",{\"1\":{\"179\":1}}],[\"那么当从根节点搜索的时候\",{\"1\":{\"804\":1}}],[\"那么执行器的执行流程是这样的\",{\"1\":{\"780\":1}}],[\"那么优化点主要体现在哪里呢\",{\"1\":{\"597\":1,\"669\":1}}],[\"那么hashmap初始化的容量为多少比较好\",{\"1\":{\"593\":1,\"665\":1}}],[\"那么上例中下载的依赖包存放的路径就位于\",{\"1\":{\"460\":1}}],[\"那么上面的问题讲迎刃而解\",{\"1\":{\"9\":1}}],[\"那么模块名就需要修改成如下\",{\"1\":{\"459\":1}}],[\"那么1000个协程都需要各自实例化对象\",{\"1\":{\"435\":1}}],[\"那么问题就来了\",{\"1\":{\"434\":1}}],[\"那么问题来了\",{\"1\":{\"337\":1}}],[\"那么依旧会重现之前的问题\",{\"1\":{\"412\":1}}],[\"那么并发的问题解决了吗\",{\"1\":{\"412\":1}}],[\"那么程序将会直接停止运行\",{\"1\":{\"396\":1}}],[\"那么target就必须是\",{\"1\":{\"393\":1}}],[\"那么t的值也实现了该接口\",{\"1\":{\"289\":1}}],[\"那么你必须使用server\",{\"1\":{\"1130\":1}}],[\"那么你才是个合格的gopher了\",{\"1\":{\"388\":1}}],[\"那么你会认识到go的语法其实并不难\",{\"1\":{\"329\":1}}],[\"那么其值必须是可取址的\",{\"1\":{\"361\":1}}],[\"那么该类型就属于该类型集\",{\"1\":{\"340\":1}}],[\"那么该接口就是这些类型集的交集\",{\"1\":{\"340\":1}}],[\"那么该变量也会逃逸到堆上\",{\"1\":{\"318\":1}}],[\"那么就会执行else这块的逻辑\",{\"1\":{\"1422\":1}}],[\"那么就⽆法记录这个分区被这个消费者组消费的offset了\",{\"1\":{\"1027\":1}}],[\"那么就自动执行bgsave命令\",{\"1\":{\"981\":1}}],[\"那么就可以获得它的长度\",{\"1\":{\"863\":1}}],[\"那么就知道其实b+树就是为了解决数据量大的时候存储在外存储器时候\",{\"1\":{\"805\":1}}],[\"那么就不太合适了\",{\"1\":{\"1053\":1}}],[\"那么就不会再向下执行\",{\"1\":{\"460\":1}}],[\"那么就不应该取一样的名字\",{\"1\":{\"278\":1}}],[\"那么就根本不应该使用泛型\",{\"1\":{\"339\":1}}],[\"那么编译就会失败\",{\"1\":{\"302\":1}}],[\"那么c调用时将返回一个结构体\",{\"1\":{\"300\":1}}],[\"那么根据实现的定义\",{\"1\":{\"293\":1}}],[\"那么称该类型实现了该接口\",{\"1\":{\"289\":2}}],[\"那么如果通过指针调用会如何呢\",{\"1\":{\"286\":1}}],[\"那么在解析时是否指定模板名称\",{\"1\":{\"1425\":1}}],[\"那么在模板中就会生成\",{\"1\":{\"1420\":1}}],[\"那么在服务器里面对应的真正的资源是\",{\"1\":{\"1139\":2}}],[\"那么在短时间内就会创建大量的defer\",{\"1\":{\"284\":1}}],[\"那么在编译时就会报错\",{\"1\":{\"206\":1}}],[\"那么将会导致无法正常读取\",{\"1\":{\"272\":1}}],[\"那么性能开销就会很高\",{\"1\":{\"254\":1}}],[\"那么这种情况就称之为逃逸\",{\"1\":{\"316\":1}}],[\"那么这样一来\",{\"1\":{\"310\":1}}],[\"那么这么做就会有一个明显的问题\",{\"1\":{\"250\":1}}],[\"那么这个项目后续所有的改动你将收到通知\",{\"1\":{\"53\":1}}],[\"那么s2的容量就是cap\",{\"1\":{\"250\":1}}],[\"那么变量存储的值就是对应类型的零值\",{\"1\":{\"205\":1}}],[\"这四个特殊操作构成了整个unsafe包的基石\",{\"1\":{\"1443\":1}}],[\"这才是本文主要讲解的内容\",{\"1\":{\"1415\":1}}],[\"这将会用到http\",{\"1\":{\"1332\":1}}],[\"这将把\",{\"1\":{\"633\":1}}],[\"这可能会导致很大的问题\",{\"1\":{\"1165\":1}}],[\"这可能会导致主协程一直阻塞等待\",{\"1\":{\"422\":1}}],[\"这1秒内不会有新的请求到达刚刚挂掉的节点上\",{\"1\":{\"1163\":1}}],[\"这块区域专门用来记录你的访问频率信息\",{\"1\":{\"1158\":1}}],[\"这块原理有了解过吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"这怎么解释呢\",{\"1\":{\"1156\":1}}],[\"这对用户很不友好\",{\"1\":{\"1156\":1}}],[\"这起到了平滑流量的作用\",{\"1\":{\"1156\":1}}],[\"这取决于单位时间内令牌桶中的令牌数量\",{\"1\":{\"1149\":1}}],[\"这⾥是初始化⽣成数据库\",{\"1\":{\"1078\":1}}],[\"这⾥得配置对外ip地址\",{\"1\":{\"1078\":1}}],[\"这让kafka成为了一个很好的大规模消息处理应用的解决方案\",{\"1\":{\"1019\":1}}],[\"这过程对其他的调用者都是透明的\",{\"1\":{\"988\":1}}],[\"这能最大程度地保证数据的安全性\",{\"1\":{\"988\":1}}],[\"这与关系型数据库有很大的区别\",{\"1\":{\"847\":1}}],[\"这段聚合操作就是匹配所有address为uk的用户\",{\"1\":{\"838\":1}}],[\"这段代码永远都是先输出1再输出2\",{\"1\":{\"422\":1}}],[\"这段代码的输出依旧是不确定的\",{\"1\":{\"412\":1}}],[\"这段代码的意图很明显\",{\"1\":{\"388\":1}}],[\"这段代码结果是正确的\",{\"1\":{\"284\":1}}],[\"这点和hash索引不同\",{\"1\":{\"817\":1}}],[\"这意味着如果我在订阅sub1上被分配了sub\",{\"1\":{\"1263\":1}}],[\"这意味着该服务只能在集群内部访问\",{\"1\":{\"1232\":1}}],[\"这意味着burst设置了nodelay时\",{\"1\":{\"1156\":1}}],[\"这意味着\",{\"1\":{\"1154\":1}}],[\"这意味着producer在follower副本确认接收到数据后才算一次发送完成\",{\"1\":{\"1047\":1}}],[\"这意味着在某些情况下可以牺牲一些数据一致性以换取更高的可用性和性能\",{\"1\":{\"906\":1}}],[\"这意味着你在对集合可以插入不同格式和类型的数据\",{\"1\":{\"846\":1}}],[\"这意味着可以对文档进行索引\",{\"1\":{\"734\":1}}],[\"这意味着所有变量的类型在编译时就已经确定\",{\"1\":{\"152\":1}}],[\"这需要做大量的性能测试和容错处理\",{\"1\":{\"637\":1}}],[\"这允许你在接口中使用泛型类型\",{\"1\":{\"635\":1}}],[\"这应该怎么做呢\",{\"1\":{\"592\":1,\"664\":1}}],[\"这张表的索引和其他的约束是怎么做的\",{\"1\":{\"592\":1,\"664\":1}}],[\"这三个参数都会控制删除过期数据的时间\",{\"1\":{\"1029\":1}}],[\"这三个项目的时间顺序\",{\"1\":{\"598\":1,\"670\":1}}],[\"这三个定律便是go反射的核心\",{\"1\":{\"349\":1}}],[\"这三者对比一下\",{\"1\":{\"573\":1,\"645\":2}}],[\"这句话也意味着channel是为了解决协程间的通信问题\",{\"1\":{\"535\":1}}],[\"这叫做面向接口编程\",{\"1\":{\"516\":1}}],[\"这叫做实现\",{\"1\":{\"516\":1}}],[\"这叫做接口\",{\"1\":{\"516\":1}}],[\"这台机器上编译\",{\"1\":{\"503\":1}}],[\"这台机器上能用的路径可能到另一台机器上就不能用了\",{\"1\":{\"462\":1}}],[\"这两方面的具体的权衡\",{\"1\":{\"789\":1}}],[\"这两者都是字符串类型\",{\"1\":{\"743\":1}}],[\"这两者的耗时同样不应该计入基准测试耗时中\",{\"1\":{\"500\":1}}],[\"这两个函数实际是math包下的两个函数\",{\"1\":{\"1443\":1}}],[\"这两个函数只在\",{\"1\":{\"504\":1}}],[\"这两个项目是自己开发的还是给公司做的\",{\"1\":{\"607\":1,\"679\":1}}],[\"这两个例子的输出都是相同的\",{\"1\":{\"258\":1}}],[\"这次我们利用索引查询出对应的所有id\",{\"1\":{\"820\":1}}],[\"这次的问题是对字符串做了两次反转后不相等\",{\"1\":{\"477\":1}}],[\"这次需要测试的是一个反转字符串的函数\",{\"1\":{\"477\":1}}],[\"这次将样本数修改为5个\",{\"1\":{\"476\":1}}],[\"这次就正常了\",{\"1\":{\"285\":1}}],[\"这下可以很清楚的看到每一个测试用例的执行顺序\",{\"1\":{\"468\":1}}],[\"这单单靠一个go\",{\"1\":{\"460\":1}}],[\"这其实是对应版本的commitid\",{\"1\":{\"459\":1}}],[\"这在实际场景中未免过于苛刻\",{\"1\":{\"1155\":1}}],[\"这在go中是行不通的\",{\"1\":{\"429\":1}}],[\"这在传统语言中是无法想象的\",{\"1\":{\"121\":1}}],[\"这会十分的繁琐\",{\"1\":{\"1312\":1}}],[\"这会导致下面一些问题\",{\"1\":{\"1240\":1}}],[\"这会形成缓存击穿\",{\"1\":{\"1165\":1}}],[\"这会消耗很多的系统资源\",{\"1\":{\"431\":1}}],[\"这会覆盖原有的类型\",{\"1\":{\"383\":1}}],[\"这会极大的降低维护人员的心智负担\",{\"1\":{\"188\":1}}],[\"这必然会导致编译速度变慢\",{\"1\":{\"345\":1}}],[\"这并非多此一举\",{\"1\":{\"343\":1}}],[\"这类问题不关心给出的类型是什么\",{\"1\":{\"337\":1}}],[\"这时\",{\"1\":{\"1417\":1}}],[\"这时我们使用exists优于in\",{\"1\":{\"821\":1}}],[\"这时在计算过程中要尽可能减少多表关联\",{\"1\":{\"789\":1}}],[\"这时候需要引入虚拟节点来进行解决\",{\"1\":{\"1165\":1}}],[\"这时候\",{\"1\":{\"1165\":2}}],[\"这时候漏桶算法可能就不合适了\",{\"1\":{\"1147\":1}}],[\"这时候如果要继续\",{\"1\":{\"776\":1}}],[\"这时候就可以将相同的部分剥离出来\",{\"1\":{\"494\":1}}],[\"这时候就需要用到读写锁\",{\"1\":{\"431\":1}}],[\"这时候就需要用到了泛型\",{\"1\":{\"337\":1}}],[\"这时怎么设计会让性能更优呢\",{\"1\":{\"593\":1,\"665\":1}}],[\"这时怎么设计索引\",{\"1\":{\"593\":1,\"665\":1}}],[\"这时要做分页\",{\"1\":{\"593\":1,\"665\":1}}],[\"这时能拿到threadlocal的内容吗\",{\"1\":{\"592\":1,\"664\":1}}],[\"这时会怎么办\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"这时是同一个线程吗\",{\"1\":{\"569\":1,\"641\":2}}],[\"这时可以选择再嵌套一层t\",{\"1\":{\"473\":1}}],[\"这时可以加上参数\",{\"1\":{\"468\":1}}],[\"这时应该通过指针来修改其元素值\",{\"1\":{\"361\":1}}],[\"这时名称不再重要\",{\"1\":{\"281\":1}}],[\"这使得\",{\"1\":{\"649\":1}}],[\"这使得我们可以暂时使用一些本地来不及发版的修改\",{\"1\":{\"462\":1}}],[\"这使得我们可以直接一键运行pprof数据采集\",{\"1\":{\"324\":1}}],[\"这使得异步流控制更加直观\",{\"1\":{\"137\":1}}],[\"这适用于简单的场景\",{\"1\":{\"298\":1}}],[\"这就避免了雪崩效应的发送\",{\"1\":{\"1165\":1}}],[\"这就相当于a的数据被c和d分担了\",{\"1\":{\"1165\":1}}],[\"这就造成了雪崩效应\",{\"1\":{\"1165\":1}}],[\"这就成了漏桶算法\",{\"1\":{\"1156\":1}}],[\"这就让kafka处理过程延迟更低\",{\"1\":{\"1019\":1}}],[\"这就在一个独立的topic之外\",{\"1\":{\"1019\":1}}],[\"这就形成了多哨兵模式\",{\"1\":{\"996\":1}}],[\"这就形成了死锁\",{\"1\":{\"422\":1}}],[\"这就可以很明显的看出b+树的优势\",{\"1\":{\"805\":1}}],[\"这就要求我们在做数据库开发的时候一定要注意高并发下的瓶颈\",{\"1\":{\"790\":1}}],[\"这就会出现一个问题\",{\"1\":{\"459\":1}}],[\"这就叫面向接口编程\",{\"1\":{\"293\":1}}],[\"这就叫实现\",{\"1\":{\"293\":1}}],[\"这就叫接口\",{\"1\":{\"293\":1}}],[\"这就是数据\",{\"1\":{\"1165\":1}}],[\"这就是最基本的负载均衡实例\",{\"1\":{\"1160\":1}}],[\"这就是\",{\"1\":{\"979\":1}}],[\"这就是为什么要小表驱动大表\",{\"1\":{\"821\":1}}],[\"这就是为什么数据库索引用的就是b+树\",{\"1\":{\"805\":1}}],[\"这就是问题所在\",{\"1\":{\"434\":1}}],[\"这就是面向接口编程的好处\",{\"1\":{\"293\":1,\"516\":1}}],[\"这就是间接的循环导入\",{\"1\":{\"175\":1}}],[\"这就是经典的\",{\"1\":{\"110\":1}}],[\"这部分应该是希望它们在函数体执行结束后再执行\",{\"1\":{\"285\":1}}],[\"这也解释了为什么下面看起来很正常的代码会发生死锁\",{\"1\":{\"416\":1}}],[\"这也是为了提高kafka的吞吐量\",{\"1\":{\"1020\":1}}],[\"这也是为什么不允许被值拷贝的原因\",{\"1\":{\"1411\":1}}],[\"这也是为什么上例中对象计数要用到原子值的原因\",{\"1\":{\"435\":1}}],[\"这也是为什么go的并发性能很不错的原因之一\",{\"1\":{\"412\":1}}],[\"这也是为什么需要as函数的原因\",{\"1\":{\"393\":1}}],[\"这也是为什么前面提到了只要有反射就离不开空接口\",{\"1\":{\"348\":1}}],[\"这也是b+tree优化的地方\",{\"1\":{\"803\":1}}],[\"这也是通常而言推荐模块名格式\",{\"1\":{\"459\":1}}],[\"这也是一个空接口\",{\"1\":{\"294\":1}}],[\"这也就导致了例子中的结果\",{\"1\":{\"287\":1}}],[\"这也就导致了第一个例子中的奇怪现象\",{\"1\":{\"285\":1}}],[\"这也造成了每次哈希值都不相同\",{\"1\":{\"261\":1}}],[\"这也代表了编译器是如何看待你的代码的\",{\"1\":{\"191\":1}}],[\"这一限制被扩大到了16384个\",{\"1\":{\"798\":1,\"799\":1}}],[\"这一过程可以用go\",{\"1\":{\"463\":1}}],[\"这一过程通常不会花费太多时间\",{\"1\":{\"454\":1}}],[\"这一串网址同时也是go项目的模块名称\",{\"1\":{\"459\":1}}],[\"这一点是我们不希望看到的\",{\"1\":{\"462\":1}}],[\"这一点会在后续的管道原理中说明\",{\"1\":{\"419\":1}}],[\"这一点你会在以后的编码中慢慢体会到\",{\"1\":{\"329\":1}}],[\"这一小节会简单的介绍下go的类型系统和基本使用\",{\"1\":{\"380\":1}}],[\"这一堆概念很死板\",{\"1\":{\"289\":1}}],[\"这一段代码将会无法通过编译\",{\"1\":{\"287\":1}}],[\"这一概念\",{\"1\":{\"282\":1}}],[\"这一键值对\",{\"1\":{\"260\":1}}],[\"这一节就来讲一下在go中如何进行输入输出\",{\"1\":{\"214\":1}}],[\"这超出了基础的范围\",{\"1\":{\"258\":1}}],[\"这显然会出现乱码\",{\"1\":{\"258\":1}}],[\"这\",{\"1\":{\"255\":1}}],[\"这种格式纯粹是个人觉得看的顺眼\",{\"1\":{\"1417\":1}}],[\"这种格式\",{\"1\":{\"1417\":1}}],[\"这种层级的文件系统unionfs\",{\"1\":{\"1192\":1}}],[\"这种现象叫做\",{\"1\":{\"1148\":1}}],[\"这种方式比直接使用\",{\"1\":{\"1230\":1}}],[\"这种方式有个很大的弊端\",{\"1\":{\"1148\":1}}],[\"这种方式来直接访问\",{\"1\":{\"301\":1}}],[\"这种业务形网关没什么可比性\",{\"1\":{\"1072\":1}}],[\"这种日志可以在节点间备份数据\",{\"1\":{\"1019\":1}}],[\"这种工作方式使得redis可以从copy\",{\"1\":{\"988\":1}}],[\"这种数据记录方法\",{\"1\":{\"984\":1}}],[\"这种写法调用了print函数\",{\"1\":{\"863\":1}}],[\"这种双百分号的查询\",{\"1\":{\"817\":1}}],[\"这种我们称为覆盖索引\",{\"1\":{\"814\":1}}],[\"这种我们一般称之为内存泄漏\",{\"1\":{\"284\":1}}],[\"这种范围扫描索引比全表扫描要好\",{\"1\":{\"814\":1}}],[\"这种建立索引就没有太多意义\",{\"1\":{\"811\":1}}],[\"这种默认行为使得创建索引和浏览数据变得很容易\",{\"1\":{\"734\":1}}],[\"这种静态语言\",{\"1\":{\"645\":1}}],[\"这种要怎么解决\",{\"1\":{\"588\":1,\"660\":1}}],[\"这种机制叫工作窃取\",{\"1\":{\"542\":1}}],[\"这种嵌套的测试用例一般称为子测试\",{\"1\":{\"473\":1}}],[\"这种优化带来的提升是显而易见的\",{\"1\":{\"435\":1}}],[\"这种复制方式需要先将源文件的全部内容读取到内存中\",{\"1\":{\"403\":1}}],[\"这种判断语句\",{\"1\":{\"388\":1}}],[\"这种情况一般是下面几种原因造成的\",{\"1\":{\"823\":1}}],[\"这种情况一般是有特殊用途\",{\"1\":{\"421\":1}}],[\"这种情况panic确实会恢复\",{\"1\":{\"397\":1}}],[\"这种情况下和悲观锁谁的性能更好一些呢\",{\"1\":{\"588\":1,\"660\":1}}],[\"这种情况下就会占用很大的内存并且给gc带来非常大的压力\",{\"1\":{\"435\":1}}],[\"这种情况下\",{\"1\":{\"384\":1,\"816\":1,\"1167\":1}}],[\"这种情况就没法直接访问了\",{\"1\":{\"301\":1}}],[\"这种情况经常会在遍历字符串时遇到\",{\"1\":{\"258\":1}}],[\"这种理念是否正确见仁见智\",{\"1\":{\"278\":1}}],[\"这种代码是可以通过编译的\",{\"1\":{\"206\":1}}],[\"这种设计虽然避免了程序中断\",{\"1\":{\"165\":1}}],[\"这么解决\",{\"1\":{\"1062\":1}}],[\"这么多的消息请求过来b服务很容易跨掉\",{\"1\":{\"1060\":1}}],[\"这么多人在世界各地为linux编写代码\",{\"1\":{\"12\":1}}],[\"这么设计\",{\"1\":{\"592\":1,\"664\":1}}],[\"这么做可以减少cpu访问内存的次数\",{\"1\":{\"273\":1}}],[\"这么做是为了内存安全\",{\"1\":{\"254\":1}}],[\"这么做通常是为了加载包下的init函数\",{\"1\":{\"175\":1}}],[\"这样\",{\"1\":{\"1443\":1}}],[\"这样一对接口叫veth\",{\"1\":{\"1195\":1}}],[\"这样一来即便不需要注释也可以知晓这是什么类型的测试\",{\"1\":{\"467\":1}}],[\"这样一来将协程a添加的数据直接覆盖掉了\",{\"1\":{\"434\":1}}],[\"这样一来\",{\"1\":{\"301\":1,\"429\":1,\"728\":1}}],[\"这样一来对于不同实例化的需求只需要一个构造函数即可完成\",{\"1\":{\"269\":1}}],[\"这样一来就是一个简单的枚举实现了\",{\"1\":{\"213\":1}}],[\"这样容器之间就能够通过容器的container\",{\"1\":{\"1195\":1}}],[\"这样他们就会出现相同的hash\",{\"1\":{\"1164\":1}}],[\"这样每个访客都固定访问一个后端服务器\",{\"1\":{\"1164\":1}}],[\"这样每页就显示50条记录了\",{\"1\":{\"861\":1}}],[\"这样重启依旧可继续工作\",{\"1\":{\"1065\":1}}],[\"这样拆分一个机器就是一个broker来缓解\",{\"1\":{\"1063\":1}}],[\"这样消息队列的吞吐量就上去了\",{\"1\":{\"1062\":1}}],[\"这样b根据能力进行处理\",{\"1\":{\"1061\":1}}],[\"这样即使在服务器发生故障之后\",{\"1\":{\"979\":1}}],[\"这样可设置为开机自启动\",{\"1\":{\"852\":1}}],[\"这样可以确保表\",{\"1\":{\"794\":1}}],[\"这样可以恢复到连接刚刚创建完成的状态\",{\"1\":{\"776\":1}}],[\"这样可以捕获到所有的失败测试用例\",{\"1\":{\"495\":1}}],[\"这样可以使得分析日志时定位更准确\",{\"1\":{\"472\":1}}],[\"这样可以存放任意类型\",{\"1\":{\"344\":1}}],[\"这样可以避免覆盖原切片的后续元素\",{\"1\":{\"251\":1}}],[\"这样会就是造成内存的浪费和性能的消耗\",{\"1\":{\"803\":1}}],[\"这样会不会有问题\",{\"1\":{\"592\":1,\"664\":1}}],[\"这样join\",{\"1\":{\"795\":1}}],[\"这样有以下好处\",{\"1\":{\"788\":1}}],[\"这样锁永远不会释放\",{\"1\":{\"588\":1,\"660\":1}}],[\"这样测试是不合理的\",{\"1\":{\"566\":1,\"638\":2}}],[\"这样断言部分就只剩下\",{\"1\":{\"494\":1}}],[\"这样使用就等同于单元测试\",{\"1\":{\"477\":1}}],[\"这样在后续的学习中会更加方便\",{\"1\":{\"467\":1}}],[\"这样就算挂了个别节点\",{\"1\":{\"996\":1}}],[\"这样就查询所有的users信息\",{\"1\":{\"863\":1}}],[\"这样就循环添加了30条数据\",{\"1\":{\"863\":1}}],[\"这样就会降低数据的维护速度\",{\"1\":{\"809\":1}}],[\"这样就可以运用二叉查找在一定的复杂度内获取相应的数据\",{\"1\":{\"802\":1}}],[\"这样就可以避免出现上述问题\",{\"1\":{\"477\":1}}],[\"这样就可能会造成程序错误\",{\"1\":{\"459\":1}}],[\"这样就实现了一个简单的互斥锁\",{\"1\":{\"417\":1}}],[\"这样无锁化的操作虽然不会导致协程阻塞\",{\"1\":{\"440\":1}}],[\"这样确实三个管道都能用上了\",{\"1\":{\"421\":1}}],[\"这样做\",{\"1\":{\"1165\":1}}],[\"这样做的好处在于不仅保证了数据表之间的独立性\",{\"1\":{\"793\":1}}],[\"这样做的好处就是传递的过程不再需要拷贝\",{\"1\":{\"303\":1}}],[\"这样做肯定比以前使用interface\",{\"1\":{\"344\":1}}],[\"这样做会更安全\",{\"1\":{\"303\":1}}],[\"这样才能确保程序正常通过编译\",{\"1\":{\"297\":1}}],[\"这样的好处可以起到隔离的作用\",{\"1\":{\"1127\":1}}],[\"这样的指针\",{\"1\":{\"515\":1}}],[\"这样的测试数据看起来就要直观很多\",{\"1\":{\"474\":1}}],[\"这样的代码依旧不能修改内部的值\",{\"1\":{\"286\":1}}],[\"这样的代码连编译都过不了\",{\"1\":{\"189\":1}}],[\"这样的程序将无法通过编译\",{\"1\":{\"276\":1}}],[\"这样用起来太麻烦了\",{\"1\":{\"223\":1}}],[\"这样是非常痛苦的\",{\"1\":{\"110\":1}}],[\"这样我峨嵋你既可以备份代码\",{\"1\":{\"39\":1}}],[\"这效率特别低\",{\"1\":{\"79\":1}}],[\"这个管道与chan是两个东西\",{\"1\":{\"1421\":1}}],[\"这个例子非常的简单\",{\"1\":{\"1374\":1}}],[\"这个例子组合的逻辑意义是\",{\"1\":{\"1254\":1}}],[\"这个角色被一个资源组角色rg\",{\"1\":{\"1263\":1}}],[\"这个图可以被编码为一系列的边\",{\"1\":{\"1262\":1,\"1266\":1}}],[\"这个语句意味着\",{\"1\":{\"1254\":1}}],[\"这个语句的执行方案就确定下来了\",{\"1\":{\"779\":1}}],[\"这个简单而常见的匹配规则意味着\",{\"1\":{\"1253\":1}}],[\"这个写在系统配置文件的可以更改\",{\"1\":{\"1223\":1}}],[\"这个主机叫什么\",{\"1\":{\"1223\":1}}],[\"这个网络和容器内部的网络是配对的\",{\"1\":{\"1195\":1}}],[\"这个ip就是归docker0\",{\"1\":{\"1194\":1}}],[\"这个文件的内容会越来越多\",{\"1\":{\"1174\":1}}],[\"这个开销是非常大的\",{\"1\":{\"1165\":1}}],[\"这个方法确保了相同的客户端的请求一直发送到相同的服务器\",{\"1\":{\"1164\":1}}],[\"这个8080服务器生效\",{\"1\":{\"1163\":1}}],[\"这个我们设置的burst数目是一致的\",{\"1\":{\"1155\":1}}],[\"这个我不太清楚\",{\"1\":{\"603\":1,\"675\":1}}],[\"这个模块用来限制单个ip的请求数\",{\"1\":{\"1152\":1}}],[\"这个配置的意思是设置一个大小为5的缓冲区当有大量请求\",{\"1\":{\"1151\":1}}],[\"这个配置很重要\",{\"1\":{\"1078\":1}}],[\"这个变量等于包含一些客户端请求参数的原始uri\",{\"1\":{\"1133\":1}}],[\"这个变量和apache的mod\",{\"1\":{\"1133\":1}}],[\"这个消息队列的吞吐量是很受限的\",{\"1\":{\"1062\":1}}],[\"这个版本就渐进式了解kafka\",{\"1\":{\"1060\":1}}],[\"这个对于大多数场景足够使用了\",{\"1\":{\"1053\":1}}],[\"这个exchange模块的作用和交换机也非常相似\",{\"1\":{\"1053\":1}}],[\"这个部分一定要写\",{\"1\":{\"1047\":1}}],[\"这个标识被称为offset\",{\"1\":{\"1025\":1}}],[\"这个参数不能使用到\",{\"1\":{\"1163\":1}}],[\"这个参数用于设置是否自动创建topic\",{\"1\":{\"1029\":1}}],[\"这个参数用于设置新创建的topic有多少个分区\",{\"1\":{\"1029\":1}}],[\"这个参数用于指定zookeeper所在的地址\",{\"1\":{\"1029\":1}}],[\"这个参数用于配置kafka中消息保存的时间\",{\"1\":{\"1029\":1}}],[\"这个参数用于配置kafka保存数据的位置\",{\"1\":{\"1029\":1}}],[\"这个参数可设置\",{\"1\":{\"1024\":1}}],[\"这个参数后面是你的域名\",{\"1\":{\"84\":1}}],[\"这个数字越小同步时间越长\",{\"1\":{\"1000\":1}}],[\"这个命令和\",{\"1\":{\"970\":1}}],[\"这个命令会给出逃逸分析报告\",{\"1\":{\"549\":1}}],[\"这个redis驱动几乎将所有的操作封装好了\",{\"1\":{\"913\":1}}],[\"这个回滚自然是无效的\",{\"1\":{\"897\":1}}],[\"这个原则并不是绝对的\",{\"1\":{\"793\":1}}],[\"这个预留量已经是非常的充足了\",{\"1\":{\"791\":1}}],[\"这个值可以通过逗号设置多个值\",{\"1\":{\"1029\":1}}],[\"这个值就是在执行器每次调用引擎获取数据行的时候累加的\",{\"1\":{\"780\":1}}],[\"这个值会影响到并发测试结果\",{\"1\":{\"498\":1}}],[\"这个接口\",{\"1\":{\"780\":2}}],[\"这个关键字识别出来\",{\"1\":{\"778\":1}}],[\"这个表上所有的查询缓存都会被清空\",{\"1\":{\"777\":1}}],[\"这个表有什么缺陷\",{\"1\":{\"603\":1,\"675\":1}}],[\"这个连接就处于空闲状态\",{\"1\":{\"776\":1}}],[\"这个问题实际上是斐波那契数列问题\",{\"1\":{\"654\":1}}],[\"这个问题可能涉及到计算机算法的复杂度\",{\"1\":{\"645\":1}}],[\"这个问题表明可能存在\",{\"1\":{\"638\":1}}],[\"这个问题直接for\",{\"1\":{\"537\":1}}],[\"这个lru算法用在生产环境会出现什么问题\",{\"1\":{\"618\":1,\"690\":1}}],[\"这个没有调研过吗\",{\"1\":{\"607\":1,\"679\":1}}],[\"这个跟redis里面看门狗的机制有什么区别吗\",{\"1\":{\"597\":1,\"669\":1}}],[\"这个项目后面会继续做吗\",{\"1\":{\"607\":1,\"679\":1}}],[\"这个项目打通了学校里面的账号体系了吗\",{\"1\":{\"567\":1,\"639\":2}}],[\"这个项目是用来给自己学校的吗\",{\"1\":{\"567\":1,\"639\":2}}],[\"这个服务有几个系统\",{\"1\":{\"567\":1,\"639\":2}}],[\"这个锁放在本地吗\",{\"1\":{\"567\":1,\"639\":2}}],[\"这个异常可以捕获吗\",{\"1\":{\"563\":1,\"635\":2}}],[\"这个协程可能又会开启其他协程\",{\"1\":{\"546\":1}}],[\"这个在拷贝赋值有一个深拷贝和浅拷贝问题\",{\"1\":{\"527\":1}}],[\"这个可以考虑使用max\",{\"1\":{\"1163\":1}}],[\"这个可以省略\",{\"1\":{\"516\":1}}],[\"这个可见性的规则适用于整个go语言的任何地方\",{\"1\":{\"174\":1}}],[\"这个作为值可存储多个值\",{\"1\":{\"512\":1}}],[\"这个遍历会进入这里吗\",{\"1\":{\"511\":1}}],[\"这个功能时\",{\"1\":{\"505\":1}}],[\"这个时间是由参数\",{\"1\":{\"776\":1}}],[\"这个时间不会被计入基准测试耗时\",{\"1\":{\"499\":1}}],[\"这个时候是不会退出nginx服务\",{\"1\":{\"1172\":1}}],[\"这个时候a服务器由于有热点数据挂了\",{\"1\":{\"1165\":1}}],[\"这个时候8080又被挂起当做备用机\",{\"1\":{\"1163\":1}}],[\"这个时候正常访问只能访问到8081和8082服务器\",{\"1\":{\"1163\":1}}],[\"这个时候如果有客户端有请求进入nginx服务器\",{\"1\":{\"1128\":1}}],[\"这个时候master会重启启动一个新的worker去重启执行任务\",{\"1\":{\"1127\":1}}],[\"这个时候索引就会显得越来越重要\",{\"1\":{\"800\":1}}],[\"这个时候用的就是你输入的用户名和密码\",{\"1\":{\"776\":1}}],[\"这个时候发现我合入的版本有bug\",{\"1\":{\"573\":1,\"645\":1}}],[\"这个时候要怎么办呢\",{\"1\":{\"573\":1,\"645\":2}}],[\"这个时候就可以使用retract指令\",{\"1\":{\"459\":1}}],[\"这个有很多选择\",{\"1\":{\"445\":1}}],[\"这个包通常命名为test\",{\"1\":{\"467\":1}}],[\"这个包相当于是标准库errors包的加强版\",{\"1\":{\"393\":1}}],[\"这个包对于实现go语言的调试器非常有价值\",{\"1\":{\"124\":1}}],[\"这个过程是自动完成的\",{\"1\":{\"450\":1}}],[\"这个过程叫传递\",{\"1\":{\"392\":1}}],[\"这个过程会被窃听\",{\"1\":{\"85\":1}}],[\"这个类型约束内规定了哪些类型是允许的\",{\"1\":{\"337\":1}}],[\"这个很好理解\",{\"1\":{\"318\":1}}],[\"这个坑还是非常隐晦的\",{\"1\":{\"285\":1}}],[\"这个序号其实就是代码的相对行号\",{\"1\":{\"212\":1}}],[\"这个效果就更为明显\",{\"1\":{\"208\":1}}],[\"这个规则仅适用于函数内的变量\",{\"1\":{\"206\":1}}],[\"这个特性特别适合容器化应用和微服务架构的部署\",{\"1\":{\"156\":1}}],[\"这个地址其实是服务器提供\",{\"1\":{\"110\":1}}],[\"这个非常的重要\",{\"1\":{\"110\":1}}],[\"这个是后续课程要着重去讲解和分析的问题\",{\"1\":{\"781\":1}}],[\"这个是nginx的配置文件\",{\"1\":{\"84\":1}}],[\"这个是我的标题\",{\"1\":{\"64\":1}}],[\"这个自己服务器可以考虑使用这种方式\",{\"1\":{\"84\":1}}],[\"这个同时也是一个算法练习工具\",{\"1\":{\"79\":1}}],[\"这个按钮的意思是\",{\"1\":{\"53\":1}}],[\"这里脚本安装helm\",{\"1\":{\"1231\":1}}],[\"这里就以calico为例\",{\"1\":{\"1228\":1}}],[\"这里要改为自己当下master的ip\",{\"1\":{\"1225\":1}}],[\"这里要注意几个点\",{\"1\":{\"1093\":1}}],[\"这里需要将官网中的google的源改为国内源\",{\"1\":{\"1222\":1}}],[\"这里\",{\"1\":{\"1156\":1}}],[\"这里限制的是每秒1次\",{\"1\":{\"1151\":1}}],[\"这里进行包含\",{\"1\":{\"1131\":1}}],[\"这里前端需要把token存储到cookie或者本地localsstorage中\",{\"1\":{\"1092\":1}}],[\"这里名字必须和代码中的一致\",{\"1\":{\"1091\":1}}],[\"这里配置6个\",{\"1\":{\"1029\":1}}],[\"这里以节点kafkazk1为例\",{\"1\":{\"1029\":1}}],[\"这里以删除gin为例子\",{\"1\":{\"453\":1}}],[\"这里统一将kafka安装到\",{\"1\":{\"1028\":1}}],[\"这里参考一下小白debug的思路来捋一遍redis\",{\"1\":{\"1012\":1}}],[\"这里设置为ip地址\",{\"1\":{\"1029\":1}}],[\"这里设置categoryid=1\",{\"1\":{\"749\":1}}],[\"这里设定是1000\",{\"1\":{\"1010\":1}}],[\"这里8001做个陪衬\",{\"1\":{\"1010\":1}}],[\"这里最好和端口保持一致\",{\"1\":{\"1010\":1}}],[\"这里必须要指定不同的目录位置\",{\"1\":{\"1010\":1}}],[\"这里注意一下\",{\"1\":{\"822\":1}}],[\"这里xx的值不要超过5000个\",{\"1\":{\"796\":1}}],[\"这里仿微博消息结构定义\",{\"1\":{\"745\":1}}],[\"这里省略\",{\"1\":{\"731\":1}}],[\"这里用一个空的正则表示\",{\"1\":{\"630\":1}}],[\"这里是\",{\"1\":{\"630\":1,\"1034\":1}}],[\"这里是文件夹\",{\"1\":{\"28\":1}}],[\"这里有一些数据\",{\"1\":{\"1393\":2}}],[\"这里有没有对哪一块比较熟悉并且研究过原理的\",{\"1\":{\"598\":1,\"670\":1}}],[\"这里有两篇go团队关于错误处理的文章\",{\"1\":{\"388\":1}}],[\"这里面不得不说用null字段的弊端\",{\"1\":{\"786\":1}}],[\"这里面比较有挑战的是哪个系统\",{\"1\":{\"593\":1,\"665\":1}}],[\"这里面主要包含了以下几个部分\",{\"1\":{\"328\":1}}],[\"这里只是为了测试查看效果所以调小\",{\"1\":{\"1158\":1}}],[\"这里只说使用\",{\"1\":{\"512\":1}}],[\"这里只需要将它的地址复制下来\",{\"1\":{\"453\":1}}],[\"这里直接将测试函数写在\",{\"1\":{\"484\":1}}],[\"这里直接选择第一个\",{\"1\":{\"453\":1}}],[\"这里采用反转两次的方法来进行验证\",{\"1\":{\"477\":1}}],[\"这里先按下不表\",{\"1\":{\"453\":1}}],[\"这里会出现很多搜索结果\",{\"1\":{\"453\":1}}],[\"这里选择七牛云的代理\",{\"1\":{\"451\":1}}],[\"这里开启1000个协程\",{\"1\":{\"435\":1}}],[\"这里传入的是sync\",{\"1\":{\"432\":1}}],[\"这里使用的是sqlx库\",{\"1\":{\"889\":1}}],[\"这里使用了sync\",{\"1\":{\"422\":1}}],[\"这里使用时就不能省略掉类型实参\",{\"1\":{\"338\":1}}],[\"这里总共创建了3个管道\",{\"1\":{\"417\":1}}],[\"这里的每个规则都是木桶的木板\",{\"1\":{\"1158\":1}}],[\"这里的每一个规则就好比木桶原理一样\",{\"1\":{\"1158\":1}}],[\"这里的id是8007的master\",{\"1\":{\"1010\":1}}],[\"这里的拒绝3b是指\",{\"1\":{\"790\":1}}],[\"这里的数据大多数可读性并不高\",{\"1\":{\"324\":1}}],[\"这里的类型内存大小更为清晰明确\",{\"1\":{\"304\":1}}],[\"这里将kafka放到后台运行\",{\"1\":{\"1033\":1}}],[\"这里将kafka安装到\",{\"1\":{\"1029\":1}}],[\"这里将监听地址设置为ip地址\",{\"1\":{\"1029\":1}}],[\"这里将切片的底层数组的指针传递给了c函数\",{\"1\":{\"306\":1}}],[\"这里将称成为grow函数\",{\"1\":{\"282\":1}}],[\"这里我们将kafka安装到了\",{\"1\":{\"1028\":1}}],[\"这里我们应该尽量使用mysql默认的3306端口\",{\"1\":{\"822\":1}}],[\"这里我们使用gitee\",{\"1\":{\"43\":1}}],[\"这里我们需要一个服务器\",{\"1\":{\"39\":1}}],[\"这些定义的模板在并不会生成在最终的模板中\",{\"1\":{\"1425\":1}}],[\"这些基础部分描述了资源和用户之间的关系\",{\"1\":{\"1249\":1}}],[\"这些配置一定要和你程序息息相关\",{\"1\":{\"1163\":1}}],[\"这些信号都是worker去执行和处理\",{\"1\":{\"1127\":1}}],[\"这些信号有那些如下\",{\"1\":{\"1127\":1}}],[\"这些命令位于kafka安装目录的bin目录下\",{\"1\":{\"1034\":1}}],[\"这些都是不好的优化体验\",{\"1\":{\"800\":1}}],[\"这些查询的语句\",{\"1\":{\"796\":1}}],[\"这些语句较为耗费cpu\",{\"1\":{\"796\":1}}],[\"这些关系越多\",{\"1\":{\"793\":1}}],[\"这些接口都是引擎中已经定义好的\",{\"1\":{\"780\":1}}],[\"这些资源会在连接断开的时候才释放\",{\"1\":{\"776\":1}}],[\"这些字段是包含数据的键值对\",{\"1\":{\"734\":1}}],[\"这些是比较常用的api\",{\"1\":{\"707\":1}}],[\"这些是对net\",{\"1\":{\"124\":1}}],[\"这些操作默认会加行级锁\",{\"1\":{\"656\":1}}],[\"这些操作需要消耗更多的\",{\"1\":{\"649\":1}}],[\"这些设计模式可以帮助我们写出更加清晰\",{\"1\":{\"654\":1}}],[\"这些数据将会被清空\",{\"1\":{\"1025\":1}}],[\"这些数据类型底层是基于什么数据结构实现的\",{\"1\":{\"572\":1,\"644\":1}}],[\"这些数据要看懂还挺不容易的\",{\"1\":{\"328\":1}}],[\"这些一般存活时间短\",{\"1\":{\"553\":1}}],[\"这些内置的基础类型\",{\"1\":{\"380\":1}}],[\"这些函数实际上并不存在\",{\"1\":{\"303\":1}}],[\"这些变量的内存会随着出栈而被回收\",{\"1\":{\"282\":1}}],[\"这些枚举实际上就是数字\",{\"1\":{\"213\":1}}],[\"这些\",{\"1\":{\"151\":1}}],[\"这些文件的状态会随着我们执行git的命令发生变化\",{\"1\":{\"22\":1}}],[\"这些集中式的版本控制系统不但速度慢\",{\"1\":{\"12\":1}}],[\"这是自定义函数的途径之一\",{\"1\":{\"1420\":1}}],[\"这是为了减少传输过程的空间损耗\",{\"1\":{\"1319\":1}}],[\"这是为了避免内存安全问题\",{\"1\":{\"168\":1}}],[\"这是最常用的日志核心\",{\"1\":{\"1302\":1}}],[\"这是表示图的常见方式\",{\"1\":{\"1266\":1}}],[\"这是表示图的一种常见方式\",{\"1\":{\"1262\":1}}],[\"这是kafka进程成功启动的标志\",{\"1\":{\"1033\":1}}],[\"这是我们使用in优于exists\",{\"1\":{\"821\":1}}],[\"这是性能最好的\",{\"1\":{\"815\":1}}],[\"这是const类型的特例\",{\"1\":{\"814\":1}}],[\"这是这门语言的核心所在\",{\"1\":{\"411\":1}}],[\"这是\",{\"1\":{\"390\":1}}],[\"这是具名返回值的使用方式\",{\"1\":{\"343\":1}}],[\"这是benchmark所不能满足的\",{\"1\":{\"315\":1}}],[\"这是因为\",{\"1\":{\"981\":1}}],[\"这是因为源文件\",{\"1\":{\"486\":1}}],[\"这是因为go并没有一个公共的依赖仓库\",{\"1\":{\"459\":1}}],[\"这是因为go会在适当情况下对指针进行解引用\",{\"1\":{\"287\":1}}],[\"这是因为在unicode编码中\",{\"1\":{\"255\":1}}],[\"这是两个不同的类型\",{\"1\":{\"287\":1}}],[\"这是一种将用户映射到操作和操作映射到资源的方法\",{\"1\":{\"1255\":1}}],[\"这是一致性hash算法的基本原理\",{\"1\":{\"1165\":1}}],[\"这是一款为大数据而生的消息中间件\",{\"1\":{\"1055\":1}}],[\"这是一段输出\",{\"1\":{\"233\":1}}],[\"这是一个io操作\",{\"1\":{\"985\":1}}],[\"这是一个查询语句\",{\"1\":{\"778\":1}}],[\"这是一个手动声明多个变量来创建测试数据的例子\",{\"1\":{\"474\":1}}],[\"这是一个使用互斥锁的例子\",{\"1\":{\"440\":1}}],[\"这是一个管道的声明语句\",{\"1\":{\"413\":1}}],[\"这是一个在循环体中开启协程的例子\",{\"1\":{\"412\":1}}],[\"这是一个原始错误\",{\"1\":{\"392\":1}}],[\"这是一个原生字符串\",{\"1\":{\"252\":1}}],[\"这是一个错误\",{\"1\":{\"390\":1}}],[\"这是一个计算文件哈希值的demo\",{\"1\":{\"388\":1}}],[\"这是一个典型的数值溢出问题\",{\"1\":{\"385\":1}}],[\"这是一个二维map\",{\"1\":{\"384\":1}}],[\"这是一个函数指针\",{\"1\":{\"382\":1}}],[\"这是一个泛型结构体\",{\"1\":{\"338\":1}}],[\"这是一个泛型哈希表\",{\"1\":{\"338\":1}}],[\"这是一个泛型切片形参的例子\",{\"1\":{\"338\":1}}],[\"这是一个泛型切片\",{\"1\":{\"338\":1}}],[\"这是一个功能十分简单的函数\",{\"1\":{\"337\":1}}],[\"这是一个很简单的模板文件使用案例\",{\"1\":{\"1428\":1}}],[\"这是一个很简单的readme文档\",{\"1\":{\"448\":1}}],[\"这是一个很简单的示例\",{\"1\":{\"317\":1}}],[\"这是一个很经典的循环案例\",{\"1\":{\"233\":1}}],[\"这是一个非常简单的测试\",{\"1\":{\"314\":1}}],[\"这是一个person接口\",{\"1\":{\"291\":1}}],[\"这是一个自定义排序规则的例子\",{\"1\":{\"281\":1}}],[\"这是一个无序比较双精度浮点数的指令\",{\"1\":{\"261\":1}}],[\"这是一个字符串\",{\"1\":{\"255\":2}}],[\"这是一个普通字符串\",{\"1\":{\"252\":4}}],[\"这是一个变量\",{\"1\":{\"239\":1}}],[\"这是一个双循环\",{\"1\":{\"235\":1}}],[\"这是一个死循环\",{\"1\":{\"233\":1}}],[\"这是一个语句\",{\"1\":{\"177\":1}}],[\"这是一个超级简单的负载均衡器\",{\"1\":{\"145\":1}}],[\"这是一个围棋实施解霸其中中国分词算法\",{\"1\":{\"144\":1}}],[\"这是一个档案主页的案例\",{\"1\":{\"2\":1}}],[\"这是计算斐波那契数列的一小段代码\",{\"1\":{\"208\":1}}],[\"这是启动函数main函数\",{\"1\":{\"177\":1}}],[\"这是直接循环导入\",{\"1\":{\"175\":1}}],[\"这是代理服务器的非常简单但快速的后端\",{\"1\":{\"145\":1}}],[\"这是main包\",{\"1\":{\"177\":1}}],[\"这是martin\",{\"1\":{\"144\":1}}],[\"这是mmseg的go实现\",{\"1\":{\"144\":1}}],[\"这是众所周知的库\",{\"1\":{\"132\":1}}],[\"这是非常重要的\",{\"1\":{\"55\":1}}],[\"这是项目主页的案例\",{\"1\":{\"0\":1}}],[\"但随着时代的更替\",{\"1\":{\"1310\":1}}],[\"但随机访问效率差\",{\"1\":{\"636\":1}}],[\"但有https配置安全性高且可控制访问也可以高可用\",{\"1\":{\"1235\":1}}],[\"但有一些限制\",{\"1\":{\"635\":1}}],[\"但有一定的风险\",{\"1\":{\"303\":1}}],[\"但只有最后一个生效\",{\"1\":{\"1193\":1}}],[\"但此时缓存这些请求还有意义吗\",{\"1\":{\"1156\":1}}],[\"但nginx会限制队列元素释放的速度\",{\"1\":{\"1156\":1}}],[\"但number的方法集确实是person\",{\"1\":{\"293\":1}}],[\"但都会在漏桶里边先保存起来\",{\"1\":{\"1149\":1}}],[\"但手动或者自动触发的\",{\"1\":{\"988\":1}}],[\"但一个page上不能被多个对象共享\",{\"1\":{\"965\":1}}],[\"但一定会提高开发人员的血压和心智负担\",{\"1\":{\"273\":1}}],[\"但仍然可以进行读取操作\",{\"1\":{\"965\":1}}],[\"但仍然需要一定的开销\",{\"1\":{\"651\":1}}],[\"但更多的是使用特定的查询语言或api\",{\"1\":{\"906\":1}}],[\"但通常情况下我们插入集合的数据都会有一定的关联性\",{\"1\":{\"846\":1}}],[\"但效率非常高\",{\"1\":{\"820\":1}}],[\"但我们的数据达到成百上千万时\",{\"1\":{\"820\":1}}],[\"但我们可以通过给自定义类型添加方法来返回其字符串表现形式\",{\"1\":{\"213\":1}}],[\"但index是从索引中读取\",{\"1\":{\"814\":1}}],[\"但缺点也很明显\",{\"1\":{\"807\":1}}],[\"但计算的时间窗口又很小\",{\"1\":{\"789\":1}}],[\"但建议不要使用查询缓存\",{\"1\":{\"777\":1}}],[\"但建议还是不要使用特殊字符\",{\"1\":{\"445\":1}}],[\"但存储的却是长整型的毫秒值\",{\"1\":{\"721\":1}}],[\"但允许不可重复读\",{\"1\":{\"656\":1}}],[\"但数据内容是相同的\",{\"1\":{\"656\":1}}],[\"但让子类决定实例化哪个类\",{\"1\":{\"654\":1}}],[\"但切片arr的最大索引为3\",{\"1\":{\"654\":1}}],[\"但线程的开销更大\",{\"1\":{\"649\":1}}],[\"但线程切换开销较大\",{\"1\":{\"636\":1}}],[\"但使用长连接\",{\"1\":{\"776\":1}}],[\"但使用\",{\"1\":{\"641\":1}}],[\"但使用较少的内存\",{\"1\":{\"127\":1}}],[\"但为了减少数据库压力\",{\"1\":{\"641\":1}}],[\"但可以通过函数调用的方式来实现\",{\"1\":{\"1417\":1}}],[\"但可以通过channel和自定义逻辑模拟非阻塞的锁\",{\"1\":{\"654\":1}}],[\"但可以通过以下方法实现\",{\"1\":{\"651\":1}}],[\"但可以通过配置增加\",{\"1\":{\"639\":1}}],[\"但可能增加延迟\",{\"1\":{\"645\":1}}],[\"但可能会有幻读\",{\"1\":{\"641\":1}}],[\"但可能会面临性能瓶颈\",{\"1\":{\"638\":1}}],[\"但可能会浪费资源\",{\"1\":{\"637\":1}}],[\"但可能出现幻读\",{\"1\":{\"634\":1}}],[\"但可能出现不可重复读\",{\"1\":{\"634\":1}}],[\"但可能导致运行时错误\",{\"1\":{\"169\":1}}],[\"但可能导致代码冗长\",{\"1\":{\"165\":1}}],[\"但会导致数据库文件变的巨大\",{\"1\":{\"965\":1,\"983\":1}}],[\"但会引起主从同步延迟\",{\"1\":{\"796\":1}}],[\"但会增加插入\",{\"1\":{\"651\":1}}],[\"但会增加存储空间和查询开销\",{\"1\":{\"637\":1}}],[\"但会继续执行已经提交的任务\",{\"1\":{\"645\":1}}],[\"但会影响性能\",{\"1\":{\"638\":1}}],[\"但消息未成功投递到其他服务\",{\"1\":{\"638\":1}}],[\"但对于高吞吐量\",{\"1\":{\"637\":1}}],[\"但对于包外而言并不是这样\",{\"1\":{\"174\":1}}],[\"但实际上是可预测的\",{\"1\":{\"637\":1}}],[\"但实际上它会将a\",{\"1\":{\"208\":1}}],[\"但性能较栈慢\",{\"1\":{\"636\":1}}],[\"但容量有限\",{\"1\":{\"636\":1}}],[\"但处理未完成时发生故障\",{\"1\":{\"634\":1}}],[\"但由于在op参数前后添加了\",{\"1\":{\"1417\":1}}],[\"但由于查询条件设计不合理\",{\"1\":{\"633\":1}}],[\"但由于类型未知\",{\"1\":{\"343\":1}}],[\"但函数本身会延迟执行\",{\"1\":{\"514\":1}}],[\"但不会去更新uinptr所保存的值\",{\"1\":{\"1443\":1}}],[\"但不同的是\",{\"1\":{\"1156\":1}}],[\"但不一定被查询实际使用\",{\"1\":{\"814\":1}}],[\"但不建议使用bigint\",{\"1\":{\"791\":1}}],[\"但不需要占用实际内存\",{\"1\":{\"651\":1}}],[\"但不关心具体的实现\",{\"1\":{\"651\":1}}],[\"但不是数值\",{\"1\":{\"512\":1}}],[\"但不支持转义\",{\"1\":{\"510\":1}}],[\"但不运行\",{\"1\":{\"469\":1}}],[\"但结果是乱码\",{\"1\":{\"477\":1}}],[\"但也可以根据需要\",{\"1\":{\"641\":1}}],[\"但也不是原子操作\",{\"1\":{\"437\":1}}],[\"但也有不同\",{\"1\":{\"277\":1}}],[\"但它只适用于处理小字符串的情况\",{\"1\":{\"1414\":1}}],[\"但它以毫秒为单位设置\",{\"1\":{\"970\":1}}],[\"但它在处理大数据量时的效率低于\",{\"1\":{\"649\":1}}],[\"但它并不是锁\",{\"1\":{\"432\":1}}],[\"但它提供了更多可用的方法\",{\"1\":{\"431\":1}}],[\"但a协程并不知道这件事\",{\"1\":{\"429\":1}}],[\"但事实上要学会go\",{\"1\":{\"455\":1}}],[\"但事实上recover\",{\"1\":{\"397\":1}}],[\"但事实并非如此\",{\"1\":{\"429\":1}}],[\"但主协程依旧在等待\",{\"1\":{\"422\":1}}],[\"但go是第一个能够将协程和并发支持的相当简洁和优雅的语言\",{\"1\":{\"412\":1}}],[\"但go官方也不建议在c中长期引用go的内存\",{\"1\":{\"310\":1}}],[\"但同时带来的弊端也很明显\",{\"1\":{\"346\":1}}],[\"但内置的可排序类型只有数字和字符串\",{\"1\":{\"344\":1}}],[\"但堆就不一样了\",{\"1\":{\"344\":1}}],[\"但自从诞生以来\",{\"1\":{\"336\":1}}],[\"但c语言类型可以由多个关键字组成\",{\"1\":{\"301\":1}}],[\"但c语言不允许有多返回值\",{\"1\":{\"298\":1}}],[\"但fn1\",{\"1\":{\"285\":1}}],[\"但过程也许不对\",{\"1\":{\"284\":1}}],[\"但变量e和n的生命周期并没有结束\",{\"1\":{\"282\":1}}],[\"但除了更加方便以外与第一种方式没有任何的区别\",{\"1\":{\"270\":1}}],[\"但本质上没有任何变化\",{\"1\":{\"270\":1}}],[\"但依旧有返回值\",{\"1\":{\"260\":1}}],[\"但如果你在一个大表上创建了多种组合索引\",{\"1\":{\"809\":1}}],[\"但如果想要测试多组数据时\",{\"1\":{\"474\":1}}],[\"但如果使用了\",{\"1\":{\"462\":1}}],[\"但如果是一个大点的项目\",{\"1\":{\"317\":1}}],[\"但如果是一个指针\",{\"1\":{\"287\":1}}],[\"但如果只是一些简单的任务\",{\"1\":{\"314\":1}}],[\"但如果包含非ascii字符结果就不同了\",{\"1\":{\"258\":1}}],[\"但如果对应性能有更高要求\",{\"1\":{\"257\":1}}],[\"但其实是有问题的\",{\"1\":{\"477\":1}}],[\"但其实内部实现都差不多\",{\"1\":{\"256\":1}}],[\"但其引用依旧是同一个\",{\"1\":{\"419\":1}}],[\"但其变量类型是由编译器自行推断的\",{\"1\":{\"381\":1}}],[\"但其性能仍然非常出色\",{\"1\":{\"161\":1}}],[\"但功能有着不小的区别\",{\"1\":{\"237\":1}}],[\"但没有类似\",{\"1\":{\"637\":1}}],[\"但没有人会去说它这一点\",{\"1\":{\"388\":1}}],[\"但没有使用它\",{\"1\":{\"206\":1}}],[\"但没有依赖项\",{\"1\":{\"126\":1}}],[\"但并不保证用于创建对象的new函数就一定是并发安全的\",{\"1\":{\"435\":1}}],[\"但并不等同\",{\"1\":{\"203\":1}}],[\"但并发编程相对复杂\",{\"1\":{\"170\":1}}],[\"但必须加上花括号\",{\"1\":{\"192\":1}}],[\"但在现代通过分片\",{\"1\":{\"904\":1}}],[\"但在这400毫秒内\",{\"1\":{\"429\":1}}],[\"但在c与go之间切换也会不小的造成性能损失\",{\"1\":{\"314\":1}}],[\"但在go中不行\",{\"1\":{\"192\":1}}],[\"但在性能上可能不如\",{\"1\":{\"169\":1}}],[\"但又不需要用到包中的类型\",{\"1\":{\"175\":1}}],[\"但某些特定领域的库可能不如\",{\"1\":{\"169\":1}}],[\"但这不足以满足实际需求\",{\"1\":{\"1160\":1}}],[\"但这个只是一个简陋的消息组件\",{\"1\":{\"1061\":1}}],[\"但这个特性相对较新\",{\"1\":{\"165\":1}}],[\"但这种方式容易导致缓存与数据库之间的数据不一致\",{\"1\":{\"644\":1}}],[\"但这种同步读写的方式是非常危险的\",{\"1\":{\"417\":1}}],[\"但这样会引发另一个问题\",{\"1\":{\"287\":1}}],[\"但这可能对习惯传统\",{\"1\":{\"165\":1}}],[\"但需要仔细考虑以便正确应用它们\",{\"1\":{\"124\":1}}],[\"但你也可以手动指定一个\",{\"1\":{\"64\":1}}],[\"但未提交状态\",{\"1\":{\"22\":1}}],[\"但是uintptr只是一个整数值\",{\"1\":{\"1443\":1}}],[\"但是针对html\",{\"1\":{\"1428\":1}}],[\"但是每一次都要自定义一个结构体将会十分的繁琐\",{\"1\":{\"1337\":1}}],[\"但是每个分区最多只\",{\"1\":{\"1027\":1}}],[\"但是仅支持基础的配置\",{\"1\":{\"1302\":1}}],[\"但是仅支持强类型输出的日志\",{\"1\":{\"1301\":1}}],[\"但是仅限本地访问不能远程访问\",{\"1\":{\"1233\":1}}],[\"但是仅允许在前缀符号之后和数字之间使用\",{\"1\":{\"181\":1}}],[\"但是docker运行的容器多了\",{\"1\":{\"1212\":1}}],[\"但是删了又不行\",{\"1\":{\"1197\":1}}],[\"但是删除缓存时没有成功\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"但是反向也ping不通\",{\"1\":{\"1196\":1}}],[\"但是反过来\",{\"1\":{\"310\":1}}],[\"但是反过来的话\",{\"1\":{\"287\":1}}],[\"但是现在要自己搭建镜像加速\",{\"1\":{\"1193\":1}}],[\"但是随着时间的推移\",{\"1\":{\"1174\":1}}],[\"但是长期来看并不会提高吞吐量的上限\",{\"1\":{\"1156\":1}}],[\"但是总体耗时变短了\",{\"1\":{\"1156\":1}}],[\"但是请注意\",{\"1\":{\"1155\":1,\"1156\":1}}],[\"但是root可以用在server\",{\"1\":{\"1139\":1}}],[\"但是root只能有一个\",{\"1\":{\"1139\":1}}],[\"但是receiver可以拥有泛型形参\",{\"1\":{\"339\":1}}],[\"但是前提是\",{\"1\":{\"1132\":1,\"1173\":1}}],[\"但是前者失败后还会继续执行\",{\"1\":{\"471\":1}}],[\"但是a服务可发送200pqs\",{\"1\":{\"1060\":1}}],[\"但是默认并不会直接将topic数据物理删除\",{\"1\":{\"1029\":1}}],[\"但是效率最低\",{\"1\":{\"1024\":1}}],[\"但是设置了数据的key\",{\"1\":{\"1023\":1}}],[\"但是需要配置域名\",{\"1\":{\"1225\":1}}],[\"但是需要更小的端到端延时\",{\"1\":{\"1019\":1}}],[\"但是需要收费\",{\"1\":{\"74\":1}}],[\"但是执行速度慢\",{\"1\":{\"987\":1}}],[\"但是save命令是阻塞式的\",{\"1\":{\"981\":1}}],[\"但是sum函数的逻辑都是一模一样的\",{\"1\":{\"337\":1}}],[\"但是如果队列设置的比较大\",{\"1\":{\"1156\":1}}],[\"但是如果\",{\"1\":{\"979\":1}}],[\"但是如果有多个协程访问的话就可能会出现问题了\",{\"1\":{\"434\":1}}],[\"但是比较有决定性的还是高性能和丰富的数据类型支持\",{\"1\":{\"961\":1}}],[\"但是容易卡死\",{\"1\":{\"877\":1}}],[\"但是容易窃取和监听\",{\"1\":{\"83\":1}}],[\"但是容量小\",{\"1\":{\"805\":1}}],[\"但是查询效率低\",{\"1\":{\"805\":1}}],[\"但是b书允许每个节点有更多的子节点\",{\"1\":{\"803\":1}}],[\"但是当应用系统正式上线后\",{\"1\":{\"799\":1}}],[\"但是\",{\"1\":{\"797\":1,\"1165\":1,\"1167\":1}}],[\"但是突然查询很慢\",{\"1\":{\"614\":1,\"686\":1}}],[\"但是发生冲突的可能性也增大了\",{\"1\":{\"603\":1,\"675\":1}}],[\"但是简单一些\",{\"1\":{\"593\":1,\"665\":1}}],[\"但是频繁内存拷贝又有性能问题\",{\"1\":{\"537\":1}}],[\"但是无节制使用会导致编译变慢而且代码维护成本增加\",{\"1\":{\"516\":1}}],[\"但是无法存放元素\",{\"1\":{\"259\":1}}],[\"但是问题也是明显逃逸的话会造成gc压力\",{\"1\":{\"514\":1}}],[\"但是可读性差\",{\"1\":{\"513\":1}}],[\"但是可以通过\",{\"1\":{\"1196\":1}}],[\"但是可以通过遍历访问到\",{\"1\":{\"263\":1}}],[\"但是可以在配置文件中去配置worker的进程数量\",{\"1\":{\"1126\":1}}],[\"但是可以使用已有的泛型类型\",{\"1\":{\"339\":1}}],[\"但是可以覆盖\",{\"1\":{\"253\":1}}],[\"但是oop的影子\",{\"1\":{\"513\":1}}],[\"但是没法删除\",{\"1\":{\"512\":1}}],[\"但是输出结果太简介了\",{\"1\":{\"468\":1}}],[\"但是由于go\",{\"1\":{\"460\":1}}],[\"但是由于grow函数引用了它们\",{\"1\":{\"282\":1}}],[\"但是存储依赖的文件夹是分大小写的\",{\"1\":{\"459\":1}}],[\"但是有一个官方的代理仓库\",{\"1\":{\"451\":1}}],[\"但是有一种情况除外\",{\"1\":{\"206\":1}}],[\"但是它不能存储nil\",{\"1\":{\"441\":1}}],[\"但是它被son的mom字段所引用了\",{\"1\":{\"317\":1}}],[\"但是会降低索引的选择性所以需要在前缀索引的大小和选择性之间找到平衡\",{\"1\":{\"815\":1}}],[\"但是会导致内存逃逸\",{\"1\":{\"549\":1}}],[\"但是会阻塞写协程\",{\"1\":{\"431\":1}}],[\"但是会受到父块中的影响\",{\"1\":{\"210\":1}}],[\"但是为了保险起见\",{\"1\":{\"428\":1}}],[\"但是保险起见\",{\"1\":{\"427\":1}}],[\"但是提供了对应的函数来创建上下文\",{\"1\":{\"425\":1}}],[\"但是死循环+select会导致主协程永久阻塞\",{\"1\":{\"421\":1}}],[\"但是对于普通人员gui可视化工具更方便使用\",{\"1\":{\"874\":1}}],[\"但是对于上面的操作而言\",{\"1\":{\"440\":1}}],[\"但是对于管道而言\",{\"1\":{\"420\":1}}],[\"但是对于接口类型的话\",{\"1\":{\"341\":1}}],[\"但是顺序还是乱的\",{\"1\":{\"412\":1}}],[\"但是其实这个例子执行过后在大部分情况下什么都不会输出\",{\"1\":{\"412\":1}}],[\"但是调用者本身不负责处理错误\",{\"1\":{\"392\":1}}],[\"但是int类型无法代表interface\",{\"1\":{\"386\":1}}],[\"但是int类型无法被string和bool类型代表\",{\"1\":{\"385\":1}}],[\"但是num2并没有\",{\"1\":{\"385\":1}}],[\"但是又采用了下划线\",{\"1\":{\"343\":1}}],[\"但是这并不利于人为观察\",{\"1\":{\"1319\":1}}],[\"但是这个时候就意味着每次增减服务器的时候\",{\"1\":{\"1165\":1}}],[\"但是这个服务器还运行着别人服务\",{\"1\":{\"1163\":1}}],[\"但是这样做法不推荐\",{\"1\":{\"553\":1}}],[\"但是这样代码复杂且开销特别高\",{\"1\":{\"516\":1}}],[\"但是这样写会显得十分复杂\",{\"1\":{\"337\":1}}],[\"但是这毫无意义\",{\"1\":{\"340\":1}}],[\"但是导出的go函数返回值不能带指针\",{\"1\":{\"300\":1}}],[\"但是和接口一起使用后\",{\"1\":{\"287\":1}}],[\"但是我们可以调整字段\",{\"1\":{\"273\":1}}],[\"但是在有些场景下\",{\"1\":{\"780\":1}}],[\"但是在web并发下不好处理了\",{\"1\":{\"546\":1}}],[\"但是在编译时却不会有任何的报错\",{\"1\":{\"272\":1}}],[\"但是在后续赋值时\",{\"1\":{\"206\":1}}],[\"但是go依旧有着oop的影子\",{\"1\":{\"266\":1}}],[\"但是go1\",{\"1\":{\"264\":1}}],[\"但是map的键正是无序且不能重复的\",{\"1\":{\"265\":1}}],[\"但是官方认为没有必要去修改\",{\"1\":{\"261\":1}}],[\"但是也存在一个特殊情况\",{\"1\":{\"261\":1}}],[\"但是实际求得的长度却比英文字符串长\",{\"1\":{\"255\":1}}],[\"但是实际上git\",{\"1\":{\"9\":1}}],[\"但是字节切片是可以修改的\",{\"1\":{\"254\":1}}],[\"但是拓展表达式只有切片能够使用\",{\"1\":{\"250\":1}}],[\"但是遇到换行停止扫描\",{\"1\":{\"224\":1}}],[\"但是专用于存放指针运算\",{\"1\":{\"197\":1}}],[\"但是就同一般秘钥会被截取\",{\"1\":{\"85\":1}}],[\"但是还有一些操作比如\",{\"1\":{\"1010\":1}}],[\"但是还存在局限\",{\"1\":{\"1005\":1}}],[\"但是还是要多思考\",{\"1\":{\"79\":1}}],[\"但是还没有提交\",{\"1\":{\"22\":1}}],[\"但是正常情况下\",{\"1\":{\"79\":1}}],[\"但是你可以设置每页显示数据的大小\",{\"1\":{\"861\":1}}],[\"但是你\",{\"1\":{\"53\":1}}],[\"但是本地文件并不删除\",{\"1\":{\"27\":1}}],[\"但是不允许同时出现相同端口和相同域名\",{\"1\":{\"1130\":1}}],[\"但是不断的循环对于cpu而言依旧是一个不小的开销\",{\"1\":{\"440\":1}}],[\"但是不会输出任何的错误信息\",{\"1\":{\"397\":1}}],[\"但是不会造成任何影响\",{\"1\":{\"286\":1}}],[\"但是不建议使用\",{\"1\":{\"383\":1}}],[\"但是不删除本地\",{\"0\":{\"27\":1}}],[\"但是不管用\",{\"1\":{\"12\":1}}],[\"但那是付费的\",{\"1\":{\"12\":1}}],[\"但linux的壮大是靠全世界热心的志愿者参与的\",{\"1\":{\"12\":1}}],[\"lmsgprefix\",{\"1\":{\"1341\":2}}],[\"lmicroseconds\",{\"1\":{\"1341\":2}}],[\"lrt\",{\"1\":{\"1081\":1}}],[\"lrem\",{\"1\":{\"937\":1,\"971\":1}}],[\"lrange\",{\"1\":{\"936\":1,\"971\":1}}],[\"lru\",{\"1\":{\"122\":2,\"454\":1,\"611\":1,\"635\":1,\"683\":1}}],[\"lpop\",{\"1\":{\"936\":1,\"971\":1,\"985\":1}}],[\"lpushx\",{\"1\":{\"971\":1}}],[\"lpush\",{\"1\":{\"934\":1,\"971\":1}}],[\"lvm2\",{\"1\":{\"774\":1,\"1220\":1}}],[\"ltime\",{\"1\":{\"1341\":3}}],[\"ltrim\",{\"1\":{\"937\":2,\"971\":1}}],[\"lt\",{\"1\":{\"759\":1,\"1412\":3,\"1420\":2}}],[\"lte\",{\"1\":{\"724\":5,\"759\":1}}],[\"lz4\",{\"1\":{\"636\":1}}],[\"lzw\",{\"1\":{\"124\":1}}],[\"lutc\",{\"1\":{\"1341\":1}}],[\"lumberjacklogger\",{\"1\":{\"1307\":2}}],[\"lumberjack\",{\"0\":{\"1307\":1},\"1\":{\"1304\":2,\"1307\":8}}],[\"luogang\",{\"1\":{\"858\":2,\"859\":2,\"860\":1}}],[\"lucene可以被认为是迄今为止最先进\",{\"1\":{\"735\":1}}],[\"lucene\",{\"1\":{\"702\":1,\"735\":1}}],[\"lukechampine\",{\"1\":{\"460\":1}}],[\"lua\",{\"1\":{\"130\":4,\"1078\":2,\"1238\":1}}],[\"lua绑定库\",{\"1\":{\"130\":1}}],[\"lua的\",{\"1\":{\"130\":1}}],[\"lshortfile\",{\"1\":{\"1341\":2}}],[\"lset\",{\"1\":{\"934\":1,\"971\":1}}],[\"lstdflags\",{\"1\":{\"756\":2,\"771\":2,\"1341\":1}}],[\"lsonindex\",{\"1\":{\"344\":10}}],[\"ls\",{\"1\":{\"312\":1,\"453\":1,\"457\":2,\"460\":2,\"463\":1,\"1081\":1,\"1197\":3}}],[\"lsit\",{\"1\":{\"124\":1}}],[\"l指的是库文件的名称\",{\"1\":{\"312\":1}}],[\"l指的是库搜索路径\",{\"1\":{\"312\":1}}],[\"l$\",{\"1\":{\"312\":1,\"313\":1}}],[\"lft\",{\"1\":{\"1194\":14,\"1195\":12}}],[\"lfu\",{\"1\":{\"635\":1}}],[\"lf\",{\"1\":{\"305\":1}}],[\"ldate\",{\"1\":{\"1341\":3}}],[\"ldflags\",{\"1\":{\"312\":1,\"313\":1}}],[\"ld\",{\"1\":{\"304\":2}}],[\"l\",{\"1\":{\"239\":2,\"258\":7,\"306\":5,\"317\":3,\"318\":1,\"319\":1,\"320\":2,\"400\":2,\"421\":3,\"432\":1,\"449\":1,\"813\":1,\"1175\":1,\"1340\":2,\"1341\":2}}],[\"llongfile\",{\"1\":{\"1341\":1}}],[\"llen\",{\"1\":{\"935\":1,\"971\":1}}],[\"llibsum\",{\"1\":{\"312\":1,\"313\":1}}],[\"llb\",{\"1\":{\"145\":1}}],[\"llgo\",{\"1\":{\"136\":1}}],[\"lhttp\",{\"1\":{\"145\":1}}],[\"ln10\",{\"1\":{\"1345\":2}}],[\"ln2\",{\"1\":{\"1345\":2}}],[\"ln\",{\"1\":{\"139\":1}}],[\"latency\",{\"1\":{\"1003\":1}}],[\"latest后缀\",{\"1\":{\"453\":1}}],[\"latest\",{\"1\":{\"448\":2,\"450\":2,\"453\":1,\"454\":1,\"1076\":1,\"1077\":1,\"1184\":3,\"1194\":3}}],[\"latitude\",{\"1\":{\"730\":1}}],[\"lat\",{\"1\":{\"730\":3}}],[\"laravel的依赖注入\",{\"1\":{\"595\":1,\"667\":1}}],[\"laravel\",{\"1\":{\"595\":1,\"667\":1,\"1238\":1}}],[\"largefile\",{\"1\":{\"633\":2}}],[\"large\",{\"1\":{\"319\":1}}],[\"lastsave\",{\"1\":{\"981\":2}}],[\"lastindexany\",{\"1\":{\"1404\":2}}],[\"lastindex\",{\"1\":{\"1404\":2}}],[\"lastinsertid\",{\"1\":{\"894\":1}}],[\"lasticsearch的查询语法比较丰富\",{\"1\":{\"755\":1}}],[\"last会被平铺为多值字段\",{\"1\":{\"728\":1}}],[\"last\",{\"1\":{\"728\":3,\"729\":3,\"743\":2,\"823\":1,\"1133\":1}}],[\"lastwritetime\",{\"1\":{\"400\":1}}],[\"lastaccesstime\",{\"1\":{\"400\":1}}],[\"labels\",{\"1\":{\"1197\":1,\"1215\":5}}],[\"label\",{\"0\":{\"231\":1}}],[\"layer的\",{\"1\":{\"134\":1}}],[\"lannister\",{\"1\":{\"733\":1}}],[\"landon\",{\"1\":{\"124\":1}}],[\"language即可\",{\"1\":{\"1133\":1}}],[\"language\",{\"1\":{\"266\":1,\"268\":1,\"272\":2,\"296\":1,\"1133\":1,\"1310\":1,\"1408\":8}}],[\"lang中的模式识别包\",{\"1\":{\"142\":1}}],[\"lang\",{\"1\":{\"122\":1,\"1423\":3}}],[\"le\",{\"1\":{\"1420\":2}}],[\"leechenxiang\",{\"1\":{\"1175\":1}}],[\"leetcode\",{\"1\":{\"611\":1,\"683\":1}}],[\"leetcode72\",{\"1\":{\"606\":1,\"678\":1}}],[\"leetcode234\",{\"1\":{\"606\":1,\"678\":1}}],[\"leetcode16\",{\"1\":{\"606\":1,\"678\":1}}],[\"leetcode141\",{\"1\":{\"585\":1,\"657\":1}}],[\"least\",{\"0\":{\"1167\":1},\"1\":{\"1160\":1,\"1167\":2}}],[\"leaky\",{\"1\":{\"1150\":1}}],[\"leader所在的broker挂了\",{\"1\":{\"1064\":1}}],[\"leader发送成功和所有的副本都完成备份\",{\"1\":{\"1024\":1}}],[\"leader收到所有的follower的ack之后向生产者发送ack\",{\"1\":{\"1022\":1}}],[\"leader收到所有follower同步的消息\",{\"1\":{\"1021\":1}}],[\"leader将消息写入本地磁盘\",{\"1\":{\"1022\":1}}],[\"leader在本地记录该消息\",{\"1\":{\"1021\":1}}],[\"leader\",{\"1\":{\"1003\":1,\"1020\":2,\"1034\":3,\"1064\":1}}],[\"leaf\",{\"1\":{\"134\":1,\"333\":1}}],[\"left\",{\"1\":{\"730\":1,\"813\":1,\"814\":1}}],[\"letter++\",{\"1\":{\"633\":1}}],[\"letter\",{\"1\":{\"633\":4}}],[\"levelenabler\",{\"1\":{\"1302\":2,\"1305\":1,\"1306\":9}}],[\"levelencoder\",{\"1\":{\"1302\":3,\"1303\":1}}],[\"leveled\",{\"1\":{\"1299\":1}}],[\"levelkey\",{\"1\":{\"1302\":3,\"1303\":2}}],[\"level=debug\",{\"1\":{\"1076\":1}}],[\"level\",{\"1\":{\"476\":3,\"1151\":3,\"1152\":2,\"1302\":3,\"1303\":8,\"1305\":1}}],[\"levenshtein距离和相似性度量标准\",{\"1\":{\"127\":1}}],[\"levenshtein\",{\"1\":{\"127\":2}}],[\"leodido\",{\"1\":{\"453\":2,\"459\":1}}],[\"less\",{\"1\":{\"209\":1,\"344\":1,\"649\":2,\"1375\":2,\"1380\":1}}],[\"lempel\",{\"1\":{\"124\":1}}],[\"length即可\",{\"1\":{\"1133\":1}}],[\"length是一个变量\",{\"1\":{\"239\":1}}],[\"length\",{\"1\":{\"239\":5,\"303\":2,\"733\":2,\"863\":2,\"1133\":4}}],[\"len\",{\"1\":{\"5\":3,\"211\":1,\"240\":1,\"244\":1,\"246\":1,\"248\":1,\"249\":1,\"254\":1,\"255\":2,\"256\":1,\"258\":4,\"260\":1,\"285\":3,\"303\":2,\"306\":3,\"343\":1,\"344\":1,\"375\":1,\"395\":1,\"398\":1,\"401\":4,\"417\":1,\"434\":3,\"477\":6,\"516\":1,\"537\":1,\"556\":1,\"649\":5,\"653\":2,\"766\":6,\"814\":1,\"863\":2,\"1321\":3,\"1375\":1,\"1380\":2,\"1411\":1,\"1420\":2,\"1444\":3,\"1445\":2,\"1446\":2,\"1447\":1,\"1448\":2}}],[\"loss\",{\"1\":{\"1195\":2,\"1196\":1,\"1197\":3}}],[\"lost\",{\"1\":{\"776\":1}}],[\"lo\",{\"1\":{\"1194\":4,\"1195\":2}}],[\"lon\",{\"1\":{\"730\":3}}],[\"longitude\",{\"1\":{\"730\":1}}],[\"longstringlongstringlongstringlongstringlongstringlongstringlongstringlongstring\",{\"1\":{\"475\":1}}],[\"longstring\",{\"1\":{\"475\":7}}],[\"longer\",{\"1\":{\"470\":1}}],[\"longlong\",{\"1\":{\"304\":2}}],[\"long\",{\"1\":{\"304\":11,\"704\":2,\"705\":1,\"720\":1,\"724\":1,\"813\":3}}],[\"loadlocation\",{\"1\":{\"1432\":1}}],[\"loading\",{\"1\":{\"993\":1}}],[\"loadint64\",{\"1\":{\"439\":1,\"440\":1}}],[\"loadbalancer\",{\"1\":{\"655\":2}}],[\"loadanddelete\",{\"1\":{\"436\":2}}],[\"loaded的值取决于key是否存在\",{\"1\":{\"436\":1}}],[\"loaded\",{\"1\":{\"436\":2}}],[\"loaded为true\",{\"1\":{\"436\":1}}],[\"loadorstore\",{\"1\":{\"436\":2,\"558\":1}}],[\"load\",{\"1\":{\"435\":1,\"436\":2,\"439\":2,\"441\":2,\"558\":1,\"1164\":1,\"1222\":1}}],[\"loaduint32\",{\"1\":{\"434\":1}}],[\"loopback\",{\"1\":{\"1194\":2,\"1195\":1,\"1196\":1}}],[\"loop\",{\"1\":{\"421\":2,\"821\":1,\"1424\":3}}],[\"looklook\",{\"1\":{\"330\":1}}],[\"lookupmx\",{\"1\":{\"1373\":1}}],[\"lookuphost\",{\"1\":{\"1373\":1}}],[\"lookup支持的参数如下面代码所示\",{\"1\":{\"323\":1}}],[\"lookup\",{\"1\":{\"323\":1,\"369\":2}}],[\"lowercase\",{\"1\":{\"1303\":1}}],[\"lower\",{\"1\":{\"1194\":4,\"1195\":5}}],[\"lowdatetime\",{\"1\":{\"400\":3}}],[\"low与high依旧是原来的含义不变\",{\"1\":{\"250\":1}}],[\"low\",{\"1\":{\"250\":3,\"742\":1}}],[\"loc\",{\"1\":{\"1429\":1}}],[\"located\",{\"1\":{\"742\":1}}],[\"location其实就和springmvc的路由规则是类似的\",{\"1\":{\"1141\":1}}],[\"location\",{\"1\":{\"726\":4,\"730\":5,\"743\":1,\"745\":1,\"746\":3,\"1123\":2,\"1130\":3,\"1131\":3,\"1133\":1,\"1135\":1,\"1136\":4,\"1139\":2,\"1141\":2,\"1142\":3,\"1143\":4,\"1144\":2,\"1151\":4,\"1152\":4,\"1154\":1,\"1155\":1,\"1156\":1,\"1157\":1,\"1158\":3,\"1160\":3,\"1164\":2,\"1280\":3,\"1429\":1,\"1432\":2}}],[\"localtime\",{\"1\":{\"1304\":1,\"1307\":4}}],[\"localtion\",{\"1\":{\"1135\":1}}],[\"localnet\",{\"1\":{\"1196\":1}}],[\"locally\",{\"1\":{\"1194\":1}}],[\"local目录下\",{\"1\":{\"1028\":1,\"1029\":1}}],[\"localhost\",{\"1\":{\"736\":1,\"739\":1,\"741\":1,\"768\":2,\"769\":2,\"770\":4,\"814\":1,\"851\":1,\"852\":1,\"1081\":1,\"1123\":1,\"1130\":2,\"1131\":2,\"1136\":1,\"1141\":1,\"1142\":1,\"1143\":1,\"1144\":1,\"1158\":1,\"1160\":1,\"1166\":4,\"1196\":3,\"1281\":3,\"1282\":1,\"1283\":1,\"1314\":2,\"1335\":1}}],[\"localstorage\",{\"1\":{\"641\":3}}],[\"locales\",{\"1\":{\"453\":2,\"459\":1}}],[\"local\",{\"1\":{\"84\":1,\"965\":1,\"1028\":5,\"1029\":2,\"1030\":1,\"1031\":3,\"1032\":3,\"1033\":1,\"1034\":1,\"1078\":1,\"1116\":11,\"1121\":1,\"1122\":1,\"1123\":1,\"1130\":1,\"1131\":1,\"1132\":1,\"1133\":1,\"1139\":1,\"1158\":1,\"1163\":2,\"1171\":1,\"1173\":1,\"1174\":1,\"1175\":1,\"1197\":8}}],[\"lock=0\",{\"1\":{\"813\":1}}],[\"locker等\",{\"1\":{\"433\":1}}],[\"locker\",{\"1\":{\"430\":1,\"432\":2}}],[\"locker接口\",{\"1\":{\"430\":1}}],[\"lock\",{\"1\":{\"128\":1,\"417\":5,\"429\":3,\"430\":5,\"431\":2,\"432\":2,\"434\":1,\"440\":4,\"457\":1,\"460\":3,\"514\":1,\"556\":2,\"557\":1,\"635\":1,\"649\":2,\"654\":2,\"1116\":3,\"1132\":3,\"1164\":1,\"1173\":3,\"1304\":1}}],[\"log10e\",{\"1\":{\"1345\":1}}],[\"log2e\",{\"1\":{\"1345\":1}}],[\"logrotate\",{\"1\":{\"1184\":2}}],[\"logrus\",{\"1\":{\"122\":1}}],[\"login\",{\"1\":{\"1136\":2,\"1142\":3,\"1193\":1}}],[\"logmain\",{\"1\":{\"1131\":2}}],[\"log中\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"log的格式是main格式\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"loglevel\",{\"1\":{\"965\":1}}],[\"loglog\",{\"1\":{\"127\":1}}],[\"logappend\",{\"1\":{\"852\":1}}],[\"logpath=d\",{\"1\":{\"852\":1}}],[\"logpath\",{\"1\":{\"851\":1,\"852\":1}}],[\"log=\",{\"1\":{\"1077\":4}}],[\"log=edu\",{\"1\":{\"822\":2}}],[\"log=1\",{\"1\":{\"813\":2}}],[\"log配置中继日志\",{\"1\":{\"822\":2}}],[\"logs\",{\"1\":{\"775\":1,\"825\":1,\"1028\":1,\"1029\":1,\"1130\":6,\"1131\":5,\"1141\":1,\"1158\":5,\"1160\":1,\"1174\":1,\"1189\":1}}],[\"logstash\",{\"1\":{\"637\":1}}],[\"logfileconfig\",{\"1\":{\"1303\":3}}],[\"logfile\",{\"1\":{\"965\":1,\"1303\":4,\"1304\":4}}],[\"logf\",{\"1\":{\"471\":1,\"477\":2}}],[\"logging\",{\"1\":{\"454\":1,\"1299\":1}}],[\"logger上\",{\"1\":{\"1307\":1}}],[\"logger\",{\"1\":{\"453\":1,\"1301\":7,\"1302\":4,\"1303\":6,\"1304\":3,\"1306\":1,\"1307\":9,\"1340\":2,\"1341\":3}}],[\"log草图\",{\"1\":{\"127\":1}}],[\"log\",{\"0\":{\"1339\":1},\"1\":{\"124\":2,\"127\":1,\"279\":1,\"323\":6,\"449\":1,\"454\":1,\"471\":5,\"472\":1,\"473\":5,\"504\":1,\"633\":5,\"639\":2,\"756\":5,\"766\":1,\"771\":4,\"813\":6,\"820\":2,\"822\":10,\"825\":9,\"830\":2,\"833\":1,\"834\":4,\"835\":2,\"836\":4,\"837\":2,\"838\":3,\"852\":4,\"855\":5,\"857\":1,\"858\":1,\"910\":2,\"1019\":1,\"1026\":2,\"1029\":10,\"1055\":1,\"1076\":1,\"1078\":1,\"1116\":18,\"1130\":13,\"1131\":14,\"1132\":6,\"1133\":2,\"1141\":2,\"1151\":3,\"1152\":2,\"1158\":9,\"1160\":2,\"1164\":6,\"1173\":6,\"1174\":12,\"1245\":2,\"1280\":1,\"1302\":4,\"1303\":2,\"1307\":10,\"1308\":1,\"1339\":3,\"1340\":3,\"1341\":8,\"1356\":4,\"1368\":2,\"1413\":1}}],[\"live\",{\"1\":{\"967\":2}}],[\"lisa\",{\"1\":{\"985\":2}}],[\"lisi\",{\"1\":{\"857\":1}}],[\"lists\",{\"1\":{\"957\":1}}],[\"listings\",{\"1\":{\"326\":1}}],[\"listener\",{\"1\":{\"1374\":3}}],[\"listeners\",{\"1\":{\"1029\":1}}],[\"listeners=plaintext\",{\"1\":{\"1029\":1}}],[\"listenstream=\",{\"1\":{\"1223\":1}}],[\"listen=0\",{\"1\":{\"1077\":1}}],[\"listening\",{\"1\":{\"328\":1,\"453\":1}}],[\"listenandserve\",{\"1\":{\"324\":2,\"1335\":1,\"1336\":1,\"1337\":2,\"1338\":1}}],[\"listen\",{\"1\":{\"84\":3,\"1078\":2,\"1123\":1,\"1130\":2,\"1131\":2,\"1136\":2,\"1141\":1,\"1142\":1,\"1143\":1,\"1144\":1,\"1158\":1,\"1160\":2,\"1374\":1}}],[\"list\",{\"1\":{\"55\":1,\"77\":1,\"326\":1,\"456\":1,\"457\":1,\"460\":1,\"468\":1,\"469\":1,\"580\":1,\"638\":1,\"651\":2,\"652\":1,\"810\":4,\"893\":3,\"934\":5,\"935\":1,\"936\":4,\"937\":3,\"961\":1,\"969\":1,\"1034\":4,\"1047\":1,\"1081\":1,\"1166\":2,\"1197\":1,\"1226\":1,\"1308\":1}}],[\"little\",{\"1\":{\"651\":1}}],[\"literal\",{\"1\":{\"317\":1,\"318\":1,\"320\":1}}],[\"like以通配符开头\",{\"1\":{\"818\":1}}],[\"like\",{\"1\":{\"641\":1,\"813\":4,\"817\":1,\"818\":1,\"820\":1,\"861\":2,\"1107\":1,\"1238\":1}}],[\"lifo\",{\"1\":{\"633\":1,\"634\":1,\"651\":1}}],[\"liftbridge\",{\"1\":{\"128\":1}}],[\"limitcore=infinity\",{\"1\":{\"1223\":1}}],[\"limitnproc=infinity\",{\"1\":{\"1223\":1}}],[\"limitnofile=infinity\",{\"1\":{\"1223\":1}}],[\"limiting\",{\"1\":{\"1078\":1}}],[\"limit是pagesize\",{\"1\":{\"861\":1}}],[\"limit位置不对\",{\"1\":{\"653\":1}}],[\"limit\",{\"0\":{\"1151\":1,\"1152\":1},\"1\":{\"581\":1,\"653\":2,\"820\":15,\"834\":1,\"861\":3,\"974\":2,\"1150\":2,\"1151\":13,\"1152\":13,\"1154\":4,\"1155\":2,\"1156\":2,\"1157\":3,\"1158\":12}}],[\"license\",{\"1\":{\"457\":1,\"463\":1}}],[\"lili\",{\"1\":{\"270\":2,\"317\":1,\"338\":1,\"344\":3,\"835\":1,\"836\":2,\"838\":1}}],[\"lihua\",{\"1\":{\"221\":3}}],[\"lindex\",{\"1\":{\"936\":1,\"971\":1}}],[\"linsertafter\",{\"1\":{\"934\":1}}],[\"linsertbefore\",{\"1\":{\"934\":1}}],[\"link在启动容器的时候连接到另一个容器网络中\",{\"1\":{\"1196\":1}}],[\"link\",{\"1\":{\"1194\":7,\"1195\":11,\"1196\":2,\"1197\":1}}],[\"linkedin使用kafka实现了公司不同应用程序之间的松耦和\",{\"1\":{\"1017\":1}}],[\"linkedlist\",{\"1\":{\"638\":1}}],[\"linkio\",{\"1\":{\"145\":1}}],[\"lineending\",{\"1\":{\"1302\":3,\"1303\":1}}],[\"liner\",{\"1\":{\"454\":1}}],[\"line\",{\"1\":{\"226\":9,\"468\":1,\"471\":3,\"472\":1,\"633\":2,\"817\":2}}],[\"linux是一个多用户系统\",{\"1\":{\"1223\":1}}],[\"linux操作系统\",{\"1\":{\"1009\":1}}],[\"linux下安装redis服务\",{\"0\":{\"964\":1}}],[\"linux相关命令和场景\",{\"1\":{\"616\":1,\"688\":1}}],[\"linux查看网络io的命令\",{\"1\":{\"614\":1,\"686\":1}}],[\"linux如何查看cpu\",{\"1\":{\"613\":1,\"685\":1}}],[\"linux如何分割文件\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"linux桌面应用程序\",{\"1\":{\"138\":1}}],[\"linux采用了elf格式\",{\"1\":{\"124\":1}}],[\"linux\",{\"1\":{\"12\":1,\"138\":3,\"153\":1,\"498\":1,\"619\":1,\"633\":1,\"691\":1,\"774\":1,\"986\":1,\"987\":1,\"1001\":1,\"1184\":2,\"1195\":2,\"1221\":1}}],[\"linux系统默认使用epoll\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"linux系统\",{\"1\":{\"986\":1}}],[\"linux系统的源码已经由git管理了\",{\"1\":{\"12\":1}}],[\"linux系统已经发展了十年了\",{\"1\":{\"12\":1}}],[\"linux系统不断发展\",{\"1\":{\"12\":1}}],[\"linus虽然创建了linux\",{\"1\":{\"12\":1}}],[\"linus在1991年创建了开源的linux\",{\"1\":{\"12\":1}}],[\"linus\",{\"1\":{\"12\":3}}],[\"libtool\",{\"1\":{\"1112\":1}}],[\"libtextcat\",{\"1\":{\"144\":2}}],[\"libsum\",{\"1\":{\"312\":2,\"313\":1}}],[\"libsvm的golang版本衍生作品\",{\"1\":{\"142\":1}}],[\"libsvm\",{\"1\":{\"142\":1}}],[\"libvlc\",{\"1\":{\"146\":2}}],[\"libgosubs\",{\"1\":{\"146\":1}}],[\"libpcap的包装器\",{\"1\":{\"145\":1}}],[\"libxlsxwriter的golang绑定\",{\"1\":{\"143\":1}}],[\"libappindicator3\",{\"1\":{\"138\":1}}],[\"library\",{\"1\":{\"73\":1,\"393\":2,\"1194\":1,\"1238\":1}}],[\"lib\",{\"1\":{\"28\":2,\"312\":4,\"313\":2,\"813\":2,\"1032\":1,\"1184\":2,\"1223\":2}}],[\"托瓦兹\",{\"1\":{\"12\":1}}],[\"林纳斯\",{\"1\":{\"12\":1}}],[\"不包括其引用内容的大小\",{\"1\":{\"1440\":1}}],[\"不包含location指定的值了\",{\"1\":{\"1139\":1}}],[\"不包含主机名\",{\"1\":{\"1133\":1}}],[\"不包含任何方法的接口\",{\"1\":{\"516\":1}}],[\"不包含重复元素的集合\",{\"1\":{\"265\":1}}],[\"不一定非得去访问根对象来获取值\",{\"1\":{\"1417\":1}}],[\"不一致会自动进行数据类型隐式转换\",{\"1\":{\"794\":1}}],[\"不匹配就会返回字符串s\",{\"1\":{\"1410\":2}}],[\"不采用官方的直接反序列化\",{\"1\":{\"1303\":1}}],[\"不知道这行日志是哪里输出的\",{\"1\":{\"1303\":1}}],[\"不知道为什么没有并入标准库\",{\"1\":{\"393\":1}}],[\"不配置网络\",{\"1\":{\"1197\":1}}],[\"不退出仅退出\",{\"1\":{\"1189\":1}}],[\"不便于运维人员查看\",{\"1\":{\"1174\":1}}],[\"不为空则寻找第一个大于用户hash的key\",{\"1\":{\"1165\":1}}],[\"不为空且唯一\",{\"1\":{\"809\":1}}],[\"不写consumer就是全局\",{\"1\":{\"1096\":1}}],[\"不适用\",{\"1\":{\"1057\":1}}],[\"不适合建立索引\",{\"1\":{\"811\":1}}],[\"不成熟\",{\"1\":{\"1054\":1}}],[\"不然到时候发生错误的话都没法排查\",{\"1\":{\"1303\":1}}],[\"不然可能网络无法使用\",{\"1\":{\"1219\":1}}],[\"不然通道会被堵塞\",{\"1\":{\"1047\":1}}],[\"不然会有坑\",{\"1\":{\"515\":1}}],[\"不然会找不到\",{\"1\":{\"313\":1}}],[\"不具备自动容错和恢复功能\",{\"1\":{\"990\":1}}],[\"不在指定区间之内的元素都将被删除\",{\"1\":{\"971\":1}}],[\"不在数据库里存图片\",{\"0\":{\"792\":1}}],[\"不加条件删除所有记录\",{\"1\":{\"860\":1}}],[\"不加盐的问题\",{\"1\":{\"572\":1,\"644\":1}}],[\"不输出\",{\"1\":{\"822\":3}}],[\"不重复的索引值和表的记录数的比值\",{\"1\":{\"815\":1}}],[\"不存数据\",{\"1\":{\"805\":1}}],[\"不存在\",{\"1\":{\"1185\":2}}],[\"不存在时设置\",{\"1\":{\"970\":1}}],[\"不存在时\",{\"1\":{\"967\":1,\"972\":1}}],[\"不存在非主属性只依赖部分主键\",{\"1\":{\"789\":1}}],[\"不存在就存储k\",{\"1\":{\"558\":1}}],[\"不存在nil\",{\"1\":{\"528\":1}}],[\"不存在隐式类型转换\",{\"1\":{\"385\":1}}],[\"不准跨库\",{\"1\":{\"794\":1}}],[\"不建议关闭\",{\"1\":{\"983\":1}}],[\"不建议直接p后接密码\",{\"1\":{\"776\":1}}],[\"不建议c长期持有其指针引用\",{\"1\":{\"306\":1}}],[\"不熟悉es查询语法\",{\"1\":{\"762\":1}}],[\"不以默认的方式存储\",{\"1\":{\"723\":1}}],[\"不分词\",{\"1\":{\"717\":1}}],[\"不再索引列上做任何操作\",{\"1\":{\"818\":1}}],[\"不再支持\",{\"0\":{\"717\":1}}],[\"不再为linux\",{\"1\":{\"12\":1}}],[\"不提供运行时类型信息\",{\"1\":{\"645\":1}}],[\"不提交和上一个版本比较差异\",{\"0\":{\"23\":1}}],[\"不依赖操作系统\",{\"1\":{\"645\":1,\"649\":1}}],[\"不立即删除缓存\",{\"1\":{\"644\":1}}],[\"不立即删除\",{\"1\":{\"641\":1}}],[\"不允许为空\",{\"1\":{\"1289\":1}}],[\"不允许全表扫描\",{\"1\":{\"852\":1}}],[\"不允许重复元素\",{\"1\":{\"638\":1}}],[\"不允许脏读和不可重复读\",{\"1\":{\"634\":1}}],[\"不允许脏读\",{\"1\":{\"634\":1}}],[\"不通过数量控制的方案可以使用\",{\"1\":{\"638\":1}}],[\"不像数组那样大小固定\",{\"1\":{\"649\":1}}],[\"不像b站外包用到这么多技术\",{\"1\":{\"615\":1,\"687\":1}}],[\"不像其它语言通常会有一个enum来表示\",{\"1\":{\"213\":1}}],[\"不使用索引\",{\"1\":{\"633\":1}}],[\"不使用索引下推\",{\"1\":{\"614\":1,\"686\":1}}],[\"不使用协程呢\",{\"1\":{\"609\":1,\"681\":1}}],[\"不被其它事务修改\",{\"1\":{\"614\":1,\"686\":1}}],[\"不被允许\",{\"1\":{\"339\":2}}],[\"不安全\",{\"1\":{\"580\":1,\"652\":1,\"987\":1}}],[\"不把用户id放到threadlocal可以吗\",{\"1\":{\"569\":1,\"641\":2}}],[\"不进行替换\",{\"1\":{\"1405\":1}}],[\"不进行合理排序\",{\"1\":{\"554\":1}}],[\"不进行初始化\",{\"1\":{\"532\":1}}],[\"不进行gosumdb公共校验的模块路径前缀的通用模式列表\",{\"1\":{\"461\":1}}],[\"不用其他任何配置只要kubectl即可\",{\"1\":{\"1233\":1}}],[\"不用扫描全部索引\",{\"1\":{\"814\":1}}],[\"不用\",{\"1\":{\"637\":1}}],[\"不用kafka可以吗\",{\"1\":{\"565\":1,\"637\":1}}],[\"不用共享内存来通信\",{\"1\":{\"535\":1}}],[\"不用显示声明\",{\"1\":{\"516\":1}}],[\"不用修改接受者内部的值\",{\"1\":{\"515\":1}}],[\"不用自己搭建环境\",{\"1\":{\"43\":1}}],[\"不推荐\",{\"1\":{\"513\":1,\"786\":2}}],[\"不得不惊叹于\",{\"1\":{\"505\":1}}],[\"不计入基准测试耗时中\",{\"1\":{\"499\":1}}],[\"不实现具体的功能\",{\"1\":{\"491\":1}}],[\"不从代理中下载的模块路径前缀的通用模式列表\",{\"1\":{\"461\":1}}],[\"不应该依赖retract所指定依赖的版本或版本范围\",{\"1\":{\"459\":1}}],[\"不应该将其作为值传递和存储\",{\"1\":{\"431\":1}}],[\"不应该使用==操作符\",{\"1\":{\"393\":1}}],[\"不传递任何数据\",{\"1\":{\"424\":1}}],[\"不\",{\"1\":{\"412\":1}}],[\"不受操作系统直接调度\",{\"1\":{\"412\":1}}],[\"不受干扰\",{\"1\":{\"210\":1}}],[\"不处理就返回\",{\"1\":{\"388\":1}}],[\"不严谨的说\",{\"1\":{\"348\":1}}],[\"不可变的消息队列\",{\"1\":{\"1018\":1}}],[\"不可多个redis实例共享\",{\"1\":{\"965\":1}}],[\"不可能都放在内存中\",{\"1\":{\"805\":1}}],[\"不可能返回具体的类型\",{\"1\":{\"343\":1}}],[\"不可靠的协议\",{\"1\":{\"651\":1}}],[\"不可为空\",{\"1\":{\"641\":1}}],[\"不可达即垃圾\",{\"1\":{\"551\":1}}],[\"不可用\",{\"1\":{\"534\":1}}],[\"不可预知\",{\"1\":{\"435\":1}}],[\"不可以直接使用\",{\"1\":{\"413\":1}}],[\"不可控的因素非常多\",{\"1\":{\"412\":1}}],[\"不可比较\",{\"1\":{\"294\":2}}],[\"不论是基本接口\",{\"1\":{\"341\":1}}],[\"不指定类型\",{\"1\":{\"337\":1}}],[\"不要试图将builder作为值进行传递\",{\"1\":{\"1411\":1}}],[\"不要过度设计\",{\"1\":{\"1005\":1}}],[\"不要超过5个表\",{\"1\":{\"796\":1}}],[\"不要写成insert\",{\"1\":{\"796\":1}}],[\"不要使用\",{\"1\":{\"794\":1}}],[\"不要为了泛型而泛型\",{\"1\":{\"516\":1}}],[\"不要在项目中引入cgo\",{\"1\":{\"314\":1}}],[\"不要直接在桌面上操作\",{\"1\":{\"18\":1}}],[\"不会改变\",{\"1\":{\"1183\":1}}],[\"不会导致不可用\",{\"1\":{\"1055\":1}}],[\"不会丢失数据\",{\"1\":{\"1055\":1}}],[\"不会丢失任何已经完成的操作的命令数据\",{\"1\":{\"987\":1}}],[\"不会因为堆积导致性能下降\",{\"1\":{\"1054\":1}}],[\"不会阻塞服务器\",{\"1\":{\"988\":1}}],[\"不会对redis本身做任何讲解\",{\"1\":{\"908\":1}}],[\"不会感觉到性能的影响\",{\"1\":{\"820\":1}}],[\"不会达到22亿上限\",{\"1\":{\"791\":1}}],[\"不会直接从数据库获取\",{\"1\":{\"641\":1}}],[\"不会\",{\"1\":{\"580\":3,\"652\":3}}],[\"不会执行\",{\"1\":{\"514\":1}}],[\"不会执行任何善后工作\",{\"1\":{\"398\":1}}],[\"不会运行任何基准测试\",{\"1\":{\"496\":1}}],[\"不会被go执行\",{\"1\":{\"470\":1}}],[\"不会被其他的任何协程打断\",{\"1\":{\"437\":1}}],[\"不会开始新的测试\",{\"1\":{\"469\":1}}],[\"不会触发当前协程的善后工作\",{\"1\":{\"396\":1}}],[\"不会冲突\",{\"1\":{\"301\":1}}],[\"不会合并到工作区\",{\"1\":{\"58\":1}}],[\"不影响之前的使用\",{\"1\":{\"293\":1}}],[\"不考虑复用的话\",{\"1\":{\"281\":1}}],[\"不带请求参数\",{\"1\":{\"1133\":1}}],[\"不带返回值即可\",{\"1\":{\"280\":1}}],[\"不带参数进行切片即可\",{\"1\":{\"241\":1}}],[\"不定长参数根据传入类型的不同而不同\",{\"1\":{\"277\":1}}],[\"不是$\",{\"1\":{\"1152\":1}}],[\"不是集群\",{\"1\":{\"1029\":1}}],[\"不是具体记录数\",{\"1\":{\"814\":1}}],[\"不是安全的\",{\"1\":{\"595\":1,\"667\":1}}],[\"不是垃圾\",{\"1\":{\"551\":1}}],[\"不是指针\",{\"1\":{\"277\":1,\"654\":1}}],[\"不是数组\",{\"1\":{\"239\":1}}],[\"不占用内存空间\",{\"1\":{\"274\":1}}],[\"不足的则补齐\",{\"1\":{\"273\":1}}],[\"不想要第二个\",{\"1\":{\"207\":1}}],[\"不能为空并且大于10\",{\"1\":{\"1289\":1}}],[\"不能为null\",{\"1\":{\"810\":1}}],[\"不能在ip\",{\"1\":{\"1164\":1}}],[\"不能执行写命令\",{\"1\":{\"993\":1}}],[\"不能用来获取任何元组\",{\"1\":{\"814\":1}}],[\"不能用作类型声明\",{\"1\":{\"340\":1}}],[\"不能跳过索引中的列\",{\"1\":{\"806\":1}}],[\"不能超过6个\",{\"1\":{\"795\":1}}],[\"不能直接通过浏览器访问\",{\"1\":{\"1232\":1}}],[\"不能直接将数组a与切片b拼接\",{\"1\":{\"654\":1}}],[\"不能直接使用需要初始化\",{\"1\":{\"511\":1}}],[\"不能比较的情况\",{\"1\":{\"635\":1}}],[\"不能动态扩展\",{\"1\":{\"635\":1}}],[\"不能捕获的\",{\"1\":{\"635\":1}}],[\"不能使用栈空间进行管理\",{\"1\":{\"633\":1}}],[\"不能使用\",{\"1\":{\"511\":1}}],[\"不能定位\",{\"1\":{\"393\":1}}],[\"不能赋值字符串\",{\"1\":{\"381\":1}}],[\"不能是127\",{\"1\":{\"1078\":1}}],[\"不能是变量\",{\"1\":{\"239\":1}}],[\"不能是\",{\"1\":{\"210\":1}}],[\"不能与参数名重复\",{\"1\":{\"280\":1}}],[\"不能与go任何内置的关键字冲突\",{\"1\":{\"178\":1}}],[\"不能与任何已存在的标识符重复\",{\"1\":{\"178\":1}}],[\"不能过度依赖\",{\"1\":{\"79\":1}}],[\"不管什么类型\",{\"1\":{\"1417\":1}}],[\"不管这些消息是否被消费过\",{\"1\":{\"1025\":1}}],[\"不管执行多少次\",{\"1\":{\"422\":1}}],[\"不管调用者是不是指针\",{\"1\":{\"287\":1}}],[\"不管具名返回值如何声明\",{\"1\":{\"280\":1}}],[\"不管是直接的还是间接的\",{\"1\":{\"175\":1}}],[\"不管其他规则怎样\",{\"1\":{\"28\":1}}],[\"不需要绑定到根对象中\",{\"1\":{\"1420\":1}}],[\"不需要阻塞\",{\"1\":{\"1374\":1}}],[\"不需要操作一次就关闭一次连接\",{\"1\":{\"913\":1}}],[\"不需要你来手动注册\",{\"1\":{\"890\":1}}],[\"不需要再进入bin的目录下启动了\",{\"1\":{\"852\":1}}],[\"不需要备份的数据库\",{\"1\":{\"822\":3}}],[\"不需要重启\",{\"1\":{\"743\":1}}],[\"不需要显示声明某个类型实现了某个接口\",{\"1\":{\"651\":1}}],[\"不需要继承关系\",{\"1\":{\"637\":1}}],[\"不需要开发者做什么工作\",{\"1\":{\"450\":1}}],[\"不需要void\",{\"1\":{\"280\":1}}],[\"不需要解引用就可以直接访问结构体的内容\",{\"1\":{\"271\":1}}],[\"不需要使用指针\",{\"1\":{\"208\":1}}],[\"不需要手动内存管理\",{\"1\":{\"168\":1}}],[\"不需要程序员手动管理内存\",{\"1\":{\"152\":1}}],[\"不需要就直接托管到cloudflare上解析即可\",{\"1\":{\"84\":1}}],[\"不同消费者组维护自己的消费进度\",{\"1\":{\"1060\":1}}],[\"不同在于\",{\"1\":{\"967\":1}}],[\"不同都存在\",{\"1\":{\"814\":1}}],[\"不同单词采用\",{\"1\":{\"794\":1}}],[\"不同存储引擎共用一个server层\",{\"1\":{\"775\":1}}],[\"不同的系统可能会有不同的结果\",{\"1\":{\"1437\":1}}],[\"不同的角色可以展示不同的页面\",{\"1\":{\"1240\":1}}],[\"不同的\",{\"1\":{\"1060\":1}}],[\"不同的数据库也放置在不同的文件中\",{\"1\":{\"845\":1}}],[\"不同的生产厂家不同\",{\"1\":{\"805\":1}}],[\"不同的存储引擎执行的方式不同\",{\"1\":{\"782\":1}}],[\"不同的存储引擎的原理和执行的方法有很大不同\",{\"1\":{\"781\":1}}],[\"不同的版本可能存在api发生修改\",{\"1\":{\"716\":1}}],[\"不同的类型可能还会有其他的额外方法\",{\"1\":{\"439\":1}}],[\"不同的类型无法进行运算\",{\"1\":{\"383\":1}}],[\"不同路径\",{\"1\":{\"611\":1,\"683\":1}}],[\"不同地方有什么倾向性吗\",{\"1\":{\"607\":1,\"679\":1}}],[\"不同于动态链接库\",{\"1\":{\"313\":1}}],[\"不同\",{\"1\":{\"152\":1}}],[\"不同点\",{\"1\":{\"43\":1}}],[\"不够灵活\",{\"1\":{\"114\":1}}],[\"不支持复杂情况下的处理\",{\"1\":{\"1414\":1}}],[\"不支持日志切割\",{\"1\":{\"1307\":1}}],[\"不支持单机\",{\"1\":{\"1072\":1}}],[\"不支持混合数组类型\",{\"1\":{\"725\":1}}],[\"不支持混合数据类型的数组\",{\"1\":{\"725\":1}}],[\"不支持的情况\",{\"1\":{\"716\":1}}],[\"不支持多重继承\",{\"1\":{\"637\":1}}],[\"不支持多行书写\",{\"1\":{\"252\":1}}],[\"不支持类的继承\",{\"1\":{\"637\":1}}],[\"不支持传统的继承\",{\"1\":{\"637\":1}}],[\"不支持传统的面向对象编程\",{\"1\":{\"165\":1}}],[\"不支持泛型方法\",{\"1\":{\"339\":1,\"516\":1}}],[\"不支持转义\",{\"1\":{\"252\":1}}],[\"不支持指针算术操作\",{\"1\":{\"168\":1}}],[\"不支持\",{\"1\":{\"111\":1}}],[\"不支持离线提交\",{\"1\":{\"12\":1}}],[\"不仅可以省去很多常用的封装带来的时间\",{\"1\":{\"1273\":1}}],[\"不仅会加大理解难度\",{\"1\":{\"793\":1}}],[\"不仅是一个命令行工具\",{\"1\":{\"77\":1}}],[\"不仅仅支持用户名密码方式的配置\",{\"1\":{\"49\":1}}],[\"不递归\",{\"1\":{\"28\":1}}],[\"不愿意使用\",{\"1\":{\"12\":1}}],[\"不过只适用于只读的情况下\",{\"1\":{\"1448\":1}}],[\"不过对于存放在堆栈上的字符串变量而言\",{\"1\":{\"1447\":1}}],[\"不过通常建议使用\",{\"1\":{\"1420\":1}}],[\"不过通常我们不会去手动序列化\",{\"1\":{\"1321\":1}}],[\"不过本文要讲述的主角是go内置的模板引擎库text\",{\"1\":{\"1414\":1}}],[\"不过已经足够满足日常使用\",{\"1\":{\"1364\":1}}],[\"不过传统的xml解析方式经常需要新建结构体\",{\"1\":{\"1312\":1}}],[\"不过需要注意的是在go中格式化模板不是常见的yyyy\",{\"1\":{\"1431\":1}}],[\"不过需要跟后端协商过期时间\",{\"1\":{\"1092\":1}}],[\"不过需要明白的一点是\",{\"1\":{\"463\":1}}],[\"不过仍然建议您使用\",{\"1\":{\"981\":1}}],[\"不过一般下载的驱动库都会自动注册驱动\",{\"1\":{\"890\":1}}],[\"不过一点也不影响之前接口的使用\",{\"1\":{\"289\":1}}],[\"不过官方的mongo驱动库已经完全足够使用了\",{\"1\":{\"828\":1}}],[\"不过官方提供的errors包其实并不够用\",{\"1\":{\"393\":1}}],[\"不过若使用了覆盖索引\",{\"1\":{\"818\":1}}],[\"不过示例测试主要是由output注释来体现的\",{\"1\":{\"470\":1}}],[\"不过大部分情况并不需要手动的修改go\",{\"1\":{\"459\":1}}],[\"不过由于yml本身有着严格的缩进语法\",{\"1\":{\"1314\":1}}],[\"不过由于其服务器部署在国外\",{\"1\":{\"451\":1}}],[\"不过由于内部用到了反射\",{\"1\":{\"219\":1}}],[\"不过真正的效率要结合具体使用场景来看\",{\"1\":{\"440\":1}}],[\"不过filepath标准库已经提供了类似功能的函数\",{\"1\":{\"410\":1}}],[\"不过panic在退出之前会做好程序的善后工作\",{\"1\":{\"394\":1}}],[\"不过标准库已经提供好了类似的函数\",{\"1\":{\"393\":1}}],[\"不过缺点也不少\",{\"1\":{\"388\":1}}],[\"不过我们看待事物要辩证的来看\",{\"1\":{\"388\":1}}],[\"不过毫无意义而且可能会造成数值溢出的问题\",{\"1\":{\"339\":1}}],[\"不过有一点怪\",{\"1\":{\"336\":1}}],[\"不过区别在于cgo没有提供伪函数来对切片进行拷贝\",{\"1\":{\"306\":1}}],[\"不过区别在于指针无法偏移\",{\"1\":{\"276\":1}}],[\"不过可以使用c中的typedef关键字来给类型取个别名\",{\"1\":{\"301\":1}}],[\"不过可以被声明\",{\"1\":{\"292\":1}}],[\"不过是一个匿名空接口\",{\"1\":{\"294\":1}}],[\"不过这种场景比较少见\",{\"1\":{\"296\":1}}],[\"不过这更像是一种\",{\"1\":{\"293\":1}}],[\"不过这是错误处理一节中才会涉及到的东西\",{\"1\":{\"283\":1}}],[\"不过两者并不应该混合使用\",{\"1\":{\"287\":1}}],[\"不过条件是它们必须相邻\",{\"1\":{\"279\":1}}],[\"不过为了可读性一般还是建议尽量给参数加上名称\",{\"1\":{\"279\":1}}],[\"不过指针不能光声明\",{\"1\":{\"275\":1}}],[\"不过实际编码过程中\",{\"1\":{\"273\":1}}],[\"不过在1\",{\"1\":{\"1445\":1}}],[\"不过在go1\",{\"1\":{\"289\":1}}],[\"不过在go语言中没有这些\",{\"1\":{\"174\":1}}],[\"不过在使用值接收者时\",{\"1\":{\"287\":1}}],[\"不过在编码的时候可以省去\",{\"1\":{\"271\":1}}],[\"不过go也对私有模块进行了支持\",{\"1\":{\"461\":1}}],[\"不过go并不是c语言\",{\"1\":{\"320\":1}}],[\"不过go并不支持函数与方法重载\",{\"1\":{\"268\":1}}],[\"不过go中的函数有两个不同的点\",{\"1\":{\"187\":1}}],[\"不过也可以省略字段名称\",{\"1\":{\"268\":1}}],[\"不过背后的安全问题需要自己承担\",{\"1\":{\"254\":1}}],[\"不过你也可以通过unsafe库来实现无复制转换\",{\"1\":{\"254\":1}}],[\"不过它是按行读取的\",{\"1\":{\"226\":1}}],[\"不过它有以下缺点\",{\"1\":{\"213\":1}}],[\"不过仅支持有序类型的参数\",{\"1\":{\"209\":1}}],[\"不过\",{\"1\":{\"12\":1}}],[\"不往回走\",{\"1\":{\"5\":1}}],[\"是模板引擎的模板参数\",{\"1\":{\"1415\":1}}],[\"是调用f的handler\",{\"1\":{\"1337\":1}}],[\"是以上几种数据格式中最为古老的一种\",{\"1\":{\"1310\":1}}],[\"是以对象的形式存储数据\",{\"1\":{\"634\":1}}],[\"是用于存储数据的一种格式\",{\"1\":{\"1310\":1}}],[\"是用户级别的线程\",{\"1\":{\"649\":1}}],[\"是要保留的旧日志文件的最大数量\",{\"1\":{\"1307\":1}}],[\"是根据文件名中编码的时间戳保留旧日志文件的最大天数\",{\"1\":{\"1307\":1}}],[\"是日志文件在轮换之前的最大大小\",{\"1\":{\"1307\":1}}],[\"是使用\",{\"1\":{\"1307\":1}}],[\"是使用较多的一种架构\",{\"1\":{\"990\":1}}],[\"是另一种类型\",{\"1\":{\"1263\":1}}],[\"是分配的端口\",{\"1\":{\"1234\":1}}],[\"是分布式系统常用的组件之一\",{\"1\":{\"1051\":1}}],[\"是分布式流平台\",{\"1\":{\"634\":1}}],[\"是分布式版本控制工具\",{\"1\":{\"12\":1}}],[\"是任意一个\",{\"1\":{\"1234\":1}}],[\"是root用户的命令\",{\"1\":{\"1223\":1}}],[\"是root用户的登陆密码\",{\"1\":{\"775\":1}}],[\"是有区别的\",{\"1\":{\"1183\":1}}],[\"是有序还是无序\",{\"1\":{\"611\":1,\"683\":1}}],[\"是实际生产中\",{\"1\":{\"1158\":1}}],[\"是实现并行计算的核心\",{\"1\":{\"539\":1}}],[\"是内存占用通过用户的访问ip地址来限流\",{\"1\":{\"1158\":1}}],[\"是漏桶算法还是令牌桶算法\",{\"1\":{\"1156\":1}}],[\"是限制同一客户端ip地址\",{\"1\":{\"1151\":1}}],[\"是消息队列\",{\"1\":{\"1060\":1}}],[\"是消息的出口\",{\"1\":{\"1020\":1}}],[\"是消息的入口\",{\"1\":{\"1020\":1}}],[\"是当前最主流的消息中间件之一\",{\"1\":{\"1053\":1}}],[\"是同⼀类别的消息记录\",{\"1\":{\"1025\":1}}],[\"是数据的入口\",{\"1\":{\"1022\":1}}],[\"是集中存放镜像文件的场所\",{\"1\":{\"1183\":1}}],[\"是集中式版本控制工具\",{\"1\":{\"12\":1}}],[\"是集群的高可用的保障\",{\"1\":{\"996\":1}}],[\"是单线程的\",{\"1\":{\"980\":1}}],[\"是完全开源免费的\",{\"1\":{\"956\":1}}],[\"是对标云原生网关的\",{\"1\":{\"1072\":1}}],[\"是对标准sql库的增强\",{\"1\":{\"889\":1}}],[\"是对数组的抽象\",{\"1\":{\"635\":1}}],[\"是top\",{\"1\":{\"813\":1}}],[\"是客户端工具\",{\"1\":{\"776\":1}}],[\"是客户端tortoisegit\",{\"1\":{\"55\":1}}],[\"是多边形的复杂形状\",{\"1\":{\"731\":1}}],[\"是将数组\",{\"1\":{\"654\":1}}],[\"是逻辑cpu的映射\",{\"1\":{\"651\":1}}],[\"是操作系统线程\",{\"1\":{\"651\":1}}],[\"是操作系统分配资源的基本单位\",{\"1\":{\"645\":1}}],[\"是非并发安全的\",{\"1\":{\"649\":1}}],[\"是最差的\",{\"1\":{\"645\":1}}],[\"是垃圾回收的常用算法\",{\"1\":{\"645\":1}}],[\"是常数时间复杂度的一部分\",{\"1\":{\"645\":1}}],[\"是进程中的执行单元\",{\"1\":{\"645\":1}}],[\"是每个线程独立拥有自己的变量副本\",{\"1\":{\"641\":1}}],[\"是腾讯云的对象存储服务\",{\"1\":{\"639\":1}}],[\"是衡量每秒查询次数的指标\",{\"1\":{\"639\":1}}],[\"是整数数量\",{\"1\":{\"639\":1}}],[\"是前1000个最大的数\",{\"1\":{\"639\":2}}],[\"是文件中的整数数量\",{\"1\":{\"639\":1}}],[\"是无连接的协议\",{\"1\":{\"636\":1}}],[\"是无状态的\",{\"1\":{\"611\":1,\"683\":1}}],[\"是并发的\",{\"1\":{\"635\":1}}],[\"是的\",{\"1\":{\"635\":1,\"637\":1,\"638\":4,\"655\":1}}],[\"是执行\",{\"1\":{\"635\":1}}],[\"是局部的\",{\"1\":{\"635\":1}}],[\"是局部变量\",{\"1\":{\"548\":2}}],[\"是不带扩展名的文件名\",{\"1\":{\"1307\":1}}],[\"是不是nginx限制错了\",{\"1\":{\"1154\":1}}],[\"是不是都会去数据库请求更新数据\",{\"1\":{\"566\":1,\"638\":1}}],[\"是不并发安全的\",{\"1\":{\"635\":1}}],[\"是基于哈希表实现的\",{\"1\":{\"634\":1}}],[\"是传统的消息队列系统\",{\"1\":{\"634\":1}}],[\"是通过驱动表的结果集作为循环基础数据\",{\"1\":{\"821\":1}}],[\"是通过\",{\"1\":{\"633\":1}}],[\"是什么东西\",{\"1\":{\"622\":1,\"694\":1}}],[\"是什么\",{\"1\":{\"619\":2,\"691\":2,\"1307\":1}}],[\"是干嘛的\",{\"1\":{\"619\":1,\"691\":1}}],[\"是怎么实现的\",{\"1\":{\"581\":1,\"653\":2}}],[\"是指令块\",{\"1\":{\"1130\":1}}],[\"是指利用消息进行通信或交换的中间件产品\",{\"1\":{\"1051\":1}}],[\"是指\",{\"1\":{\"981\":1}}],[\"是指一个\",{\"1\":{\"743\":1}}],[\"是指这些索引数据结构不一样\",{\"1\":{\"566\":1,\"638\":1}}],[\"是指在发送对称密钥的过程密钥被截取或篡改\",{\"1\":{\"83\":1}}],[\"是这个类型返回ok为true\",{\"1\":{\"516\":1}}],[\"是特殊的浮点数值\",{\"1\":{\"512\":1}}],[\"是因为nginx的限流统计是基于毫秒的\",{\"1\":{\"1154\":1}}],[\"是因为go会自动转换为指针\",{\"1\":{\"515\":1}}],[\"是因为go会自动解引用\",{\"1\":{\"515\":1}}],[\"是因为它总是乐观的假设共享数据不会被修改\",{\"1\":{\"440\":1}}],[\"是因为emptyctx的实例必须要有不同的内存地址\",{\"1\":{\"425\":1}}],[\"是因为cgo从中做了类型转换\",{\"1\":{\"299\":1}}],[\"是空接口类型\",{\"1\":{\"386\":1}}],[\"是后续自定义类型的基础\",{\"1\":{\"380\":1}}],[\"是比较安全的\",{\"1\":{\"310\":1}}],[\"是值拷贝的\",{\"1\":{\"287\":1}}],[\"是引用类型\",{\"1\":{\"243\":1}}],[\"是相对于当前分组的起始行号\",{\"1\":{\"212\":1}}],[\"是静态类型的\",{\"1\":{\"170\":1}}],[\"是动态类型\",{\"1\":{\"169\":1}}],[\"是解释型语言\",{\"1\":{\"169\":1}}],[\"是编译型语言\",{\"1\":{\"169\":1}}],[\"是云计算的\",{\"1\":{\"160\":1}}],[\"是构建微服务架构的理想选择\",{\"1\":{\"159\":1}}],[\"是跨平台的\",{\"1\":{\"153\":1,\"164\":1}}],[\"是强类型语言\",{\"1\":{\"152\":1}}],[\"是由\",{\"1\":{\"148\":1,\"502\":1}}],[\"是库\",{\"1\":{\"144\":1}}],[\"是go的调度模型\",{\"1\":{\"651\":1}}],[\"是go中比线程更轻量的执行单元\",{\"1\":{\"651\":1}}],[\"是go中实现的计数布隆过滤器的很好替代\",{\"1\":{\"127\":1}}],[\"是go在1\",{\"1\":{\"462\":1}}],[\"是go提供的一种并发控制的解决方案\",{\"1\":{\"423\":1}}],[\"是gitee\",{\"1\":{\"53\":1}}],[\"是开发者使用最为频繁的函数\",{\"1\":{\"121\":1}}],[\"是学信网认证的\",{\"1\":{\"83\":1}}],[\"是否不相等\",{\"1\":{\"1420\":1}}],[\"是否相等\",{\"1\":{\"1420\":1}}],[\"是否找到子串\",{\"1\":{\"1400\":1}}],[\"是否压缩\",{\"1\":{\"1304\":1,\"1307\":1}}],[\"是否启用等信息\",{\"1\":{\"1223\":1}}],[\"是否正常还是发生了异常退出了\",{\"1\":{\"1127\":1}}],[\"是否对接常用的统计或监控组件\",{\"1\":{\"1072\":1}}],[\"是否支持动态上游\",{\"1\":{\"1072\":1}}],[\"是否支持多云\",{\"1\":{\"1072\":1}}],[\"是否支持部署在用户自己的服务器\",{\"1\":{\"1072\":1}}],[\"是否会锁定特定平台\",{\"1\":{\"1072\":1}}],[\"是否有序\",{\"0\":{\"1381\":1}}],[\"是否有web控制台可操控整个集群\",{\"1\":{\"1072\":1}}],[\"是否有其他考虑使用kafka的因素\",{\"1\":{\"576\":1,\"648\":1}}],[\"是否依赖外部的数据库\",{\"1\":{\"1072\":1}}],[\"是否开源\",{\"1\":{\"1072\":1}}],[\"是否存在\",{\"1\":{\"967\":2}}],[\"是否把较小的包合并为一个包发送\",{\"1\":{\"965\":1}}],[\"是否能\",{\"1\":{\"768\":1,\"769\":1,\"770\":1}}],[\"是否定期进行\",{\"1\":{\"655\":1}}],[\"是否在读\",{\"1\":{\"603\":2,\"675\":2}}],[\"是否仅考虑成熟度和被接受程度\",{\"1\":{\"576\":1,\"648\":1}}],[\"是否遵守只取决于开发者\",{\"1\":{\"470\":1}}],[\"是否实现该方法\",{\"1\":{\"393\":1}}],[\"是否为嵌套字段\",{\"1\":{\"367\":1}}],[\"是否删除了本应该存在的代码\",{\"1\":{\"58\":1}}],[\"是否少提交了一行代码\",{\"1\":{\"58\":1}}],[\"是否漏提交文件\",{\"1\":{\"58\":1}}],[\"是否多提交了某个文件\",{\"1\":{\"58\":1}}],[\"是一款基于内存的非关系型数据库\",{\"1\":{\"979\":1}}],[\"是一组键值\",{\"1\":{\"847\":1}}],[\"是一种互联网应用程序的api设计理念\",{\"1\":{\"1278\":1}}],[\"是一种类型\",{\"1\":{\"1263\":1}}],[\"是一种分层\",{\"1\":{\"1192\":1}}],[\"是一种服务器\",{\"1\":{\"1071\":1}}],[\"是一种计算机程序设计领域的优化策略\",{\"1\":{\"988\":1}}],[\"是一种抽象类型\",{\"1\":{\"651\":1}}],[\"是一种用于认证和信息交换的开放标准\",{\"1\":{\"641\":1}}],[\"是一种面向连接的协议\",{\"1\":{\"636\":1}}],[\"是一种无序map\",{\"1\":{\"512\":1}}],[\"是一种并发条件下无锁化并发控制方式\",{\"1\":{\"440\":1}}],[\"是一种通讯机制\",{\"1\":{\"432\":1}}],[\"是一种io多路复用的解决方案\",{\"1\":{\"421\":1}}],[\"是一种轻量级的线程\",{\"1\":{\"412\":1,\"645\":1}}],[\"是一种复合类型\",{\"1\":{\"266\":1}}],[\"是一种现在公认的最安全的加密方式\",{\"1\":{\"49\":1}}],[\"是一门静态类型\",{\"1\":{\"148\":1}}],[\"是一个引用\",{\"1\":{\"1443\":1}}],[\"是一个写入指定文件名的\",{\"1\":{\"1307\":1}}],[\"是一个强大的开源访问控制框架\",{\"1\":{\"1238\":1}}],[\"是一个文本文件\",{\"1\":{\"1183\":1}}],[\"是一个用于服务器到服务器的消息系统\",{\"1\":{\"1056\":1}}],[\"是一个相对轻量的消息队列\",{\"1\":{\"1053\":1}}],[\"是一个相当简单的跨平台游戏库\",{\"1\":{\"134\":1}}],[\"是一个在\",{\"1\":{\"1053\":1}}],[\"是一个高性能的http和反向代理web服务器\",{\"1\":{\"1107\":1}}],[\"是一个高性能的key\",{\"1\":{\"956\":1}}],[\"是一个高性能的键值对存储系统\",{\"1\":{\"635\":1}}],[\"是一个开源的使用\",{\"1\":{\"908\":1}}],[\"是一个开源的全文搜索和分析引擎\",{\"1\":{\"637\":1}}],[\"是一个分布式\",{\"1\":{\"700\":1}}],[\"是一个分布式的键值存储系统\",{\"1\":{\"635\":1}}],[\"是一个\",{\"1\":{\"656\":1}}],[\"是一个符合规范的go\",{\"1\":{\"443\":1}}],[\"是一个临时的并发安全对象池\",{\"1\":{\"435\":1}}],[\"是一个程序性能分析的利器\",{\"1\":{\"321\":1}}],[\"是一个语句\",{\"1\":{\"172\":1}}],[\"是一个基于git实现在线代码托管的仓库\",{\"1\":{\"43\":1}}],[\"是\",{\"1\":{\"43\":1,\"294\":7,\"525\":1,\"635\":4,\"641\":1,\"984\":1,\"1072\":8,\"1307\":1}}],[\"是在放在内存中的\",{\"1\":{\"965\":1}}],[\"是在四次挥手后的最后状态\",{\"1\":{\"641\":1}}],[\"是在意料之外的\",{\"1\":{\"285\":1}}],[\"是在远程服务器上的git仓库\",{\"1\":{\"17\":1}}],[\"是在开发人员自己电脑上的git仓库\",{\"1\":{\"17\":1}}],[\"是近几年才发展起来的\",{\"1\":{\"9\":1}}],[\"5e\",{\"1\":{\"1367\":1}}],[\"5lmh\",{\"1\":{\"1289\":1}}],[\"5个容器\",{\"1\":{\"1197\":1}}],[\"58\",{\"1\":{\"1195\":1}}],[\"5m的压力\",{\"1\":{\"1165\":1}}],[\"5分钟\",{\"1\":{\"965\":1}}],[\"5def4d765feff0d32634b2a7\",{\"1\":{\"858\":1,\"859\":1}}],[\"572880728+08\",{\"1\":{\"1197\":1}}],[\"57\",{\"1\":{\"720\":1,\"775\":3,\"1081\":1,\"1197\":1}}],[\"5701\",{\"1\":{\"709\":2,\"710\":1,\"711\":2}}],[\"526\",{\"1\":{\"1194\":1}}],[\"52\",{\"1\":{\"820\":1,\"1344\":2}}],[\"528z\",{\"1\":{\"705\":1}}],[\"52237582\",{\"1\":{\"523\":1}}],[\"5~20人\",{\"1\":{\"639\":1}}],[\"5+\",{\"1\":{\"635\":1}}],[\"5µ\",{\"1\":{\"476\":2}}],[\"552223f74f163f94238bf536040aa0c683b1ab0fbfbcabdd1ed28644e40f1b9f\",{\"1\":{\"1197\":1}}],[\"552113\",{\"1\":{\"475\":1}}],[\"550333\",{\"1\":{\"475\":1}}],[\"5500\",{\"1\":{\"281\":1}}],[\"556fd59b42f6\",{\"1\":{\"454\":1}}],[\"5c51ce4\",{\"1\":{\"449\":2}}],[\"51i\",{\"1\":{\"1392\":1}}],[\"5132580\",{\"1\":{\"477\":1}}],[\"51\",{\"1\":{\"473\":1,\"1235\":1}}],[\"512ms\",{\"1\":{\"911\":1}}],[\"512b\",{\"1\":{\"805\":1}}],[\"512\",{\"1\":{\"385\":1,\"401\":1,\"965\":1}}],[\"51805\",{\"1\":{\"328\":1}}],[\"50+6305039478318694p\",{\"1\":{\"1392\":1}}],[\"50x\",{\"1\":{\"1123\":2,\"1130\":2,\"1131\":2,\"1141\":2,\"1158\":2,\"1160\":2}}],[\"504\",{\"1\":{\"1123\":1,\"1130\":1,\"1131\":1,\"1141\":1,\"1158\":3,\"1160\":1}}],[\"503\",{\"1\":{\"1123\":1,\"1130\":1,\"1131\":1,\"1141\":1,\"1151\":1,\"1152\":1,\"1158\":2,\"1160\":1}}],[\"502\",{\"1\":{\"1123\":1,\"1130\":1,\"1131\":1,\"1141\":1,\"1158\":1,\"1160\":1}}],[\"5087fa2\",{\"1\":{\"449\":2}}],[\"500w行数据量进行评估\",{\"1\":{\"788\":1}}],[\"500压测线程的设置和服务器以及jvm的规格和设置有什么关系吗\",{\"1\":{\"597\":1,\"669\":1}}],[\"500\",{\"1\":{\"431\":1,\"432\":1,\"1123\":1,\"1130\":2,\"1131\":1,\"1141\":1,\"1158\":1,\"1160\":1,\"1289\":1}}],[\"5000\",{\"1\":{\"281\":1,\"429\":2,\"1078\":1}}],[\"50\",{\"1\":{\"365\":2,\"476\":1,\"653\":2,\"861\":1,\"1003\":1,\"1018\":1,\"1165\":3}}],[\"509证书\",{\"1\":{\"124\":1}}],[\"509编码的键值和证书\",{\"1\":{\"124\":1}}],[\"59319015\",{\"1\":{\"1165\":1}}],[\"598\",{\"1\":{\"1157\":1}}],[\"599\",{\"1\":{\"1151\":1}}],[\"59\",{\"1\":{\"265\":1,\"1175\":2}}],[\"5696803\",{\"1\":{\"1433\":1}}],[\"5650644266346967p\",{\"1\":{\"1390\":1}}],[\"5601\",{\"1\":{\"739\":1}}],[\"56\",{\"1\":{\"233\":1,\"265\":1,\"476\":1,\"1194\":1,\"1195\":2,\"1196\":1,\"1197\":3}}],[\"5460\",{\"1\":{\"1010\":2}}],[\"5461\",{\"1\":{\"1010\":3}}],[\"541\",{\"1\":{\"476\":1}}],[\"5432\",{\"1\":{\"1075\":3,\"1078\":1}}],[\"543\",{\"1\":{\"476\":1}}],[\"548\",{\"1\":{\"476\":1}}],[\"54\",{\"1\":{\"233\":1}}],[\"53231c3adf0423ed2d0577ead987507c12978416349a51445d663c9536c9b4ff\",{\"1\":{\"1194\":1,\"1197\":1}}],[\"5321中的简单邮件传输协议\",{\"1\":{\"124\":1}}],[\"53最大子数组和\",{\"1\":{\"573\":1,\"645\":2}}],[\"539s\",{\"1\":{\"477\":1}}],[\"53\",{\"1\":{\"476\":3,\"645\":1}}],[\"5389\",{\"1\":{\"145\":2}}],[\"5\",{\"0\":{\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"22\":1,\"35\":1,\"36\":1,\"47\":1,\"118\":1,\"154\":1,\"162\":1,\"168\":1,\"169\":1,\"170\":1,\"723\":1,\"760\":1,\"763\":1,\"764\":1,\"765\":1,\"780\":1,\"870\":1,\"974\":1,\"1026\":1,\"1033\":1,\"1079\":1,\"1093\":1,\"1150\":1,\"1175\":1},\"1\":{\"12\":1,\"14\":1,\"34\":1,\"36\":3,\"43\":1,\"55\":1,\"58\":1,\"79\":1,\"84\":1,\"130\":3,\"179\":1,\"182\":2,\"201\":1,\"212\":1,\"221\":1,\"224\":2,\"233\":11,\"236\":2,\"239\":11,\"241\":18,\"244\":1,\"245\":4,\"246\":3,\"247\":6,\"248\":2,\"249\":5,\"250\":4,\"275\":1,\"276\":3,\"282\":1,\"283\":3,\"284\":1,\"285\":1,\"306\":6,\"318\":2,\"320\":5,\"326\":1,\"375\":1,\"402\":2,\"412\":3,\"417\":5,\"420\":2,\"422\":1,\"430\":1,\"435\":1,\"436\":2,\"445\":6,\"449\":3,\"453\":4,\"459\":6,\"460\":1,\"474\":2,\"498\":1,\"499\":1,\"500\":1,\"511\":1,\"557\":1,\"600\":1,\"630\":1,\"633\":1,\"634\":2,\"635\":1,\"636\":1,\"637\":1,\"638\":2,\"639\":1,\"641\":1,\"644\":1,\"645\":1,\"649\":1,\"651\":1,\"653\":1,\"654\":4,\"672\":1,\"706\":1,\"717\":1,\"718\":1,\"719\":1,\"724\":2,\"741\":2,\"756\":1,\"769\":1,\"770\":1,\"771\":1,\"774\":1,\"775\":4,\"776\":1,\"794\":1,\"798\":1,\"799\":1,\"809\":1,\"811\":2,\"821\":1,\"822\":5,\"842\":1,\"843\":1,\"849\":1,\"851\":1,\"852\":1,\"861\":4,\"862\":1,\"863\":1,\"882\":1,\"911\":2,\"965\":1,\"967\":2,\"968\":1,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"1010\":1,\"1019\":1,\"1022\":1,\"1034\":1,\"1047\":1,\"1053\":1,\"1054\":1,\"1055\":1,\"1056\":1,\"1078\":1,\"1093\":1,\"1132\":2,\"1165\":3,\"1173\":2,\"1184\":1,\"1193\":1,\"1195\":2,\"1283\":2,\"1303\":1,\"1353\":1,\"1354\":1,\"1355\":2,\"1376\":2,\"1377\":4,\"1379\":4,\"1392\":1,\"1443\":1,\"1444\":1}}],[\"4d\",{\"1\":{\"1367\":1}}],[\"4核4g以上\",{\"1\":{\"1217\":1}}],[\"4个请求被放到burst队列里\",{\"1\":{\"1155\":1}}],[\"4发布\",{\"1\":{\"1107\":1}}],[\"4zt2inc4xg81\",{\"1\":{\"1090\":1}}],[\"4b\",{\"1\":{\"791\":2}}],[\"4133b2p+20\",{\"1\":{\"1390\":1}}],[\"41421356237309504880168872420969807856967187537694807317667974\",{\"1\":{\"1345\":1}}],[\"41f8ccda22abebaa726191b765c88eae00cd3655\",{\"1\":{\"1010\":2}}],[\"41\",{\"1\":{\"813\":1}}],[\"4128202\",{\"1\":{\"476\":2}}],[\"4128204\",{\"1\":{\"476\":3}}],[\"4128201\",{\"1\":{\"476\":2}}],[\"4128203\",{\"1\":{\"476\":2}}],[\"4128187\",{\"1\":{\"476\":2}}],[\"4128189\",{\"1\":{\"476\":3}}],[\"4128185\",{\"1\":{\"475\":2}}],[\"4128198\",{\"1\":{\"476\":1}}],[\"4128190\",{\"1\":{\"476\":1}}],[\"4128191\",{\"1\":{\"476\":2}}],[\"4128194\",{\"1\":{\"476\":1}}],[\"4128192\",{\"1\":{\"476\":1}}],[\"4128196\",{\"1\":{\"475\":1}}],[\"4128199\",{\"1\":{\"475\":1}}],[\"4128176\",{\"1\":{\"475\":2,\"476\":10}}],[\"419651\",{\"1\":{\"476\":1}}],[\"4429256\",{\"1\":{\"1434\":1}}],[\"44f7\",{\"1\":{\"1219\":1}}],[\"44\",{\"1\":{\"477\":1,\"1132\":1,\"1173\":1,\"1306\":1,\"1431\":1}}],[\"444s\",{\"1\":{\"473\":1}}],[\"449s\",{\"1\":{\"473\":1}}],[\"448s\",{\"1\":{\"470\":1}}],[\"443是内部访问端口\",{\"1\":{\"1235\":1}}],[\"443\",{\"1\":{\"84\":1,\"1235\":1}}],[\"4和d1\",{\"1\":{\"458\":1}}],[\"4版本都同时引用了模块d的1\",{\"1\":{\"458\":1}}],[\"4版本\",{\"1\":{\"458\":1}}],[\"431\",{\"1\":{\"993\":1}}],[\"43\",{\"1\":{\"449\":1,\"1219\":2}}],[\"4346所定义的tls\",{\"1\":{\"124\":1}}],[\"4726ab1d7f62\",{\"1\":{\"454\":1}}],[\"47\",{\"1\":{\"265\":1,\"477\":2,\"1035\":1,\"1036\":1,\"1130\":1,\"1135\":3,\"1431\":1}}],[\"4e16\",{\"1\":{\"258\":1}}],[\"48\",{\"1\":{\"233\":1,\"477\":2,\"830\":1,\"910\":1,\"912\":1,\"1431\":2}}],[\"4218\",{\"1\":{\"1195\":1}}],[\"423\",{\"1\":{\"476\":1}}],[\"423899\",{\"1\":{\"476\":1}}],[\"4285\",{\"1\":{\"476\":1}}],[\"422275\",{\"1\":{\"476\":1}}],[\"422s\",{\"1\":{\"468\":1}}],[\"42\",{\"1\":{\"233\":1,\"516\":1,\"584\":1,\"649\":1,\"656\":2,\"1194\":3,\"1195\":5,\"1197\":3}}],[\"4501592\",{\"1\":{\"1434\":1}}],[\"450s\",{\"1\":{\"473\":1}}],[\"4512075\",{\"1\":{\"1434\":1}}],[\"456789\",{\"1\":{\"1384\":2}}],[\"454452\",{\"1\":{\"476\":1}}],[\"452255\",{\"1\":{\"476\":1}}],[\"457s\",{\"1\":{\"468\":1}}],[\"45\",{\"1\":{\"233\":1,\"477\":1,\"1303\":1,\"1344\":1}}],[\"49mb\",{\"1\":{\"326\":11}}],[\"49\",{\"1\":{\"208\":1,\"233\":1,\"314\":1,\"473\":1,\"1306\":1}}],[\"40808206181339196\",{\"1\":{\"1363\":1}}],[\"40801\",{\"1\":{\"813\":1}}],[\"401298464324817070923729583289916131280e\",{\"1\":{\"1344\":1}}],[\"40282346638528859811704183484516925440e+38\",{\"1\":{\"1344\":1}}],[\"404\",{\"1\":{\"1130\":1,\"1457\":1}}],[\"4040067344\",{\"1\":{\"476\":1}}],[\"4040068784\",{\"1\":{\"475\":1}}],[\"4040095664\",{\"1\":{\"476\":1}}],[\"4040090768\",{\"1\":{\"476\":1}}],[\"4040090528\",{\"1\":{\"476\":1}}],[\"4040085248\",{\"1\":{\"476\":1}}],[\"4040089808\",{\"1\":{\"476\":1}}],[\"4040086784\",{\"1\":{\"476\":1}}],[\"4040080064\",{\"1\":{\"475\":1}}],[\"4040078000\",{\"1\":{\"476\":1}}],[\"4040078288\",{\"1\":{\"476\":1}}],[\"4040079488\",{\"1\":{\"476\":1}}],[\"4040076656\",{\"1\":{\"476\":1}}],[\"4040070032\",{\"1\":{\"476\":1}}],[\"4040070224\",{\"1\":{\"476\":1}}],[\"4040070800\",{\"1\":{\"476\":1}}],[\"4040071856\",{\"1\":{\"476\":1}}],[\"4040075408\",{\"1\":{\"476\":1}}],[\"4040077184\",{\"1\":{\"476\":1}}],[\"4040077520\",{\"1\":{\"476\":1}}],[\"4040077568\",{\"1\":{\"476\":1}}],[\"4040077424\",{\"1\":{\"476\":1}}],[\"4040077760\",{\"1\":{\"475\":1}}],[\"4040073104\",{\"1\":{\"475\":1}}],[\"4040056952\",{\"1\":{\"476\":1}}],[\"4040056784\",{\"1\":{\"476\":1}}],[\"4040056736\",{\"1\":{\"475\":1}}],[\"4040056592\",{\"1\":{\"475\":1,\"476\":8}}],[\"40ghz\",{\"1\":{\"1039\":1}}],[\"4096\",{\"1\":{\"1374\":1}}],[\"4096b\",{\"1\":{\"805\":1}}],[\"4090817\",{\"1\":{\"477\":1}}],[\"400\",{\"1\":{\"717\":1,\"1151\":1}}],[\"40\",{\"1\":{\"182\":3,\"233\":1,\"265\":1,\"328\":3,\"367\":1,\"477\":1,\"515\":1,\"993\":12}}],[\"46\",{\"1\":{\"473\":2,\"477\":1}}],[\"464s\",{\"1\":{\"472\":1}}],[\"4648中所定义的base64编码\",{\"1\":{\"124\":1}}],[\"4648中所定义的base32编码\",{\"1\":{\"124\":1}}],[\"4623113902481840538\",{\"1\":{\"1443\":1}}],[\"462s\",{\"1\":{\"471\":1}}],[\"4627中的json对象的编码和解码\",{\"1\":{\"124\":1}}],[\"468s\",{\"1\":{\"471\":1}}],[\"4\",{\"0\":{\"13\":1,\"21\":1,\"32\":1,\"33\":1,\"34\":1,\"46\":1,\"117\":1,\"153\":1,\"161\":1,\"555\":1,\"722\":1,\"732\":1,\"733\":1,\"759\":1,\"779\":1,\"848\":1,\"869\":1,\"973\":1,\"1025\":1,\"1032\":1,\"1035\":1,\"1036\":1,\"1037\":1,\"1038\":2,\"1078\":1,\"1092\":1,\"1149\":1,\"1174\":1,\"1284\":1},\"1\":{\"12\":1,\"13\":1,\"30\":2,\"43\":1,\"55\":1,\"58\":1,\"79\":1,\"84\":1,\"146\":1,\"179\":1,\"181\":2,\"212\":4,\"221\":1,\"224\":2,\"233\":12,\"236\":2,\"239\":2,\"241\":10,\"244\":2,\"245\":4,\"246\":3,\"247\":6,\"248\":2,\"250\":12,\"251\":2,\"253\":1,\"259\":1,\"276\":2,\"283\":2,\"284\":1,\"285\":5,\"306\":6,\"308\":2,\"318\":11,\"319\":5,\"347\":1,\"367\":2,\"375\":1,\"412\":4,\"417\":2,\"420\":2,\"422\":1,\"429\":2,\"430\":1,\"434\":3,\"436\":2,\"445\":2,\"459\":4,\"474\":2,\"475\":7,\"476\":39,\"483\":1,\"498\":4,\"499\":1,\"500\":1,\"511\":3,\"512\":2,\"513\":1,\"600\":1,\"601\":1,\"630\":1,\"633\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"641\":1,\"644\":1,\"645\":1,\"649\":1,\"651\":1,\"653\":1,\"654\":3,\"672\":1,\"673\":1,\"705\":1,\"706\":1,\"718\":1,\"719\":1,\"741\":3,\"774\":1,\"793\":1,\"794\":1,\"809\":2,\"811\":2,\"813\":2,\"821\":2,\"822\":1,\"825\":1,\"842\":1,\"843\":1,\"849\":1,\"851\":1,\"852\":1,\"861\":1,\"862\":1,\"863\":3,\"875\":1,\"882\":2,\"883\":2,\"921\":1,\"965\":2,\"967\":2,\"968\":1,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"985\":2,\"993\":1,\"1010\":2,\"1019\":1,\"1022\":1,\"1034\":1,\"1052\":1,\"1053\":1,\"1054\":1,\"1055\":1,\"1056\":1,\"1093\":1,\"1132\":2,\"1165\":2,\"1173\":2,\"1184\":1,\"1193\":1,\"1194\":1,\"1195\":1,\"1196\":1,\"1197\":3,\"1219\":2,\"1223\":2,\"1235\":4,\"1278\":1,\"1344\":1,\"1359\":1,\"1440\":1,\"1442\":2,\"1443\":1,\"1444\":1,\"1445\":2,\"1446\":2}}],[\"在运行时修改其底层的数据是完全可行的\",{\"1\":{\"1447\":1}}],[\"在运行时由eface\",{\"1\":{\"347\":1}}],[\"在运行时由如下的结构体iface来进行表示\",{\"1\":{\"347\":1}}],[\"在需要的时候并不会被回收掉\",{\"1\":{\"1443\":1}}],[\"在官方文档的描述中\",{\"1\":{\"1443\":1}}],[\"在t2模板中引用t1模板\",{\"1\":{\"1427\":1}}],[\"在t1模板中定义插槽\",{\"1\":{\"1427\":1}}],[\"在with语句中声明的变量\",{\"1\":{\"1422\":1}}],[\"在windows平台就是mingw\",{\"1\":{\"297\":1}}],[\"在模板语法的案例中\",{\"1\":{\"1428\":1}}],[\"在模板中也可以声明变量\",{\"1\":{\"1419\":1}}],[\"在模糊测试中\",{\"1\":{\"477\":1}}],[\"在例子中之所以会在两边额外加个空格写成\",{\"1\":{\"1417\":1}}],[\"在花括号中\",{\"1\":{\"1417\":1}}],[\"在花括号内\",{\"1\":{\"1417\":1}}],[\"在案例代码中\",{\"1\":{\"1415\":1}}],[\"在平时我们经常会使用fmt\",{\"1\":{\"1414\":1}}],[\"在其他语言比如java中\",{\"1\":{\"1393\":1}}],[\"在其它语言中的if和for语句通常可以简写\",{\"1\":{\"192\":1}}],[\"在反序列化时需要注意\",{\"1\":{\"1320\":1}}],[\"在第一次写入时打开或创建日志文件\",{\"1\":{\"1307\":1}}],[\"在第一次需要时创建实例\",{\"1\":{\"637\":1}}],[\"在限制日志对性能占用的情况下仅记录部分比较有代表性的日志\",{\"1\":{\"1302\":1}}],[\"在程序结束时将缓存同步到文件中\",{\"1\":{\"1301\":1}}],[\"在程序的生命周期都不会再发生改变\",{\"1\":{\"381\":1}}],[\"在请求编辑器中粘贴以下内容\",{\"1\":{\"1257\":1,\"1261\":1}}],[\"在请求上采用i\",{\"1\":{\"959\":1}}],[\"在策略编辑器中粘贴以下内容\",{\"1\":{\"1257\":1,\"1261\":1,\"1265\":1}}],[\"在初始化时\",{\"1\":{\"1286\":1}}],[\"在初始化那边对应\",{\"1\":{\"1228\":1}}],[\"在初始化map时应当尽量分配一个合理的容量\",{\"1\":{\"259\":1}}],[\"在阿里云官方下载进行\",{\"1\":{\"1218\":1}}],[\"在宿主机虚拟一个docker容器网桥\",{\"1\":{\"1195\":1}}],[\"在了解镜像的组成以及原理\",{\"1\":{\"1193\":1}}],[\"在启动的过程中\",{\"1\":{\"1171\":1}}],[\"在启动kafka集群前\",{\"1\":{\"1033\":1}}],[\"在nginx\",{\"1\":{\"1165\":1}}],[\"在nginx版本1\",{\"1\":{\"1164\":1}}],[\"在name字段上\",{\"1\":{\"818\":1}}],[\"在把8081和8082服务启动\",{\"1\":{\"1163\":1}}],[\"在发布项目的时候\",{\"1\":{\"1163\":1}}],[\"在发送es请求的时候\",{\"1\":{\"746\":1}}],[\"在该例子中\",{\"1\":{\"1162\":1}}],[\"在轮询策略的基础上指定轮询的几率\",{\"1\":{\"1162\":2}}],[\"在轮询中\",{\"1\":{\"1161\":1}}],[\"在服务器集群中\",{\"1\":{\"1159\":1}}],[\"在burst缓存处理中\",{\"1\":{\"1156\":1}}],[\"在bsd\",{\"1\":{\"1107\":1}}],[\"在超过1个请求就丢弃\",{\"1\":{\"1155\":1}}],[\"在64位平台上占用64个字节\",{\"1\":{\"1152\":1}}],[\"在64位平台上总是占用64字节\",{\"1\":{\"1152\":1}}],[\"在接下来的1s内\",{\"1\":{\"1148\":1}}],[\"在接口里\",{\"1\":{\"291\":1}}],[\"在rbac中\",{\"1\":{\"1259\":1}}],[\"在root指定的html目录中找到index\",{\"1\":{\"1141\":1}}],[\"在redis启动时\",{\"1\":{\"965\":1}}],[\"在redis中\",{\"1\":{\"653\":1}}],[\"在redis里怎么做库存的扣减\",{\"1\":{\"593\":1,\"665\":1}}],[\"在require时\",{\"1\":{\"459\":1}}],[\"在reflect包下\",{\"1\":{\"348\":1}}],[\"在进行发送\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"在登录的时候生成token\",{\"1\":{\"1093\":1}}],[\"在微服务架构中\",{\"1\":{\"1071\":1}}],[\"在大数据领域的实时计算以及日志采集被大规模使用\",{\"1\":{\"1055\":1}}],[\"在大多数情况下\",{\"1\":{\"287\":1,\"438\":1}}],[\"在日志领域比较成熟\",{\"1\":{\"1055\":1}}],[\"在日后发布新版本后再将其去掉\",{\"1\":{\"462\":1}}],[\"在国际上还没有那么流行\",{\"1\":{\"1054\":1}}],[\"在它的设计理念里面\",{\"1\":{\"1053\":1}}],[\"在互联网公司也有较大规模的应用\",{\"1\":{\"1053\":1}}],[\"在0\",{\"1\":{\"1029\":1}}],[\"在同⼀个消费者组中\",{\"1\":{\"1027\":1}}],[\"在同一个常量分组中\",{\"1\":{\"211\":1}}],[\"在kafka中\",{\"1\":{\"1025\":1}}],[\"在kafka中zookeeper为broker\",{\"1\":{\"1021\":1}}],[\"在kafka中默认副本的最大数量是10\",{\"1\":{\"1020\":1}}],[\"在kafka的设计中同一个分\",{\"1\":{\"1020\":1}}],[\"在每个partition中\",{\"1\":{\"1025\":1}}],[\"在每个broker上\",{\"1\":{\"1020\":1}}],[\"在每次更新时\",{\"1\":{\"653\":1}}],[\"在每次库存更新时\",{\"1\":{\"644\":1}}],[\"在消息的生产时可以使用一个标识topic来区分\",{\"1\":{\"1018\":1}}],[\"在指定的毫秒数内\",{\"1\":{\"1000\":1}}],[\"在指定的时间内\",{\"1\":{\"981\":1}}],[\"在规定时间内没收到主服务器pong回复\",{\"1\":{\"997\":1}}],[\"在软件的架构中\",{\"1\":{\"990\":1}}],[\"在长期运行的过程中\",{\"1\":{\"985\":1}}],[\"在磁盘上每8个pages将消耗1byte的内存\",{\"1\":{\"965\":1}}],[\"在参考值后面插入值\",{\"1\":{\"934\":1}}],[\"在参考值前面插入值\",{\"1\":{\"934\":1}}],[\"在当前互联网时代中\",{\"1\":{\"1309\":1}}],[\"在当前节点实例上\",{\"1\":{\"911\":1}}],[\"在当前目录初始化go\",{\"1\":{\"456\":1}}],[\"在浏览器中输入地址和端口号为\",{\"1\":{\"852\":1}}],[\"在浏览器访问依然可以正常的执行\",{\"1\":{\"1131\":1}}],[\"在浏览器访问\",{\"1\":{\"739\":1}}],[\"在docker网桥docker0上为容器创建新的网络栈\",{\"1\":{\"1197\":1}}],[\"在data文件夹下创建\",{\"1\":{\"851\":1}}],[\"在discovery\",{\"1\":{\"770\":1}}],[\"在构造查询条件的时候\",{\"1\":{\"834\":1}}],[\"在从库\",{\"1\":{\"825\":1}}],[\"在主库那边\",{\"1\":{\"825\":1}}],[\"在主分支上操作创建分支\",{\"1\":{\"31\":1}}],[\"在事务过程中用来存储二进制日志的缓存\",{\"1\":{\"822\":3}}],[\"在通过关联查询\",{\"1\":{\"820\":1}}],[\"在通过值类型调用指针接收者的方法时\",{\"1\":{\"287\":1}}],[\"在不同partition之间\",{\"1\":{\"1025\":1}}],[\"在不同执行方法相同的逻辑结果下\",{\"1\":{\"779\":1}}],[\"在不考虑排序和分组的情况下\",{\"1\":{\"816\":1}}],[\"在from列表中包含的子查询被标记为derived\",{\"1\":{\"814\":1}}],[\"在fmt\",{\"1\":{\"435\":1}}],[\"在select或where中包含了子查询\",{\"1\":{\"814\":1}}],[\"在select的case中对值为nil的管道进行操作的话\",{\"1\":{\"421\":1}}],[\"在所有组中\",{\"1\":{\"814\":1}}],[\"在默认情况下mysql的慢查询日志记录是关闭的\",{\"1\":{\"813\":1}}],[\"在默认情况下该环境变量是默认启用的\",{\"1\":{\"297\":1}}],[\"在查询中使用索引\",{\"1\":{\"809\":1}}],[\"在查询时\",{\"1\":{\"728\":1}}],[\"在分层rbac中\",{\"1\":{\"1263\":1}}],[\"在分组和排序字句进行数据检索\",{\"1\":{\"809\":1}}],[\"在分布式系统中\",{\"1\":{\"653\":1}}],[\"在表连接的连接条件\",{\"1\":{\"809\":1}}],[\"在说b+树之前我们先了解一下为什么要有b树\",{\"1\":{\"804\":1}}],[\"在真正执行时\",{\"1\":{\"799\":1}}],[\"在建立索引时\",{\"1\":{\"795\":1}}],[\"在建立https连接时\",{\"1\":{\"702\":1}}],[\"在完成经典的\",{\"1\":{\"776\":1}}],[\"在出现异常\",{\"1\":{\"775\":1}}],[\"在elasticsearch\",{\"1\":{\"718\":1,\"719\":1}}],[\"在性能优化方面\",{\"1\":{\"655\":1}}],[\"在性能敏感的地方\",{\"1\":{\"633\":1}}],[\"在性能敏感的场景不建议大量使用\",{\"1\":{\"219\":1}}],[\"在update\",{\"1\":{\"653\":1}}],[\"在limit之前做了较大的数据过滤\",{\"1\":{\"653\":1}}],[\"在业务中通常用于日志收集\",{\"1\":{\"651\":1}}],[\"在应用开发的过程中\",{\"1\":{\"799\":1}}],[\"在应用程序中\",{\"1\":{\"651\":1}}],[\"在应用层中\",{\"1\":{\"641\":1}}],[\"在项目中的话一般不会直接使用驱动来进行数据库操作\",{\"1\":{\"889\":1}}],[\"在项目中\",{\"1\":{\"651\":1}}],[\"在项目中通常用于\",{\"1\":{\"644\":1}}],[\"在处理\",{\"1\":{\"651\":1}}],[\"在特定时间段内能够支持的最大并发用户数\",{\"1\":{\"644\":1}}],[\"在实际的使用情况中大多数都是将模板放在文件中\",{\"1\":{\"1428\":1}}],[\"在实际的开发中\",{\"1\":{\"800\":1}}],[\"在实际开发中一般用的是html\",{\"1\":{\"1414\":1}}],[\"在实际运用中\",{\"1\":{\"1169\":1}}],[\"在实际生产情况中\",{\"1\":{\"996\":1}}],[\"在实际应用中\",{\"1\":{\"798\":1,\"799\":1}}],[\"在实际应用中goto用的很少\",{\"1\":{\"232\":1}}],[\"在实际业务中的应用\",{\"1\":{\"644\":1}}],[\"在库存更新过程中\",{\"1\":{\"644\":1}}],[\"在库存递减过程中遇到内存不足\",{\"1\":{\"644\":1}}],[\"在高并发的情况下\",{\"1\":{\"644\":1}}],[\"在高并发的场景下\",{\"1\":{\"639\":1,\"644\":1}}],[\"在缓存过期时\",{\"1\":{\"641\":2}}],[\"在缓存中解压的依赖源文件都是只读的\",{\"1\":{\"457\":1}}],[\"在写库失败时\",{\"1\":{\"641\":1}}],[\"在写入时传入的数字有以下几个含义\",{\"1\":{\"323\":1}}],[\"在多表\",{\"1\":{\"795\":1}}],[\"在多线程环境下\",{\"1\":{\"639\":1}}],[\"在多个单独列建立独立索引大多数情况不能提高mysql查询性能\",{\"1\":{\"816\":1}}],[\"在多个\",{\"1\":{\"635\":1}}],[\"在多个平台上播放声音的低级库\",{\"1\":{\"126\":1}}],[\"在多个goroutine访问共享资源的时候\",{\"1\":{\"121\":1}}],[\"在类加载时就创建实例\",{\"1\":{\"637\":1}}],[\"在丢包时迅速重传\",{\"1\":{\"636\":1}}],[\"在单个操作时是并发安全的\",{\"1\":{\"635\":1}}],[\"在某些实时性要求较高的场景下\",{\"1\":{\"637\":1}}],[\"在某些情况下\",{\"1\":{\"636\":1,\"656\":1}}],[\"在某个项目中\",{\"1\":{\"637\":1}}],[\"在某时刻的状态\",{\"1\":{\"634\":1}}],[\"在某一时刻\",{\"1\":{\"421\":1}}],[\"在某一个时刻\",{\"1\":{\"415\":1,\"417\":1}}],[\"在资源还需要占用时\",{\"1\":{\"634\":1}}],[\"在基准测试结果中包含内存分配统计信息\",{\"1\":{\"630\":1}}],[\"在控制台做的服务\",{\"1\":{\"615\":1,\"687\":1}}],[\"在百度什么级别\",{\"1\":{\"615\":1,\"687\":1}}],[\"在设计时参考了\",{\"1\":{\"1054\":1}}],[\"在设计数据库表结构时\",{\"1\":{\"799\":1}}],[\"在设计程序的时候如何抉择呢\",{\"1\":{\"573\":1,\"645\":2}}],[\"在设置jvm参数的时候\",{\"1\":{\"597\":1,\"669\":1}}],[\"在线游戏等\",{\"1\":{\"636\":1}}],[\"在线程池中线程复用的情况下\",{\"1\":{\"597\":1,\"669\":1}}],[\"在线编码网站\",{\"0\":{\"79\":1}}],[\"在有序集合中计算指定字典区间内成员数量\",{\"1\":{\"974\":1}}],[\"在有些实际生产中会将默认隔离级别调整至读提交\",{\"1\":{\"584\":1,\"656\":1}}],[\"在有大量输入需要读取的时候\",{\"1\":{\"225\":1}}],[\"在工作中和技术上学到哪些技能\",{\"1\":{\"583\":1,\"655\":2}}],[\"在闭包场景下\",{\"1\":{\"548\":1}}],[\"在父协程中创建一些协程时候创建一些参数\",{\"1\":{\"546\":1}}],[\"在批量任务的处理应用\",{\"1\":{\"545\":1}}],[\"在各种序列化中取别名\",{\"1\":{\"513\":1}}],[\"在结构体不需要解引用就可直接使用\",{\"1\":{\"513\":1}}],[\"在并发操作时候需要用锁或者sync\",{\"1\":{\"512\":1}}],[\"在并发执行测试用例时\",{\"1\":{\"473\":1}}],[\"在刚才的测试方法中\",{\"1\":{\"494\":1}}],[\"在以后模板引擎的使用中\",{\"1\":{\"1415\":1}}],[\"在以下几个方面具有优势\",{\"1\":{\"637\":1}}],[\"在以\",{\"1\":{\"483\":1}}],[\"在以前的版本\",{\"1\":{\"463\":1}}],[\"在测试中\",{\"1\":{\"477\":1}}],[\"在记录日志时输出的行号也是帮助函数的调用者的行号\",{\"1\":{\"472\":1}}],[\"在下面的讲解中我们将会具体展示\",{\"1\":{\"1021\":1}}],[\"在下一轮测试中会继续执行\",{\"1\":{\"471\":1}}],[\"在下载依赖时也可以指定commitid替换语义化版本号\",{\"1\":{\"459\":1}}],[\"在命令行中执行go\",{\"1\":{\"466\":1}}],[\"在命令行中查看数据一般使用top命令\",{\"1\":{\"326\":1}}],[\"在标准库和许多开源框架都能看到测试的身影\",{\"1\":{\"466\":1}}],[\"在mongodb\",{\"1\":{\"873\":1}}],[\"在module的上一行开头注释deprecated来表示该模块已弃用\",{\"1\":{\"459\":1}}],[\"在matchers部分\",{\"1\":{\"1256\":1}}],[\"在master中授权的用户\",{\"1\":{\"822\":1}}],[\"在markdown文件中\",{\"1\":{\"64\":1}}],[\"在mysql中\",{\"1\":{\"797\":1,\"798\":1}}],[\"在mysql8\",{\"1\":{\"782\":1}}],[\"在引用依赖时由于路径都一致\",{\"1\":{\"459\":1}}],[\"在文件的尾部追加如下\",{\"1\":{\"1122\":1}}],[\"在文件中可以发现绝大多数的依赖地址都带有github等字眼\",{\"1\":{\"459\":1}}],[\"在文件io\",{\"1\":{\"220\":1}}],[\"在$gomodcache\",{\"1\":{\"457\":1}}],[\"在依赖地址后面加上\",{\"1\":{\"453\":1}}],[\"在里面搜索著名的web框架gin\",{\"1\":{\"453\":1}}],[\"在上一家公司\",{\"1\":{\"655\":1}}],[\"在上述代码中\",{\"1\":{\"494\":1}}],[\"在上述的地面中\",{\"1\":{\"1426\":1}}],[\"在上述的单元测试中\",{\"1\":{\"474\":1}}],[\"在上述的例子中第一个子测试未执行完毕第二个子测试是不会执行的\",{\"1\":{\"473\":1}}],[\"在上述类型声明中\",{\"1\":{\"383\":1}}],[\"在上面这些api中\",{\"1\":{\"707\":1}}],[\"在上面的go\",{\"1\":{\"459\":1}}],[\"在上面创建一个新项目\",{\"1\":{\"445\":1}}],[\"在今天几乎所有的go项目都在采用go\",{\"1\":{\"442\":1}}],[\"在撰写本文时\",{\"1\":{\"442\":1}}],[\"在计算机学科中\",{\"1\":{\"437\":1}}],[\"在计算sum函数返回值时\",{\"1\":{\"208\":1}}],[\"在读数据的时候都会先获得读锁\",{\"1\":{\"431\":1}}],[\"在相关流程结束后\",{\"1\":{\"428\":1}}],[\"在相应的流程结束后就应该调用cancel函数\",{\"1\":{\"427\":1}}],[\"在后面的文章我会仔细分析redis的vm机制\",{\"1\":{\"965\":1}}],[\"在后续其它模板使用插槽时\",{\"1\":{\"1427\":1}}],[\"在后续的with\",{\"1\":{\"1421\":1}}],[\"在后续的更新中\",{\"1\":{\"294\":1}}],[\"在后续使用时\",{\"1\":{\"1419\":1}}],[\"在后续使用中就不需要再额外的创建对象可以直接复用\",{\"1\":{\"435\":1}}],[\"在后\",{\"1\":{\"419\":1}}],[\"在前\",{\"1\":{\"419\":1}}],[\"在前面的几节已经很多次提到过内置函数new和make\",{\"1\":{\"277\":1}}],[\"在向管道写入数据时必须立刻有其他协程来读取数据\",{\"1\":{\"416\":1}}],[\"在创建模板时从text\",{\"1\":{\"1420\":1}}],[\"在创建索引和维护索引\",{\"1\":{\"809\":1}}],[\"在创建条件变量时\",{\"1\":{\"432\":1}}],[\"在创建上下文时通过闭包将其包装为返回值以供外界调用\",{\"1\":{\"427\":1}}],[\"在创建其他三种上下文时作为父上下文传入\",{\"1\":{\"425\":1}}],[\"在创建管道时\",{\"1\":{\"414\":1}}],[\"在创建一个文件时\",{\"1\":{\"402\":1}}],[\"在过程中\",{\"1\":{\"410\":1}}],[\"在执行的时候\",{\"1\":{\"814\":1}}],[\"在执行的过程中每一个表达式的判断是从左到右\",{\"1\":{\"229\":1}}],[\"在执行过程中临时使用的内存是管理在连接对象里面的\",{\"1\":{\"776\":1}}],[\"在执行时会行尾添加\",{\"1\":{\"468\":1}}],[\"在执行测试时\",{\"1\":{\"467\":1,\"471\":1}}],[\"在执行完毕前\",{\"1\":{\"437\":1}}],[\"在执行最后一个defer时\",{\"1\":{\"396\":1}}],[\"在本地主机和容器内分别创建一个虚拟接口\",{\"1\":{\"1195\":1}}],[\"在本地环境使用主从模式搭建一个拥有三台服务器的\",{\"1\":{\"1002\":1}}],[\"在本例中\",{\"1\":{\"396\":1}}],[\"在本文开头就已经提到过\",{\"1\":{\"258\":1}}],[\"在数据采集\",{\"1\":{\"1055\":1}}],[\"在数据量少时单纯的使用limit\",{\"1\":{\"820\":1}}],[\"在数据库的慢查询日志中可以看到一个\",{\"1\":{\"780\":1}}],[\"在数据包之间添加特定的分隔符\",{\"1\":{\"636\":1}}],[\"在数字的类型转换中\",{\"1\":{\"385\":1}}],[\"在数组初始化时\",{\"1\":{\"239\":1}}],[\"在之前的数据类型的小节中已经简单了介绍过了go中的所有内置的数据类型\",{\"1\":{\"380\":1}}],[\"在pop和peek方法中\",{\"1\":{\"343\":1}}],[\"在泛型结构体中\",{\"1\":{\"338\":1}}],[\"在开发中如何选择一个列作为索引列\",{\"1\":{\"815\":1}}],[\"在开发中\",{\"1\":{\"785\":1}}],[\"在开发时通常会使用匿名空接口来表示接收任何类型的值\",{\"1\":{\"294\":1}}],[\"在开始执行之前\",{\"1\":{\"779\":1}}],[\"在开始编写测试之前\",{\"1\":{\"467\":1}}],[\"在开始之前确保你的版本足以完全支持go\",{\"1\":{\"444\":1}}],[\"在开始之前先简单的了解一下位于runtime包下的两个接口\",{\"1\":{\"347\":1}}],[\"在开始之前\",{\"1\":{\"337\":1}}],[\"在游戏服务器这个领域\",{\"1\":{\"333\":1}}],[\"在得到了采集的数据文件后\",{\"1\":{\"325\":1}}],[\"在此之前为了数据更加多样化\",{\"1\":{\"327\":1}}],[\"在此之前\",{\"1\":{\"322\":1}}],[\"在此前的内容中\",{\"1\":{\"315\":1}}],[\"在没有casbin的情况下\",{\"1\":{\"1240\":1}}],[\"在没有协程来读取之前\",{\"1\":{\"417\":1}}],[\"在没有考虑周全之前\",{\"1\":{\"314\":1}}],[\"在没有泛型之前\",{\"1\":{\"209\":1}}],[\"在传递过后实际上是在c内存和go内存中各自保存了一份\",{\"1\":{\"303\":1}}],[\"在传递给c函数之前要将其转换为\",{\"1\":{\"303\":1}}],[\"在传递给c函数时\",{\"1\":{\"303\":1}}],[\"在casbin中\",{\"1\":{\"1249\":1}}],[\"在cas的例子中\",{\"1\":{\"440\":1}}],[\"在cmd也可以操作\",{\"0\":{\"866\":1}}],[\"在cmd\",{\"1\":{\"852\":1}}],[\"在c中使用malloc创建一个\",{\"1\":{\"303\":1}}],[\"在c函数调用期间cgo会尽量保证内存安全\",{\"1\":{\"300\":1}}],[\"在比较空接口时\",{\"1\":{\"294\":1}}],[\"在调用\",{\"1\":{\"634\":1}}],[\"在调用c函数时可以像go一样用返回值来处理错误\",{\"1\":{\"298\":1}}],[\"在调用方法时会去调用具体类型的具体值\",{\"1\":{\"294\":1}}],[\"在调用一个函数时\",{\"1\":{\"281\":1}}],[\"在方法中对值接收者修改并不会产生任何影响\",{\"1\":{\"287\":1}}],[\"在原来的代码中\",{\"1\":{\"287\":1}}],[\"在循环次数很大或次数不确定时\",{\"1\":{\"284\":1}}],[\"在函数返回之前这些defer描述的函数最后都会被逐个执行\",{\"1\":{\"283\":1}}],[\"在函数内部\",{\"1\":{\"210\":1}}],[\"在grow函数内还能直接修改这两个变量\",{\"1\":{\"282\":1}}],[\"在go并发程序对共享资源进行控制访问的手段\",{\"1\":{\"556\":1}}],[\"在go1\",{\"1\":{\"251\":1,\"264\":1,\"289\":1}}],[\"在golang1\",{\"1\":{\"244\":1}}],[\"在go语言中错误处理以返回值的形式返回\",{\"1\":{\"298\":1}}],[\"在go语言中\",{\"1\":{\"206\":1,\"654\":1}}],[\"在go程序中快速\",{\"1\":{\"143\":1}}],[\"在go中是一个零占用的类型\",{\"1\":{\"651\":1}}],[\"在go中是不支持指针运算的\",{\"1\":{\"276\":1}}],[\"在go中大部分的api都是由标准库testing提供\",{\"1\":{\"466\":1}}],[\"在go中的sort包下提供了官方实现的排序方法\",{\"1\":{\"1375\":1}}],[\"在go中的select监测的元素就是管道\",{\"1\":{\"421\":1}}],[\"在go中的异常有三种级别\",{\"1\":{\"388\":1}}],[\"在go中的类型声明是后置的\",{\"1\":{\"205\":1}}],[\"在go中通过类型声明\",{\"1\":{\"383\":1}}],[\"在go中类似的写法如下\",{\"1\":{\"382\":1}}],[\"在go中有三个经典的反射定律\",{\"1\":{\"349\":1}}],[\"在go中有一个专门的接口类型用于代表所有可比较类型\",{\"1\":{\"294\":1}}],[\"在go中导入import\",{\"1\":{\"301\":1}}],[\"在go中输出有很多中方法\",{\"1\":{\"216\":1}}],[\"在go中内置的有序类型只有数字和字符串\",{\"1\":{\"209\":1}}],[\"在go中所有的花括号都不应该换行\",{\"1\":{\"189\":1}}],[\"在go中\",{\"1\":{\"173\":1,\"196\":1,\"208\":1,\"227\":1,\"232\":1,\"237\":1,\"251\":1,\"258\":1,\"259\":1,\"270\":1,\"277\":1,\"284\":1,\"316\":1,\"346\":1,\"347\":1,\"383\":1,\"385\":1,\"387\":1,\"412\":1,\"421\":1,\"1309\":1,\"1316\":1}}],[\"在go中本地解析和解复用mpeg传输流\",{\"1\":{\"146\":1}}],[\"在go中处理字幕\",{\"1\":{\"146\":1}}],[\"在go中定义计算图\",{\"1\":{\"142\":1}}],[\"在go中实现的多层感知器网络\",{\"1\":{\"142\":1}}],[\"在go中实现的bloom过滤器\",{\"1\":{\"127\":1}}],[\"在go中加载gtfs文件\",{\"1\":{\"132\":1}}],[\"在go中计算levenshtein距离的实现\",{\"1\":{\"127\":1}}],[\"在go代码中嵌入其他语言\",{\"1\":{\"120\":1}}],[\"在正常情况下随着exp函数的调用结束\",{\"1\":{\"282\":1}}],[\"在一个location中\",{\"1\":{\"1139\":1}}],[\"在一个sql语句我们可以通过执行计划分析出慢查询\",{\"1\":{\"901\":1}}],[\"在一个目录中\",{\"1\":{\"481\":1}}],[\"在一些场景下\",{\"1\":{\"644\":1}}],[\"在一些语言中是由垃圾回收机制来管理\",{\"1\":{\"636\":1}}],[\"在一些语言中又被称为lamda表达式\",{\"1\":{\"282\":1}}],[\"在一些情况下我们需要将其序列化成人类能够观察的形式\",{\"1\":{\"1319\":1}}],[\"在一些情况下\",{\"1\":{\"473\":1}}],[\"在一些情况中\",{\"1\":{\"392\":1,\"418\":1}}],[\"在一定程度上保证了性能\",{\"1\":{\"274\":1}}],[\"在编译时\",{\"1\":{\"462\":1}}],[\"在编译后它们会被转换成其它的操作\",{\"1\":{\"303\":1}}],[\"在编译的时候会转换为\",{\"1\":{\"271\":1}}],[\"在编码器\",{\"1\":{\"124\":1}}],[\"在声明结构体字段时\",{\"1\":{\"267\":1}}],[\"在使用unsafe包函数时编辑器甚至会提示你类型不匹配\",{\"1\":{\"1439\":1}}],[\"在使用完ticker后\",{\"1\":{\"1434\":1}}],[\"在使用完timer以后\",{\"1\":{\"1433\":1}}],[\"在使用完一个管道后一定要记得关闭该管道\",{\"1\":{\"414\":1}}],[\"在使用模板参数时\",{\"1\":{\"1417\":1}}],[\"在使用burst缓存处理中\",{\"1\":{\"1156\":1}}],[\"在使用之前你就要先使用sql\",{\"1\":{\"890\":1}}],[\"在使用\",{\"1\":{\"641\":1}}],[\"在使用aop的时候\",{\"1\":{\"597\":1,\"669\":1}}],[\"在使用install命令时\",{\"1\":{\"454\":1}}],[\"在使用第三方依赖时\",{\"1\":{\"453\":1}}],[\"在使用sync\",{\"1\":{\"435\":1}}],[\"在使用时\",{\"1\":{\"434\":1}}],[\"在使用时需要显式的指定字段p\",{\"1\":{\"270\":1}}],[\"在使用类型转换时\",{\"1\":{\"385\":1}}],[\"在使用网页分析时\",{\"1\":{\"327\":1}}],[\"在使用cgo时\",{\"1\":{\"304\":1}}],[\"在使用for\",{\"1\":{\"258\":1}}],[\"在使用数字时\",{\"1\":{\"221\":1}}],[\"在对s2进行读写时\",{\"1\":{\"250\":1}}],[\"在10s之内如果出现的错误次数大于等于5次的时候\",{\"1\":{\"1163\":1}}],[\"在1秒内就可以被索引和完全搜索\",{\"1\":{\"734\":1}}],[\"在1\",{\"1\":{\"244\":1,\"340\":1,\"389\":1}}],[\"在输入输出这方面\",{\"1\":{\"226\":1}}],[\"在os包下有三个外暴露的文件描述符\",{\"1\":{\"215\":1}}],[\"在已经赋值的常量后面的常量可以不用赋值\",{\"1\":{\"211\":1}}],[\"在格式化后\",{\"1\":{\"191\":1}}],[\"在自定义包和函数时命名应当尽量避免与之重复\",{\"1\":{\"172\":1}}],[\"在内的多种操作系统\",{\"1\":{\"153\":1}}],[\"在纯go中实现quic协议\",{\"1\":{\"145\":1}}],[\"在纯go和simd中调整图像大小\",{\"1\":{\"139\":1}}],[\"在给定的语法情况下使用俄语名称\",{\"1\":{\"144\":1}}],[\"在具备了缓存功能后\",{\"1\":{\"121\":1}}],[\"在学习一个框架的时候\",{\"1\":{\"110\":1}}],[\"在早期版本中并没有提供泛型功能\",{\"1\":{\"165\":1}}],[\"在早期我们大部分情况下\",{\"1\":{\"110\":1}}],[\"在早期\",{\"1\":{\"55\":1}}],[\"在仓库中新建一个文件\",{\"1\":{\"19\":1}}],[\"在这期间goroutine将被阻塞\",{\"1\":{\"1435\":1}}],[\"在这里代表的是任意类型\",{\"1\":{\"1438\":1}}],[\"在这里进行拷贝\",{\"1\":{\"1220\":1}}],[\"在这里就要使用国内的镜像\",{\"1\":{\"1184\":1}}],[\"在这里\",{\"1\":{\"1152\":1,\"1160\":1}}],[\"在这里创建git\",{\"1\":{\"18\":1}}],[\"在这种用法中\",{\"1\":{\"1019\":1}}],[\"在这种情况下\",{\"1\":{\"254\":1,\"266\":1}}],[\"在这种情况下如果不能查看修改之前的代码\",{\"1\":{\"9\":1}}],[\"在这个网络下的容器地址\",{\"1\":{\"1197\":1}}],[\"在这个领域\",{\"1\":{\"1019\":1}}],[\"在这个项目中\",{\"1\":{\"463\":1,\"656\":1}}],[\"在这个过程中\",{\"1\":{\"429\":1,\"981\":1}}],[\"在这一小段代码中总共出现了三次if\",{\"1\":{\"388\":1}}],[\"在\",{\"1\":{\"17\":1,\"221\":1,\"475\":1,\"514\":1,\"645\":1,\"649\":1,\"850\":1,\"852\":2,\"1204\":1}}],[\"在2002年以前\",{\"1\":{\"12\":1}}],[\"在提交前先将代码提交到暂存区\",{\"1\":{\"12\":1}}],[\"3参数解析\",{\"0\":{\"1279\":1}}],[\"3c\",{\"1\":{\"1195\":1,\"1367\":1}}],[\"3个worker进程会通过争抢accept\",{\"1\":{\"1128\":1}}],[\"3节点\",{\"1\":{\"1039\":1}}],[\"3～5\",{\"1\":{\"996\":1}}],[\"3k\",{\"1\":{\"909\":1}}],[\"3为您提供了对mongodb\",{\"1\":{\"875\":1}}],[\"3tomcat压力的线程测试\",{\"1\":{\"1160\":1}}],[\"3t\",{\"1\":{\"875\":1}}],[\"3t前身是robomongo\",{\"1\":{\"875\":1}}],[\"3b\",{\"1\":{\"791\":1}}],[\"3pc\",{\"1\":{\"613\":1,\"685\":1}}],[\"3字\",{\"1\":{\"554\":1}}],[\"3s\",{\"1\":{\"477\":1}}],[\"3和1\",{\"1\":{\"458\":1}}],[\"3版本\",{\"1\":{\"458\":1}}],[\"39f4de51ef7d\",{\"1\":{\"454\":1}}],[\"39\",{\"1\":{\"379\":1,\"822\":1}}],[\"38905609893065\",{\"1\":{\"1357\":1}}],[\"38毫秒\",{\"0\":{\"1046\":1}}],[\"387s\",{\"1\":{\"476\":1}}],[\"3870\",{\"1\":{\"476\":1}}],[\"3875中的cgi\",{\"1\":{\"124\":1}}],[\"386412\",{\"1\":{\"476\":1}}],[\"381s\",{\"1\":{\"475\":1}}],[\"38\",{\"1\":{\"326\":1,\"477\":1,\"1303\":1}}],[\"34缩放因子为100\",{\"1\":{\"720\":1}}],[\"348056\",{\"1\":{\"477\":1}}],[\"3489和rfc\",{\"1\":{\"145\":1}}],[\"346408\",{\"1\":{\"477\":1}}],[\"3439\",{\"1\":{\"476\":1}}],[\"3432624\",{\"1\":{\"306\":1}}],[\"3432608\",{\"1\":{\"306\":1}}],[\"3432592\",{\"1\":{\"306\":1}}],[\"3432576\",{\"1\":{\"306\":1}}],[\"3432544\",{\"1\":{\"306\":1}}],[\"3432824\",{\"1\":{\"306\":1}}],[\"344530\",{\"1\":{\"475\":1}}],[\"3428\",{\"1\":{\"475\":1}}],[\"34\",{\"1\":{\"282\":1,\"641\":1,\"651\":2,\"702\":1,\"993\":12}}],[\"3333333333333335\",{\"1\":{\"1389\":1}}],[\"3333333333333333333\",{\"1\":{\"1389\":1}}],[\"3333\",{\"1\":{\"1352\":1}}],[\"33306\",{\"1\":{\"775\":1}}],[\"3326\",{\"1\":{\"1314\":2}}],[\"332\",{\"1\":{\"1078\":1}}],[\"331\",{\"1\":{\"1078\":1}}],[\"3315中所述\",{\"1\":{\"145\":1}}],[\"3308\",{\"1\":{\"822\":1}}],[\"3307\",{\"1\":{\"822\":1}}],[\"3306\",{\"1\":{\"775\":4,\"822\":4,\"891\":1,\"893\":1,\"1081\":2,\"1197\":1,\"1313\":1,\"1315\":1}}],[\"335167\",{\"1\":{\"477\":1}}],[\"335358\",{\"1\":{\"476\":1}}],[\"339\",{\"1\":{\"476\":1}}],[\"339596\",{\"1\":{\"476\":1}}],[\"338957\",{\"1\":{\"476\":1}}],[\"3376\",{\"1\":{\"476\":1}}],[\"33\",{\"1\":{\"258\":3,\"259\":1,\"476\":1,\"641\":1,\"730\":3}}],[\"350\",{\"1\":{\"1078\":3}}],[\"35mn\",{\"0\":{\"604\":1,\"676\":1}}],[\"358059\",{\"1\":{\"477\":1}}],[\"35k\",{\"1\":{\"476\":1}}],[\"356465275\",{\"1\":{\"476\":1}}],[\"351858\",{\"1\":{\"475\":1}}],[\"3579\",{\"1\":{\"475\":1}}],[\"35\",{\"1\":{\"233\":1,\"317\":1,\"641\":1,\"705\":1,\"711\":2,\"892\":1,\"1435\":1}}],[\"30258509299404568401799145468436420760110148862877297603332790\",{\"1\":{\"1345\":1}}],[\"30min\",{\"0\":{\"608\":1,\"680\":1}}],[\"305606659\",{\"1\":{\"498\":2}}],[\"3087837\",{\"1\":{\"477\":1}}],[\"30s\",{\"1\":{\"477\":5}}],[\"30ghz\",{\"1\":{\"475\":1,\"476\":3,\"498\":1}}],[\"3007ms\",{\"1\":{\"1197\":1}}],[\"300秒\",{\"1\":{\"965\":1}}],[\"300\",{\"1\":{\"965\":2,\"981\":2,\"1078\":4,\"1090\":1}}],[\"30000\",{\"1\":{\"1234\":1}}],[\"3000000万次\",{\"1\":{\"821\":1}}],[\"3000000\",{\"1\":{\"820\":5}}],[\"30000000000000004\",{\"1\":{\"385\":1}}],[\"3000\",{\"1\":{\"820\":1}}],[\"30028\",{\"1\":{\"258\":1}}],[\"30\",{\"1\":{\"233\":1,\"269\":1,\"281\":1,\"472\":1,\"473\":1,\"474\":1,\"477\":2,\"584\":1,\"635\":2,\"638\":1,\"641\":1,\"656\":4,\"706\":1,\"721\":1,\"835\":1,\"838\":1,\"863\":2,\"965\":1,\"1000\":1,\"1165\":1,\"1307\":2}}],[\"370\",{\"1\":{\"1078\":1}}],[\"370ms\",{\"1\":{\"820\":1}}],[\"373305\",{\"1\":{\"477\":1}}],[\"372185\",{\"1\":{\"477\":1}}],[\"37\",{\"1\":{\"212\":1,\"477\":1,\"1078\":3,\"1303\":1,\"1435\":1}}],[\"377\",{\"1\":{\"184\":1}}],[\"361408\",{\"1\":{\"477\":1}}],[\"367225\",{\"1\":{\"477\":1}}],[\"363120\",{\"1\":{\"477\":1}}],[\"360\",{\"0\":{\"617\":1,\"618\":1,\"619\":1,\"689\":1,\"690\":1,\"691\":1},\"1\":{\"1078\":4}}],[\"3603459389\",{\"1\":{\"400\":3}}],[\"360entsecgroup\",{\"1\":{\"122\":1}}],[\"36\",{\"1\":{\"208\":2,\"233\":2,\"1035\":1,\"1036\":1,\"1130\":1,\"1135\":3,\"1435\":2}}],[\"324\",{\"1\":{\"1344\":1}}],[\"32454\",{\"1\":{\"1235\":1}}],[\"32454是外部访问端口\",{\"1\":{\"1235\":1}}],[\"325795bd6df82e6ef18ff027f43a189c4ef886a25b95fdc9c5793bc9d7827179\",{\"1\":{\"1197\":1}}],[\"325795bd6df8\",{\"1\":{\"1196\":1}}],[\"3202\",{\"1\":{\"1194\":1}}],[\"32g内存\",{\"1\":{\"1039\":1}}],[\"32767\",{\"1\":{\"720\":1,\"1234\":1,\"1235\":1}}],[\"32768\",{\"1\":{\"319\":4,\"720\":1}}],[\"321789788912372911233\",{\"1\":{\"584\":1,\"656\":4}}],[\"326301\",{\"1\":{\"476\":1}}],[\"3266862\",{\"1\":{\"326\":1}}],[\"32位单精度浮点型\",{\"1\":{\"724\":1}}],[\"32位单精度浮点数\",{\"1\":{\"720\":1}}],[\"32位最大是4字节\",{\"1\":{\"554\":1}}],[\"32位实数和虚数\",{\"1\":{\"199\":1}}],[\"32位浮点数\",{\"1\":{\"198\":1}}],[\"32\",{\"1\":{\"197\":2,\"233\":1,\"258\":3,\"344\":1,\"400\":1,\"428\":1,\"473\":2,\"474\":1,\"477\":1,\"554\":1,\"641\":1,\"786\":2,\"817\":3,\"965\":1,\"1343\":2,\"1390\":1,\"1405\":2}}],[\"32校验和\",{\"1\":{\"124\":2}}],[\"3以太网ii帧和ieee\",{\"1\":{\"145\":1}}],[\"3+进行计算机视觉的go软件包\",{\"1\":{\"139\":1}}],[\"3d照片的解码器和转换工具\",{\"1\":{\"139\":1}}],[\"3d数学软件包\",{\"1\":{\"134\":1}}],[\"3d游戏引擎\",{\"1\":{\"134\":1}}],[\"3所定义的椭圆曲线数据签名算法\",{\"1\":{\"124\":1}}],[\"3所定义的数据签名算法\",{\"1\":{\"124\":1}}],[\"31564e+06\",{\"1\":{\"1390\":1}}],[\"315643e+06\",{\"1\":{\"1390\":1}}],[\"311ms\",{\"1\":{\"810\":1}}],[\"310\",{\"1\":{\"476\":1}}],[\"31016791\",{\"1\":{\"400\":3}}],[\"3174中所定义的sha1哈希算法\",{\"1\":{\"124\":1}}],[\"31\",{\"1\":{\"30\":2,\"641\":1,\"720\":2,\"724\":2,\"1166\":1,\"1225\":2,\"1343\":1}}],[\"3从版本库删除\",{\"0\":{\"27\":1}}],[\"3小节说明\",{\"1\":{\"14\":1}}],[\"3\",{\"0\":{\"20\":1,\"31\":1,\"39\":1,\"45\":1,\"58\":1,\"116\":1,\"152\":1,\"160\":1,\"164\":1,\"165\":1,\"170\":1,\"547\":1,\"721\":1,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"731\":1,\"758\":1,\"778\":1,\"847\":1,\"868\":1,\"965\":1,\"972\":1,\"983\":1,\"987\":1,\"999\":1,\"1004\":1,\"1011\":1,\"1022\":1,\"1023\":1,\"1024\":2,\"1025\":1,\"1026\":1,\"1027\":1,\"1030\":1,\"1037\":1,\"1057\":1,\"1077\":1,\"1083\":1,\"1091\":1,\"1103\":1,\"1148\":1,\"1173\":1,\"1275\":1,\"1289\":1,\"1290\":1,\"1291\":2},\"1\":{\"12\":1,\"19\":1,\"22\":1,\"43\":1,\"54\":1,\"55\":1,\"58\":2,\"79\":1,\"82\":1,\"84\":1,\"139\":1,\"142\":1,\"146\":1,\"179\":1,\"191\":1,\"210\":2,\"212\":5,\"221\":1,\"224\":2,\"233\":11,\"235\":3,\"236\":2,\"239\":4,\"241\":16,\"243\":1,\"244\":1,\"245\":4,\"246\":2,\"247\":6,\"248\":2,\"250\":11,\"251\":2,\"255\":1,\"259\":1,\"260\":4,\"261\":1,\"262\":3,\"263\":2,\"276\":2,\"282\":1,\"283\":3,\"284\":1,\"285\":9,\"299\":1,\"305\":1,\"306\":6,\"310\":3,\"312\":1,\"313\":1,\"318\":1,\"326\":1,\"337\":1,\"338\":1,\"367\":1,\"375\":1,\"384\":1,\"393\":2,\"396\":4,\"412\":4,\"417\":4,\"420\":2,\"421\":2,\"422\":1,\"427\":1,\"428\":1,\"429\":5,\"430\":1,\"431\":3,\"432\":11,\"436\":2,\"449\":1,\"454\":1,\"459\":4,\"460\":5,\"474\":1,\"476\":12,\"491\":1,\"494\":6,\"498\":1,\"499\":2,\"500\":1,\"501\":1,\"505\":1,\"511\":4,\"512\":1,\"548\":1,\"551\":1,\"600\":1,\"601\":1,\"630\":3,\"633\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"641\":1,\"644\":1,\"645\":1,\"649\":1,\"651\":1,\"653\":1,\"654\":5,\"672\":1,\"673\":1,\"704\":2,\"705\":1,\"706\":1,\"709\":1,\"711\":1,\"712\":2,\"717\":1,\"724\":1,\"725\":2,\"726\":1,\"730\":2,\"732\":1,\"733\":1,\"735\":1,\"740\":2,\"741\":3,\"766\":1,\"768\":1,\"774\":1,\"775\":1,\"786\":1,\"791\":1,\"793\":1,\"794\":1,\"799\":1,\"807\":1,\"809\":3,\"811\":2,\"813\":1,\"814\":1,\"816\":2,\"821\":4,\"822\":1,\"825\":1,\"842\":1,\"843\":1,\"849\":2,\"851\":1,\"852\":1,\"861\":1,\"862\":1,\"863\":1,\"881\":3,\"882\":2,\"883\":2,\"884\":1,\"911\":1,\"916\":1,\"965\":1,\"967\":2,\"968\":1,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"993\":1,\"1000\":1,\"1004\":1,\"1010\":7,\"1019\":1,\"1022\":1,\"1023\":1,\"1034\":4,\"1037\":2,\"1052\":3,\"1053\":2,\"1054\":2,\"1055\":1,\"1056\":1,\"1078\":1,\"1093\":1,\"1096\":1,\"1128\":1,\"1164\":4,\"1165\":5,\"1184\":1,\"1193\":2,\"1194\":1,\"1195\":11,\"1196\":8,\"1197\":17,\"1215\":2,\"1223\":3,\"1231\":1,\"1235\":3,\"1274\":1,\"1275\":1,\"1278\":1,\"1281\":1,\"1282\":1,\"1301\":2,\"1307\":1,\"1321\":2,\"1344\":1,\"1345\":1,\"1354\":1,\"1358\":3,\"1360\":1,\"1361\":1,\"1376\":1,\"1377\":1,\"1379\":1,\"1380\":1,\"1381\":1,\"1399\":1,\"1417\":5,\"1420\":2,\"1424\":2,\"1434\":1,\"1443\":5,\"1444\":2,\"1445\":2,\"1446\":2}}],[\"cb\",{\"1\":{\"1404\":1}}],[\"cbba\",{\"1\":{\"1403\":1}}],[\"cbrt\",{\"1\":{\"1360\":2}}],[\"cbytes\",{\"1\":{\"303\":6}}],[\"c58\",{\"1\":{\"1195\":1}}],[\"c71c7cc530f5d800db6c78bc537c9a4764a7895f\",{\"1\":{\"1003\":1}}],[\"cycling\",{\"1\":{\"766\":1}}],[\"cyclicbarrier\",{\"1\":{\"137\":1}}],[\"c0e9867c7d446bff72fe46e7e9fe3455e970a8adb0d3df0e1472d55db2612cd5\",{\"1\":{\"702\":1}}],[\"c＋＋多重继承可能导致循环继承\",{\"1\":{\"565\":1,\"637\":1}}],[\"c＋＋里面的继承和虚函数\",{\"1\":{\"565\":1,\"637\":1}}],[\"c的数据线就行\",{\"1\":{\"516\":1}}],[\"c巨贵\",{\"1\":{\"516\":1}}],[\"c数据线充电就行\",{\"1\":{\"516\":1}}],[\"c数据线\",{\"1\":{\"516\":1}}],[\"c1\",{\"1\":{\"458\":1}}],[\"c95f2b4c22f2\",{\"1\":{\"454\":1}}],[\"ctl\",{\"1\":{\"1189\":2}}],[\"ctrl\",{\"1\":{\"851\":1}}],[\"ctx\",{\"1\":{\"426\":3,\"427\":17,\"428\":3,\"470\":4,\"546\":1,\"745\":3,\"746\":2,\"748\":2,\"749\":3,\"751\":2,\"752\":1,\"754\":2,\"756\":2,\"757\":1,\"758\":1,\"763\":1,\"830\":4,\"833\":1,\"834\":4,\"835\":2,\"836\":4,\"837\":2,\"838\":2,\"1164\":2}}],[\"ctype\",{\"1\":{\"302\":2,\"307\":2}}],[\"cp\",{\"1\":{\"822\":3,\"1010\":9,\"1078\":1,\"1189\":1,\"1223\":1,\"1225\":1}}],[\"cpu核数\",{\"1\":{\"1131\":1}}],[\"cpu个数\",{\"1\":{\"911\":1}}],[\"cpu调度是操作系统中的核心任务\",{\"1\":{\"641\":1}}],[\"cpu调度是哪个\",{\"1\":{\"569\":1,\"641\":2}}],[\"cpu1文件\",{\"1\":{\"630\":1}}],[\"cpu1`\",{\"1\":{\"630\":1}}],[\"cpu1\",{\"1\":{\"630\":1}}],[\"cpu访问内存时\",{\"1\":{\"554\":1}}],[\"cpu是一些关于cpu的信息\",{\"1\":{\"475\":1}}],[\"cpu=2\",{\"1\":{\"475\":1,\"476\":2,\"498\":1}}],[\"cpu使用情况\",{\"1\":{\"475\":1}}],[\"cpuprofile=data\",{\"1\":{\"630\":2}}],[\"cpuprofile=cpu\",{\"1\":{\"497\":1}}],[\"cpuprofile\",{\"1\":{\"469\":1,\"497\":1}}],[\"cpuguy83\",{\"1\":{\"454\":1}}],[\"cpuid\",{\"1\":{\"453\":2,\"459\":1}}],[\"cpu火焰图\",{\"1\":{\"327\":1}}],[\"cpu同理\",{\"1\":{\"326\":1}}],[\"cpu分析图\",{\"1\":{\"327\":1}}],[\"cpu分析\",{\"1\":{\"324\":1}}],[\"cpu\",{\"1\":{\"323\":1,\"468\":1,\"469\":2,\"475\":1,\"476\":3,\"497\":1,\"498\":5,\"634\":2,\"638\":1,\"639\":2,\"644\":1,\"645\":7,\"649\":3,\"655\":3,\"1039\":2,\"1063\":1,\"1068\":1,\"1130\":1,\"1201\":1}}],[\"cp镜像功能奇偶校验\",{\"1\":{\"132\":1}}],[\"c举例\",{\"1\":{\"313\":1}}],[\"cf\",{\"1\":{\"1164\":6}}],[\"cfg\",{\"0\":{\"871\":1},\"1\":{\"702\":1,\"742\":3,\"1303\":3,\"1304\":9,\"1305\":2,\"1306\":6}}],[\"cfflags和ldflags这两个都是gcc的编译选项\",{\"1\":{\"312\":1}}],[\"cflags\",{\"1\":{\"312\":2,\"313\":1}}],[\"c语言并没有像go这样的依赖管理\",{\"1\":{\"311\":1}}],[\"c语言的内存完全是由开发者手动管理\",{\"1\":{\"310\":1}}],[\"c和go的结构体字段的内存对齐规则并不相同\",{\"1\":{\"307\":1}}],[\"c结构体无法被当作匿名结构体嵌入go结构体\",{\"1\":{\"307\":1}}],[\"c中的数组就是一个指向头部元素的指针\",{\"1\":{\"306\":1}}],[\"c中的char对应go中的int8类型\",{\"1\":{\"302\":1}}],[\"c这个包也是不存在的\",{\"1\":{\"303\":1}}],[\"c文件\",{\"1\":{\"312\":1}}],[\"c文件中导入的\",{\"1\":{\"300\":1}}],[\"c文件为如下内容\",{\"1\":{\"300\":1}}],[\"c调用go\",{\"0\":{\"300\":1},\"1\":{\"300\":1}}],[\"c作为传统的系统编程语言性能是非常优秀的\",{\"1\":{\"296\":1}}],[\"c三个数的值分别计算好再赋给它们\",{\"1\":{\"208\":1}}],[\"c++多重继承问题\",{\"1\":{\"637\":1}}],[\"c++多重继承可能导致循环继承\",{\"1\":{\"637\":1}}],[\"c++的继承和虚函数\",{\"1\":{\"637\":1}}],[\"c++的构建工具链\",{\"1\":{\"297\":1}}],[\"c++里面的继承和虚函数\",{\"1\":{\"637\":1}}],[\"c++不支持反射\",{\"1\":{\"573\":1,\"645\":2}}],[\"c++\",{\"0\":{\"168\":1},\"1\":{\"152\":1,\"168\":3,\"268\":2,\"637\":6,\"645\":1,\"964\":1,\"1017\":1,\"1018\":1,\"1054\":2,\"1056\":1,\"1112\":1,\"1184\":1,\"1238\":1,\"1407\":3}}],[\"cidr\",{\"0\":{\"1368\":1},\"1\":{\"1228\":1}}],[\"cidr=192\",{\"1\":{\"1225\":1}}],[\"cidr=10\",{\"1\":{\"1225\":1}}],[\"cidranger\",{\"1\":{\"145\":1}}],[\"ci\",{\"1\":{\"637\":2,\"655\":1,\"817\":1,\"1204\":1}}],[\"city\",{\"1\":{\"584\":1,\"635\":1,\"656\":4,\"726\":3}}],[\"cilium\",{\"1\":{\"454\":1}}],[\"cipher\",{\"1\":{\"124\":1}}],[\"c库的cgo绑定\",{\"1\":{\"144\":1}}],[\"c库的go绑定\",{\"1\":{\"138\":1}}],[\"c库检测和转换功能\",{\"1\":{\"144\":1}}],[\"cg的三色标记和读写屏障\",{\"1\":{\"537\":1}}],[\"cgo的优势会更大一些\",{\"1\":{\"314\":1}}],[\"cgo的平均耗时是纯go的二十几倍\",{\"1\":{\"314\":1}}],[\"cgo的效率并不如纯go\",{\"1\":{\"314\":1}}],[\"cgo禁用了一些参数\",{\"1\":{\"312\":1}}],[\"cgo也支持这些\",{\"1\":{\"311\":1}}],[\"cgo不支持c中的函数指针\",{\"1\":{\"310\":1}}],[\"cgo之间相互调用最大的问题就是两门语言的内存模型并不相同\",{\"1\":{\"310\":1}}],[\"cgo就会忽略这类结构体成员\",{\"1\":{\"307\":1}}],[\"cgo同时也对<stdint\",{\"1\":{\"304\":1}}],[\"cgo同样支持c调用go\",{\"1\":{\"296\":1}}],[\"cgo提供了一些伪函数用于在c和go之间传递字符串和字节切片\",{\"1\":{\"303\":1}}],[\"cgo给常用类型\",{\"1\":{\"301\":1}}],[\"cgo对c与go之间的类型做了一个映射\",{\"1\":{\"301\":1}}],[\"cgo对此做了兼容\",{\"1\":{\"298\":1}}],[\"cgo支持导出go函数让c调用\",{\"1\":{\"300\":1}}],[\"cgo支持直接把c代码写在go源文件中\",{\"1\":{\"298\":1}}],[\"cgo\",{\"0\":{\"296\":1},\"1\":{\"296\":3,\"297\":4,\"299\":2,\"300\":7,\"304\":3,\"305\":1,\"312\":2,\"313\":2,\"314\":4}}],[\"cgo包装器\",{\"1\":{\"144\":1}}],[\"cgo结合为icu4c\",{\"1\":{\"144\":1}}],[\"cgo与yandex\",{\"1\":{\"144\":1}}],[\"cgi\",{\"1\":{\"124\":1}}],[\"c4go\",{\"1\":{\"136\":1}}],[\"c\",{\"0\":{\"168\":1,\"1086\":1,\"1156\":1},\"1\":{\"127\":1,\"130\":2,\"139\":1,\"142\":1,\"150\":1,\"152\":1,\"161\":1,\"168\":3,\"193\":1,\"208\":13,\"211\":1,\"221\":3,\"229\":2,\"230\":1,\"259\":1,\"260\":3,\"261\":2,\"262\":6,\"263\":4,\"273\":3,\"280\":5,\"282\":3,\"293\":13,\"296\":1,\"297\":4,\"298\":10,\"299\":6,\"300\":17,\"301\":14,\"302\":7,\"303\":44,\"304\":37,\"305\":8,\"306\":10,\"307\":4,\"308\":5,\"309\":8,\"310\":7,\"312\":6,\"313\":6,\"314\":4,\"339\":2,\"344\":1,\"385\":3,\"396\":10,\"400\":1,\"414\":1,\"419\":1,\"421\":5,\"426\":5,\"427\":4,\"432\":3,\"469\":1,\"503\":1,\"513\":1,\"573\":1,\"621\":1,\"633\":1,\"645\":3,\"693\":1,\"786\":1,\"813\":4,\"814\":4,\"851\":1,\"863\":2,\"908\":1,\"927\":2,\"934\":1,\"939\":2,\"1010\":2,\"1018\":1,\"1028\":1,\"1047\":8,\"1078\":3,\"1092\":13,\"1164\":2,\"1166\":2,\"1171\":1,\"1238\":3,\"1275\":2,\"1277\":2,\"1280\":12,\"1281\":15,\"1282\":4,\"1283\":13,\"1286\":5,\"1289\":4,\"1392\":2,\"1402\":4,\"1407\":2,\"1409\":2,\"1433\":1,\"1434\":1}}],[\"cms系统0\",{\"1\":{\"625\":1,\"697\":1}}],[\"cms\",{\"1\":{\"588\":4,\"660\":4}}],[\"cmp\",{\"1\":{\"209\":3,\"344\":1}}],[\"cmplx\",{\"1\":{\"124\":1,\"1308\":1}}],[\"cmd了解命令的更多有关信息\",{\"1\":{\"456\":1}}],[\"cmdline\",{\"1\":{\"324\":3}}],[\"cmd\",{\"1\":{\"122\":1,\"296\":1,\"446\":1,\"447\":1,\"448\":2,\"449\":6,\"450\":2,\"454\":1,\"457\":1,\"464\":1,\"852\":1,\"1078\":3,\"1164\":2,\"1193\":2,\"1280\":1}}],[\"cs\",{\"1\":{\"802\":1,\"803\":1,\"805\":1}}],[\"csdn\",{\"1\":{\"523\":1}}],[\"cst\",{\"1\":{\"326\":2,\"1082\":2,\"1429\":1,\"1432\":1,\"1433\":1,\"1434\":3,\"1435\":2}}],[\"cstring\",{\"1\":{\"297\":1,\"303\":6,\"307\":1}}],[\"css和nw\",{\"1\":{\"138\":1}}],[\"css\",{\"1\":{\"138\":2,\"645\":1,\"1136\":4,\"1142\":6,\"1428\":1}}],[\"css内衬为您的html电子邮件\",{\"1\":{\"129\":1}}],[\"csharp\",{\"1\":{\"136\":1}}],[\"csv\",{\"1\":{\"124\":2,\"132\":1,\"1244\":1,\"1245\":1}}],[\"csrf\",{\"1\":{\"122\":2}}],[\"cutset\",{\"1\":{\"1410\":3}}],[\"cut\",{\"1\":{\"1400\":7}}],[\"cutlogs\",{\"1\":{\"1174\":4,\"1175\":1}}],[\"cuisine\",{\"1\":{\"880\":2,\"881\":5,\"882\":1,\"883\":1,\"884\":2}}],[\"cusid\",{\"1\":{\"810\":2}}],[\"cus\",{\"1\":{\"810\":4,\"814\":7,\"820\":1}}],[\"customtimeformatencoder\",{\"1\":{\"1303\":2}}],[\"customclaims\",{\"1\":{\"1090\":2}}],[\"customer\",{\"1\":{\"732\":3,\"733\":4,\"814\":3}}],[\"custom\",{\"1\":{\"64\":2,\"742\":1,\"849\":1}}],[\"cum\",{\"1\":{\"326\":6}}],[\"cuckoo过滤器\",{\"1\":{\"127\":1}}],[\"cuckoofilter\",{\"1\":{\"127\":1}}],[\"cursor\",{\"1\":{\"834\":4,\"863\":9,\"884\":2,\"972\":1,\"973\":1,\"974\":1}}],[\"current\",{\"1\":{\"454\":1,\"653\":7,\"771\":1,\"878\":1,\"886\":1,\"1003\":1,\"1164\":1}}],[\"currency\",{\"1\":{\"133\":1}}],[\"curl\",{\"1\":{\"328\":1,\"1078\":1,\"1081\":1,\"1220\":1,\"1231\":1,\"1280\":3,\"1281\":1}}],[\"curt\",{\"1\":{\"124\":1}}],[\"curve\",{\"1\":{\"124\":1}}],[\"cri\",{\"1\":{\"1223\":13,\"1225\":4,\"1226\":4,\"1227\":2}}],[\"crit\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"cr\",{\"1\":{\"1221\":1}}],[\"crm\",{\"1\":{\"794\":2}}],[\"cron表达式是\",{\"1\":{\"1175\":1}}],[\"crond\",{\"1\":{\"1175\":5}}],[\"cron\",{\"1\":{\"653\":1}}],[\"crontabs\",{\"1\":{\"1175\":1}}],[\"crontab\",{\"1\":{\"84\":1,\"1175\":4}}],[\"credentials\",{\"1\":{\"463\":1}}],[\"creators=true\",{\"1\":{\"822\":2}}],[\"creators=1\",{\"1\":{\"820\":1}}],[\"creators\",{\"1\":{\"820\":1}}],[\"creation\",{\"1\":{\"705\":2}}],[\"creationtime\",{\"1\":{\"400\":1}}],[\"creating\",{\"1\":{\"445\":1,\"453\":1}}],[\"creat\",{\"1\":{\"400\":1}}],[\"create命令创建一个新的网络\",{\"1\":{\"1197\":1}}],[\"createtime\",{\"1\":{\"1082\":1}}],[\"createtopic\",{\"1\":{\"1037\":2}}],[\"createuser\",{\"1\":{\"870\":1,\"873\":1}}],[\"createcollection\",{\"1\":{\"857\":1}}],[\"createindex\",{\"1\":{\"745\":3}}],[\"createindices\",{\"1\":{\"704\":3}}],[\"created\",{\"1\":{\"653\":2,\"705\":2,\"709\":2,\"745\":1,\"746\":3,\"756\":2,\"757\":1,\"758\":1,\"759\":4,\"763\":1,\"1034\":1,\"1187\":1,\"1197\":1}}],[\"createslice\",{\"1\":{\"548\":1}}],[\"create|o\",{\"1\":{\"402\":1}}],[\"create|os\",{\"1\":{\"402\":3,\"403\":2,\"410\":1}}],[\"create函数用于创建文件\",{\"1\":{\"402\":1}}],[\"create一起使用\",{\"1\":{\"400\":1}}],[\"create\",{\"1\":{\"323\":3,\"400\":2,\"401\":2,\"402\":1,\"406\":5,\"427\":1,\"449\":5,\"653\":2,\"704\":1,\"709\":4,\"713\":4,\"741\":6,\"794\":2,\"810\":3,\"815\":1,\"817\":1,\"818\":1,\"820\":2,\"892\":1,\"1010\":1,\"1029\":3,\"1034\":2,\"1035\":1,\"1037\":2,\"1164\":4,\"1197\":5,\"1226\":1,\"1231\":1,\"1235\":3}}],[\"craneb\",{\"1\":{\"293\":5}}],[\"cranea\",{\"1\":{\"293\":5}}],[\"crane\",{\"1\":{\"293\":6}}],[\"crash包无法访问baz包中的类型\",{\"1\":{\"176\":1}}],[\"crash\",{\"1\":{\"176\":1}}],[\"crunch\",{\"1\":{\"127\":1}}],[\"crc64\",{\"1\":{\"124\":1}}],[\"crc32\",{\"1\":{\"124\":1}}],[\"crl和ocsp的asn\",{\"1\":{\"124\":1}}],[\"cryptography\",{\"1\":{\"124\":1}}],[\"crypto\",{\"1\":{\"124\":2,\"453\":2,\"459\":3,\"1308\":1}}],[\"ccc\",{\"1\":{\"1378\":1}}],[\"cccc\",{\"1\":{\"230\":1}}],[\"cc\",{\"1\":{\"122\":1,\"1090\":1}}],[\"ceil\",{\"1\":{\"1354\":1}}],[\"centos实现\",{\"1\":{\"1001\":1}}],[\"centos7\",{\"1\":{\"775\":3,\"1081\":1}}],[\"centos\",{\"1\":{\"774\":1,\"775\":3,\"1078\":2,\"1081\":1,\"1109\":1,\"1184\":3,\"1194\":4,\"1196\":1,\"1197\":3,\"1218\":1,\"1220\":4,\"1221\":1}}],[\"ce\",{\"1\":{\"774\":3,\"1184\":7,\"1221\":4}}],[\"cel\",{\"1\":{\"130\":1}}],[\"celeriac\",{\"1\":{\"128\":1}}],[\"cedar\",{\"1\":{\"122\":1}}],[\"certificatefingerprint\",{\"1\":{\"702\":1}}],[\"certificate\",{\"1\":{\"84\":2,\"1225\":1,\"1228\":1}}],[\"cert\",{\"1\":{\"84\":3,\"1225\":2,\"1226\":1,\"1227\":1}}],[\"claims\",{\"1\":{\"1092\":6}}],[\"class\",{\"1\":{\"205\":1,\"1165\":1,\"1166\":1}}],[\"cleanuphelper\",{\"1\":{\"472\":3,\"473\":3,\"474\":2}}],[\"cleanup的例子就可以修改为帮助函数\",{\"1\":{\"472\":1}}],[\"cleanup\",{\"1\":{\"471\":2,\"472\":2,\"473\":2,\"474\":2,\"634\":1}}],[\"cleanup来注册一个收尾函数专门做此事\",{\"1\":{\"471\":1}}],[\"clean\",{\"1\":{\"456\":1,\"457\":1,\"1220\":1}}],[\"clearcache\",{\"1\":{\"703\":1}}],[\"clear会将切片内所有的值置为零值\",{\"1\":{\"251\":1}}],[\"clear\",{\"0\":{\"251\":1},\"1\":{\"251\":1,\"264\":1}}],[\"cloud\",{\"1\":{\"460\":1,\"639\":1,\"655\":1,\"1072\":1}}],[\"cloudforest\",{\"1\":{\"142\":1}}],[\"cloning\",{\"1\":{\"445\":1}}],[\"clonedatabase\",{\"1\":{\"856\":2}}],[\"clone函数\",{\"1\":{\"256\":1}}],[\"clone\",{\"1\":{\"12\":1,\"17\":1,\"55\":3,\"58\":1,\"84\":1,\"241\":1,\"256\":1,\"445\":1,\"703\":1,\"1396\":2}}],[\"closewait出现\",{\"1\":{\"618\":1,\"690\":1}}],[\"close函数的形参是一个只写通道\",{\"1\":{\"419\":1}}],[\"closed\",{\"1\":{\"390\":1}}],[\"close\",{\"1\":{\"320\":1,\"388\":1,\"400\":2,\"401\":2,\"402\":2,\"403\":4,\"406\":1,\"408\":1,\"410\":2,\"414\":2,\"415\":1,\"416\":2,\"417\":5,\"418\":7,\"419\":1,\"420\":2,\"421\":13,\"514\":1,\"633\":1,\"703\":1,\"893\":1,\"913\":1,\"1035\":1,\"1037\":1,\"1047\":4,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1374\":2}}],[\"closure\",{\"1\":{\"282\":1}}],[\"clrs研究\",{\"1\":{\"127\":1}}],[\"cli创建redis集群\",{\"1\":{\"1010\":1}}],[\"climbstairs\",{\"1\":{\"654\":1}}],[\"cli\",{\"1\":{\"122\":2,\"335\":1,\"874\":1,\"963\":1,\"964\":2,\"994\":1,\"1010\":13,\"1184\":2,\"1221\":1}}],[\"clients\",{\"1\":{\"965\":1}}],[\"client用于后续操作es\",{\"1\":{\"744\":1}}],[\"clientcodec和servercodec\",{\"1\":{\"124\":1}}],[\"clientv3\",{\"1\":{\"122\":1}}],[\"client\",{\"1\":{\"122\":1,\"454\":1,\"702\":7,\"704\":2,\"705\":2,\"706\":2,\"707\":2,\"709\":2,\"710\":2,\"711\":2,\"712\":2,\"713\":6,\"744\":1,\"745\":3,\"746\":2,\"748\":2,\"749\":2,\"751\":2,\"752\":1,\"754\":2,\"756\":2,\"757\":1,\"758\":1,\"763\":1,\"766\":6,\"771\":2,\"830\":4,\"833\":1,\"834\":2,\"835\":2,\"836\":4,\"837\":2,\"838\":1,\"908\":2,\"1035\":3,\"1047\":3,\"1116\":6,\"1132\":2,\"1173\":2,\"1184\":2,\"1332\":1,\"1333\":3,\"1334\":3}}],[\"clusterrole=cluster\",{\"1\":{\"1235\":1}}],[\"clusterrolebinding\",{\"1\":{\"1235\":1}}],[\"clusterip\",{\"1\":{\"1232\":1,\"1234\":1}}],[\"cluster解决的是扩展性问题\",{\"1\":{\"1005\":1}}],[\"cluster文件夹\",{\"1\":{\"767\":1}}],[\"cluster\",{\"1\":{\"122\":1,\"142\":1,\"702\":3,\"768\":3,\"769\":1,\"770\":2,\"1006\":1,\"1010\":55,\"1020\":1,\"1046\":1,\"1047\":5,\"1052\":1,\"1225\":4,\"1226\":1,\"1227\":1,\"1235\":1}}],[\"cd等现代化开发流程\",{\"1\":{\"655\":1}}],[\"cdn的理解\",{\"1\":{\"615\":1,\"687\":1}}],[\"cd\",{\"1\":{\"84\":1,\"312\":1,\"445\":1,\"637\":1,\"740\":1,\"964\":1,\"1010\":1,\"1028\":1,\"1031\":1,\"1033\":1,\"1110\":1,\"1115\":1,\"1171\":1,\"1204\":1,\"1205\":1,\"1243\":1}}],[\"calico\",{\"1\":{\"1228\":7}}],[\"callgrind\",{\"1\":{\"326\":2}}],[\"call\",{\"1\":{\"320\":1,\"365\":2,\"371\":1,\"378\":1,\"470\":1,\"820\":1,\"1222\":2,\"1420\":1}}],[\"calling\",{\"1\":{\"303\":2}}],[\"callerencoder\",{\"1\":{\"1302\":3}}],[\"callerkey\",{\"1\":{\"1302\":3,\"1303\":1}}],[\"caller\",{\"1\":{\"303\":2,\"1303\":5,\"1306\":1}}],[\"called\",{\"1\":{\"289\":1}}],[\"ca\",{\"1\":{\"1225\":2,\"1226\":1,\"1227\":1}}],[\"carrier\",{\"1\":{\"1194\":1}}],[\"caused\",{\"1\":{\"717\":1}}],[\"cause\",{\"1\":{\"717\":1}}],[\"caution\",{\"1\":{\"61\":1,\"62\":1}}],[\"cached\",{\"1\":{\"468\":1,\"486\":3,\"993\":1,\"1164\":1}}],[\"cache\",{\"1\":{\"457\":2,\"460\":2,\"486\":1,\"641\":1,\"822\":3,\"1133\":1}}],[\"cache实现\",{\"1\":{\"122\":1}}],[\"categoryname\",{\"1\":{\"745\":1,\"746\":3}}],[\"categoryid\",{\"1\":{\"745\":1,\"746\":3,\"749\":1,\"1082\":1}}],[\"cat\",{\"1\":{\"453\":2,\"649\":2,\"1196\":1,\"1222\":3,\"1223\":2,\"1228\":2}}],[\"catch简洁一些\",{\"1\":{\"388\":1}}],[\"catch\",{\"1\":{\"388\":2}}],[\"cayley\",{\"1\":{\"334\":1}}],[\"caddy\",{\"1\":{\"332\":1}}],[\"capitalcolorlevelencoder\",{\"1\":{\"1303\":1}}],[\"capturing\",{\"1\":{\"318\":1}}],[\"cap\",{\"1\":{\"240\":1,\"244\":1,\"250\":7,\"375\":1,\"401\":2,\"417\":1,\"435\":1}}],[\"casbin使用两个配置文件来设置控制访问\",{\"0\":{\"1244\":1}}],[\"casbin官网\",{\"1\":{\"1238\":1}}],[\"casbin简介\",{\"0\":{\"1238\":1}}],[\"casbin\",{\"0\":{\"1237\":1},\"1\":{\"1238\":3,\"1239\":1,\"1243\":2,\"1245\":4}}],[\"cassandra\",{\"1\":{\"1076\":1,\"1077\":1}}],[\"cassandra或postgresql构建的\",{\"1\":{\"1073\":1}}],[\"cassandra和zookeeper\",{\"1\":{\"1072\":1}}],[\"cas相关的函数则需要传入地址\",{\"1\":{\"440\":1}}],[\"cas会将期望值与当前内存值进行比较\",{\"1\":{\"440\":1}}],[\"cas\",{\"0\":{\"440\":1}}],[\"case2\",{\"1\":{\"230\":1}}],[\"case1\",{\"1\":{\"230\":1}}],[\"case\",{\"1\":{\"178\":1,\"213\":4,\"230\":13,\"309\":2,\"337\":2,\"339\":2,\"387\":3,\"421\":18,\"426\":2,\"427\":4,\"428\":1,\"470\":3,\"1047\":4,\"1164\":2,\"1303\":2,\"1305\":5,\"1433\":1,\"1434\":1}}],[\"cast\",{\"1\":{\"122\":1}}],[\"cancel的时间\",{\"1\":{\"546\":1}}],[\"cancellation\",{\"1\":{\"470\":1}}],[\"cancelmail\",{\"1\":{\"427\":2}}],[\"cancelauth\",{\"1\":{\"427\":2}}],[\"canceled\",{\"1\":{\"427\":5}}],[\"canceler\",{\"1\":{\"427\":1}}],[\"cancelfunc\",{\"1\":{\"427\":3,\"428\":3,\"546\":3}}],[\"cancel方法不对外暴露\",{\"1\":{\"427\":1}}],[\"cancel\",{\"1\":{\"427\":5,\"428\":2,\"470\":2,\"546\":1}}],[\"cancelctxmail\",{\"1\":{\"427\":2}}],[\"cancelctxauth\",{\"1\":{\"427\":2}}],[\"cancelctx译为可取消的上下文\",{\"1\":{\"427\":1}}],[\"cancelctx以及timerctx都实现了canceler接口\",{\"1\":{\"427\":1}}],[\"cancelctx\",{\"0\":{\"427\":1},\"1\":{\"423\":1,\"427\":2}}],[\"can\",{\"1\":{\"289\":2,\"293\":2,\"742\":1,\"993\":2,\"994\":1,\"1225\":2,\"1245\":1}}],[\"cannot\",{\"1\":{\"253\":1,\"287\":1,\"302\":1,\"381\":1,\"400\":1,\"419\":1,\"427\":1,\"1245\":1}}],[\"canopus\",{\"1\":{\"145\":1}}],[\"canvas\",{\"1\":{\"139\":1}}],[\"cairo\",{\"1\":{\"139\":1}}],[\"cameron\",{\"1\":{\"139\":1}}],[\"ca机构颁发ca证书\",{\"1\":{\"85\":1}}],[\"ca证书是权威的可确保证书内容的正确性并携带服务器的公钥\",{\"1\":{\"83\":1}}],[\"ca证书\",{\"1\":{\"83\":1}}],[\"chown\",{\"1\":{\"1225\":1}}],[\"chore\",{\"1\":{\"449\":3}}],[\"chmod\",{\"1\":{\"981\":1,\"1174\":1,\"1223\":1,\"1231\":1}}],[\"china\",{\"1\":{\"726\":2,\"835\":1}}],[\"children\",{\"1\":{\"584\":1,\"656\":5}}],[\"chenzhuoyu\",{\"1\":{\"453\":2,\"459\":3}}],[\"checkredirect\",{\"1\":{\"1332\":1}}],[\"checkpermi\",{\"1\":{\"1245\":5}}],[\"checks\",{\"1\":{\"892\":2}}],[\"checksum\",{\"1\":{\"132\":1,\"388\":2}}],[\"check\",{\"1\":{\"453\":1,\"1029\":1,\"1228\":1}}],[\"checkout\",{\"1\":{\"55\":1,\"58\":2}}],[\"chc\",{\"1\":{\"421\":14}}],[\"chb\",{\"1\":{\"421\":14}}],[\"chr\",{\"1\":{\"417\":4}}],[\"chw\",{\"1\":{\"417\":4}}],[\"ch\",{\"1\":{\"302\":3,\"308\":1,\"413\":1,\"415\":2,\"416\":8,\"417\":18,\"418\":7,\"419\":5,\"420\":11,\"421\":4,\"651\":3,\"654\":6,\"1380\":1,\"1381\":1}}],[\"chagnsah\",{\"1\":{\"884\":1}}],[\"cha\",{\"1\":{\"421\":19}}],[\"charset=utf\",{\"1\":{\"1331\":1}}],[\"charset=utf8mb4\",{\"1\":{\"817\":1}}],[\"chars\",{\"1\":{\"820\":2,\"1398\":1,\"1404\":2}}],[\"character\",{\"1\":{\"794\":1,\"892\":4}}],[\"characters\",{\"1\":{\"258\":1}}],[\"char类型\",{\"1\":{\"303\":1}}],[\"char对应go中的uint8也就是byte类型\",{\"1\":{\"302\":1}}],[\"char了\",{\"1\":{\"301\":1}}],[\"charlie\",{\"1\":{\"281\":1}}],[\"char\",{\"0\":{\"302\":1},\"1\":{\"205\":1,\"300\":2,\"301\":4,\"302\":7,\"303\":11,\"304\":4,\"307\":2,\"308\":1,\"587\":1,\"633\":4,\"659\":1,\"786\":2,\"1164\":8,\"1447\":2}}],[\"chan等等\",{\"1\":{\"529\":1}}],[\"chan是引用类型\",{\"1\":{\"419\":1}}],[\"chan<\",{\"1\":{\"414\":1,\"418\":1,\"419\":2,\"421\":2}}],[\"chan\",{\"1\":{\"178\":1,\"201\":1,\"277\":1,\"351\":3,\"360\":2,\"377\":1,\"385\":4,\"413\":1,\"414\":3,\"415\":1,\"416\":2,\"417\":7,\"418\":8,\"419\":4,\"420\":3,\"421\":15,\"424\":2,\"425\":1,\"427\":1,\"545\":2,\"546\":1,\"554\":1,\"634\":1,\"651\":1,\"654\":3}}],[\"channel就会收到消息并关闭\",{\"1\":{\"1433\":1}}],[\"channel就是为此而生\",{\"1\":{\"413\":1}}],[\"channel有缓冲和无缓冲的区别\",{\"1\":{\"563\":1,\"635\":2}}],[\"channel的缓冲区大小限制了同时能够处理的goroutine数量\",{\"1\":{\"654\":1}}],[\"channel的底层实现\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"channel的使用注意\",{\"0\":{\"535\":1}}],[\"channel会有一个取消信号\",{\"1\":{\"546\":1}}],[\"channel通知\",{\"0\":{\"544\":1}}],[\"channel也是并发安全的\",{\"1\":{\"535\":1}}],[\"channel使用需要注意什么\",{\"1\":{\"530\":1}}],[\"channel\",{\"1\":{\"151\":1,\"164\":1,\"412\":1,\"413\":1,\"419\":1,\"524\":1,\"543\":1,\"544\":1,\"633\":8,\"635\":4,\"651\":2,\"953\":3}}],[\"channels\",{\"1\":{\"151\":1}}],[\"changed\",{\"1\":{\"449\":6}}],[\"change\",{\"1\":{\"77\":1,\"822\":1,\"825\":3}}],[\"chasquid\",{\"1\":{\"129\":1}}],[\"chsrc\",{\"0\":{\"77\":1},\"1\":{\"77\":5}}],[\"cnphp\",{\"1\":{\"1133\":1}}],[\"cnf配置如下\",{\"1\":{\"822\":1}}],[\"cnf\",{\"1\":{\"822\":6}}],[\"cnf和\",{\"1\":{\"822\":1}}],[\"cn\",{\"1\":{\"55\":1,\"144\":1,\"451\":2,\"736\":2,\"737\":1,\"771\":1,\"836\":4,\"841\":1,\"955\":1,\"1073\":1,\"1193\":3,\"1221\":1,\"1225\":1,\"1312\":1,\"1442\":1}}],[\"cnblogs\",{\"1\":{\"49\":1,\"1175\":1}}],[\"cjm123\",{\"1\":{\"49\":1}}],[\"copied\",{\"1\":{\"1411\":2}}],[\"copycheck\",{\"1\":{\"1411\":1}}],[\"copys\",{\"1\":{\"1396\":3}}],[\"copying\",{\"1\":{\"1225\":1}}],[\"copyright\",{\"1\":{\"1164\":2}}],[\"copydir\",{\"1\":{\"410\":1}}],[\"copybuffer来指定缓冲区大小\",{\"1\":{\"403\":1}}],[\"copy函数\",{\"1\":{\"403\":1}}],[\"copy\",{\"1\":{\"5\":1,\"132\":1,\"247\":1,\"256\":1,\"388\":1,\"403\":3,\"410\":1,\"511\":1,\"1193\":3}}],[\"cow\",{\"1\":{\"980\":1}}],[\"cos\",{\"0\":{\"1363\":1},\"1\":{\"639\":1,\"1363\":2}}],[\"cosiner\",{\"1\":{\"454\":1}}],[\"cookie相关配置\",{\"1\":{\"1332\":1}}],[\"cookie名称\",{\"1\":{\"1133\":1}}],[\"cookie和session的区别\",{\"1\":{\"590\":1,\"662\":1}}],[\"cookie\",{\"1\":{\"569\":1,\"611\":1,\"619\":1,\"641\":6,\"683\":1,\"691\":1,\"924\":2,\"1133\":1,\"1282\":4}}],[\"coverage\",{\"1\":{\"477\":6}}],[\"coverprofile\",{\"1\":{\"469\":1}}],[\"covermode\",{\"1\":{\"469\":1}}],[\"cover\",{\"1\":{\"469\":2}}],[\"co\",{\"1\":{\"460\":1,\"736\":2,\"737\":1,\"771\":1}}],[\"corporation\",{\"1\":{\"794\":1}}],[\"corpus\",{\"1\":{\"477\":1}}],[\"cors\",{\"1\":{\"768\":2,\"769\":2,\"770\":2,\"1087\":1}}],[\"coroutine\",{\"1\":{\"412\":1}}],[\"coredns等\",{\"1\":{\"655\":1}}],[\"core\",{\"1\":{\"454\":2,\"475\":1,\"476\":3,\"498\":1,\"1078\":1,\"1164\":1,\"1306\":2}}],[\"core设备的简单框架\",{\"1\":{\"140\":1}}],[\"coreos\",{\"1\":{\"122\":1}}],[\"cockroach\",{\"1\":{\"334\":1}}],[\"courselist\",{\"1\":{\"1166\":1}}],[\"could\",{\"1\":{\"825\":1}}],[\"cout\",{\"1\":{\"276\":1}}],[\"count2\",{\"1\":{\"884\":2}}],[\"count1\",{\"1\":{\"884\":4}}],[\"countdocuments\",{\"1\":{\"884\":1}}],[\"countdata\",{\"1\":{\"884\":4}}],[\"count类型用于统计字符串中的单词数量\",{\"1\":{\"733\":1}}],[\"counts\",{\"1\":{\"633\":3}}],[\"count++\",{\"1\":{\"514\":1}}],[\"counter=1\",{\"1\":{\"825\":1}}],[\"counter\",{\"1\":{\"514\":1}}],[\"count=3\",{\"1\":{\"487\":1}}],[\"count=5\",{\"1\":{\"476\":2}}],[\"count=2\",{\"1\":{\"471\":1,\"475\":1}}],[\"count=1`\",{\"1\":{\"630\":1}}],[\"count=1\",{\"1\":{\"468\":1,\"486\":2,\"502\":1,\"630\":1}}],[\"counting\",{\"1\":{\"445\":1,\"449\":1}}],[\"count\",{\"0\":{\"486\":1,\"733\":1},\"1\":{\"127\":1,\"211\":1,\"417\":5,\"429\":3,\"430\":3,\"431\":4,\"432\":4,\"440\":5,\"469\":2,\"487\":1,\"514\":3,\"733\":1,\"786\":1,\"813\":1,\"855\":1,\"861\":4,\"863\":1,\"884\":2,\"949\":1,\"971\":1,\"972\":2,\"973\":3,\"974\":3,\"1399\":4,\"1406\":1}}],[\"coap客户端\",{\"1\":{\"145\":1}}],[\"col\",{\"1\":{\"815\":1}}],[\"column\",{\"1\":{\"810\":4,\"848\":1}}],[\"collate\",{\"1\":{\"892\":4}}],[\"collate=utf8mb4\",{\"1\":{\"817\":1}}],[\"collada\",{\"1\":{\"134\":1}}],[\"collections\",{\"1\":{\"855\":1,\"857\":1}}],[\"collection\",{\"1\":{\"328\":1,\"833\":1,\"834\":2,\"835\":2,\"836\":4,\"837\":2,\"838\":1,\"848\":1,\"881\":6,\"882\":6,\"883\":6,\"884\":9}}],[\"color\",{\"1\":{\"13\":1,\"124\":1,\"267\":1}}],[\"codename=$\",{\"1\":{\"1078\":1}}],[\"codec\",{\"1\":{\"453\":2,\"459\":1}}],[\"coder\",{\"1\":{\"268\":2}}],[\"code\",{\"1\":{\"124\":1,\"176\":5,\"326\":1,\"393\":2,\"448\":1,\"453\":1,\"465\":1,\"1082\":1,\"1092\":2,\"1151\":1,\"1152\":1,\"1328\":5}}],[\"cobra\",{\"1\":{\"122\":2,\"335\":2}}],[\"conncontext\",{\"1\":{\"1336\":1}}],[\"conn这种方式就可以达到更好的负载均衡效果\",{\"1\":{\"1167\":1}}],[\"conn进行配置\",{\"1\":{\"1163\":1}}],[\"connstate\",{\"1\":{\"1336\":1}}],[\"conns=2\",{\"1\":{\"1163\":2}}],[\"conns=100\",{\"1\":{\"1163\":1}}],[\"conns\",{\"1\":{\"1163\":2,\"1164\":3}}],[\"conn和ip\",{\"1\":{\"1162\":1}}],[\"conn指令\",{\"1\":{\"1152\":1}}],[\"conn\",{\"0\":{\"1152\":1,\"1167\":1},\"1\":{\"893\":2,\"911\":2,\"1150\":1,\"1152\":13,\"1158\":6,\"1160\":1,\"1167\":1,\"1374\":5}}],[\"connect=127\",{\"1\":{\"1029\":1}}],[\"connect=localhost\",{\"1\":{\"1029\":1}}],[\"connected\",{\"1\":{\"1010\":17}}],[\"connecting\",{\"1\":{\"993\":1,\"1078\":1}}],[\"connection\",{\"1\":{\"776\":2,\"1029\":1,\"1133\":1,\"1164\":2}}],[\"connections\",{\"1\":{\"639\":1,\"993\":1,\"1123\":1,\"1130\":1,\"1131\":1,\"1158\":1}}],[\"connect\",{\"1\":{\"454\":2,\"830\":1,\"993\":1,\"1029\":1,\"1078\":1,\"1197\":2,\"1198\":1}}],[\"connectordb\",{\"1\":{\"140\":1}}],[\"congestion\",{\"1\":{\"656\":1}}],[\"condition\",{\"1\":{\"432\":1}}],[\"cond提供了如下的方法以供使用\",{\"1\":{\"432\":1}}],[\"cond\",{\"1\":{\"432\":8}}],[\"cond对此提供了实现\",{\"1\":{\"432\":1}}],[\"concatbuilder\",{\"1\":{\"476\":9}}],[\"concatdirect\",{\"1\":{\"476\":10}}],[\"concatstringwithbuilder\",{\"1\":{\"475\":2}}],[\"concatstringdirect\",{\"1\":{\"475\":2}}],[\"concrete\",{\"1\":{\"347\":1}}],[\"concurrenthashmap\",{\"1\":{\"641\":1}}],[\"concurrenthashmap是怎样的\",{\"1\":{\"590\":1,\"662\":1}}],[\"concurrent\",{\"1\":{\"122\":1,\"127\":1,\"266\":1,\"436\":1,\"453\":2,\"459\":1}}],[\"converstr2\",{\"1\":{\"511\":1}}],[\"converstr\",{\"1\":{\"511\":2}}],[\"convertibleto\",{\"0\":{\"356\":1},\"1\":{\"356\":3}}],[\"convert\",{\"1\":{\"302\":1}}],[\"conventions\",{\"1\":{\"132\":1}}],[\"considered\",{\"1\":{\"1163\":1}}],[\"consistency\",{\"1\":{\"904\":1,\"906\":1}}],[\"consistent\",{\"1\":{\"128\":1,\"1165\":8}}],[\"consoleseparator\",{\"1\":{\"1302\":3}}],[\"console\",{\"1\":{\"1034\":6,\"1221\":1,\"1303\":3}}],[\"consumepartition\",{\"1\":{\"1036\":1,\"1047\":1}}],[\"consumergroup\",{\"1\":{\"1047\":1}}],[\"consumer\",{\"1\":{\"1018\":1,\"1020\":2,\"1034\":4,\"1036\":3,\"1047\":15}}],[\"consul\",{\"0\":{\"87\":1}}],[\"construction\",{\"1\":{\"1303\":2}}],[\"constructioncompany\",{\"1\":{\"293\":3}}],[\"const用于比较primary\",{\"1\":{\"814\":1}}],[\"constant\",{\"1\":{\"302\":1,\"320\":1,\"381\":1}}],[\"const\",{\"1\":{\"174\":2,\"178\":1,\"211\":8,\"212\":5,\"213\":2,\"234\":1,\"239\":1,\"351\":1,\"400\":2,\"745\":1,\"814\":2,\"1341\":1,\"1343\":1,\"1344\":1,\"1345\":1,\"1430\":2}}],[\"conjungo\",{\"1\":{\"127\":1}}],[\"contorller\",{\"1\":{\"1166\":1}}],[\"contact\",{\"1\":{\"1076\":1,\"1077\":1}}],[\"containsrune\",{\"1\":{\"1398\":4}}],[\"containsany\",{\"1\":{\"1398\":3}}],[\"contains\",{\"1\":{\"459\":1,\"703\":1,\"1398\":4}}],[\"container模式\",{\"1\":{\"1197\":1}}],[\"containerd\",{\"1\":{\"655\":1,\"1184\":3,\"1221\":1}}],[\"containers\",{\"1\":{\"345\":1,\"1197\":1,\"1215\":3,\"1223\":1,\"1225\":1}}],[\"container\",{\"1\":{\"124\":1,\"655\":1,\"775\":1,\"1182\":1,\"1183\":1,\"1197\":2,\"1198\":1,\"1215\":3,\"1223\":2,\"1308\":3}}],[\"contentimgs\",{\"1\":{\"1082\":1}}],[\"content\",{\"1\":{\"705\":1,\"741\":11,\"746\":3,\"756\":1,\"1019\":1,\"1133\":4,\"1281\":4,\"1283\":3,\"1330\":2,\"1423\":4,\"1427\":1}}],[\"context的结构和用法\",{\"1\":{\"600\":1,\"672\":1}}],[\"context上下文可以处理子孙的协程\",{\"1\":{\"546\":1}}],[\"context包下提供了两种创建的函数\",{\"1\":{\"428\":1}}],[\"context包下所有的实现都是不对外暴露的\",{\"1\":{\"425\":1}}],[\"context包中的各个实现关系如下图所示\",{\"1\":{\"425\":1}}],[\"context标准库也提供了几个实现\",{\"1\":{\"423\":1}}],[\"context本身是一个接口\",{\"1\":{\"423\":1}}],[\"context译为上下文\",{\"1\":{\"423\":1}}],[\"context更适合子孙协程嵌套层级更深的情况\",{\"1\":{\"412\":1}}],[\"context\",{\"0\":{\"423\":1,\"424\":1,\"546\":1},\"1\":{\"122\":2,\"412\":1,\"423\":1,\"424\":1,\"425\":2,\"426\":6,\"427\":21,\"428\":11,\"470\":5,\"537\":1,\"543\":1,\"546\":12,\"745\":2,\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"754\":1,\"756\":2,\"766\":5,\"830\":2,\"881\":2,\"882\":2,\"883\":2,\"884\":4,\"1087\":3,\"1092\":1,\"1151\":3,\"1152\":4,\"1164\":1,\"1275\":2,\"1277\":1,\"1280\":3,\"1281\":1,\"1282\":1,\"1283\":1,\"1286\":2,\"1289\":1,\"1301\":1,\"1308\":1}}],[\"cont\",{\"1\":{\"473\":4}}],[\"contrib\",{\"1\":{\"453\":2,\"459\":1}}],[\"controller\",{\"1\":{\"655\":2,\"1235\":1}}],[\"control\",{\"1\":{\"12\":1,\"1133\":1,\"1225\":3,\"1226\":1,\"1228\":1,\"1238\":1}}],[\"continue这类操作\",{\"1\":{\"1424\":1}}],[\"continue关键字会跳过最内层循环的本次迭代\",{\"1\":{\"236\":1}}],[\"continue的目标\",{\"1\":{\"231\":1}}],[\"continue\",{\"0\":{\"236\":1},\"1\":{\"178\":1,\"236\":2,\"993\":1,\"1424\":2}}],[\"conf⽂件中配置\",{\"1\":{\"1165\":1}}],[\"conf|ngx\",{\"1\":{\"1164\":1}}],[\"conf配置文件分析\",{\"0\":{\"1129\":1,\"1130\":1}}],[\"conf如下\",{\"1\":{\"1123\":1}}],[\"conf文件进行启动\",{\"1\":{\"1171\":1}}],[\"conf文件中包含这个文件即可\",{\"1\":{\"1131\":1}}],[\"conf文件然后用命令根据这个文件启动就行\",{\"1\":{\"994\":1}}],[\"conf文件\",{\"0\":{\"1136\":1},\"1\":{\"963\":1,\"1000\":1,\"1010\":1}}],[\"confidence\",{\"1\":{\"476\":3}}],[\"configonly\",{\"1\":{\"1197\":1}}],[\"configfrom\",{\"1\":{\"1197\":1}}],[\"config配置\",{\"1\":{\"1197\":1}}],[\"config模块中的\",{\"1\":{\"1133\":1}}],[\"configure\",{\"1\":{\"1116\":2,\"1132\":1,\"1165\":1,\"1173\":1}}],[\"configuration的指定目录安全\",{\"1\":{\"1132\":1,\"1173\":1}}],[\"configuration\",{\"0\":{\"742\":1},\"1\":{\"1116\":4,\"1163\":1,\"1164\":6}}],[\"configs\",{\"1\":{\"1034\":1}}],[\"config文件是后期加上去的\",{\"1\":{\"849\":1}}],[\"config\",{\"1\":{\"55\":4,\"702\":2,\"742\":2,\"774\":2,\"852\":1,\"911\":1,\"965\":1,\"968\":3,\"981\":1,\"1003\":2,\"1004\":3,\"1010\":1,\"1029\":1,\"1031\":2,\"1032\":1,\"1033\":1,\"1037\":4,\"1047\":14,\"1078\":1,\"1164\":1,\"1184\":2,\"1197\":1,\"1221\":1,\"1222\":1,\"1225\":2,\"1302\":1,\"1303\":5,\"1304\":4,\"1305\":5,\"1306\":4,\"1313\":1,\"1314\":3,\"1315\":5}}],[\"conf\",{\"1\":{\"84\":1,\"742\":1,\"822\":3,\"965\":3,\"986\":1,\"994\":2,\"1003\":2,\"1004\":6,\"1010\":26,\"1035\":4,\"1078\":6,\"1116\":6,\"1123\":1,\"1131\":2,\"1163\":4,\"1164\":14,\"1171\":2,\"1193\":3,\"1219\":1,\"1222\":2,\"1225\":2,\"1244\":1,\"1245\":1}}],[\"common\",{\"1\":{\"1184\":1}}],[\"community\",{\"1\":{\"849\":1}}],[\"communicating\",{\"1\":{\"413\":1,\"454\":1}}],[\"communicate\",{\"1\":{\"413\":1}}],[\"comment>\",{\"1\":{\"742\":1}}],[\"comment\",{\"1\":{\"513\":1,\"817\":8,\"1418\":2}}],[\"comments\",{\"1\":{\"326\":2}}],[\"commands\",{\"1\":{\"326\":2,\"454\":1,\"967\":1,\"1164\":2,\"1197\":1}}],[\"command了解细节\",{\"1\":{\"312\":1}}],[\"command\",{\"1\":{\"296\":1,\"298\":1,\"300\":1,\"326\":1,\"454\":4,\"468\":1,\"471\":3,\"472\":1,\"1164\":4,\"1197\":3,\"1226\":1}}],[\"commitinterval\",{\"1\":{\"1047\":1}}],[\"commitid一般取前12位\",{\"1\":{\"459\":1}}],[\"commitid\",{\"1\":{\"459\":1}}],[\"committed\",{\"1\":{\"634\":1,\"641\":1,\"656\":1}}],[\"commit\",{\"1\":{\"55\":3,\"449\":7,\"820\":1,\"897\":2,\"1055\":1}}],[\"computer\",{\"0\":{\"1458\":1}}],[\"compose\",{\"0\":{\"1203\":1},\"1\":{\"1203\":6,\"1205\":1}}],[\"completion\",{\"1\":{\"454\":1,\"745\":1,\"1133\":1}}],[\"completed\",{\"1\":{\"477\":6}}],[\"complete\",{\"1\":{\"449\":9}}],[\"complexs\",{\"1\":{\"1440\":2}}],[\"complex\",{\"1\":{\"294\":1,\"353\":1,\"1392\":3}}],[\"complex64\",{\"1\":{\"199\":1,\"351\":3}}],[\"complex128\",{\"1\":{\"199\":1,\"351\":3,\"1391\":1,\"1392\":1,\"1440\":1}}],[\"compile\",{\"1\":{\"317\":1,\"454\":3}}],[\"compilation\",{\"1\":{\"300\":1}}],[\"compass也有社区版\",{\"1\":{\"877\":1}}],[\"compass\",{\"1\":{\"849\":1}}],[\"compatibility\",{\"1\":{\"702\":2}}],[\"comparator\",{\"1\":{\"344\":3}}],[\"comparable接口无法并入类型集\",{\"1\":{\"341\":1}}],[\"comparable\",{\"0\":{\"354\":1},\"1\":{\"294\":2,\"338\":1,\"341\":4,\"354\":5}}],[\"compareandswapint64\",{\"1\":{\"440\":2}}],[\"compare\",{\"1\":{\"209\":1,\"344\":4,\"1397\":5}}],[\"company\",{\"1\":{\"293\":4,\"338\":4,\"724\":5,\"1427\":1,\"1428\":4}}],[\"compression\",{\"1\":{\"449\":1}}],[\"compressing\",{\"1\":{\"445\":1,\"449\":1}}],[\"compress\",{\"1\":{\"124\":1,\"1303\":4,\"1304\":2,\"1307\":6,\"1308\":1}}],[\"com或者gitee\",{\"1\":{\"17\":1}}],[\"com\",{\"1\":{\"13\":1,\"17\":1,\"43\":3,\"49\":1,\"55\":1,\"84\":6,\"122\":68,\"123\":4,\"131\":1,\"325\":1,\"345\":2,\"393\":2,\"443\":1,\"445\":5,\"446\":2,\"447\":1,\"448\":3,\"449\":1,\"450\":5,\"453\":42,\"454\":12,\"457\":2,\"459\":34,\"460\":8,\"462\":2,\"463\":3,\"465\":1,\"511\":1,\"701\":2,\"740\":3,\"742\":2,\"743\":1,\"744\":3,\"746\":1,\"756\":1,\"771\":1,\"774\":2,\"806\":4,\"828\":2,\"831\":1,\"832\":1,\"835\":1,\"836\":1,\"837\":1,\"838\":1,\"841\":1,\"847\":1,\"849\":1,\"853\":1,\"876\":1,\"878\":2,\"885\":1,\"886\":1,\"890\":2,\"908\":1,\"909\":3,\"910\":1,\"964\":1,\"985\":1,\"1035\":1,\"1036\":1,\"1037\":1,\"1046\":3,\"1047\":5,\"1073\":2,\"1078\":3,\"1087\":1,\"1092\":1,\"1143\":4,\"1164\":4,\"1165\":1,\"1166\":3,\"1175\":1,\"1183\":1,\"1184\":4,\"1193\":3,\"1197\":6,\"1220\":1,\"1221\":4,\"1222\":3,\"1223\":4,\"1225\":1,\"1229\":1,\"1231\":1,\"1243\":1,\"1245\":1,\"1274\":2,\"1275\":1,\"1277\":2,\"1299\":1,\"1304\":1,\"1307\":1,\"1313\":1,\"1321\":2,\"1330\":1,\"1373\":2}}],[\"combinewritesyncers\",{\"1\":{\"1304\":1}}],[\"combine\",{\"1\":{\"5\":1}}],[\"简短的调用者输出\",{\"1\":{\"1303\":1}}],[\"简易例子\",{\"1\":{\"1193\":1}}],[\"简易短视频项目\",{\"1\":{\"644\":1}}],[\"简易短视频做了哪些东西\",{\"1\":{\"592\":1,\"664\":1}}],[\"简易短视频是怎样的项目\",{\"1\":{\"570\":1,\"642\":1,\"644\":1}}],[\"简易短视频都负责什么\",{\"1\":{\"569\":1,\"641\":2}}],[\"简介\",{\"0\":{\"956\":1,\"1272\":1,\"1308\":1},\"1\":{\"1203\":1,\"1205\":1}}],[\"简述\",{\"1\":{\"587\":1,\"659\":1}}],[\"简洁高效\",{\"1\":{\"540\":1}}],[\"简洁的语法\",{\"0\":{\"150\":1},\"1\":{\"164\":1}}],[\"简化了运维\",{\"1\":{\"655\":1}}],[\"简化了包管理\",{\"1\":{\"166\":1}}],[\"简化了官方tensorflow\",{\"1\":{\"142\":1}}],[\"简称和地址\",{\"1\":{\"56\":1}}],[\"简称\",{\"1\":{\"12\":1}}],[\"简单来说就是操作字符串的工具包\",{\"1\":{\"1394\":1}}],[\"简单理一下kubernetes快速理解一下\",{\"1\":{\"1212\":1}}],[\"简单理解\",{\"1\":{\"1192\":1}}],[\"简单存取\",{\"0\":{\"923\":1}}],[\"简单hello\",{\"1\":{\"863\":1}}],[\"简单select查询\",{\"1\":{\"814\":1}}],[\"简单指的是用更少的表\",{\"1\":{\"793\":1}}],[\"简单查询\",{\"1\":{\"651\":1}}],[\"简单画一下\",{\"1\":{\"566\":1,\"638\":2}}],[\"简单介绍一些其中的一些指标\",{\"1\":{\"326\":1}}],[\"简单的配置文件和低系统资源的消耗而闻名\",{\"1\":{\"1107\":1}}],[\"简单的客户端\",{\"1\":{\"1056\":1}}],[\"简单的介绍一下\",{\"1\":{\"965\":1}}],[\"简单的自我介绍\",{\"1\":{\"572\":1,\"644\":1}}],[\"简单的用一句话概括\",{\"1\":{\"421\":1}}],[\"简单的例子如下\",{\"1\":{\"383\":1,\"384\":1}}],[\"简单的tun\",{\"1\":{\"145\":1}}],[\"简单的tcp代理\",{\"1\":{\"145\":1}}],[\"简单的cli电子邮件解析器\",{\"1\":{\"141\":1}}],[\"简单的go包\",{\"1\":{\"141\":1}}],[\"简单的go图像处理包\",{\"1\":{\"139\":1}}],[\"简单的http微服务\",{\"1\":{\"139\":1}}],[\"简单和异步goroutine池库\",{\"1\":{\"137\":1}}],[\"简单和易于使用的库\",{\"1\":{\"134\":1}}],[\"简单golang错误处理与分类元\",{\"1\":{\"131\":1}}],[\"简单\",{\"1\":{\"11\":1,\"111\":1,\"128\":1,\"1309\":3}}],[\"v+1\",{\"1\":{\"1420\":1}}],[\"v>的散列方式变为了\",{\"1\":{\"1165\":1}}],[\"v>数据\",{\"1\":{\"1165\":1}}],[\"v>非关系数据库作为缓存系统\",{\"1\":{\"1165\":1}}],[\"v式的操作\",{\"1\":{\"960\":1}}],[\"v9\",{\"1\":{\"909\":1}}],[\"v6\",{\"1\":{\"740\":1}}],[\"v8\",{\"1\":{\"701\":1,\"909\":1}}],[\"v7\",{\"1\":{\"701\":1,\"744\":2,\"746\":1,\"756\":1}}],[\"v并返回value值\",{\"1\":{\"558\":1}}],[\"v=true\",{\"1\":{\"503\":1}}],[\"vs\",{\"1\":{\"476\":4,\"791\":1}}],[\"v4\",{\"1\":{\"459\":1}}],[\"v4l\",{\"1\":{\"146\":1}}],[\"v3\",{\"1\":{\"453\":4,\"459\":2,\"1228\":1}}],[\"v0\",{\"1\":{\"453\":26,\"454\":9,\"459\":14,\"1223\":1}}],[\"vendor\",{\"1\":{\"464\":1}}],[\"verbose\",{\"1\":{\"965\":2}}],[\"verify\",{\"1\":{\"456\":1,\"463\":3}}],[\"version=\",{\"1\":{\"742\":1}}],[\"version\",{\"1\":{\"12\":1,\"454\":2,\"702\":4,\"705\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"754\":1,\"856\":1,\"1036\":1,\"1037\":1,\"1132\":1,\"1133\":1,\"1173\":1,\"1184\":1,\"1222\":1,\"1225\":1,\"1228\":1}}],[\"veth\",{\"1\":{\"1195\":1}}],[\"veth13568df\",{\"1\":{\"1195\":2}}],[\"veth3b4847e\",{\"1\":{\"1195\":2}}],[\"vet\",{\"1\":{\"447\":1}}],[\"v也会被输出\",{\"1\":{\"395\":1}}],[\"vtype\",{\"1\":{\"352\":3}}],[\"vue\",{\"1\":{\"330\":1}}],[\"vuepress也会处理不存在的\",{\"1\":{\"65\":1}}],[\"vuepress会自动将\",{\"1\":{\"65\":1}}],[\"vuepress会自动为标题生成锚点\",{\"1\":{\"64\":1}}],[\"vuepress会为每个标题生成一个默认的锚点\",{\"1\":{\"64\":1}}],[\"vlan标签的封送处理\",{\"1\":{\"145\":1}}],[\"vfs\",{\"1\":{\"132\":1}}],[\"vm\",{\"1\":{\"965\":7}}],[\"vm机制将数据分页存放\",{\"1\":{\"965\":1}}],[\"vm实现\",{\"1\":{\"130\":1}}],[\"vm和编译器\",{\"1\":{\"130\":1}}],[\"vm到纯go的端口\",{\"1\":{\"130\":1}}],[\"volumes\",{\"1\":{\"1201\":1}}],[\"volume\",{\"1\":{\"1193\":2}}],[\"volume的方式也可以\",{\"1\":{\"822\":1}}],[\"vol\",{\"1\":{\"400\":1}}],[\"void\",{\"1\":{\"298\":1,\"300\":3,\"301\":1,\"302\":1,\"303\":5,\"304\":8,\"305\":2,\"306\":1,\"310\":1,\"1164\":4,\"1165\":1}}],[\"vorbis解码器\",{\"1\":{\"126\":1}}],[\"vorbis\",{\"1\":{\"126\":1}}],[\"vo所创建的fnv\",{\"1\":{\"124\":1}}],[\"vault\",{\"1\":{\"1218\":1}}],[\"validationerrors\",{\"1\":{\"1289\":1}}],[\"validatequery\",{\"1\":{\"703\":1}}],[\"validator\",{\"1\":{\"453\":2,\"459\":1,\"1289\":2}}],[\"valid\",{\"1\":{\"477\":1,\"1194\":7,\"1195\":6}}],[\"validstring\",{\"1\":{\"477\":5}}],[\"val2\",{\"1\":{\"272\":1}}],[\"val1\",{\"1\":{\"272\":1}}],[\"val\",{\"1\":{\"248\":2,\"260\":2,\"263\":4,\"285\":2,\"286\":2,\"287\":2,\"294\":1,\"302\":2,\"426\":2,\"435\":3,\"439\":1,\"441\":7,\"546\":1,\"882\":4,\"883\":2,\"884\":4,\"916\":2,\"923\":1,\"924\":1,\"925\":2,\"927\":3,\"1417\":1,\"1420\":4}}],[\"value2同时将多个\",{\"1\":{\"972\":1}}],[\"value2在列表中添加一个或多个值\",{\"1\":{\"971\":1}}],[\"value2将一个或多个值插入到列表头部\",{\"1\":{\"971\":1}}],[\"value将一个或多个值插入到已存在的列表头部\",{\"1\":{\"971\":1}}],[\"value将值\",{\"1\":{\"970\":1}}],[\"value1\",{\"1\":{\"971\":2,\"972\":1}}],[\"value用\",{\"1\":{\"970\":1}}],[\"value对\",{\"1\":{\"970\":1}}],[\"value会存放在swap区\",{\"1\":{\"965\":1}}],[\"value数据库\",{\"1\":{\"956\":1}}],[\"value是查询结果\",{\"1\":{\"777\":1}}],[\"value结构体\",{\"1\":{\"441\":1}}],[\"value结构体类型来表示go中的值\",{\"1\":{\"348\":1}}],[\"value类型的数据\",{\"1\":{\"956\":1}}],[\"value类型的话\",{\"1\":{\"360\":1}}],[\"value类型支持存储任何类型\",{\"1\":{\"438\":1}}],[\"valuectx多用于在多级协程中传递一些数据\",{\"1\":{\"426\":1}}],[\"valuectx实现比较简单\",{\"1\":{\"426\":1}}],[\"valuectx\",{\"0\":{\"426\":1},\"1\":{\"423\":1,\"426\":2}}],[\"value代表着反射接口的值\",{\"1\":{\"357\":1}}],[\"valueof函数\",{\"1\":{\"348\":1}}],[\"valueof\",{\"1\":{\"337\":2,\"348\":1,\"349\":1,\"357\":2,\"358\":1,\"359\":1,\"360\":2,\"361\":1,\"362\":1,\"365\":3,\"368\":2,\"371\":2,\"376\":2,\"378\":1}}],[\"values\",{\"1\":{\"326\":1,\"388\":1,\"796\":2,\"820\":1,\"892\":2,\"1281\":1,\"1301\":1}}],[\"valuetype\",{\"1\":{\"259\":1}}],[\"value则是对应索引下的值\",{\"1\":{\"234\":1}}],[\"value\",{\"0\":{\"441\":1},\"1\":{\"202\":1,\"234\":3,\"253\":1,\"287\":1,\"289\":2,\"318\":1,\"326\":1,\"347\":2,\"348\":2,\"357\":1,\"358\":1,\"359\":2,\"360\":6,\"361\":2,\"362\":1,\"365\":6,\"368\":3,\"369\":1,\"370\":1,\"371\":2,\"373\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":6,\"381\":1,\"412\":1,\"424\":3,\"425\":1,\"426\":3,\"435\":2,\"436\":9,\"438\":1,\"441\":7,\"453\":1,\"512\":1,\"546\":2,\"558\":3,\"649\":1,\"724\":1,\"777\":1,\"831\":1,\"847\":1,\"861\":1,\"894\":1,\"908\":1,\"965\":1,\"970\":16,\"971\":3,\"972\":4,\"1035\":1,\"1036\":1,\"1047\":6,\"1163\":2,\"1166\":2,\"1228\":2,\"1411\":2}}],[\"value存储\",{\"1\":{\"122\":1}}],[\"vat\",{\"1\":{\"133\":1}}],[\"varchar\",{\"1\":{\"653\":3,\"787\":1,\"817\":7,\"820\":3,\"892\":3}}],[\"varchar的区别\",{\"1\":{\"587\":1,\"659\":1}}],[\"variables\",{\"1\":{\"813\":3,\"820\":1}}],[\"variable\",{\"1\":{\"289\":2,\"419\":1,\"453\":1,\"1419\":1}}],[\"varis\",{\"1\":{\"142\":1}}],[\"var\",{\"1\":{\"5\":1,\"178\":1,\"193\":1,\"203\":1,\"205\":6,\"206\":6,\"209\":4,\"215\":1,\"223\":1,\"224\":1,\"225\":1,\"229\":2,\"239\":8,\"243\":1,\"249\":1,\"256\":2,\"259\":1,\"275\":2,\"278\":1,\"285\":5,\"287\":2,\"292\":1,\"293\":1,\"294\":3,\"303\":1,\"306\":1,\"307\":1,\"308\":2,\"310\":1,\"314\":1,\"322\":1,\"327\":1,\"338\":1,\"339\":1,\"343\":1,\"351\":2,\"352\":2,\"362\":1,\"381\":1,\"383\":2,\"384\":2,\"385\":4,\"386\":2,\"387\":1,\"388\":1,\"390\":1,\"393\":2,\"394\":1,\"396\":1,\"410\":2,\"413\":1,\"417\":2,\"418\":3,\"421\":1,\"422\":4,\"425\":1,\"426\":1,\"427\":2,\"428\":1,\"429\":2,\"430\":3,\"431\":3,\"432\":4,\"434\":2,\"435\":3,\"436\":4,\"439\":2,\"440\":3,\"441\":2,\"446\":1,\"475\":2,\"511\":1,\"515\":1,\"516\":2,\"545\":1,\"548\":1,\"556\":2,\"557\":1,\"584\":1,\"635\":3,\"649\":2,\"651\":2,\"653\":1,\"654\":5,\"656\":2,\"713\":1,\"756\":1,\"766\":1,\"813\":2,\"833\":1,\"834\":2,\"836\":1,\"838\":1,\"863\":6,\"884\":2,\"893\":3,\"965\":2,\"1047\":2,\"1114\":1,\"1116\":25,\"1130\":1,\"1131\":2,\"1132\":9,\"1171\":3,\"1173\":9,\"1174\":1,\"1184\":2,\"1225\":2,\"1226\":2,\"1227\":1,\"1283\":3,\"1289\":1,\"1303\":1,\"1307\":2,\"1312\":1,\"1315\":1,\"1325\":3,\"1328\":3,\"1374\":1,\"1428\":1,\"1440\":5}}],[\"vi\",{\"1\":{\"1219\":2}}],[\"virtaulhash\",{\"1\":{\"1165\":2}}],[\"virtaulcount\",{\"1\":{\"1165\":2}}],[\"virtual\",{\"1\":{\"637\":1,\"1192\":1}}],[\"viewcount\",{\"1\":{\"1082\":1}}],[\"viewer\",{\"1\":{\"328\":3}}],[\"via\",{\"1\":{\"454\":1}}],[\"visualize\",{\"1\":{\"326\":2}}],[\"visualization\",{\"1\":{\"325\":1,\"802\":1,\"803\":1,\"805\":1}}],[\"viper\",{\"1\":{\"122\":2}}],[\"vim\",{\"1\":{\"84\":1,\"986\":1,\"1003\":1,\"1030\":1,\"1032\":1,\"1078\":1,\"1122\":1,\"1193\":1}}],[\"v2\",{\"1\":{\"122\":1,\"453\":8,\"454\":4,\"459\":6,\"645\":2,\"1037\":1,\"1157\":1,\"1229\":1,\"1243\":1,\"1245\":1,\"1307\":2}}],[\"v\",{\"0\":{\"487\":1},\"1\":{\"56\":1,\"185\":1,\"221\":4,\"241\":4,\"287\":6,\"302\":1,\"338\":2,\"358\":1,\"359\":1,\"360\":4,\"361\":1,\"362\":3,\"365\":1,\"395\":1,\"441\":1,\"447\":1,\"454\":3,\"455\":1,\"457\":1,\"460\":1,\"463\":1,\"468\":3,\"469\":1,\"470\":1,\"471\":3,\"472\":1,\"473\":3,\"475\":1,\"476\":2,\"477\":5,\"487\":3,\"491\":15,\"494\":3,\"498\":1,\"502\":1,\"511\":2,\"558\":1,\"744\":1,\"756\":1,\"774\":1,\"1036\":2,\"1047\":6,\"1078\":1,\"1132\":3,\"1173\":3,\"1245\":1,\"1289\":1,\"1310\":3,\"1316\":2,\"1319\":1,\"1400\":1,\"1420\":1}}],[\"v10\",{\"1\":{\"453\":4,\"459\":2,\"1289\":1}}],[\"v1\",{\"1\":{\"37\":1,\"449\":5,\"450\":2,\"453\":15,\"454\":3,\"457\":6,\"459\":26,\"460\":14,\"462\":1,\"465\":1,\"477\":1,\"645\":3,\"1082\":1,\"1086\":2,\"1087\":5,\"1164\":2,\"1215\":4,\"1225\":1,\"1228\":3,\"1233\":1}}],[\"优于传统的多线程\",{\"1\":{\"645\":1}}],[\"优雅的关闭nginx服务\",{\"0\":{\"1172\":1}}],[\"优雅停机\",{\"1\":{\"634\":1}}],[\"优雅启动\",{\"1\":{\"634\":1}}],[\"优雅启停+defer\",{\"1\":{\"562\":1,\"634\":2}}],[\"优化分为\",{\"1\":{\"799\":1}}],[\"优化器阶段完成后\",{\"1\":{\"779\":1}}],[\"优化器就是决定执行的方案\",{\"1\":{\"779\":1}}],[\"优化器是在表里面有多个索引的时候\",{\"1\":{\"779\":1}}],[\"优化器\",{\"0\":{\"779\":1},\"1\":{\"775\":1}}],[\"优化的数据结构\",{\"1\":{\"734\":1}}],[\"优化慢查询\",{\"1\":{\"655\":1}}],[\"优化后的查询\",{\"1\":{\"653\":1}}],[\"优化思路\",{\"1\":{\"653\":1}}],[\"优化查询\",{\"1\":{\"639\":1}}],[\"优化方式\",{\"1\":{\"639\":1}}],[\"优化了磁盘的顺序写入操作\",{\"1\":{\"636\":1}}],[\"优化了50\",{\"1\":{\"597\":1,\"669\":1}}],[\"优化\",{\"0\":{\"900\":1,\"1207\":1},\"1\":{\"633\":1,\"782\":1}}],[\"优化服务器引入分布式缓存技术\",{\"1\":{\"576\":1,\"648\":1}}],[\"优化服务器项目\",{\"1\":{\"576\":1,\"648\":1}}],[\"优化考虑\",{\"1\":{\"542\":1}}],[\"优先级\",{\"1\":{\"1133\":1,\"1287\":1}}],[\"优先级越高\",{\"1\":{\"814\":1}}],[\"优先被执行\",{\"1\":{\"814\":1}}],[\"优先考虑使用带缩放因子的浮点类型\",{\"1\":{\"720\":1}}],[\"优先会从全局队列获取否则从其他p的本地队列窃取一半的g来运行\",{\"1\":{\"542\":1}}],[\"优先应用options\",{\"1\":{\"269\":1}}],[\"优秀的第三方库\",{\"1\":{\"120\":1}}],[\"优势\",{\"0\":{\"957\":1},\"1\":{\"113\":1,\"114\":1,\"115\":1,\"809\":1}}],[\"优点\",{\"0\":{\"164\":1},\"1\":{\"11\":1,\"542\":1,\"635\":1,\"817\":1,\"1053\":1,\"1054\":1,\"1055\":1,\"1056\":1}}],[\"优缺点\",{\"1\":{\"11\":1,\"618\":1,\"690\":1}}],[\"从连接中读取数据\",{\"1\":{\"1374\":1}}],[\"从连接器到执行器\",{\"1\":{\"775\":1}}],[\"从文档可以查找我们结构体可以加哪些tag来校验数据合法性\",{\"1\":{\"1289\":1}}],[\"从文本中提取链接\",{\"1\":{\"122\":1}}],[\"从501ms开始才允许通过第二个请求\",{\"1\":{\"1154\":1}}],[\"从作用上来说\",{\"1\":{\"1149\":1}}],[\"从读入客户端的第一个字节开始\",{\"1\":{\"1133\":1}}],[\"从这里可以得出结论\",{\"1\":{\"1086\":1,\"1087\":1}}],[\"从topic123这个主题去获取消息\",{\"1\":{\"1036\":1}}],[\"从头开始消费消息\",{\"1\":{\"1034\":1}}],[\"从头部删除n个元素\",{\"1\":{\"246\":1}}],[\"从头部插入元素\",{\"1\":{\"245\":1}}],[\"从图中我们可以看到\",{\"1\":{\"1027\":1}}],[\"从图中可以看出\",{\"1\":{\"775\":1}}],[\"从图中可以看到一条sql语句的执行和mysql之间的关系\",{\"1\":{\"775\":1}}],[\"从节点\",{\"1\":{\"1010\":2}}],[\"从新启动6379就会自动作为从节点\",{\"1\":{\"1003\":1}}],[\"从主机接受了数据\",{\"1\":{\"993\":1}}],[\"从改为独立redis服务\",{\"1\":{\"993\":1}}],[\"从需要密码才可连接到主\",{\"1\":{\"993\":1}}],[\"从上表可以看出\",{\"1\":{\"985\":1}}],[\"从上往下顺序执行\",{\"1\":{\"814\":1}}],[\"从上往下看是调用链\",{\"1\":{\"327\":1}}],[\"从大到小\",{\"1\":{\"974\":1}}],[\"从大学到现在做的最有成就感的事情\",{\"1\":{\"606\":1,\"678\":1}}],[\"从列表中弹出一个值\",{\"1\":{\"971\":1}}],[\"从当前数据库中随机返回一个\",{\"1\":{\"967\":2}}],[\"从高到低排列\",{\"1\":{\"948\":1}}],[\"从低到高排列\",{\"1\":{\"948\":1}}],[\"从源集合移动指定元素刀目标集合\",{\"1\":{\"943\":1}}],[\"从源代码中的nil可以看出它仅仅只是一个变量\",{\"1\":{\"203\":1}}],[\"从索引\",{\"1\":{\"901\":1}}],[\"从其他主机上克隆数据库\",{\"1\":{\"856\":1}}],[\"从mysql服务器slave\",{\"1\":{\"825\":1}}],[\"从\",{\"1\":{\"822\":1}}],[\"从左到右去使用的\",{\"1\":{\"816\":1}}],[\"从左往右读\",{\"1\":{\"382\":1}}],[\"从左往右看是cum的占用百分比\",{\"1\":{\"327\":1}}],[\"从硬盘当中读取数据\",{\"1\":{\"814\":1}}],[\"从union表获取结果select\",{\"1\":{\"814\":1}}],[\"从前面分析情况来看\",{\"1\":{\"802\":1}}],[\"从二叉树的查找过程了来看\",{\"1\":{\"802\":1}}],[\"从如下启动日志可以看出\",{\"1\":{\"769\":1}}],[\"从启动日志中\",{\"1\":{\"768\":1}}],[\"从第0行记录开始\",{\"1\":{\"756\":1,\"757\":1,\"758\":1,\"763\":1}}],[\"从channel中取出一个信号\",{\"1\":{\"654\":1}}],[\"从切片的起始位置到底层数组的结尾部分的元素数量\",{\"1\":{\"649\":1}}],[\"从服务器读取并执行的\",{\"1\":{\"633\":1}}],[\"从技术上和工作上上一家公司对你有什么成长\",{\"1\":{\"583\":1,\"655\":2}}],[\"从数据结构上可以划分为哪些索引\",{\"1\":{\"566\":1,\"638\":1}}],[\"从浏览器输入个网址到显示页面的过程\",{\"1\":{\"566\":1,\"638\":2}}],[\"从根节点遍历对象\",{\"1\":{\"551\":1}}],[\"从已经关闭的channel读取数据\",{\"1\":{\"535\":1}}],[\"从偏移量\",{\"1\":{\"970\":1}}],[\"从偏移量16开始\",{\"1\":{\"513\":1}}],[\"从偏移量8开始\",{\"1\":{\"513\":1}}],[\"从偏移量0开始\",{\"1\":{\"513\":1}}],[\"从测试结果中就可以很明显的看出有一个阻塞等待的过程\",{\"1\":{\"473\":1}}],[\"从测试日志中可以看出testsum用例尽管失败了还是输出了test\",{\"1\":{\"471\":1}}],[\"从输出结果中可以看到\",{\"1\":{\"434\":1}}],[\"从结果中可以看出benchstat将其分为了三组\",{\"1\":{\"476\":1}}],[\"从结果中可以看到\",{\"1\":{\"432\":1}}],[\"从结果可以看出全部测试都已经通过\",{\"1\":{\"470\":1}}],[\"从结果可以看出所有的测试用例都通过了\",{\"1\":{\"468\":1}}],[\"从结果可以看到\",{\"1\":{\"314\":1}}],[\"从始至终都只有一个锁\",{\"1\":{\"431\":1}}],[\"从而不用创建结构体\",{\"1\":{\"1337\":1}}],[\"从而简化\",{\"1\":{\"1230\":1}}],[\"从而保证服务的持续可用\",{\"1\":{\"1006\":1}}],[\"从而保证了系统的高可用性\",{\"1\":{\"996\":1}}],[\"从而保证了父子进程之间互不影响\",{\"1\":{\"980\":1}}],[\"从而完成数据持久化操作\",{\"1\":{\"980\":1}}],[\"从而满足不同应用场景下的数据需求\",{\"1\":{\"842\":1}}],[\"从而实现高效的数据访问和查询\",{\"1\":{\"842\":1}}],[\"从而实现更复杂的数据结构和查询\",{\"1\":{\"842\":1}}],[\"从而实现数据的高可用和负载均衡\",{\"1\":{\"842\":1}}],[\"从而浪费资源\",{\"1\":{\"821\":1}}],[\"从而知道mysql是如何处理sql语句的\",{\"1\":{\"814\":1}}],[\"从而快速的检索出符合条件\",{\"1\":{\"802\":1}}],[\"从而使你能够使用不同的请求\",{\"1\":{\"654\":1}}],[\"从而优化性能\",{\"1\":{\"645\":1}}],[\"从而减少\",{\"1\":{\"633\":1}}],[\"从而减少频繁创建和销毁协程的开销\",{\"1\":{\"633\":1}}],[\"从而导致死锁\",{\"1\":{\"653\":1}}],[\"从而导致\",{\"1\":{\"588\":1,\"660\":1}}],[\"从而修改了数据\",{\"1\":{\"429\":1}}],[\"从而避免造成更加严重的后果\",{\"1\":{\"394\":1}}],[\"从原文件中读取数据\",{\"1\":{\"403\":2}}],[\"从指定位置开始写\",{\"1\":{\"402\":1}}],[\"从理论上来说\",{\"1\":{\"273\":1}}],[\"从尾部删除n个元素\",{\"1\":{\"246\":1}}],[\"从尾部插入元素\",{\"1\":{\"245\":1}}],[\"从中间指定下标i位置开始删除n个元素\",{\"1\":{\"246\":1}}],[\"从中间下标i插入元素\",{\"1\":{\"245\":1}}],[\"从中央服务器远程仓库下载代码\",{\"1\":{\"11\":1}}],[\"从某种程度上来说\",{\"1\":{\"191\":1}}],[\"从字符串中提取值\",{\"1\":{\"144\":1}}],[\"从字符串创建漂亮的生成图像图案\",{\"1\":{\"139\":1}}],[\"从示例json自动生成go\",{\"1\":{\"141\":1}}],[\"从python到go\",{\"1\":{\"139\":1}}],[\"从go到javascript的编译器\",{\"1\":{\"136\":1}}],[\"从json\",{\"1\":{\"127\":1}}],[\"从一个go\",{\"1\":{\"124\":1}}],[\"从本地工作区\",{\"1\":{\"55\":1}}],[\"从本地进行代码修改\",{\"1\":{\"12\":1}}],[\"从远程仓库拉取\",{\"1\":{\"58\":2}}],[\"从远程仓库获取代码\",{\"0\":{\"58\":1}}],[\"从远程仓库克隆\",{\"1\":{\"55\":1,\"58\":1}}],[\"从远程仓库克隆代码\",{\"0\":{\"47\":1}}],[\"从远程仓库中克隆或拉取代码到本地仓库\",{\"1\":{\"12\":1}}],[\"从此git\",{\"1\":{\"12\":1}}],[\"从此\",{\"1\":{\"12\":1}}],[\"从start开始\",{\"1\":{\"5\":1}}],[\"版本控制\",{\"1\":{\"1230\":1}}],[\"版本控制系统\",{\"1\":{\"443\":1}}],[\"版本直接将查询缓存\",{\"1\":{\"777\":1}}],[\"版本开始成为了默认存储引擎\",{\"1\":{\"775\":1}}],[\"版本开始\",{\"1\":{\"718\":1,\"719\":1}}],[\"版本的项目\",{\"1\":{\"645\":1}}],[\"版本以后\",{\"1\":{\"634\":1}}],[\"版本号=\",{\"1\":{\"754\":1}}],[\"版本号不匹配则认为数据冲突\",{\"1\":{\"653\":1}}],[\"版本号控制\",{\"1\":{\"653\":1}}],[\"版本号\",{\"1\":{\"459\":1,\"460\":1,\"1187\":1}}],[\"版本号必须遵循语义化规则\",{\"1\":{\"459\":1}}],[\"版本选择\",{\"0\":{\"458\":1}}],[\"版本混乱\",{\"1\":{\"442\":1}}],[\"版本\",{\"1\":{\"37\":1,\"1193\":2}}],[\"版本库\",{\"1\":{\"18\":1}}],[\"版本库是集中放在中央服务器的\",{\"1\":{\"11\":1}}],[\"版本管理工具一般具有如下特性\",{\"1\":{\"9\":1}}],[\"版本管理工具概念\",{\"0\":{\"9\":1}}],[\"s+1=\",{\"1\":{\"1421\":1}}],[\"s为源字符串\",{\"1\":{\"1407\":1}}],[\"sqrt\",{\"1\":{\"1359\":1}}],[\"sqrtphi\",{\"1\":{\"1345\":1}}],[\"sqrtpi\",{\"1\":{\"1345\":1}}],[\"sqrte\",{\"1\":{\"1345\":1}}],[\"sqrt2\",{\"1\":{\"1345\":1}}],[\"sql这三个库就可以开发一个独立完整的web项目\",{\"1\":{\"1308\":1}}],[\"sql支持\",{\"1\":{\"904\":1}}],[\"sql支持的数据库不止mysql\",{\"1\":{\"890\":1}}],[\"sqlite\",{\"1\":{\"876\":1,\"890\":1,\"905\":1}}],[\"sql文件\",{\"1\":{\"810\":1}}],[\"sql优化\",{\"1\":{\"799\":1}}],[\"sql优化场景\",{\"1\":{\"581\":1,\"653\":2}}],[\"sql变慢\",{\"1\":{\"799\":1}}],[\"sql编写\",{\"0\":{\"796\":1}}],[\"sql语句执行的过程设计到了mysql几乎所有的模块\",{\"1\":{\"782\":1}}],[\"sql语句加锁问题\",{\"1\":{\"656\":1}}],[\"sql语句多\",{\"1\":{\"624\":1,\"696\":1}}],[\"sqlx或者说标准库database\",{\"1\":{\"890\":1}}],[\"sqlx\",{\"1\":{\"330\":1,\"890\":1,\"891\":1,\"893\":2}}],[\"sql\",{\"1\":{\"124\":2,\"584\":1,\"633\":1,\"638\":1,\"645\":1,\"653\":4,\"655\":1,\"656\":1,\"778\":2,\"790\":1,\"794\":1,\"825\":2,\"876\":1,\"890\":1,\"901\":1,\"904\":1,\"1308\":1}}],[\"s6\",{\"1\":{\"1164\":1}}],[\"s表示允许相同标识的客户端的访问频次\",{\"1\":{\"1151\":1}}],[\"sbin\",{\"1\":{\"1116\":2,\"1122\":1}}],[\"swift\",{\"1\":{\"1238\":1}}],[\"switch来关闭索引合并功能\",{\"1\":{\"816\":1}}],[\"switch语句还支持一种特殊的写法\",{\"1\":{\"387\":1}}],[\"switch语句也可以没有入口处的表达式\",{\"1\":{\"230\":1}}],[\"switch语句也是一种多分支的判断语句\",{\"1\":{\"230\":1}}],[\"switch\",{\"0\":{\"230\":1},\"1\":{\"178\":1,\"213\":1,\"227\":1,\"230\":7,\"309\":1,\"337\":1,\"339\":1,\"387\":1,\"453\":1,\"1164\":1,\"1303\":1,\"1305\":1}}],[\"swarm\",{\"1\":{\"1205\":5}}],[\"swarm集群\",{\"0\":{\"1205\":1}}],[\"swapoff\",{\"1\":{\"1222\":1}}],[\"swap文件分成了很多的page\",{\"1\":{\"965\":1}}],[\"swapped\",{\"1\":{\"440\":1}}],[\"swapint64\",{\"1\":{\"439\":1}}],[\"swap\",{\"1\":{\"439\":2,\"649\":2,\"965\":3,\"1222\":1,\"1235\":1,\"1375\":2,\"1380\":1}}],[\"s1与s2是共享的同一个底层数组\",{\"1\":{\"250\":1}}],[\"s1\",{\"1\":{\"250\":9,\"254\":4}}],[\"slideend\",{\"1\":{\"1062\":1,\"1064\":1}}],[\"slidestart\",{\"1\":{\"1062\":1,\"1064\":1}}],[\"slice函数接收一个指针\",{\"1\":{\"1446\":1}}],[\"slice函数可以将数组指针转换为切片\",{\"1\":{\"306\":1}}],[\"sliceheader类型来获取\",{\"1\":{\"1445\":1}}],[\"slice原理\",{\"1\":{\"621\":1,\"693\":1}}],[\"slice如何做深拷贝\",{\"1\":{\"604\":1,\"676\":1}}],[\"slice的底层结构\",{\"1\":{\"580\":1,\"652\":1}}],[\"slice的扩容策略变为了\",{\"1\":{\"244\":1}}],[\"slice和数组的区别\",{\"1\":{\"563\":1,\"635\":2}}],[\"slicedata就是为了替代它的\",{\"1\":{\"1445\":1}}],[\"slicedata直接获取了字符串底层数组的指针\",{\"1\":{\"303\":1}}],[\"slicedata\",{\"0\":{\"1445\":1},\"1\":{\"254\":1,\"303\":2,\"306\":1,\"1445\":2,\"1446\":1,\"1448\":1}}],[\"slice是要添加元素的目标切片\",{\"1\":{\"244\":1}}],[\"slices\",{\"1\":{\"241\":1,\"249\":5,\"281\":2,\"322\":1,\"327\":1,\"1308\":1}}],[\"slice\",{\"0\":{\"1446\":1},\"1\":{\"241\":10,\"244\":6,\"248\":5,\"249\":2,\"250\":1,\"254\":1,\"287\":11,\"303\":1,\"306\":3,\"320\":1,\"322\":2,\"326\":2,\"327\":4,\"351\":3,\"360\":2,\"434\":3,\"524\":1,\"537\":1,\"635\":2,\"654\":1,\"1420\":3,\"1440\":2,\"1445\":1,\"1446\":2}}],[\"slots\",{\"1\":{\"1010\":9}}],[\"slot\",{\"1\":{\"1006\":2,\"1007\":1,\"1427\":2,\"1428\":3}}],[\"slow\",{\"1\":{\"633\":1,\"656\":1,\"813\":9,\"1163\":5}}],[\"slav服务连接master的密码\",{\"1\":{\"965\":1}}],[\"slave负责读\",{\"1\":{\"990\":1}}],[\"slave可自动重连\",{\"1\":{\"990\":1}}],[\"slave的关系\",{\"1\":{\"990\":1}}],[\"slaveof\",{\"1\":{\"965\":1,\"993\":7,\"994\":1,\"1002\":2}}],[\"slave模式的数据备份\",{\"1\":{\"956\":1}}],[\"slave开启主从复制过程后\",{\"1\":{\"823\":1}}],[\"slave开启主从复制过程\",{\"1\":{\"822\":1}}],[\"slavesqlrunning\",{\"1\":{\"822\":2}}],[\"slaveiorunning\",{\"1\":{\"822\":2}}],[\"slave对外映射的端口是3307\",{\"1\":{\"822\":1}}],[\"slave\",{\"1\":{\"822\":13,\"824\":1,\"825\":16,\"990\":2,\"993\":1,\"994\":1,\"999\":1,\"1010\":8}}],[\"sleeping\",{\"1\":{\"634\":1}}],[\"sleep来模拟不同的耗时\",{\"1\":{\"429\":1}}],[\"sleep并不是一种良好的解决办法\",{\"1\":{\"412\":1}}],[\"sleep\",{\"0\":{\"1435\":1},\"1\":{\"138\":1,\"323\":2,\"396\":2,\"412\":6,\"417\":1,\"421\":3,\"422\":1,\"426\":1,\"427\":6,\"428\":1,\"429\":2,\"430\":2,\"431\":4,\"432\":4,\"499\":1,\"500\":2,\"557\":2,\"813\":1,\"916\":1,\"917\":1,\"1047\":1,\"1435\":3}}],[\"sleuth\",{\"1\":{\"128\":1}}],[\"srv\",{\"1\":{\"1164\":5}}],[\"srv都部署道服务器上即可\",{\"1\":{\"1081\":1}}],[\"srv连接字符串导入\",{\"1\":{\"875\":1}}],[\"srandmember\",{\"1\":{\"973\":1}}],[\"srandmembern\",{\"1\":{\"940\":1}}],[\"srem\",{\"1\":{\"944\":1,\"973\":1}}],[\"srcfile\",{\"1\":{\"410\":3}}],[\"srcdir\",{\"1\":{\"312\":2,\"313\":1}}],[\"src\",{\"1\":{\"176\":1,\"247\":4,\"256\":9,\"393\":2,\"403\":1,\"409\":1,\"410\":4,\"964\":2,\"1315\":1,\"1321\":1,\"1328\":4}}],[\"srt\",{\"1\":{\"146\":2}}],[\"sftp\",{\"1\":{\"145\":1}}],[\"sni\",{\"1\":{\"1132\":1,\"1173\":1}}],[\"sn\",{\"1\":{\"1082\":1}}],[\"snow\",{\"1\":{\"728\":2,\"729\":2,\"733\":1}}],[\"snowball\",{\"1\":{\"144\":1}}],[\"snapshot\",{\"1\":{\"702\":1,\"705\":1,\"979\":1}}],[\"snappy\",{\"1\":{\"636\":1}}],[\"snluu\",{\"1\":{\"122\":1}}],[\"s2\",{\"1\":{\"135\":1,\"250\":9}}],[\"sdiffstore\",{\"1\":{\"941\":1,\"973\":1}}],[\"sdiff\",{\"1\":{\"941\":1,\"973\":1}}],[\"sdk的ios\",{\"1\":{\"134\":1}}],[\"sdl2\",{\"1\":{\"134\":1}}],[\"s3和gcs\",{\"1\":{\"132\":1}}],[\"s3\",{\"1\":{\"132\":1,\"634\":1}}],[\"skiplineending\",{\"1\":{\"1302\":3}}],[\"skiplist实施\",{\"1\":{\"127\":1}}],[\"skiplist\",{\"1\":{\"127\":2}}],[\"skip是第几页\",{\"1\":{\"861\":1}}],[\"skipped\",{\"1\":{\"724\":1}}],[\"skipf\",{\"1\":{\"471\":2,\"472\":1,\"473\":1}}],[\"skipnow\",{\"1\":{\"471\":1}}],[\"skip\",{\"1\":{\"469\":1,\"471\":2,\"477\":2,\"651\":1,\"822\":2,\"825\":1,\"861\":2}}],[\"skywalker\",{\"1\":{\"132\":1}}],[\"skylar\",{\"1\":{\"122\":1}}],[\"smove\",{\"1\":{\"943\":1,\"973\":1}}],[\"smembers\",{\"1\":{\"940\":1,\"973\":1}}],[\"smallestnonzerofloat64\",{\"1\":{\"1344\":1}}],[\"smallestnonzerofloat32\",{\"1\":{\"1344\":1}}],[\"smallint\",{\"1\":{\"791\":1}}],[\"smart\",{\"1\":{\"741\":1}}],[\"smartcrop\",{\"1\":{\"139\":1}}],[\"smi等\",{\"1\":{\"146\":1}}],[\"smf\",{\"1\":{\"126\":1}}],[\"smtp服务\",{\"1\":{\"1107\":1}}],[\"smtp服务器协议状态机\",{\"1\":{\"129\":1}}],[\"smtp\",{\"1\":{\"124\":1,\"129\":1,\"634\":1}}],[\"scope\",{\"1\":{\"1194\":7,\"1195\":6,\"1197\":3}}],[\"score2\",{\"1\":{\"974\":1}}],[\"score1\",{\"1\":{\"974\":1}}],[\"score\",{\"1\":{\"229\":20,\"724\":2,\"741\":3,\"947\":2,\"950\":1}}],[\"scoring\",{\"1\":{\"142\":1}}],[\"scgi\",{\"1\":{\"1116\":6,\"1132\":2,\"1133\":1,\"1173\":2}}],[\"screatkey必须和程序代码的保持一致\",{\"1\":{\"1093\":1}}],[\"screat必须和配置文件一致\",{\"1\":{\"1090\":1}}],[\"scripts\",{\"1\":{\"1219\":1,\"1223\":1,\"1231\":1}}],[\"scriptexists\",{\"1\":{\"952\":1}}],[\"scriptkill\",{\"1\":{\"952\":1}}],[\"scriptflush\",{\"1\":{\"952\":1}}],[\"scriptload\",{\"1\":{\"952\":1}}],[\"script引擎\",{\"1\":{\"138\":1}}],[\"script\",{\"1\":{\"124\":1,\"454\":1,\"749\":1,\"1000\":1}}],[\"scard\",{\"1\":{\"940\":1,\"973\":1}}],[\"scala\",{\"1\":{\"1018\":1,\"1057\":1}}],[\"scalable\",{\"1\":{\"1005\":1}}],[\"scaling\",{\"1\":{\"720\":1}}],[\"scaled\",{\"1\":{\"720\":3}}],[\"scale\",{\"1\":{\"515\":5,\"1017\":1}}],[\"scanf\",{\"1\":{\"224\":1}}],[\"scanln\",{\"1\":{\"224\":2}}],[\"scan\",{\"1\":{\"224\":2,\"226\":5,\"633\":1,\"921\":1}}],[\"scanner与bufio\",{\"1\":{\"226\":1}}],[\"scanner\",{\"0\":{\"226\":1},\"1\":{\"124\":2,\"226\":3,\"633\":4}}],[\"scheme\",{\"1\":{\"1338\":1}}],[\"schema\",{\"1\":{\"1056\":1}}],[\"schema固定\",{\"1\":{\"904\":1}}],[\"scheduler\",{\"1\":{\"635\":1,\"655\":1}}],[\"schar\",{\"1\":{\"304\":3}}],[\"school\",{\"1\":{\"205\":1,\"270\":6,\"1427\":4,\"1428\":4}}],[\"schneier的应用密码学\",{\"1\":{\"124\":1}}],[\"sciter\",{\"1\":{\"138\":1}}],[\"scp\",{\"1\":{\"132\":1}}],[\"scm\",{\"1\":{\"13\":1}}],[\"simperkafka\",{\"1\":{\"1067\":1}}],[\"simperzookeeper\",{\"1\":{\"1066\":1}}],[\"simperava\",{\"1\":{\"1064\":1}}],[\"simperreplicas\",{\"1\":{\"1064\":1}}],[\"simperpartition\",{\"1\":{\"1062\":1}}],[\"simperproducerconsumer\",{\"1\":{\"1061\":1}}],[\"simper3\",{\"1\":{\"1062\":1}}],[\"simper2\",{\"1\":{\"1062\":1}}],[\"simperoffset\",{\"1\":{\"1061\":1}}],[\"simper1\",{\"1\":{\"1060\":1}}],[\"simple\",{\"1\":{\"124\":1,\"129\":1,\"134\":1,\"448\":1,\"651\":1,\"814\":1}}],[\"simplejson\",{\"1\":{\"122\":1}}],[\"sink\",{\"1\":{\"1306\":2}}],[\"sin6\",{\"1\":{\"1164\":3}}],[\"sin\",{\"0\":{\"1362\":1},\"1\":{\"1164\":3,\"1362\":2}}],[\"sinterstore\",{\"1\":{\"941\":1,\"973\":1}}],[\"sinter\",{\"1\":{\"941\":1,\"973\":1}}],[\"single\",{\"1\":{\"742\":1,\"1192\":1}}],[\"singed\",{\"1\":{\"304\":1}}],[\"sismember\",{\"1\":{\"940\":1,\"973\":1}}],[\"site\",{\"1\":{\"847\":2}}],[\"signedint\",{\"1\":{\"340\":7,\"341\":4}}],[\"signed\",{\"1\":{\"304\":4}}],[\"signal\",{\"1\":{\"132\":1,\"432\":1,\"1308\":1}}],[\"signaturealgorithm\",{\"1\":{\"124\":1}}],[\"signature\",{\"1\":{\"124\":1,\"634\":1}}],[\"size是要根据存储的\",{\"1\":{\"965\":1}}],[\"size=1m\",{\"1\":{\"822\":3}}],[\"sizeof\",{\"0\":{\"1440\":1},\"1\":{\"274\":1,\"306\":2,\"353\":1,\"513\":1,\"1164\":3,\"1440\":8,\"1441\":3,\"1442\":3,\"1445\":2,\"1447\":1}}],[\"sizeof函数来计算占用的字节大小\",{\"1\":{\"274\":1}}],[\"size\",{\"0\":{\"353\":1},\"1\":{\"211\":1,\"277\":1,\"320\":1,\"343\":5,\"344\":17,\"348\":1,\"353\":6,\"556\":1,\"654\":1,\"656\":3,\"713\":2,\"756\":1,\"757\":1,\"758\":1,\"763\":1,\"965\":1,\"985\":1,\"1010\":1,\"1152\":1,\"1187\":1}}],[\"sirupsen\",{\"1\":{\"122\":1}}],[\"sprig\",{\"1\":{\"1414\":1}}],[\"sprintln\",{\"1\":{\"1420\":1}}],[\"sprint\",{\"1\":{\"1289\":1,\"1420\":1}}],[\"sprintf一致\",{\"1\":{\"1417\":1}}],[\"sprintf函数来进行字符串格式化\",{\"1\":{\"1414\":1}}],[\"sprintf\",{\"1\":{\"400\":1,\"446\":2,\"713\":1,\"1289\":1,\"1417\":1,\"1420\":3}}],[\"sprintf或者fmt\",{\"1\":{\"221\":1}}],[\"springframework\",{\"1\":{\"1166\":3}}],[\"spring里面有很多sdk\",{\"1\":{\"598\":1,\"670\":1}}],[\"springboot你常用的注解有哪些\",{\"1\":{\"598\":1,\"670\":1}}],[\"springboot可以调吗\",{\"1\":{\"573\":1,\"645\":1}}],[\"springcache和redis有什么区别\",{\"1\":{\"592\":1,\"664\":1}}],[\"springcache依赖redis\",{\"1\":{\"569\":1,\"641\":2}}],[\"spring\",{\"1\":{\"213\":3,\"641\":1,\"645\":1,\"1072\":1}}],[\"sport\",{\"1\":{\"1281\":1}}],[\"spopn\",{\"1\":{\"942\":1}}],[\"spop\",{\"1\":{\"942\":1,\"973\":1}}],[\"spider\",{\"1\":{\"1151\":2}}],[\"spill\",{\"1\":{\"318\":1,\"320\":2}}],[\"splitaftern\",{\"1\":{\"1408\":2}}],[\"splitafter\",{\"1\":{\"1408\":2}}],[\"splitn\",{\"1\":{\"1408\":2}}],[\"split\",{\"1\":{\"633\":2,\"1047\":3,\"1092\":1,\"1408\":2}}],[\"splitting\",{\"1\":{\"328\":1}}],[\"spcae\",{\"1\":{\"327\":1}}],[\"space\",{\"1\":{\"326\":1,\"327\":1}}],[\"speak\",{\"1\":{\"516\":4,\"635\":3,\"651\":3}}],[\"speaker\",{\"1\":{\"516\":2,\"635\":2}}],[\"specialcase\",{\"1\":{\"1409\":4}}],[\"specify\",{\"1\":{\"766\":1}}],[\"specified\",{\"1\":{\"400\":1,\"454\":2}}],[\"specifies\",{\"1\":{\"289\":1}}],[\"spec\",{\"1\":{\"1215\":6}}],[\"specs\",{\"1\":{\"145\":1}}],[\"spew\",{\"1\":{\"122\":1}}],[\"spf13\",{\"1\":{\"122\":3}}],[\"svc\",{\"1\":{\"1231\":1,\"1235\":2}}],[\"svg或光栅图像\",{\"1\":{\"139\":1}}],[\"svgo\",{\"1\":{\"122\":1,\"139\":1}}],[\"svg\",{\"1\":{\"122\":1,\"326\":1}}],[\"svn好用\",{\"1\":{\"12\":1}}],[\"svn这些免费的版本控制系统吗\",{\"1\":{\"12\":1}}],[\"svn流程图\",{\"1\":{\"11\":1}}],[\"svn是集中式版本控制系统\",{\"1\":{\"11\":1}}],[\"svn\",{\"0\":{\"11\":1},\"1\":{\"12\":2,\"443\":1}}],[\"saleprice\",{\"1\":{\"1082\":1}}],[\"salary\",{\"1\":{\"268\":4,\"269\":4,\"278\":4,\"281\":4,\"704\":2,\"705\":1,\"709\":2,\"710\":1,\"711\":2,\"713\":1,\"820\":1}}],[\"saving\",{\"1\":{\"981\":1}}],[\"saveiploadfile\",{\"1\":{\"1281\":1}}],[\"saveuploadedfile\",{\"1\":{\"1281\":1}}],[\"saveof\",{\"1\":{\"990\":1}}],[\"savelof\",{\"1\":{\"990\":1}}],[\"savedatamany\",{\"1\":{\"881\":1,\"884\":1}}],[\"savedata\",{\"1\":{\"881\":1,\"884\":1}}],[\"save\",{\"1\":{\"863\":2,\"965\":4,\"981\":7,\"988\":1}}],[\"saveatricle\",{\"1\":{\"746\":2}}],[\"sadd\",{\"1\":{\"939\":2,\"973\":1,\"985\":5}}],[\"sandrae\",{\"1\":{\"766\":1}}],[\"sansa\",{\"1\":{\"728\":2,\"729\":1}}],[\"san\",{\"1\":{\"634\":1}}],[\"safemapaccess\",{\"1\":{\"635\":1}}],[\"safe\",{\"1\":{\"453\":1,\"908\":1}}],[\"sayhello函数就是待测函数\",{\"1\":{\"470\":1}}],[\"sayable\",{\"1\":{\"338\":2}}],[\"sayable是一个泛型接口\",{\"1\":{\"338\":1}}],[\"say\",{\"1\":{\"291\":1,\"293\":3,\"338\":3,\"443\":1,\"446\":1,\"448\":1,\"468\":7,\"470\":6}}],[\"said\",{\"1\":{\"289\":2}}],[\"sailfish\",{\"1\":{\"138\":1}}],[\"samplingconfig\",{\"1\":{\"1302\":1}}],[\"sampling\",{\"1\":{\"1302\":3}}],[\"sample\",{\"1\":{\"326\":3,\"795\":2}}],[\"samples\",{\"1\":{\"326\":2,\"476\":5}}],[\"samuel\",{\"1\":{\"122\":2}}],[\"samba\",{\"1\":{\"12\":1}}],[\"satori\",{\"1\":{\"122\":1}}],[\"sarama\",{\"1\":{\"122\":1,\"1035\":6,\"1036\":4,\"1037\":5,\"1046\":2,\"1047\":18}}],[\"saramahttps\",{\"1\":{\"122\":1}}],[\"style\",{\"1\":{\"474\":1}}],[\"stomq\",{\"1\":{\"1057\":1}}],[\"stock\",{\"1\":{\"644\":1}}],[\"stop对一个列表进行修剪\",{\"1\":{\"971\":1}}],[\"stop获取列表指定范围内的元素\",{\"1\":{\"971\":1}}],[\"stopword\",{\"1\":{\"742\":1}}],[\"stopwords\",{\"1\":{\"742\":2,\"743\":1}}],[\"stoptimer\",{\"0\":{\"500\":1},\"1\":{\"500\":2}}],[\"stop\",{\"1\":{\"323\":1,\"825\":3,\"852\":1,\"974\":3,\"982\":1,\"986\":1,\"1032\":1,\"1119\":1,\"1127\":1,\"1172\":1,\"1175\":1,\"1182\":1,\"1184\":1,\"1188\":1,\"1222\":1,\"1433\":1,\"1434\":1}}],[\"stopcpuprofile\",{\"1\":{\"323\":1}}],[\"storagesize\",{\"1\":{\"855\":1}}],[\"storage\",{\"1\":{\"318\":1,\"319\":1,\"320\":4,\"639\":1}}],[\"storeint64\",{\"1\":{\"439\":1}}],[\"storeuint32\",{\"1\":{\"434\":1}}],[\"store\",{\"1\":{\"289\":2,\"436\":5,\"439\":2,\"441\":5,\"558\":1,\"941\":4}}],[\"stub\",{\"1\":{\"1116\":1,\"1132\":1,\"1173\":1}}],[\"stu\",{\"1\":{\"857\":4}}],[\"stuff\",{\"1\":{\"338\":4}}],[\"student\",{\"1\":{\"270\":8,\"513\":1,\"1428\":2}}],[\"stun协议\",{\"1\":{\"145\":1}}],[\"stun客户端的go实现\",{\"1\":{\"145\":1}}],[\"stun\",{\"1\":{\"145\":2}}],[\"st\",{\"1\":{\"269\":1,\"516\":1}}],[\"stdlib\",{\"1\":{\"303\":2}}],[\"stderr\",{\"1\":{\"215\":4,\"280\":1,\"446\":1,\"756\":1,\"771\":1,\"1077\":2,\"1303\":1}}],[\"stdout\",{\"0\":{\"217\":1},\"1\":{\"215\":4,\"217\":1,\"220\":2,\"223\":1,\"279\":1,\"446\":1,\"756\":1,\"766\":1,\"771\":1,\"965\":1,\"1047\":1,\"1077\":2,\"1303\":1,\"1304\":1,\"1415\":2,\"1417\":4,\"1419\":1,\"1425\":1,\"1426\":1,\"1428\":2}}],[\"stdin读入的文本\",{\"1\":{\"224\":1}}],[\"stdin\",{\"1\":{\"215\":4,\"223\":1,\"225\":1,\"226\":1}}],[\"stemmer\",{\"1\":{\"144\":1}}],[\"stem\",{\"1\":{\"144\":1}}],[\"stegify\",{\"1\":{\"139\":1}}],[\"steganography\",{\"1\":{\"139\":1}}],[\"stm\",{\"1\":{\"137\":1}}],[\"stl\",{\"1\":{\"132\":1,\"137\":1,\"146\":1}}],[\"stl迭代器和算法的实现\",{\"1\":{\"127\":1}}],[\"strongly\",{\"1\":{\"1301\":1}}],[\"strom\",{\"1\":{\"1047\":1}}],[\"strlen\",{\"1\":{\"970\":1}}],[\"str=concat\",{\"1\":{\"820\":1}}],[\"strs\",{\"1\":{\"649\":3}}],[\"stream\",{\"1\":{\"1123\":1,\"1130\":1,\"1131\":1,\"1158\":1,\"1162\":2,\"1163\":2}}],[\"stream等之类的api\",{\"1\":{\"714\":1}}],[\"streadway\",{\"1\":{\"122\":1}}],[\"street\",{\"1\":{\"635\":1}}],[\"strconcat\",{\"1\":{\"475\":1}}],[\"strconv\",{\"0\":{\"1382\":1},\"1\":{\"121\":1,\"124\":1,\"1047\":2,\"1308\":1,\"1382\":3,\"1383\":1,\"1384\":1,\"1385\":1,\"1386\":3,\"1387\":2,\"1388\":2,\"1389\":2,\"1390\":6,\"1391\":3,\"1392\":3,\"1393\":3}}],[\"strch\",{\"1\":{\"414\":1}}],[\"str2\",{\"1\":{\"255\":5}}],[\"str\",{\"1\":{\"205\":1,\"221\":3,\"230\":8,\"253\":11,\"254\":7,\"255\":4,\"257\":8,\"258\":17,\"350\":2,\"357\":2,\"362\":3,\"398\":2,\"477\":22,\"512\":1,\"820\":5,\"1385\":2,\"1386\":1,\"1403\":3,\"1447\":4,\"1448\":2}}],[\"structtag\",{\"1\":{\"367\":1,\"369\":2}}],[\"structfield\",{\"1\":{\"367\":9}}],[\"structfield结构的结构如下\",{\"1\":{\"367\":1}}],[\"structured\",{\"1\":{\"1299\":1,\"1301\":1}}],[\"structure\",{\"1\":{\"345\":1,\"892\":1}}],[\"struct\",{\"1\":{\"178\":1,\"201\":1,\"221\":1,\"265\":2,\"266\":1,\"267\":2,\"268\":1,\"269\":1,\"270\":6,\"272\":1,\"273\":3,\"274\":1,\"278\":1,\"281\":1,\"287\":2,\"293\":3,\"307\":6,\"317\":2,\"320\":1,\"338\":5,\"339\":2,\"340\":2,\"344\":2,\"347\":5,\"348\":1,\"351\":3,\"354\":1,\"355\":2,\"356\":2,\"366\":1,\"367\":1,\"370\":1,\"374\":1,\"391\":1,\"392\":1,\"393\":1,\"417\":9,\"421\":2,\"424\":2,\"425\":1,\"426\":1,\"427\":1,\"434\":2,\"435\":1,\"441\":1,\"463\":1,\"474\":1,\"494\":1,\"513\":4,\"515\":3,\"516\":2,\"524\":1,\"545\":4,\"546\":1,\"554\":2,\"635\":4,\"651\":3,\"654\":4,\"703\":1,\"746\":1,\"756\":1,\"831\":1,\"833\":1,\"834\":2,\"880\":1,\"893\":1,\"911\":1,\"1164\":5,\"1281\":1,\"1283\":1,\"1289\":1,\"1302\":3,\"1303\":2,\"1307\":1,\"1310\":1,\"1313\":1,\"1316\":1,\"1318\":1,\"1337\":1,\"1380\":1,\"1411\":2,\"1417\":2,\"1440\":2,\"1441\":1,\"1442\":1,\"1443\":1}}],[\"strict\",{\"1\":{\"721\":1}}],[\"string>\",{\"1\":{\"1165\":2,\"1166\":6}}],[\"stringencoder\",{\"1\":{\"1035\":1,\"1047\":1}}],[\"string类可以被继承吗\",{\"1\":{\"606\":1,\"678\":1}}],[\"stringvar\",{\"1\":{\"446\":1,\"1325\":1,\"1328\":1}}],[\"string指针\",{\"1\":{\"277\":1}}],[\"stringdata和string在字符串与字节切片的转换过程中不涉及内存拷贝\",{\"1\":{\"1448\":1}}],[\"stringdata\",{\"0\":{\"1447\":1},\"1\":{\"254\":2,\"1447\":2}}],[\"string=\",{\"1\":{\"221\":1}}],[\"string\",{\"0\":{\"717\":1,\"1448\":1},\"1\":{\"187\":1,\"200\":1,\"201\":1,\"205\":4,\"206\":3,\"207\":1,\"211\":2,\"213\":2,\"221\":4,\"224\":1,\"229\":2,\"253\":7,\"254\":4,\"255\":5,\"256\":5,\"257\":6,\"258\":5,\"259\":5,\"260\":3,\"261\":3,\"262\":2,\"263\":2,\"264\":2,\"266\":4,\"267\":2,\"268\":6,\"269\":5,\"270\":6,\"272\":3,\"275\":1,\"277\":2,\"278\":5,\"279\":2,\"280\":1,\"281\":1,\"291\":2,\"293\":13,\"294\":2,\"303\":19,\"309\":2,\"317\":1,\"318\":9,\"323\":1,\"338\":20,\"339\":6,\"344\":1,\"348\":4,\"350\":1,\"351\":5,\"352\":2,\"353\":1,\"355\":4,\"356\":4,\"360\":1,\"362\":2,\"366\":4,\"367\":5,\"369\":4,\"370\":10,\"373\":1,\"374\":4,\"376\":1,\"381\":2,\"383\":1,\"384\":8,\"387\":2,\"388\":3,\"389\":1,\"391\":3,\"392\":2,\"393\":3,\"394\":1,\"395\":1,\"398\":1,\"400\":3,\"401\":4,\"402\":4,\"404\":1,\"405\":2,\"408\":1,\"409\":2,\"410\":3,\"414\":1,\"419\":1,\"435\":2,\"446\":3,\"463\":4,\"473\":1,\"475\":2,\"477\":17,\"478\":1,\"511\":1,\"512\":2,\"513\":4,\"516\":3,\"524\":1,\"537\":1,\"554\":3,\"580\":1,\"584\":3,\"630\":1,\"635\":9,\"649\":3,\"651\":6,\"652\":1,\"654\":1,\"656\":7,\"702\":1,\"705\":3,\"707\":1,\"713\":3,\"717\":7,\"746\":7,\"748\":2,\"751\":1,\"754\":1,\"756\":3,\"820\":2,\"831\":2,\"833\":2,\"834\":4,\"880\":4,\"881\":3,\"882\":5,\"883\":2,\"884\":3,\"890\":1,\"891\":1,\"893\":3,\"911\":3,\"927\":1,\"952\":2,\"961\":1,\"969\":1,\"1035\":1,\"1036\":2,\"1037\":2,\"1047\":6,\"1092\":2,\"1133\":1,\"1164\":1,\"1165\":5,\"1166\":4,\"1245\":1,\"1275\":1,\"1277\":1,\"1280\":3,\"1281\":2,\"1283\":1,\"1286\":2,\"1289\":6,\"1301\":1,\"1302\":13,\"1303\":7,\"1307\":2,\"1310\":4,\"1311\":1,\"1313\":4,\"1314\":1,\"1316\":3,\"1317\":1,\"1318\":3,\"1319\":2,\"1321\":1,\"1324\":1,\"1325\":2,\"1327\":1,\"1328\":2,\"1330\":1,\"1340\":2,\"1341\":1,\"1367\":1,\"1368\":1,\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1374\":1,\"1378\":1,\"1380\":3,\"1384\":1,\"1385\":1,\"1386\":1,\"1387\":1,\"1389\":1,\"1390\":1,\"1391\":1,\"1392\":1,\"1393\":1,\"1396\":2,\"1397\":1,\"1398\":3,\"1399\":1,\"1400\":3,\"1401\":1,\"1402\":4,\"1403\":2,\"1404\":5,\"1405\":2,\"1406\":2,\"1407\":4,\"1408\":8,\"1409\":8,\"1410\":10,\"1411\":1,\"1412\":1,\"1413\":2,\"1415\":4,\"1417\":6,\"1419\":1,\"1420\":6,\"1422\":2,\"1423\":2,\"1425\":9,\"1426\":2,\"1427\":1,\"1428\":4,\"1432\":1,\"1440\":4,\"1441\":1,\"1442\":1,\"1443\":2,\"1447\":2,\"1448\":3}}],[\"strings实现了简单的函数来操作utf\",{\"1\":{\"1394\":1}}],[\"strings\",{\"0\":{\"1394\":1},\"1\":{\"124\":1,\"256\":1,\"257\":1,\"352\":2,\"475\":3,\"477\":1,\"633\":1,\"957\":1,\"1047\":5,\"1092\":2,\"1308\":1,\"1378\":3,\"1394\":2,\"1395\":1,\"1396\":1,\"1397\":4,\"1398\":8,\"1399\":3,\"1400\":1,\"1401\":3,\"1402\":2,\"1403\":2,\"1404\":5,\"1405\":3,\"1406\":2,\"1407\":4,\"1408\":4,\"1409\":4,\"1410\":5,\"1411\":3,\"1412\":1,\"1413\":1}}],[\"stringutil\",{\"1\":{\"122\":1}}],[\"stripmono\",{\"1\":{\"1429\":1}}],[\"strip\",{\"1\":{\"122\":1,\"1081\":1}}],[\"stacktrace\",{\"1\":{\"1303\":5,\"1306\":1}}],[\"stacktracekey\",{\"1\":{\"1302\":3,\"1303\":1}}],[\"stack\",{\"1\":{\"319\":1,\"637\":1,\"700\":1,\"1072\":1}}],[\"statistics\",{\"1\":{\"1195\":2,\"1196\":1,\"1197\":3}}],[\"static\",{\"1\":{\"1082\":3,\"1116\":1,\"1132\":1,\"1164\":10,\"1165\":1,\"1173\":1}}],[\"station\",{\"1\":{\"817\":2}}],[\"stats\",{\"1\":{\"855\":1,\"856\":1}}],[\"stat\",{\"1\":{\"400\":2,\"410\":1}}],[\"state\",{\"1\":{\"309\":6,\"400\":1,\"906\":1,\"1010\":1,\"1029\":2,\"1194\":5,\"1195\":5,\"1278\":1}}],[\"statement以了解更多细节\",{\"1\":{\"234\":1}}],[\"statement\",{\"1\":{\"230\":1,\"233\":5,\"822\":3,\"1410\":10}}],[\"statement2\",{\"1\":{\"230\":1}}],[\"statement1\",{\"1\":{\"230\":1}}],[\"statusinternalservererror\",{\"1\":{\"1281\":1}}],[\"statusbadrequest\",{\"1\":{\"1281\":2,\"1283\":2}}],[\"statusunauthorized\",{\"1\":{\"1092\":3}}],[\"statusok\",{\"1\":{\"1087\":1,\"1274\":1,\"1275\":1,\"1277\":1,\"1280\":3,\"1281\":3,\"1282\":1,\"1283\":1}}],[\"status获得\",{\"1\":{\"822\":1}}],[\"status\",{\"1\":{\"55\":3,\"477\":2,\"653\":4,\"717\":1,\"745\":1,\"746\":3,\"768\":1,\"813\":1,\"822\":3,\"825\":4,\"1116\":1,\"1132\":1,\"1151\":2,\"1152\":2,\"1157\":2,\"1158\":2,\"1173\":1,\"1194\":1,\"1223\":1,\"1228\":1}}],[\"standardclaims\",{\"1\":{\"1090\":2}}],[\"standard\",{\"1\":{\"124\":1,\"706\":2,\"733\":1}}],[\"stark的结果\",{\"1\":{\"728\":1}}],[\"stark\",{\"1\":{\"728\":4,\"729\":2}}],[\"starlark\",{\"1\":{\"454\":1}}],[\"stars\",{\"1\":{\"111\":1}}],[\"star\",{\"1\":{\"53\":1,\"909\":1}}],[\"startlimitinterval=60s\",{\"1\":{\"1223\":1}}],[\"startlimitburst=3\",{\"1\":{\"1223\":1}}],[\"start=60s\",{\"1\":{\"1163\":2}}],[\"started\",{\"1\":{\"981\":1,\"985\":1,\"993\":1,\"1078\":1}}],[\"starttimer\",{\"0\":{\"500\":1},\"1\":{\"500\":2}}],[\"startserver\",{\"1\":{\"634\":1}}],[\"starts\",{\"1\":{\"454\":1}}],[\"startcpuprofile\",{\"1\":{\"323\":1}}],[\"startcpuprofile函数\",{\"1\":{\"323\":1}}],[\"startindex\",{\"1\":{\"241\":1}}],[\"start\",{\"1\":{\"5\":2,\"314\":2,\"323\":1,\"412\":9,\"421\":1,\"422\":2,\"653\":3,\"656\":1,\"706\":7,\"820\":1,\"822\":1,\"825\":4,\"852\":2,\"970\":1,\"971\":2,\"974\":3,\"986\":1,\"1031\":2,\"1032\":1,\"1033\":2,\"1047\":2,\"1078\":2,\"1163\":3,\"1175\":1,\"1182\":1,\"1184\":1,\"1188\":1,\"1221\":1,\"1222\":1,\"1435\":2}}],[\"staged\",{\"1\":{\"22\":1}}],[\"s架构\",{\"1\":{\"110\":1}}],[\"ssd\",{\"1\":{\"1039\":1}}],[\"ss\",{\"1\":{\"947\":1,\"948\":2,\"949\":4,\"950\":1,\"951\":3}}],[\"sscan\",{\"1\":{\"945\":1,\"973\":1}}],[\"ss||yyyy\",{\"1\":{\"721\":1,\"724\":1}}],[\"sso\",{\"1\":{\"639\":1,\"1130\":1}}],[\"ssor\",{\"1\":{\"122\":1}}],[\"sse\",{\"1\":{\"453\":2,\"459\":1}}],[\"ssa\",{\"1\":{\"146\":1}}],[\"sslb\",{\"1\":{\"145\":1}}],[\"ssl\",{\"1\":{\"84\":3,\"641\":2,\"1077\":1,\"1078\":2,\"1116\":1,\"1132\":1,\"1173\":1,\"1235\":1}}],[\"ssh连接地城是ras加密算法\",{\"1\":{\"49\":1}}],[\"ssh\",{\"0\":{\"49\":1,\"50\":1,\"51\":1,\"52\":1},\"1\":{\"49\":1,\"50\":2,\"52\":1,\"145\":2}}],[\"seeker\",{\"1\":{\"1413\":1}}],[\"seed\",{\"1\":{\"477\":7,\"769\":1,\"770\":2}}],[\"sep\",{\"1\":{\"1400\":4,\"1408\":4}}],[\"sed\",{\"1\":{\"1222\":2,\"1228\":1}}],[\"selinux=permissive\",{\"1\":{\"1222\":1}}],[\"selinux\",{\"1\":{\"1222\":2,\"1235\":1}}],[\"selector\",{\"1\":{\"1215\":2}}],[\"selecttop\",{\"1\":{\"861\":3}}],[\"select查询的序列号\",{\"1\":{\"814\":1}}],[\"select语句不要使用union\",{\"1\":{\"796\":1}}],[\"select会忽略掉nil管道\",{\"1\":{\"426\":1}}],[\"select会伪随机的选择一个case来执行\",{\"1\":{\"421\":1}}],[\"select由于没有默认分支\",{\"1\":{\"421\":1}}],[\"select由多个case和一个default组成\",{\"1\":{\"421\":1}}],[\"select的语法与switch语句类似\",{\"1\":{\"421\":1}}],[\"select是一种管道多路复用的控制结构\",{\"1\":{\"421\":1}}],[\"select在linux系统中\",{\"1\":{\"421\":1}}],[\"select相对前两者而言比较特殊\",{\"1\":{\"227\":1}}],[\"select\",{\"0\":{\"421\":1},\"1\":{\"178\":1,\"227\":1,\"421\":7,\"426\":1,\"427\":4,\"428\":1,\"470\":1,\"581\":1,\"587\":1,\"614\":1,\"634\":1,\"651\":1,\"653\":2,\"659\":1,\"686\":1,\"778\":1,\"780\":1,\"806\":4,\"810\":2,\"813\":1,\"814\":26,\"817\":2,\"818\":12,\"819\":7,\"820\":10,\"821\":9,\"861\":15,\"893\":3,\"967\":1,\"985\":2,\"1036\":1,\"1047\":2,\"1433\":1,\"1434\":1}}],[\"several\",{\"1\":{\"1192\":1}}],[\"se2\",{\"1\":{\"941\":1}}],[\"sex=false\",{\"1\":{\"1328\":1}}],[\"sex\",{\"1\":{\"861\":2,\"863\":2,\"1325\":5,\"1328\":5}}],[\"seq=4\",{\"1\":{\"1197\":1}}],[\"seq=3\",{\"1\":{\"1195\":1,\"1196\":1,\"1197\":2}}],[\"seq=2\",{\"1\":{\"1195\":2,\"1196\":1,\"1197\":3}}],[\"seq=1\",{\"1\":{\"1194\":1,\"1195\":2,\"1196\":1,\"1197\":3}}],[\"seq\",{\"1\":{\"709\":1,\"710\":1,\"711\":1,\"712\":1}}],[\"sequence\",{\"1\":{\"234\":2}}],[\"serializable\",{\"1\":{\"641\":1}}],[\"servehttp\",{\"1\":{\"1337\":1,\"1338\":1}}],[\"servermux是核心结构体\",{\"1\":{\"1337\":1}}],[\"servermap\",{\"1\":{\"1165\":5}}],[\"server相关参数\",{\"1\":{\"1163\":1}}],[\"server服务器级别的限流的每秒的速率肯定是比较大的\",{\"1\":{\"1158\":1}}],[\"server1\",{\"1\":{\"1131\":1}}],[\"server命令去启动即可\",{\"1\":{\"1000\":1}}],[\"server没有设置可以为空\",{\"1\":{\"911\":1}}],[\"server层包含连接器\",{\"1\":{\"775\":1}}],[\"server的实例化方式也是采用了该设计模式\",{\"1\":{\"269\":1}}],[\"server\",{\"1\":{\"84\":3,\"122\":1,\"145\":2,\"324\":1,\"328\":1,\"331\":2,\"454\":2,\"655\":1,\"743\":2,\"776\":1,\"822\":3,\"851\":1,\"852\":5,\"876\":1,\"964\":1,\"986\":3,\"993\":4,\"994\":1,\"1002\":3,\"1004\":1,\"1010\":9,\"1029\":1,\"1031\":2,\"1032\":4,\"1033\":2,\"1034\":4,\"1078\":1,\"1081\":1,\"1108\":1,\"1123\":2,\"1130\":4,\"1131\":4,\"1136\":4,\"1141\":2,\"1142\":2,\"1143\":2,\"1144\":2,\"1151\":4,\"1152\":5,\"1154\":1,\"1155\":1,\"1156\":1,\"1157\":1,\"1158\":2,\"1160\":10,\"1162\":3,\"1163\":19,\"1164\":6,\"1165\":3,\"1166\":5,\"1167\":3,\"1168\":3,\"1233\":1,\"1307\":2,\"1336\":3}}],[\"servlet\",{\"1\":{\"1166\":1}}],[\"serving\",{\"1\":{\"453\":1}}],[\"serviceaccount=kubernetes\",{\"1\":{\"1235\":1}}],[\"serviceaccount\",{\"1\":{\"1235\":3}}],[\"service单元的当前状态\",{\"1\":{\"1223\":1}}],[\"service单元\",{\"1\":{\"1223\":1}}],[\"service文件\",{\"1\":{\"1223\":1}}],[\"servicename\",{\"1\":{\"852\":1}}],[\"service`\",{\"1\":{\"817\":1}}],[\"services\",{\"1\":{\"451\":1,\"852\":1,\"1081\":1,\"1233\":1}}],[\"service\",{\"1\":{\"84\":2,\"655\":1,\"849\":2,\"963\":1,\"986\":2,\"1032\":3,\"1175\":5,\"1196\":2,\"1198\":1,\"1215\":1,\"1223\":7,\"1225\":2}}],[\"servre\",{\"1\":{\"324\":2}}],[\"sema\",{\"1\":{\"400\":1}}],[\"semaphore\",{\"1\":{\"137\":2}}],[\"searchresult\",{\"1\":{\"756\":5,\"757\":1,\"758\":1,\"763\":1,\"766\":10}}],[\"search\",{\"1\":{\"258\":1,\"630\":2,\"656\":1,\"702\":1,\"713\":10,\"724\":2,\"729\":1,\"730\":1,\"732\":1,\"733\":1,\"741\":2,\"756\":1,\"757\":1,\"758\":1,\"763\":1,\"766\":1,\"1151\":1,\"1187\":1}}],[\"season\",{\"1\":{\"213\":4}}],[\"security\",{\"1\":{\"871\":1}}],[\"secret\",{\"1\":{\"744\":1,\"756\":1,\"771\":1}}],[\"section\",{\"1\":{\"744\":1}}],[\"sec表示多少个输入每秒\",{\"1\":{\"477\":1}}],[\"sec\",{\"1\":{\"476\":4,\"477\":11,\"822\":1,\"1429\":1}}],[\"secondsdurationencoder\",{\"1\":{\"1303\":1}}],[\"seconds\",{\"1\":{\"775\":2,\"967\":2,\"970\":2}}],[\"second\",{\"1\":{\"226\":2,\"323\":2,\"419\":1,\"421\":4,\"426\":1,\"427\":2,\"428\":1,\"470\":1,\"477\":16,\"499\":1,\"500\":2,\"557\":2,\"633\":2,\"639\":1,\"651\":2,\"706\":3,\"756\":1,\"771\":1,\"916\":2,\"917\":1,\"1037\":1,\"1047\":3,\"1301\":2,\"1417\":2,\"1422\":2,\"1430\":2,\"1433\":1,\"1434\":1,\"1435\":1}}],[\"secsh\",{\"1\":{\"145\":1}}],[\"segment\",{\"1\":{\"144\":1,\"1029\":2}}],[\"sendfile\",{\"1\":{\"1123\":1,\"1130\":1,\"1131\":1,\"1158\":1}}],[\"sendmessage\",{\"1\":{\"1035\":1,\"1047\":1}}],[\"send\",{\"1\":{\"419\":1,\"421\":8,\"1029\":1,\"1035\":2,\"1047\":1}}],[\"sendgrid的go库\",{\"1\":{\"129\":1}}],[\"sendgrid\",{\"1\":{\"129\":1,\"634\":1}}],[\"sent\",{\"1\":{\"1130\":1,\"1131\":1,\"1133\":2,\"1158\":1}}],[\"sentences\",{\"1\":{\"144\":1}}],[\"sentinel解决的是可用性问题\",{\"1\":{\"1005\":1}}],[\"sentinel26381\",{\"1\":{\"1004\":1}}],[\"sentinel26380\",{\"1\":{\"1004\":1}}],[\"sentinel26379\",{\"1\":{\"1004\":1}}],[\"sentinel或者redis\",{\"1\":{\"1000\":1}}],[\"sentinel1\",{\"1\":{\"997\":2,\"998\":2,\"999\":2}}],[\"sentinel\",{\"0\":{\"102\":1},\"1\":{\"651\":1,\"995\":1,\"996\":4,\"997\":1,\"998\":2,\"999\":6,\"1000\":7,\"1001\":1,\"1003\":10,\"1004\":14}}],[\"sensorbee\",{\"1\":{\"140\":1}}],[\"session登录有什么弊端\",{\"1\":{\"625\":1,\"697\":1}}],[\"session的方式了解过吗\",{\"1\":{\"592\":1,\"664\":1}}],[\"session是在哪存的\",{\"1\":{\"569\":1,\"641\":2}}],[\"sessions\",{\"1\":{\"122\":1}}],[\"session\",{\"1\":{\"122\":1,\"454\":1,\"569\":1,\"611\":1,\"619\":2,\"641\":11,\"683\":1,\"691\":2}}],[\"setloc\",{\"1\":{\"1429\":1}}],[\"setlimit\",{\"1\":{\"834\":1}}],[\"setflags\",{\"1\":{\"1341\":2}}],[\"setprefix\",{\"1\":{\"1340\":2}}],[\"setoutput\",{\"1\":{\"1307\":2,\"1341\":1}}],[\"setrange\",{\"1\":{\"970\":1}}],[\"setenforce\",{\"1\":{\"1222\":2}}],[\"setex\",{\"1\":{\"970\":3}}],[\"seterrorlog\",{\"1\":{\"756\":1,\"771\":1}}],[\"set2\",{\"1\":{\"939\":1,\"941\":4,\"943\":1}}],[\"sets\",{\"1\":{\"957\":2,\"1163\":1}}],[\"setsort\",{\"1\":{\"834\":1}}],[\"setstring\",{\"1\":{\"368\":1,\"373\":1}}],[\"setinfolog\",{\"1\":{\"756\":1,\"771\":1}}],[\"setint\",{\"1\":{\"361\":1,\"368\":1,\"375\":1}}],[\"sethealthcheckinterval\",{\"1\":{\"756\":1,\"771\":1}}],[\"setgzip\",{\"1\":{\"756\":1,\"771\":1}}],[\"setgid\",{\"1\":{\"400\":1}}],[\"setbit\",{\"1\":{\"970\":1}}],[\"setbasicauth\",{\"1\":{\"744\":1,\"756\":1,\"771\":1}}],[\"setblockprofilerate查看更多细节\",{\"1\":{\"469\":1}}],[\"settracelog\",{\"1\":{\"766\":1}}],[\"settings\",{\"1\":{\"704\":2,\"705\":1,\"771\":1}}],[\"setter\",{\"1\":{\"170\":1}}],[\"setkeepalivetime\",{\"1\":{\"645\":1}}],[\"setnx\",{\"1\":{\"566\":1,\"588\":1,\"633\":1,\"638\":1,\"639\":1,\"653\":1,\"660\":1,\"970\":1}}],[\"seturl\",{\"1\":{\"744\":1,\"756\":1,\"771\":1}}],[\"setuptestclientandcreateindex\",{\"1\":{\"766\":1}}],[\"setup\",{\"1\":{\"473\":4}}],[\"setuid\",{\"1\":{\"400\":1}}],[\"setmaxretries\",{\"1\":{\"756\":1,\"771\":1}}],[\"setmapindex\",{\"1\":{\"376\":1}}],[\"setmode\",{\"1\":{\"453\":1}}],[\"set和len\",{\"1\":{\"285\":1}}],[\"set是一种无序的\",{\"1\":{\"265\":1}}],[\"set\",{\"0\":{\"265\":1},\"1\":{\"77\":1,\"127\":2,\"265\":3,\"285\":2,\"286\":4,\"287\":9,\"289\":4,\"302\":2,\"340\":2,\"361\":1,\"453\":1,\"469\":1,\"580\":1,\"638\":1,\"651\":1,\"652\":1,\"653\":1,\"794\":1,\"813\":2,\"820\":5,\"825\":1,\"892\":7,\"895\":1,\"910\":1,\"915\":1,\"916\":1,\"917\":1,\"923\":1,\"925\":1,\"939\":1,\"940\":4,\"941\":6,\"942\":2,\"943\":1,\"944\":1,\"945\":1,\"956\":1,\"961\":1,\"969\":1,\"970\":1,\"985\":3,\"993\":1,\"1092\":4,\"1151\":1,\"1222\":1}}],[\"suffix\",{\"1\":{\"1403\":1,\"1410\":2}}],[\"suffixarray\",{\"1\":{\"124\":1}}],[\"sugar\",{\"1\":{\"1301\":4}}],[\"suggestfield\",{\"1\":{\"746\":1}}],[\"suggest\",{\"1\":{\"745\":1,\"746\":2}}],[\"survey\",{\"1\":{\"1108\":1}}],[\"sure\",{\"1\":{\"303\":2}}],[\"sudo\",{\"1\":{\"774\":4,\"986\":1,\"1078\":3,\"1184\":5,\"1220\":2,\"1221\":9,\"1222\":9,\"1223\":1,\"1225\":2}}],[\"sunionstore\",{\"1\":{\"941\":1,\"973\":1}}],[\"sunion\",{\"1\":{\"941\":1,\"973\":1}}],[\"sun\",{\"1\":{\"742\":1}}],[\"sundheit\",{\"1\":{\"128\":1}}],[\"sushi\",{\"1\":{\"459\":1}}],[\"supports\",{\"1\":{\"1238\":1}}],[\"support\",{\"1\":{\"390\":1,\"1132\":1,\"1173\":1}}],[\"superset\",{\"1\":{\"289\":1}}],[\"succeeded\",{\"1\":{\"1303\":2}}],[\"successes\",{\"1\":{\"1035\":1,\"1047\":3}}],[\"successfully\",{\"1\":{\"1281\":1}}],[\"successful\",{\"1\":{\"709\":1,\"711\":1,\"712\":1,\"724\":1,\"741\":1}}],[\"success\",{\"1\":{\"84\":1,\"993\":1,\"1035\":1,\"1037\":1,\"1047\":2,\"1082\":1}}],[\"succ\",{\"1\":{\"893\":2,\"894\":1,\"895\":1,\"896\":1}}],[\"such\",{\"1\":{\"289\":2,\"300\":1,\"303\":2}}],[\"summary\",{\"1\":{\"718\":1}}],[\"summer\",{\"1\":{\"213\":3}}],[\"sumint\",{\"1\":{\"471\":5,\"472\":1,\"473\":1}}],[\"sum是经过gosumdb查询记录的\",{\"1\":{\"460\":1}}],[\"sum是c语言中的函数\",{\"1\":{\"299\":1}}],[\"sum中记录的哈希值进行比对\",{\"1\":{\"460\":1}}],[\"sumdb\",{\"1\":{\"460\":1}}],[\"sum文件\",{\"1\":{\"460\":1}}],[\"sum文件都有可能被修改过\",{\"1\":{\"460\":1}}],[\"sum文件中\",{\"1\":{\"460\":1}}],[\"sum文件插入两条记录\",{\"1\":{\"460\":1}}],[\"sum文件并不适合人类阅读\",{\"1\":{\"460\":1}}],[\"sum文件在创建项目之初并不会存在\",{\"1\":{\"460\":1}}],[\"sum的文件\",{\"1\":{\"453\":1}}],[\"sumpositive\",{\"1\":{\"390\":1}}],[\"sumany\",{\"1\":{\"337\":1}}],[\"sumandmul\",{\"1\":{\"280\":2}}],[\"sumfloat64\",{\"1\":{\"337\":1}}],[\"sum就是sum\",{\"1\":{\"312\":1}}],[\"sum函数早在延迟调用被执行以前就被调用了\",{\"1\":{\"285\":1}}],[\"sum函数返回一个int类型的值\",{\"1\":{\"280\":1}}],[\"sum\",{\"0\":{\"460\":1},\"1\":{\"208\":2,\"278\":3,\"280\":2,\"283\":2,\"285\":6,\"298\":4,\"299\":9,\"300\":16,\"312\":10,\"313\":5,\"314\":11,\"326\":1,\"337\":5,\"339\":4,\"341\":1,\"388\":5,\"453\":1,\"471\":14,\"472\":2,\"473\":17,\"474\":2,\"487\":8,\"489\":2,\"491\":13,\"492\":1,\"494\":5,\"498\":8,\"499\":2,\"500\":2,\"501\":4,\"502\":4,\"516\":2}}],[\"subcore\",{\"1\":{\"1306\":2}}],[\"sub2\",{\"1\":{\"1265\":1,\"1266\":1}}],[\"sub1\",{\"1\":{\"1265\":2,\"1266\":1}}],[\"subnet\",{\"1\":{\"1197\":4}}],[\"substr\",{\"1\":{\"1398\":1,\"1399\":1,\"1404\":2}}],[\"substring\",{\"1\":{\"820\":1}}],[\"subscription\",{\"1\":{\"1265\":4,\"1266\":4}}],[\"subscribe\",{\"1\":{\"953\":1,\"957\":1}}],[\"subset\",{\"1\":{\"653\":4}}],[\"subsets\",{\"1\":{\"653\":2}}],[\"subquery\",{\"1\":{\"814\":1}}],[\"sub\",{\"1\":{\"314\":1,\"339\":2,\"341\":1,\"417\":1,\"634\":1,\"1244\":5,\"1245\":4,\"1251\":1,\"1252\":2,\"1253\":2,\"1256\":6,\"1260\":4,\"1264\":4,\"1265\":9,\"1266\":8,\"1429\":1}}],[\"subtraction\",{\"1\":{\"182\":1}}],[\"subtle\",{\"1\":{\"124\":1}}],[\"subversion\",{\"0\":{\"11\":1}}],[\"syetemctl\",{\"1\":{\"1184\":1}}],[\"symbol\",{\"1\":{\"324\":2}}],[\"sysctl\",{\"1\":{\"1222\":2}}],[\"sysconfig\",{\"1\":{\"1219\":1}}],[\"syscall\",{\"1\":{\"124\":1,\"215\":3,\"298\":1,\"328\":1,\"400\":8,\"1308\":1}}],[\"sysoev\",{\"1\":{\"1164\":1}}],[\"sys\",{\"1\":{\"453\":2,\"459\":1}}],[\"systray\",{\"1\":{\"138\":1}}],[\"systemd\",{\"1\":{\"1032\":1,\"1223\":2}}],[\"systemctl\",{\"1\":{\"774\":2,\"1032\":1,\"1033\":1,\"1184\":1,\"1219\":1,\"1221\":4,\"1222\":4,\"1223\":3}}],[\"system\",{\"1\":{\"12\":1,\"400\":1,\"742\":1,\"814\":2,\"846\":1,\"1032\":1,\"1165\":2,\"1222\":1,\"1223\":2}}],[\"syslog\",{\"1\":{\"124\":1}}],[\"syntax\",{\"1\":{\"124\":1,\"1151\":3,\"1152\":4,\"1321\":1,\"1391\":1}}],[\"syncers\",{\"1\":{\"1304\":6}}],[\"syncs\",{\"1\":{\"1000\":1}}],[\"sync命令来完成\",{\"1\":{\"463\":1}}],[\"syncmap\",{\"1\":{\"436\":11}}],[\"sync包下还有一些其他的工具可以使用\",{\"1\":{\"433\":1}}],[\"sync这一个函数封装了底层的系统调用fsync\",{\"1\":{\"406\":1}}],[\"synchronization\",{\"1\":{\"328\":1}}],[\"sync\",{\"0\":{\"433\":1,\"558\":1},\"1\":{\"121\":1,\"124\":2,\"137\":1,\"396\":1,\"400\":2,\"406\":1,\"422\":6,\"426\":1,\"427\":2,\"428\":1,\"429\":1,\"430\":3,\"431\":2,\"432\":4,\"433\":1,\"434\":3,\"435\":6,\"436\":6,\"440\":1,\"441\":2,\"464\":1,\"545\":1,\"555\":1,\"556\":2,\"557\":1,\"558\":3,\"629\":1,\"635\":5,\"639\":3,\"649\":5,\"654\":5,\"993\":6,\"1035\":1,\"1047\":2,\"1301\":2,\"1303\":1,\"1307\":1,\"1308\":1,\"1374\":2}}],[\"syn+1\",{\"1\":{\"82\":1}}],[\"syn\",{\"1\":{\"82\":1,\"641\":2,\"651\":2}}],[\"shenzhen\",{\"1\":{\"1221\":1}}],[\"shell命令行\",{\"1\":{\"874\":1}}],[\"shell命令考察\",{\"1\":{\"621\":1,\"693\":1}}],[\"shell用普通账号登录也要先切换到对应数据库\",{\"1\":{\"873\":1}}],[\"shell连接mongodb\",{\"1\":{\"872\":1}}],[\"shellbatchsize=\",{\"1\":{\"861\":1}}],[\"shellbatchsize=50\",{\"1\":{\"855\":1}}],[\"shell这一块有了解吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"shell\",{\"1\":{\"454\":1,\"853\":1,\"875\":1}}],[\"shutdownnow\",{\"1\":{\"645\":3}}],[\"shutdown\",{\"1\":{\"645\":5,\"1010\":1}}],[\"shuffle\",{\"1\":{\"469\":1}}],[\"shuralyov\",{\"1\":{\"460\":1}}],[\"shield\",{\"1\":{\"142\":1}}],[\"shirou\",{\"1\":{\"122\":2}}],[\"shanghai\",{\"1\":{\"1432\":1}}],[\"shape\",{\"0\":{\"731\":1}}],[\"sha\",{\"1\":{\"634\":1,\"875\":1,\"952\":1}}],[\"sharding\",{\"1\":{\"904\":1,\"1006\":1}}],[\"shards\",{\"1\":{\"704\":3,\"705\":1,\"709\":1,\"711\":1,\"712\":1,\"717\":1,\"724\":1,\"741\":1,\"768\":7}}],[\"sharing\",{\"1\":{\"413\":1}}],[\"shared\",{\"1\":{\"312\":1}}],[\"share\",{\"0\":{\"1459\":1},\"1\":{\"413\":1,\"1078\":1,\"1193\":1},\"2\":{\"80\":1}}],[\"shamoji是用go编写的单词过滤程序包\",{\"1\":{\"144\":1}}],[\"shamoji\",{\"1\":{\"144\":1}}],[\"sha512\",{\"1\":{\"124\":1}}],[\"sha256\",{\"1\":{\"124\":1,\"388\":1,\"1194\":1,\"1225\":2,\"1226\":1,\"1227\":1}}],[\"sha1\",{\"1\":{\"124\":1}}],[\"shoufeng\",{\"1\":{\"726\":2}}],[\"shouldbindquery\",{\"1\":{\"1283\":1}}],[\"shouldbindxml\",{\"1\":{\"1283\":1}}],[\"shouldbind\",{\"1\":{\"1283\":4,\"1289\":1}}],[\"shouldbinduri\",{\"1\":{\"1283\":2}}],[\"shouldbindjson\",{\"1\":{\"1281\":1,\"1283\":1}}],[\"should条件\",{\"0\":{\"765\":1}}],[\"should\",{\"1\":{\"470\":1,\"765\":1,\"766\":1}}],[\"shortcallerencoder\",{\"1\":{\"1303\":1}}],[\"shortduration\",{\"1\":{\"470\":1}}],[\"shorthand\",{\"1\":{\"454\":1}}],[\"short\",{\"1\":{\"304\":6,\"468\":1,\"720\":1}}],[\"shop\",{\"1\":{\"720\":1}}],[\"shopspring\",{\"1\":{\"122\":1}}],[\"shopify\",{\"1\":{\"122\":1,\"1037\":1,\"1046\":1,\"1047\":2}}],[\"show和help命令\",{\"0\":{\"855\":1}}],[\"showing\",{\"1\":{\"326\":1}}],[\"show\",{\"1\":{\"56\":1,\"58\":1,\"810\":1,\"813\":4,\"820\":1,\"822\":2,\"825\":3,\"855\":5,\"857\":1,\"868\":1,\"1400\":5}}],[\"sh\",{\"1\":{\"84\":10,\"1031\":2,\"1032\":2,\"1033\":1,\"1034\":14,\"1174\":4,\"1175\":1,\"1231\":4}}],[\"sock表明使用docker作为容器运行时\",{\"1\":{\"1226\":1}}],[\"sock\",{\"1\":{\"1223\":1,\"1225\":2,\"1226\":1,\"1227\":1}}],[\"sockaddr\",{\"1\":{\"1164\":4}}],[\"socket文件等\",{\"1\":{\"1223\":1}}],[\"socketgroup=docker\",{\"1\":{\"1223\":1}}],[\"socketuser=root\",{\"1\":{\"1223\":1}}],[\"socketmode=0660\",{\"1\":{\"1223\":1}}],[\"socket写超时时间\",{\"1\":{\"911\":1}}],[\"socket读取超时时间\",{\"1\":{\"911\":1}}],[\"socket\",{\"1\":{\"586\":1,\"658\":1,\"1029\":3,\"1223\":4,\"1225\":2,\"1226\":2,\"1227\":1}}],[\"soft\",{\"1\":{\"813\":2,\"906\":1}}],[\"software\",{\"1\":{\"77\":1}}],[\"solr中默认使用的日期格式\",{\"1\":{\"721\":1}}],[\"so\",{\"1\":{\"470\":1}}],[\"soon\",{\"1\":{\"470\":1}}],[\"sonic\",{\"1\":{\"453\":2,\"459\":2,\"460\":4}}],[\"son\",{\"1\":{\"317\":6}}],[\"somestream\",{\"1\":{\"1165\":1}}],[\"some\",{\"1\":{\"393\":1,\"723\":1,\"741\":1,\"1244\":1,\"1254\":3,\"1256\":1,\"1260\":1,\"1264\":1}}],[\"something\",{\"1\":{\"294\":2,\"414\":1,\"514\":1,\"635\":1}}],[\"somthing\",{\"1\":{\"293\":1}}],[\"sox\",{\"1\":{\"126\":1}}],[\"sortedmap<integer\",{\"1\":{\"1165\":2}}],[\"sortedmap\",{\"1\":{\"1165\":4}}],[\"sortedset\",{\"1\":{\"961\":1}}],[\"sortslice\",{\"1\":{\"322\":2,\"326\":1,\"327\":3}}],[\"sortfunc接受两个参数\",{\"1\":{\"281\":1}}],[\"sortfunc\",{\"1\":{\"281\":1}}],[\"sort\",{\"0\":{\"1375\":1},\"1\":{\"124\":1,\"322\":1,\"327\":1,\"649\":5,\"756\":1,\"757\":1,\"758\":1,\"763\":1,\"834\":1,\"861\":2,\"1308\":1,\"1376\":1,\"1377\":1,\"1378\":1,\"1379\":4,\"1380\":2,\"1381\":3}}],[\"source\",{\"1\":{\"77\":1,\"327\":1,\"710\":1,\"724\":1,\"741\":2,\"749\":1,\"754\":1,\"766\":1,\"971\":2,\"973\":2,\"1010\":8,\"1030\":1,\"1122\":1}}],[\"s\",{\"1\":{\"55\":1,\"84\":1,\"124\":1,\"213\":2,\"221\":9,\"224\":3,\"229\":2,\"251\":7,\"258\":3,\"283\":3,\"287\":23,\"293\":2,\"302\":1,\"303\":14,\"306\":8,\"309\":2,\"310\":4,\"322\":6,\"327\":6,\"338\":9,\"339\":3,\"344\":26,\"391\":2,\"393\":1,\"400\":1,\"402\":2,\"434\":8,\"446\":4,\"448\":1,\"449\":1,\"477\":8,\"516\":3,\"537\":2,\"548\":4,\"635\":2,\"649\":10,\"713\":1,\"746\":2,\"748\":2,\"749\":2,\"751\":2,\"754\":2,\"766\":2,\"813\":5,\"957\":2,\"1047\":6,\"1078\":1,\"1119\":2,\"1123\":1,\"1126\":1,\"1127\":3,\"1130\":1,\"1131\":1,\"1137\":1,\"1151\":3,\"1154\":8,\"1155\":1,\"1156\":2,\"1157\":1,\"1158\":3,\"1164\":1,\"1171\":2,\"1172\":2,\"1222\":2,\"1223\":1,\"1228\":1,\"1235\":1,\"1245\":6,\"1280\":4,\"1286\":1,\"1301\":1,\"1367\":1,\"1368\":1,\"1384\":2,\"1386\":1,\"1389\":2,\"1391\":2,\"1396\":1,\"1398\":3,\"1399\":1,\"1400\":4,\"1401\":1,\"1402\":2,\"1403\":2,\"1404\":5,\"1405\":3,\"1406\":1,\"1407\":3,\"1408\":4,\"1409\":4,\"1410\":5,\"1413\":1,\"1417\":1,\"1420\":2,\"1443\":2,\"1444\":2}}],[\"可提供的配置项总共有四个\",{\"1\":{\"1332\":1}}],[\"可提升效率\",{\"1\":{\"513\":1}}],[\"可设置默认值\",{\"1\":{\"1280\":1}}],[\"可高效处理大规模访问请求\",{\"1\":{\"1239\":1}}],[\"可将脚本本地下载下来\",{\"1\":{\"1231\":1}}],[\"可指定版本镜像名\",{\"1\":{\"1187\":1}}],[\"可指定缓冲大小\",{\"1\":{\"535\":1}}],[\"可加参数\",{\"1\":{\"1187\":1}}],[\"可加载\",{\"1\":{\"127\":1}}],[\"可执行的独立软件包\",{\"1\":{\"1183\":1,\"1191\":1}}],[\"可发布到应用市场\",{\"1\":{\"1181\":1}}],[\"可移植性\",{\"1\":{\"1181\":1}}],[\"可移植性更好\",{\"1\":{\"540\":1}}],[\"可否自己写插件扩展网关功能\",{\"1\":{\"1072\":1}}],[\"可视化界面\",{\"1\":{\"1057\":1}}],[\"可视化工具除了方便\",{\"1\":{\"794\":1}}],[\"可无缝扩展到超过一百万个\",{\"1\":{\"1056\":1}}],[\"可跨机房在集群间无缝地完成消息复制\",{\"1\":{\"1056\":2}}],[\"可用性\",{\"1\":{\"1054\":1,\"1055\":1}}],[\"可用于网络传输\",{\"1\":{\"1310\":1}}],[\"可用于分页\",{\"1\":{\"861\":1}}],[\"可用于\",{\"1\":{\"730\":1}}],[\"可复用的企业消息系统\",{\"1\":{\"1053\":1}}],[\"可复用则是通过主键\",{\"1\":{\"793\":1}}],[\"可配置将持久化操作在slave执行\",{\"1\":{\"990\":1}}],[\"可配置的html标签过滤\",{\"1\":{\"122\":1}}],[\"可正常在命令行操作redis了\",{\"1\":{\"963\":1}}],[\"可持久化\",{\"1\":{\"961\":1}}],[\"可基于内存\",{\"1\":{\"908\":1}}],[\"可选参数\",{\"1\":{\"1187\":1}}],[\"可选持久性的键值对\",{\"1\":{\"908\":1}}],[\"可选\",{\"1\":{\"859\":1,\"860\":2,\"1274\":1}}],[\"可选方式2\",{\"1\":{\"740\":1}}],[\"可选方式1\",{\"1\":{\"740\":1}}],[\"可通过此文件查看kafka的启动和运行状态\",{\"1\":{\"1033\":1}}],[\"可通过以下命令查看所有用户\",{\"1\":{\"873\":1}}],[\"可通过命令行net\",{\"1\":{\"852\":1}}],[\"可通过该列计算查询中使用的索引长度\",{\"1\":{\"814\":1}}],[\"可见模板引擎的使用其实相当简单\",{\"1\":{\"1415\":1}}],[\"可见\",{\"1\":{\"792\":1}}],[\"可见性\",{\"0\":{\"174\":1}}],[\"可知string类型的field已经被移除了\",{\"1\":{\"717\":1}}],[\"可维护\",{\"1\":{\"654\":1}}],[\"可靠性保证等\",{\"1\":{\"1018\":1}}],[\"可靠性通过以下几种机制实现\",{\"1\":{\"636\":1}}],[\"可靠的\",{\"1\":{\"651\":1}}],[\"可靠的面向对象的全双工通讯\",{\"1\":{\"82\":1}}],[\"可达性分析\",{\"1\":{\"645\":1}}],[\"可达性分析是如何对对象进行标记的\",{\"1\":{\"588\":1,\"660\":1}}],[\"可达对象的数量\",{\"1\":{\"633\":1}}],[\"可跳过单元测试\",{\"1\":{\"630\":1}}],[\"可获取内存使用和gc相关信息\",{\"1\":{\"553\":1}}],[\"可代码上手动触发runtime\",{\"1\":{\"553\":1}}],[\"可减少值拷贝\",{\"1\":{\"549\":1}}],[\"可解决控制一组协程同时完成任务\",{\"1\":{\"545\":1}}],[\"可解决两个协程执行先后顺序\",{\"1\":{\"544\":1}}],[\"可解析x\",{\"1\":{\"124\":1}}],[\"可轻松处理上千个协程\",{\"1\":{\"540\":1}}],[\"可省让编译器判断\",{\"1\":{\"516\":1}}],[\"可省略字段名\",{\"1\":{\"513\":1}}],[\"可直接手动启动关闭\",{\"1\":{\"852\":1}}],[\"可直接用指针来调用值的方法\",{\"1\":{\"515\":1}}],[\"可直接使用\",{\"1\":{\"511\":1}}],[\"可在系统下用uuidgen命令随机生成\",{\"1\":{\"1219\":1}}],[\"可在多次调用都可保持其状态\",{\"1\":{\"514\":1}}],[\"可在opengl上使用\",{\"1\":{\"134\":1}}],[\"可做参数\",{\"1\":{\"514\":1}}],[\"可做到任意切换想要的版本\",{\"1\":{\"76\":1}}],[\"可不写参数名或返回值类型\",{\"1\":{\"514\":1}}],[\"可使用一个函数来实例化一个对象\",{\"1\":{\"513\":1}}],[\"可按索引访问\",{\"1\":{\"510\":1}}],[\"可看go官方对于上面四种测试类型的解释\",{\"1\":{\"466\":1}}],[\"可读写\",{\"1\":{\"993\":1}}],[\"可读性代码维护性强\",{\"1\":{\"513\":1}}],[\"可读性\",{\"1\":{\"388\":1}}],[\"可读和写由逗号分割的数值\",{\"1\":{\"124\":1}}],[\"可接收的底层参数类型必须是指针\",{\"1\":{\"352\":1}}],[\"可比较\",{\"1\":{\"294\":1}}],[\"可能仍会导致它们被删除\",{\"1\":{\"1307\":1}}],[\"可能与日历日不完全对应\",{\"1\":{\"1307\":1}}],[\"可能与上次写入该文件的时间不同\",{\"1\":{\"1307\":1}}],[\"可能就是你的一个选择了\",{\"1\":{\"1057\":1}}],[\"可能有多个\",{\"1\":{\"1052\":1}}],[\"可能有一些老的项目\",{\"1\":{\"9\":1}}],[\"可能不会用到索引\",{\"1\":{\"814\":1}}],[\"可能根据内部的自动判断\",{\"1\":{\"814\":1}}],[\"可能自己创建了4个索引\",{\"1\":{\"814\":1}}],[\"可能出现john\",{\"1\":{\"728\":1}}],[\"可能的键\",{\"1\":{\"645\":1}}],[\"可能的目录结构如下\",{\"1\":{\"460\":1}}],[\"可能原因包括\",{\"1\":{\"644\":1}}],[\"可能由于查询\",{\"1\":{\"639\":1}}],[\"可能瓶颈在\",{\"1\":{\"639\":1}}],[\"可能导致订单未被正确处理\",{\"1\":{\"638\":1}}],[\"可能导致数据库崩溃\",{\"1\":{\"636\":1}}],[\"可能发生在\",{\"1\":{\"634\":1}}],[\"可能命中索引\",{\"1\":{\"595\":1,\"667\":1}}],[\"可能是先从rss数据源中抓取文章的内\",{\"1\":{\"1019\":1}}],[\"可能是为了研究特定技术\",{\"1\":{\"644\":1}}],[\"可能是垃圾\",{\"1\":{\"551\":1}}],[\"可能是一个结构体\",{\"1\":{\"471\":1}}],[\"可能是项目直接引用的依赖引用了该依赖\",{\"1\":{\"459\":1}}],[\"可能会删除旧的日志文件\",{\"1\":{\"1307\":1}}],[\"可能会到达不同的服务器上\",{\"1\":{\"1166\":1}}],[\"可能会造成大量的请求在某一个时刻失败\",{\"1\":{\"1165\":1}}],[\"可能会造成比较长时间的延迟\",{\"1\":{\"965\":1}}],[\"可能会把网站关停\",{\"1\":{\"1163\":1}}],[\"可能会在断电时导致一段时间内的数据丢失\",{\"1\":{\"965\":1}}],[\"可能会出现\",{\"1\":{\"819\":1}}],[\"可能会使用索引\",{\"1\":{\"814\":1}}],[\"可能会被系统强行杀掉\",{\"1\":{\"776\":1}}],[\"可能会导致应用的崩溃\",{\"1\":{\"1165\":1}}],[\"可能会导致死锁\",{\"1\":{\"654\":1}}],[\"可能会导致\",{\"1\":{\"653\":1}}],[\"可能会导致数据竞争\",{\"1\":{\"649\":1}}],[\"可能会导致订单状态不一致\",{\"1\":{\"638\":1}}],[\"可能会触发\",{\"1\":{\"641\":1}}],[\"可能会引入额外的填充字节\",{\"1\":{\"513\":1}}],[\"可能会返回nil\",{\"1\":{\"424\":1}}],[\"可能会发生关闭一个已经关闭了的管道\",{\"1\":{\"418\":1}}],[\"可能会无法判别错误的类别或者误判\",{\"1\":{\"392\":1}}],[\"可能子协程还没开始运行\",{\"1\":{\"412\":1}}],[\"可能很多人认为是下面这种输出\",{\"1\":{\"285\":1}}],[\"可能还不被所有开发者广泛接受和使用\",{\"1\":{\"165\":1}}],[\"可更轻松地构建im服务器\",{\"1\":{\"145\":1}}],[\"可扩展性\",{\"1\":{\"1018\":1}}],[\"可扩展的结构化数据序列化机制\",{\"1\":{\"1321\":1}}],[\"可扩展的策略存储\",{\"1\":{\"1239\":1}}],[\"可扩展的代码\",{\"1\":{\"654\":1}}],[\"可扩展的游戏服务器框架\",{\"1\":{\"134\":1}}],[\"可扩展的游戏服务器引擎\",{\"1\":{\"134\":1}}],[\"可扩展且自以为是的文件系统功能\",{\"1\":{\"132\":1}}],[\"可插入\",{\"1\":{\"138\":1}}],[\"可插入任何现成的记录器\",{\"1\":{\"131\":1}}],[\"可插拔的microservice工具箱和分布式系统平台\",{\"1\":{\"128\":1}}],[\"可插拔传输\",{\"1\":{\"128\":1}}],[\"可破解的软件包\",{\"1\":{\"131\":1}}],[\"可嵌入的ngaro\",{\"1\":{\"130\":1}}],[\"可嵌入的脚本编程语言\",{\"1\":{\"130\":1}}],[\"可生成干净的响应式html电子邮件\",{\"1\":{\"129\":1}}],[\"可实现延迟函数在当前函数返回之前执行\",{\"1\":{\"514\":1}}],[\"可实现高负载\",{\"1\":{\"128\":1}}],[\"可实现绝大多数业务\",{\"1\":{\"119\":1}}],[\"可空转到类型\",{\"1\":{\"127\":1}}],[\"可对数据结构的内容进行有效且安全的验证\",{\"1\":{\"127\":1}}],[\"可链接\",{\"1\":{\"127\":1}}],[\"可运行外部命令\",{\"1\":{\"124\":1}}],[\"可取消的goroutine\",{\"1\":{\"122\":1}}],[\"可观测性好\",{\"1\":{\"115\":1}}],[\"可自己设置路径\",{\"1\":{\"84\":2}}],[\"可借助ai助手豆包\",{\"1\":{\"79\":1}}],[\"可画思维导图\",{\"1\":{\"74\":1}}],[\"可以仅通过一个指针\",{\"1\":{\"1443\":1}}],[\"可以进行数学运算\",{\"1\":{\"1443\":1}}],[\"可以创建一个新的定时器\",{\"1\":{\"1434\":1}}],[\"可以创建一个新的计时器\",{\"1\":{\"1433\":1}}],[\"可以创建一个后台服务\",{\"1\":{\"653\":1}}],[\"可以实现类似vue插槽的效果\",{\"1\":{\"1427\":1}}],[\"可以匹配多个路径段\",{\"1\":{\"1280\":1}}],[\"可以选择使用命令行\",{\"1\":{\"1229\":1}}],[\"可以选择安装compass\",{\"1\":{\"877\":1}}],[\"可以kubeadm重置\",{\"1\":{\"1225\":1}}],[\"可以连通容器内外\",{\"1\":{\"1195\":1}}],[\"可以制作各种具体的应用镜像\",{\"1\":{\"1192\":1}}],[\"可以到nginx的src\",{\"1\":{\"1165\":1}}],[\"可以到这里找下载链接\",{\"1\":{\"1078\":2}}],[\"可以解决session不能跨服务器的问题\",{\"1\":{\"1164\":1}}],[\"可以尝试吧8081和8082服务挂掉\",{\"1\":{\"1163\":1}}],[\"可以把一个不健康的服务器编程健康的服务器\",{\"1\":{\"1163\":1}}],[\"可以把主键改为改为无符号int\",{\"1\":{\"791\":1}}],[\"可以限制一台服务器的最大访问连接数\",{\"1\":{\"1163\":1}}],[\"可以配置多个limit\",{\"1\":{\"1152\":1}}],[\"可以配合for循环使用\",{\"1\":{\"421\":1}}],[\"可以考虑续期或者刷新token\",{\"1\":{\"1092\":1}}],[\"可以考虑采用懒加载的方式\",{\"1\":{\"434\":1}}],[\"可以约定刷新令牌或者重新登录\",{\"1\":{\"1092\":1}}],[\"可以⾃\",{\"1\":{\"1078\":1}}],[\"可以掌控\",{\"1\":{\"1054\":1}}],[\"可以根据客户端ip映射\",{\"1\":{\"1165\":1}}],[\"可以根据消费者实际情况配置\",{\"1\":{\"1029\":1}}],[\"可以根据系统负载调整消费速率\",{\"1\":{\"634\":1}}],[\"可以动态增加分区数\",{\"1\":{\"1018\":1}}],[\"可以动态增长\",{\"1\":{\"635\":1}}],[\"可以取代上面的步骤\",{\"1\":{\"1010\":1}}],[\"可以得到现在8008和8007还没关系\",{\"1\":{\"1010\":1}}],[\"可以得到一个格式化参数的error\",{\"1\":{\"390\":1}}],[\"可以独立处理请求\",{\"1\":{\"1006\":1}}],[\"可以水平扩展\",{\"1\":{\"1006\":1}}],[\"可以关闭该选项\",{\"1\":{\"965\":1,\"983\":1}}],[\"可以多个条件配合\",{\"1\":{\"965\":1}}],[\"可以去了解gorm\",{\"1\":{\"889\":1}}],[\"可以手动下载在离线安装\",{\"1\":{\"877\":1}}],[\"可以编写查询命令\",{\"1\":{\"877\":1}}],[\"可以不同于浏览器传递的$request\",{\"1\":{\"1133\":1}}],[\"可以不用设置\",{\"1\":{\"911\":1}}],[\"可以不操作\",{\"0\":{\"871\":1}}],[\"可以不需要重复声明类型\",{\"1\":{\"267\":1}}],[\"可以指定想安装在d盘或其他盘中\",{\"1\":{\"849\":1}}],[\"可以应对各种复杂的数据存储需求\",{\"1\":{\"843\":1}}],[\"可以满足高并发\",{\"1\":{\"843\":1}}],[\"可以轻松地将数据分布到多个节点上\",{\"1\":{\"842\":1}}],[\"可以轻松实现跨语言通信\",{\"1\":{\"637\":1}}],[\"可以随便取\",{\"1\":{\"822\":1}}],[\"可以随意替换\",{\"1\":{\"293\":1}}],[\"可以是本地仓库或远程仓库\",{\"1\":{\"1183\":1}}],[\"可以是select\",{\"1\":{\"821\":1}}],[\"可以是goto\",{\"1\":{\"231\":1}}],[\"可以是github\",{\"1\":{\"17\":1}}],[\"可以和方案一组合使用\",{\"1\":{\"820\":1}}],[\"可以优化缓存\",{\"1\":{\"817\":1}}],[\"可以节省索引空间\",{\"1\":{\"815\":1}}],[\"可以认为是一组\",{\"1\":{\"814\":1}}],[\"可以认为系统出现故障\",{\"1\":{\"655\":1}}],[\"可以模拟优化器执行的sql语句\",{\"1\":{\"814\":1}}],[\"可以跟上正则匹配模式\",{\"1\":{\"813\":1}}],[\"可以为每台服务器计算三个虚拟节点\",{\"1\":{\"1165\":1}}],[\"可以为null\",{\"1\":{\"810\":1}}],[\"可以为日后的维护省去不少的麻烦\",{\"1\":{\"467\":1}}],[\"可以提高性能\",{\"1\":{\"809\":1}}],[\"可以提问下面一些问题\",{\"1\":{\"520\":1}}],[\"可以减少查询时间中\",{\"1\":{\"809\":1}}],[\"可以减少其内存占用\",{\"1\":{\"273\":1}}],[\"可以增大度\",{\"1\":{\"805\":1}}],[\"可以维护二叉查找树\",{\"1\":{\"802\":1}}],[\"可以执行select命令\",{\"1\":{\"777\":1}}],[\"可以执行提交等操作\",{\"1\":{\"49\":1}}],[\"可以对mysql有更深入的了解\",{\"1\":{\"775\":1}}],[\"可以查看\",{\"1\":{\"1235\":1}}],[\"可以查看效果\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"可以查看集群的状态http\",{\"1\":{\"768\":1}}],[\"可以查看其它命令\",{\"1\":{\"326\":1}}],[\"可以另外做一个工具来从业务系统提取相关词汇\",{\"1\":{\"743\":1}}],[\"可以确保数据的安全和一致性\",{\"1\":{\"735\":1}}],[\"可以确保数据的一致性\",{\"1\":{\"638\":1}}],[\"可以立即从任何节点访问\",{\"1\":{\"734\":1}}],[\"可以参考这篇文章\",{\"1\":{\"731\":1}}],[\"可以接受表示真\",{\"1\":{\"722\":1}}],[\"可以接受如下类型的格式\",{\"1\":{\"721\":1}}],[\"可以接受可选参数\",{\"1\":{\"651\":1}}],[\"可以防止脏读\",{\"1\":{\"656\":1}}],[\"可以防止订单数量超过实际可处理数量\",{\"1\":{\"638\":1}}],[\"可以用dockerhub账户\",{\"1\":{\"1193\":1}}],[\"可以用it查看下一页的信息\",{\"1\":{\"863\":1}}],[\"可以用it迭代命令查询下一页数据\",{\"1\":{\"861\":1}}],[\"可以用于灰度部署时候的一种更替效果\",{\"1\":{\"1163\":1}}],[\"可以用于存储和管理大量的数据\",{\"1\":{\"797\":1}}],[\"可以用于接口中作为类型约束\",{\"1\":{\"635\":1}}],[\"可以用回溯算法或位运算来求解\",{\"1\":{\"653\":1}}],[\"可以保证内存与磁盘都有一份数据\",{\"1\":{\"1054\":1}}],[\"可以保证每个商品的库存数据唯一且易于管理\",{\"1\":{\"644\":1}}],[\"可以保存所有实现了crane接口的值\",{\"1\":{\"293\":1}}],[\"可以采取以下措施\",{\"1\":{\"644\":1}}],[\"可以采用如下措施\",{\"1\":{\"644\":1}}],[\"可以部署在\",{\"1\":{\"641\":1}}],[\"可以在参数前后加上\",{\"1\":{\"1417\":1}}],[\"可以在集群的所有节点上暴露该服务\",{\"1\":{\"1234\":1}}],[\"可以在任何平台上运行\",{\"1\":{\"1181\":1}}],[\"可以在同一主机上多个redis实例之间使用同一份配置文件\",{\"1\":{\"965\":1}}],[\"可以在extra中看到using\",{\"1\":{\"817\":1}}],[\"可以在每次执行一个比较大的操作后\",{\"1\":{\"776\":1}}],[\"可以在读写操作时进行互斥锁定\",{\"1\":{\"649\":1}}],[\"可以在\",{\"1\":{\"641\":1}}],[\"可以在标准库cmd\",{\"1\":{\"296\":1,\"317\":1}}],[\"可以支持上千并发连接\",{\"1\":{\"639\":1}}],[\"可以访问该资源\",{\"1\":{\"639\":1}}],[\"可以利用从右上角开始的查找方式\",{\"1\":{\"638\":1}}],[\"可以吗\",{\"1\":{\"637\":1}}],[\"可以加速表与表直接的相连\",{\"1\":{\"809\":1}}],[\"可以加速数据的检索操作\",{\"1\":{\"635\":1}}],[\"可以加上参数\",{\"1\":{\"468\":1}}],[\"可以加上\",{\"1\":{\"453\":1}}],[\"可以处理多个\",{\"1\":{\"635\":1}}],[\"可以帮助定位死锁\",{\"1\":{\"634\":1}}],[\"可以安排别人的工作\",{\"1\":{\"606\":1,\"678\":1}}],[\"可以收到设置runtime\",{\"1\":{\"542\":1}}],[\"可以直接修改接收者的字段值\",{\"1\":{\"515\":1}}],[\"可以直接使用for\",{\"1\":{\"511\":1}}],[\"可以巧妙完成很多东西比如求斐波那契数列等等\",{\"1\":{\"514\":1}}],[\"可以给\",{\"1\":{\"501\":1}}],[\"可以调用\",{\"1\":{\"499\":1}}],[\"可以从基础镜像构建自定义镜像\",{\"1\":{\"1183\":1}}],[\"可以从第n\",{\"1\":{\"654\":1}}],[\"可以从输出结果中清晰地看到每个测试用例的运行情况\",{\"1\":{\"487\":1}}],[\"可以从结果中看到测试全部通过了\",{\"1\":{\"477\":1}}],[\"可以达到\",{\"1\":{\"486\":1}}],[\"可以达到同样的效果\",{\"1\":{\"353\":1}}],[\"可以让一个服务器慢慢的加入到集群中\",{\"1\":{\"1163\":1}}],[\"可以让array类型的对象被独立索引和搜索\",{\"1\":{\"727\":1}}],[\"可以让每个线程独立存储数据\",{\"1\":{\"641\":1}}],[\"可以让你马上使用user模块的新修改而无需进行等待\",{\"1\":{\"463\":1}}],[\"可以让编译器自动推断长度\",{\"1\":{\"239\":1}}],[\"可以发现又出错了\",{\"1\":{\"477\":1}}],[\"可以发现有一些依赖包的版本并不是语义化的版本号\",{\"1\":{\"459\":1}}],[\"可以发现相较于之前多了很多东西\",{\"1\":{\"453\":1}}],[\"可以存储唯一标识\",{\"1\":{\"653\":1}}],[\"可以存储任意类型的值\",{\"1\":{\"441\":1}}],[\"可以存在多个\",{\"1\":{\"205\":1,\"211\":1}}],[\"可以复用对象减少实例化的频率\",{\"1\":{\"435\":1}}],[\"可以做出如下修改\",{\"1\":{\"422\":1}}],[\"可以遍历读取缓冲管道中的数据\",{\"1\":{\"420\":1}}],[\"可以使得同一个url\",{\"1\":{\"1166\":1}}],[\"可以使redis高效的进行网络通信\",{\"1\":{\"959\":1}}],[\"可以使当前协程暂停一段时间\",{\"1\":{\"412\":1}}],[\"可以使用当前goroutine处于挂起状态一定的时间\",{\"1\":{\"1435\":1}}],[\"可以使用with\",{\"1\":{\"1422\":1}}],[\"可以使用域名访问\",{\"1\":{\"1235\":1}}],[\"可以使用域名ping通了\",{\"1\":{\"1197\":1}}],[\"可以使用select\",{\"1\":{\"965\":1}}],[\"可以使用strings\",{\"1\":{\"257\":1}}],[\"可以使用一些可视化工具来创建和操作数据库和数据表\",{\"1\":{\"794\":1}}],[\"可以使用可视化工具\",{\"1\":{\"794\":1}}],[\"可以使用数据库的唯一约束\",{\"1\":{\"653\":1}}],[\"可以使用框架\",{\"1\":{\"653\":1}}],[\"可以使用事务机制或消息队列的\",{\"1\":{\"644\":1}}],[\"可以使用以下方式加锁\",{\"1\":{\"639\":1}}],[\"可以使用消息队列的重试机制\",{\"1\":{\"638\":1}}],[\"可以使用t\",{\"1\":{\"473\":1}}],[\"可以使用模块路径和版本替换又或者是其他平台指定的文件路径\",{\"1\":{\"459\":1}}],[\"可以使用os\",{\"1\":{\"400\":1}}],[\"可以使用any来替代interace\",{\"1\":{\"294\":1}}],[\"可以使用赋值运算符直接进行交换\",{\"1\":{\"208\":1}}],[\"可以使用官方提供的语法糖\",{\"1\":{\"206\":1}}],[\"可以使用\",{\"1\":{\"205\":1,\"633\":1,\"637\":1,\"638\":2,\"639\":1,\"641\":1,\"1417\":1}}],[\"可以及时的处理并且保证程序继续运行\",{\"1\":{\"397\":1}}],[\"可以递归进行查找匹配\",{\"1\":{\"393\":1}}],[\"可以很小\",{\"1\":{\"1192\":1}}],[\"可以很轻易的写出一个主协程等待子协程执行完毕的例子\",{\"1\":{\"417\":1}}],[\"可以很轻易的自定义error\",{\"1\":{\"391\":1}}],[\"可以很快的理解它的内存占用也是24个字节\",{\"1\":{\"273\":1}}],[\"可以一层一层往回找到\",{\"1\":{\"388\":1}}],[\"可以绕过go的类型系统\",{\"1\":{\"387\":1}}],[\"可以声明一个自定义名称的新类型\",{\"1\":{\"383\":1}}],[\"可以判断类型为any的数据结构所存储的元素类型\",{\"1\":{\"352\":1}}],[\"可以知晓空接口存储的值究竟是什么基础类型\",{\"1\":{\"351\":1}}],[\"可以前往\",{\"1\":{\"1442\":1}}],[\"可以前往type\",{\"1\":{\"345\":1}}],[\"可以前往strings\",{\"1\":{\"258\":1}}],[\"可以设置任意http响应头字段\",{\"1\":{\"1133\":1}}],[\"可以设置参数来确定是否确认kafka接收到数据\",{\"1\":{\"1024\":1}}],[\"可以设置是否需要存储\",{\"1\":{\"718\":1,\"719\":1}}],[\"可以设置生产者的acks参数\",{\"1\":{\"653\":1}}],[\"可以设置锁的过期时间\",{\"1\":{\"653\":1}}],[\"可以设置定时任务或后台进程\",{\"1\":{\"644\":1}}],[\"可以设置获取到团队整体的改进进度\",{\"1\":{\"43\":1}}],[\"可以设为1\",{\"1\":{\"300\":1}}],[\"可以如下设置\",{\"1\":{\"300\":1}}],[\"可以观察到接口的实现是隐式的\",{\"1\":{\"293\":1}}],[\"可以与绝世起重机无缝衔接\",{\"1\":{\"293\":1}}],[\"可以称类型t实现了接口i\",{\"1\":{\"289\":1}}],[\"可以正常运行\",{\"1\":{\"287\":1}}],[\"可以简单理解为是上面两个的具体实现\",{\"1\":{\"1308\":1}}],[\"可以简单理解为是指向底层数组的指针\",{\"1\":{\"243\":1}}],[\"可以简单的看成一个形参\",{\"1\":{\"286\":1}}],[\"可以猜猜输出是什么\",{\"1\":{\"285\":1}}],[\"可以非常简单的实现一个求费波那契数列的函数\",{\"1\":{\"282\":1}}],[\"可以省略掉重复的类型声明\",{\"1\":{\"280\":1}}],[\"可以省略掉var关键字和后置类型\",{\"1\":{\"206\":1}}],[\"可以只需要声明一次类型\",{\"1\":{\"279\":1}}],[\"可以只写一次类型\",{\"1\":{\"205\":1}}],[\"可以将基础环境\",{\"1\":{\"1180\":1}}],[\"可以将监听地址设置为主机名或ip地址\",{\"1\":{\"1029\":1}}],[\"可以将内存中的数据保持在磁盘中\",{\"1\":{\"956\":1}}],[\"可以将需自动更新的热词放在一个\",{\"1\":{\"743\":1}}],[\"可以将索引看作是文档的优化集合\",{\"1\":{\"734\":1}}],[\"可以将\",{\"1\":{\"495\":1,\"655\":1}}],[\"可以将当前函数标记为帮助函数\",{\"1\":{\"472\":1}}],[\"可以将文件名作为参数\",{\"1\":{\"328\":1}}],[\"可以将query参数debug=1去掉\",{\"1\":{\"324\":1}}],[\"可以将map作为set来进行使用\",{\"1\":{\"274\":1}}],[\"可以将类似于related\",{\"1\":{\"143\":1}}],[\"可以看出漏桶算法能强行限制数据的传输速率\",{\"1\":{\"1146\":1}}],[\"可以看出\",{\"1\":{\"728\":1,\"1307\":1}}],[\"可以看出这是该依赖的一个文档页面\",{\"1\":{\"453\":1}}],[\"可以看出数组的地址与数字第一个元素的地址一致\",{\"1\":{\"276\":1}}],[\"可以看看这个泛型数据结构库246859\",{\"1\":{\"345\":1}}],[\"可以看看这两个库\",{\"1\":{\"273\":1}}],[\"可以看到在with语句内部\",{\"1\":{\"1422\":1}}],[\"可以看到在第六次遍历的时候读取的是零值\",{\"1\":{\"420\":1}}],[\"可以看到其输出形式跟直接使用fmt\",{\"1\":{\"1417\":1}}],[\"可以看到有个kafka标识\",{\"1\":{\"1033\":1}}],[\"可以看到有两个节点了\",{\"1\":{\"769\":1}}],[\"可以看到节点数为三个了\",{\"1\":{\"770\":1}}],[\"可以看到集群的名称\",{\"1\":{\"768\":1}}],[\"可以看到请求体是需要自己手动序列化的\",{\"1\":{\"707\":1}}],[\"可以看到输出的结果中有了一个\",{\"1\":{\"486\":1}}],[\"可以看到这一次通过了测试\",{\"1\":{\"477\":1}}],[\"可以看到这一次并没有通过\",{\"1\":{\"477\":1}}],[\"可以看到old执行耗时为894\",{\"1\":{\"476\":1}}],[\"可以看到仓库的url是https\",{\"1\":{\"445\":1}}],[\"可以看到rlocker也只是把读写互斥锁的读锁操作封装了一下\",{\"1\":{\"432\":1}}],[\"可以看到创建一个条件变量前提就是需要创建一个锁\",{\"1\":{\"432\":1}}],[\"可以看到最终结果为4\",{\"1\":{\"429\":1}}],[\"可以看到仅仅只是返回了emptyctx指针\",{\"1\":{\"425\":1}}],[\"可以看到上面的代码发生了死锁\",{\"1\":{\"420\":1}}],[\"可以看到负责写的协程刚开始就一口气发送了5个数据\",{\"1\":{\"417\":1}}],[\"可以看到所有的数字都完整输出了\",{\"1\":{\"412\":1}}],[\"可以看到demo\",{\"1\":{\"396\":1}}],[\"可以看到它们都是被var定义的变量\",{\"1\":{\"390\":1}}],[\"可以看到它的错误类型是syscall\",{\"1\":{\"298\":1}}],[\"可以看到第一个参数是main\",{\"1\":{\"370\":1}}],[\"可以看到两个函数的参数类型都是any\",{\"1\":{\"348\":1}}],[\"可以看到返回值是\",{\"1\":{\"343\":1}}],[\"可以看到结果并不是有序的\",{\"1\":{\"263\":1}}],[\"可以看到明明是向s2添加元素\",{\"1\":{\"250\":1}}],[\"可以看到\",{\"1\":{\"249\":1,\"825\":1,\"1307\":1}}],[\"可以看到长度与容量并不一致\",{\"1\":{\"244\":1}}],[\"可以看到切片与数组在外貌上的区别\",{\"1\":{\"243\":1}}],[\"可以看到iota的值本质上就是iota所在行相对于当前const分组的第一行的差值\",{\"1\":{\"212\":1}}],[\"可以看到多个分支的图形\",{\"1\":{\"33\":1}}],[\"可以显式组合\",{\"1\":{\"270\":1}}],[\"可以更快速地处理大量数据\",{\"1\":{\"842\":1}}],[\"可以更快速的定位问题所在\",{\"1\":{\"775\":1}}],[\"可以更为灵活的实例化结构体\",{\"1\":{\"269\":1}}],[\"可以更轻松地创建json对象\",{\"1\":{\"141\":1}}],[\"可以\",{\"1\":{\"251\":1,\"300\":1,\"635\":3,\"641\":1}}],[\"可以有效减少后续扩容的内存消耗\",{\"1\":{\"243\":1}}],[\"可以有另外一种相对更加安全的配置即ssh\",{\"1\":{\"49\":1}}],[\"可以通过如下方式来访问对应下标的值\",{\"1\":{\"1417\":1}}],[\"可以通过字段名来访问其值\",{\"1\":{\"1417\":1}}],[\"可以通过gin的context的param方法来获取api参数\",{\"1\":{\"1280\":1}}],[\"可以通过域名ping了\",{\"1\":{\"1196\":1}}],[\"可以通过burst关键字开启对突发请求的缓存处理\",{\"1\":{\"1155\":1}}],[\"可以通过逗号来指定多个路径\",{\"1\":{\"1029\":1}}],[\"可以通过脚本来通知管理员\",{\"1\":{\"1000\":1}}],[\"可以通过脚本来完成组合操作\",{\"1\":{\"827\":1}}],[\"可以通过修改\",{\"1\":{\"986\":1}}],[\"可以通过命令退出当前redis的客户端链接\",{\"1\":{\"968\":1}}],[\"可以通过命令行工具\",{\"1\":{\"842\":1}}],[\"可以通过pidfile指定\",{\"1\":{\"965\":1}}],[\"可以通过该配置项修改\",{\"1\":{\"965\":1}}],[\"可以通过optimizer\",{\"1\":{\"816\":1}}],[\"可以通过建立唯一索引或者主键索引\",{\"1\":{\"809\":1}}],[\"可以通过分页查询来解决此问题\",{\"1\":{\"653\":1}}],[\"可以通过设置评论的父评论id来支持树形结构\",{\"1\":{\"638\":1}}],[\"可以通过二分查找\",{\"1\":{\"636\":1}}],[\"可以通过有缓冲的\",{\"1\":{\"544\":1}}],[\"可以通过无缓冲的channel\",{\"1\":{\"544\":1}}],[\"可以通过\",{\"1\":{\"461\":1,\"498\":1,\"502\":1,\"633\":1,\"639\":1,\"645\":1,\"1183\":1}}],[\"可以通过method\",{\"1\":{\"370\":1}}],[\"可以通过编译但是毫无意义\",{\"1\":{\"341\":1}}],[\"可以通过编译\",{\"1\":{\"340\":1,\"341\":1,\"383\":1}}],[\"可以通过强制类型转换将其他数字也转换成该类型\",{\"1\":{\"213\":1}}],[\"可以通过花括号建立一个代码块\",{\"1\":{\"210\":1}}],[\"可以按照下面这样写\",{\"1\":{\"207\":1}}],[\"可以转换为\",{\"1\":{\"200\":1}}],[\"可以表达unicode字符\",{\"1\":{\"200\":1}}],[\"可以表达anscii字符\",{\"1\":{\"200\":1}}],[\"可以自行阅读源码\",{\"1\":{\"1364\":1}}],[\"可以自行搜索搭建\",{\"1\":{\"42\":1}}],[\"可以自定义日期格式\",{\"1\":{\"721\":1}}],[\"可以自定义\",{\"1\":{\"323\":1}}],[\"可以自己去了解\",{\"1\":{\"298\":1}}],[\"可以自动格式化代码\",{\"1\":{\"155\":1}}],[\"可以评估表达式的引擎\",{\"1\":{\"130\":1}}],[\"可以被编组\",{\"1\":{\"127\":1}}],[\"可以理解为消息的分类\",{\"1\":{\"1020\":1}}],[\"可以理解为我们的本科毕业证\",{\"1\":{\"83\":1}}],[\"可以理解为将代码复制一份\",{\"1\":{\"30\":1}}],[\"可以结合ai生成对应的思维导图\",{\"1\":{\"74\":1}}],[\"可以链接到\",{\"1\":{\"64\":1}}],[\"可以同时开启多个任务的开发\",{\"1\":{\"29\":1}}],[\"可以抽象成一个然后解决一些暴力for循环解决不了的问题\",{\"1\":{\"4\":1}}],[\"2tf9vfzrdiqe5pxe\",{\"1\":{\"1225\":2,\"1226\":1,\"1227\":1}}],[\"2k\",{\"1\":{\"1132\":1,\"1173\":1}}],[\"2k+\",{\"1\":{\"111\":1}}],[\"2b\",{\"1\":{\"791\":1,\"1367\":1}}],[\"2阶爬2步\",{\"1\":{\"654\":1}}],[\"2n\",{\"1\":{\"645\":2}}],[\"2pc\",{\"1\":{\"613\":1,\"685\":1}}],[\"2字\",{\"1\":{\"554\":2}}],[\"2ms\",{\"1\":{\"476\":1}}],[\"2mi\",{\"1\":{\"476\":2}}],[\"2m\",{\"1\":{\"476\":2}}],[\"2中的2代表了使用的cpu核数\",{\"1\":{\"475\":1}}],[\"2中所定义的sha384和sha512哈希算法\",{\"1\":{\"124\":1}}],[\"2中所定义的sha224和sha256哈希算法\",{\"1\":{\"124\":1}}],[\"2+incompatible\",{\"1\":{\"459\":1}}],[\"26h\",{\"1\":{\"1235\":1}}],[\"266\",{\"1\":{\"477\":2}}],[\"265\",{\"1\":{\"477\":1}}],[\"264\",{\"1\":{\"477\":1}}],[\"26381\",{\"1\":{\"1004\":1}}],[\"26380\",{\"1\":{\"1004\":1}}],[\"26379\",{\"1\":{\"1000\":1,\"1003\":1,\"1004\":1}}],[\"263\",{\"1\":{\"477\":1}}],[\"2612\",{\"1\":{\"476\":1}}],[\"267\",{\"1\":{\"393\":1,\"477\":2}}],[\"26\",{\"1\":{\"326\":1,\"476\":1,\"638\":1,\"641\":1,\"706\":1,\"713\":1,\"724\":1,\"861\":2,\"965\":1,\"1132\":1,\"1173\":1,\"1352\":1}}],[\"2^9=512\",{\"1\":{\"282\":1}}],[\"2^8=256\",{\"1\":{\"282\":1}}],[\"2^7=128\",{\"1\":{\"282\":1}}],[\"2^6=64\",{\"1\":{\"282\":1}}],[\"2^5=32\",{\"1\":{\"282\":1}}],[\"2^4=16\",{\"1\":{\"282\":1}}],[\"2^3=8\",{\"1\":{\"282\":1}}],[\"2^2=4\",{\"1\":{\"282\":1}}],[\"2^1=2\",{\"1\":{\"282\":1}}],[\"2^0=1\",{\"1\":{\"282\":1}}],[\"2^\",{\"1\":{\"282\":1,\"720\":2,\"724\":2}}],[\"2版本之后\",{\"1\":{\"1029\":1}}],[\"2版本引用了模块c的1\",{\"1\":{\"458\":2}}],[\"2版本\",{\"1\":{\"458\":2}}],[\"2版本和模块b的1\",{\"1\":{\"458\":1}}],[\"2版本添加\",{\"1\":{\"250\":1}}],[\"2版兼容\",{\"1\":{\"144\":1}}],[\"280\",{\"1\":{\"1078\":4}}],[\"28的并且只显示age这列数据\",{\"1\":{\"863\":1}}],[\"28个元素放到hashmap里面\",{\"1\":{\"593\":1,\"665\":1}}],[\"286\",{\"1\":{\"476\":1}}],[\"286723000\",{\"1\":{\"476\":1}}],[\"281901975\",{\"1\":{\"476\":1}}],[\"285074900\",{\"1\":{\"476\":1}}],[\"2848\",{\"1\":{\"476\":1}}],[\"28\",{\"1\":{\"233\":1,\"281\":1,\"326\":1,\"453\":2,\"459\":1,\"638\":1,\"641\":1,\"863\":3,\"965\":1,\"1082\":2,\"1225\":1,\"1228\":3,\"1307\":1}}],[\"27201964951406896425242246173749149171560804184009624861664038\",{\"1\":{\"1345\":1}}],[\"2726\",{\"1\":{\"476\":1}}],[\"27017\",{\"1\":{\"830\":1,\"851\":1,\"852\":2,\"867\":1}}],[\"2763daa6ad2a\",{\"1\":{\"822\":1}}],[\"276487000\",{\"1\":{\"476\":1}}],[\"27s\",{\"1\":{\"477\":1}}],[\"2714\",{\"1\":{\"476\":1}}],[\"278500125\",{\"1\":{\"475\":1}}],[\"277771375\",{\"1\":{\"475\":1}}],[\"27pm\",{\"1\":{\"326\":1}}],[\"27\",{\"1\":{\"233\":1,\"326\":2,\"449\":1,\"638\":1,\"641\":1,\"965\":1,\"1194\":1,\"1358\":1,\"1360\":1}}],[\"2748i\",{\"1\":{\"183\":1}}],[\"2d\",{\"1\":{\"233\":1}}],[\"2<<7\",{\"1\":{\"221\":9}}],[\"234\",{\"1\":{\"1419\":1}}],[\"2371609442247427\",{\"1\":{\"1364\":1}}],[\"2389\",{\"1\":{\"1355\":2}}],[\"230\",{\"1\":{\"1035\":1,\"1036\":1,\"1130\":1,\"1135\":3}}],[\"23t04\",{\"1\":{\"705\":1}}],[\"233336849z\",{\"1\":{\"702\":1}}],[\"239\",{\"1\":{\"645\":1}}],[\"239滑动窗口最大值\",{\"1\":{\"573\":1,\"645\":2}}],[\"231\",{\"1\":{\"258\":1}}],[\"23\",{\"1\":{\"221\":1,\"326\":1,\"449\":3,\"477\":1,\"635\":1,\"638\":1,\"641\":1,\"730\":3,\"861\":2,\"965\":1,\"1166\":1,\"1175\":1,\"1344\":2,\"1376\":1,\"1377\":1,\"1379\":1}}],[\"21840\",{\"1\":{\"1033\":1}}],[\"2181\",{\"1\":{\"1029\":4,\"1034\":16}}],[\"21s\",{\"1\":{\"477\":1}}],[\"219\",{\"1\":{\"477\":5}}],[\"217\",{\"1\":{\"477\":2}}],[\"2174\",{\"1\":{\"475\":1}}],[\"2164\",{\"1\":{\"476\":1}}],[\"21更新了clear函数\",{\"1\":{\"264\":1}}],[\"21之前\",{\"1\":{\"264\":1}}],[\"21新增了clear内置函数\",{\"1\":{\"251\":1}}],[\"21\",{\"1\":{\"221\":1,\"233\":1,\"255\":1,\"258\":3,\"282\":1,\"326\":1,\"393\":2,\"449\":3,\"475\":1,\"635\":1,\"638\":1,\"639\":1,\"641\":1,\"861\":1,\"965\":1,\"1433\":1,\"1434\":4,\"1435\":2}}],[\"21版本以上的开发者\",{\"1\":{\"1375\":1}}],[\"21版本\",{\"1\":{\"209\":1}}],[\"22false\",{\"1\":{\"1393\":1}}],[\"2222\",{\"1\":{\"1393\":1}}],[\"222\",{\"1\":{\"1165\":1}}],[\"224\",{\"1\":{\"1123\":2,\"1136\":2,\"1138\":1,\"1143\":1,\"1144\":1,\"1166\":3}}],[\"220\",{\"1\":{\"1010\":1}}],[\"22的数据\",{\"1\":{\"861\":1}}],[\"22的记录\",{\"1\":{\"861\":3}}],[\"22k\",{\"1\":{\"476\":2}}],[\"2263\",{\"1\":{\"476\":1}}],[\"2235\",{\"1\":{\"476\":1}}],[\"228\",{\"1\":{\"258\":1}}],[\"22\",{\"1\":{\"209\":1,\"221\":4,\"259\":1,\"326\":1,\"449\":2,\"454\":1,\"463\":1,\"465\":1,\"635\":1,\"638\":1,\"639\":1,\"641\":1,\"713\":1,\"730\":1,\"759\":1,\"858\":2,\"859\":1,\"861\":8,\"863\":2,\"892\":1,\"965\":1,\"1434\":1}}],[\"2i\",{\"1\":{\"183\":1,\"1440\":1}}],[\"25的记录\",{\"1\":{\"861\":2}}],[\"259\",{\"1\":{\"477\":1}}],[\"257\",{\"1\":{\"477\":1}}],[\"251\",{\"1\":{\"477\":1}}],[\"255\",{\"1\":{\"306\":1,\"817\":4,\"820\":2,\"892\":2,\"1194\":5,\"1195\":4,\"1197\":2,\"1219\":2}}],[\"256\",{\"1\":{\"244\":1,\"477\":1,\"634\":1,\"875\":1}}],[\"25倍\",{\"1\":{\"244\":1}}],[\"25i\",{\"1\":{\"183\":2}}],[\"25\",{\"1\":{\"182\":2,\"208\":2,\"211\":1,\"212\":2,\"233\":1,\"265\":1,\"269\":1,\"281\":1,\"326\":1,\"471\":3,\"638\":1,\"641\":1,\"706\":1,\"861\":8,\"965\":1,\"1197\":1,\"1228\":1,\"1281\":1,\"1283\":1,\"1433\":2,\"1434\":3,\"1435\":2}}],[\"2的rpc\",{\"1\":{\"128\":1}}],[\"24小时格式化输出\",{\"1\":{\"1431\":1}}],[\"24小时有效期\",{\"1\":{\"1226\":1}}],[\"24s\",{\"1\":{\"477\":1}}],[\"2448\",{\"1\":{\"475\":1}}],[\"246859\",{\"1\":{\"443\":1,\"445\":5,\"446\":2,\"447\":1,\"448\":3,\"449\":1,\"450\":5,\"457\":2,\"462\":2,\"463\":3,\"465\":1}}],[\"240搜索二维矩阵ⅱ\",{\"1\":{\"566\":1,\"638\":2}}],[\"240\",{\"1\":{\"439\":1,\"638\":1}}],[\"24\",{\"1\":{\"111\":1,\"181\":5,\"221\":1,\"233\":2,\"322\":1,\"326\":1,\"353\":1,\"367\":1,\"635\":1,\"638\":1,\"641\":1,\"730\":1,\"820\":1,\"965\":1,\"1090\":1,\"1194\":1,\"1307\":1,\"1321\":1,\"1368\":1,\"1440\":2,\"1441\":1,\"1442\":1}}],[\"297796\",{\"1\":{\"477\":2}}],[\"299\",{\"1\":{\"476\":1}}],[\"299637800\",{\"1\":{\"476\":1}}],[\"292ms\",{\"1\":{\"821\":1}}],[\"292320625\",{\"1\":{\"476\":1}}],[\"2925\",{\"1\":{\"476\":1}}],[\"291517150\",{\"1\":{\"476\":1}}],[\"2961\",{\"1\":{\"476\":1}}],[\"298974625\",{\"1\":{\"476\":1}}],[\"290535650\",{\"1\":{\"476\":1}}],[\"29中所述的unicode文本分段的go库\",{\"1\":{\"144\":1}}],[\"29\",{\"1\":{\"111\":1,\"475\":6,\"476\":36,\"638\":1,\"641\":1,\"759\":2,\"965\":1,\"1434\":3}}],[\"20版本以后它就已经被废弃了\",{\"1\":{\"1445\":1}}],[\"20m\",{\"1\":{\"1158\":4}}],[\"208\",{\"1\":{\"724\":1}}],[\"20亿\",{\"1\":{\"639\":1}}],[\"20有效括号\",{\"1\":{\"566\":1,\"638\":2}}],[\"2021\",{\"1\":{\"1166\":1}}],[\"20210823165956196\",{\"1\":{\"1162\":1}}],[\"20210821201134971\",{\"1\":{\"1128\":1}}],[\"20210821200948492\",{\"1\":{\"1127\":1}}],[\"20210821220258886\",{\"1\":{\"1123\":1}}],[\"20210821155648853\",{\"1\":{\"1131\":1}}],[\"20210821150531906\",{\"1\":{\"1130\":1}}],[\"20210821141421135\",{\"1\":{\"1120\":1}}],[\"20210821111709845\",{\"1\":{\"1116\":1}}],[\"20210923205945\",{\"1\":{\"453\":2,\"459\":1}}],[\"20250103181643832\",{\"1\":{\"1063\":1}}],[\"20200116185657945\",{\"1\":{\"1183\":1}}],[\"2020\",{\"1\":{\"581\":1,\"653\":2,\"759\":6,\"1370\":1,\"1371\":1}}],[\"2023\",{\"1\":{\"1036\":1,\"1197\":1,\"1303\":2,\"1306\":1,\"1433\":1,\"1434\":3,\"1435\":2}}],[\"20230224173230\",{\"1\":{\"454\":1}}],[\"20230829180723\",{\"1\":{\"454\":1}}],[\"20231101134539\",{\"1\":{\"454\":1}}],[\"20231231155935\",{\"1\":{\"454\":1}}],[\"20221115062448\",{\"1\":{\"453\":2,\"459\":2}}],[\"2022\",{\"1\":{\"337\":1,\"1429\":1,\"1431\":2}}],[\"20240704033850225\",{\"1\":{\"1103\":1}}],[\"20240704033828317\",{\"1\":{\"1101\":1}}],[\"20240704032851910\",{\"1\":{\"1099\":1}}],[\"20240704032839921\",{\"1\":{\"1098\":1}}],[\"20240704031951936\",{\"1\":{\"1096\":1}}],[\"20240704030351447\",{\"1\":{\"1093\":1}}],[\"20240704030334842\",{\"1\":{\"1093\":1}}],[\"20240704025833132\",{\"1\":{\"1091\":1}}],[\"20240704023655097\",{\"1\":{\"1091\":1}}],[\"20240704023637382\",{\"1\":{\"1091\":1}}],[\"20240704001646729\",{\"1\":{\"1085\":1}}],[\"20240703161531109\",{\"1\":{\"1072\":1}}],[\"2024\",{\"1\":{\"326\":1,\"328\":3,\"702\":1,\"705\":1,\"1082\":2}}],[\"20241122185952295\",{\"1\":{\"83\":1}}],[\"2016\",{\"1\":{\"1307\":2}}],[\"2017\",{\"1\":{\"1132\":1,\"1173\":1}}],[\"20150623\",{\"1\":{\"1132\":1,\"1173\":1}}],[\"20190328153045991\",{\"1\":{\"1165\":1}}],[\"2019\",{\"1\":{\"1108\":2}}],[\"2019年开始私有仓库也是免费的但是只能3个人协同开发\",{\"1\":{\"43\":1}}],[\"2011年6月1日\",{\"1\":{\"1107\":1}}],[\"2018\",{\"1\":{\"721\":4,\"724\":5}}],[\"20180228061459\",{\"1\":{\"453\":2,\"459\":1}}],[\"201\",{\"1\":{\"709\":1}}],[\"2012\",{\"1\":{\"337\":1,\"1432\":2}}],[\"20+6\",{\"1\":{\"228\":1}}],[\"2001\",{\"1\":{\"1369\":1}}],[\"2001ms\",{\"1\":{\"1197\":1}}],[\"2006年1月2日下午15点04分\",{\"1\":{\"1431\":1}}],[\"2006\",{\"1\":{\"1289\":1,\"1303\":1,\"1431\":2,\"1432\":1}}],[\"2009\",{\"1\":{\"1218\":1}}],[\"20000\",{\"1\":{\"1082\":1}}],[\"2007年发布\",{\"1\":{\"1053\":1}}],[\"200个券码\",{\"1\":{\"625\":1,\"697\":1}}],[\"200\",{\"1\":{\"427\":4,\"428\":1,\"702\":2,\"704\":1,\"705\":1,\"706\":1,\"707\":1,\"710\":1,\"711\":1,\"712\":1,\"818\":1,\"1286\":2,\"1289\":1}}],[\"2005ms\",{\"1\":{\"1195\":1,\"1196\":1}}],[\"20051\",{\"1\":{\"221\":1}}],[\"20050\",{\"1\":{\"221\":1}}],[\"2008年\",{\"1\":{\"12\":1}}],[\"2048\",{\"1\":{\"182\":1,\"1420\":2}}],[\"2046中定义的mime多个部分的解析\",{\"1\":{\"124\":1}}],[\"20\",{\"1\":{\"174\":1,\"181\":1,\"221\":1,\"228\":1,\"233\":3,\"258\":3,\"300\":1,\"396\":1,\"428\":1,\"442\":1,\"453\":1,\"455\":2,\"459\":2,\"476\":1,\"477\":1,\"513\":1,\"515\":4,\"635\":1,\"638\":2,\"639\":1,\"641\":1,\"653\":1,\"724\":2,\"725\":1,\"759\":3,\"813\":1,\"820\":13,\"835\":1,\"838\":1,\"861\":2,\"892\":1,\"909\":1,\"965\":1,\"970\":1,\"974\":1,\"993\":12,\"1078\":1,\"1111\":1,\"1113\":1,\"1115\":1,\"1132\":1,\"1164\":2,\"1173\":1,\"1303\":1,\"1362\":1,\"1363\":1,\"1364\":1,\"1413\":2,\"1434\":1}}],[\"2开启局域网共享代码\",{\"0\":{\"42\":1}}],[\"2删除分支\",{\"0\":{\"36\":1}}],[\"2切换分支\",{\"0\":{\"34\":1}}],[\"2从版本库删除\",{\"0\":{\"26\":1}}],[\"2概念即详解\",{\"0\":{\"17\":1}}],[\"2\",{\"0\":{\"10\":1,\"11\":1,\"12\":2,\"15\":1,\"16\":1,\"17\":1,\"19\":1,\"30\":1,\"38\":1,\"44\":1,\"57\":1,\"65\":1,\"151\":1,\"158\":1,\"159\":2,\"160\":1,\"161\":1,\"162\":1,\"165\":1,\"169\":1,\"543\":1,\"719\":1,\"720\":1,\"725\":1,\"726\":2,\"727\":1,\"728\":1,\"729\":2,\"731\":1,\"733\":1,\"757\":1,\"764\":1,\"765\":1,\"777\":1,\"846\":1,\"867\":1,\"964\":1,\"971\":1,\"982\":1,\"986\":1,\"994\":1,\"998\":1,\"1003\":1,\"1010\":1,\"1020\":1,\"1021\":2,\"1023\":1,\"1029\":1,\"1036\":1,\"1057\":1,\"1076\":1,\"1082\":1,\"1090\":1,\"1096\":1,\"1099\":1,\"1102\":1,\"1147\":1,\"1172\":1,\"1232\":1,\"1274\":1,\"1277\":1,\"1278\":2,\"1279\":1,\"1284\":1,\"1290\":1},\"1\":{\"9\":1,\"11\":2,\"12\":2,\"13\":1,\"14\":2,\"18\":2,\"19\":1,\"20\":1,\"22\":5,\"25\":1,\"26\":2,\"30\":1,\"36\":1,\"43\":2,\"48\":1,\"54\":2,\"55\":1,\"58\":2,\"79\":1,\"82\":1,\"84\":1,\"111\":1,\"128\":2,\"130\":2,\"139\":1,\"144\":2,\"146\":1,\"179\":3,\"181\":2,\"182\":5,\"183\":2,\"191\":2,\"206\":3,\"208\":1,\"209\":4,\"210\":4,\"211\":1,\"212\":4,\"221\":1,\"224\":2,\"228\":3,\"230\":2,\"231\":1,\"233\":13,\"235\":3,\"236\":2,\"239\":4,\"241\":14,\"243\":1,\"244\":2,\"245\":4,\"246\":3,\"247\":6,\"248\":2,\"250\":5,\"251\":2,\"253\":1,\"259\":1,\"260\":3,\"261\":2,\"262\":3,\"263\":2,\"264\":2,\"275\":2,\"276\":3,\"281\":1,\"282\":4,\"283\":4,\"284\":1,\"285\":9,\"286\":3,\"287\":7,\"294\":3,\"298\":1,\"299\":1,\"300\":1,\"306\":7,\"312\":1,\"313\":1,\"314\":3,\"317\":9,\"318\":1,\"323\":1,\"337\":1,\"338\":1,\"340\":2,\"364\":1,\"367\":1,\"375\":1,\"383\":1,\"384\":1,\"385\":1,\"387\":1,\"396\":8,\"412\":2,\"417\":5,\"420\":2,\"421\":4,\"422\":3,\"426\":11,\"429\":3,\"430\":1,\"431\":1,\"432\":1,\"436\":2,\"449\":1,\"453\":8,\"454\":4,\"458\":3,\"459\":8,\"474\":1,\"475\":7,\"476\":44,\"477\":6,\"491\":1,\"494\":2,\"498\":2,\"499\":1,\"500\":1,\"501\":1,\"511\":3,\"515\":3,\"545\":4,\"548\":1,\"551\":1,\"554\":2,\"557\":2,\"600\":1,\"601\":1,\"622\":1,\"630\":1,\"633\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"641\":1,\"644\":1,\"645\":1,\"649\":1,\"651\":1,\"653\":2,\"654\":5,\"672\":1,\"673\":1,\"694\":1,\"704\":2,\"705\":1,\"706\":1,\"711\":1,\"712\":1,\"717\":1,\"721\":1,\"724\":1,\"725\":3,\"726\":1,\"730\":2,\"732\":1,\"733\":3,\"735\":1,\"741\":6,\"744\":1,\"766\":1,\"771\":1,\"774\":1,\"775\":2,\"786\":1,\"791\":1,\"793\":1,\"794\":2,\"799\":1,\"807\":1,\"809\":3,\"811\":2,\"814\":1,\"816\":2,\"817\":1,\"820\":1,\"821\":4,\"822\":2,\"825\":1,\"842\":1,\"843\":1,\"849\":1,\"850\":1,\"851\":1,\"852\":2,\"861\":1,\"862\":1,\"863\":4,\"878\":1,\"881\":3,\"882\":3,\"883\":2,\"884\":3,\"916\":1,\"917\":2,\"942\":1,\"945\":1,\"947\":1,\"949\":3,\"950\":1,\"951\":2,\"965\":1,\"967\":2,\"968\":1,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"985\":1,\"990\":1,\"993\":1,\"1000\":1,\"1003\":1,\"1004\":4,\"1010\":8,\"1019\":1,\"1022\":1,\"1023\":1,\"1028\":16,\"1034\":2,\"1037\":1,\"1039\":1,\"1052\":3,\"1053\":2,\"1054\":2,\"1055\":1,\"1056\":1,\"1082\":1,\"1093\":1,\"1123\":1,\"1126\":1,\"1128\":1,\"1130\":1,\"1131\":1,\"1135\":2,\"1163\":1,\"1165\":6,\"1171\":1,\"1184\":1,\"1185\":1,\"1193\":2,\"1194\":6,\"1195\":9,\"1196\":1,\"1197\":7,\"1198\":1,\"1225\":1,\"1228\":3,\"1235\":3,\"1274\":1,\"1275\":1,\"1278\":1,\"1281\":4,\"1304\":1,\"1321\":1,\"1345\":2,\"1346\":2,\"1347\":1,\"1349\":1,\"1350\":1,\"1352\":2,\"1353\":2,\"1354\":1,\"1356\":2,\"1357\":1,\"1358\":1,\"1359\":1,\"1360\":1,\"1361\":2,\"1364\":1,\"1368\":1,\"1369\":1,\"1376\":1,\"1377\":1,\"1379\":1,\"1380\":1,\"1381\":1,\"1389\":2,\"1392\":4,\"1393\":1,\"1399\":2,\"1408\":2,\"1417\":6,\"1420\":9,\"1421\":1,\"1424\":3,\"1425\":2,\"1435\":1,\"1443\":3,\"1444\":2,\"1445\":2,\"1446\":4}}],[\"回滚一个事务\",{\"1\":{\"897\":1}}],[\"回复2t\",{\"1\":{\"876\":1}}],[\"回复评论的数据表结构可以包括\",{\"1\":{\"638\":1}}],[\"回源策略\",{\"1\":{\"644\":1}}],[\"回文链表\",{\"1\":{\"606\":1,\"678\":1}}],[\"回表的优化了解过吗\",{\"1\":{\"592\":1,\"664\":1}}],[\"回答维度\",{\"1\":{\"901\":1}}],[\"回答的\",{\"1\":{\"645\":1}}],[\"回答的shutdown和shutdownnow的区别\",{\"1\":{\"573\":1,\"645\":1}}],[\"回答缓存先写数据库后写存在问题\",{\"1\":{\"576\":1,\"648\":1}}],[\"回归测试\",{\"1\":{\"504\":1}}],[\"回车符号\",{\"1\":{\"185\":1}}],[\"回退符号\",{\"1\":{\"185\":1}}],[\"回退至历史版本\",{\"1\":{\"24\":1}}],[\"回退历史版本\",{\"1\":{\"9\":1}}],[\"回溯\",{\"1\":{\"4\":1}}],[\"回溯模板\",{\"1\":{\"4\":1}}],[\"回溯解决什么问题\",{\"1\":{\"4\":1}}],[\"回溯算法\",{\"0\":{\"4\":1},\"1\":{\"653\":1}}],[\"改善用户体验\",{\"1\":{\"1019\":1}}],[\"改名为\",{\"1\":{\"967\":1}}],[\"改进\",{\"1\":{\"618\":1,\"690\":1}}],[\"改进后的google的跳转一致性哈希\",{\"1\":{\"128\":1}}],[\"改\",{\"1\":{\"512\":1}}],[\"改写刚刚的sum\",{\"1\":{\"300\":1}}],[\"改成指针接收者就正常了\",{\"1\":{\"287\":1}}],[\"改成如下的顺序\",{\"1\":{\"273\":1}}],[\"改为静态模式\",{\"1\":{\"1219\":1}}],[\"改为如下代码\",{\"1\":{\"502\":1}}],[\"改为了值接收者\",{\"1\":{\"287\":1}}],[\"改为\",{\"1\":{\"287\":1,\"986\":1}}],[\"改完就报错了\",{\"1\":{\"9\":1}}],[\"改之前好好的\",{\"1\":{\"9\":1}}],[\"改回来吧\",{\"1\":{\"9\":1}}],[\"改好了\",{\"1\":{\"9\":1}}],[\"领导在控制台点点点\",{\"1\":{\"615\":1,\"687\":1}}],[\"领导买了\",{\"1\":{\"615\":1,\"687\":1}}],[\"领导觉得第一版不错\",{\"1\":{\"9\":1}}],[\"领导让修改\",{\"1\":{\"9\":1}}],[\"领导让写文档\",{\"1\":{\"9\":1}}],[\"d2d153ea8d0a\",{\"1\":{\"1219\":1}}],[\"d37ec2853507\",{\"1\":{\"1197\":1}}],[\"d37ec2853507c3e6159db06e4c8a33e39a45edff4ac69949c96f981d7aca9a79\",{\"1\":{\"1197\":1}}],[\"d45cce869590400ad7dbda32a825ab0741d0e41e\",{\"1\":{\"1010\":2}}],[\"d0b678984c3c6f06b6c4510694d76b8381a45762\",{\"1\":{\"1010\":6}}],[\"dml语句必须有where条件\",{\"1\":{\"796\":1}}],[\"dmitri\",{\"1\":{\"460\":1}}],[\"d88b17b0abb2a82dc4350e93abaebe0353228df2\",{\"1\":{\"1010\":3}}],[\"d81df2492094\",{\"1\":{\"775\":1}}],[\"d856c981b6266ba2便是输出的语料文件路径\",{\"1\":{\"477\":1}}],[\"d856c981b6266ba2\",{\"1\":{\"477\":7}}],[\"dtd\",{\"1\":{\"742\":2}}],[\"dd这类\",{\"1\":{\"1431\":1}}],[\"ddd\",{\"1\":{\"1390\":1}}],[\"dddd\",{\"1\":{\"1390\":1}}],[\"dddde±dd\",{\"1\":{\"1390\":2}}],[\"ddddp±ddd\",{\"1\":{\"1390\":3}}],[\"ddr4\",{\"1\":{\"1039\":1}}],[\"ddl\",{\"1\":{\"794\":1}}],[\"dd||epoch\",{\"1\":{\"721\":1,\"724\":1}}],[\"dd\",{\"1\":{\"721\":1,\"724\":1}}],[\"db=kong\",{\"1\":{\"1075\":1}}],[\"db=mysql\",{\"1\":{\"822\":3}}],[\"dbfilename\",{\"1\":{\"965\":1,\"981\":1}}],[\"dbname\",{\"1\":{\"856\":1}}],[\"dbquery\",{\"1\":{\"855\":1}}],[\"dbsize\",{\"1\":{\"968\":2}}],[\"dbs\",{\"1\":{\"855\":1,\"856\":1,\"868\":1}}],[\"dbpath=d\",{\"1\":{\"852\":1}}],[\"dbpath\",{\"1\":{\"851\":1,\"852\":1}}],[\"db\",{\"1\":{\"702\":1,\"814\":1,\"832\":1,\"833\":1,\"834\":2,\"836\":1,\"851\":2,\"852\":2,\"855\":10,\"856\":7,\"857\":8,\"858\":4,\"859\":3,\"860\":2,\"861\":24,\"862\":7,\"863\":11,\"870\":3,\"873\":4,\"891\":2,\"893\":6,\"894\":1,\"895\":1,\"896\":1,\"897\":3,\"910\":1,\"911\":1,\"912\":1,\"967\":4,\"968\":1,\"993\":1},\"2\":{\"826\":1,\"839\":1,\"888\":1,\"898\":1,\"902\":1,\"954\":1,\"1013\":1,\"1048\":1}}],[\"db的excel读取为表格\",{\"1\":{\"143\":1}}],[\"dp\",{\"1\":{\"645\":4}}],[\"d是主键\",{\"1\":{\"593\":1,\"665\":1}}],[\"d个协程\",{\"1\":{\"557\":1}}],[\"d个格式化参数的的错误\",{\"1\":{\"390\":1}}],[\"d97214ce235bfcf5\",{\"1\":{\"477\":1}}],[\"d为时间间隔\",{\"1\":{\"469\":1}}],[\"dlx\",{\"1\":{\"641\":1}}],[\"dlq\",{\"1\":{\"638\":1}}],[\"dlrow\",{\"1\":{\"477\":1}}],[\"dlv\",{\"1\":{\"454\":7}}],[\"dll\",{\"1\":{\"312\":3}}],[\"dunp\",{\"1\":{\"981\":1}}],[\"durability\",{\"1\":{\"904\":1}}],[\"durationencoder\",{\"1\":{\"1302\":3}}],[\"duration\",{\"1\":{\"412\":1,\"419\":1,\"428\":2,\"429\":2,\"430\":2,\"431\":4,\"432\":4,\"546\":1,\"911\":9,\"1301\":1,\"1324\":1,\"1429\":2,\"1430\":4,\"1433\":1,\"1434\":1,\"1435\":1}}],[\"during\",{\"1\":{\"776\":1,\"1163\":1}}],[\"dump\",{\"1\":{\"454\":1,\"965\":1,\"967\":1,\"981\":3,\"988\":1}}],[\"duktape\",{\"1\":{\"130\":1}}],[\"dgraph\",{\"1\":{\"334\":1}}],[\"d+\",{\"1\":{\"298\":1,\"1174\":1}}],[\"d=\",{\"1\":{\"282\":1,\"298\":1}}],[\"d将不会被返回\",{\"1\":{\"280\":1}}],[\"dsn就是数据库的连接地址\",{\"1\":{\"891\":1}}],[\"dsl\",{\"1\":{\"704\":2,\"706\":2,\"713\":4}}],[\"dst\",{\"1\":{\"256\":6,\"403\":1,\"410\":2,\"1281\":3}}],[\"dsa\",{\"1\":{\"124\":1}}],[\"dns解析\",{\"1\":{\"1365\":1}}],[\"dns\",{\"0\":{\"1373\":1},\"1\":{\"145\":1,\"638\":1,\"655\":1,\"1078\":1,\"1202\":1}}],[\"dhcp6\",{\"1\":{\"145\":1}}],[\"dht实施\",{\"1\":{\"128\":1}}],[\"dht\",{\"1\":{\"128\":1}}],[\"dkim库\",{\"1\":{\"129\":1}}],[\"dkim\",{\"1\":{\"129\":1}}],[\"dynamic\",{\"1\":{\"892\":1,\"1166\":1,\"1168\":1}}],[\"dynamodb支持的分布式锁定实现\",{\"1\":{\"128\":1}}],[\"dynamolock\",{\"1\":{\"128\":1}}],[\"dynatomic\",{\"1\":{\"128\":1}}],[\"dropuser\",{\"1\":{\"870\":1}}],[\"dropindexes\",{\"1\":{\"862\":1}}],[\"dropindex\",{\"1\":{\"862\":1}}],[\"dropdatabase\",{\"1\":{\"856\":1}}],[\"drop\",{\"1\":{\"810\":2,\"857\":1,\"892\":1}}],[\"driven\",{\"1\":{\"474\":2}}],[\"drivername\",{\"1\":{\"891\":1}}],[\"driver接口的类型都支持\",{\"1\":{\"890\":1}}],[\"drivers\",{\"1\":{\"878\":1,\"886\":1}}],[\"driver\",{\"1\":{\"124\":1,\"175\":1,\"828\":4,\"829\":1,\"830\":3,\"831\":2,\"832\":2,\"835\":2,\"836\":2,\"837\":2,\"838\":2,\"878\":1,\"890\":4,\"1197\":8}}],[\"drmaa\",{\"1\":{\"128\":1}}],[\"draft\",{\"1\":{\"145\":1}}],[\"dragonboat\",{\"1\":{\"128\":1}}],[\"draw\",{\"1\":{\"124\":1}}],[\"dwarf\",{\"1\":{\"124\":1}}],[\"dart\",{\"1\":{\"1238\":1}}],[\"darkroom\",{\"1\":{\"139\":1}}],[\"dashboard\",{\"1\":{\"1229\":1,\"1230\":1,\"1231\":8,\"1232\":1,\"1233\":4,\"1234\":1,\"1235\":15}}],[\"daemonize\",{\"1\":{\"965\":1,\"993\":2,\"1002\":3,\"1010\":1}}],[\"daemon\",{\"1\":{\"774\":2,\"993\":1,\"1032\":1,\"1221\":2,\"1223\":1}}],[\"date\",{\"0\":{\"721\":1},\"1\":{\"702\":1,\"705\":2,\"721\":8,\"724\":2,\"745\":1,\"858\":1,\"1036\":1,\"1166\":1,\"1174\":1,\"1303\":2}}],[\"data2\",{\"1\":{\"1257\":1,\"1261\":3}}],[\"data1\",{\"1\":{\"1256\":3,\"1257\":2,\"1261\":4}}],[\"data1可以被解释为\",{\"1\":{\"1256\":1}}],[\"datas\",{\"1\":{\"1417\":8,\"1419\":2,\"1425\":2}}],[\"datasourcename\",{\"1\":{\"891\":1}}],[\"datastructures\",{\"1\":{\"127\":1}}],[\"database=postgres\",{\"1\":{\"1076\":1,\"1077\":1}}],[\"databases\",{\"1\":{\"855\":1,\"965\":1}}],[\"database\",{\"1\":{\"124\":1,\"651\":1,\"794\":1,\"833\":1,\"834\":2,\"835\":2,\"836\":4,\"837\":2,\"838\":1,\"846\":1,\"848\":2,\"1075\":1,\"1076\":1,\"1077\":1,\"1078\":4,\"1308\":2,\"1313\":3,\"1314\":2}}],[\"data\",{\"1\":{\"124\":1,\"303\":2,\"308\":3,\"325\":1,\"345\":1,\"347\":2,\"402\":1,\"403\":2,\"429\":4,\"430\":4,\"446\":3,\"474\":7,\"477\":4,\"705\":1,\"714\":1,\"754\":2,\"768\":2,\"769\":1,\"770\":1,\"774\":1,\"813\":2,\"825\":1,\"851\":1,\"852\":5,\"881\":2,\"981\":3,\"993\":1,\"1029\":1,\"1081\":5,\"1082\":1,\"1092\":2,\"1139\":4,\"1164\":10,\"1194\":1,\"1195\":2,\"1196\":1,\"1197\":3,\"1220\":1,\"1281\":2,\"1310\":1,\"1316\":1,\"1321\":4,\"1374\":2,\"1415\":3,\"1417\":32,\"1419\":2,\"1425\":15,\"1428\":3}}],[\"day\",{\"1\":{\"653\":1}}],[\"dap\",{\"1\":{\"454\":3}}],[\"dangerop\",{\"1\":{\"396\":8,\"397\":6,\"398\":2}}],[\"dag执行\",{\"1\":{\"128\":1}}],[\"davecgh\",{\"1\":{\"122\":1}}],[\"dai0522\",{\"1\":{\"122\":1}}],[\"deny\",{\"1\":{\"1254\":1}}],[\"denied\",{\"1\":{\"390\":1}}],[\"detection\",{\"0\":{\"1096\":1}}],[\"detailed\",{\"1\":{\"1197\":1}}],[\"detail\",{\"1\":{\"817\":2,\"1082\":1,\"1086\":2,\"1087\":3}}],[\"detail`\",{\"1\":{\"817\":1}}],[\"details\",{\"1\":{\"62\":1,\"453\":1,\"523\":1}}],[\"dereference\",{\"1\":{\"1443\":1}}],[\"derekparker\",{\"1\":{\"454\":1}}],[\"derived\",{\"1\":{\"814\":1}}],[\"deriverd\",{\"1\":{\"814\":1}}],[\"degree\",{\"1\":{\"803\":1}}],[\"deploy\",{\"1\":{\"1215\":1,\"1229\":1}}],[\"deployment\",{\"1\":{\"1215\":2}}],[\"dep\",{\"1\":{\"814\":17,\"818\":8,\"819\":7,\"820\":1,\"821\":4}}],[\"department\",{\"1\":{\"724\":5,\"814\":11,\"821\":4}}],[\"deprecated\",{\"1\":{\"459\":1,\"717\":2}}],[\"deprecation\",{\"1\":{\"459\":1,\"717\":2}}],[\"debian12\",{\"1\":{\"702\":1}}],[\"debuglevel\",{\"1\":{\"1305\":3}}],[\"debug2\",{\"1\":{\"1164\":1}}],[\"debug1\",{\"1\":{\"1164\":1}}],[\"debugging\",{\"1\":{\"454\":3}}],[\"debug\",{\"1\":{\"124\":2,\"324\":6,\"326\":1,\"327\":3,\"328\":1,\"453\":6,\"454\":4,\"503\":1,\"965\":1,\"1130\":1,\"1131\":1,\"1164\":2,\"1303\":2}}],[\"demo2用户对\",{\"1\":{\"1244\":1}}],[\"demo2\",{\"1\":{\"1244\":1}}],[\"demo1用户对\",{\"1\":{\"1244\":1}}],[\"demo1\",{\"1\":{\"1244\":1,\"1245\":2}}],[\"demo用户对\",{\"1\":{\"1244\":2}}],[\"demo\",{\"1\":{\"396\":5,\"1243\":2,\"1244\":2,\"1245\":2,\"1306\":1}}],[\"delxxxx\",{\"1\":{\"1278\":1}}],[\"delphi\",{\"1\":{\"1238\":1}}],[\"delegate=yes\",{\"1\":{\"1223\":1}}],[\"deletion\",{\"1\":{\"449\":1}}],[\"deletebyid\",{\"1\":{\"883\":1,\"884\":2}}],[\"deletebyquery\",{\"1\":{\"752\":1}}],[\"deletemany\",{\"1\":{\"837\":1,\"883\":2,\"884\":1}}],[\"deleteone\",{\"1\":{\"837\":1,\"883\":1}}],[\"deletedcount\",{\"1\":{\"837\":2,\"883\":2}}],[\"deleted\",{\"1\":{\"712\":1}}],[\"deletedoc\",{\"1\":{\"712\":3}}],[\"delete\",{\"1\":{\"262\":3,\"264\":1,\"436\":1,\"512\":1,\"558\":1,\"633\":1,\"656\":1,\"707\":1,\"712\":1,\"751\":1,\"809\":1,\"811\":1,\"896\":5,\"897\":1,\"1029\":2,\"1034\":2,\"1226\":1,\"1228\":1,\"1278\":1,\"1286\":1}}],[\"del\",{\"1\":{\"915\":1,\"967\":2,\"985\":1,\"1010\":2}}],[\"delimiter\",{\"1\":{\"820\":2}}],[\"delay\",{\"1\":{\"1029\":1}}],[\"delayed\",{\"1\":{\"768\":1}}],[\"delatriclebyid\",{\"1\":{\"751\":2}}],[\"deltas\",{\"1\":{\"449\":1}}],[\"delta\",{\"1\":{\"422\":1,\"445\":2,\"449\":3}}],[\"delve\",{\"1\":{\"335\":1,\"454\":5}}],[\"deadlock\",{\"1\":{\"420\":1,\"422\":1}}],[\"deadline是截止时间\",{\"1\":{\"424\":1}}],[\"deadline\",{\"1\":{\"390\":1,\"424\":5,\"425\":2,\"428\":3,\"470\":2,\"546\":3}}],[\"dead\",{\"1\":{\"309\":6}}],[\"deathowl\",{\"1\":{\"122\":1}}],[\"definition是一个图关系构建器\",{\"1\":{\"1260\":1,\"1264\":1}}],[\"definition是系统的分配模板\",{\"1\":{\"1256\":1}}],[\"definition是系统的查询模板\",{\"1\":{\"1256\":1}}],[\"definition\",{\"1\":{\"1244\":2,\"1256\":2,\"1260\":3,\"1264\":3}}],[\"define\",{\"1\":{\"1425\":8,\"1427\":1,\"1428\":2}}],[\"defined\",{\"1\":{\"328\":3}}],[\"defines\",{\"1\":{\"289\":1,\"340\":1,\"1078\":1}}],[\"defroute=yes\",{\"1\":{\"1219\":2}}],[\"defce6912c4ae8b16d6f02a6eee0650c79c7d39cba26597de32648f936c0cd43\",{\"1\":{\"1197\":1}}],[\"defce6912c4a\",{\"1\":{\"1197\":2}}],[\"defer执行顺序\",{\"1\":{\"579\":1,\"651\":2}}],[\"defer的执行顺序\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"defer中嵌套的panic\",{\"1\":{\"396\":1}}],[\"defer中也可以嵌套panic\",{\"1\":{\"396\":1}}],[\"defer关键字可以使得一个函数延迟一段时间调用\",{\"1\":{\"283\":1}}],[\"defer\",{\"1\":{\"178\":1,\"220\":2,\"283\":5,\"284\":1,\"285\":6,\"388\":1,\"396\":26,\"397\":3,\"400\":1,\"403\":4,\"406\":1,\"408\":1,\"410\":2,\"415\":1,\"416\":2,\"417\":3,\"418\":4,\"421\":5,\"426\":1,\"427\":6,\"428\":2,\"434\":2,\"470\":1,\"514\":6,\"545\":2,\"556\":1,\"611\":1,\"620\":2,\"633\":6,\"634\":5,\"635\":6,\"651\":4,\"654\":1,\"683\":1,\"692\":2,\"830\":1,\"893\":1,\"897\":1,\"913\":1,\"1035\":1,\"1036\":1,\"1037\":1,\"1047\":4,\"1301\":2,\"1303\":1,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1374\":3,\"1433\":1,\"1434\":1}}],[\"defaultservemux是的默认实例\",{\"1\":{\"1337\":1}}],[\"defaultlineending\",{\"1\":{\"1303\":1}}],[\"defaultpostform\",{\"1\":{\"1281\":1}}],[\"defaultquery\",{\"1\":{\"1280\":1}}],[\"default值\",{\"1\":{\"794\":1}}],[\"default分支可以省略\",{\"1\":{\"421\":1}}],[\"default\",{\"1\":{\"84\":3,\"178\":1,\"230\":3,\"309\":1,\"326\":1,\"421\":1,\"426\":1,\"427\":4,\"428\":1,\"453\":2,\"653\":2,\"702\":1,\"786\":4,\"794\":1,\"817\":10,\"820\":4,\"892\":3,\"1003\":1,\"1078\":1,\"1087\":1,\"1123\":1,\"1130\":1,\"1131\":1,\"1151\":3,\"1152\":4,\"1158\":1,\"1163\":1,\"1164\":1,\"1193\":2,\"1194\":5,\"1195\":5,\"1197\":2,\"1275\":1,\"1277\":1,\"1280\":1,\"1281\":2,\"1282\":1,\"1283\":1,\"1286\":1,\"1289\":1,\"1328\":3,\"1427\":1}}],[\"deepequal\",{\"1\":{\"379\":5}}],[\"deepequal是反射包下提供的一个用于判断两个变量是否完全相等的函数\",{\"1\":{\"379\":1}}],[\"deep\",{\"1\":{\"142\":1}}],[\"deepcopy\",{\"1\":{\"122\":1}}],[\"devel\",{\"1\":{\"1112\":2}}],[\"development\",{\"1\":{\"1302\":5}}],[\"developer\",{\"1\":{\"726\":2,\"730\":4}}],[\"develop分支最终会被合并到master主分支\",{\"1\":{\"58\":1}}],[\"device=enp0s3\",{\"1\":{\"1219\":1}}],[\"device\",{\"1\":{\"298\":1,\"774\":1,\"1220\":1}}],[\"devices\",{\"1\":{\"140\":1}}],[\"dev\",{\"1\":{\"215\":3,\"453\":1,\"744\":1,\"908\":1,\"965\":1,\"1077\":4}}],[\"devops\",{\"0\":{\"160\":1,\"1204\":1},\"1\":{\"637\":2,\"638\":1,\"656\":1}}],[\"december\",{\"1\":{\"1108\":1}}],[\"decent\",{\"1\":{\"132\":1}}],[\"decode\",{\"1\":{\"833\":1,\"836\":1,\"884\":1}}],[\"decoderuneinstring\",{\"1\":{\"258\":1}}],[\"declare\",{\"1\":{\"820\":4}}],[\"declared\",{\"1\":{\"206\":1,\"717\":3}}],[\"decrement\",{\"1\":{\"970\":2}}],[\"decrby\",{\"1\":{\"638\":1,\"970\":1}}],[\"decr\",{\"1\":{\"638\":1,\"925\":1,\"970\":1}}],[\"decimal\",{\"1\":{\"122\":1,\"133\":1,\"653\":1,\"791\":2}}],[\"deque\",{\"1\":{\"127\":2,\"645\":1}}],[\"description=cri\",{\"1\":{\"1223\":2}}],[\"description=apache\",{\"1\":{\"1032\":1}}],[\"description\",{\"1\":{\"1166\":1,\"1303\":2}}],[\"describe\",{\"1\":{\"1034\":2}}],[\"desc\",{\"1\":{\"819\":1,\"1036\":1,\"1082\":1}}],[\"desc`\",{\"1\":{\"817\":1}}],[\"desktop\",{\"1\":{\"813\":2}}],[\"desbytes\",{\"1\":{\"256\":3}}],[\"destination移除列表的最后一个元素\",{\"1\":{\"971\":1}}],[\"destination\",{\"1\":{\"971\":1,\"973\":8,\"974\":2}}],[\"destructive\",{\"1\":{\"768\":1,\"769\":1,\"770\":1}}],[\"destfile\",{\"1\":{\"410\":3}}],[\"destpath\",{\"1\":{\"410\":4}}],[\"dest\",{\"1\":{\"247\":4}}],[\"des\",{\"1\":{\"124\":2}}],[\"d\",{\"0\":{\"1087\":1,\"1157\":1},\"1\":{\"58\":4,\"84\":4,\"192\":1,\"211\":1,\"221\":2,\"224\":3,\"225\":3,\"229\":1,\"233\":2,\"258\":4,\"260\":4,\"262\":3,\"263\":2,\"273\":1,\"280\":4,\"282\":1,\"287\":2,\"298\":1,\"299\":1,\"300\":2,\"304\":6,\"306\":1,\"310\":2,\"314\":2,\"326\":1,\"339\":2,\"393\":4,\"396\":6,\"400\":2,\"419\":1,\"428\":1,\"469\":1,\"470\":2,\"471\":24,\"472\":6,\"473\":6,\"474\":4,\"515\":1,\"545\":2,\"546\":1,\"556\":1,\"557\":3,\"621\":1,\"633\":1,\"651\":1,\"654\":1,\"693\":1,\"713\":1,\"754\":1,\"756\":2,\"766\":5,\"791\":1,\"814\":20,\"821\":5,\"822\":6,\"831\":3,\"833\":1,\"834\":2,\"836\":10,\"837\":2,\"838\":4,\"851\":1,\"852\":3,\"882\":6,\"883\":2,\"884\":3,\"927\":2,\"934\":1,\"939\":1,\"986\":1,\"1036\":2,\"1047\":5,\"1075\":1,\"1077\":1,\"1078\":1,\"1079\":1,\"1081\":1,\"1174\":1,\"1188\":1,\"1189\":1,\"1193\":1,\"1220\":3,\"1222\":3,\"1280\":2,\"1328\":5,\"1390\":2,\"1402\":4,\"1429\":2,\"1433\":1,\"1434\":1,\"1435\":1}}],[\"dial\",{\"1\":{\"1374\":1}}],[\"dialtimeout\",{\"1\":{\"911\":1}}],[\"dialer\",{\"1\":{\"911\":2}}],[\"diagram\",{\"1\":{\"793\":1}}],[\"di\",{\"1\":{\"775\":2,\"1081\":1}}],[\"dir=1\",{\"1\":{\"1029\":1}}],[\"dirpath\",{\"1\":{\"410\":4}}],[\"dirs=\",{\"1\":{\"1029\":1}}],[\"dirs\",{\"1\":{\"408\":2,\"1029\":1}}],[\"dir\",{\"1\":{\"408\":5,\"410\":1,\"965\":1,\"968\":1,\"981\":2,\"1000\":1,\"1003\":1,\"1004\":3,\"1010\":1}}],[\"direntry\",{\"1\":{\"408\":2}}],[\"director\",{\"1\":{\"1338\":3}}],[\"directories\",{\"1\":{\"1192\":1}}],[\"directory\",{\"1\":{\"300\":1,\"454\":1,\"469\":1}}],[\"directives\",{\"1\":{\"1164\":1}}],[\"direct\",{\"1\":{\"451\":1}}],[\"directmedia\",{\"1\":{\"134\":1}}],[\"dic<\",{\"1\":{\"742\":3}}],[\"dic\",{\"1\":{\"360\":3,\"394\":2,\"742\":1}}],[\"dictionary\",{\"0\":{\"742\":1}}],[\"dict\",{\"1\":{\"127\":2,\"742\":2,\"743\":1,\"1419\":1}}],[\"display\",{\"1\":{\"1197\":1}}],[\"disablestacktrace\",{\"1\":{\"1302\":3}}],[\"disablecaller\",{\"1\":{\"1302\":3}}],[\"disable\",{\"1\":{\"1222\":1}}],[\"disabled\",{\"1\":{\"1163\":1}}],[\"disablerepo=\",{\"1\":{\"1078\":1}}],[\"disassemble\",{\"1\":{\"327\":1}}],[\"disasm\",{\"1\":{\"326\":1}}],[\"distro=el\",{\"1\":{\"1078\":1}}],[\"distributed\",{\"1\":{\"12\":1,\"1055\":1}}],[\"dist\",{\"1\":{\"1028\":2}}],[\"distict\",{\"1\":{\"861\":1}}],[\"distinct\",{\"1\":{\"796\":2,\"861\":1}}],[\"disconnect\",{\"1\":{\"830\":1,\"1197\":2}}],[\"discovery\",{\"1\":{\"769\":3,\"770\":3,\"1225\":2,\"1226\":1,\"1227\":1}}],[\"discards\",{\"1\":{\"412\":1}}],[\"dismatch\",{\"1\":{\"337\":1}}],[\"div\",{\"1\":{\"280\":1}}],[\"digest\",{\"1\":{\"1194\":1}}],[\"diges等等\",{\"1\":{\"813\":1}}],[\"digota\",{\"1\":{\"128\":1}}],[\"digital\",{\"1\":{\"124\":2}}],[\"different\",{\"1\":{\"326\":1}}],[\"diff实用程序\",{\"1\":{\"141\":1}}],[\"difflib\",{\"1\":{\"122\":1}}],[\"diff\",{\"0\":{\"23\":1}}],[\"doog\",{\"1\":{\"477\":1}}],[\"doother\",{\"1\":{\"429\":2}}],[\"don\",{\"1\":{\"453\":1}}],[\"done通道将会关闭\",{\"1\":{\"427\":1}}],[\"done永远会返回nil\",{\"1\":{\"426\":1}}],[\"done方法表示当前协程已经执行完毕\",{\"1\":{\"422\":1}}],[\"done\",{\"1\":{\"266\":1,\"396\":1,\"422\":5,\"424\":3,\"425\":1,\"426\":2,\"427\":10,\"428\":2,\"429\":1,\"430\":1,\"431\":4,\"432\":4,\"434\":5,\"435\":1,\"436\":2,\"445\":4,\"449\":5,\"470\":1,\"545\":3,\"546\":2,\"556\":1,\"654\":1,\"1010\":2,\"1047\":1,\"1374\":1}}],[\"doprintf\",{\"1\":{\"435\":1}}],[\"doslow\",{\"1\":{\"434\":2}}],[\"dosomthing函数显然不知道doother函数可能会对数据做点什么\",{\"1\":{\"429\":1}}],[\"dosomething\",{\"1\":{\"294\":2,\"429\":2}}],[\"down标记服务器永久停机了\",{\"1\":{\"1161\":1}}],[\"down\",{\"1\":{\"344\":2,\"997\":1,\"998\":1,\"1000\":1,\"1003\":1,\"1004\":3,\"1163\":2,\"1164\":2,\"1194\":1}}],[\"downloadfile\",{\"1\":{\"1280\":3}}],[\"downloaded\",{\"1\":{\"1194\":1}}],[\"downloads\",{\"1\":{\"736\":1,\"737\":1,\"1028\":1}}],[\"download目录下存放着依赖的原始文件\",{\"1\":{\"457\":1}}],[\"downloading\",{\"1\":{\"450\":1,\"454\":14}}],[\"download\",{\"1\":{\"13\":1,\"456\":1,\"457\":1,\"460\":2,\"740\":1,\"849\":1,\"853\":1,\"964\":1,\"1109\":1,\"1111\":1,\"1152\":1,\"1184\":2,\"1223\":1}}],[\"do2\",{\"1\":{\"327\":1}}],[\"do1\",{\"1\":{\"327\":1}}],[\"dog指针依然可以正常赋值给animal\",{\"1\":{\"287\":1}}],[\"dog\",{\"1\":{\"287\":13,\"515\":9,\"649\":2,\"651\":3}}],[\"do\",{\"1\":{\"283\":4,\"293\":1,\"300\":5,\"314\":2,\"318\":2,\"322\":1,\"323\":3,\"324\":1,\"326\":4,\"340\":11,\"341\":4,\"393\":3,\"413\":1,\"414\":1,\"426\":2,\"429\":1,\"434\":3,\"470\":1,\"745\":4,\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"752\":1,\"754\":1,\"756\":1,\"757\":1,\"758\":1,\"763\":1,\"766\":6,\"820\":1,\"1010\":4,\"1333\":1,\"1334\":1}}],[\"does\",{\"1\":{\"287\":1,\"298\":1,\"318\":2,\"320\":1,\"390\":2,\"515\":1}}],[\"doe\",{\"1\":{\"269\":1}}],[\"double\",{\"1\":{\"305\":4,\"341\":2,\"524\":1,\"704\":2,\"705\":1,\"720\":1,\"724\":1,\"791\":1}}],[\"doublejump\",{\"1\":{\"128\":1}}],[\"douceur\",{\"1\":{\"129\":1}}],[\"dot\",{\"1\":{\"128\":1,\"326\":2}}],[\"doc容器是一个轻量级\",{\"1\":{\"1183\":1}}],[\"document\",{\"1\":{\"848\":1,\"858\":1}}],[\"documentation=https\",{\"1\":{\"1223\":1}}],[\"documentation\",{\"1\":{\"831\":1,\"832\":1,\"835\":1,\"836\":1,\"837\":1,\"838\":1}}],[\"documents\",{\"1\":{\"766\":2}}],[\"docid\",{\"1\":{\"754\":2}}],[\"doctype\",{\"1\":{\"742\":1}}],[\"docx\",{\"1\":{\"143\":1}}],[\"docker配置文件\",{\"1\":{\"1223\":1}}],[\"dockerd\",{\"1\":{\"1223\":9,\"1225\":2,\"1226\":2,\"1227\":1}}],[\"docker镜像源\",{\"1\":{\"1218\":1}}],[\"docker镜像管理\",{\"0\":{\"1200\":1}}],[\"docker镜像加载原理\",{\"1\":{\"1192\":1}}],[\"docker中的网络接口默认都是虚拟的接口\",{\"1\":{\"1195\":1}}],[\"docker容器管理\",{\"0\":{\"1201\":1}}],[\"docker容器网络就很好的利用了linux虚拟网络技术\",{\"1\":{\"1195\":1}}],[\"docker容器之间相互独立\",{\"1\":{\"822\":1}}],[\"docker启动一个容器时会根据docker网桥的网段分配给容器一个ip地址\",{\"1\":{\"1195\":1}}],[\"docker使用linux桥接\",{\"1\":{\"1195\":1}}],[\"docker使用步骤简便\",{\"1\":{\"822\":1}}],[\"docker每启动一个容器\",{\"1\":{\"1194\":2}}],[\"docker0和自定义网络肯定不通\",{\"1\":{\"1198\":1}}],[\"docker0网络的特点\",{\"1\":{\"1197\":1}}],[\"docker0是docker默认给的\",{\"1\":{\"1194\":1}}],[\"docker0\",{\"1\":{\"1194\":2,\"1195\":5,\"1197\":2}}],[\"docker创建的网络\",{\"1\":{\"1194\":1}}],[\"docker网络\",{\"0\":{\"1194\":1,\"1202\":1}}],[\"docker常用命令\",{\"0\":{\"1186\":1}}],[\"docker的socket配置文件\",{\"1\":{\"1223\":1}}],[\"docker的镜像实际上由一层一层的文件系统组成\",{\"1\":{\"1192\":1}}],[\"docker的卸载\",{\"1\":{\"1184\":1}}],[\"docker的架构图\",{\"1\":{\"1183\":1}}],[\"docker就是类似的理念\",{\"1\":{\"1183\":1}}],[\"docker必要概念\",{\"0\":{\"1183\":1}}],[\"dockerfile中可以有多个cmd指令\",{\"1\":{\"1193\":1}}],[\"dockerfile是由一堆命令和参数构成的脚本\",{\"1\":{\"1193\":1}}],[\"dockerfile文件\",{\"1\":{\"1193\":1}}],[\"dockerfile\",{\"1\":{\"1182\":1,\"1183\":3,\"1200\":1}}],[\"docker基础\",{\"0\":{\"1182\":1}}],[\"docker优势\",{\"0\":{\"1181\":1}}],[\"docker出现后\",{\"1\":{\"1180\":1}}],[\"docker安装kong\",{\"0\":{\"1077\":1}}],[\"docker安装mysql\",{\"0\":{\"775\":1}}],[\"docker和k8s\",{\"1\":{\"616\":1,\"688\":1}}],[\"docker\",{\"0\":{\"89\":1,\"774\":1,\"1177\":1,\"1179\":1,\"1203\":1,\"1204\":1,\"1205\":1},\"1\":{\"160\":1,\"166\":1,\"621\":1,\"637\":1,\"693\":1,\"702\":2,\"774\":7,\"775\":5,\"822\":8,\"1075\":1,\"1076\":1,\"1077\":1,\"1079\":1,\"1081\":2,\"1182\":12,\"1183\":6,\"1184\":23,\"1185\":1,\"1187\":6,\"1188\":3,\"1189\":6,\"1192\":1,\"1193\":4,\"1194\":3,\"1195\":4,\"1196\":5,\"1197\":22,\"1198\":3,\"1200\":4,\"1202\":4,\"1203\":5,\"1204\":3,\"1205\":5,\"1206\":5,\"1207\":1,\"1208\":4,\"1221\":11,\"1223\":11,\"1228\":1}}],[\"docs\",{\"1\":{\"65\":3,\"449\":6,\"741\":1,\"878\":1,\"885\":1,\"886\":1,\"1073\":1,\"1078\":2,\"1162\":1,\"1163\":1,\"1164\":1,\"1184\":1,\"1223\":1,\"1228\":1,\"1231\":1}}],[\"doc\",{\"1\":{\"28\":4,\"124\":1,\"296\":1,\"469\":2,\"709\":2,\"711\":4,\"713\":2,\"748\":1,\"1222\":2}}],[\"doc>>\",{\"1\":{\"9\":5}}],[\"dvcs\",{\"1\":{\"12\":1}}],[\"dfs\",{\"1\":{\"5\":3}}],[\"教程\",{\"1\":{\"9\":1,\"166\":1}}],[\"gfdecba\",{\"1\":{\"1398\":1}}],[\"gfm警告\",{\"0\":{\"61\":1}}],[\"g的情况是表示最大有效位数\",{\"1\":{\"1390\":1}}],[\"g3\",{\"1\":{\"1262\":1}}],[\"g3n\",{\"1\":{\"134\":1}}],[\"g是一个基于图的比较函数\",{\"1\":{\"1262\":1}}],[\"ghproxy\",{\"1\":{\"1223\":1}}],[\"gz\",{\"1\":{\"964\":2,\"1111\":1,\"1113\":1}}],[\"gzip\",{\"1\":{\"124\":1,\"1116\":1,\"1123\":1,\"1130\":1,\"1131\":1,\"1132\":1,\"1158\":1,\"1173\":1,\"1307\":1}}],[\"guangzhou\",{\"1\":{\"726\":2}}],[\"guangdong\",{\"1\":{\"726\":2}}],[\"guide\",{\"1\":{\"65\":3,\"771\":2}}],[\"gui\",{\"1\":{\"18\":1,\"165\":2}}],[\"gqueue\",{\"1\":{\"635\":1}}],[\"g2\",{\"1\":{\"601\":3,\"673\":3,\"1260\":1,\"1262\":1,\"1264\":2,\"1265\":2,\"1266\":3}}],[\"g1的清除算法\",{\"1\":{\"606\":1,\"678\":1}}],[\"g1的分区\",{\"1\":{\"606\":1,\"678\":1}}],[\"g1垃圾回收期和cms的改进或者说不一样的地方\",{\"1\":{\"606\":1,\"678\":1}}],[\"g1\",{\"1\":{\"588\":3,\"601\":3,\"660\":3,\"673\":3}}],[\"g阻塞时\",{\"1\":{\"651\":1}}],[\"g阻塞\",{\"1\":{\"579\":1,\"651\":1}}],[\"gm开销原因\",{\"1\":{\"651\":1}}],[\"gm模型的调度\",{\"1\":{\"651\":1}}],[\"gm\",{\"1\":{\"579\":1,\"651\":2}}],[\"gmp调度流程的优点\",{\"1\":{\"654\":1}}],[\"gmp调度模型三个重要结构g\",{\"1\":{\"541\":1}}],[\"gmp\",{\"1\":{\"541\":1,\"579\":2,\"635\":2,\"651\":4}}],[\"gmp模型中什么时候把g放全局队列\",{\"1\":{\"563\":1,\"635\":2}}],[\"gmp模型\",{\"0\":{\"541\":1},\"1\":{\"537\":1,\"563\":1,\"600\":1,\"635\":2,\"672\":1}}],[\"gmap2\",{\"1\":{\"338\":1}}],[\"gmap1\",{\"1\":{\"338\":1}}],[\"gmqtt是一个灵活的高性能mqtt代理库\",{\"1\":{\"145\":1}}],[\"gmqtt\",{\"1\":{\"145\":1}}],[\"gws\",{\"1\":{\"332\":1}}],[\"gc移动变量后\",{\"1\":{\"1443\":1}}],[\"gc会去更新指针引用的旧地址\",{\"1\":{\"1443\":1}}],[\"gc++lang\",{\"1\":{\"1407\":1}}],[\"gclang\",{\"1\":{\"1407\":1}}],[\"gc中的根对象是什么\",{\"1\":{\"563\":1,\"635\":2}}],[\"gc扫描是并发的吗\",{\"1\":{\"563\":1,\"635\":2}}],[\"gc\",{\"1\":{\"553\":1,\"588\":1,\"606\":1,\"629\":1,\"633\":7,\"635\":4,\"638\":2,\"660\":1,\"678\":1}}],[\"gc的控制方式\",{\"1\":{\"553\":1}}],[\"gc原理\",{\"0\":{\"550\":1}}],[\"gcflags即编译器gc的参数\",{\"1\":{\"317\":1}}],[\"gcflags=\",{\"1\":{\"317\":2,\"318\":1,\"319\":1,\"320\":2,\"549\":1}}],[\"gcc\",{\"1\":{\"304\":1,\"312\":2,\"313\":1,\"964\":1,\"1112\":1,\"1132\":2,\"1173\":2,\"1184\":3}}],[\"gcache\",{\"1\":{\"122\":1}}],[\"g\",{\"1\":{\"221\":2,\"339\":1,\"400\":1,\"541\":1,\"635\":4,\"651\":1,\"654\":1,\"813\":2,\"822\":3,\"825\":3,\"934\":1,\"1225\":1,\"1228\":1,\"1260\":2,\"1261\":3,\"1262\":4,\"1264\":2,\"1265\":8,\"1266\":9,\"1390\":4,\"1392\":1,\"1402\":4,\"1404\":1}}],[\"gnxi\",{\"1\":{\"145\":1}}],[\"gnet是一个高性能的\",{\"1\":{\"145\":1}}],[\"gnet\",{\"1\":{\"145\":1}}],[\"gjson\",{\"1\":{\"141\":1}}],[\"gjo\",{\"1\":{\"141\":1}}],[\"gd库的go绑定\",{\"1\":{\"139\":1}}],[\"gd\",{\"1\":{\"139\":1}}],[\"gg\",{\"1\":{\"139\":1,\"934\":1}}],[\"gt=10\",{\"1\":{\"1289\":1}}],[\"gt\",{\"1\":{\"759\":1,\"1412\":3,\"1420\":2}}],[\"gte=0\",{\"1\":{\"1281\":1,\"1283\":1}}],[\"gte\",{\"1\":{\"724\":5,\"759\":1}}],[\"gtk3的绑定\",{\"1\":{\"138\":1}}],[\"gtk的绑定\",{\"1\":{\"138\":1}}],[\"gtk\",{\"1\":{\"138\":1}}],[\"gtfs\",{\"1\":{\"132\":1}}],[\"gpg\",{\"1\":{\"1222\":2}}],[\"gpgkey=https\",{\"1\":{\"1222\":1}}],[\"gpgcheck=1\",{\"1\":{\"1222\":2}}],[\"gpu\",{\"1\":{\"1068\":1}}],[\"gpool\",{\"1\":{\"137\":1}}],[\"gpy\",{\"1\":{\"122\":1}}],[\"game\",{\"1\":{\"728\":1,\"729\":3}}],[\"gateway=192\",{\"1\":{\"1219\":1}}],[\"gateway\",{\"1\":{\"1071\":1,\"1072\":1,\"1078\":3,\"1197\":4}}],[\"gathering\",{\"1\":{\"477\":6}}],[\"gatt\",{\"1\":{\"140\":1}}],[\"garbage\",{\"1\":{\"328\":1}}],[\"garageengine\",{\"1\":{\"134\":1}}],[\"galib\",{\"1\":{\"142\":1}}],[\"gaad\",{\"1\":{\"126\":1}}],[\"gstreamer的绑定\",{\"1\":{\"146\":1}}],[\"gst\",{\"1\":{\"146\":1}}],[\"gs\",{\"1\":{\"132\":1}}],[\"gse\",{\"1\":{\"122\":1,\"144\":1}}],[\"gval\",{\"1\":{\"130\":1}}],[\"ge\",{\"1\":{\"1420\":2}}],[\"gezhonglei2007\",{\"1\":{\"523\":1}}],[\"gerrand\",{\"1\":{\"388\":1}}],[\"gender\",{\"1\":{\"1321\":6}}],[\"gen\",{\"1\":{\"475\":1,\"476\":3,\"1219\":1}}],[\"genericity\",{\"1\":{\"345\":1}}],[\"generictype\",{\"1\":{\"339\":2}}],[\"genericstruct\",{\"1\":{\"338\":3,\"339\":2,\"516\":2}}],[\"genericslice\",{\"1\":{\"338\":2}}],[\"genericmap\",{\"1\":{\"338\":3}}],[\"generated\",{\"1\":{\"1003\":1,\"1004\":3}}],[\"generate\",{\"1\":{\"454\":1}}],[\"generating\",{\"1\":{\"326\":1}}],[\"general\",{\"1\":{\"289\":1}}],[\"gentee\",{\"1\":{\"130\":1}}],[\"gev是基于reactor模式的轻量级\",{\"1\":{\"145\":1}}],[\"gev\",{\"1\":{\"145\":1,\"332\":1}}],[\"geo地理位置\",{\"0\":{\"976\":1}}],[\"geo\",{\"0\":{\"730\":1,\"731\":1},\"1\":{\"730\":2,\"745\":1}}],[\"geomean\",{\"1\":{\"476\":3}}],[\"geometry\",{\"1\":{\"135\":1}}],[\"geopattern\",{\"1\":{\"139\":1}}],[\"geoserver是go软件包\",{\"1\":{\"135\":1}}],[\"geoserver\",{\"1\":{\"135\":1}}],[\"geocache\",{\"1\":{\"135\":1}}],[\"geoindex\",{\"1\":{\"127\":1}}],[\"get示例\",{\"0\":{\"1330\":1}}],[\"getheader\",{\"1\":{\"1282\":1,\"1283\":1}}],[\"getuser\",{\"1\":{\"1280\":2}}],[\"getusers\",{\"1\":{\"873\":1}}],[\"getxxx\",{\"1\":{\"1278\":1}}],[\"getting\",{\"1\":{\"1277\":1}}],[\"getter\",{\"1\":{\"145\":1,\"170\":1}}],[\"getrequesturl\",{\"1\":{\"1166\":3}}],[\"getremoteport\",{\"1\":{\"1166\":3}}],[\"getrange\",{\"1\":{\"970\":1}}],[\"getlogwriter\",{\"1\":{\"1307\":1}}],[\"getlocalport\",{\"1\":{\"1166\":3}}],[\"getlang\",{\"1\":{\"144\":1}}],[\"getipaddr\",{\"1\":{\"1166\":3}}],[\"getindexes\",{\"1\":{\"862\":1}}],[\"getmapping\",{\"1\":{\"1166\":4}}],[\"get请求中name的值\",{\"1\":{\"1133\":1}}],[\"getbit\",{\"1\":{\"970\":1}}],[\"getbyid\",{\"1\":{\"884\":2}}],[\"getcollectionnames\",{\"1\":{\"857\":1}}],[\"getcustomdict\",{\"1\":{\"743\":1}}],[\"getname\",{\"1\":{\"856\":1}}],[\"get1\",{\"1\":{\"754\":6}}],[\"getarticlebyid\",{\"1\":{\"754\":2}}],[\"get和post的区别\",{\"1\":{\"566\":1,\"638\":2}}],[\"getserverport\",{\"1\":{\"1166\":3}}],[\"getset\",{\"1\":{\"970\":1}}],[\"gets\",{\"1\":{\"470\":1}}],[\"get命令首先会将依赖包下载到本地的缓存目录中\",{\"1\":{\"460\":1}}],[\"get命令来删除该依赖\",{\"1\":{\"453\":1}}],[\"get命令\",{\"1\":{\"453\":1}}],[\"get引用库\",{\"1\":{\"450\":1}}],[\"getperson函数中创建了mom变量\",{\"1\":{\"317\":1}}],[\"getperson\",{\"1\":{\"317\":2}}],[\"get\",{\"1\":{\"84\":1,\"285\":2,\"302\":2,\"369\":2,\"434\":2,\"435\":3,\"448\":1,\"450\":1,\"453\":4,\"459\":3,\"460\":1,\"611\":1,\"638\":3,\"683\":1,\"705\":5,\"710\":4,\"724\":2,\"729\":1,\"730\":1,\"732\":1,\"733\":1,\"744\":1,\"754\":1,\"829\":1,\"878\":2,\"890\":2,\"893\":1,\"909\":2,\"910\":1,\"916\":2,\"917\":1,\"923\":1,\"925\":2,\"968\":3,\"970\":1,\"993\":1,\"1047\":1,\"1087\":1,\"1092\":1,\"1133\":1,\"1164\":10,\"1165\":2,\"1228\":1,\"1231\":5,\"1235\":1,\"1243\":1,\"1274\":1,\"1275\":1,\"1277\":1,\"1278\":1,\"1280\":6,\"1282\":2,\"1286\":4,\"1289\":1,\"1300\":1,\"1304\":1,\"1307\":1,\"1313\":1,\"1321\":1,\"1330\":1,\"1333\":1,\"1334\":1}}],[\"glueoutputbuf\",{\"1\":{\"965\":1}}],[\"gltf\",{\"1\":{\"139\":1}}],[\"glog\",{\"1\":{\"1047\":5}}],[\"glop\",{\"1\":{\"134\":2}}],[\"glow\",{\"1\":{\"128\":1}}],[\"global\",{\"1\":{\"55\":2,\"813\":4,\"820\":1,\"825\":1,\"881\":2,\"882\":2,\"883\":2,\"884\":3,\"1194\":3,\"1195\":2,\"1303\":2}}],[\"gleam\",{\"1\":{\"128\":1}}],[\"gls\",{\"1\":{\"122\":1}}],[\"greeting\",{\"1\":{\"651\":4}}],[\"greet\",{\"1\":{\"651\":1}}],[\"greater\",{\"1\":{\"344\":1}}],[\"grep\",{\"1\":{\"297\":1,\"453\":1,\"1010\":1,\"1126\":2,\"1130\":1,\"1131\":1}}],[\"grow函数就是一个闭包函数\",{\"1\":{\"282\":1}}],[\"grow函数引用了exp函数的两个变量\",{\"1\":{\"282\":1}}],[\"grow\",{\"1\":{\"282\":2}}],[\"groupid\",{\"1\":{\"1047\":2}}],[\"group=root\",{\"1\":{\"1032\":1}}],[\"group\",{\"1\":{\"266\":3,\"728\":2,\"729\":1,\"796\":2,\"814\":2,\"1020\":1,\"1029\":1,\"1047\":2,\"1087\":2,\"1194\":5,\"1195\":5}}],[\"grokify\",{\"1\":{\"122\":1}}],[\"grafana\",{\"1\":{\"637\":1}}],[\"grades\",{\"1\":{\"880\":2,\"884\":2}}],[\"grade\",{\"1\":{\"513\":1}}],[\"graphql\",{\"1\":{\"637\":1}}],[\"graph了解更多\",{\"1\":{\"327\":1}}],[\"graph\",{\"1\":{\"326\":4,\"327\":2,\"456\":1}}],[\"graval\",{\"1\":{\"145\":1}}],[\"grab\",{\"1\":{\"145\":1}}],[\"gram的文本分类\",{\"1\":{\"144\":1}}],[\"grpool\",{\"1\":{\"122\":1,\"137\":1}}],[\"grpc的流控是如何处理的\",{\"1\":{\"620\":1,\"692\":1}}],[\"grpc的go语言实现\",{\"1\":{\"128\":1}}],[\"grpc中的deadline和timeout\",{\"1\":{\"620\":1,\"692\":1}}],[\"grpc中\",{\"1\":{\"620\":1,\"692\":1}}],[\"grpc互相调用\",{\"1\":{\"620\":1,\"692\":1}}],[\"grpc相比http的优势在什么地方呢\",{\"1\":{\"565\":1,\"637\":2}}],[\"grpc电子商务微服务\",{\"1\":{\"128\":1}}],[\"grpc\",{\"0\":{\"91\":1},\"1\":{\"111\":1,\"128\":1,\"145\":1,\"269\":1,\"637\":5}}],[\"girl\",{\"1\":{\"1399\":2}}],[\"gil\",{\"1\":{\"645\":1}}],[\"gim\",{\"1\":{\"331\":1}}],[\"gis数据\",{\"1\":{\"135\":1}}],[\"gismanager\",{\"1\":{\"135\":1}}],[\"gisp\",{\"1\":{\"130\":1}}],[\"gif|png|bmp|jpg|jpeg\",{\"1\":{\"1143\":1}}],[\"gif等等\",{\"1\":{\"326\":1}}],[\"gift\",{\"1\":{\"139\":1}}],[\"gif\",{\"1\":{\"124\":1}}],[\"gin对于参数验证其实是使用验证组件\",{\"1\":{\"1289\":1}}],[\"gin中的参数解析中\",{\"1\":{\"1279\":1}}],[\"gin支持restful风格的api\",{\"1\":{\"1278\":1}}],[\"gin路由系统基于\",{\"1\":{\"1284\":1}}],[\"gin路由的底层实现\",{\"0\":{\"1284\":1}}],[\"gin路由\",{\"0\":{\"1276\":1}}],[\"gin是一个golang的微框架\",{\"1\":{\"1273\":1}}],[\"gin的原理\",{\"0\":{\"1293\":1}}],[\"gin的依赖相对很少\",{\"1\":{\"1272\":1}}],[\"gin的轻量级高性能web框架\",{\"1\":{\"1272\":1}}],[\"gin的模块名就是下载依赖时使用的地址\",{\"1\":{\"459\":1}}],[\"gin使用前缀树来组织路由的为此匹配效率是很高的\",{\"1\":{\"1287\":1}}],[\"gin使用\",{\"0\":{\"1271\":1}}],[\"gin两个引用的是同一个依赖但是本地存放的路径不同\",{\"1\":{\"459\":1}}],[\"gin和go\",{\"1\":{\"459\":1}}],[\"gin+gorm\",{\"1\":{\"110\":1}}],[\"gin\",{\"1\":{\"109\":1,\"111\":1,\"117\":1,\"118\":1,\"123\":3,\"158\":1,\"330\":3,\"453\":31,\"459\":9,\"1087\":5,\"1092\":4,\"1274\":4,\"1275\":5,\"1277\":5,\"1280\":4,\"1281\":7,\"1282\":3,\"1283\":5,\"1284\":2,\"1285\":1,\"1286\":5,\"1287\":2,\"1289\":3}}],[\"git的合并的命令\",{\"1\":{\"573\":1,\"645\":1}}],[\"git代码仓库导入项目\",{\"1\":{\"79\":1}}],[\"git账号密码\",{\"1\":{\"58\":1}}],[\"gittest\",{\"1\":{\"55\":1}}],[\"gitconfig文件中\",{\"1\":{\"55\":1}}],[\"gitlab让开发团队对他们的代码仓库拥有更多的控制\",{\"1\":{\"43\":1}}],[\"gitlab可以在上面搭建私人的免费仓库\",{\"1\":{\"43\":1}}],[\"gitlab\",{\"1\":{\"43\":3,\"637\":1}}],[\"gitee\",{\"0\":{\"54\":1},\"1\":{\"43\":3,\"53\":1,\"54\":1,\"55\":1,\"84\":1}}],[\"githubusercontent\",{\"1\":{\"1229\":1,\"1231\":1}}],[\"github下载nginx⼀致性hash负载均衡模块\",{\"1\":{\"1165\":1}}],[\"github文档\",{\"1\":{\"1073\":1}}],[\"github获取redis安装包\",{\"1\":{\"963\":1}}],[\"github有账号吗\",{\"1\":{\"599\":1,\"671\":1}}],[\"github地址\",{\"1\":{\"72\":1,\"76\":1}}],[\"github如果使用私有仓库是需要付费的\",{\"1\":{\"43\":1}}],[\"github\",{\"1\":{\"43\":4,\"111\":1,\"122\":66,\"123\":4,\"325\":1,\"345\":1,\"393\":2,\"443\":1,\"445\":4,\"446\":2,\"447\":1,\"448\":3,\"449\":1,\"450\":5,\"453\":42,\"454\":12,\"457\":2,\"459\":26,\"460\":5,\"462\":2,\"463\":3,\"465\":1,\"637\":1,\"701\":2,\"740\":3,\"744\":3,\"746\":1,\"756\":1,\"771\":1,\"828\":2,\"831\":1,\"832\":1,\"835\":1,\"836\":1,\"837\":1,\"838\":1,\"878\":1,\"890\":2,\"908\":1,\"909\":2,\"910\":1,\"964\":1,\"1035\":1,\"1036\":1,\"1037\":1,\"1046\":2,\"1047\":5,\"1073\":2,\"1087\":1,\"1092\":1,\"1165\":1,\"1223\":1,\"1231\":1,\"1243\":1,\"1245\":1,\"1274\":2,\"1275\":1,\"1277\":2,\"1299\":1,\"1304\":1,\"1307\":1,\"1313\":1,\"1321\":2,\"1373\":2}}],[\"github网站上线了\",{\"1\":{\"12\":1}}],[\"gitblit\",{\"1\":{\"42\":1}}],[\"gitignore\",{\"1\":{\"28\":1}}],[\"git工作目录下的文件存在两种状态\",{\"1\":{\"22\":1}}],[\"git提交\",{\"1\":{\"20\":1}}],[\"git和svn的区别\",{\"1\":{\"12\":1}}],[\"git是分布式版本控制系统\",{\"1\":{\"12\":1}}],[\"git\",{\"0\":{\"12\":1,\"13\":1,\"14\":1,\"15\":1},\"1\":{\"9\":1,\"12\":3,\"13\":1,\"14\":1,\"17\":1,\"18\":2,\"48\":1,\"52\":1,\"55\":18,\"56\":3,\"57\":2,\"58\":25,\"84\":2,\"443\":1,\"445\":3,\"449\":12,\"573\":2,\"645\":2}}],[\"gkd\",{\"1\":{\"72\":1}}],[\"go通过两对花括号\",{\"1\":{\"1417\":1}}],[\"go天然支持utf8字符\",{\"1\":{\"1394\":1}}],[\"go还提供了很多函数用于dns查询\",{\"1\":{\"1373\":1}}],[\"go提供了四个函数来解析网络地址\",{\"1\":{\"1366\":1}}],[\"go比较好用的解析xml文件的插件etree\",{\"1\":{\"1312\":1}}],[\"go同样的也支持这些数据格式的相关的操作\",{\"1\":{\"1309\":1}}],[\"go源代码抽象语法树映射的包\",{\"1\":{\"1308\":1}}],[\"go源代码里if\",{\"1\":{\"388\":1}}],[\"go等\",{\"1\":{\"1017\":1}}],[\"go整合mongodb\",{\"0\":{\"878\":1}}],[\"go是一门非常优秀的语音\",{\"1\":{\"746\":1}}],[\"go是一个静态强类型语言\",{\"1\":{\"381\":1}}],[\"go是一个典型的静态类型语言\",{\"1\":{\"380\":1}}],[\"goes\",{\"1\":{\"745\":1,\"746\":1,\"748\":1,\"751\":1,\"754\":1}}],[\"goexit\",{\"1\":{\"393\":1}}],[\"go如何操作es\",{\"0\":{\"744\":1}}],[\"go调度器会尝试从其他p的队列中偷取goroutine来执行\",{\"1\":{\"654\":1}}],[\"go调度器会自动选择一个m与p组合来运行goroutine\",{\"1\":{\"654\":1}}],[\"go调用c是为了利用c的生态和性能\",{\"1\":{\"300\":1}}],[\"go运行时的线程池负责管理操作系统的线程\",{\"1\":{\"654\":1}}],[\"go运行时的执行上下文\",{\"1\":{\"651\":1}}],[\"go运行时根据p的数量来决定运行多少个goroutine\",{\"1\":{\"651\":1}}],[\"go运行时函数替换\",{\"1\":{\"122\":1}}],[\"go没有原生支持默认参数或可选参数\",{\"1\":{\"651\":1}}],[\"go没有传统的继承机制\",{\"1\":{\"651\":1}}],[\"go可以处理不同类型的对象\",{\"1\":{\"651\":1}}],[\"go可能不太适合处理\",{\"1\":{\"296\":1}}],[\"go后端开发\",{\"0\":{\"623\":1,\"695\":1}}],[\"go垃圾回收\",{\"1\":{\"621\":1,\"693\":1}}],[\"go两个goroutine交替打印1\",{\"1\":{\"601\":1,\"673\":1}}],[\"go开发\",{\"0\":{\"615\":1,\"687\":1}}],[\"go开发几年\",{\"1\":{\"580\":1,\"652\":1}}],[\"go开发需要注意什么\",{\"1\":{\"521\":1}}],[\"go性能优化方式\",{\"1\":{\"579\":1,\"651\":1}}],[\"go生成一个协程\",{\"1\":{\"579\":1,\"651\":1}}],[\"go原生支持默认参数或可选参数吗\",{\"1\":{\"579\":1,\"651\":2}}],[\"go里的sort排序如何实现\",{\"1\":{\"577\":1,\"649\":2}}],[\"go里并发读写map会出现问题\",{\"1\":{\"577\":1,\"649\":2}}],[\"go里面了解到更多内容\",{\"1\":{\"317\":1}}],[\"go和mysql\",{\"0\":{\"577\":1,\"649\":1}}],[\"go用interface实现有这种问题吗\",{\"1\":{\"565\":1,\"637\":2}}],[\"go哪些内置类型是并发安全的\",{\"1\":{\"563\":1,\"635\":2}}],[\"go编译时候会自动处理内存对齐\",{\"1\":{\"554\":1}}],[\"go编译会自动内存对齐\",{\"1\":{\"554\":1}}],[\"go编译器会自动根据规则进行内存对齐但不进行优化\",{\"1\":{\"554\":1}}],[\"go编译器会自动执行并标记哪些变量需要逃逸到堆上\",{\"1\":{\"549\":1}}],[\"go编译器有内制动额逃逸分析器\",{\"1\":{\"549\":1}}],[\"gogc表示触发频率\",{\"1\":{\"553\":1}}],[\"goga\",{\"1\":{\"142\":1}}],[\"go经典一句话\",{\"1\":{\"535\":1}}],[\"go直接全部要求分配内存时要内存对齐\",{\"1\":{\"513\":1}}],[\"goarh代表的是cpu架构\",{\"1\":{\"475\":1}}],[\"goarch\",{\"1\":{\"475\":1,\"476\":3,\"498\":1}}],[\"goav\",{\"1\":{\"146\":1}}],[\"go就会缓存测试结果\",{\"1\":{\"468\":1}}],[\"go就会使用本地的hello模块\",{\"1\":{\"462\":1}}],[\"go代码如下\",{\"1\":{\"468\":2}}],[\"go结尾\",{\"1\":{\"467\":1,\"475\":1}}],[\"go结构体字段的内存分布遵循内存对齐的规则\",{\"1\":{\"273\":1}}],[\"goinsecure\",{\"1\":{\"461\":1}}],[\"goimghdr\",{\"1\":{\"139\":1}}],[\"goimagehash\",{\"1\":{\"139\":1}}],[\"go从头到尾都做了些什么事\",{\"1\":{\"460\":1}}],[\"go并不会再次执行已经成功通过的测试用例\",{\"1\":{\"468\":1}}],[\"go并不会直接把大写字母当作存放路径\",{\"1\":{\"459\":1}}],[\"go并非是一个传统oop的语言\",{\"1\":{\"266\":1}}],[\"go最终会选择的版本是a1\",{\"1\":{\"458\":1}}],[\"go官方并没有提供对于yml的支持\",{\"1\":{\"1313\":1}}],[\"go官方有专门的依赖查询网站\",{\"1\":{\"452\":1}}],[\"go官方提供了一个格式化工具gofmt\",{\"1\":{\"188\":1}}],[\"go虽然没有像maven\",{\"1\":{\"451\":1}}],[\"go发行版本已经到了1\",{\"1\":{\"442\":1}}],[\"go标准库sync\",{\"1\":{\"438\":1}}],[\"goos代表是运行的操作系统\",{\"1\":{\"475\":1}}],[\"goos\",{\"1\":{\"475\":1,\"476\":3,\"498\":1}}],[\"goods\",{\"1\":{\"1081\":2,\"1082\":4,\"1086\":2,\"1087\":5,\"1092\":1}}],[\"good\",{\"1\":{\"470\":1,\"477\":4}}],[\"goodbye\",{\"1\":{\"436\":2,\"468\":3,\"470\":3}}],[\"googlebot|bingbot|feedfetcher\",{\"1\":{\"1151\":1}}],[\"googlesource\",{\"1\":{\"345\":1}}],[\"google\",{\"1\":{\"148\":1,\"325\":1,\"453\":2,\"454\":1,\"459\":1,\"460\":2,\"655\":1,\"1151\":1,\"1223\":1,\"1225\":1,\"1427\":1,\"1428\":2}}],[\"google的\",{\"1\":{\"128\":1}}],[\"go所提供的锁都是非递归锁\",{\"1\":{\"429\":1}}],[\"go使用了两种很形象的操作符来表示读写操作\",{\"1\":{\"415\":1}}],[\"go对于管道的作用如下解释\",{\"1\":{\"413\":1}}],[\"go关键字表示了当前编写当前项目所用到的go版本\",{\"1\":{\"459\":1}}],[\"go关键字后面必须是一个函数调用\",{\"1\":{\"412\":1}}],[\"go关于接口的发展历史有一个分水岭\",{\"1\":{\"289\":1}}],[\"go111module=on\",{\"1\":{\"444\":1}}],[\"go111module\",{\"1\":{\"444\":1}}],[\"go1\",{\"1\":{\"393\":2}}],[\"go创始人希望能够将错误可控\",{\"1\":{\"388\":1}}],[\"go为什么要把类型声明放在后面而不是前面\",{\"1\":{\"382\":1}}],[\"go内部使用reflect\",{\"1\":{\"351\":1}}],[\"go团队既想加入泛型又不想太拖累编译速度\",{\"1\":{\"345\":1}}],[\"go团队认为大多数情况下map的使用并不涉及高并发的场景\",{\"1\":{\"266\":1}}],[\"govm\",{\"1\":{\"335\":1}}],[\"govatar\",{\"1\":{\"139\":1}}],[\"go非常适合用于命令行cli工具开发\",{\"1\":{\"335\":1}}],[\"gozero\",{\"1\":{\"330\":1}}],[\"go默认提供\",{\"1\":{\"528\":1}}],[\"go默认集成该工具\",{\"1\":{\"325\":1}}],[\"go默认使用tab也就是制表符进行缩进\",{\"1\":{\"190\":1}}],[\"go与c的浮点数类型映射如下\",{\"1\":{\"305\":1}}],[\"go与c之间的整数映射关系如下表所示\",{\"1\":{\"304\":1}}],[\"go看到一些相关信息\",{\"1\":{\"304\":1}}],[\"go引入c文件\",{\"0\":{\"299\":1}}],[\"go嵌入c代码\",{\"0\":{\"298\":1}}],[\"go负责处理上层逻辑\",{\"1\":{\"296\":1}}],[\"go在处理网络io的时候非常的简洁高效\",{\"1\":{\"1365\":1}}],[\"go在测试这一方面提供了非常简便实用的命令行工具go\",{\"1\":{\"466\":1}}],[\"go在依赖版本选择时\",{\"1\":{\"458\":1}}],[\"go在许多层面的设计都是为了可读性而服务的\",{\"1\":{\"382\":1}}],[\"go在运行时将接口分为了两大类\",{\"1\":{\"347\":1}}],[\"go在网络编程这块也有非常多的应用\",{\"1\":{\"332\":1}}],[\"go在1\",{\"1\":{\"289\":1}}],[\"go在进行多个变量赋值运算时\",{\"1\":{\"208\":1}}],[\"go会根据每个类型大小确定对齐方式\",{\"1\":{\"554\":1}}],[\"go会根据go\",{\"1\":{\"460\":1}}],[\"go会将test目录下的所有测试文件重新编译后\",{\"1\":{\"468\":1}}],[\"go会将其解释为\",{\"1\":{\"287\":1}}],[\"go会将其解引用\",{\"1\":{\"286\":1}}],[\"go会忽略名为testdata的包\",{\"1\":{\"467\":1}}],[\"go会直接将本地计算得到的哈希值写入go\",{\"1\":{\"460\":1}}],[\"go会计算压缩包和go\",{\"1\":{\"460\":1}}],[\"go会自动的插入指针运算符来进行调用\",{\"1\":{\"287\":1}}],[\"go不支持函数方法的重载\",{\"1\":{\"513\":1}}],[\"go不会等到最后才去调用sum函数\",{\"1\":{\"285\":1}}],[\"go不存在构造方法\",{\"1\":{\"268\":1}}],[\"go允许函数有多个返回值\",{\"1\":{\"280\":1}}],[\"go保留了指针\",{\"1\":{\"274\":1}}],[\"go抛弃了类与继承\",{\"1\":{\"266\":1}}],[\"go抛弃了while语句\",{\"1\":{\"232\":1}}],[\"go了解的多不多\",{\"1\":{\"566\":1,\"638\":2}}],[\"go了解\",{\"1\":{\"258\":1}}],[\"go字符串是明确支持utf8的\",{\"1\":{\"258\":1}}],[\"go有两个内置的函数print\",{\"1\":{\"218\":1}}],[\"go也对此提供了支持\",{\"1\":{\"412\":1}}],[\"go也不是第一个支持协程的语言\",{\"1\":{\"412\":1}}],[\"go也不支持直接将其转换为字符串\",{\"1\":{\"213\":1}}],[\"go也支持具名返回值\",{\"1\":{\"280\":1}}],[\"go也支持增强赋值运算符\",{\"1\":{\"179\":1}}],[\"go才终于将这两个内置函数用泛型重写\",{\"1\":{\"209\":1}}],[\"go语言内存对齐详解\",{\"1\":{\"1442\":1}}],[\"go语言内置的flag包实现了命令行参数的解析\",{\"1\":{\"1322\":1}}],[\"go语言标准库log包实现了简单的日志\",{\"1\":{\"1339\":1}}],[\"go语言标准库中的net\",{\"1\":{\"1329\":1}}],[\"go语言格式化包\",{\"1\":{\"1308\":1}}],[\"go语言的net标准库是一个非常强大的库\",{\"1\":{\"1365\":1}}],[\"go语言的标准库非常的丰富\",{\"1\":{\"1308\":1}}],[\"go语言的调度模型是基于goroutine\",{\"1\":{\"654\":1}}],[\"go语言的map\",{\"1\":{\"603\":1,\"675\":1}}],[\"go语言的掌握程度\",{\"1\":{\"603\":1,\"675\":1}}],[\"go语言的特性\",{\"1\":{\"521\":1}}],[\"go语言对于并发的支持是纯天然的\",{\"1\":{\"411\":1}}],[\"go语言提供文件处理的标准库大致以下几个\",{\"1\":{\"399\":1}}],[\"go语言并没有异常\",{\"1\":{\"388\":1}}],[\"go语言没有为枚举单独设计一个数据类型\",{\"1\":{\"213\":1}}],[\"go语言中的值类型和引用类型\",{\"0\":{\"527\":1}}],[\"go语言中不存在隐式类型转换\",{\"1\":{\"209\":1}}],[\"go语言中没有自增与自减运算符\",{\"1\":{\"179\":1}}],[\"go语言中没有选择将~作为取反运算符\",{\"1\":{\"179\":1}}],[\"go语言字符串完全兼容utf\",{\"1\":{\"200\":1}}],[\"go支持单行注释和多行注释\",{\"1\":{\"177\":1}}],[\"go文件分别创建两个函数进行两种方式的字符串拼接\",{\"1\":{\"475\":1}}],[\"go文件如下代码\",{\"1\":{\"453\":1}}],[\"go文件的代码\",{\"1\":{\"390\":1}}],[\"go文件内容\",{\"1\":{\"313\":1}}],[\"go文件\",{\"1\":{\"173\":1,\"471\":1,\"475\":1}}],[\"go简介\",{\"0\":{\"148\":1}}],[\"go客户端提供了一个mqtt客户端库\",{\"1\":{\"145\":1}}],[\"go软件包\",{\"1\":{\"144\":1}}],[\"gounidecode\",{\"1\":{\"144\":1}}],[\"go2vec\",{\"1\":{\"144\":1}}],[\"goxlsxwriter\",{\"1\":{\"143\":1}}],[\"gomongodbpro\",{\"1\":{\"884\":2}}],[\"gomodcache\",{\"1\":{\"457\":2}}],[\"gomodcache=你的模块缓存路径\",{\"1\":{\"457\":1}}],[\"gomaxprocs\",{\"1\":{\"498\":2,\"542\":1,\"654\":1}}],[\"goml\",{\"1\":{\"142\":1}}],[\"gomind\",{\"1\":{\"142\":1}}],[\"gojieba\",{\"1\":{\"144\":1}}],[\"gojson\",{\"1\":{\"141\":1}}],[\"gojq\",{\"1\":{\"141\":1}}],[\"go感知图像哈希包\",{\"1\":{\"139\":1}}],[\"go本机跨平台gui系统自动化\",{\"1\":{\"138\":1}}],[\"got\",{\"1\":{\"446\":1,\"494\":3,\"502\":1,\"766\":7,\"825\":1}}],[\"goto将控制权传递给在同一函数中对应标签的语句\",{\"1\":{\"232\":1}}],[\"goto\",{\"0\":{\"232\":1},\"1\":{\"178\":1,\"232\":1,\"1164\":4}}],[\"gotokenizer\",{\"1\":{\"144\":1}}],[\"gotcp\",{\"1\":{\"145\":1}}],[\"gotk3\",{\"1\":{\"138\":1}}],[\"gota\",{\"1\":{\"127\":1}}],[\"gowd\",{\"1\":{\"138\":1}}],[\"gowp是并发限制goroutine池\",{\"1\":{\"137\":1}}],[\"gowp\",{\"1\":{\"137\":1}}],[\"goworker是一个简单的go异步工作池\",{\"1\":{\"137\":1}}],[\"goworker是基于go的后台工作者\",{\"1\":{\"137\":1}}],[\"goworker\",{\"1\":{\"137\":1}}],[\"goworld\",{\"1\":{\"134\":1,\"333\":1}}],[\"gohive\",{\"1\":{\"137\":1}}],[\"gohbase\",{\"1\":{\"122\":1}}],[\"go游戏引擎\",{\"1\":{\"134\":1}}],[\"gonosumdb\",{\"1\":{\"461\":1}}],[\"gonoproxy\",{\"1\":{\"461\":1}}],[\"gonet\",{\"1\":{\"134\":1,\"333\":1}}],[\"gonic\",{\"1\":{\"123\":1,\"453\":10,\"459\":5,\"1087\":1,\"1092\":1,\"1274\":2,\"1275\":1,\"1277\":1}}],[\"go3d\",{\"1\":{\"134\":1}}],[\"go绑定的使用\",{\"1\":{\"142\":1}}],[\"go绑定\",{\"1\":{\"134\":1,\"138\":1}}],[\"go包\",{\"1\":{\"134\":1,\"141\":1}}],[\"go包实现bloom过滤器\",{\"1\":{\"127\":1}}],[\"go包实现了用于轻松处理各种数据类型的缓冲区\",{\"1\":{\"127\":1}}],[\"goproject\",{\"1\":{\"1321\":1,\"1328\":9}}],[\"goproxy=https\",{\"1\":{\"451\":1}}],[\"goproxy\",{\"1\":{\"332\":1,\"451\":3,\"461\":1}}],[\"goprivate\",{\"1\":{\"461\":1}}],[\"gopkg\",{\"1\":{\"453\":2,\"459\":1,\"460\":1,\"1307\":2}}],[\"gopcap\",{\"1\":{\"145\":1}}],[\"gopacket\",{\"1\":{\"145\":1}}],[\"goptuna\",{\"1\":{\"142\":1}}],[\"gopher接口\",{\"1\":{\"201\":1}}],[\"gopher结构体\",{\"1\":{\"201\":1}}],[\"gopherjs\",{\"1\":{\"136\":1}}],[\"gopher\",{\"1\":{\"130\":1,\"201\":2}}],[\"gopsutil\",{\"1\":{\"122\":1}}],[\"gold\",{\"1\":{\"1039\":1}}],[\"goleran\",{\"1\":{\"326\":1,\"393\":2}}],[\"golearn\",{\"1\":{\"142\":1,\"317\":1,\"318\":1,\"319\":1,\"320\":2,\"326\":1,\"393\":2,\"453\":2,\"459\":2,\"468\":6,\"470\":2,\"471\":4,\"472\":1,\"473\":4,\"475\":3,\"476\":5,\"477\":6}}],[\"golibwireshark\",{\"1\":{\"145\":1}}],[\"golibstemmer\",{\"1\":{\"144\":1}}],[\"golinear\",{\"1\":{\"142\":1}}],[\"gollback\",{\"1\":{\"137\":1}}],[\"golua\",{\"1\":{\"130\":1}}],[\"golang协程与线程的区别\",{\"1\":{\"567\":1,\"639\":2}}],[\"golang开发新⼿常犯的50个错误\",{\"0\":{\"523\":1}}],[\"golang有个math\",{\"1\":{\"512\":1}}],[\"golang的map是基于哈希桶\",{\"1\":{\"512\":1}}],[\"golang的\",{\"1\":{\"145\":1}}],[\"golang的货币和货币格式\",{\"1\":{\"133\":1}}],[\"golang库用于读取和写入microsoft\",{\"1\":{\"143\":1}}],[\"golang神经网络\",{\"1\":{\"142\":1}}],[\"golang编写的遗传算法库\",{\"1\":{\"142\":1}}],[\"golang编码器\",{\"1\":{\"135\":1}}],[\"golang中的简单mdns\",{\"1\":{\"145\":1}}],[\"golang中的\",{\"1\":{\"141\":1}}],[\"golang中的osx睡眠\",{\"1\":{\"138\":1}}],[\"golang线程池实现\",{\"1\":{\"137\":1}}],[\"golang使用基于工作程序的分派的简单内存中作业队列\",{\"1\":{\"137\":1}}],[\"golang转换为cpp\",{\"1\":{\"136\":1}}],[\"golang软件包\",{\"1\":{\"129\":1}}],[\"golang\",{\"0\":{\"524\":1,\"602\":1,\"674\":1,\"771\":1,\"1461\":1},\"1\":{\"122\":2,\"127\":2,\"131\":1,\"141\":1,\"148\":1,\"451\":1,\"453\":14,\"454\":3,\"459\":17,\"460\":3,\"476\":1,\"502\":1,\"522\":2,\"524\":1,\"609\":1,\"636\":2,\"638\":1,\"656\":2,\"681\":1,\"758\":1,\"763\":2,\"765\":2,\"766\":2,\"828\":2,\"908\":2,\"1047\":2,\"1072\":1,\"1238\":1,\"1307\":2,\"1321\":2,\"1331\":1,\"1333\":1,\"1334\":1,\"1338\":2,\"1407\":6},\"2\":{\"105\":1,\"107\":1,\"147\":1,\"171\":1,\"194\":1,\"518\":1,\"559\":1,\"627\":1,\"631\":1,\"699\":1,\"715\":1,\"772\":1,\"1292\":1,\"1294\":1,\"1296\":1,\"1298\":1,\"1450\":1,\"1452\":1,\"1454\":1,\"1456\":1}}],[\"go库和应用程序的错误处理工具和最佳实践\",{\"1\":{\"131\":1}}],[\"go库\",{\"1\":{\"129\":1,\"139\":2,\"143\":1,\"145\":3}}],[\"go应用程序的可扩展\",{\"1\":{\"128\":1}}],[\"go中有许多操作都是这个包实现的\",{\"1\":{\"1308\":1}}],[\"go中通过\",{\"1\":{\"651\":1}}],[\"go中通过关键字chan来代表管道类型\",{\"1\":{\"413\":1}}],[\"go中map的数据结构\",{\"1\":{\"587\":1,\"659\":1}}],[\"go中使用关键字\",{\"1\":{\"514\":1}}],[\"go中很大一部分的并发相关的工具都是sync标准库提供的\",{\"1\":{\"433\":1}}],[\"go中读写互斥锁的实现是sync\",{\"1\":{\"431\":1}}],[\"go中sync包下的mutex与rwmutex提供了互斥锁与读写锁两种实现\",{\"1\":{\"429\":1}}],[\"go中也并没有try\",{\"1\":{\"388\":1}}],[\"go中所有反射相关的操作都是基于这两个类型\",{\"1\":{\"348\":1}}],[\"go中导入头文件\",{\"1\":{\"299\":1}}],[\"go中获取更加详细的信息\",{\"1\":{\"296\":1}}],[\"go中并没有提供类似的数据结构实现\",{\"1\":{\"265\":1}}],[\"go中为不同位数的整数分配了不同的类型\",{\"1\":{\"197\":1}}],[\"go中没有三元表达式\",{\"1\":{\"193\":1}}],[\"go中大部分间隔都是有意义的\",{\"1\":{\"191\":1}}],[\"go中可用的转义字符\",{\"1\":{\"185\":1}}],[\"go中约定\",{\"1\":{\"176\":1}}],[\"go中无法进行循环导入\",{\"1\":{\"175\":1}}],[\"go中进行导入的最基本单位是一个包\",{\"1\":{\"173\":1}}],[\"go中功能丰富的神经网络库\",{\"1\":{\"142\":1}}],[\"go中功能齐全的高性能多组raft库\",{\"1\":{\"128\":1}}],[\"go中死的简单2d游戏库\",{\"1\":{\"134\":1}}],[\"go中嵌入的perl\",{\"1\":{\"130\":1}}],[\"go中html邮件的内联样式\",{\"1\":{\"129\":1}}],[\"go中的\",{\"1\":{\"649\":1,\"651\":1}}],[\"go中的接口\",{\"1\":{\"637\":1}}],[\"go中的参数传递是值传递还是引用传递\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"go中的参数名可以不带名称\",{\"1\":{\"279\":1}}],[\"go中的examplewithdeadline测试函数\",{\"1\":{\"470\":1}}],[\"go中的sync\",{\"1\":{\"432\":1}}],[\"go中的s2几何库\",{\"1\":{\"135\":1}}],[\"go中的反射api是由标准库reflect包提供的\",{\"1\":{\"346\":1}}],[\"go中的指针引用c中的内存的话\",{\"1\":{\"310\":1}}],[\"go中的函数参数是传值传递\",{\"1\":{\"279\":1}}],[\"go中的函数声明方式通过func关键字来进行\",{\"1\":{\"187\":1}}],[\"go中的数组也是如此\",{\"1\":{\"276\":1}}],[\"go中的数组是值类型\",{\"1\":{\"238\":1}}],[\"go中的字符串本质上是一个结构体\",{\"1\":{\"303\":1}}],[\"go中的字符串就是一个只读的字节切片\",{\"1\":{\"258\":1}}],[\"go中的字符完全兼容utf8\",{\"1\":{\"184\":1}}],[\"go中的格式化输出功能基本上由fmt\",{\"1\":{\"221\":1}}],[\"go中的输入输出都离不开它们\",{\"1\":{\"215\":1}}],[\"go中的可比较类型有\",{\"1\":{\"209\":1}}],[\"go中的在线机器学习\",{\"1\":{\"142\":1}}],[\"go中的简单神经网络库\",{\"1\":{\"142\":1}}],[\"go中的简单lisp\",{\"1\":{\"130\":1}}],[\"go中的3d线条艺术渲染\",{\"1\":{\"139\":1}}],[\"go中的手工制作2d游戏库\",{\"1\":{\"134\":1}}],[\"go中的综合金融市场数据\",{\"1\":{\"133\":1}}],[\"go中的trie实现\",{\"1\":{\"127\":1}}],[\"go中的跳过列表实现\",{\"1\":{\"127\":2}}],[\"go中的音乐理论模型\",{\"1\":{\"126\":1}}],[\"go中的通用数据结构和算法\",{\"1\":{\"120\":2}}],[\"gofal\",{\"1\":{\"127\":1}}],[\"godotenv\",{\"1\":{\"878\":1}}],[\"godoc\",{\"1\":{\"122\":1,\"502\":1}}],[\"godebug=cgocheck=0\",{\"1\":{\"300\":1}}],[\"godist\",{\"1\":{\"142\":1}}],[\"gods\",{\"1\":{\"127\":1}}],[\"gocron\",{\"1\":{\"653\":1}}],[\"goccy\",{\"1\":{\"453\":2,\"459\":1}}],[\"gochat\",{\"1\":{\"331\":1}}],[\"gocv\",{\"1\":{\"139\":1}}],[\"goconcurrentqueue\",{\"1\":{\"127\":1}}],[\"gocache\",{\"1\":{\"127\":1}}],[\"go实现\",{\"1\":{\"127\":1}}],[\"go的诞生的时间是\",{\"1\":{\"1431\":1}}],[\"go的地址\",{\"1\":{\"1087\":1}}],[\"go的并发编程是基于goroutine的\",{\"1\":{\"654\":1}}],[\"go的\",{\"1\":{\"651\":1}}],[\"go的接口是隐式实现的\",{\"1\":{\"651\":1}}],[\"go的接口\",{\"1\":{\"637\":1,\"651\":1}}],[\"go的接口作用\",{\"1\":{\"579\":1,\"651\":2}}],[\"go的锁\",{\"1\":{\"595\":1,\"667\":1}}],[\"go的协程设置原理\",{\"1\":{\"595\":1,\"667\":1}}],[\"go的gc\",{\"1\":{\"563\":1,\"635\":2}}],[\"go的gc能够手动触发吗\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"go的结构体可以嵌套组合吗\",{\"1\":{\"563\":1,\"635\":2}}],[\"go的内存回收什么条件会触发\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"go的垃圾回收器通过分代收集来优化回收过程\",{\"1\":{\"553\":1}}],[\"go的数据类型是怎么样的\",{\"1\":{\"521\":1}}],[\"go的数据框\",{\"1\":{\"127\":1}}],[\"go的自动转换的行为\",{\"1\":{\"515\":1}}],[\"go的自然语言检测程序包\",{\"1\":{\"144\":1}}],[\"go的文化\",{\"1\":{\"470\":1}}],[\"go的文件系统抽象系统\",{\"1\":{\"132\":1}}],[\"go的错误处理的优点有几个\",{\"1\":{\"388\":1}}],[\"go的语法糖不能说很多\",{\"1\":{\"388\":1}}],[\"go的声明方式始终遵循名字在前面\",{\"1\":{\"382\":1}}],[\"go的一大特点就是编译速度非常快\",{\"1\":{\"345\":1}}],[\"go的理念便是\",{\"1\":{\"278\":1}}],[\"go的基本语法十分简单易懂\",{\"1\":{\"172\":1}}],[\"go的基于llvm的编译器\",{\"1\":{\"136\":1}}],[\"go的基于终端的游戏引擎\",{\"1\":{\"134\":1}}],[\"go的字幕格式支持\",{\"1\":{\"146\":1}}],[\"go的快速ip到cidr查找\",{\"1\":{\"145\":1}}],[\"go的雪球茎端口\",{\"1\":{\"144\":1}}],[\"go的unicode音译器\",{\"1\":{\"144\":1}}],[\"go的liblinear绑定\",{\"1\":{\"142\":1}}],[\"go的遗传算法库\",{\"1\":{\"142\":1}}],[\"go的裸露检测\",{\"1\":{\"139\":1}}],[\"go的头像生成器\",{\"1\":{\"139\":1}}],[\"go的osx桌面通知库\",{\"1\":{\"138\":1}}],[\"go的windows应用程序库工具包\",{\"1\":{\"138\":1}}],[\"go的平台本地gui库\",{\"1\":{\"138\":1}}],[\"go的qt绑定\",{\"1\":{\"138\":1}}],[\"go的高性能和易于使用的goroutine池\",{\"1\":{\"137\":1}}],[\"go的抽象文件存储\",{\"1\":{\"132\":1}}],[\"go的php绑定\",{\"1\":{\"130\":1}}],[\"go的duktape\",{\"1\":{\"130\":1}}],[\"go的有用的set集合实现\",{\"1\":{\"127\":1}}],[\"go的线程安全和非线程安全高性能集\",{\"1\":{\"127\":1}}],[\"go的小数api\",{\"1\":{\"127\":1}}],[\"go的整数压缩库\",{\"1\":{\"127\":1}}],[\"go的类似python的字典\",{\"1\":{\"127\":1}}],[\"go程序包\",{\"1\":{\"126\":1,\"127\":1}}],[\"gossip\",{\"1\":{\"1006\":1}}],[\"gosseract\",{\"1\":{\"142\":1}}],[\"goslice\",{\"1\":{\"306\":4}}],[\"goslaves\",{\"1\":{\"137\":1}}],[\"gostringn\",{\"1\":{\"303\":1}}],[\"gostring\",{\"1\":{\"303\":1}}],[\"gosocsvr\",{\"1\":{\"145\":1}}],[\"gosnmp\",{\"1\":{\"145\":1}}],[\"goshark\",{\"1\":{\"145\":1}}],[\"goscore\",{\"1\":{\"142\":1}}],[\"gosx\",{\"1\":{\"138\":1}}],[\"goskiplist\",{\"1\":{\"127\":1}}],[\"goset\",{\"1\":{\"127\":1}}],[\"gosamplerate\",{\"1\":{\"126\":1}}],[\"gosym\",{\"1\":{\"124\":1}}],[\"gobytes\",{\"1\":{\"303\":1}}],[\"gobgp\",{\"1\":{\"145\":1}}],[\"gobrain\",{\"1\":{\"142\":1}}],[\"gobot是机器人技术\",{\"1\":{\"140\":1}}],[\"gobot\",{\"1\":{\"140\":1}}],[\"gob\",{\"1\":{\"124\":1}}],[\"gorse\",{\"1\":{\"142\":1}}],[\"gorgonia\",{\"1\":{\"142\":1}}],[\"gorecommend\",{\"1\":{\"142\":1}}],[\"gorpc\",{\"1\":{\"128\":1}}],[\"goroutine+channel依次输出小猫小狗100次\",{\"1\":{\"595\":1,\"667\":1}}],[\"goroutine即协程\",{\"1\":{\"539\":1}}],[\"goroutineprofile\",{\"1\":{\"323\":1}}],[\"goroutine池\",{\"1\":{\"137\":1}}],[\"goroutine\",{\"0\":{\"539\":1},\"1\":{\"122\":1,\"151\":4,\"164\":1,\"323\":1,\"324\":1,\"327\":1,\"328\":1,\"633\":1,\"634\":6,\"635\":11,\"639\":1,\"649\":3,\"651\":4,\"654\":1}}],[\"goroutines\",{\"0\":{\"137\":1},\"1\":{\"120\":1,\"328\":1,\"420\":1,\"422\":1,\"546\":1}}],[\"gorilla\",{\"1\":{\"122\":6}}],[\"gorm\",{\"1\":{\"330\":1,\"460\":1,\"513\":1}}],[\"gormgithub\",{\"1\":{\"122\":1}}],[\"gorm实现原理\",{\"0\":{\"106\":1}}],[\"gorm使用\",{\"0\":{\"104\":1}}],[\"go\",{\"0\":{\"3\":1,\"149\":1,\"157\":1,\"163\":1,\"166\":1,\"167\":1,\"459\":1,\"460\":1,\"522\":1,\"525\":1,\"579\":1,\"651\":1,\"700\":1,\"716\":1,\"827\":1,\"889\":1,\"908\":1,\"1295\":1,\"1297\":1},\"1\":{\"109\":1,\"110\":1,\"111\":1,\"117\":1,\"118\":1,\"122\":31,\"123\":1,\"124\":1,\"126\":5,\"127\":7,\"128\":6,\"129\":6,\"130\":5,\"131\":2,\"132\":4,\"133\":4,\"134\":5,\"137\":6,\"138\":4,\"139\":5,\"141\":4,\"142\":10,\"143\":1,\"144\":7,\"145\":6,\"146\":4,\"148\":3,\"150\":2,\"151\":4,\"152\":2,\"153\":1,\"154\":1,\"155\":3,\"156\":1,\"157\":1,\"158\":3,\"159\":1,\"160\":2,\"161\":1,\"162\":1,\"164\":5,\"165\":6,\"166\":5,\"168\":4,\"169\":4,\"170\":5,\"176\":11,\"178\":1,\"249\":1,\"253\":1,\"266\":1,\"268\":2,\"273\":1,\"276\":1,\"296\":3,\"297\":4,\"299\":1,\"303\":14,\"304\":2,\"305\":1,\"312\":5,\"313\":1,\"314\":4,\"317\":14,\"318\":14,\"319\":6,\"320\":20,\"324\":1,\"326\":3,\"327\":4,\"328\":2,\"330\":3,\"335\":1,\"345\":1,\"388\":2,\"393\":5,\"396\":2,\"412\":9,\"416\":1,\"417\":3,\"418\":1,\"419\":1,\"420\":2,\"421\":9,\"422\":2,\"426\":1,\"427\":4,\"428\":1,\"429\":1,\"430\":1,\"431\":4,\"432\":4,\"434\":1,\"435\":1,\"436\":2,\"442\":1,\"443\":1,\"444\":3,\"445\":3,\"446\":3,\"447\":4,\"448\":2,\"449\":11,\"450\":6,\"451\":3,\"452\":1,\"453\":59,\"454\":23,\"456\":9,\"457\":7,\"459\":17,\"460\":10,\"461\":1,\"462\":1,\"463\":6,\"464\":1,\"465\":3,\"467\":3,\"468\":9,\"469\":1,\"470\":2,\"471\":16,\"472\":4,\"473\":13,\"475\":3,\"476\":5,\"477\":18,\"478\":1,\"480\":1,\"481\":5,\"482\":4,\"483\":1,\"484\":1,\"486\":7,\"487\":2,\"491\":6,\"492\":1,\"493\":2,\"494\":2,\"498\":2,\"502\":3,\"503\":1,\"505\":3,\"506\":1,\"516\":1,\"522\":1,\"525\":3,\"545\":2,\"549\":1,\"556\":1,\"557\":1,\"579\":2,\"611\":2,\"619\":2,\"620\":1,\"630\":2,\"633\":8,\"634\":4,\"635\":18,\"637\":11,\"638\":3,\"639\":3,\"645\":1,\"649\":7,\"651\":10,\"653\":2,\"654\":9,\"656\":1,\"683\":2,\"691\":2,\"692\":1,\"701\":2,\"744\":2,\"746\":1,\"828\":2,\"829\":2,\"830\":3,\"831\":4,\"832\":3,\"835\":3,\"836\":3,\"837\":3,\"838\":3,\"878\":4,\"886\":1,\"890\":3,\"908\":1,\"909\":5,\"910\":1,\"984\":1,\"1036\":1,\"1047\":5,\"1056\":1,\"1243\":2,\"1274\":1,\"1289\":1,\"1299\":4,\"1300\":2,\"1304\":1,\"1306\":1,\"1307\":1,\"1308\":4,\"1313\":2,\"1321\":2,\"1328\":4,\"1374\":1,\"1382\":1,\"1394\":1,\"1408\":8,\"1414\":1,\"1428\":1,\"1437\":1}}],[\"b>\",{\"1\":{\"1412\":1}}],[\"bc\",{\"1\":{\"1404\":1}}],[\"bcd节点同理\",{\"1\":{\"1165\":1}}],[\"b2\",{\"1\":{\"1386\":2}}],[\"b不被压垮并处理掉a的消息呢\",{\"1\":{\"1060\":1}}],[\"b服务处理消息能力是100qps\",{\"1\":{\"1060\":1}}],[\"bf396950d13769ba4fd4bc5bf4ce7185d24b27e5\",{\"1\":{\"1010\":1}}],[\"bg\",{\"1\":{\"1143\":1}}],[\"bgrewriteaof\",{\"1\":{\"985\":2}}],[\"bgsave命令\",{\"1\":{\"981\":1}}],[\"bgsave命令是非阻塞式的\",{\"1\":{\"981\":1}}],[\"bgsave\",{\"1\":{\"981\":5,\"982\":1,\"988\":1}}],[\"bplustree\",{\"1\":{\"805\":1}}],[\"bsd\",{\"1\":{\"908\":1}}],[\"bson数据的有序表示\",{\"1\":{\"831\":2}}],[\"bson文档的无序表示\",{\"1\":{\"831\":2}}],[\"bson文档的有序表示的基本单位\",{\"1\":{\"831\":2}}],[\"bson文档的有序表示\",{\"1\":{\"831\":2}}],[\"bson\",{\"0\":{\"831\":1},\"1\":{\"831\":1,\"833\":1,\"834\":3,\"836\":10,\"837\":2,\"838\":4,\"847\":1,\"882\":6,\"883\":2,\"884\":3}}],[\"bst\",{\"1\":{\"802\":1}}],[\"bsm\",{\"1\":{\"122\":1,\"1046\":1,\"1047\":1}}],[\"btree索引的遵循原则和使用限制\",{\"0\":{\"806\":1}}],[\"btree数据是存储到每个节点自己\",{\"1\":{\"803\":1}}],[\"btree\",{\"1\":{\"795\":1,\"803\":1,\"817\":1,\"892\":1}}],[\"b=1andc=1\",{\"1\":{\"622\":1,\"694\":1}}],[\"b站外包\",{\"0\":{\"615\":1,\"616\":1,\"687\":1,\"688\":1}}],[\"b站出品必属于精品\",{\"1\":{\"123\":1}}],[\"b和b+树的区别\",{\"1\":{\"604\":1,\"676\":1}}],[\"b树其实最开始源于的是二叉树\",{\"1\":{\"804\":1}}],[\"b树示意图如下\",{\"1\":{\"803\":1}}],[\"b树是一种多路自平衡搜索树\",{\"1\":{\"803\":1}}],[\"b树与b+树的区别\",{\"1\":{\"649\":1}}],[\"b树\",{\"1\":{\"573\":1,\"641\":1,\"645\":1}}],[\"b树和b+树的区别\",{\"1\":{\"569\":1,\"641\":2}}],[\"b+tree叶子节点有顺序指针\",{\"1\":{\"805\":1}}],[\"b+tree的度一般会超过100\",{\"1\":{\"805\":1}}],[\"b+tree索引的性能分析\",{\"1\":{\"805\":1}}],[\"b+\",{\"1\":{\"649\":5}}],[\"b+树的示意图为\",{\"1\":{\"805\":1}}],[\"b+树的最大优势在于它能提高范围查询的效率\",{\"1\":{\"649\":1}}],[\"b+树是怎么进行查找的呢\",{\"1\":{\"805\":1}}],[\"b+树是b树的变体\",{\"1\":{\"805\":1}}],[\"b+树是一种平衡的树数据结构\",{\"1\":{\"635\":1}}],[\"b+树有什么特点\",{\"1\":{\"616\":1,\"688\":1}}],[\"b+树\",{\"1\":{\"580\":1,\"641\":1,\"652\":1}}],[\"b+树为什么比较合适\",{\"1\":{\"573\":1,\"645\":1}}],[\"b++\",{\"1\":{\"228\":2}}],[\"b++这类语句的写法是错误的\",{\"1\":{\"179\":1}}],[\"b76863e36670\",{\"1\":{\"453\":2,\"459\":1}}],[\"bzr\",{\"1\":{\"443\":1}}],[\"bzip2\",{\"1\":{\"124\":1}}],[\"b协程的执行结果被覆盖了\",{\"1\":{\"429\":1}}],[\"b协程已经完成了访问和计算并成功更新了count的值\",{\"1\":{\"429\":1}}],[\"bkg\",{\"1\":{\"427\":2}}],[\"by情况类似\",{\"1\":{\"819\":1}}],[\"by的后面\",{\"1\":{\"819\":1}}],[\"by出现using\",{\"1\":{\"819\":2}}],[\"by中使用的列\",{\"1\":{\"651\":1}}],[\"bylength\",{\"1\":{\"649\":5}}],[\"bye\",{\"1\":{\"468\":3,\"470\":5,\"477\":4}}],[\"by\",{\"1\":{\"303\":2,\"318\":1,\"328\":2,\"413\":2,\"453\":1,\"653\":1,\"717\":1,\"796\":5,\"814\":4,\"819\":7,\"1003\":1,\"1004\":3,\"1132\":1,\"1173\":1,\"1225\":2,\"1411\":2}}],[\"bytereader\",{\"1\":{\"1413\":1}}],[\"byteencoder\",{\"1\":{\"1047\":1}}],[\"bytedance\",{\"1\":{\"453\":2,\"459\":2,\"460\":4}}],[\"byte来访问类型unsigned\",{\"1\":{\"301\":1}}],[\"byte值\",{\"1\":{\"221\":1}}],[\"byte类型即字节切片\",{\"1\":{\"200\":1}}],[\"byte\",{\"1\":{\"200\":1,\"205\":1,\"221\":3,\"223\":1,\"253\":1,\"254\":2,\"256\":1,\"257\":1,\"279\":1,\"301\":6,\"303\":8,\"320\":1,\"338\":3,\"347\":1,\"388\":1,\"401\":6,\"402\":4,\"406\":1,\"477\":4,\"478\":2,\"511\":1,\"584\":1,\"656\":2,\"713\":2,\"720\":1,\"1303\":1,\"1310\":3,\"1312\":1,\"1313\":2,\"1316\":2,\"1319\":1,\"1320\":1,\"1374\":3,\"1390\":1,\"1392\":1,\"1393\":1,\"1411\":1,\"1413\":1,\"1440\":1,\"1447\":3,\"1448\":2}}],[\"bytescanner\",{\"1\":{\"1413\":1}}],[\"bytes=1073741824\",{\"1\":{\"1029\":1}}],[\"bytes=104857600\",{\"1\":{\"1029\":1}}],[\"bytes=102400\",{\"1\":{\"1029\":2}}],[\"bytes\",{\"1\":{\"124\":1,\"254\":7,\"257\":4,\"258\":1,\"401\":6,\"704\":1,\"706\":1,\"709\":1,\"711\":1,\"713\":3,\"993\":1,\"1029\":1,\"1130\":1,\"1131\":1,\"1133\":1,\"1158\":1,\"1194\":2,\"1195\":7,\"1196\":4,\"1197\":12,\"1308\":1,\"1311\":2,\"1315\":2,\"1317\":2,\"1319\":2,\"1321\":2,\"1331\":1,\"1393\":8,\"1448\":3}}],[\"b88d\",{\"1\":{\"1219\":1}}],[\"b891d5b8213b8241b5438c60afc08054c0c4c48490a3715f21fe5591b28b65fc\",{\"1\":{\"1197\":1}}],[\"b8\",{\"1\":{\"258\":1}}],[\"b1\",{\"1\":{\"254\":2,\"458\":1,\"756\":2}}],[\"b1和s1的地址是一样的\",{\"1\":{\"254\":1}}],[\"blazing\",{\"1\":{\"1299\":1}}],[\"blackfriday\",{\"1\":{\"454\":1}}],[\"blpop\",{\"1\":{\"971\":1}}],[\"blob数据类型\",{\"1\":{\"787\":1}}],[\"blob\",{\"1\":{\"723\":2,\"815\":1}}],[\"blogs\",{\"1\":{\"752\":1,\"756\":1,\"757\":1,\"758\":1,\"763\":1}}],[\"blog\",{\"1\":{\"523\":1,\"717\":2,\"718\":1,\"719\":1,\"721\":5,\"723\":3,\"1278\":8}}],[\"block语句可以插槽中的默认内容\",{\"1\":{\"1427\":1}}],[\"blocking\",{\"1\":{\"328\":2,\"470\":1,\"993\":1}}],[\"blockprofile=block\",{\"1\":{\"497\":1}}],[\"blockprofile=$file\",{\"1\":{\"497\":1}}],[\"blockprofilerate\",{\"1\":{\"469\":1}}],[\"blockprofile\",{\"1\":{\"323\":1,\"469\":1}}],[\"block\",{\"1\":{\"323\":1,\"324\":1,\"469\":1,\"1427\":1,\"1428\":1}}],[\"bloomfilter布隆过滤器\",{\"0\":{\"978\":1}}],[\"bloom过滤器实现\",{\"1\":{\"127\":1}}],[\"bloom\",{\"1\":{\"127\":3}}],[\"bluemonday\",{\"1\":{\"122\":1}}],[\"bluele\",{\"1\":{\"122\":1}}],[\"biangcheng\",{\"1\":{\"994\":1}}],[\"biancheng\",{\"1\":{\"985\":1}}],[\"bird\",{\"1\":{\"649\":2}}],[\"birthday\",{\"1\":{\"269\":1,\"1289\":2}}],[\"bibibibibi\",{\"1\":{\"293\":2}}],[\"bimg\",{\"1\":{\"139\":1}}],[\"bild\",{\"1\":{\"139\":1}}],[\"bilibili开源的微服务框架\",{\"1\":{\"123\":1}}],[\"bidimap\",{\"1\":{\"127\":1}}],[\"bin>\",{\"1\":{\"1328\":4}}],[\"binglog分发等场景\",{\"1\":{\"1054\":1}}],[\"binding\",{\"1\":{\"1197\":1,\"1235\":1,\"1281\":2,\"1283\":2,\"1289\":3}}],[\"bind\",{\"1\":{\"852\":1,\"965\":1,\"1010\":1,\"1166\":2}}],[\"binder\",{\"1\":{\"130\":1}}],[\"bin=mysql\",{\"1\":{\"822\":3}}],[\"bin\",{\"0\":{\"871\":1},\"1\":{\"738\":2,\"740\":1,\"820\":2,\"822\":9,\"825\":3,\"852\":2,\"892\":4,\"1030\":1,\"1031\":1,\"1032\":2,\"1033\":1,\"1034\":1,\"1174\":1,\"1188\":1,\"1189\":1,\"1223\":4,\"1328\":1}}],[\"binlog\",{\"1\":{\"633\":4,\"822\":9}}],[\"binlog日志\",{\"1\":{\"600\":1,\"672\":1}}],[\"binlog的工作模式有哪些\",{\"1\":{\"587\":1,\"659\":1}}],[\"bin或者$gobin目录下\",{\"1\":{\"454\":1}}],[\"binpacker\",{\"1\":{\"127\":1}}],[\"binaryheap\",{\"1\":{\"344\":7}}],[\"binary\",{\"0\":{\"723\":1},\"1\":{\"124\":1,\"454\":2,\"723\":2,\"825\":2,\"827\":1,\"1116\":2,\"1151\":1,\"1152\":2,\"1154\":2,\"1281\":1}}],[\"bigint\",{\"1\":{\"637\":1,\"791\":2,\"795\":1,\"817\":4}}],[\"bigmemdata\",{\"1\":{\"435\":4}}],[\"bigfile\",{\"1\":{\"132\":1,\"633\":1}}],[\"big\",{\"1\":{\"124\":1,\"651\":1,\"790\":3,\"1308\":1}}],[\"bitzise\",{\"1\":{\"1390\":1}}],[\"bitsize\",{\"1\":{\"1389\":2,\"1390\":1,\"1391\":2,\"1392\":2}}],[\"bits\",{\"1\":{\"1308\":1}}],[\"bitset\",{\"1\":{\"127\":1}}],[\"bitmap是个什么样的东西\",{\"1\":{\"592\":1,\"664\":1}}],[\"bitmap\",{\"1\":{\"580\":1,\"619\":1,\"652\":1,\"691\":1}}],[\"bittorrent客户端软件包\",{\"1\":{\"128\":1}}],[\"bittorrent客户端和库\",{\"1\":{\"128\":1}}],[\"bittorrent\",{\"1\":{\"128\":1}}],[\"bit\",{\"1\":{\"127\":1,\"970\":2}}],[\"bitly\",{\"1\":{\"122\":1}}],[\"bitkeeper\",{\"1\":{\"12\":3}}],[\"bitkeeper不是开源的\",{\"1\":{\"12\":1}}],[\"bitkeeper的东家bitmover公司出于人道主义精神\",{\"1\":{\"12\":1}}],[\"both\",{\"1\":{\"1303\":2}}],[\"bottom\",{\"1\":{\"730\":1}}],[\"borough\",{\"1\":{\"880\":2,\"884\":1}}],[\"box\",{\"1\":{\"730\":1}}],[\"bound\",{\"1\":{\"1235\":1}}],[\"bounding\",{\"1\":{\"730\":1}}],[\"bouk\",{\"1\":{\"122\":1}}],[\"bob\",{\"1\":{\"281\":1,\"1257\":1,\"1261\":4,\"1265\":1,\"1422\":2}}],[\"bodyjson\",{\"1\":{\"746\":1,\"766\":3}}],[\"bodystring\",{\"1\":{\"745\":1}}],[\"body\",{\"1\":{\"234\":1,\"1116\":3,\"1132\":1,\"1133\":8,\"1173\":1,\"1330\":2,\"1331\":1,\"1333\":1,\"1334\":1,\"1424\":3,\"1425\":5,\"1427\":1}}],[\"bookkeeper项目\",{\"1\":{\"1019\":1}}],[\"book\",{\"1\":{\"720\":1}}],[\"bootproto=static\",{\"1\":{\"1219\":1}}],[\"bootfs基本是一致的\",{\"1\":{\"1192\":1}}],[\"bootstrap\",{\"1\":{\"1034\":4,\"1076\":1,\"1078\":1}}],[\"boot\",{\"1\":{\"293\":4}}],[\"boolvar\",{\"1\":{\"1325\":1,\"1328\":1}}],[\"boolvule\",{\"1\":{\"511\":1}}],[\"boolquery\",{\"1\":{\"763\":3,\"764\":2,\"765\":2}}],[\"bool组合查询\",{\"0\":{\"762\":1},\"1\":{\"762\":1}}],[\"boolean\",{\"0\":{\"722\":1},\"1\":{\"524\":1}}],[\"bool\",{\"1\":{\"196\":1,\"282\":2,\"339\":1,\"351\":3,\"354\":1,\"355\":1,\"356\":1,\"367\":2,\"369\":1,\"379\":1,\"393\":2,\"424\":2,\"425\":1,\"427\":1,\"431\":2,\"434\":2,\"436\":6,\"438\":1,\"440\":1,\"463\":1,\"471\":1,\"473\":1,\"474\":1,\"478\":1,\"546\":1,\"554\":3,\"556\":1,\"558\":1,\"649\":2,\"729\":1,\"745\":1,\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"911\":1,\"1037\":1,\"1302\":4,\"1303\":3,\"1307\":2,\"1324\":1,\"1325\":2,\"1328\":1,\"1375\":1,\"1380\":1,\"1386\":1,\"1387\":1,\"1398\":3,\"1400\":1,\"1401\":1,\"1402\":2,\"1403\":2,\"1429\":2}}],[\"boomfilters\",{\"1\":{\"127\":1}}],[\"bom\",{\"1\":{\"122\":1}}],[\"bba\",{\"1\":{\"1403\":1}}],[\"bbb\",{\"1\":{\"1378\":1}}],[\"bb\",{\"1\":{\"230\":1}}],[\"bbolt\",{\"1\":{\"122\":1}}],[\"bbloom\",{\"1\":{\"122\":1}}],[\"burst的作用是让多余的请求可以先放到队列里\",{\"1\":{\"1155\":1}}],[\"burst缓存处理\",{\"0\":{\"1155\":1}}],[\"burst爆发的意思\",{\"1\":{\"1151\":1}}],[\"burst=2\",{\"1\":{\"1158\":2}}],[\"burst=4\",{\"1\":{\"1155\":1,\"1156\":1,\"1157\":1}}],[\"burst=100\",{\"1\":{\"1151\":1,\"1158\":1}}],[\"burst=5\",{\"1\":{\"1151\":3}}],[\"burst=number\",{\"1\":{\"1151\":1}}],[\"burst\",{\"1\":{\"1149\":1}}],[\"burnt\",{\"1\":{\"459\":1}}],[\"burntsushi最终会转义为github\",{\"1\":{\"459\":1}}],[\"builtins获取默认的函数映射表\",{\"1\":{\"1420\":1}}],[\"built\",{\"1\":{\"1132\":2,\"1173\":2}}],[\"buildoptions\",{\"1\":{\"1306\":2}}],[\"builder作为函数参数传递的时候\",{\"1\":{\"1411\":1}}],[\"builder的性能要远远高于使用+拼接字符串\",{\"1\":{\"475\":1}}],[\"builder则要好很多\",{\"1\":{\"475\":1}}],[\"builder\",{\"1\":{\"257\":6,\"352\":2,\"475\":1,\"1411\":13}}],[\"build\",{\"1\":{\"28\":1,\"124\":1,\"293\":3,\"297\":1,\"299\":1,\"312\":1,\"313\":1,\"317\":2,\"318\":1,\"319\":1,\"320\":2,\"481\":1,\"702\":5,\"1182\":1,\"1193\":1,\"1200\":1,\"1303\":1,\"1328\":4}}],[\"build文件夹下所有内容\",{\"1\":{\"28\":1}}],[\"bucket\",{\"1\":{\"634\":1,\"1150\":1}}],[\"bug\",{\"1\":{\"480\":1}}],[\"but\",{\"1\":{\"446\":1}}],[\"buffers\",{\"0\":{\"1321\":1},\"1\":{\"637\":1,\"1309\":1}}],[\"buffer\",{\"1\":{\"377\":1,\"401\":13,\"814\":1,\"1029\":2,\"1321\":2,\"1413\":3}}],[\"buffer容量\",{\"1\":{\"244\":1}}],[\"buff\",{\"1\":{\"320\":1}}],[\"buffstreams\",{\"1\":{\"145\":1}}],[\"buf\",{\"1\":{\"223\":3,\"303\":5,\"320\":1,\"435\":5,\"1374\":3,\"1411\":1}}],[\"bufio提供了可缓冲的输出方法\",{\"1\":{\"220\":1}}],[\"bufio可以比较方便地提供readline之类的操作\",{\"1\":{\"121\":1}}],[\"bufio\",{\"0\":{\"220\":1,\"225\":1},\"1\":{\"121\":1,\"124\":1,\"220\":2,\"225\":1,\"226\":2,\"633\":2,\"1308\":1}}],[\"becomes\",{\"1\":{\"1163\":2}}],[\"bearer\",{\"1\":{\"1093\":2,\"1282\":1,\"1283\":1}}],[\"bearer所以代码中必须截断这个前缀才可以去验证\",{\"1\":{\"1092\":1}}],[\"beans\",{\"1\":{\"1166\":1}}],[\"bean\",{\"1\":{\"645\":1}}],[\"before\",{\"1\":{\"477\":3,\"514\":1,\"971\":1,\"1400\":4,\"1429\":1}}],[\"bench=^banchmarksyncpool$\",{\"1\":{\"630\":2}}],[\"bench=\",{\"1\":{\"498\":1}}],[\"benchstat是一个开源的性能测试分析工具\",{\"1\":{\"476\":1}}],[\"benchstat\",{\"0\":{\"476\":1},\"1\":{\"476\":2}}],[\"benchmarksyncpool\",{\"1\":{\"630\":1}}],[\"benchmark\",{\"1\":{\"483\":1,\"498\":4,\"499\":2,\"500\":1}}],[\"benchmarkconcatbuilder\",{\"1\":{\"475\":8,\"476\":32}}],[\"benchmarkconcatdirect\",{\"1\":{\"475\":8,\"476\":32}}],[\"benchmem`\",{\"1\":{\"630\":1}}],[\"benchmem\",{\"1\":{\"469\":1,\"475\":1,\"476\":2,\"497\":1,\"630\":1}}],[\"bench\",{\"1\":{\"468\":2,\"469\":1,\"475\":3,\"476\":4,\"496\":1,\"630\":1}}],[\"bench参数则会运行所有类型的测试\",{\"1\":{\"468\":1}}],[\"benchtime=100x\",{\"1\":{\"497\":1}}],[\"benchtime=10s\",{\"1\":{\"497\":1}}],[\"benchtime\",{\"1\":{\"468\":1,\"497\":1}}],[\"benedict\",{\"1\":{\"12\":1}}],[\"beginning\",{\"1\":{\"1034\":2}}],[\"begin\",{\"1\":{\"454\":5,\"820\":2,\"897\":2}}],[\"be\",{\"1\":{\"303\":4,\"470\":1,\"742\":1,\"1164\":1}}],[\"between\",{\"1\":{\"649\":1}}],[\"betteralign\",{\"1\":{\"273\":1}}],[\"beta偏差校正和tailcut空间减少功能\",{\"1\":{\"127\":1}}],[\"beijing\",{\"1\":{\"221\":3}}],[\"beego\",{\"0\":{\"114\":1},\"1\":{\"109\":1,\"111\":1,\"117\":1,\"118\":1,\"123\":3,\"158\":1}}],[\"br\",{\"1\":{\"1222\":1}}],[\"bridge模式\",{\"1\":{\"1197\":1}}],[\"bridge\",{\"1\":{\"1197\":18,\"1202\":1,\"1222\":4}}],[\"brd\",{\"1\":{\"1194\":8,\"1195\":7}}],[\"brust\",{\"1\":{\"1155\":1}}],[\"brpoplpush\",{\"1\":{\"971\":1}}],[\"brpop\",{\"1\":{\"971\":1}}],[\"broker是指部署了kafka实例的服务器节点\",{\"1\":{\"1020\":1}}],[\"broker运行着kafka实例\",{\"1\":{\"1020\":1}}],[\"broker\",{\"1\":{\"1020\":3,\"1029\":3,\"1032\":1,\"1034\":2,\"1060\":1,\"1067\":1}}],[\"broadcast\",{\"1\":{\"432\":2,\"1194\":1}}],[\"browser\",{\"1\":{\"328\":1,\"1219\":1}}],[\"branchname\",{\"1\":{\"58\":1}}],[\"branch\",{\"1\":{\"58\":8}}],[\"break关键字会终止最内层的for循环\",{\"1\":{\"235\":1}}],[\"breaker\",{\"1\":{\"137\":1}}],[\"break\",{\"0\":{\"235\":1},\"1\":{\"5\":1,\"178\":1,\"226\":1,\"231\":1,\"235\":2,\"344\":2,\"421\":1,\"440\":1,\"1164\":3,\"1374\":1,\"1424\":1}}],[\"bac\",{\"1\":{\"1398\":1}}],[\"backoff\",{\"1\":{\"1301\":2}}],[\"backups\",{\"1\":{\"1303\":4,\"1304\":1}}],[\"backup\",{\"1\":{\"1163\":3,\"1220\":1}}],[\"backup标记该服务器为备用服务器\",{\"1\":{\"1161\":1}}],[\"backlog=16384\",{\"1\":{\"1078\":4}}],[\"backtrack\",{\"1\":{\"653\":4}}],[\"backtracking\",{\"1\":{\"4\":2}}],[\"backend4\",{\"1\":{\"1164\":1}}],[\"backend3\",{\"1\":{\"1164\":1}}],[\"backend2\",{\"1\":{\"1164\":1}}],[\"backend1\",{\"1\":{\"1164\":1}}],[\"backend\",{\"1\":{\"454\":2,\"1164\":1}}],[\"background\",{\"1\":{\"425\":3,\"426\":1,\"427\":2,\"428\":1,\"470\":1,\"745\":1,\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"754\":1,\"756\":1,\"830\":1,\"981\":1,\"985\":1}}],[\"background和context\",{\"1\":{\"425\":1}}],[\"ba\",{\"1\":{\"1398\":1,\"1404\":1}}],[\"balancing\",{\"1\":{\"1164\":1}}],[\"balance\",{\"1\":{\"581\":1,\"653\":2}}],[\"bak\",{\"1\":{\"794\":2}}],[\"batch\",{\"1\":{\"790\":1}}],[\"bat\",{\"1\":{\"738\":1}}],[\"baidu\",{\"1\":{\"511\":1,\"985\":1,\"1330\":1}}],[\"badger\",{\"1\":{\"334\":1}}],[\"bash\",{\"1\":{\"1174\":1,\"1188\":1,\"1189\":1}}],[\"basically\",{\"1\":{\"906\":1}}],[\"basic`\",{\"1\":{\"630\":1}}],[\"basic\",{\"1\":{\"289\":1,\"630\":2,\"1427\":2,\"1428\":3}}],[\"basecontext\",{\"1\":{\"1336\":1}}],[\"baseurl=https\",{\"1\":{\"1222\":1}}],[\"base原则\",{\"1\":{\"906\":1}}],[\"base选择\",{\"1\":{\"599\":1,\"671\":1}}],[\"baseline\",{\"1\":{\"477\":6}}],[\"base\",{\"1\":{\"345\":1,\"476\":4,\"744\":1,\"756\":1,\"771\":1,\"1220\":3}}],[\"base64编码的二进制值不能嵌入换行符\",{\"1\":{\"723\":1}}],[\"base64x\",{\"1\":{\"453\":2,\"459\":3}}],[\"base64\",{\"1\":{\"124\":1}}],[\"base32\",{\"1\":{\"124\":1}}],[\"bazaar\",{\"1\":{\"443\":1}}],[\"baz\",{\"1\":{\"176\":2}}],[\"bar\",{\"1\":{\"176\":2,\"1133\":1,\"1303\":2}}],[\"bare\",{\"1\":{\"55\":1}}],[\"bangde\",{\"1\":{\"993\":1}}],[\"bang\",{\"1\":{\"176\":2}}],[\"bayesian\",{\"1\":{\"142\":1}}],[\"b\",{\"0\":{\"968\":1,\"1085\":1,\"1155\":1},\"1\":{\"36\":1,\"58\":1,\"110\":1,\"176\":1,\"185\":1,\"193\":2,\"206\":1,\"208\":19,\"209\":5,\"211\":1,\"221\":4,\"224\":3,\"225\":3,\"228\":5,\"229\":2,\"230\":1,\"231\":2,\"232\":1,\"239\":1,\"259\":1,\"260\":4,\"261\":6,\"262\":6,\"263\":4,\"264\":2,\"273\":3,\"278\":7,\"280\":14,\"281\":3,\"282\":4,\"283\":2,\"285\":19,\"294\":5,\"298\":5,\"299\":3,\"300\":11,\"301\":4,\"312\":3,\"314\":4,\"337\":8,\"339\":7,\"344\":4,\"364\":3,\"379\":2,\"384\":2,\"386\":2,\"396\":4,\"401\":2,\"402\":2,\"421\":5,\"436\":2,\"471\":28,\"472\":6,\"473\":6,\"474\":6,\"475\":19,\"476\":62,\"477\":8,\"498\":7,\"499\":5,\"500\":8,\"513\":1,\"516\":1,\"621\":2,\"630\":2,\"633\":1,\"635\":1,\"649\":3,\"654\":9,\"693\":2,\"713\":4,\"786\":1,\"795\":1,\"804\":1,\"927\":5,\"934\":1,\"939\":1,\"944\":1,\"947\":1,\"950\":1,\"1133\":1,\"1280\":1,\"1386\":2,\"1387\":2,\"1390\":2,\"1392\":1,\"1397\":1,\"1398\":1,\"1402\":4,\"1411\":6,\"1412\":2,\"1443\":2}}],[\"剪枝\",{\"1\":{\"5\":1}}],[\"<address>usa<\",{\"1\":{\"1311\":1,\"1312\":1}}],[\"<age>18<\",{\"1\":{\"1311\":1,\"1312\":1}}],[\"<alphanum>\",{\"1\":{\"706\":7}}],[\"<id>120<\",{\"1\":{\"1311\":1,\"1312\":1}}],[\"<loopback\",{\"1\":{\"1194\":2,\"1195\":1}}],[\"<name>jack<\",{\"1\":{\"1311\":1,\"1312\":1}}],[\"<node\",{\"1\":{\"1234\":4}}],[\"<none>\",{\"1\":{\"1228\":2,\"1235\":1}}],[\"<no\",{\"1\":{\"1194\":1}}],[\"<ngx\",{\"1\":{\"1164\":3}}],[\"<nil>\",{\"1\":{\"275\":1,\"292\":1,\"400\":1,\"836\":1,\"927\":1,\"1384\":1,\"1386\":3,\"1389\":2,\"1391\":1}}],[\"<服务器名称><\",{\"1\":{\"1000\":1}}],[\"<服务器名称><密码>\",{\"1\":{\"1000\":1}}],[\"<服务名称><脚本路径>\",{\"1\":{\"1000\":1}}],[\"<服务名称><服务器数\",{\"1\":{\"1000\":1}}],[\"<服务名称><毫秒数\",{\"1\":{\"1000\":2}}],[\"<b>html<\",{\"1\":{\"1412\":1}}],[\"<broadcast\",{\"1\":{\"1194\":2,\"1195\":4}}],[\"<bytes>\",{\"1\":{\"965\":1}}],[\"<boolean>\",{\"1\":{\"859\":1,\"860\":1}}],[\"<master\",{\"1\":{\"965\":1,\"993\":2}}],[\"<masterport>\",{\"1\":{\"965\":1}}],[\"<masterip>\",{\"1\":{\"965\":1}}],[\"<changes>\",{\"1\":{\"965\":1}}],[\"<comment>ik\",{\"1\":{\"742\":1}}],[\"<command>\",{\"1\":{\"77\":1}}],[\"<dbid>命令在连接上指定数据库id\",{\"1\":{\"965\":1}}],[\"<22\",{\"1\":{\"861\":1}}],[\"<update>\",{\"1\":{\"859\":1}}],[\"<url>\",{\"1\":{\"57\":1,\"58\":1}}],[\"<query>\",{\"1\":{\"859\":1,\"860\":1}}],[\"<>\",{\"1\":{\"806\":1}}],[\"<em>golang<\",{\"1\":{\"766\":1}}],[\"<em>\",{\"1\":{\"766\":1}}],[\"<entry\",{\"1\":{\"742\":4,\"743\":2}}],[\"<errno\",{\"1\":{\"298\":1}}],[\"<person>\",{\"1\":{\"1311\":1,\"1312\":1}}],[\"<password>命令提供密码\",{\"1\":{\"965\":1}}],[\"<packagename>\",{\"1\":{\"525\":2}}],[\"<properties>\",{\"1\":{\"742\":1}}],[\"<tag2>\",{\"1\":{\"741\":1}}],[\"<tag1>中国<\",{\"1\":{\"741\":1}}],[\"<tag1>\",{\"1\":{\"741\":1}}],[\"<target>\",{\"1\":{\"77\":1}}],[\"<slave\",{\"1\":{\"993\":1}}],[\"<seconds>\",{\"1\":{\"965\":1}}],[\"<stdlib\",{\"1\":{\"303\":4}}],[\"<stdint\",{\"1\":{\"298\":1,\"300\":3,\"306\":2,\"307\":1,\"308\":1,\"309\":1,\"310\":2,\"312\":2,\"314\":1}}],[\"<stdio\",{\"1\":{\"297\":1,\"298\":2,\"300\":3,\"301\":1,\"302\":1,\"303\":4,\"304\":1,\"305\":1,\"306\":2,\"307\":1,\"308\":1,\"309\":1,\"310\":2}}],[\"<shortname>\",{\"1\":{\"57\":2,\"58\":4}}],[\"<<eof\",{\"1\":{\"1222\":3,\"1223\":2}}],[\"<<\",{\"1\":{\"179\":1,\"212\":1,\"276\":8,\"322\":1,\"327\":1,\"653\":1,\"774\":1,\"1164\":1,\"1221\":1,\"1341\":1,\"1343\":6,\"1430\":1}}],[\"<<毕业论文最终版2\",{\"1\":{\"9\":1}}],[\"<<毕业论文最终版\",{\"1\":{\"9\":1}}],[\"<<毕业论文第三版\",{\"1\":{\"9\":1}}],[\"<<毕业论文第二版\",{\"1\":{\"9\":1}}],[\"<<毕业论文第一版\",{\"1\":{\"9\":1}}],[\"<分支名>\",{\"1\":{\"58\":4}}],[\"<分支名称>\",{\"1\":{\"58\":6}}],[\"<仓库简称>\",{\"1\":{\"56\":1,\"58\":1}}],[\"<文件名>\",{\"1\":{\"55\":5}}],[\"<\",{\"1\":{\"5\":1,\"179\":1,\"192\":2,\"221\":1,\"229\":10,\"230\":3,\"233\":3,\"235\":4,\"236\":4,\"248\":1,\"249\":1,\"258\":4,\"265\":1,\"266\":3,\"269\":1,\"281\":1,\"282\":1,\"306\":2,\"314\":1,\"322\":1,\"326\":1,\"327\":2,\"344\":5,\"367\":1,\"370\":4,\"375\":1,\"385\":4,\"402\":2,\"408\":1,\"412\":4,\"415\":6,\"416\":4,\"417\":19,\"418\":10,\"419\":5,\"420\":8,\"421\":26,\"422\":1,\"424\":2,\"425\":1,\"426\":2,\"427\":5,\"428\":1,\"429\":1,\"430\":1,\"431\":2,\"432\":3,\"434\":1,\"435\":1,\"436\":4,\"470\":2,\"475\":4,\"477\":3,\"498\":1,\"499\":1,\"500\":1,\"537\":1,\"545\":4,\"546\":1,\"556\":1,\"557\":1,\"649\":1,\"651\":2,\"653\":4,\"654\":4,\"741\":2,\"742\":7,\"743\":2,\"759\":3,\"766\":1,\"814\":1,\"861\":1,\"863\":3,\"993\":5,\"1000\":6,\"1047\":5,\"1164\":1,\"1165\":1,\"1311\":1,\"1380\":1,\"1405\":1,\"1412\":1,\"1433\":1,\"1434\":2,\"1445\":2,\"1447\":1}}],[\"<=\",{\"1\":{\"5\":1,\"179\":1,\"230\":3,\"233\":4,\"235\":2,\"250\":2,\"298\":2,\"344\":1,\"390\":2,\"633\":2,\"654\":2,\"861\":2,\"863\":1,\"1164\":1}}],[\"+1的结果是\",{\"1\":{\"1393\":1}}],[\"+18\",{\"1\":{\"713\":1}}],[\"+q\",{\"1\":{\"1189\":1}}],[\"+x\",{\"1\":{\"1174\":1,\"1223\":1}}],[\"+servermap\",{\"1\":{\"1165\":2}}],[\"+userserver+\",{\"1\":{\"1165\":2}}],[\"+tomcatserver+\",{\"1\":{\"1165\":1}}],[\"+请求+参数\",{\"1\":{\"1073\":1}}],[\"+i\",{\"1\":{\"713\":1}}],[\"+捕获变量发生逃逸\",{\"1\":{\"514\":1}}],[\"+25\",{\"1\":{\"476\":2}}],[\"+offset\",{\"1\":{\"401\":1}}],[\"+0800\",{\"1\":{\"326\":1,\"1082\":2,\"1429\":1,\"1432\":1,\"1433\":1,\"1434\":3,\"1435\":2}}],[\"+6\",{\"1\":{\"228\":1}}],[\"+3\",{\"1\":{\"228\":1}}],[\"+v\",{\"1\":{\"221\":2,\"307\":1,\"368\":1,\"393\":1,\"400\":1,\"833\":1,\"834\":2,\"836\":4,\"893\":2,\"1320\":1}}],[\"+=\",{\"1\":{\"179\":1,\"230\":7,\"258\":1,\"314\":1,\"417\":1,\"440\":1,\"475\":1,\"492\":1}}],[\"++iphp\",{\"1\":{\"1164\":1}}],[\"++a\",{\"1\":{\"179\":1}}],[\"++库的ocr\",{\"1\":{\"142\":1}}],[\"++\",{\"1\":{\"127\":1,\"633\":1}}],[\"+\",{\"1\":{\"5\":1,\"72\":2,\"179\":1,\"191\":1,\"208\":3,\"211\":1,\"212\":3,\"213\":2,\"224\":1,\"225\":1,\"228\":1,\"239\":3,\"257\":1,\"276\":1,\"278\":3,\"280\":5,\"281\":1,\"282\":2,\"283\":1,\"285\":1,\"298\":1,\"299\":1,\"300\":3,\"302\":2,\"312\":1,\"314\":2,\"337\":3,\"339\":3,\"344\":3,\"381\":2,\"383\":2,\"384\":1,\"385\":1,\"390\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"449\":6,\"471\":1,\"510\":1,\"635\":1,\"638\":1,\"645\":1,\"651\":2,\"654\":1,\"713\":1,\"730\":1,\"800\":3,\"851\":1,\"863\":4,\"911\":1,\"1000\":1,\"1003\":1,\"1047\":1,\"1087\":1,\"1090\":1,\"1160\":1,\"1164\":1,\"1166\":9,\"1174\":1,\"1189\":2,\"1281\":1,\"1303\":2,\"1344\":2,\"1374\":1,\"1405\":1,\"1420\":1,\"1440\":1,\"1443\":5,\"1444\":2}}],[\"t3关联了t1\",{\"1\":{\"1426\":1}}],[\"t3\",{\"1\":{\"1426\":4}}],[\"t2都会加载\",{\"1\":{\"1425\":1}}],[\"t2\",{\"1\":{\"1425\":11,\"1426\":4,\"1428\":2,\"1443\":2}}],[\"turkishcase\",{\"1\":{\"1409\":2}}],[\"tunny\",{\"1\":{\"137\":1}}],[\"tgz\",{\"1\":{\"1028\":3,\"1223\":2}}],[\"tga\",{\"1\":{\"139\":1}}],[\"tx\",{\"1\":{\"897\":6}}],[\"txt作为插槽文件\",{\"1\":{\"1428\":1}}],[\"txt文件以做对比\",{\"1\":{\"476\":1}}],[\"txt和new\",{\"1\":{\"476\":1}}],[\"txt的文件\",{\"1\":{\"388\":1}}],[\"txt\",{\"1\":{\"28\":2,\"145\":1,\"207\":1,\"388\":1,\"400\":9,\"401\":5,\"402\":3,\"403\":6,\"404\":2,\"405\":1,\"406\":1,\"476\":10,\"514\":1,\"633\":3,\"743\":3,\"1078\":1,\"1280\":1,\"1427\":1,\"1428\":10}}],[\"t1转换为unsafe\",{\"1\":{\"1443\":1}}],[\"t1\",{\"1\":{\"796\":1,\"1425\":11,\"1426\":4,\"1428\":2,\"1443\":1}}],[\"tyrion\",{\"1\":{\"733\":1}}],[\"typevar\",{\"1\":{\"1325\":1}}],[\"type=notify\",{\"1\":{\"1223\":1}}],[\"type=ethernet\",{\"1\":{\"1219\":1}}],[\"type=simple\",{\"1\":{\"1032\":1}}],[\"typed\",{\"1\":{\"441\":1,\"1301\":1}}],[\"typedef\",{\"1\":{\"301\":2,\"1164\":1}}],[\"type方法可以获取一个反射值的类型\",{\"1\":{\"358\":1}}],[\"type代表着go中的类型\",{\"1\":{\"350\":1}}],[\"type接口类型来表示go中的类型\",{\"1\":{\"348\":1}}],[\"typename\",{\"1\":{\"301\":1}}],[\"typeof函数\",{\"1\":{\"348\":1}}],[\"typeof\",{\"1\":{\"298\":1,\"302\":1,\"307\":1,\"308\":1,\"348\":1,\"349\":1,\"350\":2,\"351\":1,\"352\":2,\"353\":5,\"354\":4,\"355\":3,\"356\":3,\"364\":1,\"367\":2,\"369\":1,\"370\":2,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"756\":1}}],[\"type是具体类型\",{\"1\":{\"294\":1}}],[\"type1\",{\"1\":{\"262\":1}}],[\"types\",{\"1\":{\"209\":1,\"381\":1,\"383\":1,\"1123\":1,\"1130\":1,\"1131\":1,\"1158\":1}}],[\"type\",{\"0\":{\"358\":1},\"1\":{\"178\":1,\"201\":3,\"203\":1,\"213\":1,\"221\":1,\"244\":3,\"253\":1,\"262\":2,\"266\":1,\"267\":2,\"268\":1,\"269\":2,\"270\":6,\"272\":1,\"273\":3,\"274\":1,\"276\":1,\"277\":4,\"278\":1,\"279\":2,\"281\":1,\"285\":1,\"286\":1,\"287\":9,\"289\":10,\"291\":1,\"293\":8,\"294\":4,\"302\":3,\"307\":1,\"309\":1,\"317\":1,\"320\":1,\"326\":3,\"337\":1,\"338\":8,\"339\":4,\"340\":17,\"341\":11,\"343\":2,\"344\":4,\"347\":7,\"348\":4,\"350\":1,\"351\":3,\"352\":3,\"353\":2,\"354\":2,\"355\":6,\"356\":6,\"358\":3,\"366\":1,\"367\":9,\"368\":1,\"370\":9,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":2,\"383\":6,\"384\":3,\"385\":1,\"386\":1,\"387\":1,\"389\":1,\"390\":1,\"391\":1,\"392\":1,\"393\":1,\"412\":1,\"414\":1,\"419\":2,\"424\":1,\"425\":1,\"426\":1,\"427\":1,\"430\":1,\"432\":1,\"434\":3,\"435\":1,\"439\":3,\"441\":1,\"463\":1,\"471\":1,\"513\":5,\"515\":4,\"516\":5,\"546\":1,\"554\":2,\"635\":7,\"645\":1,\"649\":1,\"651\":5,\"702\":1,\"703\":1,\"704\":6,\"705\":3,\"706\":7,\"717\":8,\"718\":1,\"719\":1,\"720\":3,\"721\":2,\"723\":1,\"724\":4,\"726\":4,\"729\":1,\"730\":1,\"732\":1,\"733\":2,\"741\":3,\"745\":11,\"746\":1,\"756\":1,\"814\":2,\"831\":8,\"833\":1,\"834\":2,\"838\":1,\"880\":1,\"893\":1,\"908\":1,\"911\":1,\"920\":1,\"967\":2,\"1010\":4,\"1123\":1,\"1130\":1,\"1131\":1,\"1133\":3,\"1158\":1,\"1164\":1,\"1235\":2,\"1281\":5,\"1283\":4,\"1289\":1,\"1302\":5,\"1303\":3,\"1307\":1,\"1310\":1,\"1313\":1,\"1316\":1,\"1318\":1,\"1325\":1,\"1337\":1,\"1375\":1,\"1380\":2,\"1411\":2,\"1420\":1,\"1438\":1,\"1439\":1,\"1440\":2,\"1441\":1,\"1442\":1,\"1443\":2}}],[\"typ\",{\"1\":{\"127\":1,\"347\":2,\"348\":1,\"373\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"634\":1}}],[\"t的指针\",{\"1\":{\"654\":1}}],[\"t几\",{\"1\":{\"615\":1,\"687\":1}}],[\"tps\",{\"1\":{\"644\":1}}],[\"tp\",{\"1\":{\"595\":1,\"667\":1}}],[\"tm\",{\"1\":{\"475\":1,\"476\":3,\"498\":1,\"735\":1}}],[\"tmpl3\",{\"1\":{\"1426\":2}}],[\"tmpl2\",{\"1\":{\"1426\":2}}],[\"tmpl1\",{\"1\":{\"1426\":2}}],[\"tmpl是一个模板字符串\",{\"1\":{\"1415\":1}}],[\"tmpl\",{\"1\":{\"1415\":2,\"1417\":10,\"1419\":2,\"1425\":4}}],[\"tmp\",{\"1\":{\"5\":3,\"794\":2,\"820\":1,\"965\":2,\"1000\":1,\"1372\":1}}],[\"t是testing包提供的用于方便测试的结构体\",{\"1\":{\"471\":1}}],[\"t是一个接口\",{\"1\":{\"289\":1}}],[\"t为时间间隔\",{\"1\":{\"469\":1}}],[\"tw\",{\"1\":{\"766\":2}}],[\"tweet3\",{\"1\":{\"766\":2}}],[\"tweet2\",{\"1\":{\"766\":2}}],[\"tweet\",{\"1\":{\"766\":4}}],[\"tweet1\",{\"1\":{\"766\":2}}],[\"two\",{\"1\":{\"725\":1}}],[\"twodmap\",{\"1\":{\"384\":2}}],[\"twitchyliquid64\",{\"1\":{\"453\":2,\"459\":1}}],[\"t就是一个类型形参\",{\"1\":{\"337\":1}}],[\"tb\",{\"1\":{\"337\":2}}],[\"t不是一个接口\",{\"1\":{\"289\":1}}],[\"t制表符但是无效\",{\"1\":{\"252\":2}}],[\"ttl=64\",{\"1\":{\"1194\":1,\"1195\":5,\"1196\":3,\"1197\":9}}],[\"ttl\",{\"1\":{\"635\":1,\"918\":1,\"967\":4}}],[\"ttlcache\",{\"1\":{\"127\":1}}],[\"tt\",{\"1\":{\"494\":4,\"1426\":3}}],[\"ttml和\",{\"1\":{\"146\":1}}],[\"ttml\",{\"1\":{\"146\":1}}],[\"ts\",{\"1\":{\"146\":1,\"862\":1,\"1426\":2}}],[\"tspool\",{\"1\":{\"145\":1}}],[\"tsuna\",{\"1\":{\"122\":1}}],[\"tcp编程的逻辑十分简单\",{\"1\":{\"1374\":1}}],[\"tcp4\",{\"1\":{\"1370\":1}}],[\"tcp4addr\",{\"1\":{\"1370\":2}}],[\"tcpaddr\",{\"1\":{\"1370\":1}}],[\"tcp6addr\",{\"1\":{\"1370\":2}}],[\"tcp6\",{\"1\":{\"1370\":2}}],[\"tcp地址支持tcp4\",{\"1\":{\"1370\":1}}],[\"tcp地址\",{\"0\":{\"1370\":1}}],[\"tcp连接当前的请求数量\",{\"1\":{\"1133\":1}}],[\"tcp连接的序列号\",{\"1\":{\"1133\":1}}],[\"tcp通信端口\",{\"1\":{\"768\":1,\"769\":1,\"770\":1}}],[\"tcp调优相关参数\",{\"1\":{\"618\":1,\"690\":1}}],[\"tcp和udp可以绑定同一个端口吗\",{\"1\":{\"613\":1,\"685\":1}}],[\"tcp和udp的区别\",{\"1\":{\"566\":1,\"638\":1}}],[\"tcp和udp的本质区别\",{\"1\":{\"564\":1,\"636\":2}}],[\"tcp三次握手\",{\"1\":{\"603\":1,\"618\":1,\"619\":1,\"675\":1,\"690\":1,\"691\":1}}],[\"tcp可靠通信怎么实现的\",{\"1\":{\"564\":1,\"636\":2}}],[\"tcp库使用工作池来提高性能并保护您的服务器\",{\"1\":{\"145\":1}}],[\"tcp\",{\"1\":{\"145\":2,\"454\":1,\"579\":1,\"584\":1,\"586\":1,\"636\":3,\"638\":1,\"641\":1,\"651\":4,\"656\":3,\"658\":1,\"768\":1,\"769\":1,\"770\":1,\"775\":1,\"776\":1,\"891\":1,\"893\":1,\"911\":2,\"1078\":2,\"1130\":2,\"1131\":2,\"1158\":1,\"1235\":1,\"1365\":1,\"1374\":2}}],[\"tcp的四次挥手是怎么样的\",{\"1\":{\"606\":1,\"678\":1}}],[\"tcp的粘包是怎样的现象\",{\"1\":{\"590\":1,\"662\":1}}],[\"tcp的特点是\",{\"1\":{\"82\":1}}],[\"tcp的三次握手和四次挥手的过程\",{\"1\":{\"569\":1,\"641\":2}}],[\"tcp的三次握手\",{\"0\":{\"82\":1}}],[\"tfgo\",{\"1\":{\"142\":1}}],[\"thursday\",{\"1\":{\"1431\":1}}],[\"though\",{\"1\":{\"470\":1}}],[\"than\",{\"1\":{\"344\":2,\"470\":1}}],[\"that\",{\"1\":{\"253\":2,\"257\":4,\"289\":2,\"470\":1,\"1053\":1,\"1238\":1}}],[\"there\",{\"1\":{\"1399\":2}}],[\"then\",{\"1\":{\"1225\":2}}],[\"the\",{\"1\":{\"289\":5,\"296\":1,\"298\":2,\"303\":6,\"326\":1,\"327\":1,\"347\":2,\"400\":2,\"453\":1,\"454\":4,\"470\":1,\"703\":1,\"706\":3,\"717\":2,\"828\":2,\"993\":1,\"1010\":12,\"1047\":1,\"1078\":3,\"1163\":3,\"1164\":1,\"1223\":1,\"1225\":2,\"1415\":2}}],[\"theory\",{\"1\":{\"126\":1}}],[\"things\",{\"1\":{\"863\":1}}],[\"this\",{\"1\":{\"253\":5,\"254\":2,\"255\":2,\"256\":2,\"257\":4,\"303\":9,\"393\":1,\"453\":1,\"470\":1,\"706\":3,\"1407\":8,\"1408\":8,\"1410\":10,\"1412\":2,\"1415\":1,\"1418\":2}}],[\"third\",{\"1\":{\"226\":2,\"651\":2}}],[\"thrones\",{\"1\":{\"728\":1,\"729\":3}}],[\"through\",{\"1\":{\"326\":2}}],[\"threadlocal\",{\"1\":{\"641\":2}}],[\"threadlocal怎样保证其线程安全\",{\"1\":{\"606\":1,\"678\":1}}],[\"threadlocal会不会有什么问题\",{\"1\":{\"597\":1,\"669\":1}}],[\"threadlocal的作用\",{\"1\":{\"592\":1,\"664\":1}}],[\"threadlocal实现线程信息隔离说一下\",{\"1\":{\"569\":1,\"641\":2}}],[\"threads=8\",{\"1\":{\"1029\":1}}],[\"threads=3\",{\"1\":{\"1029\":1}}],[\"threads\",{\"1\":{\"449\":1,\"965\":1,\"1029\":1}}],[\"thread\",{\"1\":{\"328\":1,\"1164\":2}}],[\"threadcreateprofile\",{\"1\":{\"323\":1}}],[\"threadcreate\",{\"1\":{\"323\":1,\"324\":1}}],[\"threadpoolexecutor\",{\"1\":{\"645\":1}}],[\"threadpool\",{\"1\":{\"137\":1}}],[\"thrift\",{\"1\":{\"122\":2}}],[\"te\",{\"1\":{\"1415\":2}}],[\"tetj8iy+ifbt8slc+rrq\",{\"1\":{\"702\":1}}],[\"telnet是什么操作\",{\"1\":{\"603\":1,\"675\":1}}],[\"tell\",{\"1\":{\"470\":1}}],[\"tem\",{\"1\":{\"537\":7}}],[\"tempalte\",{\"1\":{\"1426\":1}}],[\"tempdir\",{\"1\":{\"1307\":1}}],[\"temporary\",{\"1\":{\"814\":1,\"819\":1,\"1116\":10}}],[\"temporary说明没有使用到索引\",{\"1\":{\"814\":1}}],[\"temp1对齐系数是8\",{\"1\":{\"513\":1}}],[\"temp1\",{\"1\":{\"513\":1}}],[\"temp\",{\"1\":{\"282\":2,\"429\":2,\"430\":2,\"431\":2,\"432\":2,\"856\":1,\"1114\":1,\"1116\":20,\"1132\":10,\"1173\":10,\"1321\":3}}],[\"template完全一致\",{\"1\":{\"1428\":1}}],[\"template包\",{\"1\":{\"1428\":1}}],[\"templatename\",{\"1\":{\"1426\":1}}],[\"template关联起来\",{\"1\":{\"1426\":1}}],[\"template都有一个funcsmap\",{\"1\":{\"1420\":1}}],[\"template\",{\"0\":{\"1414\":1},\"1\":{\"124\":3,\"1215\":2,\"1308\":1,\"1414\":4,\"1415\":9,\"1417\":2,\"1420\":5,\"1425\":9,\"1426\":12,\"1427\":1,\"1428\":8}}],[\"tee命令将master写入hostname文件中\",{\"1\":{\"1223\":1}}],[\"teem\",{\"1\":{\"477\":1}}],[\"tee\",{\"1\":{\"476\":2,\"774\":1,\"1078\":1,\"1221\":1,\"1222\":2,\"1223\":1,\"1306\":2}}],[\"teardown\",{\"1\":{\"473\":4}}],[\"termsquery\",{\"1\":{\"757\":2}}],[\"termquery\",{\"1\":{\"756\":2,\"763\":2,\"764\":2,\"765\":2}}],[\"term\",{\"1\":{\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":1,\"724\":1,\"732\":1,\"733\":1}}],[\"terminal\",{\"1\":{\"454\":1}}],[\"terminated\",{\"1\":{\"300\":1}}],[\"termloop\",{\"1\":{\"134\":1}}],[\"techan\",{\"1\":{\"133\":1}}],[\"tengo\",{\"1\":{\"130\":1}}],[\"tendermint\",{\"1\":{\"128\":1}}],[\"text3\",{\"1\":{\"1423\":1}}],[\"text2\",{\"1\":{\"1422\":1,\"1423\":1}}],[\"text1\",{\"1\":{\"1422\":1,\"1423\":1}}],[\"textmpl\",{\"1\":{\"1415\":1}}],[\"text类型处理性能远低于varchar\",{\"1\":{\"787\":1}}],[\"text类型的字段不能用于排序\",{\"1\":{\"718\":1}}],[\"text的内容会被分词\",{\"1\":{\"718\":1}}],[\"text取代了需要分词的string\",{\"1\":{\"718\":1}}],[\"textcat\",{\"1\":{\"144\":1}}],[\"text\",{\"0\":{\"718\":1},\"1\":{\"124\":1,\"226\":1,\"391\":2,\"453\":2,\"459\":2,\"633\":1,\"704\":2,\"705\":1,\"706\":5,\"717\":2,\"718\":1,\"720\":1,\"726\":1,\"730\":3,\"733\":1,\"741\":1,\"745\":2,\"815\":1,\"1414\":1,\"1415\":2,\"1422\":1,\"1428\":1}}],[\"textproto\",{\"1\":{\"124\":1}}],[\"testbuilder\",{\"1\":{\"1411\":3}}],[\"testbota\",{\"1\":{\"1387\":3}}],[\"testreader\",{\"1\":{\"1413\":3}}],[\"testreplacer\",{\"1\":{\"1412\":1}}],[\"testreplaceall\",{\"1\":{\"1407\":3}}],[\"testreplace\",{\"1\":{\"1407\":3}}],[\"testrepeat\",{\"1\":{\"1406\":3}}],[\"testround\",{\"1\":{\"1355\":3}}],[\"testlowerandupper\",{\"1\":{\"1409\":3}}],[\"testlog\",{\"1\":{\"1356\":3}}],[\"testlastindex\",{\"1\":{\"1404\":1}}],[\"testpresuffix\",{\"1\":{\"1403\":3}}],[\"testparsecomplex\",{\"1\":{\"1391\":3}}],[\"testparsefloat\",{\"1\":{\"1389\":1}}],[\"testpow\",{\"1\":{\"1358\":3}}],[\"testquote\",{\"1\":{\"1388\":3}}],[\"testquickstart\",{\"1\":{\"910\":1,\"1303\":1}}],[\"testiota\",{\"1\":{\"1385\":3}}],[\"testindex\",{\"1\":{\"1404\":3}}],[\"testindexname\",{\"1\":{\"766\":5}}],[\"testinf\",{\"1\":{\"1351\":3}}],[\"testing\",{\"1\":{\"124\":2,\"446\":2,\"471\":15,\"472\":4,\"473\":8,\"474\":2,\"475\":3,\"477\":7,\"491\":3,\"494\":3,\"498\":1,\"499\":1,\"500\":1,\"630\":2,\"766\":1,\"910\":2,\"1245\":2,\"1303\":1,\"1308\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1350\":1,\"1351\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1355\":1,\"1356\":1,\"1357\":1,\"1358\":1,\"1359\":1,\"1360\":1,\"1361\":1,\"1362\":1,\"1363\":1,\"1364\":1,\"1384\":1,\"1385\":1,\"1386\":1,\"1387\":1,\"1388\":1,\"1389\":1,\"1390\":1,\"1391\":1,\"1392\":1,\"1393\":1,\"1396\":1,\"1397\":1,\"1398\":3,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1404\":2,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":1,\"1409\":1,\"1410\":1,\"1411\":1,\"1412\":1,\"1413\":1}}],[\"testappend\",{\"1\":{\"1393\":3}}],[\"testaotb\",{\"1\":{\"1386\":2}}],[\"testaoti\",{\"1\":{\"1384\":3}}],[\"testatob\",{\"1\":{\"1386\":1}}],[\"testabs\",{\"1\":{\"1348\":3}}],[\"testn\",{\"1\":{\"1361\":3}}],[\"testname\",{\"1\":{\"1350\":1}}],[\"testtrim\",{\"1\":{\"1410\":3}}],[\"testtrunc\",{\"1\":{\"1352\":3}}],[\"testtan\",{\"1\":{\"1364\":3}}],[\"testtoolparallel\",{\"1\":{\"473\":30}}],[\"testtool\",{\"1\":{\"473\":10}}],[\"testmap\",{\"1\":{\"1405\":3}}],[\"testmax\",{\"1\":{\"1346\":3}}],[\"testmod\",{\"1\":{\"1349\":3}}],[\"testmin\",{\"1\":{\"1347\":3}}],[\"testcut\",{\"1\":{\"1400\":3}}],[\"testcube\",{\"1\":{\"1360\":3}}],[\"testclone\",{\"1\":{\"1396\":3}}],[\"testcount\",{\"1\":{\"1399\":3}}],[\"testcontainsrune\",{\"1\":{\"1398\":3}}],[\"testcontainsany\",{\"1\":{\"1398\":3}}],[\"testcontains\",{\"1\":{\"1398\":3}}],[\"testcontroller\",{\"1\":{\"1166\":1}}],[\"testcompare\",{\"1\":{\"1397\":3}}],[\"testcos\",{\"1\":{\"1363\":3}}],[\"testceil\",{\"1\":{\"1354\":3}}],[\"testcasbin\",{\"1\":{\"1245\":1}}],[\"testcase\",{\"1\":{\"449\":3}}],[\"test0\",{\"1\":{\"1047\":4}}],[\"testex\",{\"1\":{\"1357\":3}}],[\"testemployee\",{\"1\":{\"810\":4,\"814\":2,\"820\":11,\"821\":2}}],[\"testequalfold\",{\"1\":{\"1401\":3}}],[\"testequal\",{\"1\":{\"471\":12,\"472\":3,\"473\":4,\"474\":2}}],[\"testhighlightwithtermquery\",{\"1\":{\"766\":1}}],[\"testhello\",{\"1\":{\"446\":1,\"447\":2}}],[\"test`\",{\"1\":{\"630\":1}}],[\"testdata\",{\"1\":{\"474\":2,\"477\":7}}],[\"test或者是想要测试的包或者功能作为文件前缀\",{\"1\":{\"471\":1}}],[\"test的运行目录\",{\"1\":{\"469\":1}}],[\"testfield\",{\"1\":{\"1402\":3}}],[\"testformatcomplex\",{\"1\":{\"1392\":3}}],[\"testformatfloat\",{\"1\":{\"1390\":3}}],[\"testfloat\",{\"1\":{\"1389\":2}}],[\"testfloor\",{\"1\":{\"1350\":2,\"1353\":3}}],[\"testflag命令自行查阅\",{\"1\":{\"469\":1}}],[\"testfunc命令\",{\"1\":{\"466\":1}}],[\"test命令默认运行所有的单元测试\",{\"1\":{\"468\":1}}],[\"test命令\",{\"1\":{\"468\":1}}],[\"testsplit\",{\"1\":{\"1408\":3}}],[\"testsin\",{\"1\":{\"1362\":3}}],[\"testsqrt\",{\"1\":{\"1359\":3}}],[\"tests\",{\"1\":{\"494\":3}}],[\"teststruct\",{\"1\":{\"339\":1}}],[\"testsum\",{\"1\":{\"314\":3,\"471\":12,\"472\":3,\"473\":4}}],[\"test\",{\"0\":{\"503\":1},\"1\":{\"155\":1,\"406\":1,\"446\":2,\"447\":1,\"449\":6,\"454\":2,\"457\":1,\"466\":1,\"467\":4,\"468\":16,\"470\":5,\"471\":30,\"472\":8,\"473\":24,\"475\":8,\"476\":9,\"477\":23,\"480\":1,\"481\":4,\"482\":4,\"483\":2,\"486\":6,\"487\":10,\"491\":7,\"493\":2,\"494\":5,\"498\":4,\"502\":4,\"503\":6,\"505\":1,\"514\":1,\"620\":2,\"630\":1,\"651\":1,\"692\":2,\"706\":3,\"845\":1,\"891\":1,\"893\":1,\"1047\":1,\"1133\":1,\"1163\":1,\"1166\":3,\"1281\":1,\"1307\":1,\"1410\":10}}],[\"test分支会被测试人员合并到develop开发分支\",{\"1\":{\"58\":1}}],[\"tlsnextproto\",{\"1\":{\"1336\":1}}],[\"tlsconfig\",{\"1\":{\"911\":1,\"1336\":1}}],[\"tls配置\",{\"1\":{\"911\":1}}],[\"tls或websockets连接到mqtt代理\",{\"1\":{\"145\":1}}],[\"tls\",{\"1\":{\"124\":1,\"641\":2,\"911\":1,\"1132\":1,\"1173\":1}}],[\"tdea\",{\"1\":{\"124\":1}}],[\"tigera\",{\"1\":{\"1228\":1}}],[\"tizi365\",{\"1\":{\"757\":1}}],[\"tizi\",{\"1\":{\"752\":2,\"756\":1,\"757\":1,\"763\":1,\"764\":1,\"765\":1}}],[\"title\",{\"1\":{\"717\":5,\"723\":1,\"745\":1,\"746\":3,\"756\":2,\"758\":1,\"763\":1,\"765\":1,\"1166\":1}}],[\"tier\",{\"1\":{\"705\":1}}],[\"tick\",{\"1\":{\"653\":1}}],[\"ticker是一个定时器\",{\"1\":{\"1434\":1}}],[\"ticker\",{\"0\":{\"1434\":1},\"1\":{\"426\":2,\"1434\":4}}],[\"tidy\",{\"1\":{\"456\":1}}],[\"tidb\",{\"1\":{\"123\":2,\"334\":1}}],[\"tinyint\",{\"1\":{\"340\":4,\"341\":4,\"791\":2,\"892\":1}}],[\"tile38\",{\"1\":{\"135\":1}}],[\"time包存放了基础的时间单位常量\",{\"1\":{\"1430\":1}}],[\"time包提供了时间和日历的相关的函数与方法\",{\"1\":{\"1429\":1}}],[\"timer是一次性的\",{\"1\":{\"1434\":1}}],[\"timer是一个计时器\",{\"1\":{\"1433\":1}}],[\"timer\",{\"0\":{\"1433\":1},\"1\":{\"1433\":4}}],[\"timerencoder本质上其实是一个函数\",{\"1\":{\"1303\":1}}],[\"timerctx会在时间到期后自动取消当前上下文\",{\"1\":{\"428\":1}}],[\"timerctx在cancelctx\",{\"1\":{\"428\":1}}],[\"timerctx\",{\"0\":{\"428\":1},\"1\":{\"423\":1}}],[\"timeformat\",{\"1\":{\"1303\":5}}],[\"timeencoder\",{\"1\":{\"1302\":3,\"1303\":1}}],[\"timeerror类型的\",{\"1\":{\"393\":2}}],[\"timeerror类型的错误\",{\"1\":{\"393\":1}}],[\"timeerror\",{\"1\":{\"393\":4}}],[\"timekey\",{\"1\":{\"1302\":3,\"1303\":1}}],[\"time服务器会被认为停机的时间长度\",{\"1\":{\"1161\":1}}],[\"timeindex\",{\"1\":{\"1026\":2}}],[\"time=0\",{\"1\":{\"1194\":1,\"1195\":5,\"1196\":3,\"1197\":9}}],[\"time=$\",{\"1\":{\"1174\":1}}],[\"time=375\",{\"1\":{\"813\":1}}],[\"time=4\",{\"1\":{\"813\":1}}],[\"timed\",{\"1\":{\"724\":1,\"741\":1,\"768\":1}}],[\"timedmap\",{\"1\":{\"127\":1}}],[\"time||epoch\",{\"1\":{\"721\":1}}],[\"time列上加索引\",{\"1\":{\"653\":1}}],[\"timestamp\",{\"1\":{\"653\":5,\"967\":4,\"1307\":2}}],[\"timewait\",{\"1\":{\"618\":1,\"690\":1}}],[\"timech\",{\"1\":{\"419\":3}}],[\"timeoutsec=0\",{\"1\":{\"1223\":1}}],[\"timeout的默认值是\",{\"1\":{\"1163\":1}}],[\"timeout参数设置的时间内最大失败次数\",{\"1\":{\"1161\":1}}],[\"timeout与max\",{\"1\":{\"1161\":1}}],[\"timeout=5s\",{\"1\":{\"1163\":1}}],[\"timeout=10s\",{\"1\":{\"1163\":1}}],[\"timeout=10m0s\",{\"1\":{\"503\":1}}],[\"timeout=3m`\",{\"1\":{\"630\":1}}],[\"timeout=3m\",{\"1\":{\"630\":1}}],[\"timeout\",{\"0\":{\"488\":1},\"1\":{\"390\":1,\"421\":1,\"426\":2,\"428\":3,\"468\":1,\"469\":1,\"546\":1,\"769\":1,\"770\":1,\"776\":1,\"965\":1,\"971\":3,\"1000\":1,\"1010\":1,\"1029\":1,\"1037\":1,\"1047\":1,\"1078\":2,\"1123\":1,\"1130\":2,\"1131\":2,\"1158\":2,\"1163\":3,\"1164\":3,\"1332\":1}}],[\"timelines\",{\"1\":{\"328\":1}}],[\"time\",{\"0\":{\"1429\":1},\"1\":{\"124\":1,\"314\":3,\"323\":6,\"326\":1,\"393\":6,\"396\":4,\"412\":13,\"417\":2,\"419\":6,\"421\":12,\"424\":4,\"425\":2,\"426\":4,\"427\":12,\"428\":9,\"429\":6,\"430\":6,\"431\":12,\"432\":12,\"470\":3,\"499\":2,\"500\":4,\"546\":5,\"557\":4,\"569\":1,\"581\":1,\"641\":3,\"653\":3,\"724\":4,\"746\":4,\"756\":4,\"771\":1,\"794\":2,\"813\":2,\"911\":9,\"916\":3,\"917\":2,\"967\":2,\"1037\":1,\"1047\":7,\"1090\":2,\"1133\":1,\"1163\":2,\"1164\":2,\"1174\":2,\"1175\":1,\"1195\":2,\"1196\":1,\"1197\":3,\"1289\":4,\"1301\":2,\"1303\":5,\"1307\":3,\"1308\":1,\"1429\":19,\"1431\":1,\"1432\":2,\"1433\":2,\"1434\":2,\"1435\":5}}],[\"tips\",{\"1\":{\"317\":1}}],[\"tip\",{\"1\":{\"61\":1,\"62\":1}}],[\"tan\",{\"0\":{\"1364\":1},\"1\":{\"1364\":2}}],[\"tangsengdaodaoserver\",{\"1\":{\"331\":1}}],[\"tailmap\",{\"1\":{\"1165\":1}}],[\"task\",{\"1\":{\"654\":1,\"768\":1}}],[\"tasksmax=infinity\",{\"1\":{\"1223\":1}}],[\"tasks\",{\"1\":{\"328\":2,\"768\":1}}],[\"talk\",{\"1\":{\"366\":1,\"370\":2,\"371\":4,\"374\":1}}],[\"ta\",{\"1\":{\"337\":3}}],[\"tap库\",{\"1\":{\"145\":1}}],[\"tab\",{\"1\":{\"347\":1,\"806\":4,\"810\":4}}],[\"tables\",{\"1\":{\"855\":1}}],[\"table会产生\",{\"1\":{\"796\":1}}],[\"table更快\",{\"1\":{\"788\":1}}],[\"table\",{\"1\":{\"258\":1,\"474\":1,\"651\":1,\"653\":2,\"796\":1,\"810\":4,\"814\":1,\"815\":1,\"817\":1,\"848\":1,\"892\":3}}],[\"tablewriter\",{\"1\":{\"122\":1}}],[\"tab缩进\",{\"1\":{\"252\":2}}],[\"tabwriter\",{\"1\":{\"124\":2}}],[\"tar归档文件的包\",{\"1\":{\"1308\":1}}],[\"tarena\",{\"1\":{\"985\":1}}],[\"tardisgo\",{\"1\":{\"136\":1}}],[\"tar文件filesystem\",{\"1\":{\"132\":1}}],[\"tarfs\",{\"1\":{\"132\":1}}],[\"tar\",{\"1\":{\"124\":1,\"132\":1,\"964\":3,\"1028\":1,\"1111\":1,\"1113\":2,\"1223\":1,\"1308\":1}}],[\"target必须是指向error的指针\",{\"1\":{\"393\":1}}],[\"target\",{\"1\":{\"77\":1,\"393\":2,\"403\":6,\"1032\":2,\"1223\":4}}],[\"tag2>\",{\"1\":{\"741\":1}}],[\"tag1>渔船\",{\"1\":{\"741\":1}}],[\"tag1>驻洛杉矶领事馆遭亚裔男子枪击\",{\"1\":{\"741\":1}}],[\"tag1>\",{\"1\":{\"741\":1}}],[\"tagline\",{\"1\":{\"702\":1}}],[\"taglib\",{\"1\":{\"126\":1}}],[\"tags\",{\"1\":{\"58\":1,\"122\":1,\"449\":1,\"717\":2,\"719\":1,\"741\":2,\"745\":1,\"746\":3}}],[\"tagname\",{\"1\":{\"58\":3}}],[\"tag\",{\"0\":{\"38\":1},\"1\":{\"37\":1,\"58\":6,\"132\":2,\"367\":2,\"369\":4,\"449\":4,\"1183\":1,\"1187\":1}}],[\"t\",{\"1\":{\"50\":1,\"124\":1,\"184\":1,\"185\":1,\"221\":4,\"241\":2,\"252\":1,\"255\":1,\"277\":1,\"298\":5,\"300\":15,\"304\":16,\"306\":5,\"307\":3,\"308\":3,\"310\":3,\"312\":7,\"313\":2,\"314\":5,\"337\":3,\"338\":17,\"339\":22,\"340\":9,\"341\":9,\"343\":17,\"344\":16,\"400\":2,\"446\":3,\"453\":1,\"469\":2,\"471\":49,\"472\":17,\"473\":41,\"474\":14,\"477\":13,\"491\":6,\"494\":4,\"495\":2,\"516\":14,\"554\":2,\"635\":3,\"654\":3,\"756\":2,\"766\":16,\"778\":2,\"780\":3,\"813\":6,\"814\":2,\"820\":1,\"910\":2,\"993\":1,\"994\":1,\"1126\":1,\"1127\":1,\"1131\":1,\"1137\":1,\"1163\":1,\"1164\":37,\"1188\":1,\"1223\":1,\"1245\":2,\"1303\":5,\"1311\":1,\"1319\":1,\"1346\":2,\"1347\":2,\"1348\":2,\"1349\":2,\"1350\":2,\"1351\":2,\"1352\":2,\"1353\":2,\"1354\":2,\"1355\":2,\"1356\":2,\"1357\":2,\"1358\":2,\"1359\":2,\"1360\":2,\"1361\":2,\"1362\":2,\"1363\":2,\"1364\":2,\"1384\":2,\"1385\":2,\"1386\":4,\"1387\":2,\"1388\":2,\"1389\":2,\"1390\":2,\"1391\":2,\"1392\":2,\"1393\":2,\"1396\":2,\"1397\":2,\"1398\":6,\"1399\":2,\"1400\":2,\"1401\":3,\"1402\":2,\"1403\":2,\"1404\":4,\"1405\":2,\"1406\":2,\"1407\":4,\"1408\":2,\"1409\":2,\"1410\":2,\"1411\":2,\"1412\":2,\"1413\":2,\"1415\":2,\"1420\":1,\"1425\":3,\"1426\":3,\"1429\":11,\"1433\":2,\"1434\":2}}],[\"trk\",{\"1\":{\"1072\":1}}],[\"trust\",{\"1\":{\"453\":1,\"820\":2,\"822\":2}}],[\"trusted\",{\"1\":{\"453\":1}}],[\"trunc模式打开文件\",{\"1\":{\"402\":1}}],[\"trunc\",{\"1\":{\"400\":2,\"402\":3,\"403\":2,\"410\":1,\"1352\":2}}],[\"true或1则只删除⼀条\",{\"1\":{\"860\":1}}],[\"true表示把满⾜条件的⽂档全部更新\",{\"1\":{\"859\":1}}],[\"true|false\",{\"1\":{\"718\":1,\"719\":1}}],[\"true为真值\",{\"1\":{\"196\":1}}],[\"true\",{\"1\":{\"0\":1,\"2\":2,\"221\":1,\"230\":2,\"282\":2,\"294\":1,\"354\":3,\"355\":1,\"356\":1,\"367\":3,\"369\":1,\"370\":2,\"379\":2,\"420\":5,\"421\":9,\"427\":1,\"434\":2,\"436\":4,\"463\":2,\"471\":5,\"474\":2,\"556\":1,\"584\":1,\"635\":1,\"656\":4,\"704\":2,\"707\":1,\"710\":1,\"717\":2,\"718\":1,\"719\":1,\"722\":2,\"726\":4,\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"756\":3,\"757\":1,\"758\":1,\"763\":1,\"766\":1,\"768\":4,\"769\":4,\"770\":4,\"771\":1,\"852\":1,\"861\":1,\"863\":1,\"1035\":1,\"1047\":3,\"1082\":3,\"1197\":3,\"1245\":1,\"1257\":1,\"1261\":3,\"1265\":1,\"1302\":1,\"1303\":2,\"1304\":1,\"1307\":1,\"1325\":2,\"1328\":3,\"1351\":1,\"1386\":7,\"1387\":2,\"1398\":6,\"1400\":4,\"1401\":3,\"1403\":2,\"1420\":3}}],[\"tryrlock\",{\"1\":{\"431\":1}}],[\"try\",{\"1\":{\"326\":1,\"849\":1,\"853\":1,\"1164\":1}}],[\"trylock\",{\"1\":{\"137\":1,\"431\":1,\"654\":1}}],[\"treap\",{\"1\":{\"127\":1}}],[\"tree索引做覆盖索引\",{\"1\":{\"817\":1}}],[\"tree索引可以减少随机io\",{\"1\":{\"817\":1}}],[\"tree索引底层\",{\"1\":{\"804\":1}}],[\"tree强势登场\",{\"1\":{\"802\":1}}],[\"treemap<>\",{\"1\":{\"1165\":1}}],[\"treemap\",{\"1\":{\"638\":1,\"1165\":1}}],[\"treeset\",{\"1\":{\"638\":1}}],[\"tree\",{\"1\":{\"127\":1,\"258\":1,\"1284\":1,\"1426\":3}}],[\"trayhost\",{\"1\":{\"138\":1}}],[\"transmitted\",{\"1\":{\"1195\":2,\"1196\":1,\"1197\":3}}],[\"transation\",{\"1\":{\"897\":4}}],[\"transaction\",{\"1\":{\"133\":1,\"790\":1,\"1029\":2}}],[\"transport\",{\"1\":{\"768\":1,\"769\":1,\"770\":1,\"1332\":1}}],[\"transform有了解过吗\",{\"1\":{\"598\":1,\"670\":1}}],[\"transfer的缩写\",{\"1\":{\"1278\":1}}],[\"transfer\",{\"1\":{\"124\":1,\"1133\":1}}],[\"translator\",{\"1\":{\"453\":2,\"459\":1}}],[\"tracking\",{\"1\":{\"1003\":1}}],[\"tracker\",{\"1\":{\"138\":1}}],[\"tracked\",{\"1\":{\"22\":1}}],[\"tracing\",{\"1\":{\"454\":1}}],[\"trace命令来完成相关的分析工作\",{\"1\":{\"328\":1}}],[\"trace\",{\"0\":{\"328\":1},\"1\":{\"323\":4,\"324\":5,\"328\":11,\"454\":1,\"469\":2}}],[\"tracerr\",{\"1\":{\"131\":1}}],[\"trimsuffix\",{\"1\":{\"1410\":2}}],[\"trimright\",{\"1\":{\"1410\":2}}],[\"trimprefix\",{\"1\":{\"1410\":2}}],[\"trimleft\",{\"1\":{\"1410\":2}}],[\"trim\",{\"1\":{\"818\":1,\"971\":1,\"1410\":2}}],[\"tried\",{\"1\":{\"1164\":2}}],[\"tries\",{\"1\":{\"1164\":1}}],[\"trie\",{\"1\":{\"127\":1,\"454\":1,\"1284\":1}}],[\"tripledata\",{\"1\":{\"124\":1}}],[\"tridgell\",{\"1\":{\"12\":1}}],[\"toupperspecial\",{\"1\":{\"1409\":2}}],[\"toupper\",{\"1\":{\"1409\":2}}],[\"tolowerspecial\",{\"1\":{\"1409\":2}}],[\"tolower\",{\"1\":{\"1409\":2}}],[\"tostring\",{\"1\":{\"1166\":3}}],[\"toarray\",{\"1\":{\"863\":1}}],[\"tojson\",{\"1\":{\"863\":3}}],[\"tommy\",{\"1\":{\"1281\":1,\"1283\":1}}],[\"tomcatserver+\",{\"1\":{\"1165\":1}}],[\"tomcatserver\",{\"1\":{\"1165\":3}}],[\"tomcatservers\",{\"1\":{\"1160\":2,\"1162\":1,\"1163\":5,\"1165\":2,\"1167\":1}}],[\"tomcat\",{\"1\":{\"1108\":1}}],[\"tom\",{\"1\":{\"379\":3,\"584\":1,\"656\":4,\"725\":1,\"1280\":4,\"1281\":1,\"1283\":1,\"1309\":1}}],[\"toml也逐渐开始流行\",{\"1\":{\"1309\":1}}],[\"toml\",{\"1\":{\"122\":4,\"453\":2,\"459\":1}}],[\"totalindexsize\",{\"1\":{\"862\":1}}],[\"totalsize\",{\"1\":{\"855\":1}}],[\"totalhits\",{\"1\":{\"756\":2,\"766\":3}}],[\"total\",{\"1\":{\"326\":5,\"445\":1,\"449\":1,\"477\":11,\"492\":3,\"653\":1,\"709\":1,\"711\":1,\"712\":1,\"724\":2,\"741\":2,\"749\":1}}],[\"topic2等等\",{\"1\":{\"1062\":1}}],[\"topic分区\",{\"1\":{\"1057\":1}}],[\"topicdetail\",{\"1\":{\"1037\":1}}],[\"topic123\",{\"1\":{\"1034\":17,\"1035\":1,\"1036\":2}}],[\"topic和数据日志\",{\"0\":{\"1025\":1}}],[\"topic的不同分区的数据\",{\"1\":{\"1020\":1}}],[\"topic的分区\",{\"1\":{\"1020\":1}}],[\"topic\",{\"1\":{\"766\":1,\"1020\":2,\"1025\":1,\"1029\":3,\"1034\":18,\"1035\":1,\"1037\":6,\"1047\":2,\"1056\":1,\"1057\":3,\"1060\":2}}],[\"topics\",{\"1\":{\"454\":1,\"1029\":3,\"1034\":8,\"1047\":2}}],[\"top\",{\"1\":{\"326\":1,\"327\":1,\"730\":1,\"1189\":1}}],[\"top命令只是简单的看个大概\",{\"1\":{\"326\":1}}],[\"tookinmillis\",{\"1\":{\"756\":1}}],[\"took\",{\"1\":{\"724\":1,\"741\":1}}],[\"tool\",{\"1\":{\"325\":1,\"326\":2,\"327\":4,\"328\":3,\"471\":30,\"472\":7,\"473\":47,\"474\":2,\"475\":12,\"476\":7,\"477\":23,\"630\":2,\"634\":1}}],[\"tools\",{\"1\":{\"122\":1,\"137\":1,\"273\":1}}],[\"too\",{\"1\":{\"319\":1}}],[\"token123\",{\"1\":{\"1282\":1,\"1283\":1}}],[\"tokenid\",{\"1\":{\"1226\":1}}],[\"tokenexpired\",{\"1\":{\"1092\":2}}],[\"tokens\",{\"1\":{\"706\":1}}],[\"token怎么生成之类的\",{\"1\":{\"625\":1,\"697\":1}}],[\"token缓存相关\",{\"1\":{\"576\":1,\"648\":1}}],[\"token里面包含了什么信息\",{\"1\":{\"572\":1,\"644\":1}}],[\"token的区别\",{\"1\":{\"569\":1,\"641\":2}}],[\"token\",{\"0\":{\"733\":1},\"1\":{\"124\":1,\"634\":1,\"641\":2,\"706\":7,\"733\":2,\"923\":2,\"924\":2,\"1092\":7,\"1093\":1,\"1225\":4,\"1226\":5,\"1227\":2,\"1235\":2,\"1282\":3,\"1283\":3}}],[\"to\",{\"1\":{\"58\":1,\"84\":4,\"141\":1,\"253\":1,\"259\":1,\"289\":2,\"302\":1,\"303\":11,\"317\":2,\"318\":2,\"319\":2,\"320\":4,\"326\":1,\"327\":1,\"344\":2,\"394\":1,\"419\":1,\"446\":1,\"449\":2,\"453\":2,\"454\":2,\"470\":4,\"477\":8,\"717\":1,\"766\":7,\"776\":1,\"822\":1,\"825\":3,\"827\":1,\"965\":1,\"967\":2,\"993\":3,\"1010\":9,\"1035\":1,\"1047\":3,\"1078\":12,\"1163\":1,\"1194\":1,\"1197\":1,\"1262\":1,\"1265\":4,\"1266\":4,\"1301\":3,\"1409\":4}}],[\"todo来进行创建\",{\"1\":{\"425\":1}}],[\"todo\",{\"1\":{\"28\":2,\"425\":3,\"766\":5,\"881\":2,\"882\":2,\"883\":2,\"884\":4,\"1164\":1}}],[\"torrent\",{\"1\":{\"128\":1}}],[\"tortoisegit\",{\"1\":{\"19\":1,\"23\":1,\"24\":2,\"25\":1}}],[\"torvalds\",{\"1\":{\"12\":1}}],[\"toc\",{\"1\":{\"9\":1}}],[\"1panelproxy\",{\"1\":{\"1221\":2}}],[\"1之前\",{\"1\":{\"1164\":1}}],[\"1秒后会再有新请求尝试连接挂掉的server\",{\"1\":{\"1163\":1}}],[\"1个请求被立即处理\",{\"1\":{\"1155\":1}}],[\"1也行\",{\"1\":{\"1130\":1}}],[\"1代表producer往集群发送数据只要leader应答就可以发送下一条\",{\"1\":{\"1024\":1}}],[\"1等\",{\"1\":{\"1020\":1}}],[\"1效果一样\",{\"1\":{\"861\":1}}],[\"1或其它\",{\"1\":{\"821\":1}}],[\"1+1=\",{\"1\":{\"1421\":1}}],[\"1+rand\",{\"1\":{\"820\":1}}],[\"1+2j\",{\"1\":{\"1391\":2}}],[\"1+2=3\",{\"1\":{\"298\":1}}],[\"1+2i\",{\"1\":{\"294\":1,\"1391\":2}}],[\"1+2+3\",{\"1\":{\"211\":1}}],[\"1byte\",{\"1\":{\"791\":2}}],[\"1m能存储16000\",{\"1\":{\"1154\":1}}],[\"1m\",{\"1\":{\"769\":1,\"770\":1}}],[\"1ms\",{\"1\":{\"469\":1}}],[\"1$\",{\"1\":{\"724\":2}}],[\"1a\",{\"1\":{\"1367\":1}}],[\"1a77947f34deddb41af25e6f0ddb8e830159c179\",{\"1\":{\"702\":1}}],[\"1a未加密哈希函数\",{\"1\":{\"124\":1}}],[\"1阶爬1步或从第n\",{\"1\":{\"654\":1}}],[\"1开发的\",{\"1\":{\"625\":1,\"697\":1}}],[\"1年半\",{\"1\":{\"580\":1,\"652\":1}}],[\"1字\",{\"1\":{\"554\":1}}],[\"1字节\",{\"1\":{\"554\":1}}],[\"1slf\",{\"1\":{\"1078\":1}}],[\"1s\",{\"1\":{\"498\":1}}],[\"1ns等\",{\"1\":{\"469\":1}}],[\"1f422d1\",{\"1\":{\"449\":2}}],[\"1fffp\",{\"1\":{\"182\":1}}],[\"1<<64\",{\"1\":{\"1343\":1}}],[\"1<<63\",{\"1\":{\"1343\":1,\"1430\":1}}],[\"1<<16\",{\"1\":{\"1343\":1}}],[\"1<<15\",{\"1\":{\"319\":1,\"1343\":1}}],[\"1<<8\",{\"1\":{\"1343\":1}}],[\"1<<intsize\",{\"1\":{\"1343\":1}}],[\"1<<7\",{\"1\":{\"1343\":1}}],[\"1<<\",{\"1\":{\"1343\":1}}],[\"1<<j\",{\"1\":{\"653\":1}}],[\"1<<32\",{\"1\":{\"1343\":1}}],[\"1<<31\",{\"1\":{\"1343\":1}}],[\"1<<3\",{\"1\":{\"221\":1}}],[\"1e2\",{\"1\":{\"221\":4}}],[\"1e6i\",{\"1\":{\"183\":1}}],[\"1e6\",{\"1\":{\"182\":1}}],[\"17fae7a2c0bb66c2834ad7d3dc338c0a5707aea5caf4337138f15c6f2079713e\",{\"1\":{\"1197\":1}}],[\"175\",{\"1\":{\"1010\":1}}],[\"172\",{\"1\":{\"813\":1,\"822\":1,\"1194\":8,\"1195\":17,\"1196\":7,\"1197\":5}}],[\"1727066104528\",{\"1\":{\"705\":1}}],[\"1744\",{\"1\":{\"476\":1}}],[\"17及以前\",{\"1\":{\"289\":1}}],[\"17\",{\"1\":{\"221\":1,\"328\":3,\"444\":1,\"449\":3,\"453\":2,\"459\":1,\"634\":1,\"635\":1,\"638\":1,\"639\":1,\"641\":1,\"645\":1,\"651\":1,\"702\":1,\"736\":1,\"767\":1,\"822\":1,\"861\":1,\"965\":1,\"970\":1,\"971\":1,\"974\":1,\"993\":12,\"1194\":8,\"1195\":17,\"1196\":7,\"1197\":5,\"1380\":1,\"1381\":1,\"1429\":1,\"1431\":2}}],[\"1315643\",{\"1\":{\"1390\":2}}],[\"139\",{\"1\":{\"1123\":2,\"1136\":2,\"1138\":1,\"1143\":1,\"1144\":1,\"1166\":3}}],[\"1398\",{\"1\":{\"476\":1}}],[\"1337\",{\"1\":{\"1073\":1,\"1079\":3}}],[\"1332\",{\"1\":{\"476\":1}}],[\"134217728\",{\"1\":{\"965\":1}}],[\"134\",{\"1\":{\"910\":1,\"912\":1}}],[\"138\",{\"1\":{\"830\":1}}],[\"1388\",{\"1\":{\"476\":1}}],[\"132\",{\"1\":{\"702\":1}}],[\"1321中所定义的md5哈希算法\",{\"1\":{\"124\":1}}],[\"136\",{\"1\":{\"645\":1}}],[\"136只出现一次的数字\",{\"1\":{\"573\":1,\"645\":2}}],[\"13s\",{\"1\":{\"477\":1}}],[\"1353\",{\"1\":{\"476\":1}}],[\"13版本时go团队推出了链式错误\",{\"1\":{\"389\":1}}],[\"13\",{\"0\":{\"766\":1,\"886\":1,\"1122\":1},\"1\":{\"212\":2,\"221\":1,\"282\":1,\"317\":8,\"320\":4,\"393\":1,\"454\":1,\"600\":1,\"633\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"641\":1,\"651\":1,\"672\":1,\"721\":1,\"794\":1,\"861\":1,\"965\":1,\"967\":1,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"1082\":2,\"1165\":2}}],[\"1i\",{\"1\":{\"183\":3}}],[\"169\",{\"1\":{\"1197\":21,\"1198\":1,\"1225\":1,\"1228\":1}}],[\"1675923790000\",{\"1\":{\"1010\":1}}],[\"1675923790881\",{\"1\":{\"1010\":1}}],[\"1675923791000\",{\"1\":{\"1010\":2}}],[\"1675923791883\",{\"1\":{\"1010\":1}}],[\"1675923787876\",{\"1\":{\"1010\":1}}],[\"1675923789879\",{\"1\":{\"1010\":1}}],[\"1675923789000\",{\"1\":{\"1010\":1}}],[\"1675923475097\",{\"1\":{\"1010\":1}}],[\"1675923476100\",{\"1\":{\"1010\":1}}],[\"1675923473000\",{\"1\":{\"1010\":1}}],[\"1675923474095\",{\"1\":{\"1010\":1}}],[\"1675923474000\",{\"1\":{\"1010\":3}}],[\"1675915938000\",{\"1\":{\"1010\":1}}],[\"1675915939398\",{\"1\":{\"1010\":1}}],[\"16383\",{\"1\":{\"1010\":2}}],[\"16384\",{\"1\":{\"1006\":1,\"1007\":1,\"1010\":4}}],[\"1635\",{\"1\":{\"476\":1}}],[\"1611298430\",{\"1\":{\"981\":1}}],[\"16162\",{\"1\":{\"892\":1}}],[\"16位半精度ieee\",{\"1\":{\"720\":1}}],[\"168\",{\"1\":{\"702\":1,\"724\":2,\"732\":2,\"830\":1,\"910\":1,\"912\":1,\"1010\":1,\"1078\":1,\"1165\":1,\"1194\":2,\"1219\":2,\"1225\":2,\"1369\":1}}],[\"1688\",{\"1\":{\"475\":1}}],[\"16s\",{\"1\":{\"477\":1}}],[\"1663\",{\"1\":{\"476\":1}}],[\"1650\",{\"1\":{\"393\":1}}],[\"164\",{\"1\":{\"368\":1,\"1123\":2,\"1136\":2,\"1138\":1,\"1143\":1,\"1144\":1,\"1166\":3}}],[\"16\",{\"1\":{\"182\":1,\"197\":2,\"211\":1,\"221\":1,\"233\":2,\"255\":1,\"353\":2,\"367\":1,\"428\":1,\"449\":1,\"471\":1,\"473\":2,\"477\":1,\"491\":1,\"554\":2,\"634\":1,\"635\":1,\"638\":1,\"639\":1,\"641\":1,\"645\":1,\"651\":1,\"724\":2,\"732\":1,\"794\":1,\"861\":1,\"965\":2,\"967\":1,\"970\":1,\"971\":1,\"974\":1,\"1039\":1,\"1164\":1,\"1165\":1,\"1194\":2,\"1195\":2,\"1197\":7,\"1225\":2,\"1228\":1,\"1303\":2,\"1321\":1,\"1399\":1,\"1440\":2,\"1441\":2,\"1442\":1,\"1443\":2,\"1444\":1}}],[\"16序列的的编码和解码\",{\"1\":{\"124\":1}}],[\"1q\",{\"1\":{\"145\":1}}],[\"1兼容\",{\"1\":{\"144\":1}}],[\"141593\",{\"1\":{\"1390\":1}}],[\"14159261234567891011\",{\"1\":{\"1390\":1}}],[\"14159265358979323846264338327950288419716939937510582097494459\",{\"1\":{\"1345\":1}}],[\"1415926\",{\"1\":{\"337\":1,\"1399\":1,\"1417\":2}}],[\"145114\",{\"1\":{\"1389\":2}}],[\"14k\",{\"1\":{\"476\":1}}],[\"1422773729\",{\"1\":{\"306\":1}}],[\"140\",{\"1\":{\"258\":1}}],[\"149\",{\"1\":{\"258\":1}}],[\"14\",{\"0\":{\"767\":1,\"887\":1,\"1123\":1},\"1\":{\"142\":1,\"221\":1,\"233\":1,\"305\":1,\"317\":3,\"320\":9,\"453\":2,\"459\":1,\"471\":3,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"641\":1,\"645\":1,\"651\":1,\"705\":1,\"706\":1,\"741\":1,\"794\":1,\"821\":1,\"832\":1,\"834\":1,\"861\":1,\"965\":1,\"967\":1,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"1417\":1,\"1424\":2}}],[\"1和fnv\",{\"1\":{\"124\":1}}],[\"1数据结构\",{\"1\":{\"124\":1}}],[\"1解析和序列化的共享的\",{\"1\":{\"124\":1}}],[\"1协议\",{\"1\":{\"124\":1}}],[\"18160\",{\"1\":{\"993\":12}}],[\"1818\",{\"1\":{\"476\":1}}],[\"18之后\",{\"1\":{\"516\":1}}],[\"18s\",{\"1\":{\"477\":1}}],[\"18推出的一个新功能\",{\"1\":{\"477\":1}}],[\"18引入的关于多模块管理的一个新的解决方案\",{\"1\":{\"462\":1}}],[\"18刚推出泛型的时候确实导致编译更慢了\",{\"1\":{\"345\":1}}],[\"18以后\",{\"1\":{\"340\":1}}],[\"18版本后interface有什么增强\",{\"1\":{\"563\":1,\"635\":2}}],[\"18版本加入了对泛型的支持\",{\"1\":{\"336\":1}}],[\"18版本更新之后\",{\"1\":{\"244\":1}}],[\"18版本更新之前网上大多数的文章都是这样描述slice的扩容策略的\",{\"1\":{\"244\":1}}],[\"18最大的变化就是加入了泛型\",{\"1\":{\"289\":1}}],[\"18时\",{\"1\":{\"289\":1}}],[\"184s\",{\"1\":{\"477\":1}}],[\"184\",{\"1\":{\"258\":1}}],[\"18\",{\"1\":{\"130\":1,\"165\":2,\"221\":1,\"233\":2,\"265\":1,\"270\":2,\"271\":1,\"307\":2,\"344\":1,\"365\":1,\"379\":2,\"453\":2,\"459\":1,\"477\":6,\"516\":1,\"634\":1,\"635\":2,\"638\":1,\"639\":1,\"641\":1,\"645\":1,\"651\":1,\"706\":1,\"713\":1,\"725\":1,\"832\":1,\"833\":1,\"834\":1,\"861\":1,\"965\":1,\"970\":1,\"974\":1,\"1195\":1,\"1280\":1,\"1311\":1,\"1312\":1,\"1317\":2,\"1320\":2,\"1331\":1,\"1380\":1,\"1381\":1,\"1392\":1,\"1426\":2,\"1427\":2,\"1428\":3,\"1429\":1,\"1443\":2}}],[\"18008\",{\"1\":{\"1010\":1}}],[\"18007\",{\"1\":{\"1010\":2}}],[\"18003\",{\"1\":{\"1010\":2}}],[\"18005\",{\"1\":{\"1010\":2}}],[\"18006\",{\"1\":{\"1010\":2}}],[\"18001\",{\"1\":{\"1010\":2}}],[\"18002\",{\"1\":{\"1010\":3}}],[\"18004\",{\"1\":{\"1010\":3}}],[\"180\",{\"1\":{\"124\":2,\"1165\":1}}],[\"186\",{\"1\":{\"124\":2}}],[\"1中所定义的rsa加密\",{\"1\":{\"124\":1}}],[\"19+90i\",{\"1\":{\"1392\":1}}],[\"198\",{\"1\":{\"1235\":1}}],[\"1985543\",{\"1\":{\"477\":1}}],[\"199\",{\"1\":{\"1076\":1,\"1077\":1,\"1078\":1,\"1079\":1,\"1081\":1,\"1082\":1,\"1086\":4,\"1087\":5}}],[\"19990\",{\"1\":{\"258\":1}}],[\"194\",{\"1\":{\"813\":1}}],[\"192\",{\"1\":{\"702\":1,\"724\":2,\"732\":2,\"830\":1,\"910\":1,\"912\":1,\"1010\":1,\"1078\":1,\"1165\":2,\"1194\":2,\"1197\":21,\"1198\":1,\"1225\":1,\"1228\":1,\"1368\":1,\"1369\":1}}],[\"19\",{\"1\":{\"221\":1,\"268\":2,\"476\":2,\"513\":1,\"581\":1,\"635\":1,\"638\":1,\"639\":1,\"641\":1,\"651\":1,\"653\":2,\"706\":1,\"861\":1,\"965\":1,\"970\":1,\"974\":1,\"1165\":2,\"1306\":1,\"1318\":1,\"1319\":2}}],[\"1958\",{\"1\":{\"475\":1}}],[\"1950中所定义的zlib格式压缩数据的读和写\",{\"1\":{\"124\":1}}],[\"1951中所定义的gzip格式压缩文件的读和写\",{\"1\":{\"124\":1}}],[\"1951中所定义的deflate压缩数据格式\",{\"1\":{\"124\":1}}],[\"1969年~\",{\"1\":{\"12\":1}}],[\"1本地相对路径\",{\"0\":{\"41\":1}}],[\"1本地删除与恢复\",{\"1\":{\"25\":1}}],[\"1合并\",{\"0\":{\"35\":1}}],[\"1查看分支\",{\"0\":{\"33\":1}}],[\"15789\",{\"1\":{\"1033\":1}}],[\"1572162\",{\"1\":{\"18\":1}}],[\"15593\",{\"1\":{\"1033\":1}}],[\"1556\",{\"1\":{\"476\":1}}],[\"15分钟\",{\"1\":{\"965\":1}}],[\"1589584930103\",{\"1\":{\"721\":1}}],[\"153\",{\"1\":{\"702\":1}}],[\"1538\",{\"1\":{\"476\":1}}],[\"15s\",{\"1\":{\"477\":2}}],[\"151\",{\"1\":{\"476\":1,\"639\":1}}],[\"1526\",{\"1\":{\"476\":1}}],[\"1592\",{\"1\":{\"476\":1}}],[\"1500\",{\"1\":{\"1194\":3,\"1195\":4,\"1197\":1}}],[\"1500s\",{\"1\":{\"813\":1}}],[\"1501874\",{\"1\":{\"1165\":1}}],[\"1507\",{\"1\":{\"476\":1}}],[\"150\",{\"1\":{\"258\":1}}],[\"15e+0\",{\"1\":{\"182\":1}}],[\"15\",{\"0\":{\"771\":1},\"1\":{\"30\":1,\"182\":2,\"221\":1,\"233\":1,\"317\":2,\"326\":2,\"328\":6,\"453\":2,\"459\":1,\"472\":1,\"473\":1,\"477\":1,\"634\":1,\"635\":1,\"637\":1,\"638\":1,\"639\":1,\"641\":1,\"645\":1,\"651\":1,\"702\":1,\"706\":1,\"794\":1,\"817\":1,\"822\":1,\"861\":1,\"965\":1,\"967\":1,\"970\":1,\"971\":1,\"973\":1,\"974\":1,\"1036\":1,\"1303\":1,\"1325\":2,\"1328\":5,\"1343\":1,\"1380\":1,\"1381\":1,\"1431\":2}}],[\"113\",{\"1\":{\"730\":4,\"1164\":1,\"1165\":1}}],[\"1188983000\",{\"1\":{\"476\":1}}],[\"11800h\",{\"1\":{\"475\":1,\"476\":3}}],[\"115\",{\"1\":{\"1035\":1,\"1036\":1,\"1130\":1,\"1135\":3}}],[\"11588\",{\"1\":{\"1010\":2}}],[\"11589\",{\"1\":{\"1010\":2}}],[\"1158000\",{\"1\":{\"476\":1}}],[\"1153796000\",{\"1\":{\"475\":1}}],[\"11th\",{\"1\":{\"475\":1,\"476\":3}}],[\"110\",{\"1\":{\"471\":5,\"993\":2,\"1018\":1,\"1219\":1}}],[\"11官方终于推出了go\",{\"1\":{\"442\":1}}],[\"11211\",{\"1\":{\"1165\":3}}],[\"112645b48dc2a53020cd20daee904ab9\",{\"1\":{\"1157\":1}}],[\"1123\",{\"1\":{\"476\":2}}],[\"1123163300\",{\"1\":{\"476\":1}}],[\"112\",{\"1\":{\"439\":2,\"993\":1}}],[\"117\",{\"1\":{\"326\":10}}],[\"114154\",{\"1\":{\"441\":1}}],[\"114514\",{\"1\":{\"337\":1,\"358\":1,\"359\":2,\"361\":2,\"415\":1}}],[\"114\",{\"1\":{\"258\":1,\"730\":1,\"1385\":2}}],[\"119\",{\"1\":{\"258\":1,\"1321\":1}}],[\"111\",{\"1\":{\"258\":4,\"471\":5,\"472\":1,\"473\":1,\"1194\":1,\"1225\":2,\"1376\":1,\"1390\":2}}],[\"1162108\",{\"1\":{\"476\":1}}],[\"116\",{\"1\":{\"253\":1,\"1010\":1}}],[\"11i\",{\"1\":{\"183\":1}}],[\"11\",{\"0\":{\"53\":1,\"56\":1,\"57\":1,\"58\":1,\"753\":1,\"884\":1,\"1120\":1},\"1\":{\"30\":1,\"182\":1,\"221\":1,\"305\":1,\"310\":1,\"318\":8,\"361\":2,\"449\":2,\"453\":2,\"454\":2,\"459\":1,\"600\":1,\"633\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"641\":1,\"645\":1,\"651\":1,\"672\":1,\"702\":1,\"721\":1,\"724\":2,\"730\":3,\"791\":2,\"794\":1,\"817\":4,\"856\":1,\"861\":1,\"965\":1,\"967\":2,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"1036\":1,\"1165\":3,\"1194\":1,\"1195\":1,\"1197\":3,\"1307\":3,\"1377\":1,\"1379\":1,\"1393\":1,\"1411\":1,\"1413\":1,\"1429\":1,\"1431\":2,\"1441\":1,\"1442\":1}}],[\"126\",{\"1\":{\"1344\":1}}],[\"12位之间\",{\"1\":{\"1289\":1}}],[\"12t19\",{\"1\":{\"1197\":1}}],[\"12cb\",{\"1\":{\"1194\":1}}],[\"124\",{\"1\":{\"1010\":1}}],[\"1249847412109375\",{\"1\":{\"182\":1}}],[\"1202\",{\"1\":{\"1318\":1,\"1319\":2}}],[\"120230\",{\"1\":{\"894\":1,\"895\":1,\"896\":1}}],[\"120\",{\"1\":{\"1165\":1,\"1311\":1,\"1312\":1,\"1317\":2,\"1320\":2,\"1331\":1}}],[\"1203622300\",{\"1\":{\"476\":1}}],[\"121\",{\"1\":{\"1078\":1,\"1079\":1,\"1082\":1,\"1086\":4,\"1087\":5,\"1321\":1}}],[\"12132\",{\"1\":{\"892\":1,\"893\":1}}],[\"1211017600\",{\"1\":{\"475\":1}}],[\"12s\",{\"1\":{\"477\":1}}],[\"127\",{\"1\":{\"324\":1,\"326\":1,\"327\":3,\"328\":2,\"720\":1,\"744\":2,\"756\":2,\"856\":1,\"867\":1,\"891\":1,\"893\":1,\"963\":2,\"965\":1,\"981\":3,\"985\":1,\"993\":7,\"994\":2,\"1002\":2,\"1003\":1,\"1004\":3,\"1010\":34,\"1029\":1,\"1034\":14,\"1078\":2,\"1158\":1,\"1160\":6,\"1162\":3,\"1163\":15,\"1167\":3,\"1168\":3,\"1194\":2,\"1195\":1,\"1196\":1,\"1233\":1,\"1280\":3,\"1281\":1,\"1313\":1,\"1315\":1}}],[\"128g\",{\"1\":{\"1039\":1}}],[\"1280\",{\"1\":{\"476\":1}}],[\"128\",{\"1\":{\"302\":1,\"439\":2,\"720\":1,\"965\":1,\"1194\":1,\"1391\":2,\"1392\":3}}],[\"1234\",{\"1\":{\"1374\":2}}],[\"12345\",{\"1\":{\"924\":1,\"963\":3}}],[\"123456\",{\"1\":{\"822\":1,\"830\":1,\"859\":2,\"873\":2,\"891\":1,\"910\":1,\"912\":1,\"1313\":1,\"1314\":2,\"1315\":1,\"1334\":1}}],[\"12345e+5i\",{\"1\":{\"183\":1}}],[\"12345e+5\",{\"1\":{\"182\":1}}],[\"1236\",{\"1\":{\"825\":1}}],[\"123\",{\"1\":{\"269\":1,\"416\":2,\"417\":1,\"476\":2,\"1139\":4,\"1280\":4,\"1283\":1}}],[\"123i\",{\"1\":{\"183\":1}}],[\"12\",{\"0\":{\"54\":1,\"755\":1,\"885\":1,\"1121\":1},\"1\":{\"30\":2,\"209\":1,\"221\":1,\"233\":2,\"327\":1,\"431\":1,\"432\":1,\"453\":2,\"459\":1,\"491\":1,\"516\":2,\"600\":1,\"633\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"641\":1,\"645\":1,\"651\":3,\"672\":1,\"709\":2,\"710\":1,\"721\":2,\"724\":4,\"794\":1,\"806\":3,\"832\":1,\"834\":2,\"861\":1,\"894\":1,\"965\":1,\"967\":2,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"1028\":4,\"1075\":1,\"1108\":1,\"1165\":1,\"1166\":1,\"1197\":1,\"1321\":3,\"1349\":1,\"1392\":1,\"1432\":2,\"1443\":3}}],[\"10>2\",{\"1\":{\"1417\":1}}],[\"10+12\",{\"1\":{\"1392\":1}}],[\"10+版本\",{\"1\":{\"1274\":1}}],[\"107\",{\"1\":{\"1165\":1}}],[\"10r\",{\"1\":{\"1154\":1}}],[\"10之间的数据\",{\"1\":{\"861\":1}}],[\"10次\",{\"1\":{\"821\":1}}],[\"10s\",{\"1\":{\"813\":1,\"1163\":1}}],[\"10t12\",{\"1\":{\"721\":1}}],[\"10中的响应信息\",{\"1\":{\"717\":2}}],[\"1062错误是指一些主键重复\",{\"1\":{\"822\":2}}],[\"106\",{\"1\":{\"706\":1,\"1197\":2}}],[\"1068\",{\"1\":{\"476\":1}}],[\"1068682\",{\"1\":{\"476\":1}}],[\"105\",{\"1\":{\"706\":1,\"822\":1}}],[\"10569473\",{\"1\":{\"477\":2}}],[\"1056570\",{\"1\":{\"476\":1}}],[\"10试图访问arr的索引5\",{\"1\":{\"654\":1}}],[\"10这种查询\",{\"1\":{\"653\":1}}],[\"10ms内并发发送6个请求\",{\"1\":{\"1156\":1}}],[\"10m可以存储16w\",{\"1\":{\"1154\":1}}],[\"10m表示生成一个大小为10m\",{\"1\":{\"1151\":1}}],[\"10mb\",{\"1\":{\"633\":1}}],[\"10m\",{\"1\":{\"633\":1,\"1151\":3,\"1152\":4,\"1154\":4,\"1155\":1,\"1156\":1,\"1157\":1,\"1158\":1}}],[\"10亿个数据获取前100个最大数据\",{\"1\":{\"613\":1,\"685\":1}}],[\"10923\",{\"1\":{\"1010\":2}}],[\"10922\",{\"1\":{\"1010\":3}}],[\"109\",{\"1\":{\"993\":1}}],[\"1097800\",{\"1\":{\"476\":1}}],[\"1098\",{\"1\":{\"476\":1}}],[\"1038毫秒\",{\"0\":{\"1045\":1}}],[\"1032错误是因为主从数据库数据不一致\",{\"1\":{\"822\":2}}],[\"10345\",{\"1\":{\"476\":1}}],[\"10355\",{\"1\":{\"476\":1}}],[\"10352\",{\"1\":{\"476\":1}}],[\"10313\",{\"1\":{\"476\":1}}],[\"102\",{\"1\":{\"857\":1,\"1078\":1}}],[\"10297\",{\"1\":{\"476\":1}}],[\"1022\",{\"1\":{\"1344\":1}}],[\"10222\",{\"1\":{\"476\":1}}],[\"10225\",{\"1\":{\"476\":1}}],[\"10237\",{\"1\":{\"476\":1}}],[\"10208\",{\"1\":{\"476\":1}}],[\"10213\",{\"1\":{\"476\":1}}],[\"10217\",{\"1\":{\"476\":2}}],[\"10216\",{\"1\":{\"476\":1}}],[\"10219\",{\"1\":{\"475\":1}}],[\"10240\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"10243\",{\"1\":{\"475\":1}}],[\"1024\",{\"1\":{\"223\":1,\"244\":2,\"308\":2,\"338\":2,\"354\":1,\"360\":1,\"378\":2,\"1123\":1,\"1158\":1,\"1420\":4}}],[\"10个协程执行10个+1操作\",{\"1\":{\"429\":1}}],[\"10个斐波那契数\",{\"1\":{\"282\":1}}],[\"1080713900\",{\"1\":{\"476\":1}}],[\"108\",{\"1\":{\"258\":7,\"993\":2}}],[\"10139\",{\"1\":{\"476\":1}}],[\"10141\",{\"1\":{\"476\":1}}],[\"10147\",{\"1\":{\"476\":1}}],[\"10111\",{\"1\":{\"476\":1}}],[\"10158\",{\"1\":{\"476\":1}}],[\"10195\",{\"1\":{\"476\":1}}],[\"10171\",{\"1\":{\"475\":1}}],[\"10126\",{\"1\":{\"475\":1}}],[\"101\",{\"1\":{\"258\":3,\"471\":14,\"472\":2,\"473\":32,\"474\":3,\"857\":1,\"993\":1,\"1123\":2,\"1136\":2,\"1138\":1,\"1143\":1,\"1144\":1,\"1166\":3,\"1393\":1}}],[\"1045291300\",{\"1\":{\"476\":1}}],[\"1042\",{\"1\":{\"476\":1}}],[\"10406\",{\"1\":{\"476\":1}}],[\"104\",{\"1\":{\"258\":3,\"706\":1,\"1321\":1}}],[\"100r\",{\"1\":{\"1158\":1}}],[\"100表示\",{\"1\":{\"985\":1}}],[\"100行以内\",{\"1\":{\"796\":1}}],[\"1003\",{\"1\":{\"770\":2}}],[\"1002ms\",{\"1\":{\"1197\":1}}],[\"1002\",{\"1\":{\"769\":2}}],[\"1001ms\",{\"1\":{\"1195\":1}}],[\"1001\",{\"1\":{\"768\":3,\"770\":1}}],[\"100g\",{\"1\":{\"633\":1}}],[\"100g的文件\",{\"1\":{\"561\":1,\"617\":1,\"633\":1,\"689\":1}}],[\"1006019\",{\"1\":{\"476\":1}}],[\"100644\",{\"1\":{\"449\":5}}],[\"100倍左右\",{\"1\":{\"436\":1}}],[\"1000字节\",{\"1\":{\"815\":1}}],[\"10002\",{\"1\":{\"476\":1}}],[\"10001\",{\"1\":{\"476\":1}}],[\"1000000\",{\"1\":{\"820\":3}}],[\"100000\",{\"1\":{\"347\":1,\"581\":1,\"653\":2,\"820\":2,\"1130\":1}}],[\"10000\",{\"1\":{\"269\":1,\"475\":1,\"820\":2,\"965\":1,\"981\":2,\"1003\":1,\"1004\":3,\"1010\":1,\"1047\":1}}],[\"1000\",{\"1\":{\"233\":1,\"314\":1,\"412\":1,\"430\":2,\"431\":3,\"432\":3,\"435\":2,\"884\":1,\"1010\":3,\"1194\":3,\"1195\":1,\"1430\":3}}],[\"100+3\",{\"1\":{\"228\":1}}],[\"100k\",{\"1\":{\"181\":1}}],[\"100\",{\"1\":{\"181\":1,\"209\":1,\"211\":1,\"228\":3,\"229\":4,\"233\":2,\"245\":2,\"258\":1,\"265\":1,\"266\":1,\"277\":1,\"320\":2,\"326\":11,\"340\":1,\"351\":1,\"379\":2,\"426\":1,\"436\":2,\"445\":3,\"449\":4,\"474\":1,\"475\":2,\"497\":1,\"515\":2,\"556\":1,\"654\":1,\"720\":1,\"748\":1,\"820\":1,\"884\":1,\"985\":1,\"1152\":1,\"1158\":1,\"1307\":1,\"1356\":1,\"1361\":1,\"1440\":1}}],[\"10k\",{\"1\":{\"181\":1}}],[\"10\",{\"0\":{\"28\":1,\"52\":1,\"55\":1,\"750\":1,\"883\":1,\"1046\":1,\"1119\":1,\"1208\":1},\"1\":{\"30\":1,\"55\":7,\"58\":1,\"181\":1,\"192\":2,\"221\":1,\"224\":3,\"233\":1,\"234\":3,\"235\":4,\"236\":4,\"245\":4,\"246\":3,\"259\":1,\"261\":3,\"262\":1,\"263\":1,\"265\":2,\"266\":4,\"276\":1,\"277\":3,\"282\":2,\"283\":1,\"300\":4,\"306\":1,\"310\":2,\"318\":1,\"319\":5,\"320\":5,\"322\":1,\"323\":2,\"326\":1,\"327\":2,\"344\":3,\"375\":3,\"376\":1,\"412\":6,\"417\":2,\"420\":5,\"422\":2,\"429\":2,\"430\":4,\"434\":2,\"436\":5,\"453\":2,\"459\":1,\"471\":14,\"472\":2,\"473\":32,\"474\":2,\"476\":4,\"488\":1,\"497\":1,\"498\":1,\"499\":1,\"500\":1,\"511\":1,\"515\":3,\"548\":1,\"581\":1,\"600\":1,\"601\":2,\"633\":1,\"634\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":2,\"639\":1,\"641\":1,\"645\":1,\"651\":1,\"653\":4,\"654\":4,\"672\":1,\"673\":2,\"706\":1,\"713\":2,\"721\":6,\"724\":4,\"756\":2,\"757\":1,\"758\":1,\"759\":2,\"763\":1,\"771\":3,\"780\":1,\"786\":3,\"788\":1,\"794\":1,\"806\":1,\"813\":4,\"814\":1,\"818\":1,\"820\":3,\"835\":1,\"836\":2,\"837\":1,\"847\":1,\"856\":1,\"861\":4,\"911\":1,\"965\":2,\"967\":2,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"981\":2,\"1029\":2,\"1034\":14,\"1152\":1,\"1158\":1,\"1165\":5,\"1235\":1,\"1321\":1,\"1349\":2,\"1356\":1,\"1361\":1,\"1374\":1,\"1393\":2,\"1406\":2,\"1417\":1,\"1429\":1,\"1431\":2,\"1432\":2}}],[\"1版本管理发展简史\",{\"0\":{\"10\":1}}],[\"1\",{\"0\":{\"9\":1,\"11\":2,\"12\":1,\"13\":1,\"14\":1,\"16\":1,\"18\":1,\"29\":1,\"37\":1,\"43\":1,\"55\":1,\"56\":1,\"64\":1,\"112\":1,\"150\":2,\"151\":1,\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"158\":1,\"164\":1,\"168\":1,\"538\":1,\"717\":2,\"718\":3,\"719\":2,\"720\":1,\"721\":1,\"722\":1,\"723\":1,\"724\":1,\"725\":1,\"728\":1,\"730\":1,\"732\":1,\"756\":1,\"763\":1,\"776\":1,\"845\":2,\"846\":1,\"847\":1,\"848\":1,\"866\":1,\"963\":1,\"970\":1,\"981\":1,\"985\":1,\"993\":1,\"997\":1,\"1002\":1,\"1009\":1,\"1020\":1,\"1022\":1,\"1028\":1,\"1035\":1,\"1075\":1,\"1081\":1,\"1089\":1,\"1095\":1,\"1098\":1,\"1101\":1,\"1146\":1,\"1171\":1,\"1231\":1,\"1273\":2,\"1274\":1,\"1275\":1,\"1277\":1,\"1289\":1},\"1\":{\"5\":3,\"9\":1,\"11\":2,\"12\":2,\"14\":2,\"18\":1,\"19\":1,\"20\":1,\"22\":2,\"25\":2,\"26\":1,\"30\":4,\"36\":1,\"37\":1,\"43\":2,\"48\":1,\"53\":1,\"54\":2,\"58\":2,\"79\":1,\"82\":1,\"84\":1,\"124\":2,\"130\":1,\"145\":2,\"165\":2,\"179\":2,\"182\":3,\"183\":1,\"187\":1,\"191\":1,\"206\":9,\"208\":14,\"209\":7,\"210\":5,\"211\":7,\"212\":6,\"221\":13,\"224\":2,\"228\":4,\"230\":7,\"231\":1,\"232\":2,\"233\":15,\"235\":3,\"236\":2,\"239\":6,\"240\":1,\"241\":11,\"243\":1,\"244\":1,\"245\":6,\"246\":3,\"247\":6,\"248\":2,\"250\":11,\"251\":2,\"259\":2,\"260\":4,\"261\":2,\"262\":3,\"263\":2,\"264\":2,\"266\":1,\"276\":4,\"281\":3,\"282\":5,\"283\":4,\"284\":1,\"285\":8,\"286\":2,\"287\":10,\"294\":9,\"298\":2,\"299\":1,\"301\":1,\"302\":2,\"304\":8,\"305\":1,\"306\":10,\"307\":1,\"309\":1,\"310\":2,\"312\":1,\"313\":1,\"314\":2,\"322\":1,\"323\":1,\"324\":1,\"326\":1,\"327\":4,\"328\":2,\"337\":2,\"338\":4,\"339\":1,\"340\":3,\"341\":1,\"343\":2,\"344\":10,\"353\":1,\"364\":1,\"367\":1,\"370\":2,\"371\":1,\"375\":1,\"376\":2,\"381\":4,\"383\":1,\"384\":1,\"385\":3,\"386\":2,\"390\":2,\"396\":9,\"398\":1,\"403\":3,\"408\":1,\"412\":3,\"414\":1,\"415\":1,\"417\":9,\"418\":10,\"419\":2,\"420\":2,\"421\":6,\"422\":8,\"426\":3,\"427\":1,\"428\":1,\"429\":2,\"430\":2,\"431\":5,\"432\":2,\"434\":2,\"435\":1,\"436\":3,\"437\":1,\"444\":1,\"449\":8,\"453\":17,\"454\":3,\"455\":2,\"457\":2,\"459\":12,\"462\":1,\"463\":2,\"465\":1,\"470\":1,\"475\":2,\"476\":6,\"477\":10,\"486\":1,\"491\":5,\"494\":5,\"498\":4,\"499\":1,\"500\":1,\"501\":1,\"511\":3,\"512\":1,\"513\":1,\"516\":3,\"537\":2,\"545\":1,\"548\":1,\"551\":1,\"554\":2,\"556\":2,\"563\":1,\"580\":1,\"600\":1,\"601\":1,\"620\":2,\"630\":1,\"633\":1,\"634\":2,\"635\":6,\"636\":2,\"637\":1,\"638\":2,\"639\":1,\"641\":1,\"644\":1,\"645\":2,\"649\":2,\"651\":3,\"652\":1,\"653\":3,\"654\":9,\"672\":1,\"673\":1,\"692\":2,\"702\":1,\"706\":1,\"709\":7,\"710\":5,\"711\":7,\"712\":4,\"713\":2,\"717\":1,\"720\":2,\"721\":1,\"722\":1,\"723\":1,\"724\":6,\"725\":4,\"726\":2,\"728\":1,\"729\":1,\"730\":2,\"732\":4,\"733\":2,\"735\":1,\"741\":2,\"742\":1,\"744\":3,\"746\":3,\"748\":1,\"749\":1,\"751\":1,\"754\":1,\"756\":2,\"759\":2,\"766\":6,\"768\":2,\"771\":3,\"774\":1,\"775\":2,\"786\":1,\"791\":3,\"793\":1,\"794\":2,\"799\":4,\"807\":1,\"809\":3,\"811\":2,\"814\":3,\"816\":2,\"817\":1,\"820\":5,\"821\":3,\"822\":1,\"825\":1,\"834\":4,\"836\":2,\"838\":1,\"841\":1,\"842\":1,\"843\":1,\"847\":1,\"850\":1,\"851\":1,\"852\":2,\"855\":1,\"856\":1,\"859\":2,\"860\":1,\"861\":9,\"862\":5,\"863\":2,\"867\":1,\"875\":1,\"878\":1,\"880\":1,\"881\":2,\"882\":5,\"883\":5,\"884\":4,\"887\":1,\"891\":1,\"892\":1,\"893\":1,\"911\":6,\"925\":1,\"932\":1,\"936\":2,\"937\":2,\"940\":1,\"947\":1,\"948\":2,\"949\":4,\"951\":2,\"963\":2,\"965\":3,\"967\":3,\"968\":1,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"981\":5,\"985\":1,\"990\":1,\"993\":8,\"994\":2,\"1000\":1,\"1002\":2,\"1003\":5,\"1004\":4,\"1010\":46,\"1019\":1,\"1022\":1,\"1023\":1,\"1024\":1,\"1029\":2,\"1034\":28,\"1036\":1,\"1047\":4,\"1052\":3,\"1053\":2,\"1054\":2,\"1055\":1,\"1056\":1,\"1078\":5,\"1082\":5,\"1086\":2,\"1087\":3,\"1092\":1,\"1093\":1,\"1107\":2,\"1111\":2,\"1113\":2,\"1115\":2,\"1123\":2,\"1128\":1,\"1131\":1,\"1132\":3,\"1133\":3,\"1135\":5,\"1144\":1,\"1152\":1,\"1158\":3,\"1160\":6,\"1162\":4,\"1163\":16,\"1164\":1,\"1165\":11,\"1167\":3,\"1168\":3,\"1171\":1,\"1173\":3,\"1175\":3,\"1184\":1,\"1185\":1,\"1193\":3,\"1194\":6,\"1195\":6,\"1196\":3,\"1197\":5,\"1219\":1,\"1222\":2,\"1233\":1,\"1235\":3,\"1274\":1,\"1275\":1,\"1278\":1,\"1280\":3,\"1281\":2,\"1289\":1,\"1307\":1,\"1313\":1,\"1315\":1,\"1321\":3,\"1339\":1,\"1341\":1,\"1343\":17,\"1344\":6,\"1345\":7,\"1346\":1,\"1347\":2,\"1348\":2,\"1349\":2,\"1351\":4,\"1352\":2,\"1355\":2,\"1356\":1,\"1361\":2,\"1363\":1,\"1368\":1,\"1369\":1,\"1370\":1,\"1371\":1,\"1374\":1,\"1376\":1,\"1377\":2,\"1379\":2,\"1380\":1,\"1381\":1,\"1386\":2,\"1389\":2,\"1390\":4,\"1392\":3,\"1393\":2,\"1397\":4,\"1399\":1,\"1404\":2,\"1405\":1,\"1407\":4,\"1417\":5,\"1419\":3,\"1420\":11,\"1421\":3,\"1422\":2,\"1424\":2,\"1425\":3,\"1430\":3,\"1437\":1,\"1440\":4,\"1443\":3,\"1444\":1,\"1445\":2,\"1446\":1}}],[\"0+0i\",{\"1\":{\"1391\":1}}],[\"0+1\",{\"1\":{\"208\":1}}],[\"0db8\",{\"1\":{\"1369\":1}}],[\"0e\",{\"1\":{\"1195\":1}}],[\"0~2^n\",{\"1\":{\"1165\":1}}],[\"0被访问的几率为其他服务器的两倍\",{\"1\":{\"1162\":1}}],[\"0代表不保持连接\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"0代表producer往集群发送数据不需要等到集群的返回\",{\"1\":{\"1024\":1}}],[\"0发布于2004年10月4日\",{\"1\":{\"1107\":1}}],[\"0协议\",{\"1\":{\"1072\":2}}],[\"0就是永不过期\",{\"1\":{\"910\":1}}],[\"0和scram\",{\"1\":{\"875\":1}}],[\"0及更高版本中\",{\"1\":{\"799\":1}}],[\"0及更高版本\",{\"1\":{\"798\":1}}],[\"0之后已经停用了查询缓存的功能\",{\"1\":{\"782\":1}}],[\"0wrdwnn6\",{\"1\":{\"774\":1}}],[\"066\",{\"1\":{\"1197\":1}}],[\"0666\",{\"1\":{\"400\":1,\"401\":2,\"402\":4,\"403\":5,\"409\":1}}],[\"063\",{\"1\":{\"1196\":1,\"1197\":2}}],[\"062\",{\"1\":{\"1196\":2}}],[\"068\",{\"1\":{\"1195\":1}}],[\"068ms\",{\"1\":{\"820\":2}}],[\"061\",{\"1\":{\"1195\":1}}],[\"064\",{\"1\":{\"1195\":2,\"1196\":3,\"1197\":1}}],[\"06\",{\"0\":{\"744\":1,\"864\":1,\"871\":1,\"874\":1,\"989\":1,\"1094\":1,\"1115\":1,\"1140\":1,\"1166\":1,\"1204\":1}}],[\"0进行的\",{\"1\":{\"716\":1}}],[\"088\",{\"1\":{\"1197\":1}}],[\"08\",{\"0\":{\"746\":1,\"879\":1,\"995\":1,\"1100\":1,\"1117\":1,\"1159\":1,\"1168\":1,\"1206\":1},\"1\":{\"702\":1,\"724\":1,\"1194\":1}}],[\"0版本支持幂等性\",{\"1\":{\"653\":1}}],[\"0的相关特性\",{\"1\":{\"620\":1,\"692\":1}}],[\"013496401\",{\"1\":{\"1435\":1}}],[\"017790301\",{\"1\":{\"1434\":1}}],[\"014\",{\"1\":{\"1197\":1}}],[\"016742001\",{\"1\":{\"1434\":1}}],[\"016\",{\"1\":{\"1078\":1}}],[\"010ms\",{\"1\":{\"820\":1}}],[\"01s\",{\"1\":{\"813\":1}}],[\"01\",{\"0\":{\"480\":1,\"734\":1,\"774\":1,\"800\":1,\"811\":1,\"841\":1,\"842\":1,\"880\":1,\"956\":1,\"1017\":1,\"1071\":1,\"1106\":1,\"1110\":1,\"1135\":1,\"1141\":1,\"1151\":1,\"1161\":1,\"1182\":1,\"1238\":1,\"1272\":1},\"1\":{\"721\":2,\"724\":6,\"822\":2,\"1158\":1,\"1198\":1,\"1289\":1,\"1303\":3,\"1306\":1,\"1307\":1,\"1431\":2,\"1432\":1}}],[\"0123i\",{\"1\":{\"183\":1}}],[\"0s\",{\"1\":{\"477\":6,\"813\":1}}],[\"052\",{\"1\":{\"1197\":2}}],[\"058\",{\"1\":{\"1194\":1,\"1195\":2}}],[\"05t10\",{\"1\":{\"702\":1}}],[\"05就不太可信\",{\"1\":{\"476\":1}}],[\"05\",{\"0\":{\"505\":1,\"741\":1,\"810\":1,\"854\":1,\"979\":1,\"1088\":1,\"1114\":1,\"1134\":1,\"1139\":1,\"1165\":1,\"1203\":1},\"1\":{\"476\":1,\"702\":1,\"1082\":2,\"1144\":1,\"1303\":2,\"1307\":1,\"1431\":2}}],[\"0µ\",{\"1\":{\"476\":1}}],[\"0m\",{\"1\":{\"476\":2}}],[\"0370\",{\"1\":{\"1369\":1}}],[\"037s\",{\"1\":{\"471\":1}}],[\"032f0096ed00746f2d8d1fbef90cf55343dde0c76aaf1331c9a012f23a2fa3bd\",{\"1\":{\"1225\":2,\"1226\":1,\"1227\":1}}],[\"03\",{\"0\":{\"496\":1,\"736\":1,\"737\":1,\"808\":1,\"849\":1,\"966\":1,\"1019\":1,\"1073\":1,\"1112\":1,\"1124\":1,\"1137\":1,\"1143\":1,\"1163\":1,\"1201\":1,\"1249\":1,\"1288\":1},\"1\":{\"1158\":1,\"1195\":1,\"1197\":1,\"1433\":1}}],[\"033s\",{\"1\":{\"477\":1}}],[\"038s\",{\"1\":{\"468\":1}}],[\"0并不存在\",{\"1\":{\"459\":1}}],[\"074\",{\"1\":{\"1197\":1}}],[\"073\",{\"1\":{\"1197\":1}}],[\"071\",{\"1\":{\"1195\":1}}],[\"07\",{\"0\":{\"745\":1,\"872\":1,\"878\":1,\"990\":1,\"1097\":1,\"1116\":1,\"1145\":1,\"1167\":1,\"1205\":1},\"1\":{\"759\":6,\"1082\":4}}],[\"079\",{\"1\":{\"476\":1}}],[\"0755\",{\"1\":{\"410\":1}}],[\"072\",{\"1\":{\"182\":1,\"1197\":1}}],[\"0时\",{\"1\":{\"408\":1}}],[\"04t18\",{\"1\":{\"1307\":1}}],[\"041\",{\"1\":{\"1197\":2}}],[\"041ms\",{\"1\":{\"810\":1}}],[\"043\",{\"1\":{\"1195\":2}}],[\"04xl\",{\"1\":{\"1164\":1}}],[\"044ms\",{\"1\":{\"820\":1}}],[\"040s\",{\"1\":{\"468\":1}}],[\"04\",{\"0\":{\"501\":1,\"740\":1,\"809\":1,\"853\":1,\"969\":1,\"1080\":1,\"1113\":1,\"1129\":1,\"1138\":1,\"1144\":1,\"1164\":1,\"1202\":1},\"1\":{\"328\":3,\"476\":1,\"705\":1,\"1039\":1,\"1197\":1,\"1303\":1,\"1307\":1,\"1431\":2}}],[\"0不能作为被除数\",{\"1\":{\"280\":1}}],[\"091\",{\"1\":{\"1197\":2}}],[\"092\",{\"1\":{\"1195\":2,\"1197\":2}}],[\"0900\",{\"1\":{\"817\":1}}],[\"09\",{\"0\":{\"747\":1,\"882\":1,\"1005\":1,\"1118\":1,\"1169\":1,\"1170\":1,\"1207\":1},\"1\":{\"581\":1,\"653\":2,\"705\":1,\"1303\":2,\"1306\":1,\"1433\":1,\"1434\":3,\"1435\":2}}],[\"099a8bf\",{\"1\":{\"449\":2}}],[\"09b\",{\"1\":{\"221\":1}}],[\"09d\",{\"1\":{\"221\":1}}],[\"009508401\",{\"1\":{\"1434\":1}}],[\"00i\",{\"1\":{\"1392\":1}}],[\"006\",{\"1\":{\"1078\":1,\"1196\":1}}],[\"003\",{\"1\":{\"1078\":1,\"1195\":1}}],[\"004ms\",{\"1\":{\"820\":1}}],[\"001627901\",{\"1\":{\"1435\":1}}],[\"001\",{\"1\":{\"1078\":6}}],[\"001ms\",{\"1\":{\"820\":1}}],[\"001s\",{\"1\":{\"486\":1,\"487\":1,\"491\":1,\"493\":1,\"494\":1}}],[\"00z\",{\"1\":{\"721\":1}}],[\"002s\",{\"1\":{\"487\":1,\"502\":1}}],[\"008\",{\"1\":{\"476\":7}}],[\"00s\",{\"1\":{\"447\":1,\"468\":3,\"470\":3,\"471\":8,\"472\":2,\"473\":10,\"477\":8,\"487\":4,\"491\":1,\"494\":1,\"498\":1,\"502\":2,\"813\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1350\":1,\"1351\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1355\":1,\"1356\":1,\"1357\":1,\"1358\":1,\"1359\":1,\"1360\":1,\"1361\":1,\"1362\":1,\"1363\":1,\"1364\":1,\"1384\":1,\"1385\":1,\"1386\":1,\"1387\":1,\"1388\":1,\"1389\":1,\"1390\":1,\"1391\":1,\"1392\":1,\"1393\":1,\"1396\":1,\"1397\":1,\"1398\":3,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":1,\"1409\":1,\"1410\":1,\"1411\":1,\"1413\":1}}],[\"00\",{\"1\":{\"269\":1,\"428\":1,\"476\":9,\"721\":1,\"724\":4,\"822\":1,\"1194\":26,\"1195\":13,\"1197\":4,\"1306\":1,\"1307\":1,\"1367\":1,\"1429\":1,\"1432\":3}}],[\"007908001\",{\"1\":{\"1433\":1}}],[\"007095001\",{\"1\":{\"1429\":1}}],[\"007\",{\"1\":{\"184\":1}}],[\"0000\",{\"1\":{\"1369\":2}}],[\"00000\",{\"1\":{\"1303\":1}}],[\"000002\",{\"1\":{\"825\":1}}],[\"000008\",{\"1\":{\"825\":2}}],[\"000001\",{\"1\":{\"822\":2}}],[\"000001000\",{\"1\":{\"221\":1}}],[\"000000001\",{\"1\":{\"221\":1}}],[\"000\",{\"1\":{\"174\":1,\"181\":2,\"184\":1,\"314\":1,\"475\":2,\"476\":6,\"1307\":2}}],[\"0o777\",{\"1\":{\"400\":1}}],[\"0o123\",{\"1\":{\"183\":1}}],[\"0o123i\",{\"1\":{\"183\":1}}],[\"0o24\",{\"1\":{\"181\":1}}],[\"0i\",{\"1\":{\"183\":1}}],[\"0xd\",{\"1\":{\"1390\":2}}],[\"0xc00010e4b0\",{\"1\":{\"360\":4}}],[\"0xc00005e5e0\",{\"1\":{\"1396\":1}}],[\"0xc00005e5d0\",{\"1\":{\"1396\":1}}],[\"0xc0000a6058\",{\"1\":{\"360\":5}}],[\"0xc00007a7b0\",{\"1\":{\"294\":1}}],[\"0xc0000080d8\",{\"1\":{\"294\":1}}],[\"0xc00001c088\",{\"1\":{\"275\":1,\"1443\":2}}],[\"0xe69720\",{\"1\":{\"294\":1}}],[\"0xe61a00\",{\"1\":{\"294\":1}}],[\"0xe62e00\",{\"1\":{\"294\":1}}],[\"0xe62ac0\",{\"1\":{\"294\":1}}],[\"0xe63d80\",{\"1\":{\"294\":1}}],[\"0xe63580\",{\"1\":{\"294\":1}}],[\"0xeb8b00\",{\"1\":{\"294\":1}}],[\"0xeb8b08\",{\"1\":{\"294\":1}}],[\"0xeb8c58\",{\"1\":{\"294\":1}}],[\"0xeb8c48\",{\"1\":{\"294\":1}}],[\"0xe27bb2\",{\"1\":{\"254\":2}}],[\"0x31d99ff884\",{\"1\":{\"276\":2}}],[\"0x31d99ff880\",{\"1\":{\"276\":2}}],[\"0xabc\",{\"1\":{\"183\":1}}],[\"0xabci\",{\"1\":{\"183\":1}}],[\"0x\",{\"1\":{\"182\":2,\"1443\":1}}],[\"0x1234\",{\"1\":{\"651\":1}}],[\"0x1dd043b6e30\",{\"1\":{\"307\":1}}],[\"0x10ffff之间\",{\"1\":{\"258\":1}}],[\"0x15e\",{\"1\":{\"182\":2}}],[\"0x1\",{\"1\":{\"182\":1,\"1390\":1}}],[\"0x1p1023\",{\"1\":{\"1344\":1}}],[\"0x1p127\",{\"1\":{\"1344\":1}}],[\"0x1p\",{\"1\":{\"182\":1,\"183\":2,\"1344\":6}}],[\"0x2\",{\"1\":{\"182\":1}}],[\"0x0\",{\"1\":{\"181\":1}}],[\"0x00\",{\"1\":{\"181\":1}}],[\"0b00\",{\"1\":{\"181\":1}}],[\"02t15\",{\"1\":{\"1307\":1}}],[\"026\",{\"1\":{\"1197\":1}}],[\"022\",{\"1\":{\"1195\":1}}],[\"020\",{\"1\":{\"498\":2,\"1197\":1}}],[\"023s\",{\"1\":{\"447\":1}}],[\"024\",{\"1\":{\"181\":1}}],[\"02\",{\"0\":{\"484\":1,\"735\":1,\"775\":1,\"801\":1,\"812\":1,\"843\":1,\"844\":1,\"881\":1,\"962\":1,\"1018\":1,\"1072\":1,\"1109\":1,\"1111\":1,\"1136\":1,\"1142\":1,\"1152\":1,\"1162\":1,\"1200\":1,\"1242\":1,\"1276\":1},\"1\":{\"145\":1,\"822\":2,\"1158\":1,\"1194\":3,\"1195\":2,\"1197\":4,\"1289\":1,\"1303\":1,\"1431\":2,\"1432\":1}}],[\"0读取器\",{\"1\":{\"139\":1}}],[\"0解析器\",{\"1\":{\"124\":1}}],[\"0\",{\"0\":{\"40\":1,\"41\":1,\"42\":1},\"1\":{\"5\":2,\"37\":2,\"111\":1,\"128\":2,\"181\":5,\"182\":9,\"183\":2,\"192\":1,\"202\":1,\"208\":2,\"212\":3,\"221\":1,\"229\":2,\"230\":6,\"233\":2,\"235\":7,\"236\":26,\"240\":2,\"241\":8,\"243\":2,\"244\":2,\"245\":2,\"246\":1,\"247\":13,\"248\":1,\"249\":76,\"251\":6,\"253\":4,\"255\":3,\"258\":5,\"259\":2,\"260\":5,\"262\":2,\"263\":2,\"265\":2,\"266\":3,\"269\":2,\"274\":1,\"275\":6,\"276\":3,\"280\":1,\"281\":4,\"282\":3,\"283\":2,\"284\":1,\"285\":2,\"287\":3,\"298\":4,\"306\":37,\"308\":8,\"309\":1,\"314\":1,\"318\":6,\"319\":5,\"322\":1,\"323\":2,\"324\":2,\"326\":10,\"327\":8,\"328\":4,\"338\":1,\"343\":4,\"344\":15,\"353\":4,\"364\":2,\"367\":3,\"368\":6,\"370\":6,\"374\":2,\"375\":2,\"377\":1,\"383\":2,\"385\":4,\"390\":2,\"395\":3,\"398\":1,\"400\":10,\"401\":2,\"402\":2,\"412\":8,\"417\":5,\"420\":7,\"421\":5,\"422\":2,\"429\":2,\"430\":2,\"431\":7,\"432\":3,\"434\":7,\"435\":2,\"436\":6,\"437\":2,\"445\":4,\"447\":2,\"449\":13,\"450\":4,\"453\":39,\"454\":16,\"457\":12,\"459\":37,\"460\":9,\"462\":1,\"465\":2,\"468\":7,\"470\":4,\"471\":11,\"472\":3,\"473\":13,\"475\":4,\"476\":9,\"477\":23,\"486\":1,\"487\":6,\"491\":7,\"492\":1,\"493\":1,\"494\":4,\"498\":2,\"499\":1,\"500\":1,\"501\":2,\"502\":6,\"511\":7,\"512\":2,\"514\":1,\"516\":2,\"537\":1,\"556\":1,\"557\":1,\"618\":2,\"620\":3,\"630\":1,\"638\":1,\"653\":4,\"690\":2,\"692\":3,\"702\":4,\"706\":2,\"709\":2,\"710\":1,\"711\":1,\"712\":1,\"713\":1,\"722\":4,\"724\":8,\"732\":2,\"740\":2,\"741\":1,\"742\":1,\"744\":4,\"746\":1,\"756\":6,\"757\":1,\"758\":1,\"763\":1,\"766\":5,\"768\":6,\"771\":2,\"775\":4,\"777\":1,\"786\":1,\"791\":1,\"810\":2,\"820\":11,\"822\":3,\"836\":2,\"852\":4,\"856\":4,\"859\":1,\"863\":3,\"867\":2,\"884\":1,\"891\":2,\"892\":2,\"893\":2,\"895\":1,\"896\":1,\"910\":2,\"912\":1,\"915\":1,\"916\":1,\"921\":1,\"923\":1,\"925\":1,\"932\":1,\"934\":1,\"936\":1,\"937\":3,\"945\":1,\"949\":1,\"952\":2,\"963\":4,\"964\":3,\"965\":4,\"981\":7,\"985\":4,\"993\":15,\"994\":4,\"1002\":4,\"1003\":4,\"1004\":9,\"1010\":118,\"1020\":1,\"1024\":1,\"1029\":8,\"1034\":57,\"1036\":1,\"1037\":3,\"1077\":7,\"1078\":19,\"1090\":1,\"1107\":1,\"1130\":1,\"1131\":1,\"1132\":1,\"1133\":1,\"1158\":3,\"1160\":12,\"1162\":6,\"1163\":32,\"1164\":9,\"1165\":1,\"1167\":6,\"1168\":6,\"1173\":1,\"1175\":1,\"1193\":1,\"1194\":14,\"1195\":29,\"1196\":16,\"1197\":49,\"1198\":1,\"1219\":1,\"1222\":2,\"1223\":1,\"1225\":4,\"1228\":2,\"1229\":1,\"1233\":2,\"1280\":6,\"1281\":2,\"1304\":1,\"1307\":3,\"1312\":1,\"1313\":2,\"1315\":2,\"1321\":1,\"1336\":5,\"1343\":1,\"1345\":1,\"1346\":3,\"1347\":3,\"1348\":1,\"1349\":1,\"1350\":1,\"1351\":2,\"1352\":1,\"1353\":1,\"1354\":1,\"1355\":1,\"1356\":2,\"1357\":1,\"1358\":1,\"1359\":1,\"1360\":1,\"1361\":3,\"1362\":4,\"1363\":3,\"1364\":3,\"1368\":1,\"1370\":4,\"1371\":4,\"1374\":8,\"1377\":1,\"1379\":1,\"1384\":1,\"1385\":1,\"1386\":2,\"1387\":1,\"1388\":1,\"1389\":1,\"1390\":1,\"1391\":1,\"1392\":1,\"1393\":1,\"1396\":1,\"1397\":2,\"1398\":3,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":1,\"1409\":1,\"1410\":1,\"1411\":1,\"1413\":1,\"1420\":1,\"1424\":1,\"1434\":1,\"1440\":2,\"1441\":1,\"1443\":1,\"1444\":1,\"1445\":5,\"1446\":1,\"1447\":2}}],[\"=jazz\",{\"1\":{\"1281\":1}}],[\"=football\",{\"1\":{\"1281\":1}}],[\"=nil\",{\"1\":{\"1245\":1}}],[\"=post\",{\"1\":{\"1081\":1}}],[\"=get\",{\"1\":{\"1081\":1}}],[\"=或者<>\",{\"1\":{\"818\":1}}],[\"=121\",{\"1\":{\"1081\":1}}],[\"=1\",{\"1\":{\"814\":1}}],[\"=101\",{\"1\":{\"749\":1}}],[\"=0\",{\"1\":{\"630\":2}}],[\"=>\",{\"1\":{\"459\":5,\"462\":1,\"465\":1}}],[\"==伪终端\",{\"1\":{\"1188\":1}}],[\"==向容器输入命令\",{\"1\":{\"1188\":1}}],[\"==即使有信息输出也不会输出当前窗口\",{\"1\":{\"1188\":1}}],[\"==可复制提交的日志服务\",{\"1\":{\"1017\":1}}],[\"==可以通过索引目录快速查到你想要的字\",{\"1\":{\"800\":1}}],[\"==类似新华字典的索引目录\",{\"1\":{\"800\":1}}],[\"==>\",{\"1\":{\"1183\":1}}],[\"==>建议单表字段数上限控制在20~50个\",{\"1\":{\"788\":1}}],[\"==>64k\",{\"1\":{\"787\":1}}],[\"==创建型模式\",{\"1\":{\"654\":1}}],[\"==0\",{\"1\":{\"545\":1}}],[\"==1\",{\"1\":{\"545\":1}}],[\"==标签tag==\",{\"1\":{\"513\":1}}],[\"======================安装=========================\",{\"1\":{\"1222\":1}}],[\"======================================写文件思路===============================\",{\"1\":{\"1193\":1}}],[\"===================================命令========================================\",{\"1\":{\"1193\":1}}],[\"========================\",{\"1\":{\"326\":1}}],[\"===================先看配置==================\",{\"1\":{\"1222\":1}}],[\"===容器内不会开启进程\",{\"1\":{\"1189\":1}}],[\"===查看容器内的各种信息\",{\"1\":{\"1189\":1}}],[\"===\",{\"1\":{\"447\":1,\"468\":3,\"470\":3,\"471\":8,\"472\":2,\"473\":24,\"477\":12,\"487\":4,\"494\":1,\"498\":1,\"502\":2,\"1135\":2,\"1189\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1350\":1,\"1351\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1355\":1,\"1356\":1,\"1357\":1,\"1358\":1,\"1359\":1,\"1360\":1,\"1361\":1,\"1362\":1,\"1363\":1,\"1364\":1,\"1384\":1,\"1385\":1,\"1386\":1,\"1387\":1,\"1388\":1,\"1389\":1,\"1390\":1,\"1391\":1,\"1392\":1,\"1393\":1,\"1396\":1,\"1397\":1,\"1398\":3,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1404\":1,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":1,\"1409\":1,\"1410\":1,\"1411\":1,\"1413\":1}}],[\"==\",{\"1\":{\"5\":1,\"179\":1,\"182\":9,\"183\":7,\"203\":1,\"209\":3,\"226\":1,\"229\":2,\"232\":1,\"280\":1,\"294\":2,\"344\":2,\"393\":1,\"395\":2,\"398\":1,\"401\":1,\"426\":1,\"427\":1,\"434\":6,\"437\":1,\"446\":1,\"463\":1,\"471\":1,\"635\":1,\"651\":1,\"654\":2,\"766\":3,\"780\":1,\"895\":1,\"896\":1,\"910\":1,\"970\":1,\"1037\":2,\"1086\":1,\"1092\":3,\"1164\":1,\"1244\":5,\"1245\":1,\"1253\":3,\"1254\":3,\"1256\":7,\"1260\":3,\"1264\":2,\"1304\":4,\"1402\":1,\"1411\":1}}],[\"=\",{\"1\":{\"5\":6,\"58\":1,\"174\":2,\"179\":3,\"192\":1,\"193\":1,\"206\":15,\"207\":1,\"208\":15,\"209\":2,\"210\":5,\"211\":9,\"212\":8,\"213\":1,\"215\":3,\"220\":2,\"221\":1,\"223\":1,\"224\":4,\"225\":2,\"226\":2,\"228\":3,\"229\":16,\"230\":6,\"231\":2,\"232\":1,\"233\":53,\"234\":8,\"235\":4,\"236\":4,\"239\":7,\"240\":1,\"241\":8,\"243\":3,\"244\":3,\"245\":4,\"246\":5,\"247\":2,\"248\":4,\"249\":6,\"250\":17,\"251\":3,\"253\":6,\"254\":8,\"255\":4,\"256\":5,\"257\":7,\"258\":13,\"259\":5,\"260\":4,\"261\":13,\"262\":5,\"263\":7,\"264\":3,\"265\":3,\"266\":5,\"268\":2,\"269\":9,\"270\":2,\"271\":1,\"275\":7,\"276\":4,\"278\":1,\"280\":6,\"281\":1,\"282\":14,\"283\":2,\"284\":2,\"285\":19,\"286\":3,\"287\":14,\"293\":3,\"294\":11,\"298\":3,\"299\":1,\"300\":6,\"302\":2,\"303\":6,\"306\":10,\"307\":2,\"308\":2,\"310\":6,\"312\":1,\"313\":1,\"314\":5,\"317\":5,\"318\":4,\"319\":2,\"320\":7,\"322\":3,\"323\":11,\"324\":2,\"326\":2,\"327\":5,\"337\":2,\"338\":3,\"339\":4,\"343\":5,\"344\":17,\"350\":2,\"351\":3,\"352\":5,\"355\":1,\"356\":1,\"357\":2,\"358\":2,\"359\":3,\"360\":4,\"361\":4,\"362\":3,\"364\":3,\"365\":3,\"367\":5,\"368\":8,\"369\":2,\"370\":8,\"371\":5,\"373\":1,\"374\":2,\"375\":2,\"376\":1,\"377\":1,\"378\":2,\"379\":5,\"381\":2,\"383\":2,\"384\":5,\"385\":4,\"386\":3,\"387\":1,\"388\":13,\"390\":9,\"392\":2,\"393\":6,\"394\":1,\"397\":6,\"400\":30,\"401\":16,\"402\":12,\"403\":16,\"404\":2,\"405\":4,\"406\":6,\"408\":8,\"409\":2,\"410\":18,\"412\":4,\"414\":3,\"415\":2,\"416\":4,\"417\":12,\"418\":7,\"419\":2,\"420\":10,\"421\":29,\"422\":1,\"425\":2,\"426\":1,\"427\":6,\"428\":1,\"429\":5,\"430\":5,\"431\":5,\"432\":6,\"434\":5,\"435\":14,\"436\":6,\"437\":2,\"440\":1,\"446\":8,\"448\":1,\"463\":5,\"470\":2,\"471\":32,\"472\":8,\"473\":8,\"474\":8,\"475\":6,\"477\":24,\"491\":11,\"492\":2,\"494\":5,\"498\":1,\"499\":1,\"500\":1,\"511\":17,\"512\":5,\"513\":6,\"514\":6,\"515\":9,\"516\":9,\"537\":4,\"545\":4,\"548\":3,\"556\":4,\"557\":1,\"584\":4,\"620\":2,\"630\":4,\"633\":8,\"635\":6,\"645\":1,\"649\":5,\"651\":5,\"653\":14,\"654\":17,\"656\":8,\"692\":2,\"702\":5,\"704\":6,\"705\":5,\"706\":6,\"707\":5,\"709\":6,\"710\":5,\"711\":6,\"712\":5,\"713\":20,\"744\":2,\"745\":9,\"746\":7,\"748\":6,\"749\":4,\"751\":6,\"752\":2,\"754\":7,\"756\":8,\"757\":2,\"758\":2,\"759\":2,\"763\":4,\"764\":2,\"765\":3,\"766\":30,\"771\":3,\"800\":1,\"806\":7,\"814\":14,\"817\":1,\"818\":6,\"821\":2,\"830\":3,\"831\":4,\"833\":3,\"834\":9,\"835\":5,\"836\":9,\"837\":4,\"838\":5,\"852\":2,\"861\":8,\"863\":8,\"881\":11,\"882\":11,\"883\":9,\"884\":28,\"891\":1,\"892\":6,\"893\":8,\"894\":4,\"895\":6,\"896\":5,\"897\":2,\"910\":3,\"912\":1,\"1035\":8,\"1036\":8,\"1037\":6,\"1047\":42,\"1078\":10,\"1081\":1,\"1087\":3,\"1090\":1,\"1092\":5,\"1123\":1,\"1130\":1,\"1131\":1,\"1135\":2,\"1141\":1,\"1142\":2,\"1158\":1,\"1160\":1,\"1164\":43,\"1165\":11,\"1166\":6,\"1195\":2,\"1196\":1,\"1197\":3,\"1222\":2,\"1244\":4,\"1245\":3,\"1253\":1,\"1254\":2,\"1256\":4,\"1260\":6,\"1264\":6,\"1275\":1,\"1277\":1,\"1280\":7,\"1281\":14,\"1282\":5,\"1283\":7,\"1286\":2,\"1289\":5,\"1301\":3,\"1302\":1,\"1303\":10,\"1304\":5,\"1306\":6,\"1307\":1,\"1311\":3,\"1312\":4,\"1314\":3,\"1315\":4,\"1317\":3,\"1319\":3,\"1320\":4,\"1321\":13,\"1325\":3,\"1330\":3,\"1331\":5,\"1333\":3,\"1334\":3,\"1336\":1,\"1338\":5,\"1341\":2,\"1343\":16,\"1344\":4,\"1345\":11,\"1367\":2,\"1368\":2,\"1369\":4,\"1370\":4,\"1371\":4,\"1372\":2,\"1373\":4,\"1374\":13,\"1376\":1,\"1377\":1,\"1378\":1,\"1379\":1,\"1380\":2,\"1381\":1,\"1384\":1,\"1385\":1,\"1386\":3,\"1389\":2,\"1390\":1,\"1393\":4,\"1396\":2,\"1400\":7,\"1403\":1,\"1411\":3,\"1412\":1,\"1413\":4,\"1415\":6,\"1417\":26,\"1419\":14,\"1421\":1,\"1422\":2,\"1424\":1,\"1425\":10,\"1426\":16,\"1428\":5,\"1429\":1,\"1430\":8,\"1431\":1,\"1432\":4,\"1433\":2,\"1434\":3,\"1435\":2,\"1440\":5,\"1441\":1,\"1442\":1,\"1443\":9,\"1444\":2,\"1445\":8,\"1446\":3,\"1447\":4,\"1448\":2}}],[\"k3这种方式访问\",{\"1\":{\"1417\":1}}],[\"k2\",{\"1\":{\"1417\":1}}],[\"k2将会迁移到节点c上\",{\"1\":{\"1165\":1}}],[\"k1\",{\"1\":{\"1417\":1}}],[\"ksdadmin\",{\"1\":{\"1138\":1}}],[\"korean\",{\"1\":{\"881\":2,\"882\":1,\"884\":3}}],[\"kong请求大小参数限制\",{\"0\":{\"1097\":1}}],[\"kong限制限流器访问\",{\"0\":{\"1094\":1}}],[\"kong整合jwt\",{\"0\":{\"1088\":1}}],[\"kong代理的路由地址\",{\"1\":{\"1087\":1}}],[\"konghq\",{\"1\":{\"1078\":3}}],[\"konga\",{\"1\":{\"1073\":1,\"1079\":2}}],[\"kong的管理的端口\",{\"1\":{\"1073\":1}}],[\"kong的安装\",{\"0\":{\"1073\":1}}],[\"kong是基于nginx和apache\",{\"1\":{\"1073\":1}}],[\"kong是一个开源的api网关\",{\"1\":{\"1073\":1}}],[\"kong\",{\"0\":{\"96\":1,\"1070\":1},\"1\":{\"1072\":1,\"1073\":3,\"1075\":1,\"1076\":8,\"1077\":11,\"1078\":25,\"1232\":1,\"1235\":3}}],[\"kuang\",{\"1\":{\"1166\":2}}],[\"kuangshenlinux\",{\"1\":{\"1197\":3}}],[\"kuangshen\",{\"1\":{\"881\":1}}],[\"kuangstudynet\",{\"1\":{\"1197\":1}}],[\"kuangstudy\",{\"1\":{\"847\":1,\"1028\":2,\"1087\":2,\"1092\":1,\"1110\":2,\"1135\":5,\"1136\":3,\"1142\":2,\"1143\":3,\"1144\":3,\"1165\":1,\"1166\":1}}],[\"kubeconfig=\",{\"1\":{\"1225\":1}}],[\"kubectl\",{\"1\":{\"1222\":4,\"1228\":3,\"1229\":1,\"1231\":1,\"1233\":1,\"1235\":6}}],[\"kubenetes\",{\"1\":{\"1228\":1}}],[\"kubenetes集群\",{\"0\":{\"1224\":1}}],[\"kubenetes架构\",{\"0\":{\"1213\":1}}],[\"kubeadm\",{\"1\":{\"1222\":3,\"1225\":4,\"1226\":4,\"1227\":1,\"1235\":2}}],[\"kube\",{\"1\":{\"655\":1,\"1225\":3}}],[\"kubelet\",{\"1\":{\"655\":1,\"1222\":5}}],[\"kubernetes与docker的关系\",{\"1\":{\"1212\":1}}],[\"kubernetes中的pod就是多个容器共享一个network\",{\"1\":{\"1197\":1}}],[\"kubernetes\",{\"0\":{\"98\":1,\"1212\":1,\"1217\":1},\"1\":{\"160\":1,\"166\":1,\"636\":1,\"637\":2,\"655\":1,\"656\":2,\"1204\":1,\"1207\":1,\"1222\":6,\"1225\":3,\"1229\":1,\"1230\":1,\"1231\":8,\"1232\":1,\"1233\":4,\"1234\":2,\"1235\":8}}],[\"known\",{\"1\":{\"1010\":1,\"1196\":2,\"1198\":1}}],[\"know\",{\"1\":{\"702\":1}}],[\"k8s\",{\"1\":{\"1222\":2}}],[\"k8s集群的pod和node是什么\",{\"1\":{\"1212\":1}}],[\"k8s容器化部署\",{\"1\":{\"1072\":1}}],[\"k8s部署\",{\"1\":{\"579\":1,\"651\":1}}],[\"k8s有哪些组件\",{\"1\":{\"562\":1,\"583\":1,\"634\":1,\"655\":2}}],[\"k8s等\",{\"1\":{\"335\":1}}],[\"kefka提供了多个命令用于查看\",{\"1\":{\"1034\":1}}],[\"ket\",{\"1\":{\"910\":1}}],[\"keepalive\",{\"1\":{\"1123\":1,\"1130\":2,\"1131\":2,\"1158\":2}}],[\"keep\",{\"1\":{\"470\":1,\"1133\":1}}],[\"key返回集合中的所有成员\",{\"1\":{\"973\":1}}],[\"key获取哈希表中所有值\",{\"1\":{\"972\":1}}],[\"key获取所有哈希表中的字段\",{\"1\":{\"972\":1}}],[\"key获取列表长度\",{\"1\":{\"971\":1}}],[\"key移除并返回集合中的一个随机元素\",{\"1\":{\"973\":1}}],[\"key移除并获取列表最后一个元素\",{\"1\":{\"971\":1}}],[\"key移出并获取列表的第一个元素\",{\"1\":{\"971\":1}}],[\"key1\",{\"1\":{\"970\":1,\"971\":2,\"973\":6}}],[\"key命令\",{\"0\":{\"967\":1}}],[\"key索引\",{\"1\":{\"794\":1}}],[\"key是查询语句\",{\"1\":{\"777\":1}}],[\"key=\",{\"1\":{\"742\":4,\"743\":2}}],[\"keys与key关系\",{\"1\":{\"814\":1}}],[\"keys\",{\"1\":{\"645\":1,\"651\":1,\"814\":1,\"967\":2,\"1225\":1}}],[\"keyword的内容不会被分词\",{\"1\":{\"719\":1}}],[\"keyword取代了不需要分词的string\",{\"1\":{\"719\":1}}],[\"keyword\",{\"0\":{\"719\":1},\"1\":{\"630\":1,\"717\":2,\"719\":1,\"726\":3,\"745\":3}}],[\"key的序\",{\"1\":{\"621\":1,\"693\":1}}],[\"key为什么是无序的\",{\"1\":{\"587\":1,\"659\":1}}],[\"key逻辑过期后\",{\"1\":{\"569\":1,\"641\":2}}],[\"key2所有给定集合的并集存储在\",{\"1\":{\"973\":1}}],[\"key2返回所有给定集合的并集\",{\"1\":{\"973\":1}}],[\"key2返回给定所有集合的交集\",{\"1\":{\"973\":1}}],[\"key2返回给定所有集合的差集并存储在\",{\"1\":{\"973\":1}}],[\"key2\",{\"1\":{\"272\":1,\"970\":1,\"971\":2,\"973\":2}}],[\"key不存在\",{\"1\":{\"260\":1}}],[\"keytype\",{\"1\":{\"259\":1}}],[\"keyed\",{\"1\":{\"124\":1}}],[\"keyfile\",{\"1\":{\"84\":2}}],[\"key\",{\"1\":{\"84\":4,\"122\":1,\"262\":1,\"263\":4,\"352\":2,\"369\":2,\"424\":2,\"425\":1,\"426\":5,\"436\":10,\"512\":2,\"546\":1,\"556\":2,\"558\":5,\"635\":2,\"644\":3,\"645\":1,\"649\":2,\"651\":1,\"653\":3,\"777\":1,\"796\":1,\"809\":2,\"810\":1,\"814\":2,\"817\":2,\"831\":1,\"847\":1,\"861\":1,\"892\":3,\"908\":1,\"957\":1,\"967\":48,\"970\":46,\"971\":10,\"972\":18,\"973\":7,\"974\":24,\"1036\":2,\"1047\":4,\"1090\":1,\"1152\":1,\"1222\":2,\"1419\":1}}],[\"keygen\",{\"1\":{\"50\":1}}],[\"klauspost\",{\"1\":{\"453\":2,\"459\":1}}],[\"killmode=process\",{\"1\":{\"1223\":1}}],[\"kill\",{\"1\":{\"1174\":1,\"1188\":1,\"1223\":1}}],[\"kibana\",{\"0\":{\"738\":1},\"1\":{\"637\":1,\"737\":1,\"738\":2}}],[\"kib\",{\"1\":{\"449\":1}}],[\"kindnames\",{\"1\":{\"351\":1}}],[\"kind类型仅仅实现了stringer接口的string\",{\"1\":{\"351\":1}}],[\"kind来表示go中的基础类型\",{\"1\":{\"351\":1}}],[\"kind\",{\"0\":{\"351\":1},\"1\":{\"337\":3,\"348\":2,\"351\":5,\"352\":2,\"364\":2,\"1215\":5}}],[\"kingpin\",{\"1\":{\"335\":1}}],[\"kitex\",{\"1\":{\"330\":1}}],[\"kit\",{\"1\":{\"128\":1}}],[\"kcptun\",{\"1\":{\"145\":1}}],[\"kcp\",{\"1\":{\"145\":2}}],[\"k模式和k\",{\"1\":{\"142\":1}}],[\"krakend\",{\"1\":{\"128\":1}}],[\"kratos\",{\"1\":{\"123\":3,\"330\":1}}],[\"kak\",{\"1\":{\"838\":1}}],[\"kagome\",{\"1\":{\"144\":1}}],[\"kazaam\",{\"1\":{\"141\":1}}],[\"kademlia\",{\"1\":{\"128\":1}}],[\"kafka消费者\",{\"0\":{\"1041\":1}}],[\"kafka目前已经成为云计算领域中的\",{\"1\":{\"1038\":1}}],[\"kafka启动脚本\",{\"0\":{\"1032\":1}}],[\"kafka提供了删除topic的功能\",{\"1\":{\"1029\":1}}],[\"kafka提供同样高效的性能和因为复制导致的更高的耐用性保证\",{\"1\":{\"1019\":1}}],[\"kafka会在broker上自动创建一个topic\",{\"1\":{\"1029\":1}}],[\"kafka会根据最少被使用的原则选择目录分配新的parition\",{\"1\":{\"1029\":1}}],[\"kafka会自动创建topic\",{\"1\":{\"1024\":1}}],[\"kafka官网https\",{\"1\":{\"1028\":1}}],[\"kafka可以配置⼀个保留期限\",{\"1\":{\"1025\":1}}],[\"kafka可以为一种外部的持久性日志的分布式系统提供服务\",{\"1\":{\"1019\":1}}],[\"kafka只保证在同⼀个partition内部消息是有序的\",{\"1\":{\"1025\":1}}],[\"kafka集群的两天以内\",{\"1\":{\"1025\":1}}],[\"kafka集群会保留在保留\",{\"1\":{\"1025\":1}}],[\"kafka集群维护了⼀个分区数据日志文件结构如下\",{\"1\":{\"1025\":1}}],[\"kafka集群\",{\"1\":{\"1020\":1,\"1039\":1}}],[\"kafka中所有的消息都会存在这个目录下\",{\"1\":{\"1029\":1}}],[\"kafka中有几个原则\",{\"1\":{\"1023\":1}}],[\"kafka中的生产过程设计多个概念的配合\",{\"1\":{\"1020\":1}}],[\"kafka中日志压缩功能为这种用法提供了条件\",{\"1\":{\"1019\":1}}],[\"kafka类似于apache\",{\"1\":{\"1019\":1}}],[\"kafka足以媲美传统消息系统\",{\"1\":{\"1019\":1}}],[\"kafka有更好的吞吐量\",{\"1\":{\"1019\":1}}],[\"kafka每秒可以生产约25万消息\",{\"1\":{\"1018\":1}}],[\"kafka是什么\",{\"0\":{\"1067\":1}}],[\"kafka是分布式的\",{\"1\":{\"1018\":1,\"1055\":1}}],[\"kafka是一个分布式消息发布订阅系统\",{\"1\":{\"1055\":1}}],[\"kafka是一个用于构建实时数据管道和可靠的数据传输系统的优秀工具\",{\"1\":{\"1018\":1}}],[\"kafka是一个==分布式的\",{\"1\":{\"1017\":1}}],[\"kafka是一种高吞吐量的分布式发布订阅消息系统\",{\"1\":{\"1018\":1}}],[\"kafka最先由linkedin公司开发\",{\"1\":{\"1017\":1}}],[\"kafka使用scala开发\",{\"1\":{\"1017\":1}}],[\"kafka简介\",{\"0\":{\"1017\":1}}],[\"kafka通过以下几种方式来保证消息不丢失\",{\"1\":{\"653\":1}}],[\"kafka自2\",{\"1\":{\"653\":1}}],[\"kafka和rabbitmq的区别\",{\"1\":{\"634\":1}}],[\"kafka和rabbitmq的区别在哪\",{\"1\":{\"562\":1,\"634\":1}}],[\"kafka与zookeeper是什么关系\",{\"1\":{\"594\":1,\"666\":1}}],[\"kafka如何保证消息不丢失\",{\"1\":{\"581\":1,\"621\":1,\"653\":2,\"693\":1}}],[\"kafka如何实现高吞吐的\",{\"1\":{\"564\":1,\"636\":2}}],[\"kafka的使用场景\",{\"0\":{\"1068\":1}}],[\"kafka的主配置文件为\",{\"1\":{\"1029\":1}}],[\"kafka的数据就保存在topic\",{\"1\":{\"1020\":1}}],[\"kafka的基本角色\",{\"0\":{\"1020\":1}}],[\"kafka的特点\",{\"0\":{\"1018\":1}}],[\"kafka的每个主题都有多个副本\",{\"1\":{\"653\":1}}],[\"kafka的幂等性\",{\"1\":{\"581\":1,\"653\":3}}],[\"kafka的消息丢失和消息重复消费\",{\"1\":{\"562\":1,\"634\":2}}],[\"kafka业务使用\",{\"1\":{\"579\":1,\"651\":2}}],[\"kafka在分配parition的时候选择的规则不是按照磁盘的空间大小来定的\",{\"1\":{\"1029\":1}}],[\"kafka在这种情况下削峰意义不大\",{\"1\":{\"576\":1,\"648\":1}}],[\"kafka在业务中的角色\",{\"1\":{\"576\":1,\"648\":1}}],[\"kafka相关\",{\"1\":{\"576\":1,\"648\":1}}],[\"kafka你们是怎么部署的呢\",{\"1\":{\"565\":1,\"637\":2}}],[\"kafka\",{\"0\":{\"1016\":1,\"1055\":1,\"1060\":1},\"1\":{\"122\":1,\"622\":3,\"634\":4,\"636\":5,\"637\":9,\"651\":1,\"656\":2,\"694\":3,\"1020\":1,\"1028\":9,\"1029\":2,\"1030\":2,\"1031\":3,\"1032\":7,\"1033\":4,\"1034\":15,\"1035\":2,\"1047\":5,\"1050\":1,\"1054\":2,\"1057\":3,\"1060\":3,\"1062\":1,\"1064\":2,\"1066\":1,\"1067\":2}}],[\"k\",{\"1\":{\"5\":8,\"264\":2,\"338\":2,\"511\":3,\"558\":1,\"639\":4,\"1165\":4,\"1417\":2}}],[\"n小于0时表示不限制替换次数\",{\"1\":{\"1407\":1}}],[\"n指的是替换次数\",{\"1\":{\"1407\":1}}],[\"n<\",{\"1\":{\"1312\":1}}],[\"n是路径段的数量\",{\"1\":{\"1287\":1}}],[\"n通常取32\",{\"1\":{\"1165\":1}}],[\"nremoved\",{\"1\":{\"860\":1}}],[\"nmodified\",{\"1\":{\"859\":1}}],[\"nmatched\",{\"1\":{\"859\":1}}],[\"nbsp\",{\"1\":{\"822\":1,\"824\":2}}],[\"n+1\",{\"1\":{\"645\":2}}],[\"nignx\",{\"1\":{\"1110\":2,\"1165\":1}}],[\"nickname\",{\"1\":{\"1090\":2,\"1092\":1,\"1281\":4,\"1283\":1}}],[\"nice\",{\"1\":{\"477\":4,\"1409\":4}}],[\"nil切片\",{\"1\":{\"534\":1}}],[\"nil切片和空切片两者指向内存地址是不一样的\",{\"1\":{\"534\":1}}],[\"nil切片和空切片有什么不一样\",{\"0\":{\"534\":1}}],[\"nilch\",{\"1\":{\"421\":3}}],[\"nil就占了相当一部分\",{\"1\":{\"388\":1}}],[\"nil这样的语句是无法通过编译的\",{\"1\":{\"203\":1}}],[\"nil仅仅只是一些引用类型的零值\",{\"1\":{\"203\":1}}],[\"nil类似于其它语言中的none或者null\",{\"1\":{\"203\":1}}],[\"nil\",{\"0\":{\"203\":1},\"1\":{\"202\":1,\"203\":1,\"206\":1,\"229\":2,\"259\":1,\"280\":1,\"298\":1,\"320\":2,\"323\":3,\"324\":1,\"337\":1,\"378\":1,\"379\":1,\"388\":8,\"390\":1,\"393\":2,\"394\":1,\"397\":4,\"400\":3,\"401\":7,\"402\":5,\"403\":8,\"404\":1,\"405\":2,\"406\":3,\"408\":3,\"409\":1,\"410\":9,\"425\":3,\"427\":2,\"434\":4,\"435\":2,\"441\":2,\"446\":1,\"463\":4,\"477\":3,\"514\":2,\"633\":1,\"635\":4,\"653\":1,\"702\":2,\"704\":2,\"705\":2,\"706\":2,\"707\":2,\"709\":2,\"710\":2,\"711\":2,\"712\":2,\"713\":6,\"744\":1,\"745\":3,\"746\":2,\"748\":2,\"749\":2,\"751\":2,\"754\":1,\"756\":2,\"766\":11,\"771\":1,\"830\":1,\"833\":1,\"834\":4,\"835\":2,\"836\":4,\"837\":2,\"838\":2,\"881\":3,\"882\":2,\"883\":2,\"884\":5,\"893\":3,\"894\":2,\"895\":2,\"896\":2,\"897\":1,\"910\":2,\"1035\":2,\"1036\":4,\"1037\":3,\"1047\":9,\"1092\":1,\"1245\":1,\"1281\":3,\"1282\":1,\"1283\":2,\"1289\":1,\"1303\":1,\"1311\":1,\"1312\":1,\"1314\":1,\"1315\":2,\"1317\":1,\"1319\":1,\"1320\":1,\"1321\":2,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1335\":1,\"1336\":7,\"1337\":2,\"1338\":1,\"1367\":1,\"1368\":1,\"1369\":2,\"1370\":2,\"1371\":2,\"1372\":1,\"1373\":2,\"1374\":5,\"1411\":1,\"1413\":1,\"1415\":2,\"1417\":5,\"1419\":1,\"1420\":1,\"1425\":2,\"1426\":7,\"1428\":2,\"1432\":2,\"1443\":1}}],[\"n=5\",{\"1\":{\"476\":19}}],[\"n=3\",{\"1\":{\"246\":3}}],[\"n的意思\",{\"1\":{\"813\":1}}],[\"n的大小\",{\"1\":{\"475\":1}}],[\"n的数\",{\"1\":{\"4\":1}}],[\"n为随机种子\",{\"1\":{\"469\":1}}],[\"n值为并行的最大数量\",{\"1\":{\"469\":1}}],[\"nhooyr\",{\"1\":{\"460\":1}}],[\"np\",{\"1\":{\"1443\":2}}],[\"npm这样类似的中央仓库\",{\"1\":{\"451\":1}}],[\"nps\",{\"1\":{\"332\":1}}],[\"nsec\",{\"1\":{\"1429\":1}}],[\"ns为纳秒\",{\"1\":{\"475\":1}}],[\"nsop2\",{\"1\":{\"314\":2}}],[\"nsop1\",{\"1\":{\"314\":2}}],[\"ns\",{\"1\":{\"314\":4,\"475\":13,\"476\":60,\"498\":1}}],[\"n循环\",{\"1\":{\"284\":1}}],[\"n`\",{\"1\":{\"186\":1}}],[\"nflag\",{\"1\":{\"1327\":1}}],[\"nf\",{\"1\":{\"1222\":2}}],[\"nfs\",{\"1\":{\"634\":1}}],[\"nff\",{\"1\":{\"145\":1}}],[\"nfnt\",{\"1\":{\"122\":1}}],[\"nlp\",{\"1\":{\"144\":3}}],[\"nupserted\",{\"1\":{\"859\":1}}],[\"nutsdb\",{\"1\":{\"334\":1}}],[\"numpartitions\",{\"1\":{\"1037\":1}}],[\"numptr\",{\"1\":{\"275\":7}}],[\"numkeys\",{\"1\":{\"974\":2}}],[\"numofobject\",{\"1\":{\"435\":3}}],[\"numout\",{\"1\":{\"364\":1,\"370\":1}}],[\"nummethod\",{\"1\":{\"370\":4,\"371\":1}}],[\"numfield\",{\"1\":{\"367\":3}}],[\"numin\",{\"1\":{\"364\":1,\"370\":1}}],[\"numeric\",{\"1\":{\"276\":1}}],[\"numexpression\",{\"1\":{\"211\":1}}],[\"numsref1\",{\"1\":{\"1446\":2}}],[\"nums4\",{\"1\":{\"239\":1}}],[\"nums3\",{\"1\":{\"239\":1}}],[\"nums2\",{\"1\":{\"239\":1}}],[\"nums\",{\"1\":{\"239\":6,\"240\":4,\"241\":5,\"243\":5,\"244\":5,\"245\":11,\"246\":15,\"249\":2,\"545\":3,\"645\":2,\"653\":6,\"1445\":7,\"1446\":4}}],[\"num++\",{\"1\":{\"230\":3}}],[\"num5\",{\"1\":{\"212\":1}}],[\"num4\",{\"1\":{\"212\":4}}],[\"num\",{\"1\":{\"211\":2,\"212\":4,\"230\":27,\"233\":3,\"249\":2,\"273\":3,\"275\":4,\"285\":2,\"310\":7,\"358\":2,\"359\":3,\"360\":5,\"361\":3,\"440\":3,\"545\":6,\"820\":2,\"985\":4,\"1029\":5,\"1443\":5,\"1445\":4}}],[\"num3\",{\"1\":{\"208\":3,\"212\":4}}],[\"num2\",{\"1\":{\"208\":6,\"212\":4,\"385\":2}}],[\"num1被正确的转换为了int32类型\",{\"1\":{\"385\":1}}],[\"num1\",{\"1\":{\"208\":6,\"212\":3,\"385\":2}}],[\"numc\",{\"1\":{\"205\":1}}],[\"numbers\",{\"1\":{\"491\":1,\"492\":2,\"494\":2}}],[\"number\",{\"1\":{\"293\":3,\"340\":2,\"341\":1,\"471\":3,\"653\":2,\"702\":1,\"704\":4,\"705\":2,\"724\":4,\"768\":5,\"965\":1,\"985\":3,\"1152\":1,\"1225\":2}}],[\"numb\",{\"1\":{\"205\":1}}],[\"numa\",{\"1\":{\"205\":1}}],[\"nude\",{\"1\":{\"139\":1}}],[\"null无法使用索引\",{\"1\":{\"818\":1}}],[\"null值会存在每一行都会占用额外存储空间\",{\"1\":{\"794\":1}}],[\"null`b`\",{\"1\":{\"786\":1}}],[\"null列加索引\",{\"1\":{\"786\":1}}],[\"null\",{\"1\":{\"127\":1,\"513\":1,\"653\":1,\"786\":5,\"794\":1,\"817\":12,\"818\":2,\"892\":7,\"965\":1,\"1164\":19,\"1197\":3}}],[\"ngx\",{\"0\":{\"1152\":1},\"1\":{\"1162\":1,\"1163\":1,\"1164\":91,\"1165\":3}}],[\"ngaro\",{\"1\":{\"130\":1}}],[\"nginx官方已经设置默认的命令启动\",{\"1\":{\"1193\":1}}],[\"nginx官方版本限制ip的连接和并发分别有两个模块\",{\"0\":{\"1150\":1}}],[\"nginx日志切割\",{\"1\":{\"1175\":1}}],[\"nginx日志文件分割\",{\"0\":{\"1174\":1}}],[\"nginx启动失败找不到\",{\"0\":{\"1171\":1}}],[\"nginx会剔除该服务\",{\"1\":{\"1163\":1}}],[\"nginx就会认为这个服务器是挂掉的服务\",{\"1\":{\"1163\":1}}],[\"nginx起到一个代理服务器的角色\",{\"1\":{\"1159\":1}}],[\"nginx考虑到了这种情况\",{\"1\":{\"1155\":1}}],[\"nginx按照毫秒级精度统计\",{\"1\":{\"1155\":1}}],[\"nginx限流实战\",{\"0\":{\"1153\":1}}],[\"nginx关于location\",{\"0\":{\"1140\":1}}],[\"nginx关于root和alias\",{\"0\":{\"1134\":1}}],[\"nginx版本\",{\"1\":{\"1133\":1}}],[\"nginx常量表\",{\"0\":{\"1133\":1}}],[\"nginx外部配置文件include\",{\"0\":{\"1131\":1}}],[\"nginx下载\",{\"1\":{\"1109\":1}}],[\"nginx的日志文件自动切割\",{\"0\":{\"1175\":1}}],[\"nginx的负载均衡策略中不包含一致性hash\",{\"1\":{\"1165\":1}}],[\"nginx的负载均衡\",{\"0\":{\"1159\":1}}],[\"nginx的限流\",{\"0\":{\"1145\":1}}],[\"nginx的配置文件中的server\",{\"1\":{\"1130\":1}}],[\"nginx的worker抢占机制\",{\"0\":{\"1128\":1}}],[\"nginx的进程模型\",{\"0\":{\"1125\":1}}],[\"nginx的进程结构\",{\"0\":{\"1124\":1}}],[\"nginx的安装目录是\",{\"1\":{\"1121\":1}}],[\"nginx的安装\",{\"0\":{\"1109\":1}}],[\"nginx的概述\",{\"0\":{\"1106\":1}}],[\"nginx是一款轻量级的web\",{\"1\":{\"1107\":1}}],[\"nginx是由伊戈尔\",{\"1\":{\"1107\":1}}],[\"nginx是否为单例的\",{\"1\":{\"600\":1,\"672\":1}}],[\"nginx+lua\",{\"1\":{\"1072\":2}}],[\"nginx\",{\"0\":{\"1105\":1,\"1129\":1,\"1130\":1},\"1\":{\"84\":7,\"618\":1,\"690\":1,\"743\":1,\"1107\":2,\"1108\":1,\"1109\":1,\"1111\":2,\"1113\":1,\"1114\":1,\"1115\":1,\"1116\":73,\"1119\":3,\"1121\":1,\"1122\":2,\"1123\":3,\"1126\":4,\"1127\":4,\"1130\":5,\"1131\":6,\"1132\":17,\"1137\":2,\"1139\":1,\"1145\":1,\"1154\":1,\"1158\":1,\"1162\":1,\"1163\":9,\"1164\":2,\"1166\":2,\"1171\":9,\"1172\":2,\"1173\":17,\"1174\":3,\"1175\":1,\"1193\":5,\"1215\":18}}],[\"nntp和smtp中基于文本的通用的请求\",{\"1\":{\"124\":1}}],[\"ne\",{\"1\":{\"1420\":2}}],[\"neicun\",{\"1\":{\"1130\":1}}],[\"neilpang\",{\"1\":{\"84\":1}}],[\"neo4j\",{\"1\":{\"907\":1}}],[\"nest\",{\"1\":{\"821\":1}}],[\"nested\",{\"0\":{\"727\":1},\"1\":{\"729\":2}}],[\"need\",{\"1\":{\"476\":3}}],[\"needed\",{\"1\":{\"303\":2}}],[\"necessary\",{\"1\":{\"470\":1}}],[\"next\",{\"1\":{\"282\":3,\"863\":2,\"1092\":1,\"1164\":5}}],[\"new指old的替换部分\",{\"1\":{\"1407\":1}}],[\"newjsonencoder\",{\"1\":{\"1303\":1}}],[\"newjwt\",{\"1\":{\"1092\":1}}],[\"newenforecer\",{\"1\":{\"1245\":1}}],[\"newenforcer\",{\"1\":{\"1245\":1}}],[\"newer\",{\"1\":{\"1194\":1}}],[\"newindex\",{\"1\":{\"1130\":1,\"1131\":1,\"1142\":2}}],[\"newasyncproducer\",{\"1\":{\"1047\":1}}],[\"newat\",{\"1\":{\"368\":1}}],[\"newkey\",{\"1\":{\"967\":5}}],[\"newname\",{\"1\":{\"919\":1}}],[\"newdate\",{\"1\":{\"858\":1}}],[\"newhighlighterfield\",{\"1\":{\"766\":1}}],[\"newhighlight\",{\"1\":{\"766\":1}}],[\"newheap\",{\"1\":{\"344\":1}}],[\"newboolquery\",{\"1\":{\"763\":1,\"764\":1,\"765\":1}}],[\"newbufferstring\",{\"1\":{\"704\":1,\"706\":1,\"709\":1,\"711\":1,\"713\":3}}],[\"newrandompartitioner\",{\"1\":{\"1047\":1}}],[\"newrangequery\",{\"1\":{\"759\":2}}],[\"newreplacer\",{\"1\":{\"1412\":2}}],[\"newrequest\",{\"1\":{\"1333\":1,\"1334\":1}}],[\"newreflectedencoder\",{\"1\":{\"1302\":1}}],[\"newrestaurant\",{\"1\":{\"881\":4}}],[\"newreader\",{\"1\":{\"225\":1,\"1331\":1,\"1413\":2}}],[\"newmatchquery\",{\"1\":{\"758\":1,\"763\":1,\"765\":1}}],[\"newmyerror\",{\"1\":{\"393\":2}}],[\"newticker\",{\"1\":{\"1434\":3}}],[\"newtimer\",{\"1\":{\"426\":1,\"1433\":3}}],[\"newtermsquery\",{\"1\":{\"757\":1}}],[\"newtermquery\",{\"1\":{\"749\":1,\"752\":1,\"756\":1,\"763\":1,\"764\":1,\"765\":1}}],[\"new执行耗时1123\",{\"1\":{\"476\":1}}],[\"newval\",{\"1\":{\"439\":1}}],[\"newproduction\",{\"1\":{\"1301\":2}}],[\"newprefixquery\",{\"1\":{\"766\":1}}],[\"newprinter\",{\"1\":{\"435\":2}}],[\"newpath\",{\"1\":{\"404\":1}}],[\"newperson\",{\"1\":{\"268\":1,\"269\":3,\"278\":2,\"513\":2}}],[\"new函数是由使用者传入的\",{\"1\":{\"435\":1}}],[\"new函数\",{\"0\":{\"532\":1},\"1\":{\"374\":1}}],[\"new函数只有一个参数那就是类型\",{\"1\":{\"275\":1}}],[\"newsource\",{\"1\":{\"1047\":1}}],[\"newsyncproducer\",{\"1\":{\"1035\":1,\"1047\":1}}],[\"newscript\",{\"1\":{\"749\":1}}],[\"newscanner\",{\"1\":{\"226\":1,\"633\":1}}],[\"newservemux\",{\"1\":{\"324\":1}}],[\"newcore\",{\"1\":{\"1306\":1}}],[\"newconsoleencoder\",{\"1\":{\"1303\":2}}],[\"newconsumer\",{\"1\":{\"1036\":1,\"1047\":2}}],[\"newconfig\",{\"1\":{\"1035\":1,\"1037\":1,\"1047\":3}}],[\"newcond\",{\"1\":{\"432\":2}}],[\"newclusteradmin\",{\"1\":{\"1037\":1}}],[\"newclient\",{\"1\":{\"702\":2,\"704\":1,\"705\":1,\"706\":1,\"707\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":3,\"744\":1,\"745\":1,\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"754\":1,\"756\":1,\"771\":1,\"910\":1,\"912\":1}}],[\"newclient来建立一个新的连接\",{\"1\":{\"702\":1}}],[\"newcancelctx\",{\"1\":{\"427\":1}}],[\"newcap\",{\"1\":{\"244\":1}}],[\"newcharptr\",{\"1\":{\"300\":2}}],[\"new和make有什么区别\",{\"0\":{\"531\":1}}],[\"new和make\",{\"0\":{\"277\":1}}],[\"new\",{\"1\":{\"239\":1,\"243\":1,\"275\":6,\"277\":4,\"280\":1,\"300\":1,\"337\":1,\"352\":1,\"355\":3,\"356\":3,\"359\":1,\"361\":1,\"367\":2,\"369\":1,\"370\":2,\"371\":1,\"373\":3,\"374\":2,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"388\":1,\"390\":2,\"391\":1,\"392\":1,\"393\":2,\"425\":2,\"435\":2,\"440\":1,\"445\":1,\"449\":1,\"463\":2,\"476\":5,\"477\":13,\"511\":1,\"584\":1,\"609\":1,\"654\":4,\"656\":4,\"681\":1,\"745\":2,\"746\":1,\"748\":1,\"751\":1,\"754\":1,\"756\":2,\"766\":1,\"771\":2,\"863\":2,\"1047\":1,\"1078\":1,\"1165\":1,\"1166\":3,\"1306\":1,\"1341\":1,\"1407\":3,\"1415\":1,\"1417\":1,\"1425\":1,\"1426\":3}}],[\"newwriter\",{\"1\":{\"220\":2}}],[\"newfile\",{\"1\":{\"215\":3}}],[\"neural\",{\"1\":{\"142\":1}}],[\"neat\",{\"1\":{\"142\":2}}],[\"netfilter\",{\"1\":{\"1222\":1}}],[\"netmask=255\",{\"1\":{\"1219\":1}}],[\"net网络下\",{\"1\":{\"1198\":1}}],[\"net=自定义网络\",{\"1\":{\"1197\":1}}],[\"net=host\",{\"1\":{\"1197\":1}}],[\"net=container\",{\"1\":{\"1197\":1}}],[\"net=none\",{\"1\":{\"1197\":1}}],[\"net=bridge\",{\"1\":{\"1197\":1}}],[\"netnsid\",{\"1\":{\"1194\":1,\"1195\":3}}],[\"netcraft\",{\"1\":{\"1108\":2}}],[\"netty\",{\"1\":{\"1108\":1}}],[\"netstat\",{\"1\":{\"614\":1,\"686\":1}}],[\"networks\",{\"1\":{\"1197\":5}}],[\"network\",{\"1\":{\"328\":1,\"768\":1,\"769\":1,\"770\":1,\"849\":1,\"911\":2,\"1029\":1,\"1197\":21,\"1198\":2,\"1219\":2,\"1223\":2,\"1225\":1,\"1228\":1,\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1}}],[\"net\",{\"0\":{\"1365\":1},\"1\":{\"124\":2,\"145\":2,\"158\":1,\"324\":5,\"330\":1,\"453\":2,\"454\":1,\"459\":12,\"523\":1,\"852\":2,\"911\":1,\"955\":1,\"985\":1,\"1087\":1,\"1092\":1,\"1108\":1,\"1195\":1,\"1197\":23,\"1198\":3,\"1222\":2,\"1238\":1,\"1274\":1,\"1275\":1,\"1277\":1,\"1308\":1,\"1367\":2,\"1368\":2,\"1369\":3,\"1370\":3,\"1371\":3,\"1372\":2,\"1373\":4,\"1374\":4}}],[\"narg\",{\"1\":{\"1327\":1}}],[\"navicat\",{\"1\":{\"876\":3}}],[\"navicat是一种收费数据库管理工具\",{\"1\":{\"876\":1}}],[\"nan检测\",{\"0\":{\"1350\":1}}],[\"nan虽然没法正常获取\",{\"1\":{\"263\":1}}],[\"nan也不等于自身\",{\"1\":{\"261\":1}}],[\"nan\",{\"1\":{\"261\":8,\"262\":10,\"263\":6,\"280\":1,\"512\":1,\"1350\":1}}],[\"nanosecond\",{\"1\":{\"1430\":2}}],[\"nanoseconds\",{\"1\":{\"314\":1}}],[\"nano\",{\"1\":{\"134\":1,\"333\":1}}],[\"nad83\",{\"1\":{\"135\":1}}],[\"natefinch\",{\"1\":{\"1304\":1,\"1307\":2}}],[\"nats\",{\"1\":{\"128\":1}}],[\"nats的轻量级\",{\"1\":{\"128\":1}}],[\"native\",{\"1\":{\"126\":1}}],[\"naoina\",{\"1\":{\"122\":2}}],[\"nacos服务正常\",{\"1\":{\"1082\":1}}],[\"nacos\",{\"0\":{\"100\":1}}],[\"nameencoder\",{\"1\":{\"1302\":3}}],[\"namekey\",{\"1\":{\"1302\":3,\"1303\":1}}],[\"name就是容器的名字\",{\"1\":{\"1197\":1}}],[\"name进行隔离\",{\"1\":{\"1130\":1}}],[\"name>\",{\"1\":{\"1000\":2,\"1311\":1,\"1312\":1}}],[\"nameserver\",{\"1\":{\"1219\":2}}],[\"namespaces\",{\"1\":{\"1233\":1}}],[\"namespace\",{\"1\":{\"1197\":3,\"1231\":1}}],[\"names\",{\"1\":{\"892\":1}}],[\"name索引生效\",{\"1\":{\"818\":1}}],[\"name`\",{\"1\":{\"817\":2}}],[\"name=tom\",{\"1\":{\"1280\":2,\"1281\":1}}],[\"name=tensquare\",{\"1\":{\"775\":2,\"1081\":1}}],[\"name=kubernetes\",{\"1\":{\"1222\":1}}],[\"name=enp0s3\",{\"1\":{\"1219\":1}}],[\"name=商品明\",{\"1\":{\"1081\":1}}],[\"name=\",{\"1\":{\"814\":4,\"818\":3,\"819\":5,\"1188\":1}}],[\"name+age命中\",{\"1\":{\"806\":1}}],[\"name+age+email建设了一个联合索引\",{\"1\":{\"806\":4}}],[\"name等字段\",{\"1\":{\"653\":1}}],[\"name注释\",{\"1\":{\"300\":1}}],[\"name\",{\"1\":{\"55\":2,\"58\":2,\"187\":2,\"205\":1,\"206\":8,\"207\":1,\"211\":4,\"221\":1,\"266\":1,\"267\":1,\"268\":5,\"269\":4,\"270\":6,\"271\":3,\"272\":2,\"278\":7,\"281\":8,\"307\":4,\"317\":3,\"338\":7,\"339\":4,\"344\":5,\"348\":1,\"352\":1,\"364\":1,\"366\":2,\"367\":5,\"368\":6,\"369\":6,\"370\":3,\"374\":2,\"379\":3,\"388\":1,\"400\":6,\"401\":3,\"402\":5,\"405\":1,\"408\":3,\"409\":1,\"446\":10,\"447\":1,\"450\":2,\"463\":3,\"473\":7,\"477\":3,\"482\":1,\"513\":11,\"516\":7,\"554\":2,\"581\":1,\"584\":1,\"635\":6,\"651\":2,\"653\":2,\"656\":4,\"702\":2,\"704\":2,\"705\":2,\"709\":2,\"710\":1,\"711\":2,\"713\":1,\"720\":1,\"725\":2,\"726\":3,\"733\":4,\"768\":4,\"769\":3,\"770\":3,\"795\":1,\"806\":3,\"809\":3,\"810\":10,\"814\":2,\"815\":2,\"818\":10,\"819\":1,\"820\":1,\"822\":3,\"825\":1,\"832\":3,\"833\":3,\"834\":8,\"835\":3,\"836\":5,\"837\":1,\"847\":2,\"857\":1,\"858\":3,\"859\":2,\"860\":1,\"861\":12,\"862\":3,\"863\":2,\"880\":1,\"881\":4,\"890\":1,\"893\":1,\"895\":1,\"915\":2,\"916\":4,\"917\":3,\"918\":2,\"919\":1,\"920\":1,\"927\":2,\"993\":1,\"1075\":1,\"1077\":1,\"1078\":1,\"1079\":1,\"1081\":1,\"1082\":1,\"1123\":1,\"1130\":2,\"1131\":2,\"1133\":6,\"1136\":2,\"1141\":1,\"1142\":1,\"1143\":1,\"1144\":1,\"1152\":1,\"1158\":3,\"1160\":2,\"1194\":1,\"1196\":3,\"1197\":12,\"1198\":1,\"1215\":11,\"1228\":3,\"1235\":1,\"1280\":2,\"1281\":10,\"1283\":4,\"1289\":2,\"1307\":2,\"1310\":1,\"1318\":2,\"1319\":1,\"1320\":1,\"1321\":3,\"1325\":5,\"1328\":6,\"1409\":4,\"1417\":1,\"1419\":3,\"1420\":2,\"1421\":1,\"1422\":5,\"1425\":5,\"1426\":5,\"1427\":4,\"1428\":5,\"1440\":2,\"1441\":4,\"1442\":4,\"1443\":2}}],[\"nov\",{\"1\":{\"1431\":1}}],[\"noverb\",{\"1\":{\"221\":1}}],[\"noescape\",{\"1\":{\"1411\":1}}],[\"noqueue\",{\"1\":{\"1194\":4,\"1195\":5}}],[\"noargs\",{\"1\":{\"1164\":1}}],[\"nominal\",{\"1\":{\"1163\":1}}],[\"nobody\",{\"1\":{\"1126\":1,\"1130\":3,\"1131\":2,\"1158\":1}}],[\"nohup\",{\"1\":{\"1031\":1,\"1033\":1}}],[\"noprefixroute\",{\"1\":{\"1194\":2}}],[\"nopush\",{\"1\":{\"1130\":1,\"1131\":1,\"1158\":1}}],[\"nopush它必须和sendfile使用\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"nopass\",{\"1\":{\"1003\":1}}],[\"nopqrst\",{\"1\":{\"252\":1}}],[\"nosql数据库在读写性能上可能优于rdbms\",{\"1\":{\"906\":1}}],[\"nosql\",{\"1\":{\"906\":1}}],[\"no的解决2\",{\"1\":{\"825\":1}}],[\"noc\",{\"1\":{\"511\":2}}],[\"node节点ping测试映射是否成功\",{\"1\":{\"1225\":1}}],[\"nodelay参数要跟burst一起使用才有作用\",{\"1\":{\"1156\":1}}],[\"nodelay参数允许请求在排队的时候就立即被处理\",{\"1\":{\"1156\":1}}],[\"nodelay降低排队时间\",{\"0\":{\"1156\":1}}],[\"nodelay\",{\"1\":{\"1151\":5,\"1156\":1,\"1157\":1,\"1158\":3}}],[\"node命令增加集群节点\",{\"1\":{\"1010\":1}}],[\"node\",{\"1\":{\"768\":4,\"769\":4,\"770\":4,\"1006\":2,\"1010\":11,\"1225\":1,\"1238\":1}}],[\"node3\",{\"1\":{\"767\":1}}],[\"node2\",{\"1\":{\"767\":1,\"770\":1,\"1228\":1}}],[\"node1\",{\"1\":{\"767\":1,\"1228\":1}}],[\"nodeport\",{\"1\":{\"655\":2,\"1234\":2,\"1235\":2}}],[\"node组件\",{\"1\":{\"655\":1}}],[\"nodejs的npm等\",{\"1\":{\"442\":1}}],[\"nodes\",{\"1\":{\"326\":1,\"768\":2,\"1010\":12,\"1225\":2,\"1228\":1}}],[\"node版本管理工具\",{\"1\":{\"76\":1}}],[\"node版本控制\",{\"0\":{\"76\":1}}],[\"now\",{\"1\":{\"314\":2,\"393\":1,\"419\":1,\"428\":2,\"470\":1,\"477\":1,\"653\":1,\"746\":1,\"1047\":1,\"1090\":2,\"1164\":5,\"1223\":1,\"1225\":1,\"1429\":5,\"1431\":5,\"1435\":2}}],[\"no\",{\"1\":{\"300\":1,\"307\":1,\"326\":1,\"468\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"717\":3,\"722\":1,\"825\":2,\"965\":4,\"986\":1,\"987\":1,\"990\":1,\"993\":3,\"1003\":1,\"1004\":3,\"1010\":3,\"1228\":1}}],[\"none模式\",{\"1\":{\"1197\":1}}],[\"none即可删除该依赖\",{\"1\":{\"453\":1}}],[\"none\",{\"1\":{\"453\":1,\"766\":1,\"1197\":2,\"1202\":1}}],[\"nonemptyinterface\",{\"1\":{\"347\":3}}],[\"non\",{\"1\":{\"276\":1,\"320\":1,\"993\":1,\"1411\":2}}],[\"notbefore\",{\"1\":{\"1090\":1}}],[\"noti\",{\"1\":{\"1047\":2}}],[\"notice延迟的的基本是info\",{\"1\":{\"1151\":1}}],[\"notice\",{\"1\":{\"965\":1,\"1130\":2,\"1131\":2,\"1151\":1,\"1152\":1,\"1158\":1}}],[\"notifications\",{\"1\":{\"1047\":2}}],[\"notification\",{\"1\":{\"1000\":1}}],[\"notifier\",{\"1\":{\"138\":2}}],[\"notify\",{\"1\":{\"132\":1}}],[\"notablescan=false\",{\"1\":{\"852\":1}}],[\"not条件\",{\"0\":{\"764\":1},\"1\":{\"764\":1}}],[\"not\",{\"1\":{\"206\":1,\"287\":1,\"293\":2,\"298\":1,\"318\":2,\"320\":1,\"390\":2,\"413\":1,\"453\":1,\"463\":1,\"477\":1,\"513\":1,\"515\":1,\"653\":1,\"717\":1,\"786\":3,\"794\":1,\"806\":1,\"817\":3,\"818\":2,\"825\":1,\"861\":1,\"892\":1,\"910\":1,\"993\":1,\"1196\":2,\"1198\":1,\"1282\":1,\"1420\":2,\"1457\":1}}],[\"note\",{\"1\":{\"61\":1,\"62\":1}}],[\"noll和phong\",{\"1\":{\"124\":1}}],[\"nvm\",{\"0\":{\"76\":1},\"1\":{\"76\":1}}],[\"n\",{\"1\":{\"5\":6,\"185\":1,\"186\":6,\"218\":1,\"221\":26,\"223\":2,\"224\":7,\"225\":1,\"234\":4,\"241\":6,\"246\":2,\"252\":1,\"258\":3,\"279\":1,\"282\":8,\"284\":2,\"293\":2,\"299\":1,\"301\":1,\"304\":24,\"305\":6,\"310\":2,\"314\":8,\"320\":12,\"340\":6,\"341\":6,\"368\":1,\"376\":1,\"401\":2,\"402\":7,\"403\":1,\"408\":2,\"416\":4,\"417\":2,\"420\":6,\"421\":26,\"435\":2,\"436\":6,\"469\":6,\"475\":2,\"477\":2,\"492\":2,\"498\":5,\"499\":2,\"500\":2,\"542\":2,\"554\":4,\"556\":1,\"630\":1,\"633\":1,\"638\":1,\"639\":4,\"653\":3,\"654\":7,\"723\":1,\"743\":1,\"744\":1,\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"754\":1,\"756\":2,\"791\":1,\"815\":1,\"820\":2,\"833\":1,\"834\":2,\"981\":2,\"1047\":4,\"1056\":1,\"1164\":4,\"1231\":1,\"1235\":4,\"1245\":3,\"1287\":1,\"1312\":4,\"1320\":1,\"1374\":2,\"1400\":1,\"1402\":2,\"1407\":1,\"1408\":6,\"1417\":3}}],[\"illegal\",{\"1\":{\"1411\":2}}],[\"iş\",{\"1\":{\"1409\":2}}],[\"i̇ş\",{\"1\":{\"1409\":2}}],[\"igor\",{\"1\":{\"1164\":1}}],[\"ignore\",{\"1\":{\"822\":3}}],[\"izuf62zev3la2ivndnxra5z\",{\"1\":{\"1132\":1,\"1163\":1,\"1173\":1}}],[\"izf8z8fcvqy10f6a60f8ayz\",{\"1\":{\"1078\":1}}],[\"ibm\",{\"1\":{\"1035\":1,\"1036\":1}}],[\"ik的插件\",{\"1\":{\"770\":1}}],[\"ikanalyzer\",{\"1\":{\"742\":3}}],[\"ik\",{\"0\":{\"743\":1},\"1\":{\"740\":6,\"741\":2,\"742\":2,\"743\":2,\"745\":1}}],[\"i<n\",{\"1\":{\"820\":1}}],[\"i<b\",{\"1\":{\"630\":1}}],[\"i<10000\",{\"1\":{\"630\":1,\"858\":1}}],[\"i<<1\",{\"1\":{\"344\":2}}],[\"icc\",{\"1\":{\"1197\":1}}],[\"icmp\",{\"1\":{\"1194\":1,\"1195\":5,\"1196\":3,\"1197\":9}}],[\"icmp位于哪层\",{\"1\":{\"603\":1,\"675\":1}}],[\"icu\",{\"1\":{\"144\":1}}],[\"i5\",{\"1\":{\"498\":1}}],[\"i7\",{\"1\":{\"475\":1,\"476\":3}}],[\"i736aousyt75hyzlojw9eryxcy6ean6h4bzxu064p\",{\"1\":{\"460\":1}}],[\"i>>1\",{\"1\":{\"344\":2}}],[\"iris\",{\"1\":{\"330\":1}}],[\"iris等等\",{\"1\":{\"324\":1}}],[\"i指的是搜索头文件的相对路径\",{\"1\":{\"312\":1}}],[\"i就是接收者\",{\"1\":{\"285\":1}}],[\"issorted\",{\"1\":{\"1381\":1}}],[\"issuer\",{\"1\":{\"1090\":1}}],[\"issue\",{\"1\":{\"84\":1}}],[\"isinf\",{\"1\":{\"1351\":2}}],[\"isnan\",{\"1\":{\"1350\":1}}],[\"isnotexist\",{\"1\":{\"400\":2}}],[\"isvalidatorerror\",{\"1\":{\"1289\":2}}],[\"isempty\",{\"1\":{\"1165\":1}}],[\"isexported\",{\"1\":{\"367\":2,\"370\":2}}],[\"isos\",{\"1\":{\"1218\":1}}],[\"iso8601\",{\"1\":{\"1133\":1}}],[\"isolation\",{\"1\":{\"904\":1}}],[\"iscomment\",{\"1\":{\"1082\":1}}],[\"isfree\",{\"1\":{\"1082\":1}}],[\"isr\",{\"1\":{\"1034\":3}}],[\"isr=1\",{\"1\":{\"1029\":1}}],[\"isregular\",{\"1\":{\"410\":2}}],[\"isatty\",{\"1\":{\"453\":2,\"459\":1}}],[\"isdir\",{\"1\":{\"410\":1}}],[\"is函数的作用是判断错误链中是否包含指定的错误\",{\"1\":{\"393\":1}}],[\"is\",{\"1\":{\"253\":6,\"254\":2,\"255\":2,\"256\":2,\"257\":8,\"289\":4,\"303\":15,\"325\":1,\"328\":1,\"347\":2,\"393\":4,\"401\":1,\"453\":2,\"463\":1,\"470\":1,\"471\":14,\"472\":2,\"473\":2,\"474\":2,\"477\":1,\"516\":2,\"706\":3,\"717\":2,\"766\":1,\"794\":2,\"818\":3,\"1010\":2,\"1163\":2,\"1280\":6,\"1374\":1,\"1399\":2,\"1407\":8,\"1408\":8,\"1409\":4,\"1410\":10,\"1412\":2,\"1415\":2,\"1418\":2}}],[\"i=max\",{\"1\":{\"820\":1}}],[\"i=i+1\",{\"1\":{\"820\":2}}],[\"i=2\",{\"1\":{\"246\":1}}],[\"i=3\",{\"1\":{\"245\":1}}],[\"i=0\",{\"1\":{\"192\":1,\"858\":1}}],[\"ieee\",{\"1\":{\"198\":3}}],[\"ietf\",{\"1\":{\"145\":1}}],[\"i18n\",{\"1\":{\"144\":1}}],[\"itd\",{\"1\":{\"1194\":1,\"1196\":1,\"1197\":4}}],[\"itoa\",{\"1\":{\"1047\":1,\"1385\":2}}],[\"item\",{\"1\":{\"756\":2,\"794\":1}}],[\"iterator\",{\"1\":{\"453\":2,\"459\":1}}],[\"iterable\",{\"1\":{\"234\":1}}],[\"iter\",{\"1\":{\"127\":1}}],[\"ityp\",{\"1\":{\"347\":1}}],[\"itab\",{\"1\":{\"347\":2}}],[\"it\",{\"1\":{\"303\":4,\"470\":4,\"1163\":1,\"1189\":1,\"1194\":1,\"1195\":3,\"1196\":4,\"1197\":3,\"1198\":2}}],[\"its\",{\"1\":{\"289\":1,\"470\":3,\"1163\":1}}],[\"itcast\",{\"1\":{\"55\":4}}],[\"id会分解为\",{\"1\":{\"1285\":1}}],[\"id没有变化\",{\"1\":{\"1029\":1}}],[\"ids\",{\"1\":{\"1010\":4}}],[\"id参数\",{\"1\":{\"858\":1}}],[\"id>3000109\",{\"1\":{\"820\":1}}],[\"id>\",{\"1\":{\"820\":1,\"1311\":1,\"1312\":1}}],[\"id>1\",{\"1\":{\"818\":1,\"819\":1}}],[\"id>2\",{\"1\":{\"814\":1}}],[\"id`\",{\"1\":{\"817\":5}}],[\"id相同不同\",{\"1\":{\"814\":1}}],[\"id值不同\",{\"1\":{\"814\":1}}],[\"id值越大\",{\"1\":{\"814\":1}}],[\"id值越大优先级越高\",{\"1\":{\"814\":1}}],[\"id值相同\",{\"1\":{\"814\":3}}],[\"id的序号会递增\",{\"1\":{\"814\":1}}],[\"id不同\",{\"1\":{\"814\":1}}],[\"id​\",{\"1\":{\"814\":1}}],[\"id=tmp\",{\"1\":{\"820\":1}}],[\"id=1\",{\"1\":{\"814\":1,\"818\":4,\"1029\":1}}],[\"id=103\",{\"1\":{\"822\":1}}],[\"id=102\",{\"1\":{\"822\":1}}],[\"id=100\",{\"1\":{\"822\":1}}],[\"id=1000\",{\"1\":{\"814\":1}}],[\"id=10\",{\"1\":{\"780\":1}}],[\"id=d\",{\"1\":{\"814\":1,\"821\":1}}],[\"id=\",{\"1\":{\"814\":1}}],[\"id=5\",{\"1\":{\"810\":2}}],[\"id=xx\",{\"1\":{\"796\":1}}],[\"id等\",{\"1\":{\"794\":1}}],[\"id等字段\",{\"1\":{\"653\":1}}],[\"idempotence=true来确保消息的生产是幂等的\",{\"1\":{\"653\":1}}],[\"idlecheckfrequency\",{\"1\":{\"911\":1}}],[\"idletimeout\",{\"1\":{\"911\":1,\"1336\":1}}],[\"idl\",{\"1\":{\"637\":1}}],[\"idx\",{\"1\":{\"795\":2,\"810\":1,\"818\":1}}],[\"idxlo\",{\"1\":{\"400\":1}}],[\"idxhi\",{\"1\":{\"400\":1}}],[\"id\",{\"1\":{\"338\":7,\"339\":3,\"513\":1,\"516\":2,\"581\":1,\"584\":1,\"641\":5,\"651\":1,\"653\":10,\"656\":4,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"724\":1,\"741\":2,\"746\":2,\"748\":4,\"751\":4,\"754\":2,\"759\":3,\"766\":3,\"778\":2,\"780\":2,\"794\":4,\"795\":1,\"809\":3,\"810\":2,\"814\":43,\"817\":4,\"818\":3,\"819\":6,\"820\":5,\"821\":8,\"822\":2,\"857\":2,\"858\":2,\"859\":1,\"861\":1,\"880\":1,\"882\":5,\"883\":5,\"884\":7,\"893\":2,\"894\":2,\"895\":1,\"896\":1,\"1010\":3,\"1029\":1,\"1082\":1,\"1090\":2,\"1092\":1,\"1187\":1,\"1197\":4,\"1225\":2,\"1280\":1,\"1283\":3,\"1285\":2,\"1286\":5,\"1287\":1,\"1310\":1,\"1318\":2,\"1319\":1,\"1320\":1}}],[\"id类型\",{\"1\":{\"127\":1}}],[\"id3v2\",{\"1\":{\"126\":1}}],[\"ip4\",{\"1\":{\"1369\":1}}],[\"ip无论怎么变\",{\"1\":{\"1197\":1}}],[\"ipv6addr\",{\"1\":{\"1369\":2}}],[\"ipv6address\",{\"1\":{\"1197\":3}}],[\"ipv6\",{\"1\":{\"1219\":4,\"1369\":1}}],[\"ipv6init=yes\",{\"1\":{\"1219\":1}}],[\"ipv4net\",{\"1\":{\"1368\":2}}],[\"ipv4addr\",{\"1\":{\"1368\":2,\"1369\":2}}],[\"ipv4address\",{\"1\":{\"1197\":3}}],[\"ipv4pool\",{\"1\":{\"1228\":1}}],[\"ipv4\",{\"1\":{\"1197\":1,\"1219\":1}}],[\"ipam\",{\"1\":{\"1197\":1}}],[\"ipaddr=192\",{\"1\":{\"1219\":1}}],[\"ipaddr\",{\"1\":{\"1166\":9,\"1369\":1}}],[\"ipaddr启发而使用ip地址\",{\"1\":{\"145\":1}}],[\"ipaddress和ruby\",{\"1\":{\"145\":1}}],[\"ip6tables\",{\"1\":{\"1222\":1}}],[\"ip6\",{\"1\":{\"1196\":6,\"1369\":1}}],[\"ip直接通信\",{\"1\":{\"1195\":1}}],[\"ip发生了变化怎么办\",{\"1\":{\"1195\":1}}],[\"ip访问没有问题\",{\"1\":{\"1195\":1}}],[\"iputils\",{\"1\":{\"1166\":4}}],[\"iphp\",{\"1\":{\"1164\":38}}],[\"iplimit\",{\"1\":{\"1158\":1}}],[\"iplib\",{\"1\":{\"145\":1}}],[\"ip地址支持解析ipv4\",{\"1\":{\"1369\":1}}],[\"ip地址\",{\"0\":{\"1369\":1},\"1\":{\"1365\":1}}],[\"ip地址访问信息\",{\"1\":{\"1154\":1}}],[\"ip地址的访问信息\",{\"1\":{\"1154\":1}}],[\"ip或域名\",{\"1\":{\"1133\":1}}],[\"ip><服务端口><判定人数>\",{\"1\":{\"1000\":1}}],[\"ip>\",{\"1\":{\"993\":1,\"1000\":1,\"1234\":2}}],[\"ip类型的字段用于存储ipv4或ipv6的地址\",{\"1\":{\"732\":1}}],[\"ip类型\",{\"0\":{\"732\":1}}],[\"ip白名单\",{\"1\":{\"724\":1}}],[\"ip值的范围\",{\"1\":{\"724\":1}}],[\"ip位于哪层\",{\"1\":{\"603\":1,\"675\":1}}],[\"iptables\",{\"1\":{\"1222\":2}}],[\"iptr++\",{\"1\":{\"310\":1}}],[\"iptr\",{\"1\":{\"310\":1}}],[\"iptc等\",{\"1\":{\"132\":1}}],[\"ipnet\",{\"1\":{\"145\":1,\"1368\":1}}],[\"ip\",{\"0\":{\"1164\":1},\"1\":{\"124\":1,\"145\":1,\"586\":1,\"655\":2,\"658\":1,\"724\":5,\"732\":4,\"852\":1,\"993\":1,\"1010\":1,\"1084\":1,\"1120\":1,\"1136\":1,\"1139\":2,\"1142\":1,\"1160\":1,\"1164\":28,\"1165\":1,\"1166\":1,\"1194\":2,\"1195\":3,\"1197\":1,\"1228\":1,\"1234\":2,\"1235\":2,\"1368\":1}}],[\"ipdb\",{\"1\":{\"122\":1}}],[\"ipipdotnet\",{\"1\":{\"122\":1}}],[\"ivpusic\",{\"1\":{\"122\":1}}],[\"iocore\",{\"1\":{\"1302\":1}}],[\"io操作很耗时\",{\"1\":{\"794\":1}}],[\"io高效\",{\"1\":{\"788\":1}}],[\"io多路复用\",{\"1\":{\"573\":1,\"645\":1}}],[\"io库\",{\"1\":{\"399\":1}}],[\"io进行实验\",{\"1\":{\"140\":1}}],[\"ios\",{\"1\":{\"138\":1}}],[\"iota来实现枚举\",{\"1\":{\"213\":1}}],[\"iota<<2\",{\"1\":{\"212\":2}}],[\"iota是递增的\",{\"1\":{\"212\":1}}],[\"iota是一个内置的常量标识符\",{\"1\":{\"212\":1}}],[\"iota\",{\"0\":{\"212\":1},\"1\":{\"210\":1,\"212\":6,\"213\":1,\"351\":1,\"1341\":1}}],[\"iot是用于实现google\",{\"1\":{\"140\":1}}],[\"iot\",{\"1\":{\"140\":2}}],[\"iot设备库套件\",{\"1\":{\"140\":1}}],[\"iot和云本机系统的轻量级高性能消息传递系统\",{\"1\":{\"128\":1}}],[\"iotest\",{\"1\":{\"124\":1}}],[\"ioutil\",{\"1\":{\"124\":1}}],[\"io\",{\"1\":{\"121\":1,\"122\":1,\"124\":2,\"128\":1,\"279\":1,\"388\":1,\"401\":3,\"402\":2,\"403\":3,\"410\":1,\"435\":1,\"451\":1,\"460\":6,\"639\":1,\"823\":1,\"825\":3,\"955\":1,\"964\":1,\"967\":1,\"1029\":1,\"1184\":2,\"1221\":1,\"1228\":2,\"1231\":1,\"1302\":1,\"1307\":3,\"1308\":2,\"1330\":1,\"1341\":2,\"1374\":2,\"1413\":7,\"1415\":1,\"1417\":1,\"1425\":2}}],[\"im\",{\"1\":{\"331\":1}}],[\"im通讯\",{\"0\":{\"331\":1}}],[\"impossible\",{\"1\":{\"814\":1}}],[\"importer\",{\"1\":{\"1308\":1}}],[\"import是导入关键字\",{\"1\":{\"172\":1}}],[\"import\",{\"1\":{\"172\":1,\"175\":7,\"177\":1,\"178\":1,\"209\":1,\"214\":1,\"217\":1,\"219\":1,\"251\":1,\"297\":1,\"298\":3,\"299\":2,\"300\":2,\"301\":1,\"302\":2,\"303\":8,\"304\":1,\"305\":1,\"306\":4,\"307\":2,\"308\":2,\"309\":2,\"310\":4,\"312\":2,\"313\":2,\"314\":2,\"320\":1,\"323\":3,\"324\":3,\"393\":1,\"446\":3,\"448\":2,\"453\":1,\"463\":2,\"468\":2,\"470\":2,\"471\":4,\"472\":1,\"473\":1,\"475\":2,\"477\":1,\"491\":1,\"494\":1,\"525\":1,\"584\":1,\"630\":1,\"633\":1,\"654\":1,\"656\":2,\"744\":2,\"745\":2,\"746\":2,\"748\":1,\"751\":1,\"754\":1,\"756\":1,\"830\":1,\"884\":1,\"910\":1,\"1035\":1,\"1036\":1,\"1037\":1,\"1047\":3,\"1087\":1,\"1092\":1,\"1165\":2,\"1166\":7,\"1245\":1,\"1274\":2,\"1275\":1,\"1277\":1,\"1307\":1,\"1321\":1,\"1323\":1,\"1367\":1,\"1368\":1,\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":2,\"1374\":2,\"1383\":1,\"1395\":1,\"1415\":1,\"1428\":1}}],[\"important\",{\"1\":{\"61\":1,\"62\":2}}],[\"implements\",{\"0\":{\"355\":1},\"1\":{\"355\":3}}],[\"implement\",{\"1\":{\"287\":1,\"289\":2,\"515\":1,\"1337\":1}}],[\"img\",{\"1\":{\"139\":1,\"1020\":1,\"1022\":1,\"1082\":4,\"1143\":1,\"1144\":3,\"1157\":1,\"1280\":2,\"1285\":1}}],[\"imghdr模块确定go文件中包含的图像类型\",{\"1\":{\"139\":1}}],[\"imaging\",{\"1\":{\"139\":1}}],[\"imaginary\",{\"1\":{\"139\":1}}],[\"imagick\",{\"1\":{\"139\":1}}],[\"image=registry\",{\"1\":{\"1223\":1}}],[\"images\",{\"1\":{\"1082\":1,\"1187\":2}}],[\"image2ascii\",{\"1\":{\"139\":1}}],[\"image\",{\"1\":{\"83\":1,\"124\":2,\"745\":1,\"746\":3,\"1063\":1,\"1072\":1,\"1079\":3,\"1084\":1,\"1085\":2,\"1087\":1,\"1090\":1,\"1091\":3,\"1093\":3,\"1095\":1,\"1096\":2,\"1098\":2,\"1099\":2,\"1101\":2,\"1102\":1,\"1103\":1,\"1116\":1,\"1120\":1,\"1123\":1,\"1126\":2,\"1127\":1,\"1128\":1,\"1130\":1,\"1131\":1,\"1156\":1,\"1161\":1,\"1162\":1,\"1164\":2,\"1165\":3,\"1182\":1,\"1183\":3,\"1187\":1,\"1194\":2,\"1215\":3,\"1225\":1,\"1228\":2,\"1308\":1}}],[\"imap\",{\"1\":{\"129\":1,\"1107\":1}}],[\"inlocation\",{\"1\":{\"1432\":2}}],[\"inline\",{\"1\":{\"326\":1}}],[\"inf\",{\"1\":{\"1351\":1}}],[\"inf检测\",{\"0\":{\"1351\":1}}],[\"infra\",{\"1\":{\"1223\":1}}],[\"infolevel\",{\"1\":{\"1305\":2}}],[\"infof\",{\"1\":{\"1301\":1}}],[\"infow\",{\"1\":{\"1301\":1}}],[\"inforesp\",{\"1\":{\"702\":2}}],[\"information\",{\"1\":{\"454\":1,\"1197\":2}}],[\"info\",{\"1\":{\"61\":1,\"62\":1,\"410\":6,\"457\":1,\"460\":3,\"702\":2,\"968\":2,\"990\":1,\"1003\":1,\"1010\":3,\"1130\":2,\"1131\":2,\"1151\":1,\"1152\":1,\"1158\":1,\"1166\":2,\"1301\":1,\"1303\":2,\"1306\":1,\"1426\":2,\"1427\":2,\"1428\":3}}],[\"inet\",{\"1\":{\"1164\":1,\"1194\":5,\"1195\":3}}],[\"inet6\",{\"1\":{\"1164\":3,\"1194\":2,\"1195\":3}}],[\"in6\",{\"1\":{\"1164\":2}}],[\"in和exits查询\",{\"1\":{\"821\":1}}],[\"in等查询\",{\"1\":{\"814\":1}}],[\"ini的改进\",{\"1\":{\"1309\":1}}],[\"ini\",{\"1\":{\"799\":1}}],[\"initzap\",{\"1\":{\"1306\":1}}],[\"initgoodsrouter\",{\"1\":{\"1087\":1}}],[\"initwebrouter\",{\"1\":{\"1087\":1}}],[\"initmongodb\",{\"1\":{\"884\":1}}],[\"initilzation\",{\"1\":{\"884\":2}}],[\"initialfields\",{\"1\":{\"1302\":3,\"1303\":1}}],[\"initialize\",{\"1\":{\"1087\":1}}],[\"initialized\",{\"1\":{\"993\":1}}],[\"initializing\",{\"1\":{\"768\":1}}],[\"initial\",{\"1\":{\"449\":1,\"1029\":1,\"1047\":1}}],[\"init命令初始化模块\",{\"1\":{\"445\":1}}],[\"initdatabase\",{\"1\":{\"395\":2}}],[\"init\",{\"1\":{\"18\":1,\"55\":3,\"211\":1,\"233\":1,\"324\":1,\"435\":1,\"445\":1,\"446\":1,\"449\":3,\"456\":1,\"464\":1,\"893\":1,\"986\":1,\"1164\":15,\"1225\":1,\"1235\":1,\"1243\":1}}],[\"inner\",{\"1\":{\"729\":1}}],[\"innodb索引\",{\"1\":{\"808\":1}}],[\"innodb和myisam存储引擎表\",{\"1\":{\"795\":1}}],[\"innodb和myisam区别\",{\"1\":{\"595\":1,\"667\":1}}],[\"innodb表必须主键为id\",{\"1\":{\"795\":1}}],[\"innodb\",{\"1\":{\"611\":1,\"649\":1,\"683\":1,\"775\":2,\"780\":1,\"815\":1,\"892\":1}}],[\"innodb为什么建议用自增整数作为主键\",{\"1\":{\"610\":1,\"682\":1}}],[\"innodb默认隔离级别\",{\"1\":{\"603\":1,\"675\":1}}],[\"innodb有主键\",{\"1\":{\"595\":1,\"667\":1}}],[\"innodb如何实现可重复读\",{\"1\":{\"585\":1,\"657\":1}}],[\"ingress\",{\"1\":{\"655\":1,\"1197\":1,\"1235\":2}}],[\"input\",{\"1\":{\"477\":5,\"1047\":1}}],[\"indent\",{\"1\":{\"1310\":1,\"1319\":1}}],[\"indexrune\",{\"1\":{\"1404\":2}}],[\"indexany\",{\"1\":{\"1404\":2}}],[\"indexlogo\",{\"1\":{\"1144\":1}}],[\"index通过索引获取列表中的元素\",{\"1\":{\"971\":1}}],[\"index与all区别为index类型只遍历索引树\",{\"1\":{\"814\":1}}],[\"indexexists\",{\"1\":{\"745\":1}}],[\"index为可迭代数据结构的索引\",{\"1\":{\"234\":1}}],[\"index\",{\"1\":{\"17\":1,\"124\":1,\"234\":3,\"248\":2,\"285\":4,\"324\":1,\"326\":1,\"367\":2,\"370\":3,\"375\":1,\"513\":1,\"651\":1,\"702\":1,\"704\":1,\"705\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"717\":2,\"718\":2,\"719\":2,\"724\":1,\"726\":4,\"741\":13,\"746\":3,\"748\":2,\"751\":2,\"754\":2,\"756\":1,\"757\":1,\"758\":1,\"763\":1,\"766\":8,\"771\":1,\"799\":1,\"809\":1,\"810\":12,\"814\":3,\"815\":2,\"816\":1,\"817\":2,\"818\":1,\"825\":1,\"971\":1,\"1026\":2,\"1123\":3,\"1130\":4,\"1131\":4,\"1136\":2,\"1141\":3,\"1142\":2,\"1158\":3,\"1337\":3,\"1338\":2,\"1404\":2,\"1417\":2,\"1419\":2,\"1420\":3}}],[\"india\",{\"1\":{\"1380\":1,\"1381\":1}}],[\"indicesdelete\",{\"1\":{\"707\":2}}],[\"indicesvalidatequery\",{\"1\":{\"703\":1}}],[\"indicesclose\",{\"1\":{\"703\":1}}],[\"indicesclone\",{\"1\":{\"703\":1}}],[\"indicesclearcache\",{\"1\":{\"703\":1}}],[\"indicesanalyze\",{\"1\":{\"703\":1}}],[\"indicesaddblock\",{\"1\":{\"703\":1}}],[\"indices\",{\"1\":{\"703\":3,\"704\":1,\"705\":1,\"706\":1,\"707\":1}}],[\"indices结构体中\",{\"1\":{\"703\":1}}],[\"indirect注释的表示该依赖没有被当前项目直接引用\",{\"1\":{\"459\":1}}],[\"indirect\",{\"1\":{\"453\":23,\"459\":25}}],[\"inspect\",{\"1\":{\"822\":1,\"1189\":1,\"1197\":2}}],[\"insertedids\",{\"1\":{\"835\":1,\"881\":1}}],[\"insertedid\",{\"1\":{\"835\":1,\"881\":1}}],[\"insertone和db\",{\"1\":{\"835\":1}}],[\"insertone\",{\"1\":{\"835\":1,\"878\":1,\"881\":1}}],[\"insertmany\",{\"1\":{\"832\":1,\"835\":2,\"881\":1}}],[\"insert\",{\"1\":{\"633\":1,\"656\":1,\"796\":1,\"820\":3,\"857\":1,\"858\":3,\"892\":2,\"894\":5,\"897\":1}}],[\"insertions\",{\"1\":{\"449\":6}}],[\"instructions去关联elasticsearch\",{\"1\":{\"739\":1}}],[\"instances\",{\"1\":{\"1221\":1}}],[\"instance\",{\"1\":{\"453\":1}}],[\"install命令会将第三方依赖下载到本地并编译成二进制文件\",{\"1\":{\"454\":1}}],[\"install\",{\"1\":{\"84\":2,\"448\":3,\"450\":1,\"454\":1,\"476\":1,\"740\":1,\"774\":2,\"849\":1,\"852\":1,\"964\":1,\"1032\":1,\"1078\":3,\"1112\":1,\"1118\":1,\"1165\":1,\"1175\":1,\"1184\":5,\"1220\":1,\"1221\":1,\"1222\":1,\"1223\":2,\"1231\":2}}],[\"instead\",{\"1\":{\"413\":1,\"459\":1,\"717\":2}}],[\"inc\",{\"1\":{\"1164\":1}}],[\"incrbyfloat\",{\"1\":{\"970\":1}}],[\"incrby\",{\"1\":{\"970\":1}}],[\"increment=39\",{\"1\":{\"817\":1}}],[\"increment\",{\"1\":{\"653\":2,\"791\":1,\"794\":1,\"795\":1,\"817\":1,\"970\":4,\"972\":4,\"974\":2}}],[\"incr\",{\"1\":{\"638\":1,\"925\":1,\"970\":1,\"985\":2}}],[\"inconsistently\",{\"1\":{\"441\":1}}],[\"include<complex\",{\"1\":{\"302\":1}}],[\"include\",{\"1\":{\"150\":1,\"297\":1,\"298\":4,\"299\":2,\"300\":11,\"301\":1,\"302\":1,\"303\":10,\"304\":1,\"305\":1,\"306\":4,\"307\":2,\"308\":2,\"309\":2,\"310\":4,\"312\":3,\"313\":1,\"314\":1,\"705\":1,\"965\":1,\"1123\":1,\"1130\":1,\"1131\":3,\"1158\":1,\"1164\":3}}],[\"inuse\",{\"1\":{\"326\":1,\"327\":2}}],[\"invalid\",{\"1\":{\"209\":1,\"276\":1,\"351\":3,\"381\":1,\"383\":1,\"390\":1,\"419\":1,\"477\":3,\"1163\":1,\"1391\":1,\"1443\":1}}],[\"in\",{\"1\":{\"84\":2,\"176\":5,\"258\":1,\"259\":1,\"287\":1,\"289\":1,\"303\":2,\"326\":4,\"345\":1,\"364\":1,\"365\":1,\"370\":1,\"381\":1,\"394\":1,\"453\":4,\"454\":2,\"459\":1,\"460\":1,\"470\":1,\"600\":1,\"672\":1,\"768\":2,\"814\":1,\"820\":2,\"821\":1,\"825\":1,\"861\":1,\"993\":1,\"1078\":1,\"1133\":1,\"1163\":1,\"1164\":2,\"1299\":1,\"1307\":2,\"1313\":2}}],[\"intvar\",{\"1\":{\"1325\":1,\"1328\":1}}],[\"intval\",{\"1\":{\"386\":2}}],[\"int和<>操作无法使用索引\",{\"1\":{\"806\":1}}],[\"int|float\",{\"1\":{\"516\":1}}],[\"intall安装命令行程序\",{\"1\":{\"450\":1}}],[\"into\",{\"1\":{\"441\":2,\"445\":1,\"796\":2,\"820\":1,\"892\":2,\"894\":1,\"1192\":1}}],[\"intch\",{\"1\":{\"414\":3,\"415\":5,\"418\":20}}],[\"int类型\",{\"1\":{\"384\":1}}],[\"intsize\",{\"1\":{\"1343\":3}}],[\"ints\",{\"1\":{\"339\":1,\"415\":1,\"418\":4,\"1376\":3,\"1384\":2,\"1440\":2}}],[\"intslice就是接收者的类型\",{\"1\":{\"285\":1}}],[\"intslice\",{\"1\":{\"285\":12}}],[\"int就是类型实参\",{\"1\":{\"337\":1}}],[\"int指针\",{\"1\":{\"277\":1}}],[\"int即代表该变量的类型是一个int类型的指针\",{\"1\":{\"275\":1}}],[\"intn\",{\"1\":{\"265\":1,\"412\":1,\"429\":2,\"430\":2,\"431\":4,\"432\":4,\"713\":2,\"1047\":1}}],[\"intnum\",{\"1\":{\"205\":1}}],[\"int是不可比较的\",{\"1\":{\"259\":1}}],[\"int是可比较的\",{\"1\":{\"259\":1}}],[\"int这种方式声明的切片\",{\"1\":{\"243\":1}}],[\"int=1\",{\"1\":{\"221\":2}}],[\"int64占8个字节\",{\"1\":{\"273\":1}}],[\"int64\",{\"1\":{\"197\":1,\"209\":4,\"273\":3,\"304\":4,\"314\":3,\"338\":2,\"339\":2,\"340\":7,\"341\":2,\"351\":3,\"375\":1,\"383\":3,\"401\":1,\"402\":1,\"403\":2,\"435\":1,\"438\":1,\"439\":1,\"440\":4,\"478\":1,\"513\":1,\"635\":1,\"882\":2,\"883\":2,\"884\":1,\"1324\":1,\"1429\":2,\"1443\":1}}],[\"int32能够表示31位整数\",{\"1\":{\"385\":1}}],[\"int32占4个字节\",{\"1\":{\"273\":1}}],[\"int32\",{\"1\":{\"197\":1,\"200\":1,\"221\":1,\"273\":2,\"298\":5,\"300\":15,\"304\":5,\"306\":7,\"307\":3,\"308\":3,\"310\":5,\"312\":7,\"313\":2,\"314\":7,\"337\":1,\"338\":2,\"339\":2,\"340\":7,\"341\":2,\"351\":3,\"385\":2,\"438\":1,\"478\":1,\"513\":2,\"635\":1,\"1036\":1,\"1047\":1,\"1321\":1,\"1429\":1,\"1442\":1,\"1443\":2}}],[\"int16占2字节\",{\"1\":{\"273\":1}}],[\"int16\",{\"1\":{\"197\":1,\"273\":1,\"304\":4,\"340\":7,\"341\":2,\"351\":3,\"478\":1,\"554\":2}}],[\"int8只能表示7位整数\",{\"1\":{\"385\":1}}],[\"int8占一个字节\",{\"1\":{\"273\":1}}],[\"int8\",{\"1\":{\"197\":1,\"273\":5,\"304\":4,\"340\":8,\"341\":4,\"351\":3,\"385\":2,\"478\":1,\"513\":1}}],[\"intel®\",{\"1\":{\"1039\":1}}],[\"intel\",{\"1\":{\"475\":1,\"476\":3,\"498\":1}}],[\"integer类型\",{\"1\":{\"720\":1}}],[\"integertype代表的是任意整数类型\",{\"1\":{\"1439\":1}}],[\"integertype\",{\"0\":{\"1439\":1},\"1\":{\"277\":1,\"1439\":1,\"1444\":1,\"1446\":1,\"1448\":1}}],[\"integer\",{\"1\":{\"182\":1,\"340\":6,\"341\":5,\"720\":2,\"724\":2,\"745\":3,\"981\":1,\"1165\":2}}],[\"interests\",{\"1\":{\"1281\":4}}],[\"interesting\",{\"1\":{\"477\":12}}],[\"interval\",{\"1\":{\"476\":3,\"653\":1,\"1029\":1}}],[\"interactive\",{\"1\":{\"326\":1}}],[\"interfaces\",{\"1\":{\"1413\":1}}],[\"interfaces即通用接口\",{\"1\":{\"340\":1}}],[\"interface下的三个方法len\",{\"1\":{\"1375\":1}}],[\"interface=enp0s3\",{\"1\":{\"1228\":1}}],[\"interface可以进行等值比较吗\",{\"1\":{\"563\":1,\"635\":2}}],[\"interface\",{\"1\":{\"178\":1,\"201\":1,\"279\":1,\"287\":1,\"289\":11,\"291\":1,\"293\":3,\"294\":8,\"338\":1,\"340\":15,\"341\":10,\"347\":2,\"348\":1,\"351\":4,\"352\":1,\"353\":1,\"354\":1,\"355\":2,\"356\":2,\"359\":1,\"360\":1,\"361\":2,\"362\":2,\"365\":1,\"367\":2,\"368\":2,\"371\":1,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"386\":1,\"387\":1,\"389\":1,\"393\":1,\"424\":1,\"427\":1,\"430\":1,\"471\":1,\"515\":1,\"516\":4,\"524\":1,\"546\":1,\"554\":1,\"558\":1,\"584\":1,\"635\":3,\"637\":1,\"649\":2,\"651\":2,\"656\":3,\"748\":1,\"831\":3,\"880\":2,\"881\":1,\"927\":1,\"1223\":1,\"1302\":2,\"1313\":2,\"1375\":2}}],[\"interface接口的实现\",{\"1\":{\"132\":1}}],[\"interface接口的任何类型的堆操作\",{\"1\":{\"124\":1}}],[\"internal\",{\"1\":{\"176\":1,\"317\":1,\"1197\":1}}],[\"internet消息格式和邮件消息的流库\",{\"1\":{\"129\":1}}],[\"introduction\",{\"1\":{\"827\":1}}],[\"intro\",{\"1\":{\"65\":1,\"1231\":1}}],[\"int\",{\"1\":{\"5\":11,\"36\":3,\"192\":1,\"197\":1,\"201\":4,\"205\":4,\"206\":2,\"208\":2,\"221\":1,\"224\":5,\"225\":1,\"230\":1,\"239\":12,\"241\":6,\"243\":4,\"244\":1,\"245\":3,\"246\":1,\"247\":2,\"248\":2,\"249\":4,\"250\":3,\"251\":2,\"257\":4,\"259\":5,\"260\":3,\"261\":2,\"262\":1,\"263\":1,\"264\":2,\"265\":1,\"266\":2,\"267\":2,\"268\":2,\"269\":2,\"270\":2,\"272\":1,\"275\":6,\"276\":5,\"277\":5,\"278\":11,\"279\":2,\"280\":8,\"281\":6,\"282\":6,\"283\":2,\"285\":15,\"286\":2,\"287\":13,\"291\":1,\"293\":5,\"294\":3,\"298\":4,\"299\":8,\"301\":1,\"302\":1,\"303\":4,\"304\":10,\"306\":1,\"312\":1,\"314\":1,\"319\":5,\"320\":5,\"322\":4,\"326\":1,\"327\":4,\"337\":7,\"338\":18,\"339\":13,\"340\":12,\"341\":10,\"343\":1,\"344\":7,\"351\":4,\"352\":2,\"354\":1,\"358\":1,\"359\":1,\"360\":1,\"361\":2,\"364\":4,\"366\":2,\"367\":5,\"370\":1,\"374\":2,\"375\":2,\"376\":2,\"377\":2,\"378\":2,\"379\":2,\"381\":3,\"382\":17,\"383\":2,\"384\":9,\"385\":6,\"386\":2,\"387\":3,\"390\":2,\"394\":1,\"395\":1,\"400\":9,\"401\":2,\"402\":4,\"408\":1,\"412\":4,\"413\":1,\"414\":2,\"415\":1,\"416\":2,\"417\":3,\"418\":9,\"419\":3,\"420\":3,\"421\":16,\"422\":1,\"425\":1,\"429\":1,\"430\":1,\"431\":2,\"432\":2,\"434\":11,\"435\":1,\"436\":4,\"440\":2,\"463\":1,\"474\":1,\"478\":1,\"491\":2,\"492\":2,\"494\":7,\"511\":7,\"512\":2,\"513\":4,\"514\":2,\"515\":3,\"516\":6,\"524\":1,\"529\":1,\"545\":1,\"548\":4,\"554\":2,\"556\":2,\"557\":1,\"620\":2,\"630\":2,\"633\":1,\"635\":3,\"637\":1,\"649\":6,\"651\":3,\"653\":16,\"654\":9,\"692\":2,\"746\":3,\"786\":3,\"791\":3,\"795\":1,\"817\":1,\"820\":5,\"833\":1,\"834\":2,\"893\":1,\"911\":4,\"1164\":6,\"1165\":5,\"1281\":1,\"1283\":1,\"1289\":1,\"1301\":1,\"1303\":2,\"1307\":4,\"1310\":1,\"1313\":1,\"1316\":1,\"1318\":1,\"1324\":1,\"1325\":2,\"1327\":2,\"1328\":2,\"1341\":3,\"1375\":3,\"1376\":1,\"1380\":4,\"1384\":1,\"1385\":1,\"1389\":1,\"1390\":1,\"1391\":1,\"1392\":1,\"1397\":1,\"1399\":1,\"1404\":5,\"1406\":1,\"1407\":1,\"1408\":2,\"1417\":1,\"1438\":1,\"1439\":1,\"1440\":5,\"1441\":1,\"1443\":3,\"1444\":3,\"1445\":5,\"1446\":1}}],[\"i+n\",{\"1\":{\"246\":1}}],[\"i+1\",{\"1\":{\"5\":1,\"233\":1,\"245\":2,\"477\":3,\"537\":1,\"653\":1,\"1445\":2,\"1447\":1}}],[\"i++\",{\"1\":{\"5\":1,\"192\":2,\"233\":2,\"235\":2,\"236\":2,\"248\":1,\"249\":1,\"258\":3,\"265\":1,\"266\":3,\"282\":2,\"306\":2,\"314\":1,\"322\":1,\"326\":1,\"327\":2,\"367\":1,\"370\":4,\"375\":1,\"402\":2,\"412\":4,\"417\":2,\"420\":4,\"421\":2,\"422\":1,\"429\":1,\"430\":1,\"431\":2,\"432\":2,\"434\":1,\"435\":1,\"436\":4,\"475\":4,\"498\":1,\"499\":1,\"500\":1,\"557\":1,\"630\":2,\"653\":2,\"654\":2,\"858\":1,\"863\":3,\"1164\":1,\"1165\":1,\"1434\":1}}],[\"i\",{\"1\":{\"5\":4,\"183\":1,\"192\":5,\"224\":2,\"233\":12,\"234\":6,\"235\":8,\"236\":8,\"246\":1,\"248\":3,\"249\":3,\"258\":17,\"265\":2,\"266\":6,\"282\":6,\"284\":2,\"285\":7,\"286\":2,\"287\":8,\"293\":2,\"306\":8,\"312\":1,\"313\":1,\"314\":2,\"322\":2,\"326\":2,\"327\":4,\"344\":14,\"348\":2,\"362\":1,\"367\":4,\"370\":12,\"375\":4,\"390\":4,\"402\":4,\"412\":14,\"417\":6,\"420\":11,\"421\":6,\"422\":3,\"429\":2,\"430\":2,\"431\":10,\"432\":11,\"434\":10,\"435\":2,\"436\":10,\"475\":8,\"477\":15,\"498\":2,\"499\":2,\"500\":2,\"516\":2,\"537\":5,\"557\":8,\"630\":3,\"645\":12,\"649\":10,\"651\":1,\"653\":6,\"654\":7,\"713\":1,\"820\":2,\"858\":1,\"863\":13,\"934\":1,\"959\":1,\"1081\":1,\"1163\":1,\"1164\":4,\"1165\":2,\"1188\":1,\"1222\":1,\"1225\":1,\"1228\":1,\"1374\":2,\"1375\":2,\"1380\":5,\"1385\":2,\"1417\":2,\"1434\":2,\"1445\":6,\"1447\":3}}],[\"ifcfg\",{\"1\":{\"1219\":1}}],[\"if6\",{\"1\":{\"1195\":2}}],[\"if4\",{\"1\":{\"1195\":2}}],[\"if7\",{\"1\":{\"1195\":2}}],[\"if5\",{\"1\":{\"1194\":1,\"1195\":1}}],[\"if组织不负责制造type\",{\"1\":{\"516\":1}}],[\"iface对应的是nonemptyinterface\",{\"1\":{\"347\":1}}],[\"iface\",{\"1\":{\"347\":1}}],[\"if\",{\"0\":{\"228\":1,\"229\":1},\"1\":{\"4\":1,\"5\":2,\"178\":1,\"226\":1,\"228\":6,\"229\":16,\"232\":1,\"233\":1,\"235\":2,\"236\":2,\"260\":1,\"261\":1,\"269\":1,\"280\":1,\"281\":2,\"282\":2,\"298\":2,\"303\":2,\"323\":3,\"337\":1,\"343\":3,\"344\":7,\"362\":1,\"364\":1,\"367\":1,\"368\":2,\"369\":1,\"371\":1,\"386\":1,\"388\":4,\"390\":1,\"393\":4,\"395\":1,\"397\":3,\"398\":1,\"400\":5,\"401\":8,\"402\":5,\"403\":8,\"404\":1,\"405\":2,\"406\":3,\"408\":3,\"409\":1,\"410\":10,\"426\":1,\"427\":1,\"434\":6,\"435\":1,\"437\":1,\"440\":1,\"446\":3,\"463\":5,\"471\":8,\"472\":2,\"473\":2,\"474\":2,\"477\":7,\"491\":3,\"494\":4,\"514\":2,\"516\":1,\"545\":2,\"633\":2,\"635\":1,\"651\":1,\"653\":1,\"654\":1,\"702\":2,\"704\":2,\"705\":2,\"706\":2,\"707\":2,\"709\":2,\"710\":2,\"711\":2,\"712\":2,\"713\":6,\"744\":1,\"745\":3,\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"754\":2,\"756\":4,\"766\":13,\"771\":1,\"830\":1,\"833\":1,\"834\":4,\"835\":2,\"836\":4,\"837\":2,\"838\":2,\"881\":2,\"882\":2,\"883\":2,\"884\":3,\"892\":1,\"893\":3,\"894\":2,\"895\":2,\"896\":2,\"897\":1,\"910\":2,\"1035\":2,\"1036\":3,\"1037\":2,\"1047\":8,\"1092\":4,\"1151\":1,\"1164\":13,\"1165\":1,\"1245\":3,\"1281\":3,\"1282\":1,\"1283\":2,\"1289\":2,\"1303\":1,\"1304\":2,\"1306\":2,\"1311\":1,\"1312\":1,\"1314\":1,\"1315\":2,\"1317\":1,\"1319\":1,\"1320\":1,\"1321\":2,\"1330\":1,\"1331\":1,\"1367\":1,\"1368\":1,\"1369\":2,\"1370\":2,\"1371\":2,\"1372\":1,\"1373\":2,\"1374\":6,\"1405\":1,\"1411\":2,\"1413\":1,\"1415\":2,\"1417\":5,\"1419\":1,\"1421\":1,\"1423\":4,\"1424\":3,\"1425\":2,\"1426\":6,\"1428\":2,\"1432\":2}}],[\"pm\",{\"1\":{\"1431\":1}}],[\"pmezard\",{\"1\":{\"122\":1}}],[\"phi\",{\"1\":{\"1345\":1}}],[\"php的uuid\",{\"1\":{\"625\":1,\"697\":1}}],[\"php的麻烦一点\",{\"1\":{\"595\":1,\"667\":1}}],[\"php用什么框架\",{\"1\":{\"595\":1,\"667\":1}}],[\"php和go哪个好用\",{\"1\":{\"595\":1,\"667\":1}}],[\"php\",{\"1\":{\"130\":1,\"1133\":1,\"1238\":1}}],[\"p表示一个可以使用==操作符进行比较的普通策略\",{\"1\":{\"1262\":1}}],[\"pfifo\",{\"1\":{\"1194\":1}}],[\"pfail\",{\"1\":{\"1010\":1}}],[\"pg\",{\"1\":{\"1076\":3,\"1077\":2,\"1078\":6}}],[\"pglock\",{\"1\":{\"128\":1}}],[\"pc\",{\"1\":{\"1036\":4,\"1047\":4,\"1164\":12}}],[\"p3\",{\"1\":{\"1027\":1}}],[\"p0\",{\"1\":{\"1027\":1}}],[\"pwd\",{\"1\":{\"870\":1,\"873\":1}}],[\"p$port\",{\"1\":{\"776\":1}}],[\"p会将其交给m执行\",{\"1\":{\"654\":1}}],[\"p是go调度器的抽象\",{\"1\":{\"654\":1}}],[\"p是一个指针\",{\"1\":{\"275\":1}}],[\"p指向一个类型为int的零值\",{\"1\":{\"654\":1}}],[\"pdd面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"pdd服务端开发面经详解\",{\"1\":{\"626\":1,\"698\":1}}],[\"pdd服务端开发\",{\"0\":{\"611\":1,\"683\":1}}],[\"pdd\",{\"0\":{\"610\":1,\"682\":1}}],[\"pdfcpu\",{\"1\":{\"132\":1}}],[\"pdf\",{\"0\":{\"73\":1},\"1\":{\"28\":2,\"132\":2}}],[\"p如何\",{\"1\":{\"579\":1,\"651\":1}}],[\"p的数量可以通过runtime\",{\"1\":{\"654\":1}}],[\"p的数量由gomaxprocs控制\",{\"1\":{\"542\":1}}],[\"p的数量与m的数量\",{\"1\":{\"542\":1}}],[\"p为\",{\"1\":{\"476\":1}}],[\"p=\",{\"1\":{\"1252\":2}}],[\"p=1\",{\"1\":{\"476\":6}}],[\"p=0\",{\"1\":{\"476\":13}}],[\"pypi\",{\"1\":{\"451\":1}}],[\"python等\",{\"1\":{\"1018\":1}}],[\"python客户端\",{\"1\":{\"984\":1}}],[\"python的pip\",{\"1\":{\"442\":1}}],[\"python\",{\"0\":{\"169\":1},\"1\":{\"130\":1,\"169\":4,\"522\":1,\"645\":1,\"1017\":1,\"1056\":1,\"1238\":1}}],[\"pb\",{\"1\":{\"323\":1,\"326\":1,\"327\":1}}],[\"pbf\",{\"1\":{\"135\":2}}],[\"p123456\",{\"1\":{\"822\":1}}],[\"p1\",{\"1\":{\"281\":3,\"635\":2,\"1082\":3}}],[\"p10\",{\"1\":{\"182\":1}}],[\"p++\",{\"1\":{\"276\":2,\"1164\":1}}],[\"p2\",{\"1\":{\"269\":1,\"281\":3,\"635\":2}}],[\"plugin=cni\",{\"1\":{\"1223\":1}}],[\"plugin\",{\"1\":{\"740\":1}}],[\"plugins\",{\"1\":{\"740\":2,\"742\":1}}],[\"please\",{\"1\":{\"453\":1,\"717\":2,\"1010\":2}}],[\"plane\",{\"1\":{\"1225\":3,\"1226\":1,\"1228\":1}}],[\"plan\",{\"1\":{\"1010\":2}}],[\"playground\",{\"1\":{\"453\":6,\"459\":3,\"502\":1,\"1289\":1}}],[\"player\",{\"1\":{\"309\":2}}],[\"platform\",{\"1\":{\"330\":1}}],[\"pl\",{\"1\":{\"269\":1,\"813\":4}}],[\"pttl\",{\"1\":{\"918\":1,\"967\":2}}],[\"ptr\",{\"1\":{\"303\":4,\"306\":2,\"308\":4,\"310\":4,\"348\":1,\"351\":1,\"1444\":3,\"1446\":1,\"1447\":4,\"1448\":1}}],[\"ptrie\",{\"1\":{\"127\":1}}],[\"pt\",{\"1\":{\"139\":1,\"813\":1,\"1164\":1}}],[\"pk\",{\"1\":{\"795\":1}}],[\"pkg为测试所在的包\",{\"1\":{\"475\":1}}],[\"pkgpath\",{\"1\":{\"348\":1,\"352\":1,\"367\":1,\"370\":1}}],[\"pkg\",{\"1\":{\"131\":1,\"393\":2,\"453\":1,\"457\":1,\"475\":1,\"476\":3,\"498\":1,\"525\":1,\"744\":1}}],[\"pkix\",{\"1\":{\"124\":1}}],[\"pid=\",{\"1\":{\"1174\":1}}],[\"pid\",{\"1\":{\"965\":1,\"1047\":2,\"1116\":6,\"1130\":3,\"1131\":2,\"1132\":2,\"1158\":2,\"1171\":1,\"1173\":2,\"1174\":1}}],[\"pidfile\",{\"1\":{\"965\":1}}],[\"pid文件如何处理\",{\"0\":{\"1171\":1}}],[\"pid文件\",{\"1\":{\"965\":1}}],[\"pipline\",{\"1\":{\"838\":2}}],[\"pipeline可以根据自己的需求来指定关联模板的根对象\",{\"1\":{\"1426\":1}}],[\"pipeline类型\",{\"1\":{\"838\":1}}],[\"pipeline\",{\"1\":{\"127\":1,\"838\":2,\"1422\":2,\"1423\":2,\"1424\":5,\"1426\":1}}],[\"pike\",{\"1\":{\"388\":1}}],[\"ping测试连接是否可用\",{\"1\":{\"830\":1}}],[\"ping\",{\"1\":{\"702\":3,\"769\":2,\"770\":2,\"830\":1,\"968\":2,\"993\":1,\"1000\":1,\"1087\":1,\"1194\":2,\"1195\":6,\"1196\":7,\"1197\":9,\"1198\":3,\"1225\":1}}],[\"pingresp\",{\"1\":{\"702\":2}}],[\"ping命令位于哪层\",{\"1\":{\"603\":1,\"675\":1}}],[\"pingcap\",{\"1\":{\"123\":1}}],[\"pinner来固定内存\",{\"1\":{\"310\":1}}],[\"pinyin\",{\"1\":{\"144\":1}}],[\"picfit\",{\"1\":{\"139\":1}}],[\"pi\",{\"1\":{\"138\":1,\"1345\":1}}],[\"pixel\",{\"1\":{\"134\":1}}],[\"pitaya\",{\"1\":{\"134\":1,\"333\":1}}],[\"ppend函数添加元素\",{\"1\":{\"511\":1}}],[\"ppfree\",{\"1\":{\"435\":2}}],[\"pp\",{\"1\":{\"435\":3,\"1443\":3}}],[\"pprof来分析文件\",{\"1\":{\"630\":2}}],[\"pprof主要负责分析程序的资源占用\",{\"1\":{\"328\":1}}],[\"pprof支持相当多的格式\",{\"1\":{\"326\":1}}],[\"pprof开源地址\",{\"1\":{\"325\":1}}],[\"pprof包将上面的分析函数包装成了http接口\",{\"1\":{\"324\":1}}],[\"pprof包\",{\"1\":{\"323\":1}}],[\"pprof\",{\"0\":{\"321\":1},\"1\":{\"124\":2,\"314\":1,\"321\":1,\"323\":7,\"324\":10,\"325\":2,\"326\":7,\"327\":7,\"328\":1,\"562\":1,\"634\":5}}],[\"pptx\",{\"1\":{\"143\":1}}],[\"ppt\",{\"1\":{\"122\":1}}],[\"png时\",{\"1\":{\"1139\":2}}],[\"png\",{\"1\":{\"124\":1,\"326\":3,\"1139\":2,\"1144\":1,\"1280\":2}}],[\"pow\",{\"1\":{\"1358\":2,\"1361\":2}}],[\"powerdns\",{\"1\":{\"145\":2}}],[\"pong\",{\"1\":{\"1087\":1}}],[\"policy\",{\"0\":{\"1252\":1},\"1\":{\"1065\":1,\"1239\":1,\"1244\":3,\"1245\":1,\"1256\":4,\"1260\":2,\"1264\":2}}],[\"pod网络是kubernetes集群中各个pod之间进行通信的网络\",{\"1\":{\"1228\":1}}],[\"pod的网络节点不能和master网络ip重叠\",{\"1\":{\"1225\":1}}],[\"pod的怎么访问通信\",{\"1\":{\"1212\":1}}],[\"pod\",{\"1\":{\"655\":1,\"1215\":4,\"1223\":1,\"1225\":1}}],[\"points=kong\",{\"1\":{\"1076\":1,\"1077\":1}}],[\"point\",{\"0\":{\"730\":1},\"1\":{\"385\":4,\"730\":1,\"745\":1}}],[\"pointer与类型指针本身是不支持指针运算\",{\"1\":{\"1443\":1}}],[\"pointer是一个引用\",{\"1\":{\"1443\":1}}],[\"pointer是一种可以指向任意类型的\",{\"1\":{\"1443\":1}}],[\"pointer转换为uintptr时\",{\"1\":{\"1443\":1}}],[\"pointer转换为uintptr\",{\"1\":{\"1443\":1}}],[\"pointer再转换为\",{\"1\":{\"1443\":1}}],[\"pointer无法解引用\",{\"1\":{\"1443\":1}}],[\"pointer可以转换为uintptr\",{\"1\":{\"1443\":1}}],[\"pointer可以转换为任何类型的指针\",{\"1\":{\"1443\":1}}],[\"pointer可以进行访问和修改\",{\"1\":{\"308\":1}}],[\"pointer类型可以进行四个特殊操作\",{\"1\":{\"1443\":1}}],[\"pointer了解细节\",{\"1\":{\"300\":1}}],[\"pointer\",{\"0\":{\"1443\":1},\"1\":{\"287\":1,\"303\":7,\"306\":1,\"308\":1,\"310\":3,\"347\":5,\"348\":1,\"351\":3,\"360\":16,\"438\":1,\"515\":1,\"524\":1,\"1411\":1,\"1443\":20,\"1444\":4,\"1445\":2,\"1447\":1}}],[\"pop3\",{\"1\":{\"1107\":2}}],[\"pop\",{\"1\":{\"343\":2,\"344\":2,\"516\":1,\"835\":1}}],[\"pos=2079\",{\"1\":{\"825\":1}}],[\"pos=519260687\",{\"1\":{\"825\":1}}],[\"pos=519086591\",{\"1\":{\"825\":1}}],[\"pos=1448\",{\"1\":{\"822\":1}}],[\"pos不对\",{\"1\":{\"823\":1}}],[\"position的值\",{\"1\":{\"825\":1}}],[\"position\",{\"1\":{\"706\":7,\"823\":1}}],[\"positive\",{\"1\":{\"298\":2}}],[\"possible\",{\"1\":{\"645\":1,\"651\":1,\"814\":2,\"993\":1}}],[\"pos\",{\"1\":{\"187\":1,\"822\":1}}],[\"post示例\",{\"0\":{\"1331\":1}}],[\"postformmap\",{\"1\":{\"1281\":1}}],[\"postform\",{\"1\":{\"1281\":1}}],[\"postconfiguration\",{\"1\":{\"1164\":1}}],[\"postgres\",{\"1\":{\"1072\":1,\"1075\":4,\"1078\":4}}],[\"postgres和cassandra\",{\"1\":{\"1072\":1}}],[\"postgresql\",{\"1\":{\"890\":1,\"905\":1}}],[\"postgresql支持的分布式锁定实现\",{\"1\":{\"128\":1}}],[\"posttags\",{\"1\":{\"766\":1}}],[\"post\",{\"1\":{\"233\":1,\"611\":1,\"638\":3,\"683\":1,\"741\":7,\"1078\":1,\"1081\":1,\"1133\":1,\"1277\":1,\"1278\":1,\"1281\":7,\"1286\":2,\"1331\":1}}],[\"postscript以及pdf文档格式\",{\"1\":{\"124\":1}}],[\"pooltimeout\",{\"1\":{\"911\":1}}],[\"poolsize\",{\"1\":{\"911\":1}}],[\"pool是一个可以存储和复用的临时对象的容器\",{\"1\":{\"629\":1}}],[\"pool一定是并发安全\",{\"1\":{\"435\":1}}],[\"pool在申请对象时\",{\"1\":{\"435\":1}}],[\"pool中\",{\"1\":{\"435\":1}}],[\"pool只适合存放临时对象\",{\"1\":{\"435\":1}}],[\"pool时需要注意几个点\",{\"1\":{\"435\":1}}],[\"pool有一个对外暴露的new字段\",{\"1\":{\"435\":1}}],[\"pool总共只有两个方法\",{\"1\":{\"435\":1}}],[\"pool的设计目的是用于存储临时对象以便后续的复用\",{\"1\":{\"435\":1}}],[\"pool和一些有用的executors\",{\"1\":{\"137\":1}}],[\"pool\",{\"0\":{\"435\":1},\"1\":{\"137\":2,\"435\":7}}],[\"port4\",{\"1\":{\"1166\":3}}],[\"port3\",{\"1\":{\"1166\":3}}],[\"port2\",{\"1\":{\"1166\":3}}],[\"port1\",{\"1\":{\"1166\":3}}],[\"port就不用输入了\",{\"1\":{\"1084\":1}}],[\"port>\",{\"1\":{\"993\":2,\"1000\":1,\"1234\":2}}],[\"port=8000\",{\"1\":{\"1078\":1}}],[\"port=8001\",{\"1\":{\"1078\":1}}],[\"port=27017\",{\"1\":{\"852\":1}}],[\"port=3306\",{\"1\":{\"822\":2}}],[\"port\",{\"1\":{\"395\":2,\"453\":2,\"768\":2,\"769\":2,\"770\":2,\"867\":1,\"911\":1,\"964\":1,\"965\":1,\"993\":4,\"994\":1,\"1000\":1,\"1002\":3,\"1003\":1,\"1004\":3,\"1010\":1,\"1029\":2,\"1078\":2,\"1133\":2,\"1139\":2,\"1142\":1,\"1166\":5,\"1235\":1,\"1313\":3,\"1314\":2}}],[\"portproxy\",{\"1\":{\"145\":1}}],[\"porter2\",{\"1\":{\"144\":1}}],[\"porter的porter干算法的c实现的相当简单的移植\",{\"1\":{\"144\":1}}],[\"porter\",{\"1\":{\"144\":1}}],[\"portmidi\",{\"1\":{\"126\":1}}],[\"portaudio\",{\"1\":{\"126\":1}}],[\"portable\",{\"1\":{\"124\":1}}],[\"portfolio\",{\"1\":{\"2\":1}}],[\"pexpireat\",{\"1\":{\"967\":1}}],[\"pexpire\",{\"1\":{\"967\":1}}],[\"pending\",{\"1\":{\"653\":1,\"768\":1,\"1078\":1}}],[\"pelletier\",{\"1\":{\"453\":2,\"459\":1}}],[\"peers\",{\"1\":{\"1164\":16}}],[\"peer\",{\"1\":{\"1164\":56}}],[\"peerdiscovery\",{\"1\":{\"145\":1}}],[\"peek\",{\"1\":{\"327\":1,\"343\":4,\"344\":3}}],[\"people\",{\"1\":{\"281\":2}}],[\"period\",{\"1\":{\"1163\":1}}],[\"perip\",{\"1\":{\"1152\":1,\"1158\":2}}],[\"periph\",{\"1\":{\"140\":1}}],[\"perons\",{\"1\":{\"893\":3}}],[\"percentiles\",{\"1\":{\"1003\":1}}],[\"percentage\",{\"1\":{\"985\":1}}],[\"percent\",{\"1\":{\"768\":1}}],[\"per\",{\"1\":{\"639\":1,\"1029\":1}}],[\"perserver\",{\"1\":{\"1152\":1,\"1158\":1}}],[\"persist\",{\"1\":{\"917\":1,\"967\":3}}],[\"persistent\",{\"1\":{\"774\":1,\"1220\":1}}],[\"persion\",{\"1\":{\"513\":1}}],[\"persons\",{\"1\":{\"1380\":3,\"1381\":3}}],[\"personslice\",{\"1\":{\"1380\":5,\"1381\":2}}],[\"person>\",{\"1\":{\"1311\":1,\"1312\":1}}],[\"person实现了该接口\",{\"1\":{\"338\":1}}],[\"personoptions\",{\"1\":{\"269\":6,\"513\":4}}],[\"person类型的参数\",{\"1\":{\"269\":1}}],[\"person\",{\"1\":{\"221\":6,\"267\":1,\"268\":3,\"269\":8,\"270\":9,\"271\":1,\"278\":5,\"281\":4,\"291\":1,\"292\":3,\"293\":2,\"307\":5,\"317\":7,\"338\":3,\"344\":7,\"366\":2,\"367\":2,\"368\":2,\"369\":1,\"370\":6,\"371\":1,\"374\":5,\"379\":3,\"513\":11,\"516\":3,\"554\":2,\"584\":6,\"635\":7,\"656\":13,\"893\":6,\"1289\":5,\"1310\":1,\"1311\":3,\"1312\":3,\"1316\":1,\"1317\":3,\"1318\":1,\"1319\":3,\"1320\":4,\"1321\":7,\"1331\":3,\"1380\":3,\"1381\":1,\"1417\":1,\"1426\":1,\"1427\":3,\"1428\":9,\"1440\":2,\"1441\":2,\"1442\":2,\"1443\":2}}],[\"performer\",{\"1\":{\"728\":3,\"729\":6}}],[\"perf\",{\"1\":{\"476\":1}}],[\"perm模型由四个基础部分组成\",{\"1\":{\"1249\":1}}],[\"permanent\",{\"1\":{\"1078\":2}}],[\"perm\",{\"1\":{\"400\":1,\"402\":1,\"409\":2}}],[\"permission\",{\"1\":{\"390\":1}}],[\"petrovich\",{\"1\":{\"144\":2}}],[\"pe\",{\"1\":{\"124\":1}}],[\"pem\",{\"1\":{\"84\":4,\"124\":1}}],[\"pseudo\",{\"1\":{\"1164\":2}}],[\"psetex\",{\"1\":{\"970\":1}}],[\"ps命令查看正在运行的容器\",{\"1\":{\"822\":1}}],[\"ps\",{\"1\":{\"122\":1,\"619\":1,\"691\":1,\"850\":1,\"1010\":1,\"1126\":2,\"1182\":1,\"1328\":4,\"1443\":3,\"1444\":3}}],[\"prune\",{\"1\":{\"1197\":1}}],[\"practice\",{\"1\":{\"470\":1}}],[\"pravite等关键字\",{\"1\":{\"174\":1}}],[\"pr\",{\"1\":{\"142\":1}}],[\"preferred\",{\"1\":{\"1194\":7,\"1195\":6}}],[\"preference\",{\"1\":{\"705\":1}}],[\"prefix`\",{\"1\":{\"1303\":1}}],[\"prefix=\",{\"1\":{\"1116\":1,\"1132\":1,\"1173\":1}}],[\"prefix\",{\"1\":{\"1116\":4,\"1303\":4,\"1310\":1,\"1319\":1,\"1340\":2,\"1341\":1,\"1403\":1}}],[\"pretags\",{\"1\":{\"766\":1}}],[\"pretty\",{\"1\":{\"335\":1,\"756\":1,\"766\":1,\"855\":1,\"857\":2,\"858\":1,\"859\":1}}],[\"pre\",{\"1\":{\"741\":1,\"1078\":1}}],[\"prec\",{\"1\":{\"1390\":2,\"1392\":2}}],[\"preconfiguration\",{\"1\":{\"1164\":1}}],[\"precompiled\",{\"1\":{\"454\":1}}],[\"precedence\",{\"1\":{\"179\":1}}],[\"preparing\",{\"1\":{\"328\":1}}],[\"premailer\",{\"1\":{\"129\":1}}],[\"predicates\",{\"1\":{\"124\":1}}],[\"present\",{\"1\":{\"122\":1}}],[\"primitivearrayencoder\",{\"1\":{\"1303\":2}}],[\"primitive\",{\"1\":{\"831\":4,\"881\":2,\"882\":1,\"883\":1,\"884\":1}}],[\"primary\",{\"1\":{\"651\":1,\"653\":2,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"768\":1,\"809\":2,\"810\":1,\"811\":1,\"814\":1,\"817\":1,\"830\":1,\"892\":1}}],[\"price\",{\"1\":{\"720\":1,\"1082\":1}}],[\"private\",{\"1\":{\"637\":1,\"1166\":1,\"1183\":1}}],[\"privacy\",{\"1\":{\"124\":1,\"1219\":1}}],[\"printjson\",{\"1\":{\"863\":8}}],[\"printvalue\",{\"1\":{\"516\":1}}],[\"prints\",{\"1\":{\"454\":1}}],[\"printsum\",{\"1\":{\"298\":2}}],[\"printmymap\",{\"1\":{\"384\":2}}],[\"printnum\",{\"1\":{\"310\":2,\"545\":1}}],[\"printint32arr\",{\"1\":{\"306\":2}}],[\"printing\",{\"1\":{\"124\":1}}],[\"printgofloat64\",{\"1\":{\"305\":2}}],[\"printgofloat32\",{\"1\":{\"305\":2}}],[\"printgouint64\",{\"1\":{\"304\":2}}],[\"printgouint32\",{\"1\":{\"304\":2}}],[\"printgouint16\",{\"1\":{\"304\":2}}],[\"printgouint8\",{\"1\":{\"304\":1}}],[\"printgoint64\",{\"1\":{\"304\":2}}],[\"printgoint32\",{\"1\":{\"304\":2}}],[\"printgoint16\",{\"1\":{\"304\":2}}],[\"printgoint8\",{\"1\":{\"304\":3}}],[\"printbyte\",{\"1\":{\"301\":4}}],[\"print\",{\"0\":{\"218\":1},\"1\":{\"218\":1,\"863\":2,\"1226\":1,\"1420\":2,\"1421\":1}}],[\"printer\",{\"1\":{\"124\":1}}],[\"println会反射获取参数的类型\",{\"1\":{\"360\":1}}],[\"println确实是最后执行的\",{\"1\":{\"285\":1}}],[\"println函数\",{\"1\":{\"219\":1}}],[\"println\",{\"1\":{\"121\":1,\"172\":2,\"175\":1,\"177\":1,\"187\":2,\"189\":2,\"192\":1,\"209\":2,\"210\":6,\"214\":1,\"218\":2,\"219\":1,\"224\":1,\"226\":1,\"228\":1,\"229\":2,\"230\":3,\"232\":2,\"233\":3,\"234\":4,\"235\":2,\"236\":2,\"240\":1,\"244\":1,\"245\":3,\"246\":4,\"247\":3,\"248\":2,\"249\":3,\"250\":4,\"251\":2,\"253\":4,\"254\":4,\"255\":4,\"256\":2,\"257\":3,\"258\":2,\"259\":1,\"260\":7,\"261\":4,\"262\":4,\"263\":2,\"264\":2,\"265\":1,\"266\":1,\"270\":2,\"271\":1,\"274\":1,\"275\":9,\"276\":3,\"282\":1,\"283\":9,\"284\":1,\"285\":14,\"286\":2,\"287\":6,\"292\":1,\"293\":9,\"294\":14,\"298\":3,\"303\":1,\"306\":2,\"307\":1,\"308\":4,\"309\":2,\"310\":3,\"312\":1,\"313\":1,\"320\":2,\"338\":1,\"344\":3,\"350\":1,\"351\":1,\"352\":4,\"353\":5,\"354\":4,\"355\":2,\"356\":2,\"357\":1,\"358\":1,\"359\":1,\"360\":10,\"361\":2,\"362\":1,\"364\":4,\"365\":1,\"367\":4,\"368\":1,\"369\":2,\"370\":8,\"371\":2,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":2,\"379\":4,\"381\":2,\"383\":1,\"384\":3,\"385\":2,\"386\":2,\"387\":3,\"388\":4,\"393\":2,\"396\":30,\"397\":9,\"398\":2,\"400\":9,\"401\":10,\"402\":9,\"403\":11,\"404\":2,\"405\":4,\"408\":5,\"409\":2,\"412\":15,\"415\":1,\"416\":2,\"417\":10,\"418\":4,\"419\":1,\"420\":3,\"421\":20,\"422\":7,\"426\":2,\"427\":8,\"428\":2,\"429\":2,\"430\":2,\"431\":5,\"432\":5,\"434\":2,\"435\":1,\"436\":5,\"437\":1,\"439\":2,\"441\":2,\"448\":1,\"468\":2,\"470\":4,\"477\":3,\"501\":2,\"511\":1,\"513\":1,\"514\":4,\"515\":3,\"516\":2,\"548\":1,\"557\":2,\"584\":2,\"633\":3,\"635\":3,\"649\":1,\"651\":5,\"656\":4,\"702\":2,\"704\":1,\"705\":1,\"706\":1,\"707\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":3,\"744\":1,\"745\":1,\"746\":1,\"748\":1,\"751\":1,\"754\":1,\"756\":2,\"830\":1,\"835\":2,\"837\":2,\"838\":1,\"881\":2,\"882\":2,\"883\":2,\"884\":17,\"893\":3,\"894\":3,\"895\":3,\"896\":3,\"897\":1,\"910\":2,\"915\":1,\"916\":2,\"917\":1,\"918\":2,\"921\":1,\"923\":1,\"924\":1,\"925\":2,\"927\":3,\"1035\":3,\"1036\":5,\"1037\":2,\"1047\":5,\"1165\":2,\"1311\":2,\"1312\":1,\"1314\":2,\"1315\":3,\"1317\":2,\"1319\":2,\"1320\":1,\"1321\":4,\"1328\":1,\"1330\":2,\"1331\":1,\"1337\":2,\"1339\":1,\"1340\":1,\"1341\":1,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":2,\"1350\":1,\"1351\":2,\"1352\":2,\"1353\":1,\"1354\":1,\"1355\":2,\"1356\":2,\"1357\":1,\"1358\":2,\"1359\":1,\"1360\":2,\"1361\":2,\"1362\":2,\"1363\":2,\"1364\":2,\"1367\":1,\"1368\":2,\"1369\":2,\"1370\":2,\"1371\":2,\"1372\":1,\"1373\":2,\"1374\":1,\"1377\":1,\"1379\":1,\"1380\":1,\"1381\":1,\"1384\":1,\"1385\":1,\"1386\":3,\"1387\":2,\"1388\":2,\"1389\":2,\"1390\":6,\"1391\":2,\"1392\":3,\"1393\":1,\"1396\":2,\"1397\":4,\"1398\":8,\"1399\":3,\"1401\":3,\"1403\":2,\"1404\":5,\"1405\":3,\"1406\":2,\"1407\":4,\"1409\":4,\"1410\":5,\"1411\":2,\"1412\":1,\"1413\":2,\"1415\":2,\"1420\":2,\"1429\":1,\"1431\":3,\"1432\":3,\"1433\":1,\"1434\":1,\"1435\":2,\"1440\":7,\"1441\":5,\"1442\":3,\"1443\":8,\"1444\":2,\"1445\":2,\"1446\":1,\"1447\":1,\"1448\":1}}],[\"printfgostring\",{\"1\":{\"303\":9}}],[\"printf函数\",{\"1\":{\"279\":1}}],[\"printf函数提供\",{\"1\":{\"221\":1}}],[\"printf来格式化字符串或者输出格式化字符串\",{\"1\":{\"221\":1}}],[\"printf\",{\"1\":{\"121\":1,\"192\":1,\"221\":33,\"224\":1,\"225\":1,\"233\":1,\"241\":6,\"254\":1,\"258\":3,\"279\":1,\"282\":1,\"298\":1,\"299\":1,\"300\":2,\"301\":1,\"302\":1,\"304\":8,\"305\":2,\"306\":1,\"307\":1,\"310\":2,\"314\":2,\"368\":1,\"393\":1,\"463\":1,\"477\":2,\"491\":1,\"494\":1,\"545\":2,\"556\":1,\"557\":4,\"633\":1,\"654\":1,\"744\":1,\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"754\":1,\"756\":2,\"833\":1,\"834\":2,\"836\":4,\"893\":2,\"1036\":1,\"1047\":3,\"1245\":2,\"1320\":1,\"1400\":1,\"1402\":2,\"1408\":4,\"1420\":2,\"1421\":1,\"1443\":1}}],[\"province\",{\"1\":{\"726\":3}}],[\"provided\",{\"1\":{\"705\":1}}],[\"proxy\",{\"1\":{\"655\":1,\"1077\":2,\"1078\":2,\"1116\":6,\"1132\":2,\"1158\":1,\"1160\":2,\"1173\":2,\"1219\":1,\"1232\":1,\"1233\":2,\"1235\":3,\"1338\":2}}],[\"proxies\",{\"1\":{\"453\":2}}],[\"protected\",{\"1\":{\"637\":1,\"1003\":1,\"1004\":3,\"1010\":1}}],[\"protoc编译器可以根据我们定义好的proto文件生成对应语言的源代码\",{\"1\":{\"1321\":1}}],[\"protocol是谷歌2008开源的语言中立\",{\"1\":{\"1321\":1}}],[\"protocol\",{\"0\":{\"1321\":1},\"1\":{\"124\":1,\"454\":1,\"637\":1,\"1133\":2,\"1309\":1}}],[\"proto3\",{\"1\":{\"1321\":1}}],[\"proto文件\",{\"1\":{\"1321\":1}}],[\"proto\",{\"1\":{\"1321\":8}}],[\"protobuf\",{\"0\":{\"92\":1},\"1\":{\"453\":2,\"459\":2,\"1309\":1,\"1321\":2}}],[\"produce\",{\"1\":{\"1047\":2}}],[\"produce根据发送的分区\",{\"1\":{\"1021\":1}}],[\"produce会计算本条消息需要发送的partition\",{\"1\":{\"1021\":1}}],[\"producermessage\",{\"1\":{\"1035\":1,\"1047\":2}}],[\"producer在向kafka写入消息的时候\",{\"1\":{\"1024\":1}}],[\"producer在写入数据的时候会把数据\",{\"1\":{\"1022\":1}}],[\"producer⼜怎么知道该将数据发往哪个partition呢\",{\"1\":{\"1023\":1}}],[\"producer就是生产者\",{\"1\":{\"1022\":1}}],[\"producer生产过程\",{\"1\":{\"1021\":1}}],[\"producer和consumer提供一致的配置信息\",{\"1\":{\"1021\":1}}],[\"producer即生产者\",{\"1\":{\"1020\":1}}],[\"producer\",{\"1\":{\"1018\":1,\"1020\":2,\"1034\":2,\"1035\":3,\"1047\":6,\"1053\":1}}],[\"produced\",{\"1\":{\"477\":3}}],[\"products\",{\"1\":{\"876\":1}}],[\"productid\",{\"1\":{\"644\":1}}],[\"production\",{\"1\":{\"453\":1}}],[\"product\",{\"1\":{\"644\":1,\"653\":1}}],[\"proposed\",{\"1\":{\"1010\":2}}],[\"proposal\",{\"1\":{\"345\":1}}],[\"properties>\",{\"1\":{\"742\":1}}],[\"properties\",{\"1\":{\"704\":2,\"705\":1,\"717\":1,\"718\":1,\"719\":1,\"720\":1,\"721\":2,\"723\":1,\"724\":1,\"726\":3,\"729\":1,\"730\":1,\"732\":1,\"733\":1,\"741\":1,\"742\":2,\"745\":1,\"1029\":1,\"1031\":2,\"1032\":1,\"1033\":1}}],[\"propagatecancel\",{\"1\":{\"427\":1}}],[\"proceed\",{\"1\":{\"1010\":2,\"1078\":1}}],[\"proceedonversionconflict\",{\"1\":{\"749\":1,\"752\":1}}],[\"procedure\",{\"1\":{\"820\":1}}],[\"processes\",{\"1\":{\"1123\":1,\"1126\":1,\"1130\":1,\"1131\":1,\"1158\":1}}],[\"processing\",{\"1\":{\"654\":1}}],[\"processor\",{\"1\":{\"635\":1,\"651\":3,\"654\":1}}],[\"processon\",{\"1\":{\"74\":1}}],[\"process\",{\"1\":{\"454\":1,\"473\":13,\"1164\":2}}],[\"proc\",{\"1\":{\"328\":1,\"393\":1}}],[\"profile001\",{\"1\":{\"326\":1}}],[\"profile\",{\"1\":{\"323\":1,\"324\":3,\"326\":1,\"327\":1,\"328\":3,\"1030\":2,\"1122\":2}}],[\"profiles\",{\"1\":{\"323\":1,\"328\":1}}],[\"profiling\",{\"1\":{\"321\":1,\"325\":1}}],[\"program\",{\"1\":{\"321\":1,\"454\":2}}],[\"programming\",{\"1\":{\"296\":1}}],[\"programmer\",{\"1\":{\"266\":1,\"268\":4,\"272\":1}}],[\"prose\",{\"1\":{\"144\":1}}],[\"probab\",{\"1\":{\"142\":1}}],[\"project\",{\"1\":{\"140\":2,\"145\":1}}],[\"prometheus\",{\"1\":{\"122\":1,\"160\":1,\"166\":1,\"334\":1,\"614\":1,\"637\":1,\"686\":1}}],[\"pair\",{\"1\":{\"1195\":2}}],[\"paice\",{\"1\":{\"144\":1}}],[\"paicehusk\",{\"1\":{\"144\":1}}],[\"palloc\",{\"1\":{\"1164\":1}}],[\"padding\",{\"1\":{\"1164\":1}}],[\"pantsel\",{\"1\":{\"1079\":1}}],[\"panic则会抛出panic\",{\"1\":{\"1339\":1}}],[\"panic日志\",{\"1\":{\"1339\":1,\"1340\":1,\"1341\":1}}],[\"paniclevel\",{\"1\":{\"1305\":2}}],[\"panicln\",{\"1\":{\"830\":1,\"833\":1,\"834\":4,\"835\":2,\"836\":4,\"837\":2,\"838\":2,\"1339\":1,\"1340\":1,\"1341\":1}}],[\"panic都会被捕获吗\",{\"1\":{\"563\":1,\"635\":2}}],[\"panicking\",{\"1\":{\"435\":1}}],[\"panic的参数禁止使用nil\",{\"1\":{\"397\":1}}],[\"panic是向上传递而不是向下\",{\"1\":{\"397\":1}}],[\"panic是go是运行时异常的表达形式\",{\"1\":{\"394\":1}}],[\"panic恢复\",{\"1\":{\"397\":4}}],[\"panicb\",{\"1\":{\"396\":6}}],[\"panica\",{\"1\":{\"396\":2}}],[\"panic函数接收一个类型为\",{\"1\":{\"395\":1}}],[\"panic中文译为恐慌\",{\"1\":{\"394\":1}}],[\"panic\",{\"0\":{\"394\":1},\"1\":{\"259\":1,\"388\":1,\"394\":1,\"395\":3,\"396\":16,\"397\":4,\"406\":2,\"427\":1,\"441\":2,\"463\":1,\"514\":5,\"635\":11,\"702\":2,\"704\":2,\"705\":2,\"706\":2,\"707\":2,\"709\":2,\"710\":2,\"711\":2,\"712\":2,\"713\":6,\"746\":1,\"748\":1,\"749\":1,\"751\":1,\"754\":1,\"756\":1,\"771\":1,\"910\":1,\"1303\":1,\"1367\":1,\"1369\":2,\"1370\":2,\"1371\":2,\"1372\":1,\"1373\":2,\"1374\":5,\"1411\":1,\"1413\":1,\"1417\":4,\"1419\":1,\"1425\":1,\"1426\":5,\"1428\":2,\"1443\":1}}],[\"pagecache\",{\"1\":{\"1054\":1}}],[\"page大小最好设置为32或者64bytes\",{\"1\":{\"965\":1}}],[\"page\",{\"1\":{\"965\":2,\"1123\":1,\"1130\":1,\"1131\":1,\"1141\":1,\"1158\":1,\"1160\":1}}],[\"pagesize\",{\"1\":{\"861\":1}}],[\"pages的子目录\",{\"1\":{\"65\":1}}],[\"pages\",{\"1\":{\"54\":1,\"965\":1}}],[\"past\",{\"1\":{\"736\":1,\"737\":1}}],[\"pass传递给下一级的代理服务器\",{\"1\":{\"1133\":1}}],[\"pass和scgi\",{\"1\":{\"1133\":1}}],[\"passwd\",{\"1\":{\"859\":2}}],[\"password>\",{\"1\":{\"965\":1,\"1000\":1}}],[\"password=kong\",{\"1\":{\"1075\":1,\"1076\":1,\"1077\":1}}],[\"password=\",{\"1\":{\"822\":2}}],[\"password=123456\",{\"1\":{\"822\":3}}],[\"password=mkxiaoer\",{\"1\":{\"775\":2,\"1081\":1}}],[\"password\",{\"1\":{\"463\":5,\"702\":1,\"775\":1,\"813\":1,\"910\":1,\"911\":1,\"912\":1,\"964\":1,\"1078\":2,\"1289\":2,\"1313\":3,\"1314\":2}}],[\"passes\",{\"1\":{\"470\":1}}],[\"pass\",{\"1\":{\"447\":2,\"468\":6,\"470\":4,\"471\":3,\"472\":3,\"473\":13,\"475\":1,\"476\":2,\"477\":10,\"487\":6,\"494\":2,\"498\":2,\"502\":1,\"505\":1,\"1000\":1,\"1003\":1,\"1004\":3,\"1133\":6,\"1158\":1,\"1160\":2,\"1346\":2,\"1347\":2,\"1348\":2,\"1349\":2,\"1350\":2,\"1351\":2,\"1352\":2,\"1353\":2,\"1354\":2,\"1355\":2,\"1356\":2,\"1357\":2,\"1358\":2,\"1359\":2,\"1360\":2,\"1361\":2,\"1362\":2,\"1363\":2,\"1364\":2,\"1384\":2,\"1385\":2,\"1386\":2,\"1387\":2,\"1388\":2,\"1389\":2,\"1390\":2,\"1391\":2,\"1392\":2,\"1393\":2,\"1396\":2,\"1397\":2,\"1398\":6,\"1399\":2,\"1400\":2,\"1401\":2,\"1402\":2,\"1403\":2,\"1404\":2,\"1405\":2,\"1406\":2,\"1407\":4,\"1408\":2,\"1409\":2,\"1410\":2,\"1411\":2,\"1413\":2}}],[\"passing\",{\"1\":{\"300\":1}}],[\"payload\",{\"1\":{\"634\":1}}],[\"pause\",{\"1\":{\"473\":4,\"1223\":1}}],[\"patterns\",{\"1\":{\"1428\":1}}],[\"pattern\",{\"1\":{\"967\":2,\"972\":1,\"973\":1,\"974\":1,\"1428\":1}}],[\"patch\",{\"1\":{\"455\":2}}],[\"paths\",{\"1\":{\"1081\":1}}],[\"path=$nginx\",{\"1\":{\"1122\":1}}],[\"path=$path\",{\"1\":{\"1030\":1}}],[\"path=\",{\"1\":{\"1116\":9,\"1132\":9,\"1173\":9,\"1174\":1}}],[\"path=false\",{\"1\":{\"1081\":1}}],[\"path\",{\"1\":{\"5\":10,\"84\":4,\"124\":2,\"388\":2,\"400\":1,\"405\":1,\"409\":1,\"410\":3,\"729\":1,\"850\":1,\"965\":1,\"1029\":2,\"1116\":4,\"1174\":4,\"1304\":2,\"1308\":2,\"1338\":1}}],[\"pack\",{\"1\":{\"445\":1,\"449\":1}}],[\"package便会为其创建一个页面\",{\"1\":{\"450\":1}}],[\"packages\",{\"1\":{\"296\":1,\"452\":1,\"1078\":1,\"1299\":1,\"1382\":1,\"1394\":1,\"1414\":1,\"1437\":1}}],[\"package关键字声明了是当前go文件属于哪一个包\",{\"1\":{\"172\":1}}],[\"package\",{\"1\":{\"172\":1,\"174\":1,\"175\":6,\"176\":5,\"177\":1,\"178\":1,\"214\":1,\"217\":1,\"218\":1,\"219\":1,\"251\":1,\"297\":1,\"298\":2,\"299\":1,\"300\":2,\"301\":1,\"302\":1,\"303\":4,\"304\":1,\"305\":1,\"306\":2,\"307\":1,\"308\":1,\"309\":1,\"310\":2,\"312\":1,\"313\":1,\"314\":1,\"317\":1,\"318\":1,\"319\":1,\"320\":2,\"323\":3,\"324\":3,\"446\":3,\"448\":1,\"450\":2,\"453\":1,\"454\":2,\"463\":3,\"468\":2,\"470\":2,\"471\":5,\"472\":1,\"473\":1,\"475\":2,\"477\":2,\"482\":1,\"491\":2,\"492\":1,\"494\":1,\"525\":1,\"584\":1,\"630\":2,\"633\":1,\"654\":1,\"656\":2,\"744\":1,\"745\":2,\"746\":2,\"748\":1,\"751\":1,\"754\":1,\"756\":1,\"830\":1,\"884\":1,\"1035\":1,\"1036\":1,\"1037\":1,\"1047\":2,\"1087\":1,\"1092\":1,\"1166\":1,\"1222\":1,\"1275\":1,\"1277\":1,\"1299\":1,\"1321\":3,\"1367\":1,\"1368\":1,\"1369\":1,\"1370\":1,\"1371\":1,\"1372\":1,\"1373\":2,\"1374\":2,\"1382\":1,\"1394\":1,\"1414\":1,\"1415\":1,\"1437\":1}}],[\"packaging\",{\"1\":{\"132\":1}}],[\"packets\",{\"1\":{\"1195\":2,\"1196\":1,\"1197\":3}}],[\"packet\",{\"1\":{\"145\":1,\"1195\":2,\"1196\":1,\"1197\":3}}],[\"paho\",{\"1\":{\"145\":1}}],[\"parition的个数多小而定\",{\"1\":{\"1029\":1}}],[\"parsing\",{\"1\":{\"717\":3,\"1391\":1}}],[\"parseinlocation\",{\"1\":{\"1432\":1}}],[\"parseglob基于通配符匹配\",{\"1\":{\"1428\":1}}],[\"parseglob\",{\"1\":{\"1428\":1}}],[\"parsedtmpl\",{\"1\":{\"1417\":2,\"1425\":2}}],[\"parse方法解析模板字符串\",{\"1\":{\"1415\":1}}],[\"parsecomplex\",{\"1\":{\"1391\":4}}],[\"parsecidr\",{\"1\":{\"1368\":2}}],[\"parsefiles基于文件名\",{\"1\":{\"1428\":1}}],[\"parsefiles\",{\"1\":{\"1428\":1}}],[\"parsefields\",{\"1\":{\"127\":1}}],[\"parsefs就是从指定的文件系统中加载匹配pattern的模板\",{\"1\":{\"1428\":1}}],[\"parsefs\",{\"1\":{\"1428\":3}}],[\"parsefloat\",{\"1\":{\"1389\":3}}],[\"parsebool\",{\"1\":{\"1386\":6}}],[\"parsemac\",{\"1\":{\"1367\":2}}],[\"parsetoken\",{\"1\":{\"1092\":2}}],[\"parse\",{\"1\":{\"124\":1,\"446\":1,\"717\":1,\"1326\":1,\"1328\":1,\"1415\":2,\"1417\":1,\"1425\":1,\"1426\":4}}],[\"parser\",{\"1\":{\"124\":1,\"1308\":1}}],[\"partof=cri\",{\"1\":{\"1223\":1}}],[\"partitionlist\",{\"1\":{\"1047\":2}}],[\"partitioner\",{\"1\":{\"1047\":1}}],[\"partitionconsumer\",{\"1\":{\"1036\":1,\"1047\":1}}],[\"partitioncount\",{\"1\":{\"1034\":1}}],[\"partition在服务器上的表现形式就是⼀个⼀个的文件夹\",{\"1\":{\"1026\":1}}],[\"partition在写入的时候可以指定需要写入的partition\",{\"1\":{\"1023\":1}}],[\"partition结构\",{\"0\":{\"1026\":1}}],[\"partition和replication的数量\",{\"1\":{\"1024\":1}}],[\"partition除leader外的replication\",{\"1\":{\"1020\":1}}],[\"partition的表现形式就是一个一个的文件夹\",{\"1\":{\"1020\":1}}],[\"partition的众多replication的一个\",{\"1\":{\"1020\":1}}],[\"partition的副本\",{\"1\":{\"1020\":1}}],[\"partition\",{\"1\":{\"1020\":2,\"1034\":3,\"1036\":3,\"1047\":9,\"1060\":3,\"1063\":2,\"1067\":1}}],[\"partitions=6\",{\"1\":{\"1029\":1}}],[\"partitions\",{\"1\":{\"814\":1,\"1029\":1,\"1034\":2,\"1036\":4,\"1047\":1}}],[\"partial\",{\"1\":{\"993\":1}}],[\"partion的概念\",{\"1\":{\"622\":1,\"694\":1}}],[\"part\",{\"1\":{\"633\":2}}],[\"parent\",{\"1\":{\"427\":5,\"428\":4,\"470\":1,\"546\":4}}],[\"parentindex\",{\"1\":{\"344\":7}}],[\"params\",{\"1\":{\"1280\":2}}],[\"param\",{\"1\":{\"1280\":3,\"1286\":1}}],[\"parameters\",{\"1\":{\"345\":1,\"635\":1}}],[\"parameter\",{\"1\":{\"320\":1,\"1163\":1}}],[\"parallel的测试用例并行运行\",{\"1\":{\"469\":1}}],[\"parallel\",{\"1\":{\"137\":1,\"468\":1,\"469\":1,\"473\":3,\"1000\":1}}],[\"parquet文件\",{\"1\":{\"132\":1}}],[\"parquet\",{\"1\":{\"132\":1}}],[\"p\",{\"1\":{\"49\":1,\"221\":2,\"254\":2,\"269\":14,\"270\":4,\"271\":5,\"275\":4,\"276\":6,\"307\":6,\"338\":2,\"366\":1,\"368\":2,\"374\":1,\"385\":3,\"400\":1,\"435\":21,\"513\":9,\"516\":2,\"541\":2,\"635\":6,\"651\":2,\"654\":4,\"774\":1,\"775\":3,\"776\":1,\"822\":3,\"964\":1,\"994\":1,\"1010\":6,\"1028\":1,\"1046\":1,\"1047\":7,\"1075\":1,\"1077\":4,\"1079\":1,\"1081\":1,\"1110\":1,\"1114\":1,\"1133\":1,\"1135\":1,\"1164\":5,\"1171\":1,\"1175\":1,\"1188\":1,\"1189\":1,\"1221\":1,\"1225\":1,\"1244\":9,\"1253\":4,\"1254\":3,\"1256\":8,\"1257\":2,\"1260\":5,\"1261\":2,\"1264\":5,\"1265\":2,\"1321\":4,\"1380\":10,\"1441\":6,\"1442\":7,\"1443\":6,\"1445\":8}}],[\"pulsar\",{\"0\":{\"1056\":1},\"1\":{\"1056\":5,\"1057\":1}}],[\"pulling\",{\"1\":{\"1194\":1}}],[\"pull命令后加入参数\",{\"1\":{\"58\":1}}],[\"pull\",{\"1\":{\"12\":1,\"17\":1,\"53\":3,\"58\":2,\"775\":2,\"822\":1,\"1182\":1,\"1187\":1,\"1193\":1}}],[\"put1\",{\"1\":{\"746\":3,\"748\":3,\"749\":3,\"751\":3}}],[\"put\",{\"1\":{\"435\":3,\"717\":1,\"718\":1,\"719\":1,\"720\":1,\"721\":5,\"723\":2,\"724\":2,\"726\":2,\"728\":1,\"729\":2,\"730\":4,\"732\":2,\"733\":3,\"741\":1,\"1165\":2,\"1166\":18,\"1277\":1,\"1278\":1,\"1283\":2,\"1286\":1}}],[\"puts\",{\"1\":{\"297\":1,\"303\":6}}],[\"pure\",{\"1\":{\"134\":1,\"143\":1,\"145\":1,\"314\":2}}],[\"purl\",{\"1\":{\"130\":1}}],[\"pubsubnumsub\",{\"1\":{\"953\":1}}],[\"public\",{\"1\":{\"1078\":1,\"1165\":2,\"1166\":4,\"1183\":1}}],[\"publicip\",{\"1\":{\"145\":1}}],[\"publish\",{\"1\":{\"953\":1,\"957\":1}}],[\"published\",{\"1\":{\"459\":1}}],[\"pub\",{\"1\":{\"50\":1,\"721\":4}}],[\"push\",{\"1\":{\"17\":1,\"58\":5,\"343\":2,\"344\":5,\"449\":1,\"516\":1,\"1182\":1,\"1193\":1}}],[\"本来有三个网络\",{\"1\":{\"1195\":1}}],[\"本来应该是将其分配到栈上\",{\"1\":{\"317\":1}}],[\"本身也是一个文件\",{\"1\":{\"1183\":1}}],[\"本身没有提供机制来捕获这类错误\",{\"1\":{\"635\":1}}],[\"本节建议在您在\",{\"1\":{\"986\":1}}],[\"本节不会讲解\",{\"1\":{\"227\":1}}],[\"本文只涉及到其中几方面的内容\",{\"1\":{\"1018\":1}}],[\"本文只是简单讲解如何利用go进行sql操作\",{\"1\":{\"889\":1}}],[\"本文使用的是github\",{\"1\":{\"909\":1}}],[\"本文仅仅讲解如何使用go语言驱动来操作redis数据库\",{\"1\":{\"908\":1}}],[\"本文主要介绍使用在go中使用官方的mongo驱动操作mongodb数据库\",{\"1\":{\"827\":1}}],[\"本文的所有演示\",{\"1\":{\"716\":1}}],[\"本文用es8来进行演示\",{\"1\":{\"701\":1}}],[\"本文会讲解如何用go来进行对elastisearch的一些基本操作\",{\"1\":{\"700\":1}}],[\"本文会讲解如何通过go语言来进行基本的文件处理\",{\"1\":{\"399\":1}}],[\"本小节介绍了\",{\"1\":{\"505\":1}}],[\"本质上也是一种索引访问\",{\"1\":{\"814\":1}}],[\"本质上也是对openfile的封装\",{\"1\":{\"402\":1}}],[\"本质上是一个整数型字段\",{\"1\":{\"733\":1}}],[\"本质上是一个长整型字段\",{\"1\":{\"732\":1}}],[\"本质就是\",{\"1\":{\"549\":1}}],[\"本质是字节数组\",{\"1\":{\"510\":1}}],[\"本质也是穷举所有的可能\",{\"1\":{\"4\":1}}],[\"本篇不会对实现原理做过多的讲解\",{\"1\":{\"258\":1}}],[\"本站的第一个入门的案例就是输出一个字符串\",{\"1\":{\"214\":1}}],[\"本机ip\",{\"1\":{\"1010\":1}}],[\"本机建议设置\",{\"1\":{\"1010\":1}}],[\"本机\",{\"1\":{\"126\":1}}],[\"本机go\",{\"1\":{\"126\":1}}],[\"本包提供了对json的基本支持\",{\"1\":{\"121\":1}}],[\"本包提供了对操作系统功能的非平台相关访问接口\",{\"1\":{\"121\":1}}],[\"本地回环网络\",{\"1\":{\"1194\":1}}],[\"本地win或mac需要关闭防火墙\",{\"1\":{\"1121\":1}}],[\"本地连接\",{\"1\":{\"964\":1}}],[\"本地服务器\",{\"1\":{\"641\":1}}],[\"本地变量\",{\"1\":{\"635\":1}}],[\"本地队列满了就会放入到全局队列\",{\"1\":{\"542\":1}}],[\"本地依赖和go\",{\"1\":{\"460\":1}}],[\"本地存储\",{\"1\":{\"122\":1}}],[\"本地测试\",{\"1\":{\"58\":1}}],[\"本地仓库中的一个特殊的文件\",{\"1\":{\"17\":1}}],[\"本地仓库中保存修改的各个历史版本\",{\"1\":{\"12\":1}}],[\"本地仓库\",{\"1\":{\"17\":1}}],[\"本地仓库和远程仓库\",{\"1\":{\"12\":1}}],[\"本人\",{\"1\":{\"12\":1}}],[\"本人就出面协调\",{\"1\":{\"12\":1}}],[\"本纳第克特\",{\"1\":{\"12\":1}}],[\"本层集合中元素\",{\"1\":{\"4\":1}}],[\"fghijk\",{\"1\":{\"1405\":1}}],[\"f8ff\",{\"1\":{\"1195\":1}}],[\"f8\",{\"1\":{\"1194\":1,\"1195\":1}}],[\"fmk^\",{\"1\":{\"1090\":1}}],[\"fmt\",{\"0\":{\"219\":1,\"224\":1},\"1\":{\"121\":1,\"124\":1,\"155\":1,\"172\":3,\"175\":2,\"177\":2,\"187\":1,\"189\":2,\"192\":1,\"209\":2,\"210\":6,\"214\":2,\"219\":2,\"220\":1,\"221\":33,\"224\":4,\"225\":2,\"226\":1,\"228\":1,\"229\":2,\"230\":3,\"232\":2,\"233\":4,\"234\":4,\"235\":2,\"236\":2,\"240\":1,\"241\":6,\"244\":1,\"245\":3,\"246\":4,\"247\":3,\"248\":2,\"249\":3,\"250\":4,\"251\":3,\"253\":4,\"254\":5,\"255\":4,\"256\":2,\"257\":3,\"258\":5,\"259\":1,\"260\":7,\"261\":4,\"262\":4,\"263\":2,\"264\":2,\"265\":1,\"266\":1,\"270\":2,\"271\":1,\"274\":1,\"275\":9,\"276\":1,\"280\":1,\"282\":2,\"283\":9,\"284\":1,\"285\":14,\"286\":2,\"287\":6,\"292\":1,\"293\":9,\"294\":8,\"298\":4,\"299\":2,\"302\":2,\"303\":2,\"306\":3,\"307\":3,\"308\":5,\"309\":3,\"310\":5,\"312\":2,\"313\":2,\"314\":3,\"320\":3,\"338\":1,\"344\":3,\"350\":1,\"351\":1,\"352\":4,\"353\":5,\"354\":4,\"355\":2,\"356\":2,\"357\":1,\"358\":1,\"359\":1,\"360\":10,\"361\":2,\"362\":1,\"364\":4,\"365\":1,\"367\":4,\"368\":2,\"369\":2,\"370\":8,\"371\":2,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":2,\"379\":4,\"381\":2,\"383\":1,\"384\":3,\"385\":2,\"386\":2,\"387\":3,\"388\":4,\"390\":1,\"392\":1,\"393\":6,\"396\":30,\"397\":9,\"398\":2,\"400\":10,\"401\":10,\"402\":9,\"403\":11,\"404\":2,\"405\":4,\"408\":5,\"409\":2,\"412\":15,\"415\":1,\"416\":2,\"417\":10,\"418\":4,\"419\":1,\"420\":3,\"421\":20,\"422\":7,\"426\":2,\"427\":8,\"428\":2,\"429\":2,\"430\":2,\"431\":5,\"432\":5,\"434\":2,\"435\":2,\"436\":5,\"437\":1,\"439\":2,\"441\":2,\"446\":4,\"447\":1,\"448\":2,\"463\":2,\"468\":3,\"470\":5,\"477\":5,\"501\":2,\"511\":1,\"513\":1,\"514\":4,\"515\":3,\"516\":2,\"545\":2,\"548\":1,\"556\":1,\"557\":6,\"584\":3,\"633\":5,\"635\":3,\"649\":1,\"651\":5,\"654\":2,\"656\":6,\"702\":2,\"704\":1,\"705\":1,\"706\":1,\"707\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":4,\"744\":3,\"745\":2,\"746\":3,\"748\":3,\"749\":1,\"751\":3,\"754\":3,\"756\":5,\"830\":2,\"833\":1,\"834\":2,\"835\":2,\"836\":4,\"837\":2,\"881\":2,\"882\":2,\"883\":2,\"884\":18,\"893\":5,\"894\":3,\"895\":3,\"896\":3,\"897\":1,\"910\":3,\"915\":1,\"916\":2,\"917\":1,\"918\":2,\"921\":1,\"923\":1,\"924\":1,\"925\":2,\"927\":3,\"1035\":4,\"1036\":7,\"1037\":3,\"1047\":11,\"1245\":3,\"1289\":2,\"1308\":1,\"1311\":2,\"1312\":1,\"1314\":2,\"1315\":3,\"1317\":2,\"1319\":2,\"1320\":2,\"1321\":5,\"1328\":1,\"1330\":2,\"1331\":1,\"1337\":2,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":2,\"1350\":1,\"1351\":2,\"1352\":2,\"1353\":1,\"1354\":1,\"1355\":2,\"1356\":2,\"1357\":1,\"1358\":2,\"1359\":1,\"1360\":2,\"1361\":2,\"1362\":2,\"1363\":2,\"1364\":2,\"1367\":2,\"1368\":3,\"1369\":3,\"1370\":3,\"1371\":3,\"1372\":2,\"1373\":4,\"1374\":2,\"1377\":1,\"1379\":1,\"1380\":1,\"1384\":1,\"1385\":1,\"1386\":3,\"1387\":2,\"1388\":2,\"1389\":2,\"1390\":8,\"1391\":2,\"1392\":5,\"1393\":1,\"1396\":2,\"1397\":4,\"1398\":8,\"1399\":3,\"1400\":1,\"1401\":3,\"1402\":2,\"1403\":2,\"1404\":5,\"1405\":3,\"1406\":2,\"1407\":4,\"1408\":4,\"1409\":4,\"1410\":5,\"1411\":2,\"1412\":1,\"1413\":2,\"1415\":3,\"1420\":5,\"1429\":1,\"1431\":3,\"1432\":3,\"1433\":1,\"1434\":1,\"1435\":2,\"1440\":7,\"1441\":5,\"1442\":3,\"1443\":9,\"1444\":2,\"1445\":2,\"1446\":1,\"1447\":1,\"1448\":1}}],[\"fd\",{\"1\":{\"769\":2,\"770\":2}}],[\"ff02\",{\"1\":{\"1196\":2}}],[\"ff00\",{\"1\":{\"1196\":1}}],[\"ff\",{\"1\":{\"477\":1,\"1194\":18,\"1195\":24}}],[\"ffmpeg的综合go绑定\",{\"1\":{\"146\":1}}],[\"fe\",{\"1\":{\"1321\":3}}],[\"fe00\",{\"1\":{\"1196\":1}}],[\"fe70\",{\"1\":{\"1195\":1}}],[\"fe93\",{\"1\":{\"1195\":1}}],[\"fe9d\",{\"1\":{\"1195\":1}}],[\"fe80\",{\"1\":{\"1194\":1,\"1195\":3}}],[\"feed\",{\"1\":{\"1019\":1}}],[\"feige\",{\"1\":{\"881\":1,\"1036\":1}}],[\"fe3a3abad311\",{\"1\":{\"453\":2,\"459\":3}}],[\"feat\",{\"1\":{\"449\":6}}],[\"fetch+merge\",{\"1\":{\"58\":1}}],[\"fetch\",{\"1\":{\"58\":1,\"768\":1,\"1301\":3}}],[\"f1\",{\"1\":{\"383\":4,\"385\":3}}],[\"fs作为文件系统\",{\"1\":{\"1428\":1}}],[\"fsys\",{\"1\":{\"1428\":1}}],[\"fsync\",{\"1\":{\"987\":4}}],[\"fssl\",{\"1\":{\"1231\":1}}],[\"fstab\",{\"1\":{\"1222\":1}}],[\"fs库\",{\"1\":{\"399\":1}}],[\"fs\",{\"1\":{\"390\":5,\"400\":15,\"410\":1,\"1308\":1,\"1428\":6}}],[\"fscanln\",{\"1\":{\"225\":1}}],[\"fsa实现\",{\"1\":{\"127\":1}}],[\"f或者\",{\"1\":{\"221\":1}}],[\"fp\",{\"1\":{\"382\":1}}],[\"fprintf函数中\",{\"1\":{\"435\":1}}],[\"fprintf\",{\"1\":{\"279\":1,\"280\":1,\"435\":1}}],[\"fprintln\",{\"1\":{\"220\":1,\"1047\":1}}],[\"fp+0\",{\"1\":{\"182\":1}}],[\"f\",{\"0\":{\"1158\":1},\"1\":{\"176\":1,\"185\":1,\"201\":1,\"221\":2,\"229\":2,\"230\":3,\"260\":3,\"282\":2,\"285\":2,\"293\":4,\"305\":1,\"318\":3,\"382\":1,\"383\":4,\"385\":3,\"401\":2,\"402\":3,\"403\":1,\"408\":1,\"434\":5,\"436\":1,\"473\":1,\"477\":12,\"548\":3,\"558\":1,\"654\":3,\"713\":1,\"775\":1,\"927\":2,\"1187\":2,\"1193\":1,\"1228\":2,\"1229\":1,\"1281\":1,\"1302\":2,\"1337\":1,\"1386\":2,\"1390\":12,\"1392\":1,\"1393\":1,\"1402\":5,\"1405\":1,\"1443\":2}}],[\"fruit\",{\"1\":{\"1280\":2}}],[\"freq\",{\"1\":{\"742\":1}}],[\"free\",{\"1\":{\"303\":6,\"310\":2,\"435\":2}}],[\"freed\",{\"1\":{\"303\":2}}],[\"frame\",{\"1\":{\"724\":4}}],[\"framework\",{\"0\":{\"1460\":1},\"1\":{\"145\":1,\"1289\":1}}],[\"from\",{\"1\":{\"317\":4,\"318\":3,\"319\":1,\"320\":5,\"427\":1,\"514\":1,\"581\":1,\"635\":1,\"653\":2,\"656\":3,\"756\":1,\"757\":1,\"758\":1,\"763\":1,\"780\":1,\"806\":4,\"810\":3,\"814\":25,\"817\":2,\"818\":12,\"819\":7,\"820\":10,\"821\":9,\"825\":2,\"861\":18,\"893\":2,\"896\":1,\"993\":2,\"1010\":4,\"1034\":2,\"1163\":1,\"1193\":2,\"1194\":2,\"1195\":5,\"1196\":3,\"1197\":10}}],[\"frontmatter\",{\"1\":{\"2\":1}}],[\"front\",{\"1\":{\"0\":1}}],[\"ftp\",{\"1\":{\"145\":1}}],[\"fyne\",{\"1\":{\"138\":1}}],[\"fn就类似于一个单元测试函数的逻辑\",{\"1\":{\"477\":1}}],[\"fn1\",{\"1\":{\"285\":3}}],[\"fn\",{\"1\":{\"137\":1,\"378\":4,\"477\":1}}],[\"fnv\",{\"1\":{\"124\":1}}],[\"f4go\",{\"1\":{\"136\":1}}],[\"fips\",{\"1\":{\"1132\":1,\"1173\":1}}],[\"firewalld\",{\"1\":{\"1222\":2,\"1223\":1}}],[\"firewall\",{\"1\":{\"1078\":2}}],[\"fired\",{\"1\":{\"993\":1}}],[\"firstkey\",{\"1\":{\"1165\":6}}],[\"first和user\",{\"1\":{\"728\":1}}],[\"first\",{\"1\":{\"137\":1,\"226\":2,\"477\":18,\"633\":2,\"651\":2,\"728\":3,\"729\":4,\"825\":1,\"1164\":1,\"1415\":2,\"1417\":3,\"1422\":2}}],[\"filter=stars=50\",{\"1\":{\"1187\":1}}],[\"filter\",{\"1\":{\"882\":2,\"883\":4,\"884\":6}}],[\"filtered列的值依赖统计信息\",{\"1\":{\"814\":1}}],[\"filtered\",{\"1\":{\"814\":1}}],[\"filenames\",{\"1\":{\"1428\":1}}],[\"filename\",{\"1\":{\"1133\":1,\"1281\":3,\"1304\":1,\"1307\":9}}],[\"filed\",{\"1\":{\"848\":1}}],[\"file=\",{\"1\":{\"822\":2,\"825\":3,\"1281\":1}}],[\"file=地址\",{\"1\":{\"813\":1}}],[\"filesystem\",{\"1\":{\"1192\":1}}],[\"filesort\",{\"1\":{\"814\":2,\"819\":5}}],[\"files\",{\"1\":{\"468\":1,\"1116\":10,\"1281\":2}}],[\"filesizelow\",{\"1\":{\"400\":1}}],[\"filesizehigh\",{\"1\":{\"400\":1}}],[\"file提供的方法readfrom\",{\"1\":{\"403\":1}}],[\"file结构体提供了以下几种方法以供写入数据\",{\"1\":{\"402\":1}}],[\"file类型提供了以下几个公开的方法\",{\"1\":{\"401\":1}}],[\"filetype\",{\"1\":{\"400\":1}}],[\"fileattributes\",{\"1\":{\"400\":1}}],[\"fileinfo\",{\"1\":{\"400\":2,\"410\":1}}],[\"filemode\",{\"1\":{\"400\":1,\"402\":1,\"409\":2,\"410\":1}}],[\"filexfer\",{\"1\":{\"145\":1}}],[\"filezilla\",{\"1\":{\"145\":1}}],[\"filepath\",{\"1\":{\"124\":1,\"410\":5,\"1280\":6,\"1308\":1}}],[\"file\",{\"1\":{\"84\":2,\"207\":2,\"215\":1,\"300\":1,\"388\":5,\"390\":4,\"400\":12,\"401\":13,\"402\":12,\"403\":2,\"408\":4,\"449\":6,\"454\":1,\"469\":1,\"477\":2,\"514\":2,\"549\":1,\"633\":3,\"651\":1,\"822\":1,\"825\":2,\"965\":1,\"985\":1,\"1010\":1,\"1029\":1,\"1116\":10,\"1133\":2,\"1163\":1,\"1281\":10,\"1303\":1}}],[\"fish\",{\"1\":{\"649\":2}}],[\"fifo\",{\"1\":{\"400\":1,\"415\":1}}],[\"finish就结束安装了\",{\"1\":{\"849\":1}}],[\"finished的行号变成了调用者的行号\",{\"1\":{\"472\":1}}],[\"finished\",{\"1\":{\"471\":13,\"472\":3,\"473\":7,\"993\":1}}],[\"fin\",{\"1\":{\"641\":2,\"651\":2}}],[\"finduser\",{\"1\":{\"1280\":2}}],[\"findmany\",{\"1\":{\"884\":2}}],[\"findoneandreplace\",{\"1\":{\"836\":1}}],[\"findone\",{\"1\":{\"833\":2,\"855\":1,\"861\":1,\"884\":1}}],[\"find\",{\"1\":{\"400\":1,\"825\":1,\"834\":9,\"855\":3,\"857\":2,\"858\":1,\"859\":1,\"861\":22,\"863\":11,\"884\":1,\"1194\":1}}],[\"finally这种语句\",{\"1\":{\"388\":1}}],[\"finance\",{\"1\":{\"133\":3}}],[\"fielderr\",{\"1\":{\"1289\":1}}],[\"fielderrors\",{\"1\":{\"1289\":1}}],[\"field1\",{\"1\":{\"972\":2}}],[\"field获取存储在哈希表中指定字段的值\",{\"1\":{\"972\":1}}],[\"field2删除一个或多个哈希表字段\",{\"1\":{\"972\":1}}],[\"field2\",{\"1\":{\"972\":3}}],[\"fieldsfunc\",{\"1\":{\"1402\":2}}],[\"fields\",{\"1\":{\"729\":1,\"733\":1,\"741\":1,\"766\":1,\"1402\":2}}],[\"fieldbyname\",{\"1\":{\"367\":2,\"368\":2,\"369\":1}}],[\"field\",{\"1\":{\"307\":2,\"367\":6,\"368\":2,\"644\":1,\"717\":5,\"725\":1,\"745\":1,\"746\":1,\"766\":2,\"882\":4,\"972\":8,\"1301\":1}}],[\"fib\",{\"1\":{\"282\":5}}],[\"flight\",{\"1\":{\"768\":1}}],[\"flutter\",{\"1\":{\"1238\":1}}],[\"flushing\",{\"1\":{\"993\":1}}],[\"flushall\",{\"1\":{\"968\":2}}],[\"flushdb\",{\"1\":{\"968\":1}}],[\"flush\",{\"1\":{\"220\":2,\"825\":1,\"968\":1}}],[\"fluent\",{\"1\":{\"141\":1}}],[\"floor\",{\"1\":{\"820\":1,\"1353\":1}}],[\"float类型\",{\"1\":{\"720\":1}}],[\"floats\",{\"1\":{\"341\":4,\"1377\":3,\"1379\":3,\"1440\":2}}],[\"float\",{\"1\":{\"305\":4,\"387\":1,\"524\":1,\"529\":1,\"554\":1,\"720\":4,\"724\":1,\"791\":1,\"1324\":1,\"1389\":4}}],[\"float32\",{\"1\":{\"198\":1,\"305\":1,\"351\":3,\"478\":1,\"1440\":1}}],[\"float64frombits\",{\"1\":{\"1443\":2}}],[\"float64bits\",{\"1\":{\"1443\":3}}],[\"float64slice\",{\"1\":{\"1379\":1}}],[\"float64s\",{\"1\":{\"1377\":1}}],[\"float64构成了一个类型约束\",{\"1\":{\"337\":1}}],[\"float64\",{\"1\":{\"187\":1,\"198\":1,\"201\":1,\"261\":1,\"262\":1,\"263\":1,\"268\":2,\"269\":2,\"275\":1,\"278\":2,\"280\":2,\"281\":1,\"305\":1,\"337\":3,\"339\":3,\"341\":1,\"351\":3,\"383\":4,\"385\":3,\"387\":1,\"478\":1,\"713\":1,\"1324\":1,\"1377\":1,\"1379\":1,\"1389\":1,\"1390\":1,\"1443\":7}}],[\"flogo是一个用于iot\",{\"1\":{\"140\":1}}],[\"flogo\",{\"1\":{\"140\":1}}],[\"flow\",{\"1\":{\"137\":1,\"317\":2,\"318\":2,\"319\":1,\"320\":3}}],[\"flowgraph\",{\"1\":{\"128\":1}}],[\"floc\",{\"1\":{\"137\":1}}],[\"flop\",{\"1\":{\"132\":1}}],[\"flavor\",{\"1\":{\"702\":1}}],[\"flame\",{\"1\":{\"327\":1}}],[\"flat\",{\"1\":{\"326\":6}}],[\"flate\",{\"1\":{\"124\":1,\"1308\":1}}],[\"flac编码器\",{\"1\":{\"126\":1}}],[\"flac\",{\"1\":{\"126\":1}}],[\"flag解析会在第一个非命令行参数之前停止\",{\"1\":{\"1326\":1}}],[\"flag=xxx\",{\"1\":{\"1326\":2}}],[\"flag包使得开发命令行工具更加简单\",{\"1\":{\"1322\":1}}],[\"flags\",{\"1\":{\"454\":1,\"1341\":1}}],[\"flag标准库\",{\"1\":{\"335\":1}}],[\"flag\",{\"0\":{\"1322\":1,\"1341\":1},\"1\":{\"121\":1,\"124\":1,\"335\":1,\"348\":1,\"400\":1,\"446\":3,\"454\":2,\"1308\":1,\"1323\":1,\"1325\":6,\"1326\":2,\"1328\":4,\"1341\":2}}],[\"family\",{\"1\":{\"1164\":1}}],[\"fair\",{\"0\":{\"1168\":1},\"1\":{\"1160\":1,\"1168\":1}}],[\"fails=3\",{\"1\":{\"1163\":1}}],[\"fails=5次\",{\"1\":{\"1163\":1}}],[\"fails\",{\"1\":{\"1163\":4,\"1164\":3}}],[\"fails设置fail\",{\"1\":{\"1161\":1}}],[\"fails结合使用\",{\"1\":{\"1161\":1}}],[\"failover\",{\"1\":{\"996\":1,\"999\":1,\"1000\":1,\"1057\":1}}],[\"failing\",{\"1\":{\"477\":4}}],[\"failnow\",{\"1\":{\"471\":1}}],[\"failnow同样会标记为测试失败\",{\"1\":{\"471\":1}}],[\"fail\",{\"1\":{\"471\":7,\"477\":8,\"491\":4,\"502\":4,\"505\":1,\"1010\":1,\"1161\":2,\"1163\":5,\"1164\":1}}],[\"fail用于将当前用例标记为测试失败\",{\"1\":{\"471\":1}}],[\"failure\",{\"1\":{\"470\":1,\"477\":1,\"1032\":1,\"1219\":2}}],[\"failfast\",{\"1\":{\"468\":1,\"469\":1}}],[\"failed\",{\"1\":{\"463\":1,\"709\":1,\"711\":1,\"712\":1,\"717\":1,\"724\":1,\"741\":1,\"893\":2,\"1035\":2,\"1037\":1,\"1047\":5,\"1163\":1,\"1171\":1,\"1245\":1,\"1301\":3}}],[\"fastgi\",{\"1\":{\"1116\":3,\"1132\":1,\"1173\":1}}],[\"fastcgi\",{\"1\":{\"1116\":3,\"1132\":1,\"1133\":2,\"1173\":1}}],[\"fast\",{\"1\":{\"656\":2,\"1184\":1,\"1194\":1,\"1221\":1,\"1299\":1}}],[\"fasthttp\",{\"1\":{\"145\":1}}],[\"factory\",{\"1\":{\"1166\":1}}],[\"factor表示指定副本的个数\",{\"1\":{\"1034\":1}}],[\"factor=1\",{\"1\":{\"1029\":2}}],[\"factor\",{\"1\":{\"515\":3,\"720\":1,\"1034\":2}}],[\"father\",{\"1\":{\"379\":3,\"1417\":1}}],[\"fatal会在写入日志信息后调用os\",{\"1\":{\"1339\":1}}],[\"fatallevel\",{\"1\":{\"1305\":2}}],[\"fatalln\",{\"1\":{\"1280\":1,\"1339\":1}}],[\"fatal=no\",{\"1\":{\"1219\":2}}],[\"fatalf内部使用的是t\",{\"1\":{\"471\":1}}],[\"fatalf\",{\"1\":{\"446\":1,\"471\":3,\"472\":1,\"473\":1,\"474\":2,\"495\":1,\"766\":4,\"1245\":1}}],[\"fatal级别的问题一般很少会显式的去触发\",{\"1\":{\"398\":1}}],[\"fatal是一种极其严重的问题\",{\"1\":{\"398\":1}}],[\"fatal\",{\"0\":{\"398\":1},\"1\":{\"58\":1,\"266\":1,\"300\":1,\"323\":3,\"388\":1,\"398\":2,\"420\":1,\"422\":1,\"436\":1,\"504\":1,\"766\":8,\"825\":1,\"1368\":1}}],[\"fallback\",{\"1\":{\"1423\":2,\"1424\":1}}],[\"fallthrough\",{\"1\":{\"178\":1,\"230\":2}}],[\"false\",{\"1\":{\"202\":1,\"261\":1,\"282\":1,\"294\":1,\"354\":1,\"355\":1,\"356\":1,\"367\":2,\"379\":2,\"400\":1,\"420\":1,\"434\":2,\"435\":3,\"436\":1,\"463\":2,\"471\":5,\"472\":1,\"473\":1,\"474\":5,\"702\":1,\"722\":2,\"724\":1,\"741\":1,\"745\":3,\"768\":1,\"863\":1,\"1037\":2,\"1197\":5,\"1261\":2,\"1303\":1,\"1307\":1,\"1328\":1,\"1351\":1,\"1386\":6,\"1387\":2,\"1393\":1,\"1398\":1,\"1420\":2}}],[\"false为假值\",{\"1\":{\"196\":1}}],[\"falcon\",{\"1\":{\"131\":1}}],[\"fann\",{\"1\":{\"142\":2}}],[\"fano编码的go实现\",{\"1\":{\"127\":1}}],[\"fcgi\",{\"1\":{\"124\":1}}],[\"following\",{\"1\":{\"1225\":2}}],[\"follower会一直同步leader的消息\",{\"1\":{\"1064\":1}}],[\"follower将消息写入本地磁盘后向leader发送ack\",{\"1\":{\"1022\":1}}],[\"follower从leader拉取消息数据\",{\"1\":{\"1022\":1}}],[\"follower同步消息成功向leader发送ack\",{\"1\":{\"1021\":1}}],[\"follower通过轮询监控到leader新写入消息\",{\"1\":{\"1021\":1}}],[\"follower和leader绝对是在不同的机器\",{\"1\":{\"1020\":1}}],[\"follower\",{\"1\":{\"1020\":2,\"1064\":1}}],[\"follows\",{\"1\":{\"448\":1}}],[\"fossil\",{\"1\":{\"443\":1}}],[\"found\",{\"1\":{\"326\":1,\"463\":1,\"710\":1,\"754\":1,\"766\":2,\"1282\":1,\"1400\":4,\"1457\":1}}],[\"foobared\",{\"1\":{\"965\":1}}],[\"foo代指某个集合\",{\"1\":{\"855\":1}}],[\"foo\",{\"1\":{\"176\":2,\"855\":4,\"1133\":1,\"1303\":2,\"1307\":2}}],[\"fonet\",{\"1\":{\"142\":1}}],[\"fowler的money模式的实现\",{\"1\":{\"133\":1}}],[\"fowler\",{\"1\":{\"124\":1}}],[\"forward\",{\"1\":{\"1338\":1}}],[\"forwarded\",{\"1\":{\"1130\":1,\"1131\":1,\"1133\":1,\"1158\":1}}],[\"formfile\",{\"1\":{\"1281\":1}}],[\"form\",{\"1\":{\"1281\":6,\"1283\":4}}],[\"form表单\",{\"1\":{\"1281\":1}}],[\"formatcomplex\",{\"1\":{\"1392\":4}}],[\"formatfloat\",{\"1\":{\"1390\":7}}],[\"formatbool\",{\"1\":{\"1387\":3}}],[\"format=mixed\",{\"1\":{\"822\":3}}],[\"format\",{\"1\":{\"224\":1,\"279\":3,\"280\":2,\"326\":2,\"435\":2,\"721\":1,\"724\":1,\"892\":1,\"1130\":1,\"1131\":1,\"1133\":1,\"1158\":1,\"1289\":1,\"1303\":1,\"1308\":1,\"1431\":3}}],[\"forever\",{\"1\":{\"1194\":14,\"1195\":12}}],[\"foreach传递函数显示信息\",{\"1\":{\"863\":1}}],[\"foreach中必须传递一个函数来处理每条迭代的数据信息\",{\"1\":{\"863\":1}}],[\"foreach\",{\"1\":{\"863\":5}}],[\"foreach迭代循环\",{\"1\":{\"863\":1}}],[\"foreign\",{\"1\":{\"653\":1,\"892\":2}}],[\"for循环\",{\"1\":{\"248\":1,\"421\":1,\"511\":1}}],[\"for语句可以被当作while来使用\",{\"1\":{\"232\":1}}],[\"fortio\",{\"1\":{\"145\":1}}],[\"force\",{\"1\":{\"84\":2}}],[\"fork\",{\"1\":{\"53\":2,\"459\":5,\"980\":1,\"981\":1}}],[\"for\",{\"0\":{\"233\":1,\"234\":1,\"420\":1,\"509\":1},\"1\":{\"4\":1,\"5\":1,\"77\":1,\"142\":1,\"178\":1,\"192\":2,\"211\":1,\"224\":1,\"226\":1,\"232\":1,\"233\":8,\"234\":9,\"235\":4,\"236\":4,\"248\":3,\"249\":3,\"258\":5,\"263\":2,\"264\":1,\"265\":1,\"266\":3,\"269\":1,\"282\":2,\"284\":1,\"303\":2,\"306\":3,\"314\":1,\"318\":1,\"319\":2,\"320\":4,\"322\":2,\"324\":1,\"325\":1,\"326\":4,\"327\":3,\"328\":3,\"344\":2,\"347\":2,\"365\":1,\"367\":1,\"370\":4,\"371\":1,\"375\":1,\"378\":1,\"401\":1,\"402\":2,\"408\":2,\"412\":4,\"417\":2,\"420\":9,\"421\":4,\"422\":1,\"426\":1,\"427\":4,\"428\":1,\"429\":1,\"430\":1,\"431\":2,\"432\":4,\"434\":1,\"435\":1,\"436\":4,\"440\":1,\"453\":1,\"454\":2,\"474\":1,\"475\":4,\"476\":3,\"477\":5,\"492\":1,\"494\":1,\"498\":1,\"499\":1,\"500\":1,\"509\":2,\"511\":2,\"512\":1,\"513\":1,\"537\":1,\"545\":2,\"556\":1,\"557\":1,\"614\":1,\"630\":2,\"633\":3,\"653\":3,\"654\":2,\"656\":2,\"686\":1,\"702\":1,\"713\":2,\"717\":3,\"756\":1,\"766\":1,\"821\":4,\"828\":2,\"858\":1,\"863\":3,\"876\":2,\"881\":1,\"892\":1,\"908\":1,\"993\":1,\"1010\":2,\"1036\":2,\"1047\":7,\"1078\":1,\"1130\":1,\"1131\":1,\"1133\":1,\"1158\":1,\"1164\":2,\"1165\":3,\"1194\":1,\"1197\":1,\"1223\":2,\"1238\":1,\"1281\":1,\"1289\":1,\"1304\":1,\"1374\":3,\"1417\":4,\"1419\":1,\"1425\":1,\"1426\":1,\"1434\":1,\"1445\":2,\"1447\":1}}],[\"fullnameencoder\",{\"1\":{\"1303\":1}}],[\"full\",{\"1\":{\"993\":1}}],[\"fulltext\",{\"1\":{\"741\":2,\"810\":1}}],[\"fullchain\",{\"1\":{\"84\":3}}],[\"fuzz中的支持的类型如下\",{\"1\":{\"478\":1}}],[\"fuzzing\",{\"1\":{\"477\":1}}],[\"fuzzing来了解更多概念\",{\"1\":{\"477\":1}}],[\"fuzz参数再次执行\",{\"1\":{\"477\":1}}],[\"fuzz时\",{\"1\":{\"477\":1}}],[\"fuzzreverse\",{\"1\":{\"477\":26}}],[\"fuzzminimizetime\",{\"1\":{\"469\":1}}],[\"fuzztime参数限制时间\",{\"1\":{\"477\":1}}],[\"fuzztime\",{\"1\":{\"469\":1,\"477\":3}}],[\"fuzz\",{\"1\":{\"469\":1,\"477\":43,\"483\":1}}],[\"fundamentals\",{\"1\":{\"886\":1}}],[\"fund\",{\"1\":{\"794\":2}}],[\"fun\",{\"1\":{\"347\":1,\"766\":1}}],[\"funcs\",{\"1\":{\"1420\":1}}],[\"funcs方法来添加自定义函数\",{\"1\":{\"1420\":1}}],[\"funcmap\",{\"1\":{\"1420\":4}}],[\"funcname\",{\"1\":{\"1420\":1}}],[\"func2\",{\"1\":{\"514\":1}}],[\"func来进行获取\",{\"1\":{\"370\":1}}],[\"functionkey\",{\"1\":{\"1302\":3,\"1303\":1}}],[\"function\",{\"1\":{\"293\":3,\"470\":2,\"524\":1,\"820\":3,\"822\":2,\"863\":1,\"1056\":1,\"1078\":2}}],[\"func是函数声明关键字\",{\"1\":{\"172\":1}}],[\"func\",{\"1\":{\"4\":1,\"5\":2,\"172\":1,\"175\":1,\"177\":1,\"178\":1,\"187\":3,\"189\":2,\"201\":1,\"206\":2,\"208\":1,\"209\":3,\"210\":2,\"213\":1,\"214\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":2,\"221\":2,\"223\":1,\"224\":5,\"225\":1,\"226\":1,\"228\":3,\"229\":2,\"230\":5,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":2,\"236\":2,\"241\":3,\"244\":1,\"247\":1,\"248\":2,\"250\":1,\"251\":2,\"253\":4,\"254\":3,\"255\":2,\"256\":2,\"257\":3,\"258\":5,\"259\":1,\"260\":3,\"261\":3,\"262\":3,\"263\":2,\"264\":2,\"265\":1,\"266\":2,\"268\":1,\"269\":11,\"274\":1,\"275\":6,\"276\":1,\"277\":2,\"278\":6,\"279\":3,\"280\":6,\"281\":4,\"282\":8,\"283\":8,\"284\":1,\"285\":14,\"286\":3,\"287\":14,\"292\":1,\"293\":19,\"294\":4,\"297\":1,\"298\":2,\"299\":1,\"300\":7,\"301\":1,\"302\":1,\"303\":9,\"304\":1,\"305\":1,\"306\":2,\"307\":1,\"308\":2,\"309\":2,\"310\":2,\"312\":1,\"313\":1,\"314\":6,\"317\":2,\"318\":5,\"319\":1,\"320\":3,\"322\":3,\"323\":3,\"324\":4,\"326\":2,\"327\":4,\"337\":4,\"338\":2,\"339\":6,\"340\":6,\"341\":4,\"343\":5,\"344\":10,\"348\":2,\"350\":1,\"351\":4,\"352\":2,\"353\":1,\"354\":1,\"355\":3,\"356\":3,\"357\":1,\"358\":2,\"359\":2,\"360\":8,\"361\":2,\"362\":2,\"364\":2,\"365\":2,\"366\":1,\"367\":2,\"368\":2,\"369\":3,\"370\":9,\"371\":1,\"373\":2,\"374\":2,\"375\":2,\"376\":2,\"377\":2,\"378\":6,\"379\":3,\"381\":2,\"382\":3,\"384\":2,\"385\":4,\"388\":3,\"390\":1,\"391\":2,\"392\":2,\"393\":14,\"394\":1,\"395\":3,\"396\":15,\"397\":10,\"398\":2,\"400\":7,\"401\":8,\"402\":9,\"403\":5,\"404\":2,\"405\":4,\"406\":1,\"408\":4,\"409\":3,\"410\":2,\"412\":8,\"414\":2,\"415\":1,\"416\":3,\"417\":10,\"418\":9,\"419\":5,\"420\":5,\"421\":16,\"422\":9,\"425\":6,\"426\":3,\"427\":8,\"428\":5,\"429\":5,\"430\":2,\"431\":11,\"432\":12,\"434\":14,\"435\":9,\"436\":14,\"437\":1,\"439\":2,\"440\":3,\"441\":2,\"446\":4,\"448\":1,\"449\":3,\"453\":1,\"463\":3,\"468\":5,\"470\":6,\"471\":13,\"472\":5,\"473\":11,\"474\":4,\"475\":4,\"477\":10,\"491\":3,\"492\":2,\"494\":1,\"498\":1,\"499\":1,\"500\":1,\"501\":1,\"513\":7,\"514\":5,\"515\":6,\"516\":6,\"537\":1,\"545\":3,\"546\":4,\"548\":4,\"554\":1,\"556\":3,\"557\":2,\"558\":1,\"584\":1,\"620\":4,\"630\":2,\"633\":2,\"634\":1,\"635\":5,\"649\":4,\"651\":5,\"653\":4,\"654\":3,\"656\":2,\"692\":4,\"702\":1,\"704\":1,\"705\":1,\"706\":1,\"707\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":4,\"744\":1,\"745\":2,\"746\":2,\"748\":2,\"749\":1,\"751\":2,\"754\":2,\"756\":1,\"766\":1,\"830\":1,\"881\":2,\"882\":2,\"883\":2,\"884\":4,\"890\":1,\"891\":1,\"893\":4,\"894\":1,\"895\":1,\"896\":1,\"897\":4,\"910\":1,\"911\":2,\"1035\":1,\"1036\":2,\"1037\":1,\"1047\":8,\"1087\":2,\"1092\":2,\"1245\":2,\"1275\":2,\"1277\":2,\"1280\":4,\"1281\":4,\"1282\":2,\"1283\":2,\"1286\":2,\"1289\":2,\"1302\":5,\"1303\":4,\"1304\":1,\"1305\":1,\"1306\":3,\"1307\":1,\"1310\":3,\"1311\":1,\"1312\":1,\"1313\":2,\"1314\":1,\"1315\":1,\"1316\":2,\"1317\":1,\"1319\":2,\"1320\":1,\"1321\":1,\"1327\":3,\"1330\":1,\"1331\":1,\"1333\":1,\"1334\":1,\"1336\":1,\"1337\":4,\"1338\":3,\"1339\":1,\"1340\":3,\"1341\":4,\"1346\":1,\"1347\":1,\"1348\":1,\"1349\":1,\"1350\":1,\"1351\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1355\":1,\"1356\":1,\"1357\":1,\"1358\":1,\"1359\":1,\"1360\":1,\"1361\":1,\"1362\":1,\"1363\":1,\"1364\":1,\"1367\":2,\"1368\":2,\"1369\":2,\"1370\":2,\"1371\":2,\"1372\":2,\"1373\":2,\"1374\":3,\"1376\":1,\"1377\":1,\"1378\":1,\"1379\":1,\"1380\":4,\"1381\":1,\"1384\":2,\"1385\":2,\"1386\":2,\"1387\":2,\"1388\":1,\"1389\":2,\"1390\":2,\"1391\":2,\"1392\":2,\"1393\":1,\"1396\":2,\"1397\":2,\"1398\":6,\"1399\":2,\"1400\":3,\"1401\":2,\"1402\":5,\"1403\":3,\"1404\":7,\"1405\":6,\"1406\":2,\"1407\":4,\"1408\":5,\"1409\":5,\"1410\":6,\"1411\":2,\"1412\":2,\"1413\":2,\"1415\":3,\"1417\":5,\"1419\":1,\"1420\":3,\"1425\":3,\"1426\":3,\"1428\":4,\"1429\":12,\"1432\":1,\"1433\":2,\"1434\":2,\"1435\":2,\"1440\":2,\"1441\":2,\"1442\":2,\"1443\":6,\"1444\":2,\"1445\":3,\"1446\":2,\"1447\":2,\"1448\":2}}],[\"棋盘问题\",{\"1\":{\"4\":1}}],[\"和t2\",{\"1\":{\"1426\":1}}],[\"和shouldbind\",{\"1\":{\"1279\":1}}],[\"和动作\",{\"1\":{\"1251\":1}}],[\"和端口进行访问\",{\"1\":{\"1234\":1}}],[\"和cmd一样\",{\"1\":{\"1193\":1}}],[\"和私有仓库\",{\"1\":{\"1183\":1}}],[\"和仓库注册服务器\",{\"1\":{\"1183\":1}}],[\"和内存限制\",{\"1\":{\"1201\":1}}],[\"和内存过高影响整体系统性能\",{\"1\":{\"1063\":1}}],[\"和内存的性能瓶颈\",{\"1\":{\"634\":1}}],[\"和队列\",{\"1\":{\"1053\":1}}],[\"和其他消息队列不同的是\",{\"1\":{\"1053\":1}}],[\"和其他不安全协议检索的模块路径前缀的通用模式列表\",{\"1\":{\"461\":1}}],[\"和从\",{\"1\":{\"990\":1}}],[\"和最终一致性\",{\"1\":{\"906\":1}}],[\"和持久性\",{\"1\":{\"904\":1}}],[\"和直接写入\",{\"1\":{\"863\":1}}],[\"和分组查询group\",{\"1\":{\"814\":1}}],[\"和more\",{\"1\":{\"813\":1}}],[\"和make的区别\",{\"1\":{\"609\":1,\"681\":1}}],[\"和指向这些元素的指针\",{\"1\":{\"805\":1}}],[\"和二叉树一样比父节点大的数据存储在右边\",{\"1\":{\"803\":1}}],[\"和业务沟通能不排序就不排序\",{\"1\":{\"796\":1}}],[\"和int\",{\"1\":{\"791\":1}}],[\"和id\",{\"1\":{\"50\":1}}],[\"和9302\",{\"1\":{\"770\":1}}],[\"和容器化的实践\",{\"1\":{\"655\":1}}],[\"和应用指标\",{\"1\":{\"655\":1}}],[\"和第\",{\"1\":{\"649\":2}}],[\"和消息重试机制\",{\"1\":{\"641\":1}}],[\"和线程对比\",{\"1\":{\"622\":1,\"694\":1}}],[\"和go的interface有什么区别\",{\"1\":{\"565\":1,\"637\":1}}],[\"和解锁\",{\"1\":{\"556\":1}}],[\"和解码器\",{\"1\":{\"124\":1}}],[\"和函数的区别是方法是有接受者的\",{\"1\":{\"515\":1}}],[\"和测试文件\",{\"1\":{\"468\":1,\"486\":1}}],[\"和上面例子中的withdeadline用法一样\",{\"1\":{\"428\":1}}],[\"和上面的操作一样\",{\"1\":{\"26\":1}}],[\"和一个内嵌的context类型的字段\",{\"1\":{\"426\":1}}],[\"和hoist\",{\"1\":{\"293\":1}}],[\"和参数一样\",{\"1\":{\"280\":1}}],[\"和搜索树\",{\"1\":{\"258\":1}}],[\"和powerpoint\",{\"1\":{\"143\":1}}],[\"和三重数据加密算法\",{\"1\":{\"124\":1}}],[\"和fmt\",{\"1\":{\"121\":1}}],[\"和需求2\",{\"1\":{\"36\":1}}],[\"和linux的开源精神不符\",{\"1\":{\"12\":1}}],[\"和\",{\"1\":{\"2\":1,\"153\":1,\"164\":1,\"558\":1,\"573\":1,\"587\":1,\"588\":1,\"619\":1,\"633\":1,\"634\":1,\"635\":2,\"636\":1,\"637\":4,\"638\":2,\"639\":2,\"641\":1,\"644\":1,\"645\":4,\"656\":3,\"659\":1,\"660\":1,\"691\":1,\"743\":1,\"794\":1,\"809\":1,\"814\":2,\"822\":3,\"1006\":1,\"1026\":1,\"1056\":1,\"1067\":1,\"1163\":1,\"1182\":1,\"1307\":1,\"1413\":1,\"1418\":1}}],[\"介绍如下\",{\"1\":{\"996\":1}}],[\"介绍一个项目\",{\"1\":{\"607\":1,\"679\":1}}],[\"介绍一下业务表的字段\",{\"1\":{\"581\":1,\"653\":2}}],[\"介绍实验室的科研项目\",{\"1\":{\"599\":1,\"671\":1}}],[\"介绍项目中redis是怎么用的\",{\"1\":{\"598\":1,\"670\":1}}],[\"介绍双亲委派机制\",{\"1\":{\"598\":1,\"670\":1}}],[\"介绍最近的项目\",{\"1\":{\"564\":1,\"636\":2}}],[\"介绍\",{\"0\":{\"2\":1,\"55\":1,\"1273\":1},\"1\":{\"464\":1}}],[\"档案主页\",{\"0\":{\"1\":1},\"1\":{\"2\":1}}],[\"你好\",{\"1\":{\"1401\":2,\"1423\":2}}],[\"你好世界\",{\"1\":{\"1398\":1}}],[\"你给\",{\"1\":{\"1307\":1}}],[\"你就赋予了主体alice在对象\",{\"1\":{\"1256\":1}}],[\"你有不想过多消耗服务器的资源\",{\"1\":{\"1163\":1}}],[\"你有什么问题吗\",{\"1\":{\"609\":1,\"681\":1}}],[\"你往里面倒水\",{\"1\":{\"1158\":1}}],[\"你访问的是\",{\"1\":{\"1142\":1}}],[\"你必须是使用\",{\"1\":{\"1132\":1,\"1173\":1}}],[\"你注释的情况下也是nobody\",{\"1\":{\"1130\":1,\"1131\":1}}],[\"你是怎么通过token获取客户的信息\",{\"1\":{\"625\":1,\"697\":1}}],[\"你一般在什么场景下会用\",{\"1\":{\"622\":1,\"694\":1}}],[\"你一般怎么使用\",{\"1\":{\"583\":1,\"655\":2}}],[\"你看这个能命中这个索引吗\",{\"1\":{\"622\":1,\"694\":1}}],[\"你怎么分析它\",{\"1\":{\"622\":1,\"694\":1}}],[\"你怎么设计这个查询语句\",{\"1\":{\"593\":1,\"665\":1}}],[\"你常用的有哪些\",{\"1\":{\"598\":1,\"670\":1}}],[\"你们的订单允许取消吗\",{\"1\":{\"592\":1,\"664\":1}}],[\"你现在数据库的设计上似乎有些问题\",{\"1\":{\"592\":1,\"664\":1}}],[\"你觉得自己的最大的优势是什么\",{\"1\":{\"607\":1,\"679\":1}}],[\"你觉得你的优势是什么\",{\"1\":{\"606\":1,\"678\":1}}],[\"你觉得你成就感最大的事情是什么\",{\"1\":{\"598\":1,\"670\":1}}],[\"你觉得你过去做的最有挑战的事是什么\",{\"1\":{\"598\":1,\"670\":1}}],[\"你觉得项目难点是哪些\",{\"1\":{\"592\":1,\"664\":1}}],[\"你觉得科研中什么能力比较重要\",{\"1\":{\"585\":1,\"657\":1}}],[\"你了解乐观锁的使用场景和实现逻辑吗\",{\"1\":{\"588\":1,\"660\":1}}],[\"你会怎么写这个sql\",{\"1\":{\"593\":1,\"665\":1}}],[\"你会怎么做\",{\"1\":{\"583\":1,\"655\":2}}],[\"你会发现某些操作命令行比窗口化操作要简单\",{\"1\":{\"55\":1}}],[\"你的用户名\",{\"1\":{\"1193\":1}}],[\"你的权重weight会从0慢慢升级到一个正常的value\",{\"1\":{\"1163\":1}}],[\"你的项目的请求上限是多少\",{\"1\":{\"573\":1,\"645\":2}}],[\"你的项目你认为是cpu密集型还是io密集型\",{\"1\":{\"573\":1,\"645\":2}}],[\"你的请求我知道了\",{\"1\":{\"82\":1}}],[\"你在里面负责的部分\",{\"1\":{\"569\":1,\"641\":1}}],[\"你如何理解interface类型\",{\"1\":{\"563\":1,\"635\":2}}],[\"你如何停⽌它\",{\"0\":{\"539\":1}}],[\"你\",{\"1\":{\"184\":1,\"1398\":1}}],[\"你也没法找到它们的定义\",{\"1\":{\"303\":1}}],[\"你也可以选择存储引擎\",{\"1\":{\"775\":1}}],[\"你也可以自己进行丰富\",{\"1\":{\"448\":1}}],[\"你也可以使用io\",{\"1\":{\"403\":1}}],[\"你也可以在defer中修改函数的返回值\",{\"1\":{\"283\":1}}],[\"你也可以把它理解为一个构造函数\",{\"1\":{\"268\":1}}],[\"你也可以把它和fmt包结合起来用\",{\"1\":{\"220\":1}}],[\"你也可以编写一个函数来实例化结构体\",{\"1\":{\"268\":1}}],[\"你也可以通过官方工具stringer来自动生成枚举\",{\"1\":{\"213\":1}}],[\"你也可以给它们起别名\",{\"1\":{\"175\":1}}],[\"你也许会想\",{\"1\":{\"12\":1}}],[\"你可能会以为它会被展开成下面这段\",{\"1\":{\"208\":1}}],[\"你可能会疑惑为什么不是\",{\"1\":{\"208\":1}}],[\"你可能在其它oop语言中见过public\",{\"1\":{\"174\":1}}],[\"你可以理解为交换机\",{\"1\":{\"1053\":1}}],[\"你可以通过添加数字后缀如g\",{\"1\":{\"1262\":1}}],[\"你可以通过\",{\"1\":{\"965\":1}}],[\"你可以补充或提醒漏掉的问题\",{\"1\":{\"639\":1}}],[\"你可以看到的是go在服务端领域应用较为广泛\",{\"1\":{\"335\":1}}],[\"你可以参照下面这些项目来进行学习\",{\"1\":{\"330\":1}}],[\"你可以尝试以下的几个开源web框架\",{\"1\":{\"330\":1}}],[\"你可以前往go\",{\"1\":{\"234\":1}}],[\"你可以同时初始化多个变量\",{\"1\":{\"233\":1}}],[\"你可以像直接读文件一样\",{\"1\":{\"223\":1}}],[\"你可以只写一行\",{\"1\":{\"192\":1}}],[\"你可以这么写\",{\"1\":{\"175\":1}}],[\"你可以在那些上游服务之前额外地实现一些功能\",{\"1\":{\"1073\":1}}],[\"你可以在集群中随便找个其他的也是可以的\",{\"1\":{\"1010\":1}}],[\"你可以在intro\",{\"1\":{\"65\":1}}],[\"你可以在这里放置你的主体内容\",{\"1\":{\"0\":1}}],[\"你可以使用这个自定义的id来创建指向该标题的链接\",{\"1\":{\"64\":1}}],[\"你可以先把linux\",{\"1\":{\"53\":1}}],[\"你可以fork到自己的仓库\",{\"1\":{\"53\":1}}],[\"你可以给它打上标签\",{\"1\":{\"37\":1}}],[\"你需要在接下来的过程中说服我\",{\"1\":{\"604\":1,\"676\":1}}],[\"你需要在页面\",{\"1\":{\"0\":1}}],[\"你需要使用绝对路径\",{\"1\":{\"65\":1}}],[\"你接到第一个需求\",{\"1\":{\"58\":1}}],[\"你并没有权限\",{\"1\":{\"53\":1}}],[\"你其实不是linux\",{\"1\":{\"53\":1}}],[\"你所在\",{\"1\":{\"30\":1}}],[\"你应该在页面\",{\"1\":{\"2\":1}}]],\"version\":2}}")).map(([e,t])=>[e,It(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const r=Ct[s];e==="suggest"?self.postMessage([e,o,et(t,r,n)]):e==="search"?self.postMessage([e,o,tt(t,r,n)]):self.postMessage({suggestions:[e,o,et(t,r,n)],results:[e,o,tt(t,r,n)]})};
//# sourceMappingURL=index.js.map
